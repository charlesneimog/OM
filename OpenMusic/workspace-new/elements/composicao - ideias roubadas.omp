; OM File Header - Saved 2021/07/12 14:18:40
; (6.19 :patc (om-make-point 280 60) (om-make-point 167 10) (om-make-point 1716 816) "" 183 0 "2021/06/08 13:09:09" "2021/07/09 12:34:03")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"C:../../../Composition/Ideias Roubadas II/channel.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/velocity.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/notas.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/ritmo.txt\"") (list (quote :sound) "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/ideias/001.aiff\"" "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/temp-sound5876198.wav\"" "#P\"C:../in-files/Bassclarinet1.aif\"" "#P\"C:../in-files/cowbell.aif\""))
(in-package :om)(load-lib-for (quote ("OM-JI" "OM-CKN" "OM-Spat")))(setf *om-current-persistent* (om-load-patch1 "composicao - ideias roubadas" (quote ((let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 543 677) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1132 131) (om-make-point 43 32) 497 "497" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1056 110) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 1056 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 896 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 824 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 650 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 547 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "001.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 715 636) (om-make-point 282 88) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "ideias")) :device nil :host nil :name "001" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "001.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "temp-sound5876198.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 560 352) (om-make-point 282 88) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "temp-sound5876198" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "temp-sound5876198.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-MULTI" (quote sound-seq-multi) (quote ((om-load-inputfun (quote input-funbox) "a list of sounds." "SOUNDS" nil))) (om-make-point 601 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 129 290) (om-make-point 139 32) (list 20 25 40 118 328) "(20 25 40 118 328)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "canais" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "choose-to-rest" nil) (om-load-inputfun (quote input-funbox) "" "true-durations" nil))) (om-make-point 252 348) (om-make-point 183 60) nil "x" (list (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 202 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 927 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 987 545) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "true-durations" 4 (om-make-point 666 214) "" "true-durations" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 759 604) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 748 688) (om-make-point 270 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "choose-to-rest" 3 (om-make-point 713 344) "" "choose-to-rest" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 704 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 402 503) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 134 307) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 72 526) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 867 793) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 493 397) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 551 295) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 176 609) (om-make-point 172 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "canais" 1 (om-make-point 536 59) "" "canais" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 353 311) (om-make-point 110 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 401 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 336 198) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 925 883) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 825 883) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((17 0 0 0 nil 0) (7 0 0 1 ((om-make-point 728 495) (om-make-point 664 496) (om-make-point 635 180) (om-make-point 236 121) (om-make-point 236 126)) 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (7 0 4 0 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (15 0 5 2 nil 0) (6 0 7 0 nil 0) (13 0 8 0 nil 0) (10 0 9 0 nil 0) (13 0 10 0 nil 0) (9 0 11 0 nil 0) (5 0 12 0 nil 0) (14 0 13 0 nil 0) (18 0 15 0 nil 0) (8 0 15 1 nil 0) (11 0 15 2 nil 0) (19 0 18 1 nil 0) (20 0 19 0 nil 0) (16 0 19 1 nil 0) (0 0 20 0 nil 0) (12 1 21 0 nil 0) (12 0 22 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 431 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 33 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 490 561) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 1280 517) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 1084 502) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 903 490) (om-make-point 147 32) (list (list 0 0 0 0 177 5657)) "((0 0 0 0 177 5657))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 775 441) (om-make-point 176 32) (list (list 0 1.7 0 -3.8 177 5657)) "((0 1.7 0 -3.8 177 5657))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 791 513) (om-make-point 35 32) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 738 514) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 689 514) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 538 513) (om-make-point 43 32) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 591 517) (om-make-point 36 32) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 640 516) (om-make-point 36 32) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPAT-SYNTH 3" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "sdif file or spat-matrix" "SELF" nil) (om-load-inputfun (quote input-funbox) "out/speakers config" "OUT-CONFIG" 2) (om-load-inputkeyword (quote input-keyword) "output file pathname" "out-path" (quote :out-path) nil nil))) (om-make-point 687 832) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1148 773) (om-make-point 71 32) "ideias/" "\"ideias/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MERGE-PATHNAMES" (quote merge-pathnames) (quote ((om-load-inputfun (quote input-funbox) "PATHNAME" "PATHNAME" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1205 806) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 721 18) (om-make-point 45 32) -1.0 "-1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 1173 669) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 757 771) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.19 "(lambda (x) (format nil \"~3,'0D\" x))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 1246 547) nil (list "000000") nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 361 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 185 237) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 209 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 264 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1520 614) (om-make-point 59 32) ".wav" "\".wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 1387 703) (om-make-point 125 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 315 790) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 646 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1045 167) (om-make-point 36 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 985 38) (om-make-point 28 32) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 951 29) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1.0))) (om-make-point 937 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 881 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1.0))) (om-make-point 756 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 740 222) (om-make-point 381 177) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-0.8716717 -0.74088526)) (quote (-0.41581035 -0.031377793)) (quote (0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0))) newobj) nil nil (pairlis (quote (picture mode winpos winsize line-width bg-color show-axes show-room room-size)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800) 1.0 nil 1 1 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 290 515) (om-make-point 50 32) (list 0.0) "(0.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 184 410) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPAT-MATRIX" (quote spat-matrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote editor-keyword) "" "sounds" (quote :sounds) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durations" (quote :durations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "onsets" (quote :onsets) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "trajectories" (quote :trajectories) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "src-names" (quote :src-names) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "orientations" (quote :orientations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "apertures" (quote :apertures) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "presence" (quote :presence) 90 nil) (om-load-inputkeyword (quote editor-keyword) "" "warmth" (quote :warmth) 30 nil) (om-load-inputkeyword (quote editor-keyword) "" "brillance" (quote :brillance) 30 nil) (om-load-inputkeyword (quote editor-keyword) "" "room-presence" (quote :room-presence) 48 nil) (om-load-inputkeyword (quote editor-keyword) "" "running-reverberance" (quote :running-reverberance) 34 nil) (om-load-inputkeyword (quote editor-keyword) "" "envelopment" (quote :envelopment) 24 nil) (om-load-inputkeyword (quote editor-keyword) "" "omni-filter" (quote :omni-filter) (list (list 0 1.7 0 -3.8 177 5657)) nil) (om-load-inputkeyword (quote editor-keyword) "" "axis-filter" (quote :axis-filter) (list (list 0 0 0 0 177 5657)) nil) (om-load-inputkeyword (quote editor-keyword) "" "room" (quote :room) 1 nil) (om-load-inputkeyword (quote control-keyword) "" "K0" (quote :k0) nil nil) (om-load-inputkeyword (quote control-keyword) "" "K1" (quote :k1) nil nil))) (om-make-point 68 550) (om-make-point 1033 176) (if (find-class (quote spat-matrix) nil) (let ((array (make-instance (quote spat-matrix) :numcols 2))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote sounds)) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Bassclarinet1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "cowbell" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj))) (setf (slot-value array (quote src-names)) nil) (setf (slot-value array (quote trajectories)) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj))) (setf (slot-value array (quote durations)) 10) (setf (slot-value array (quote onsets)) (list 1.0 0.0)) (setf (slot-value array (quote orientations)) nil) (setf (slot-value array (quote apertures)) nil) (setf (slot-value array (quote presence)) 90) (setf (slot-value array (quote warmth)) 30) (setf (slot-value array (quote brillance)) 30) (setf (slot-value array (quote room-presence)) 48) (setf (slot-value array (quote running-reverberance)) 34) (setf (slot-value array (quote envelopment)) 24) (setf (slot-value array (quote omni-filter)) (list (list 0 1.7 0 -3.8 177 5657))) (setf (slot-value array (quote axis-filter)) (list (list 0 0 0 0 177 5657))) (setf (slot-value array (quote room)) 1) (setf (lcontrols array) (list (list (quote :k0) nil) (list (quote :k1) nil))) (setf (data array) (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Bassclarinet1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "cowbell" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj)) (list nil nil) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (1.0 1.0 0.98 0.96 0.92 0.88 0.83 0.76 0.7 0.62 0.54 0.45 0.36 0.27 0.17 0.07 -0.03 -0.13 -0.23 -0.32 -0.42 -0.5 -0.59 -0.67 -0.74 -0.8 -0.86 -0.9 -0.94 -0.97 -0.99 -1.0 -1.0 -0.99 -0.97 -0.94 -0.9 -0.85 -0.79 -0.73 -0.65 -0.57 -0.49 -0.4 -0.31 -0.21 -0.11 -0.01 0.09 0.19 0.28 0.38 0.47 0.55 0.63 0.71 0.78 0.83 0.89 0.93 0.96 0.98 1.0)) (quote (0.0 0.1 0.2 0.3 0.39 0.48 0.56 0.64 0.72 0.78 0.84 0.89 0.93 0.96 0.99 1.0 1.0 0.99 0.97 0.95 0.91 0.86 0.81 0.75 0.68 0.6 0.52 0.43 0.33 0.24 0.14 0.04 -0.06 -0.16 -0.26 -0.35 -0.44 -0.53 -0.61 -0.69 -0.76 -0.82 -0.87 -0.92 -0.95 -0.98 -0.99 -1.0 -1.0 -0.98 -0.96 -0.93 -0.88 -0.83 -0.77 -0.71 -0.63 -0.55 -0.46 -0.37 -0.28 -0.18 -0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (-1.0 -1.0 -0.98 -0.96 -0.92 -0.88 -0.83 -0.76 -0.7 -0.62 -0.54 -0.45 -0.36 -0.27 -0.17 -0.07 0.03 0.13 0.23 0.32 0.42 0.5 0.59 0.67 0.74 0.8 0.86 0.9 0.94 0.97 0.99 1.0 1.0 0.99 0.97 0.94 0.9 0.85 0.79 0.73 0.65 0.57 0.49 0.4 0.31 0.21 0.11 0.01 -0.09 -0.19 -0.28 -0.38 -0.47 -0.55 -0.63 -0.71 -0.78 -0.83 -0.89 -0.93 -0.96 -0.98 -1.0)) (quote (0.0 -0.1 -0.2 -0.3 -0.39 -0.48 -0.56 -0.64 -0.72 -0.78 -0.84 -0.89 -0.93 -0.96 -0.99 -1.0 -1.0 -0.99 -0.97 -0.95 -0.91 -0.86 -0.81 -0.75 -0.68 -0.6 -0.52 -0.43 -0.33 -0.24 -0.14 -0.04 0.06 0.16 0.26 0.35 0.44 0.53 0.61 0.69 0.76 0.82 0.87 0.92 0.95 0.98 0.99 1.0 1.0 0.98 0.96 0.93 0.88 0.83 0.77 0.71 0.63 0.55 0.46 0.37 0.28 0.18 0.08)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 10 10) (list 1.0 0.0) (list nil nil) (list nil nil) (list 90 90) (list 30 30) (list 30 30) (list 48 48) (list 34 34) (list 24 24) (list (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657)) (list (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657)) (list 1 1))) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "group 1" (list 0 (quote t)) (list 1 nil) (list 2 (quote t))) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t)) (list 3 (quote t)) (list 4 (quote t)) (list 5 (quote t)) (list 6 (quote t)) (list 7 (quote t)) (list 8 (quote t)) (list 9 (quote t)) (list 10 (quote t)) (list 11 (quote t)) (list 12 (quote t)) (list 13 (quote t)) (list 14 (quote t)) (list 15 (quote t)) (list 16 (quote t)) (list 17 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil) (list 3 nil) (list 4 nil) (list 5 nil) (list 6 nil) (list 7 nil) (list 8 nil) (list 9 nil) (list 10 nil) (list 11 nil) (list 12 nil) (list 13 nil) (list 14 nil) (list 15 nil) (list 16 nil) (list 17 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 988 465) (om-make-point 567 563))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 457 324) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 374 145) (om-make-point 152 94) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 23 158) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 444 876) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 192 859) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((34 0 10 0 nil 0) (15 0 10 1 nil 0) (12 0 10 2 nil 0) (11 0 12 0 nil 0) (14 0 12 1 nil 0) (22 0 14 0 nil 0) (0 0 16 0 nil 0) (19 0 17 0 nil 0) (18 0 19 0 nil 0) (20 0 19 1 nil 0) (38 0 20 0 nil 0) (16 0 22 0 nil 0) (21 0 22 1 nil 0) (10 0 23 0 nil 0) (31 0 24 0 nil 0) (27 0 28 0 nil 0) (26 0 28 1 nil 0) (30 0 29 0 nil 0) (28 0 29 1 nil 0) (13 0 30 0 nil 0) (29 0 31 1 nil 0) (29 0 31 2 nil 0) (25 0 31 4 nil 0) (33 0 34 1 nil 0) (37 0 34 2 nil 0) (35 0 34 3 nil 0) (32 0 34 4 nil 0) (24 0 34 5 nil 0) (7 0 34 9 nil 0) (8 0 34 10 nil 0) (9 0 34 11 nil 0) (6 0 34 12 nil 0) (5 0 34 13 nil 0) (4 0 34 14 nil 0) (3 0 34 15 nil 0) (2 0 34 16 nil 0) (1 0 34 17 nil 0) (36 0 35 0 nil 0) (37 0 36 0 nil 0) (38 0 37 0 nil 0) (23 1 39 0 nil 0) (23 0 40 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 169 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ideias roubadas" (om-load-patch-abs1 "ideias roubadas" (quote ((let ((box (om-load-boxout "output 4" 3 (om-make-point 920 736) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil))) (om-make-point 868 591) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 783 472) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 627 747) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 583 627) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 384 418) (om-make-point 35 32) 92 "92" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 246 719) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 267 293) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-STEREO-TO-MONO" (quote sound-stereo-to-mono) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 384 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 105) (om-make-point 139 70) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 314 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 214 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 1 5 0 nil 0) (0 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 265 656) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 194 779) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOICE->SAMPLES-SOUND" (quote voice->samples-sound) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil))) (om-make-point 68 634) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 922 477) (om-make-point 501 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-SAMPLES-FOLDER" (quote ircam-samples-folder) (quote ((om-load-inputfun (quote input-funbox) "Name of the composer" "X" nil))) (om-make-point 1146 582) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 929 332) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "channel" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 940 240) (om-make-point 632 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 659 154) (om-make-point 640 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "no comment") "" (om-make-point 512 364) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 512 77) (om-make-point 618 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 616 184) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "velocity" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 368 175) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "notas" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 204 284) (om-make-point 78 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 32) (om-make-point 627 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 100 144) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "ritmo" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 444 312) (om-make-point 222 89) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (4800) (7700) (4900) (6400) (6500) (7500) (5400) (5600) (6300) (6550) (6700) (5100) (6000) (6700) (7000) (7700) (7514) (7750) (5400) (7314 6290 6549 5531) (4100) (4900) (6200) (5300) (5686) (6002) (6198) (7775) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (6700) (6100) (5000) (5200) (6550) (7902 6550 6969 7200) (6200) (5700) (6300) (6700) (6200) (5500 6633 7507 7889 6771 7205) (6550) (6100) (5000) (5200) (4800 5502 6550 6969) (6200) (5700) (6300) (6700) (6400) (5400) (4500) (4800 5502 6550 6969) (4900 6200 6755 6969) (5000 5502 6550 7425) (6100 6550 6969) (6220 6755 6969) (7028 6550 7425) (6300) (6700) (5500) (6450) (6650) (6300) (6500) (6700) (4900) (6500) (6400) (6500) (6700) (6925) (6300) (6700) (6450) (6650) (6500) (6475) (6294) (5478) (5796) (6565) (5478) (6655) (5569) (6565) (5659) (6675) (5569) (6565) (5659) (5000) (6200) (6450) (6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000)) :ldur (quotelvel (quote ((50) (60) (20) (30) (40 40 40 40) (40) (50) (60) (80) (100) (50) (60) (20) (40) (40) (30) (50) (60) (70) (80) (100) (20) (20) (10) (40) (67) (50) (90 90 90 90) (90) (70) (50) (20) (40) (50) (50) (60) (20) (30) (40) (50) (110 110 110 110) (40) (50) (10) (50) (60) (20) (30) (50) (40 30 50 10) (40) (50) (60) (70) (30) (40 90 90 90 90 90) (50) (60) (20) (30) (40 30 50 10) (40) (50) (60) (70) (120) (60) (70) (50 60 70 75) (90 90 90 75) (50 50 50 80) (50 50 50) (60 60 60) (60 60 60) (60) (70) (100) (60) (70) (40) (40) (40) (40) (40) (40) (40) (40) (30) (50) (60) (70) (80) (90) (30) (30) (30) (30) (30) (40) (40) (40) (40) (40) (40) (60) (40) (40) (40) (40) (50) (50))) :loffset (quote ((0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((25) (40) (40) (25) (300 300 300 300) (20) (25) (20) (300) (328) (25) (20) (20) (328) (25) (300) (25) (20) (20) (25) (300) (16) (20) (328) (300) (328) (497) (328 328 328 328) (497) (497) (497) (25) (25) (40) (20) (300) (497) (40) (40) (25) (274 274 274 274) (20) (25) (20) (20) (40) (25) (25) (40) (300 300 300 300) (20) (25) (20) (20) (25) (497 300 300 328 271 274) (40) (40) (25) (25) (497 274 300 20) (20) (25) (20) (20) (274) (25) (497) (497 274 300 20) (497 274 300 20) (497 274 300 20) (274 300 20) (274 300 20) (274 300 20) (20) (20) (25) (20) (20) (40) (40) (20) (25) (20) (40) (20) (20) (118) (20) (20) (20) (20) (20) (63) (63) (63) (63) (63) (497) (20) (118) (20) (497) (425) (118) (20) (497) (25) (40) (20) (25))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 820 255) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 88 448) (om-make-point 527 121) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (757/32 (((4 4) (1 1 1 1 1 1 (2 (-1 2 2 -2)))) ((2 4) ((2 (2 -1 6)))) ((5 32) (4.0 1.0)) ((4 4) ((4 (1 1 1 2 1 1 (2 (-1 2 2 -1 1)))))) ((2 4) ((2 (3 -1 8 -1)))) ((5 4) (4 2 -1 1 2.0 -2 -8)) ((2 4) ((1 (-2 3)) (1 (1.0 -2 3)))) ((1 4) (1)) ((3 8) (3)) ((2 4) (3 1 2.0 2)) ((2 4) (-1 1 1 1 4)) ((5 16) (4 1.0)) ((4 4) ((4 (3 3 3 3 3 1 (3 (1 1)))))) ((4 4) (1 -1 1 1 1 1 (2 (-1 2 2 -1 1)))) ((3 32) (-3)) ((2 4) ((2 (-1 2 2 -1 3)))) ((5 16) (4 1.0)) ((4 4) ((4 (1 -2 1 1 1 1 1 (2 (-1 2 2 -1 1)))))) ((2 4) ((2 (-1 (4 (3 1 -4 1)))))) ((7 32) (2 3 2)) ((4 32) (-4)) ((7 16) (3 2 2)) ((13 16) (-12 -1.0)) ((4 4) ((2 (1 (4 (1 -1 -3 1)))) (2 ((2 ((4 (1.0 -1 -1 1 -1)) -1 1)))))) ((4 4) ((2 (1 (4 (1 -1 1 -1 1)))) (2 ((2 ((4 (1.0 1 -1 1 -1)) 1 1)))))) ((4 8) (-1 7)) ((4 16) (4.0)) ((4 4) ((2 (1 (4 (1 -1 -3 1)))) (2 ((2 ((4 (1.0 -1 -1 1 -1)) -1 1)))))) ((4 8) (4)) ((2 8) (2)) ((3 8) (3)) ((7 16) (7)) ((8 4) (8)) ((2 4) (-1 3)) ((3 4) (3 1 1 1)) ((3 4) (3 1 1 1)) ((7 8) (7.0)) ((5 8) (2 2 3 3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (326 326 326 326)) :lvel (quote (40 40 40 40)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (186)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (186)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (290)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (870)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (290)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (290)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (290)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (580)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (290)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (290)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (166)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (166)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (83)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (301)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (803)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (652)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (163)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7514)) :ldur (quote (391)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (326)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (652)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7314 6290 6549 5531)) :ldur (quote (978 978 978 978)) :lvel (quote (90 90 90 90)) :loffset (quote (0 0 0 0)) :lchan (quote (328 328 328 328))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (489)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (163)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (163)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5686)) :ldur (quote (163)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6002)) :ldur (quote (163)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6198)) :ldur (quote (652)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (652)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (412)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (412)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (412)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (412)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (412 412 412 412)) :lvel (quote (110 110 110 110)) :loffset (quote (0 0 0 0)) :lchan (quote (274 274 274 274))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (137)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (206)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (206)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7902 6550 6969 7200)) :ldur (quote (186 186 186 186)) :lvel (quote (40 30 50 10)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (186)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (93)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (290)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (290)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (435)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6633 7507 7889 6771 7205)) :ldur (quote (652 652 652 652 652 652)) :lvel (quote (40 90 90 90 90 90)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 300 300 328 271 274))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (261)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (261)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (261)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (261 261 261 261)) :lvel (quote (40 30 50 10)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (261)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (149)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (149)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (75)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (348)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (274))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (116)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (116)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (163 163 163 163)) :lvel (quote (50 60 70 75)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 6200 6755 6969)) :ldur (quote (245 245 245 245)) :lvel (quote (90 90 90 75)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5502 6550 7425)) :ldur (quote (163 163 163 163)) :lvel (quote (50 50 50 80)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6550 6969)) :ldur (quote (489 489 489)) :lvel (quote (50 50 50)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6220 6755 6969)) :ldur (quote (326 326 326)) :lvel (quote (60 60 60)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 6550 7425)) :ldur (quote (326 326 326)) :lvel (quote (60 60 60)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (174)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (174)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (174)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (217)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (261)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (174)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (174)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (217)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (217)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6925)) :ldur (quote (1141)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (261)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (174)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (174)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (174)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (217)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6475)) :ldur (quote (1304)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6294)) :ldur (quote (652)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5478)) :ldur (quote (978)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796)) :ldur (quote (1141)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (5217)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5478)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6655)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5569)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6675)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5569)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (489)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (489)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 92) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (23 0 1 0 nil 0) (12 1 2 0 nil 0) (4 0 3 0 nil 0) (23 0 4 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (6 0 8 0 nil 0) (23 0 9 0 nil 0) (10 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 17 0 nil 0) (16 0 18 0 nil 0) (21 1 19 0 nil 0) (20 0 21 0 nil 0) (18 1 22 1 nil 0) (17 1 22 4 nil 0) (12 1 22 6 nil 0) (19 0 23 1 nil 0) (22 0 23 2 nil 0) (5 0 23 3 nil 0))) 6.19 nil "" (om-make-point 115 20) (om-make-point 1680 704)) (quote nil) (om-make-point 271 30) nil (list (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (list 326 326 326 326 326 326 -94 186 186 -187 290 -144 1278 290 289 290 580 290 290 -82 166 166 -83 82 301 -101 803 -100 652 326 -163 489 -1891 501 -217 326 652 978 489 490 326 -163 163 163 163 652 815 412 412 412 412 412 137 206 206 326 -326 326 326 326 326 -94 186 186 -93 93 -390 290 290 -145 435 815 261 -521 261 261 261 261 261 -74 149 149 -75 75 -260 348 116 -464 116 163 244 163 -327 489 326 326 -2119 261 174 -696 348 -348 174 -391 217 261 209 -208 209 -209 382 174 -174 174 -174 217 217 -164 1793 261 174 -696 348 -347 174 -392 217 1304 652 978 1141 5217 -327 978 978 326 326 326 978 326 326 2609 326 326 489 489) (list 25 40 40 25 (list 300 300 300 300) 20 25 20 300 328 25 20 20 328 25 300 25 20 20 25 300 16 20 328 300 328 497 (list 328 328 328 328) 497 497 497 25 25 40 20 300 497 40 40 25 (list 274 274 274 274) 20 25 20 20 40 25 25 40 (list 300 300 300 300) 20 25 20 20 25 (list 497 300 300 328 271 274) 40 40 25 25 (list 497 274 300 20) 20 25 20 20 274 25 497 (list 497 274 300 20) (list 497 274 300 20) (list 497 274 300 20) (list 274 300 20) (list 274 300 20) (list 274 300 20) 20 20 25 20 20 40 40 20 25 20 40 20 20 118 20 20 20 20 20 63 63 63 63 63 497 20 118 20 497 425 118 20 497 25 40 20 25) (list 1 2 3 4 5 6 nil 7 8 nil 9 nil 10 11 12 13 14 15 16 nil 17 18 nil 19 20 nil 21 nil 22 23 nil 24 nil 25 nil 26 27 28 29 30 31 nil 32 33 34 35 36 37 38 39 40 41 42 43 44 45 nil 46 47 48 49 nil 50 51 nil 52 nil 53 54 nil 55 56 57 nil 58 59 60 61 62 nil 63 64 nil 65 nil 66 67 nil 68 69 70 71 nil 72 73 74 nil 75 76 nil 77 nil 78 nil 79 80 81 nil 82 nil 83 84 nil 85 nil 86 87 nil 88 89 90 nil 91 nil 92 nil 93 94 95 96 97 98 nil 99 100 101 102 103 104 105 106 107 108 109 110 111)) "x" "ideias roubadas"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (17 2 6 0 nil 0) (9 0 7 0 nil 0) (0 0 8 0 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (17 2 12 0 nil 0) (11 0 12 1 nil 0) (16 0 12 2 nil 0) (17 3 12 3 nil 0) (13 0 12 4 nil 0) (17 1 13 0 nil 0) (16 0 14 0 nil 0) (7 0 15 0 nil 0) (17 0 16 0 nil 0))) nil 6.19))
