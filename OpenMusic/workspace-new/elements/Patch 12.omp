; OM File Header - Saved 2022/03/10 9:54:22
; (6.2 :patc (om-make-point 442 160) (om-make-point 50 50) (om-make-point 1071 556) "" 183 0 "2022/03/10 9:44:41" "2022/03/10 9:54:22")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Sieves")))(setf *om-current-persistent* (om-load-patch1 "Patch 12" (quote ((let ((box (om-load-boxcall (quote genfun) "REVEL-SIEVE 2" (quote revel-sieve) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 456 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-SIEVE" (quote revel-sieve) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 727 323) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 823 189) (om-make-point 78 32) (list 2 12 18) "(2 12 18)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SIEVE" (quote sieve) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "sieve-exp" (list 2 0 18)))) (om-make-point 695 234) (om-make-point 215 77) (if (find-class (quote sieve) nil) (make-instance (quote sieve) :sieve-exp (list 2 12 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 508 158) (om-make-point 43 32) 225 "225" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-ARIZA 2" (quote s-ariza) (quote ((om-load-inputfun (quote input-funbox) "List with the syntax." "SIEVE-L" (list (list (quote 13@70) (quote i) (quote 8@70)) (quote u) (list (quote 3@33) (quote i) (quote 5@33) (quote i) (quote 2@33)) (quote u) (list (quote 3@23) (quote i) (quote 8@23)))) (om-load-inputfun (quote input-funbox) "limit of the sieve" "LIMIT" 225))) (om-make-point 471 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 274 92) (om-make-point 394 32) (list (list (quote 13@70) (quote i) (quote 8@70)) (quote u) (list (quote 3@33) (quote i) (quote 5@33) (quote i) (quote 2@33)) (quote u) (list (quote 3@23) (quote i) (quote 8@23))) "((13@70 i 8@70) u (3@33 i 5@33 i 2@33) u (3@23 i 8@23))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "S-ARIZA" (quote s-ariza) (quote ((om-load-inputfun (quote input-funbox) "List with the syntax." "SIEVE-L" (list (list (quote 13@70) (quote i) (quote 8@70)) (quote u) (list (quote 3@33) (quote i) (quote 5@33) (quote i) (quote 2@33)) (quote u) (list (quote 3@23) (quote i) (quote 8@23)))))) (om-make-point 313 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (6 0 7 0 nil 0))) nil 6.2))