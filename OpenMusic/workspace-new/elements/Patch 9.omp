; OM File Header - Saved 2021/07/12 14:18:39
; (6.19 :patc (om-make-point 226 160) (om-make-point 412 44) (om-make-point 1449 927) "" 183 0 "2021/06/29 16:51:50" "2021/07/08 20:10:21")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/spat-binaural3.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Spat")))(setf *om-current-persistent* (om-load-patch1 "Patch 9" (quote ((let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 748 669) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote lispfun) "LIST->STRING-FUN" (quote list->string-fun) (quote ((om-load-inputfun (quote input-funbox) "CKN-LIST" "CKN-LIST" nil))) (om-make-point 704 727) nil nil nil nil))) (setf (frame-position newbox) (om-make-point 704 727)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 834 729) (om-make-point 54 32) ".aiff" "\".aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 796 775) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 964 600) (om-make-point 81 32) 49832554 "49832554" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 912 588) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 919 654) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 966 472) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 894 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1235 205) (om-make-point 36 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1099 112) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 1063 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 975 46) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 923 30) (om-make-point 40 32) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 1.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0.0))) (om-make-point 927 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "Z-POINTS" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "DECIMALS" 0))) (om-make-point 907 227) (om-make-point 361 177) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4852221 0.3827585 0.34304512 0.36081052 0.9668684 0.045972228 0.27546966 0.7573422 0.2524861 0.07978797 0.88832 0.38695812 0.93217874 0.064129114 0.884556 0.38169873 0.6124953 0.9337856 0.7875433 0.47801924)) (quote (0.413517 0.8838124 0.26117063 0.91324634 0.19419003 0.21993792 0.99390507 0.9102936 0.49668992 0.33134508 0.70577336 0.5048673 0.65710986 0.3648919 0.43506145 0.3552773 0.2852925 0.9595748 0.46244788 0.98755587)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) nil nil (pairlis (quote (picture mode winpos winsize line-width bg-color show-axes show-room room-size)) (list nil 0 (om-make-point 600 200) (om-make-point 800 800) 1.0 nil 1 1 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 741 205) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N 3" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 665 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 373 245) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N 2" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 297 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 331 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 392 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 547 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 721 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 97 107) (om-make-point 36 32) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR 2" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 228 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 211 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 177 30) (om-make-point 51 32) 3004 "3004" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSC-RECEIVE 2" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" nil) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING" nil))) (om-make-point 181 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 531 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 514 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 467 61) (om-make-point 51 32) 3002 "3002" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" nil) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING" nil))) (om-make-point 474 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 64 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" 20) (om-load-inputfun (quote input-funbox) "number of elements" "N" 20))) (om-make-point 91 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil) (om-load-inputkeyword (quote input-keyword) "type of spatialization" "panning-type" (quote :panning-type) (quote binaural) (list (list "angular" (quote angular)) (list "vbap" (quote vbap)) (list "binaural" (quote binaural)))))) (om-make-point 92 705) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "spat-binaural3.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 96 788) (om-make-point 317 89) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES")) :device nil :host nil :name "spat-binaural3" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "spat-binaural3.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 260) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 440 473) (om-make-point 142 32) "spat-binaural3.aiff" "\"spat-binaural3.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE 2" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 203 597) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPAT-MATRIX" (quote spat-matrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote editor-keyword) "" "sounds" (quote :sounds) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durations" (quote :durations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "onsets" (quote :onsets) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "trajectories" (quote :trajectories) nil nil))) (om-make-point 80 398) (om-make-point 251 129) (if (find-class (quote spat-matrix) nil) (let ((array (make-instance (quote spat-matrix) :numcols 20))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote sounds)) (list "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\1.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\2.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\3.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\4.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\5.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\6.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\7.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\8.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\9.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\10.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\11.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\12.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\13.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\14.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\15.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\16.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\17.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\18.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\19.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\20.wav")) (setf (slot-value array (quote src-names)) nil) (setf (slot-value array (quote trajectories)) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.62150026 0.6322073 0.523769 0.1989646 0.38021195 0.04073 0.39938998 0.92541707 0.5165347 0.9711726 0.47405347 0.6613742 0.9617064 0.24346757 0.059875846 0.15152812 0.11752343 0.25907207 0.7563844 0.59029294)) (quote (0.28457296 0.9520849 0.33147025 0.51671446 0.91792447 0.80805874 0.6054915 0.5204543 0.73214996 0.69839895 0.50973094 0.074422 0.94675535 0.68109906 0.30806947 0.9313421 0.3168484 0.45657054 0.47202674 1.239777E-4)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.60568095 0.020420194 0.09047639 0.51097644 0.5154959 0.77866495 0.987839 0.25380504 0.514871 0.21842265 0.12158358 0.46089816 0.25079322 0.48436198 0.69592226 0.5789627 0.20486832 0.5070343 0.31155407 0.35757864)) (quote (0.8559607 0.397444 0.51665867 0.5768535 0.49447367 0.75185085 0.47268286 0.75896347 0.8385408 0.13936734 0.37132847 0.7739433 0.97480727 0.71187675 0.7454711 0.20287836 0.8158325 0.21263695 0.4968871 0.012927055)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11252582 0.8320086 0.089728594 0.5543597 0.9071749 0.59108067 0.5236089 0.17557299 0.05992055 0.4040252 0.0758121 0.29511154 0.61139405 0.3714527 0.37962425 0.99522746 0.8023534 0.2564478 0.71837426 0.59449745)) (quote (0.20047593 0.75069237 0.5277983 0.3309487 0.95359225 0.550627 0.80515314 0.3915372 0.28700316 0.102571845 0.3804413 0.56695486 0.7155793 0.43339074 0.15107227 0.0088380575 0.8881116 0.95647777 0.4897014 0.5542042)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.7291306 0.4773377 0.4330385 0.33984327 0.12202108 0.3017416 0.30575597 0.66546917 0.2960981 0.008031487 0.20736969 0.4996401 0.5994592 0.3933686 0.6794809 0.5475881 0.52311957 0.7054322 0.91601325 0.47919247)) (quote (0.48008695 0.6652746 0.6141248 0.13315583 0.5531498 0.72815025 0.9512373 0.4934738 0.68136585 0.30098367 0.46782255 0.5525459 0.72640574 0.80186737 0.7001163 0.35015154 0.92116684 0.010429621 0.5011805 0.07374656)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.51058555 0.30755043 0.76619566 0.582659 0.045716167 0.18107987 0.84873534 0.98654056 0.87922246 0.96007556 0.38158536 0.63784385 0.7906853 0.022027016 0.28167677 0.2037437 0.23490583 0.03995955 0.4721726 0.22290872)) (quote (0.31618583 0.1666497 0.36984468 0.51861704 0.5149201 0.265836 0.18211818 0.439085 0.8605608 0.39632344 0.5096601 0.5846547 0.87608886 0.8607781 0.11793101 0.45595992 0.636152 0.41483283 0.7568935 0.96305615)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.9911971 0.9656466 0.9042748 0.61716974 0.6344725 0.9223908 0.245023 0.31678748 0.9659525 0.5322697 0.36025214 0.87099064 0.897504 0.5834069 0.095240236 0.18363929 0.626974 0.70059 0.5016763 0.8172319)) (quote (0.26356816 0.7434343 0.84227884 0.95127297 0.34723222 0.54211867 0.40785503 0.65649975 0.20406783 0.4487667 0.55169356 0.0059120655 0.0044425726 0.5831609 0.18717647 0.06415391 0.95325184 0.6138575 0.69855965 0.89281005)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.8827085 0.94076127 0.6777929 0.65989185 0.25309467 0.42693377 0.8273618 0.20801032 0.6600499 0.8638152 0.29265177 0.61890066 0.20566046 0.5147499 0.9971095 0.9700895 0.48743567 0.8043462 0.69862664 0.87564266)) (quote (0.85888076 0.015347123 0.8587625 0.41497839 0.30101347 0.54878355 0.55739606 0.8365016 0.52217424 0.0110013485 0.8349843 0.36064017 0.3654915 0.109883905 0.88246906 0.949095 0.35702872 0.94838244 0.31732166 0.029554606)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.21220148 0.35512638 0.07971048 0.3076477 0.5670409 0.8646748 0.41942096 0.8841745 0.73596025 0.6215502 0.78975344 0.13603175 0.709561 0.7277945 0.24334862 0.30625308 0.78767705 0.54236115 0.20218992 0.7839625)) (quote (0.77574444 0.5253322 0.6896045 0.076016665 0.6477784 0.6986114 0.5133084 0.081790805 0.8617843 0.3895104 0.37161028 0.5403067 0.32017684 0.66539634 0.99491245 0.72490836 0.58655727 0.658327 0.60726655 0.3364606)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.099757195 0.03869176 0.30613673 0.7867458 0.36031652 0.05024469 0.4415084 0.7576623 0.58108044 0.46240342 0.43881953 0.81016684 0.7068323 0.4011649 0.75250817 0.6753032 0.74510706 0.30256045 0.29194927 0.4512323)) (quote (0.07774818 0.49144116 0.072421074 0.7213074 0.82844544 0.44216874 0.496307 0.08811128 0.2935933 0.7477615 0.54533935 0.12344158 0.6645936 0.222782 0.5859113 0.2321645 0.09076965 0.82852507 0.3230816 0.44371846)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.81586886 0.37374008 0.31301653 0.46725884 0.86305166 0.612728 0.041484475 0.49384204 0.43708146 0.22121562 0.67466856 0.9519205 0.35502827 0.8818002 0.223199 0.70328534 0.528919 0.3726573 0.59248126 0.14101434)) (quote (0.27003372 0.08074415 0.024799109 0.27827227 0.81255985 0.1231836 0.1740911 0.26421678 0.3652364 0.7167877 0.23894908 0.7396419 0.5131651 0.12590087 0.029668689 0.8464694 0.9542215 0.94450635 0.5317308 0.9710877)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.86896456 0.68059254 0.43460786 0.017795206 0.62608374 0.14824069 0.9428658 0.035342098 0.7090949 0.40625584 0.35498643 0.19376147 0.039869547 0.68266774 0.55551076 0.88690544 0.43891764 0.49692774 0.7095213 0.5669495)) (quote (0.9859912 0.025572777 0.40816915 0.09018016 0.35526133 0.38652837 0.37282348 0.50788415 0.3714397 0.6461514 0.5642611 0.08175242 0.99873734 0.49600104 0.4637952 0.120613925 0.70746685 0.83378327 0.6994653 0.56210125)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.67101884 0.9737381 0.9321859 0.7027788 0.26452208 0.1478113 0.6033453 0.48116246 0.4161973 0.2192931 0.46210566 0.31594634 0.1778822 0.535349 0.9507169 0.6793299 0.93060887 0.48159063 0.74669767 0.85570777)) (quote (0.77664936 0.7348074 0.27119637 0.07727492 0.32872474 0.1259476 0.7426486 0.94718975 0.70332206 0.49025095 0.92008007 0.9131251 0.9288144 0.029055357 0.30193746 0.20345521 0.9435184 0.04089737 0.034591437 0.31713748)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.85441435 0.2545818 0.2271477 0.42280078 0.2990687 0.35294878 0.076012254 0.82472575 0.589743 0.86326254 0.6546569 0.5371053 0.18971622 0.48218152 0.5841441 0.90255267 0.9612415 0.0047165156 0.46797726 0.091329694)) (quote (0.6442429 0.51575387 0.733335 0.07370746 0.7166877 0.5430943 0.6006832 0.83441794 0.303666 0.75534237 0.75533486 0.071333885 0.60996044 0.5103649 0.31375468 0.92452384 0.75337816 0.66141904 0.23127747 0.08718908)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.74736536 0.41516733 0.79465175 0.13449383 0.4358339 0.64646006 0.002522111 0.74574304 0.845032 0.8041384 0.77793634 0.34456337 0.7899338 0.07247257 0.9257482 0.8645422 0.7375126 0.7365557 0.22359252 0.10632694)) (quote (0.7374315 0.05600345 0.67693234 0.6106281 0.06982446 0.3317573 0.3242103 0.9180157 0.23060441 0.9050751 0.7069845 0.8497485 0.27211595 0.86926604 0.9888064 0.30568767 0.8058076 0.9994559 0.58123017 0.28060687)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.3372389 0.058010694 0.40999317 0.4927739 0.8113383 0.7482662 0.22058857 0.58018935 0.6455122 0.2487341 0.6713939 0.8920237 0.13635278 0.79417384 0.5971141 0.6872835 0.663918 0.123300314 0.74152184 0.4522679)) (quote (0.0019780398 0.3269732 0.12563885 0.14137757 0.83594704 0.7545568 0.28270793 0.88381094 0.67401445 0.08513105 0.31770217 0.38206792 0.47232687 0.77772105 0.6294552 0.19235623 0.4711064 0.20774222 0.757108 0.9956753)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.44751057 0.6595378 0.6828723 0.90705336 0.03395796 0.9753876 0.4134935 0.7052133 0.74336327 0.58839584 0.68961847 0.6734704 0.6663612 0.59830904 0.7193068 0.5303376 0.18771422 0.12222934 0.0036945343 0.21937262)) (quote (0.42833102 0.33729756 0.6411878 0.69624496 0.33093166 0.574896 0.04340613 0.8281318 0.5725019 0.10077727 0.36913133 0.8666638 0.3299179 0.14188659 0.67544866 0.99333436 0.7239481 0.8606844 0.3662846 0.9422713)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4049375 0.8875056 0.8933874 0.51346207 0.65499974 0.023255706 0.16857183 0.10865296 0.20435143 0.23576236 0.2992382 0.7802441 0.85788525 0.3648069 0.31417465 0.98945565 0.8247589 0.58250225 0.027292608 0.69933594)) (quote (0.27417815 0.07149792 0.6856345 0.99333334 0.57712436 0.56685794 0.17982328 0.25330877 0.74256254 0.6989094 0.2963674 0.326581 0.23945713 0.5186111 0.20857513 0.19518304 0.0059946776 0.010419607 0.3203876 0.39965487)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.6259084 0.8554244 0.27183783 0.37495542 0.4406295 0.55229855 0.32325125 0.71901095 0.24230659 0.17315793 0.9772572 0.60324717 0.06519425 0.23863864 0.7315185 0.12696302 0.4119984 0.72203744 0.8501828 0.029250384)) (quote (0.17899144 0.42904055 0.6040065 0.86167104 0.15466285 0.05208218 0.23284088 0.8054366 0.86647314 0.31270695 0.54376984 0.82480884 0.20045078 0.67659307 0.87742556 0.1366924 0.9242734 0.72485185 0.7040874 0.9788563)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.90186096 0.10349178 0.77181316 0.87790114 0.72540796 0.93058753 0.10112834 0.6732739 0.2606573 0.42802393 0.8114313 0.87689275 0.63309455 0.94342494 0.45071745 0.055875183 0.94843084 0.2523812 0.5773219 0.47657192)) (quote (0.048103333 0.42309856 0.22116317 0.07501888 0.080748916 0.37506056 0.94309527 0.96404666 0.66210604 0.22809136 0.08527255 0.9826947 0.27820694 0.8406819 0.055884242 0.062135343 0.5474317 0.31238866 0.21053827 5.130768E-4)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4852221 0.3827585 0.34304512 0.36081052 0.9668684 0.045972228 0.27546966 0.7573422 0.2524861 0.07978797 0.88832 0.38695812 0.93217874 0.064129114 0.884556 0.38169873 0.6124953 0.9337856 0.7875433 0.47801924)) (quote (0.413517 0.8838124 0.26117063 0.91324634 0.19419003 0.21993792 0.99390507 0.9102936 0.49668992 0.33134508 0.70577336 0.5048673 0.65710986 0.3648919 0.43506145 0.3552773 0.2852925 0.9595748 0.46244788 0.98755587)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj))) (setf (slot-value array (quote durations)) 6.337) (setf (slot-value array (quote onsets)) (list 0.0 0.325 0.65 0.975 1.3 1.625 1.951 2.045 2.23 2.415 2.603 2.892 3.037 4.314 4.603 4.891 5.18 5.759 6.048 6.337)) (setf (slot-value array (quote orientations)) nil) (setf (slot-value array (quote apertures)) nil) (setf (slot-value array (quote presence)) 90) (setf (slot-value array (quote warmth)) 30) (setf (slot-value array (quote brillance)) 30) (setf (slot-value array (quote room-presence)) 48) (setf (slot-value array (quote running-reverberance)) 34) (setf (slot-value array (quote envelopment)) 24) (setf (slot-value array (quote omni-filter)) (list (list 0 1.7 0 -3.8 177 5657))) (setf (slot-value array (quote axis-filter)) (list (list 0 0 0 0 177 5657))) (setf (slot-value array (quote room)) 1) (setf (lcontrols array) (list)) (setf (data array) (list (list "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\1.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\2.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\3.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\4.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\5.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\6.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\7.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\8.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\9.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\10.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\11.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\12.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\13.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\14.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\15.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\16.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\17.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\18.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\19.wav" "C:\\USERS\\NEIMOG\\ONEDRIVE - DESIGN.UFJF.BR\\DOCUMENTOS\\OM - WORKSPACE\\OUT-FILES\\20.wav") (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.62150026 0.6322073 0.523769 0.1989646 0.38021195 0.04073 0.39938998 0.92541707 0.5165347 0.9711726 0.47405347 0.6613742 0.9617064 0.24346757 0.059875846 0.15152812 0.11752343 0.25907207 0.7563844 0.59029294)) (quote (0.28457296 0.9520849 0.33147025 0.51671446 0.91792447 0.80805874 0.6054915 0.5204543 0.73214996 0.69839895 0.50973094 0.074422 0.94675535 0.68109906 0.30806947 0.9313421 0.3168484 0.45657054 0.47202674 1.239777E-4)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.60568095 0.020420194 0.09047639 0.51097644 0.5154959 0.77866495 0.987839 0.25380504 0.514871 0.21842265 0.12158358 0.46089816 0.25079322 0.48436198 0.69592226 0.5789627 0.20486832 0.5070343 0.31155407 0.35757864)) (quote (0.8559607 0.397444 0.51665867 0.5768535 0.49447367 0.75185085 0.47268286 0.75896347 0.8385408 0.13936734 0.37132847 0.7739433 0.97480727 0.71187675 0.7454711 0.20287836 0.8158325 0.21263695 0.4968871 0.012927055)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.11252582 0.8320086 0.089728594 0.5543597 0.9071749 0.59108067 0.5236089 0.17557299 0.05992055 0.4040252 0.0758121 0.29511154 0.61139405 0.3714527 0.37962425 0.99522746 0.8023534 0.2564478 0.71837426 0.59449745)) (quote (0.20047593 0.75069237 0.5277983 0.3309487 0.95359225 0.550627 0.80515314 0.3915372 0.28700316 0.102571845 0.3804413 0.56695486 0.7155793 0.43339074 0.15107227 0.0088380575 0.8881116 0.95647777 0.4897014 0.5542042)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.7291306 0.4773377 0.4330385 0.33984327 0.12202108 0.3017416 0.30575597 0.66546917 0.2960981 0.008031487 0.20736969 0.4996401 0.5994592 0.3933686 0.6794809 0.5475881 0.52311957 0.7054322 0.91601325 0.47919247)) (quote (0.48008695 0.6652746 0.6141248 0.13315583 0.5531498 0.72815025 0.9512373 0.4934738 0.68136585 0.30098367 0.46782255 0.5525459 0.72640574 0.80186737 0.7001163 0.35015154 0.92116684 0.010429621 0.5011805 0.07374656)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.51058555 0.30755043 0.76619566 0.582659 0.045716167 0.18107987 0.84873534 0.98654056 0.87922246 0.96007556 0.38158536 0.63784385 0.7906853 0.022027016 0.28167677 0.2037437 0.23490583 0.03995955 0.4721726 0.22290872)) (quote (0.31618583 0.1666497 0.36984468 0.51861704 0.5149201 0.265836 0.18211818 0.439085 0.8605608 0.39632344 0.5096601 0.5846547 0.87608886 0.8607781 0.11793101 0.45595992 0.636152 0.41483283 0.7568935 0.96305615)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.9911971 0.9656466 0.9042748 0.61716974 0.6344725 0.9223908 0.245023 0.31678748 0.9659525 0.5322697 0.36025214 0.87099064 0.897504 0.5834069 0.095240236 0.18363929 0.626974 0.70059 0.5016763 0.8172319)) (quote (0.26356816 0.7434343 0.84227884 0.95127297 0.34723222 0.54211867 0.40785503 0.65649975 0.20406783 0.4487667 0.55169356 0.0059120655 0.0044425726 0.5831609 0.18717647 0.06415391 0.95325184 0.6138575 0.69855965 0.89281005)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.8827085 0.94076127 0.6777929 0.65989185 0.25309467 0.42693377 0.8273618 0.20801032 0.6600499 0.8638152 0.29265177 0.61890066 0.20566046 0.5147499 0.9971095 0.9700895 0.48743567 0.8043462 0.69862664 0.87564266)) (quote (0.85888076 0.015347123 0.8587625 0.41497839 0.30101347 0.54878355 0.55739606 0.8365016 0.52217424 0.0110013485 0.8349843 0.36064017 0.3654915 0.109883905 0.88246906 0.949095 0.35702872 0.94838244 0.31732166 0.029554606)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.21220148 0.35512638 0.07971048 0.3076477 0.5670409 0.8646748 0.41942096 0.8841745 0.73596025 0.6215502 0.78975344 0.13603175 0.709561 0.7277945 0.24334862 0.30625308 0.78767705 0.54236115 0.20218992 0.7839625)) (quote (0.77574444 0.5253322 0.6896045 0.076016665 0.6477784 0.6986114 0.5133084 0.081790805 0.8617843 0.3895104 0.37161028 0.5403067 0.32017684 0.66539634 0.99491245 0.72490836 0.58655727 0.658327 0.60726655 0.3364606)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.099757195 0.03869176 0.30613673 0.7867458 0.36031652 0.05024469 0.4415084 0.7576623 0.58108044 0.46240342 0.43881953 0.81016684 0.7068323 0.4011649 0.75250817 0.6753032 0.74510706 0.30256045 0.29194927 0.4512323)) (quote (0.07774818 0.49144116 0.072421074 0.7213074 0.82844544 0.44216874 0.496307 0.08811128 0.2935933 0.7477615 0.54533935 0.12344158 0.6645936 0.222782 0.5859113 0.2321645 0.09076965 0.82852507 0.3230816 0.44371846)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.81586886 0.37374008 0.31301653 0.46725884 0.86305166 0.612728 0.041484475 0.49384204 0.43708146 0.22121562 0.67466856 0.9519205 0.35502827 0.8818002 0.223199 0.70328534 0.528919 0.3726573 0.59248126 0.14101434)) (quote (0.27003372 0.08074415 0.024799109 0.27827227 0.81255985 0.1231836 0.1740911 0.26421678 0.3652364 0.7167877 0.23894908 0.7396419 0.5131651 0.12590087 0.029668689 0.8464694 0.9542215 0.94450635 0.5317308 0.9710877)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.86896456 0.68059254 0.43460786 0.017795206 0.62608374 0.14824069 0.9428658 0.035342098 0.7090949 0.40625584 0.35498643 0.19376147 0.039869547 0.68266774 0.55551076 0.88690544 0.43891764 0.49692774 0.7095213 0.5669495)) (quote (0.9859912 0.025572777 0.40816915 0.09018016 0.35526133 0.38652837 0.37282348 0.50788415 0.3714397 0.6461514 0.5642611 0.08175242 0.99873734 0.49600104 0.4637952 0.120613925 0.70746685 0.83378327 0.6994653 0.56210125)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.67101884 0.9737381 0.9321859 0.7027788 0.26452208 0.1478113 0.6033453 0.48116246 0.4161973 0.2192931 0.46210566 0.31594634 0.1778822 0.535349 0.9507169 0.6793299 0.93060887 0.48159063 0.74669767 0.85570777)) (quote (0.77664936 0.7348074 0.27119637 0.07727492 0.32872474 0.1259476 0.7426486 0.94718975 0.70332206 0.49025095 0.92008007 0.9131251 0.9288144 0.029055357 0.30193746 0.20345521 0.9435184 0.04089737 0.034591437 0.31713748)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.85441435 0.2545818 0.2271477 0.42280078 0.2990687 0.35294878 0.076012254 0.82472575 0.589743 0.86326254 0.6546569 0.5371053 0.18971622 0.48218152 0.5841441 0.90255267 0.9612415 0.0047165156 0.46797726 0.091329694)) (quote (0.6442429 0.51575387 0.733335 0.07370746 0.7166877 0.5430943 0.6006832 0.83441794 0.303666 0.75534237 0.75533486 0.071333885 0.60996044 0.5103649 0.31375468 0.92452384 0.75337816 0.66141904 0.23127747 0.08718908)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.74736536 0.41516733 0.79465175 0.13449383 0.4358339 0.64646006 0.002522111 0.74574304 0.845032 0.8041384 0.77793634 0.34456337 0.7899338 0.07247257 0.9257482 0.8645422 0.7375126 0.7365557 0.22359252 0.10632694)) (quote (0.7374315 0.05600345 0.67693234 0.6106281 0.06982446 0.3317573 0.3242103 0.9180157 0.23060441 0.9050751 0.7069845 0.8497485 0.27211595 0.86926604 0.9888064 0.30568767 0.8058076 0.9994559 0.58123017 0.28060687)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.3372389 0.058010694 0.40999317 0.4927739 0.8113383 0.7482662 0.22058857 0.58018935 0.6455122 0.2487341 0.6713939 0.8920237 0.13635278 0.79417384 0.5971141 0.6872835 0.663918 0.123300314 0.74152184 0.4522679)) (quote (0.0019780398 0.3269732 0.12563885 0.14137757 0.83594704 0.7545568 0.28270793 0.88381094 0.67401445 0.08513105 0.31770217 0.38206792 0.47232687 0.77772105 0.6294552 0.19235623 0.4711064 0.20774222 0.757108 0.9956753)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.44751057 0.6595378 0.6828723 0.90705336 0.03395796 0.9753876 0.4134935 0.7052133 0.74336327 0.58839584 0.68961847 0.6734704 0.6663612 0.59830904 0.7193068 0.5303376 0.18771422 0.12222934 0.0036945343 0.21937262)) (quote (0.42833102 0.33729756 0.6411878 0.69624496 0.33093166 0.574896 0.04340613 0.8281318 0.5725019 0.10077727 0.36913133 0.8666638 0.3299179 0.14188659 0.67544866 0.99333436 0.7239481 0.8606844 0.3662846 0.9422713)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4049375 0.8875056 0.8933874 0.51346207 0.65499974 0.023255706 0.16857183 0.10865296 0.20435143 0.23576236 0.2992382 0.7802441 0.85788525 0.3648069 0.31417465 0.98945565 0.8247589 0.58250225 0.027292608 0.69933594)) (quote (0.27417815 0.07149792 0.6856345 0.99333334 0.57712436 0.56685794 0.17982328 0.25330877 0.74256254 0.6989094 0.2963674 0.326581 0.23945713 0.5186111 0.20857513 0.19518304 0.0059946776 0.010419607 0.3203876 0.39965487)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.6259084 0.8554244 0.27183783 0.37495542 0.4406295 0.55229855 0.32325125 0.71901095 0.24230659 0.17315793 0.9772572 0.60324717 0.06519425 0.23863864 0.7315185 0.12696302 0.4119984 0.72203744 0.8501828 0.029250384)) (quote (0.17899144 0.42904055 0.6040065 0.86167104 0.15466285 0.05208218 0.23284088 0.8054366 0.86647314 0.31270695 0.54376984 0.82480884 0.20045078 0.67659307 0.87742556 0.1366924 0.9242734 0.72485185 0.7040874 0.9788563)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.90186096 0.10349178 0.77181316 0.87790114 0.72540796 0.93058753 0.10112834 0.6732739 0.2606573 0.42802393 0.8114313 0.87689275 0.63309455 0.94342494 0.45071745 0.055875183 0.94843084 0.2523812 0.5773219 0.47657192)) (quote (0.048103333 0.42309856 0.22116317 0.07501888 0.080748916 0.37506056 0.94309527 0.96404666 0.66210604 0.22809136 0.08527255 0.9826947 0.27820694 0.8406819 0.055884242 0.062135343 0.5474317 0.31238866 0.21053827 5.130768E-4)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.4852221 0.3827585 0.34304512 0.36081052 0.9668684 0.045972228 0.27546966 0.7573422 0.2524861 0.07978797 0.88832 0.38695812 0.93217874 0.064129114 0.884556 0.38169873 0.6124953 0.9337856 0.7875433 0.47801924)) (quote (0.413517 0.8838124 0.26117063 0.91324634 0.19419003 0.21993792 0.99390507 0.9102936 0.49668992 0.33134508 0.70577336 0.5048673 0.65710986 0.3648919 0.43506145 0.3552773 0.2852925 0.9595748 0.46244788 0.98755587)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj)) (list 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337 6.337) (list 0.0 0.325 0.65 0.975 1.3 1.625 1.951 2.045 2.23 2.415 2.603 2.892 3.037 4.314 4.603 4.891 5.18 5.759 6.048 6.337) (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (list nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil) (list 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90) (list 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30) (list 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30 30) (list 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48) (list 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34 34) (list 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24) (list (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657)) (list (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657)) (list 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))) array)) nil nil (pairlis (quote (player winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (quote :om-audio) (om-make-point -9 -9) (om-make-point 1920 1026) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "group 1" (list 0 (quote t)) (list 1 nil) (list 2 (quote t))) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (15 0 8 0 nil 0) (7 0 8 1 nil 0) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (11 0 15 1 nil 0) (11 0 15 2 nil 0) (9 0 15 4 nil 0) (29 0 17 0 nil 0) (16 0 17 1 nil 0) (20 0 19 0 nil 0) (18 0 19 1 nil 0) (29 0 20 0 nil 0) (22 0 21 0 nil 0) (23 0 22 0 nil 0) (17 0 23 0 nil 0) (26 0 25 0 nil 0) (28 0 26 0 nil 0) (27 0 28 0 nil 0) (30 0 29 0 nil 0) (32 0 30 0 nil 0) (31 0 32 0 nil 0) (34 0 33 0 nil 0) (25 0 34 0 nil 0) (24 0 34 1 nil 0) (39 0 35 0 nil 0) (38 0 35 2 nil 0) (35 0 36 0 nil 0) (3 0 38 0 nil 0) (33 0 39 1 nil 0) (34 0 39 2 nil 0) (21 0 39 3 nil 0) (19 0 39 4 nil 0) (8 0 39 5 nil 0))) nil 6.19))
