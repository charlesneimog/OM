; OM File Header - Saved 2022/03/14 7:56:01
; (6.04 :patc (om-make-point 21 177) (om-make-point 512 52) (om-make-point 470 470) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for 'nil)(setf *om-current-persistent* (om-load-patch1 "10-n-pulses_group-pulses" '((om-load-boxcomment "comment" (om-make-point 353 137) '"n-pulses :          Returns the number of pulses in a tree$                            (pulses meaning expressed notes meaning$                            all but rests and tied notes)$$group-pulses : Returns a list of list where each list  \"groups\"$                            all expressed notes with potential tied notes$                            and rests" "" (om-make-point 64 40) nil (om-make-color 40/51 10/51 2/17) (om-make-font "Arial" 12 :family nil :style 'nil :mode nil)) (om-load-boxcall 'genfun "GROUP-PULSES" 'group-pulses '((om-load-inputfun 'input-funbox "tree" "LISTE" (list '? (list (list '4//4 (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list '4//4 (list 1 (list 1 (list 1 2 1 1)) -1 1)))))) (om-make-point 232 331) nil nil nil nil 1) (om-load-editor-box1 "VOICE" 'voice '((om-load-inputfun 'input-funbox "objs" "SELF" nil) (om-load-inputfun 'input-funbox "a list representing a rhythm tree" "TREE" (list '? (list (list '4//4 (list 1 1 1 1))))) (om-load-inputfun 'input-funbox "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) (om-load-inputfun 'input-funbox "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun 'input-funbox "no documentation" "LEGATO" 100) (om-load-inputfun 'input-funbox "no documentation" "TIES" nil)) (om-make-point 28 183) (om-make-point 387 117) (let ((newobj (when (find-class 'voice nil) (make-instance 'voice :tree '(3 (((4 4) (1 3.0)) ((4 4) ((4 ((1 (1 1 1)) (1 (1.0 -1 1)) 1)))) ((4 4) (4)))) :chords (load-obj-list-from-save '((if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6200) :lvel (list 100) :loffset (list 0) :ldur (list 1000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 444) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 444) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 444) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 444) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 1333) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)) (if (find-class 'chord nil) (let ((newobj (make-instance 'chord :lmidic (list 6000) :lvel (list 80) :loffset (list 0) :ldur (list 4000) :lchan (list 1) :from-file t))) (load-port-info newobj '(0)) (init-mus-color newobj nil) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj 'nil) (set-tonalite newobj nil) newobj)))) :tempo 60 :legato 100 :ties '(nil nil nil nil nil nil nil))))) (load-port-info newobj '(((0) (0)) ((((0) (0) (0)) ((0) nil (0)) (0))) ((0)))) (init-mus-color newobj (list (list nil (om-make-color 0 0 0)) (list (list 0) (om-make-color 0 0 0)) (list (list 0 0) (om-make-color 0 0 0)) (list (list 0 0 0) (om-make-color 0 0 0)) (list (list 0 1) (om-make-color 0 0 0)) (list (list 0 1 0) (om-make-color 0 0 0)) (list (list 1) (om-make-color 0 0 0)) (list (list 1 0) (om-make-color 0 0 0)) (list (list 1 0 0) (om-make-color 0 0 0)) (list (list 1 0 0 0) (om-make-color 0 0 0)) (list (list 1 0 0 0 0) (om-make-color 0 0 0)) (list (list 1 0 0 1) (om-make-color 0 0 0)) (list (list 1 0 0 1 0) (om-make-color 0 0 0)) (list (list 1 0 0 2) (om-make-color 0 0 0)) (list (list 1 0 0 2 0) (om-make-color 0 0 0)) (list (list 1 0 1) (om-make-color 0 0 0)) (list (list 1 0 1 0) (om-make-color 0 0 0)) (list (list 1 0 1 0 0) (om-make-color 0 0 0)) (list (list 1 0 1 1) (om-make-color 0 0 0)) (list (list 1 0 1 2) (om-make-color 0 0 0)) (list (list 1 0 1 2 0) (om-make-color 0 0 0)) (list (list 1 0 2) (om-make-color 0 0 0)) (list (list 1 0 2 0) (om-make-color 0 0 0)) (list (list 2) (om-make-color 0 0 0)) (list (list 2 0) (om-make-color 0 0 0)) (list (list 2 0 0) (om-make-color 0 0 0)))) (set-extra-pairs newobj 'nil) (set-patch-pairs newobj '((nil (om-load-patch-abs1 "patch" 'nil 'nil 5.0 nil)))) (set-tonalite newobj nil) newobj) "x" nil (corrige (pairlis '(show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx) (list 't 1 0 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance 'edition-values))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) '(1)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 'empty 24 2))) t nil nil) (om-load-boxcall 'genfun "N-PULSES" 'n-pulses '((om-load-inputfun 'input-funbox "tree" "TREE" (list '? (list (list '4//4 (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list '4//4 (list 1 (list 1 (list 1 2 1 1)) -1 1)))))) (om-make-point 100 331) nil nil nil nil 1)) '((2 1 1 0 nil 2) (2 1 3 0 nil 2)) nil 5.0))
