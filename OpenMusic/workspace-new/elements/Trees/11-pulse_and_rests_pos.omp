; OM File Header - Saved 2022/03/14 7:56:01
; (6.04 :patc (om-make-point 163 178) (om-make-point 74 61) (om-make-point 873 668) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "11-pulse_and_rests_pos" (quote ((om-load-boxcomment "comment" (om-make-point 212 81) (quote "Outputs a list of positions of pulses$in the tree. (0 being first position)") "" (om-make-point 34 296) nil (om-make-color 26/255 41/255 2/3) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 436 257) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 481 268) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 208 87) (quote "Here as an example$we augment rests$progressively using$the ratio rhythm notation") "" (om-make-point 591 281) nil (om-make-color 26/255 41/255 2/3) (om-make-font "Arial" 12 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 282 169) (quote "get-pulse-places :$Returns the nth position of pulses in a tree$$get-rest-places tree:$Returns the nth position of rests in a tree") "" (om-make-point 569 27) nil (om-make-color 191/255 2/15 2/17) (om-make-font "Arial" 18 :family "Arial" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 69 266) (om-make-point 128 24) (list 0 2 4 6 8 10 12 14 16) "(0 2 4 6 8 10 12 14 16)" nil) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 4 494) (om-make-point 783 129) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1 -1 2)) (1 (3.0 -1)) (1 (-1 3)) (1 (-3 1)))) ((4 4) (-1 (1 (3 -1)) -1 (1 (1 -3)))) ((4 4) ((1 (-3 1)) (1 (1.0 -1)) -1 (1 (-1 3)))) ((4 4) ((1 (1.0 -1)) -1 (1 (-1 1)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote ((((0) nil (0)) ((0) nil) (nil (0)) (nil (0))) (nil ((0) nil) nil ((0) nil)) ((nil (0)) ((0) nil) nil (nil (0))) (((0) nil) nil (nil (0)) nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0301 nil))))) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? obj-mode palette-mode zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 2621450 18350450 0 1000 nil 0 0 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote empty) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 398 326) (om-make-point 106 35) nil nil nil 1) (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 312 257) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SUBS-POSN" (quote subs-posn) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIS1" (list 0 1 2 3)) (om-load-inputfun (quote input-funbox) " a list of indexes" "POSN" (list 1 3)) (om-load-inputfun (quote input-funbox) "a list" "VAL" (list (quote a) (quote b))))) (om-make-point 191 391) (om-make-point 304 55) nil nil nil 1) (om-load-boxcall (quote genfun) "TREE2RATIO" (quote tree2ratio) (quote ((om-load-inputfun (quote input-funbox) "tree" "TREE" (quote ?)))) (om-make-point 242 195) nil nil nil nil 1) (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "a chord object , a list of chord objects, a list of midics, a list of lists of midics." "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord))) (om-load-inputfun (quote input-funbox) "a number indicating the frequency of the quarter-note (default 60/mn)" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "no documentation" "LEGATO" 100) (om-load-inputfun (quote input-funbox) "no documentation" "TIES" nil))) (om-make-point 19 34) (om-make-point 537 111) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) ((1 (1 -1 2)) (1 (3.0 -1)) (1 (3 -1)) (1 (1 -1 2)))) ((4 4) ((1 (1.0 -1 1 -1)) (1 (3 -1)) 1 (1 (1.0 -1 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (750)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (500)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote ((((0) nil (0)) ((0) nil) ((0) nil) ((0) nil (0))) (((0) nil (0) nil) ((0) nil) (0) ((0) nil (0)))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0301 nil))))) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems winpos winsize mode grillestep notechancolor? obj-mode palette-mode zoom inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 2621450 18350450 0 1000 nil 0 0 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote empty) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "GET-REST-PLACES" (quote get-rest-places) (quote ((om-load-inputfun (quote input-funbox) "tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 358 196) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-PULSE-PLACES" (quote get-pulse-places) (quote ((om-load-inputfun (quote input-funbox) "tree" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 91 194) nil nil nil nil 1))) (quote ((12 0 1 0 nil 0) (1 0 2 1 nil 0) (9 0 6 1 nil 0) (8 0 7 0 nil 0) (2 0 7 1 nil 0) (10 0 8 0 nil 0) (12 0 8 1 nil 0) (10 0 9 0 nil 0) (12 0 9 1 ((om-make-point 396 252) (om-make-point 396 322) (om-make-point 370 356) (om-make-point 343 391)) 0) (7 0 9 2 nil 0) (11 1 10 0 nil 0) (11 1 12 0 nil 0) (11 1 13 0 nil 0))) nil 6.0301))
