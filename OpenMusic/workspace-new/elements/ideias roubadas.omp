; OM File Header - Saved 2021/07/13 12:34:02
; (6.19 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 1694 830) "" 183 0 nil "2021/07/13 12:34:02")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"C:../../../Composition/Ideias Roubadas II/channel.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/velocity.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/notas.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/ritmo.txt\"") (list (quote :sound) "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/temp-sound9436549.wav\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "ideias roubadas" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1046 545) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1204 550) (om-make-point 36 32) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1133 537) (om-make-point 43 32) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 1089 600) (om-make-point 119 76) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 1442 486) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HP-ORD 3" (quote hp-ord) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 1) (om-load-inputfun (quote input-funbox) "Sound class" "VELOCITY" 1))) (om-make-point 1407 563) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 1310 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dragged" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1358 333) (om-make-point 184 116) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (652 652 652 652)) :lvel (quote (30 30 30 30)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 358 708) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "temp-sound9436549.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 522 764) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "temp-sound9436549" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "temp-sound9436549.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HP-ORD" (quote hp-ord) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" nil))) (om-make-point 761 626) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "VOICE->SAMPLES" (quote voice->samples) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil))) (om-make-point 429 613) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 920 736) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil))) (om-make-point 868 591) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 783 472) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 627 747) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 583 627) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 384 418) (om-make-point 35 32) 92 "92" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 246 719) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 267 293) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-STEREO-TO-MONO" (quote sound-stereo-to-mono) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 384 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 105) (om-make-point 139 70) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 314 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 214 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 1 5 0 nil 0) (0 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 265 656) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 194 779) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "VOICE->SAMPLES-SOUND" (quote voice->samples-sound) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil))) (om-make-point 68 634) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 68 634)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 691 493) (om-make-point 501 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 929 332) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "channel" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 940 240) (om-make-point 632 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 659 154) (om-make-point 640 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "no comment") "" (om-make-point 512 364) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 512 77) (om-make-point 618 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 616 184) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "velocity" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 368 175) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "notas" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 204 284) (om-make-point 78 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 32) (om-make-point 627 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 100 144) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "ritmo" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 444 312) (om-make-point 222 89) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6555) (5669) (6565) (5659) (6551) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6150) (5900) (6400) (4800) (7700) (4900) (6400) (6500) (7500) (5400) (5600) (6300) (6550) (6700) (5100) (6000) (6700) (7000) (7700) (7514) (7750) (5400) (7314 6290 6549 5531) (4100) (4900) (6200) (5300) (5686) (6002) (6198) (7775) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (6700) (6100) (5000) (5200) (6550) (7902 6550 6969 7200) (6230) (5700) (6300) (6600) (6200) (5500 6633 7507 7889 6771 7205) (6550) (6100) (5000) (5200) (4800 5502 6550 6969) (6200) (5600) (6400) (6700) (6400) (5400) (4500) (4800 5502 6550 6969) (4900 6200 6755 6969) (5000 5502 6550 7425) (6100 6550 6969) (6220 6755 6969) (7028 6550 7425) (6250) (6700) (5500) (6450) (6650) (6300) (6500) (6700) (4900) (6500) (6400) (6500) (6700) (6925) (6300) (6700) (6450) (6650) (6500) (6475) (6294) (5478) (5796) (6565) (5478) (6655) (5569) (6565) (5659) (6675) (5469) (6565) (5659) (6050) (6050) (6050))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000)) :ldur (quotelvel (quote ((60) (40) (40) (40) (80) (50) (60) (20) (30) (90 90 90 90) (40) (50) (60) (80) (100) (50) (60) (20) (100) (40) (30) (50) (60) (70) (80) (110) (20) (20) (10) (40) (67) (50) (90 90 90 90) (90) (70) (50) (20) (40) (50) (50) (60) (20) (30) (40) (50) (110 110 110 110) (40) (50) (10) (50) (60) (20) (30) (50) (80 80 80 80) (40) (50) (60) (70) (30) (40 90 90 90 90 90) (50) (60) (20) (30) (40 30 50 10) (40) (50) (60) (70) (120) (60) (70) (50 60 70 75) (90 90 90 75) (50 50 50 80) (50 50 50) (60 60 60) (60 60 60) (60) (70) (100) (60) (70) (40) (40) (40) (40) (40) (40) (40) (40) (30) (50) (60) (70) (80) (90) (30) (30) (30) (30) (30) (40) (40) (40) (40) (40) (40) (60) (40) (40) (40) (40) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((40) (497) (20) (118) (328) (25) (40) (40) (118) (300 300 300 300) (20) (40) (20) (300) (328) (25) (20) (20) (328) (118) (300) (25) (20) (20) (25) (328) (16) (20) (328) (425) (328) (497) (328 328 328 328) (497) (497) (497) (25) (25) (40) (20) (300) (497) (40) (40) (25) (274 274 274 274) (20) (118) (20) (20) (40) (118) (118) (40) (300 300 300 300) (20) (25) (20) (20) (25) (497 300 300 328 271 274) (40) (40) (25) (25) (497 274 300 20) (20) (25) (20) (20) (274) (25) (497) (497 274 300 20) (497 274 300 20) (497 274 300 20) (274 300 20) (274 300 20) (274 300 20) (118) (20) (118) (20) (20) (40) (40) (20) (25) (20) (40) (20) (20) (118) (20) (20) (118) (20) (20) (63) (63) (63) (63) (63) (497) (20) (118) (20) (497) (425) (118) (20) (497) (425) (425) (425))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 820 255) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 88 448) (om-make-point 527 121) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (23/8 (((3 4) (3 1 1 1)) ((5 8) (4 1.0)) ((4 4) (1 1 1 1 2 -2)) ((2 4) ((2 (-2 -1 -6))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6555)) :ldur (quote (978)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5669)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6551)) :ldur (quote (1304)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (652 652 652 652)) :lvel (quote (90 90 90 90)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 92) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (7 2 4 0 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (7 1 6 0 nil 0) (11 0 8 0 nil 0) (8 0 9 0 nil 0) (34 0 11 0 nil 0) (13 0 12 0 nil 0) (34 0 13 0 nil 0) (23 1 14 0 nil 0) (16 0 15 0 nil 0) (34 0 16 0 nil 0) (19 0 18 0 nil 0) (21 0 19 0 nil 0) (18 0 20 0 nil 0) (34 0 21 0 nil 0) (24 0 23 0 nil 0) (25 0 28 0 nil 0) (27 0 29 0 nil 0) (32 1 30 0 nil 0) (31 0 32 0 nil 0) (29 1 33 1 nil 0) (28 1 33 4 nil 0) (23 1 33 6 nil 0) (30 0 34 1 nil 0) (33 0 34 2 nil 0) (17 0 34 3 nil 0))) nil 6.19))
