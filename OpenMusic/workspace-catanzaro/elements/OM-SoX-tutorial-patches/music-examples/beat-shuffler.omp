; OM File Header - Saved 2021/05/07 16:47:06
; (6.18 :patc (om-make-point 37 340) (om-make-point 50 22) (om-make-point 894 918) "" 183 0 nil "2021/05/07 16:47:06")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"C:../../../../out-files/test6.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "beat-shuffler" (quote ((let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 381 765) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 94) (quote "--> this is set to 'real-time' for preview - by evaluating the 'sox-process' box. $You can set it to 'new file' to write a sound file") "" (om-make-point 436 645) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 77) (quote "try connecting only one of the patches...") "" (om-make-point 479 355) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 341 192) (om-make-point 28 30) 16 "16" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 16))) (om-make-point 304 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 355 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 241 587) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 198 518) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 2.8) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.2))) (om-make-point 380 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOX-PROCESS 3" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "realtime" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 365 651) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOX-PROCESS 4" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "pipe" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 250 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOX-CONCATENATE" (quote sox-concatenate) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "soundfiles" nil) (om-load-inputfun (quote input-funbox) "" "gains" nil))) (om-make-point 368 547) (om-make-point 70 50) (if (find-class (quote sox-concatenate) nil) (make-instance (quote sox-concatenate) :sound (list "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.7054365 0.17635912  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.9399507 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.234514 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.88179565 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.5872324 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.5290774 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.7635915 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.4108732 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.4690283 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.4108732 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.35271826 0.17635915  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.11631 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.17635913 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.9399507 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.5872324 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.4690283 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.17635913 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.5290774 0.17635912  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.234514 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.88179565 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.0581548 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.35271826 0.17635915  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.4690283 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.7635915 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.292669 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.234514 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.0581548 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.5290774 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.11631 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.11631 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.7054365 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.292669 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.7635915 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.0581548 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.292669 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.5872324 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.7054365 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.9399507 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.35271826 0.17635915  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.88179565 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.9399507 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.17635913 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.11631 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.88179565 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.7054365 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.234514 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.292669 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.35271826 0.17635915  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.0581548 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.4108732 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.5872324 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.7635915 0.17635918  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 1.4108732 0.17635918  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.17635913 0.17635913  reverse gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 0.5290774 0.17635912  gain 0.0" "|'/Users/Marlon_MBPro3/Research/OM-SoX/sources/OM-SoX 1.0/executables/macos/sox'  -q --multi-threaded --buffer 4096 --input-buffer 512 -V0  '/Applications/Max 6.1/examples/sounds/jongly.aif' -p trim 2.4690283 0.17635918  reverse gain 0.0") :gains (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 338 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "test6.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 251 263) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "charl" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "out-files")) :device nil :host nil :name "test6" :type "wav") 1 100 0))) (when thesound (setf (markers thesound) (quote (0 0.27581632 0.55163265 0.82744897 1.1032653 1.3790816 1.6548979 1.9307143 2.2065306 2.482347 2.7581635 3.03398 3.3097964 3.5856128 3.8614292 4.1372457)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "test6.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 530 117) (om-make-point 1044 520) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "test6.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 196 75) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "charl" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "out-files")) :device nil :host nil :name "test6" :type "wav") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "test6.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 608 332) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "transp?" (om-load-patch-abs1 "transp?" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 153 244) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "transp-or-not" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 135 156) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 463 100) (om-make-point 46 30) -700 "-700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 523 99) (om-make-point 41 30) 700 "700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" -200) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 468 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOX-TRANSPOSE" (quote sox-transpose) (quote ((om-load-inputfun (quote input-funbox) "transposition in midicents" "TRANSPOSITION" nil))) (om-make-point 460 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 290 482) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 246 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 270 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 240 404) (om-make-point 143 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 129 294) (om-make-point 45 30) (list (quote t) nil) "(t nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 111 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 232 103) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 289 616) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 164 616) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (2 0 3 0 nil 0) (7 0 4 0 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (10 0 6 0 nil 0) (9 0 7 0 nil 0) (5 0 7 1 nil 0) (6 0 7 2 nil 0) (8 0 9 0 nil 0) (4 1 11 0 nil 0) (4 0 12 0 nil 0))) 1 "transp-or-not" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 161 61) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 342 390) nil (list (list "trim 0 0.17635913  reverse pitch 117 82 14.68 12" "trim 0.17635913 0.17635913  pitch 476 82 14.68 12" "trim 0.35271826 0.17635915 " "trim 0.5290774 0.17635912 " "trim 0.7054365 0.17635912  pitch -1 82 14.68 12" "trim 0.88179565 0.17635918  reverse pitch 330 82 14.68 12" "trim 1.0581548 0.17635918  reverse" "trim 1.234514 0.17635918  pitch 637 82 14.68 12" "trim 1.4108732 0.17635918 " "trim 1.5872324 0.17635918 " "trim 1.7635915 0.17635918  reverse pitch 472 82 14.68 12" "trim 1.9399507 0.17635918  reverse" "trim 2.11631 0.17635918  reverse" "trim 2.292669 0.17635918  reverse" "trim 2.4690283 0.17635918  pitch -421 82 14.68 12")) nil "transp?"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 164 56) (quote "Beat Shuffler") "" (om-make-point 247 20) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 14.000001 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "reverse? 2" (om-load-patch-abs1 "reverse?" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 154 239) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "reverse-or-not" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 132 156) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 228 396) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 230 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOX-REVERSE" (quote sox-reverse) (quote nil) (om-make-point 278 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 180 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 180 318) (om-make-point 143 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 69 208) (om-make-point 45 30) (list (quote t) nil) "(t nil)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 51 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 184 102) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 227 530) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 102 530) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (7 0 3 0 nil 0) (6 0 4 0 nil 0) (1 0 4 1 nil 0) (3 0 4 2 nil 0) (5 0 6 0 nil 0) (0 1 8 0 nil 0) (0 0 9 0 nil 0))) 1 "reverse-or-not" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 162 71) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 415 390) nil (list (list "trim 0 0.27581632  reverse" "trim 0.27581632 0.27581632  reverse" "trim 0.55163265 0.27581632  reverse" "trim 0.82744897 0.27581632 " "trim 1.1032653 0.27581632  reverse" "trim 1.3790816 0.27581632  reverse" "trim 1.6548979 0.27581632  reverse" "trim 1.9307143 0.27581632  reverse" "trim 2.2065306 0.27581644 " "trim 2.482347 0.27581644 " "trim 2.7581635 0.27581644  reverse" "trim 3.03398 0.27581644 " "trim 3.3097964 0.27581644 " "trim 3.5856128 0.27581644  reverse" "trim 3.8614292 0.27581644 ")) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "slicer 2" (om-load-patch-abs1 "slicer" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "sox-trim-inside" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 101 136) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 168 426) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOX-TRIM" (quote sox-trim) (quote ((om-load-inputfun (quote input-funbox) "start (in secs)" "START" nil))) (om-make-point 130 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 205 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 70 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 240 166) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 74 90) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 195 531) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 111 530) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (3 0 1 1 nil 0) (1 0 2 0 nil 0) (5 0 3 0 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (0 1 7 0 nil 0) (0 0 8 0 nil 0))) 1 "sox-trim-inside" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "markers" 0 (om-make-point 122 38) "" "markers" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 124 228) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (0 0 2 0 nil 0))) 6.18 nil "" (om-make-point 200 200) (om-make-point 279 272)) (quote ((om-load-inputfun (quote input-funbox) "" "markers" nil))) (om-make-point 397 314) nil (list (list "trim 0 0.27581632 " "trim 0.27581632 0.27581632 " "trim 0.55163265 0.27581632 " "trim 0.82744897 0.27581632 " "trim 1.1032653 0.27581632 " "trim 1.3790816 0.27581632 " "trim 1.6548979 0.27581632 " "trim 1.9307143 0.27581632 " "trim 2.2065306 0.27581644 " "trim 2.482347 0.27581644 " "trim 2.7581635 0.27581644 " "trim 3.03398 0.27581644 " "trim 3.3097964 0.27581644 " "trim 3.5856128 0.27581644 " "trim 3.8614292 0.27581644 ")) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (14 0 5 0 nil 0) (7 0 6 0 nil 0) (10 0 7 0 nil 0) (5 0 8 1 nil 0) (4 0 8 2 nil 0) (11 0 9 0 nil 0) (13 0 10 0 nil 0) (17 0 10 1 nil 0) (12 0 11 1 nil 0) (6 0 12 0 nil 0) (14 0 13 0 nil 0) (8 0 13 2 nil 0) (17 0 15 0 nil 0) (18 0 17 0 nil 0) (13 2 18 0 nil 0))) nil 6.18))
