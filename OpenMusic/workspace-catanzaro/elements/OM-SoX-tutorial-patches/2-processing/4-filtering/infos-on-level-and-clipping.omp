; OM File Header - Saved 2021/03/04 11:25:16
; (6.070005 :patc (om-make-point 57 118) (om-make-point 618 269) (om-make-point 879 518) "" 183 0 nil "2021/03/04 11:25:16")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "infos-on-level-and-clipping" (quote ((om-load-boxcomment "comment" (om-make-point 137 48) (quote "-> use 'reclaim' options$ after filtering/eqing to $reclaim headroom") "" (om-make-point 432 144) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 168 48) (quote "-> use 'headroom'$option before filtering/eqing $to provide adaptive headroom") "" (om-make-point 305 285) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 219 30) (quote "<-- compare the audio output -->") "" (om-make-point 349 429) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PEAK-EQ" (quote sox-peak-eq) (quote ((om-load-inputfun (quote input-funbox) "Frequency (in Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Bandwidth (default unit: Hz)" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "Gain in dB" "GAIN" -12) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 697 198) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 665 155) (om-make-point 41 30) 200 "200" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 755 156) (om-make-point 34 30) 24 "24" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 714 155) (om-make-point 34 30) 30 "30" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 310 131) (om-make-point 34 30) 24 "24" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 211 131) (om-make-point 41 30) 200 "200" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 266 130) (om-make-point 34 30) 30 "30" nil) (om-load-boxcall (quote genfun) "SOX-PEAK-EQ" (quote sox-peak-eq) (quote ((om-load-inputfun (quote input-funbox) "Frequency (in Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Bandwidth (default unit: Hz)" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "Gain in dB" "GAIN" -12) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 249 176) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 654 312) nil nil nil nil 1) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 589 229) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 580 292) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 670 416) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 532 308) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 159 414) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 532 308) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 78 237) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 564 300) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-LEVEL 2" (quote sox-level) (quote ((om-load-inputfun (quote input-funbox) "gain (dB)" "GAIN" 0) (om-load-inputkeyword (quote input-keyword) "options (applied before gain)" "options" (quote :options) "reclaim" (list (list "normalize" "normalize") (list "limit" "limit") (list "headroom" "headroom") (list "reclaim" "reclaim"))))) (om-make-point 380 150) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-LEVEL" (quote sox-level) (quote ((om-load-inputfun (quote input-funbox) "gain (dB)" "GAIN" 0) (om-load-inputkeyword (quote input-keyword) "options (applied before gain)" "options" (quote :options) "headroom" (list (list "normalize" "normalize") (list "limit" "limit") (list "headroom" "headroom") (list "reclaim" "reclaim"))) (om-load-inputkeyword (quote input-keyword) "connect sox-effects to append to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 242 265) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 143 320) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 666 34) (quote "You can use \"sox-level\" with 'headroom' and 'reclaim' options to prevent audio from clipping") "" (om-make-point 131 20) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (quote ((4 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 3 2 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (7 0 10 2 nil 0) (16 0 10 3 nil 0) (12 0 11 0 nil 0) (3 0 11 1 nil 0) (11 0 13 0 nil 0) (18 0 14 0 nil 0) (10 0 17 2 nil 0) (15 0 18 0 nil 0) (17 0 18 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 62 8)) (setf (pict-size newpict) (om-make-point 64 55)) newpict)) 6.070005))
