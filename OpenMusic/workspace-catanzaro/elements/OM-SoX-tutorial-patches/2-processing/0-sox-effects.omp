; OM File Header - Saved 2021/03/04 11:25:16
; (6.070005 :patc (om-make-point 188 172) (om-make-point 338 148) (om-make-point 1032 876) "" 183 0 nil "2021/03/04 11:25:16")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/seagull.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "0-sox-effects" (quote ((om-load-boxcall (quote genfun) "SOX-TREMOLO 2" (quote sox-tremolo) (quote ((om-load-inputfun (quote input-funbox) "frequency (in Hz)" "SPEED" 7) (om-load-inputfun (quote input-funbox) "depth (in %)" "DEPTH" 75))) (om-make-point 790 550) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-SPEED 2" (quote sox-speed) (quote ((om-load-inputfun (quote input-funbox) "speed-factor / midicents (depending on mode)" "SPEED" 0.7) (om-load-inputkeyword (quote input-keyword) "connect other sox-append to add to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 782 652) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 804 517) (om-make-point 27 30) 7 "7" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 838 516) (om-make-point 34 30) 75 "75" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 760 622) (om-make-point 38 30) 0.7 "0.7" nil) (om-load-boxcall (quote genfun) "SOX-PHASER" (quote sox-phaser) (quote ((om-load-inputfun (quote input-funbox) "delay (in millisecs)" "DELAY" 3) (om-load-inputfun (quote input-funbox) "decay (in % relative to input-gain)" "DECAY" 65) (om-load-inputfun (quote input-funbox) "modulation-frequency (in Hz)" "MODULATION-FREQUENCY" 0.2))) (om-make-point 712 495) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" ""))) (om-make-point 626 657) nil nil nil nil 1) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 642 748) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 559 276) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 296 45) (quote "The 'pipe' output of sox-process can be used as$input for another sox-process.") "" (om-make-point 600 438) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "Output type (new file, replace file, pipe, or realtime) [string]. Also accepts directory, filename, filepath [path]" "output" (quote :output) "pipe" (list (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe") (list "realtime" "realtime"))))) (om-make-point 616 574) nil nil nil nil 1) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 617 501) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 555 303) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 98 561) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 555 303) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 106 741) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 559 276) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 572 327) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 559 276) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 169 334) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 559 276) (om-make-point 400 22) 0 1 (quote t) nil)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 477 170) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 556 311) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 214 34) (quote "General usage of sox-effects") "" (om-make-point 135 17) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 587 178) (om-make-point 194 30) "phaser 1.0 1.0 3 0.65 0.2  -s" "\"phaser 1.0 1.0 3 0.65 0.2  -s\"" nil) (om-load-boxcall (quote genfun) "SOX-PHASER" (quote sox-phaser) (quote ((om-load-inputfun (quote input-funbox) "delay (in millisecs)" "DELAY" 3) (om-load-inputfun (quote input-funbox) "decay (in % relative to input-gain)" "DECAY" 65) (om-load-inputfun (quote input-funbox) "modulation-frequency (in Hz)" "MODULATION-FREQUENCY" 0.2))) (om-make-point 851 157) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-FLANGER" (quote sox-flanger) (quote ((om-load-inputfun (quote input-funbox) "Base delay (ms)" "DELAY" 0) (om-load-inputfun (quote input-funbox) "Added swept delay (ms)" "DEPTH" 2) (om-load-inputfun (quote input-funbox) "Signal feedback (%)" "FEEDBACK" 75) (om-load-inputfun (quote input-funbox) "Amount of delayed signal mixed with oiginal (%)" "MIX" 99) (om-load-inputfun (quote input-funbox) "Frequency of sweep (Hz)" "MODULATION-FREQUENCY" 0.1) (om-load-inputfunmenu1 (quote input-funmenu) "waveform of sweep (sine/triangle)" "SHAPE" "sine" (list (list "sine" "sine") (list "triangle" "triangle"))) (om-load-inputfun (quote input-funbox) "Swept wave phase-shift for multi-channel audio (%) [0 = 100 = same phase on each channel]" "PHASE" 25) (om-load-inputfunmenu1 (quote input-funmenu) "interpolation mode for digital delay-line (linear/quadratic)" "INTERPOLATION" "linear" (list (list "linear" "linear") (list "quadratic" "quadratic"))))) (om-make-point 278 159) nil nil nil nil 1) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 161 160) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 570 322) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 254 500) (om-make-point 38 30) 0.7 "0.7" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 317 614) (om-make-point 38 30) 0.7 "0.7" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 379 499) (om-make-point 34 30) 75 "75" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 500) (om-make-point 27 30) 7 "7" nil) (om-load-boxcomment "comment 8" (om-make-point 68 30) (quote "<- == ->") "" (om-make-point 786 175) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 100 26) (quote "2. sox-tremolo") "" (om-make-point 315 756) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 81 30) (quote "1. sox-speed") "" (om-make-point 316 737) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 81 30) (quote "2. sox-speed") "" (om-make-point 203 752) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 26) (quote "1. sox-tremolo") "" (om-make-point 203 731) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS 4" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 556 230) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 440 48) (quote "Alternatively, sox-effects can be specified as strings directly. $In fact, the sox-effect functions produce strings themselves.") "" (om-make-point 487 111) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-SPEED 2" (quote sox-speed) (quote ((om-load-inputfun (quote input-funbox) "speed-factor / midicents (depending on mode)" "SPEED" 0.7) (om-load-inputkeyword (quote input-keyword) "connect other sox-append to add to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 323 653) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-TREMOLO 2" (quote sox-tremolo) (quote ((om-load-inputfun (quote input-funbox) "frequency (in Hz)" "SPEED" 7) (om-load-inputfun (quote input-funbox) "depth (in %)" "DEPTH" 75))) (om-make-point 331 533) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 194 607) (om-make-point 21 30) 7 "7" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 218 607) (om-make-point 28 30) 75 "75" nil) (om-load-boxcall (quote genfun) "SOX-TREMOLO" (quote sox-tremolo) (quote ((om-load-inputfun (quote input-funbox) "frequency (in Hz)" "SPEED" 25) (om-load-inputfun (quote input-funbox) "depth (in %)" "DEPTH" 40) (om-load-inputkeyword (quote input-keyword) "connect other sox-append to add to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 199 644) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-SPEED" (quote sox-speed) (quote ((om-load-inputfun (quote input-funbox) "speed-factor / midicents (depending on mode)" "SPEED" 0.7))) (om-make-point 224 530) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" ""))) (om-make-point 90 629) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 153 235) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 111 30) (quote "Single Sox-Effect") "" (om-make-point 157 119) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 417 61) (quote "Sox-Effects can be concatenated into more complex dsp topologies. $NB: order of execution is bottom-up (evaluation graph). $Notice the difference between the two examples below.") "" (om-make-point 78 430) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (quote ((2 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 1 1 nil 0) (9 0 6 0 nil 0) (1 0 6 1 nil 0) (6 0 7 0 nil 0) (10 0 9 0 nil 0) (5 0 9 1 nil 0) (38 0 12 0 nil 0) (30 0 13 0 nil 0) (39 0 14 0 nil 0) (15 0 30 0 nil 0) (17 0 30 1 nil 0) (22 0 32 0 nil 0) (33 0 32 1 nil 0) (24 0 33 0 nil 0) (23 0 33 1 nil 0) (34 0 36 0 nil 0) (35 0 36 1 nil 0) (37 0 36 2 nil 0) (21 0 37 0 nil 0) (11 0 38 0 nil 0) (36 0 38 1 nil 0) (20 0 39 0 nil 0) (19 0 39 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 58 8)) (setf (pict-size newpict) (om-make-point 64 51)) newpict)) 6.070005))
