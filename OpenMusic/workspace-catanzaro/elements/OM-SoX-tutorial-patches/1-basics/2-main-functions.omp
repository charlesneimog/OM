; OM File Header - Saved 2021/03/04 11:25:16
; (6.070005 :patc (om-make-point 145 10) (om-make-point 359 272) (om-make-point 1158 536) "" 183 0 nil "2021/03/04 11:25:16")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/sax-tenor-multi.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/seagull.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "2-main-functions" (quote ((om-load-boxcomment "comment" (om-make-point 146 39) (quote "2. specify a sox-effect $as a string") "" (om-make-point 414 297) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 341 299) (om-make-point 70 30) "flanger" "\"flanger\"" nil) (om-load-boxcomment "comment" (om-make-point 202 39) (quote "3. select and evaluate ('v') $text box to obtain analysis result") "" (om-make-point 905 423) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 183 52) (quote "2. choose a descriptor $from the menu (second inlet)$or specify as string") "" (om-make-point 913 323) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 117 52) (quote "1. connect sound $to first inlet of $'sox-analysis'") "" (om-make-point 635 272) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 846 299) (om-make-point 89 30) "peak level" "\"peak level\"" nil) (om-load-boxcomment "comment" (om-make-point 305 90) (quote "SOX-analysis:$ -analyze audio for a specific descriptor$ -analyze audio for multiple descriptors in one go$ -select a channel of the audio for analysis$ -specify a region of the audio for analysis") "" (om-make-point 727 148) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 117 52) (quote "1. connect sound $to first inlet of $'sox-process'") "" (om-make-point 88 268) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 299 433) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 771 414) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "sax-tenor-multi.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 745 265) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "sax-tenor-multi" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sax-tenor-multi.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 567 290) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 202 267) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 571 300) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-ANALYSIS" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "peak level db" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean norm" "mean norm") (list "mean amplitude" "mean amplitude") (list "rms amplitude" "rms amplitude") (list "max delta" "max delta") (list "min delta" "min delta") (list "mean delta" "mean delta") (list "rms delta" "rms delta") (list "fundamental frequency" "fundamental frequency") (list "headroom db" "headroom db") (list "dc offset" "dc offset") (list "peak level db" "peak level db") (list "rms level db" "rms level db") (list "rms peak db" "rms peak db") (list "rms trough db" "rms trough db") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 798 329) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 380 83) (quote "There are two main functions in OM-SoX:$ $SOX-PROCESS: for audio manipulation$SOX-ANALYSIS: for audio analysis") "" (om-make-point 137 18) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 256 105) (quote "SOX-process:$ -combine input audio in various ways $ -import/export audio in various formats,$ -apply effects$ -change samplerate$ -change bitdepth") "" (om-make-point 236 138) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 203 39) (quote "3. select and evaluate ('v') $sound obj to render an audio file") "" (om-make-point 96 440) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "SOX-INPUT" nil) (om-load-inputfun (quote input-funbox) "" "SOX-EFFECT" ""))) (om-make-point 283 336) nil nil nil nil 1))) (quote ((16 0 8 0 nil 0) (12 0 9 0 nil 0) (10 0 12 0 nil 0) (5 0 12 1 nil 0) (11 0 16 0 nil 0) (1 0 16 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 62 8)) (setf (pict-size newpict) (om-make-point 62 55)) newpict)) 6.070005))
