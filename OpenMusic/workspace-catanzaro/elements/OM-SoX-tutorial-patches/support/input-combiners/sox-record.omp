; OM File Header - Saved 2021/03/04 11:25:16
; (6.070005 :patc (om-make-point 100 54) (om-make-point 330 461) (om-make-point 460 418) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "sox-record" (quote ((om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 135 332) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 517 302) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 214 130) (om-make-point 48 30) (list 1 2) "(1 2)" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be processed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfun (quote input-funbox) "Sox-effect to be applied to audio input [string]" "SOX-EFFECT" ""))) (om-make-point 119 244) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 149 130) (om-make-point 56 30) (list 0 0) "(0. 0.)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 112 129) (om-make-point 27 30) 2 "2" nil) (om-load-boxcomment "comment 3" (om-make-point 211 48) (quote "Dbl-click the sox-record class to open $the editor for setting input levels") "" (om-make-point 213 177) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 252 60) (quote "sox-records allows recording/streaming $real-time audio input.$") "" (om-make-point 108 76) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 94 34) (quote "SoX-Record") "" (om-make-point 125 19) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SOX-RECORD" (quote sox-record) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "Duration of output audio (sec). [float]" "duration" 2) (om-load-inputfun (quote input-funbox) "" "gains" nil) (om-load-inputfun (quote input-funbox) "" "channels" nil))) (om-make-point 133 171) (om-make-point 70 50) (if (find-class (quote sox-record) nil) (make-instance (quote sox-record) :duration 2 :gains (list 0 0) :channels (list 1 2) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 206 100))) nil nil nil nil))) (quote ((2 0 0 0 nil 0) (8 0 2 0 nil 0) (4 0 8 1 nil 0) (3 0 8 2 nil 0) (1 0 8 3 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 57 8)) (setf (pict-size newpict) (om-make-point 63 48)) newpict)) 6.070005))
