; OM File Header - Saved 2021/05/04 0:02:29
; (6.18 :patc (om-make-point 496 10) (om-make-point 544 93) (om-make-point 1203 609) "" 183 0 "2020/11/28 13:42:28" "2021/05/04 0:02:29")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"C:../../in-files/flauta.wav\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "fft" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 429 239) (om-make-point 44 36) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 370 213) (om-make-point 52 36) 2048 "2048" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-FFT" (quote do-fft) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "SOUND" nil) (om-load-inputfun (quote input-funbox) "FFT-size" "FFT-SIZE" 2048) (om-load-inputfun (quote input-funbox) "Hop-size" "HOP-SIZE" 512) (om-load-inputfunmenu1 (quote input-funmenu) "Windows-type" "WINDOW-TYPE" 2 (list (list "hann" 1) (list "blackman" 2) (list "barlett" 3) (list "hamming" 4) (list "rectangular" 5) (list "nenhuma" 6))))) (om-make-point 302 317) (om-make-point 232 62) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "flauta.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 238 78) (om-make-point 287 104) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "charl" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "in-files")) :device nil :host nil :name "flauta" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "flauta.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 2 2 nil 0))) nil 6.18))
