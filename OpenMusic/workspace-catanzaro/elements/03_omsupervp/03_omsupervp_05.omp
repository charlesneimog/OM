; OM File Header - Saved 2017/05/17 17:58:13
; (6.120001 :patc (om-make-point 10 210) (om-make-point 67 23) (om-make-point 1327 855) "" 183 0 "2017/05/17 16:41:04" "2017/05/17 17:13:42")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../out-files/trumpetgold.aiff-transposicao.aiff\"" "#P\"../in-files/snds/trumpetgold.aiff\"") (list (quote :sdif) "#P\"../out-files/f0.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "03_omsupervp_05" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 429 368) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 623 366) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 615 434) (om-make-point 144.0 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 323 48) (quote "reflexo = eixo - figura") nil (om-make-point 798 380) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 706 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "f->mc") nil (om-make-point 793 310) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 107 409) (om-make-point 398 103) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0232 0.0464 0.0696 0.0929 0.1161 0.1393 0.1625 0.1857 0.209 0.2322 0.2554 0.2786 0.3018 0.3251 0.3483 0.3715 0.3947 0.4179 0.4412 0.4644 0.4876 0.5108 0.534 0.5573 0.5805 0.6037 0.6269 0.6501 0.6734 0.6966 0.7198 0.743 0.7662 0.7895 0.8127 0.8359 0.8591 0.8823 0.9056 0.9288 0.952 0.9752 0.9984 1.0217 1.0449 1.0681 1.0913 1.1145 1.1378 1.161 1.1842 1.2074 1.2306 1.2539 1.2771 1.3003 1.3235 1.3467 1.37 1.3932 1.4164 1.4396 1.4628 1.4861 1.5093 1.5325 1.5557 1.5789 1.6022 1.6254 1.6486 1.6718 1.695 1.7183 1.7415 1.7647 1.7879 1.8111 1.8344 1.8576 1.8808 1.904 1.9272 1.9505 1.9737 1.9969 2.0201 2.0433 2.0666 2.0898 2.113 2.1362 2.1594 2.1827 2.2059 2.2291 2.2523 2.2755 2.2988 2.322 2.3452 2.3684 2.3916 2.4149 2.4381 2.4613 2.4845 2.5077 2.531 2.5542 2.5774 2.6006 2.6238 2.6471 2.6703 2.6935 2.7167 2.7399 2.7632 2.7864 2.8096 2.8328 2.856 2.8793 2.9025 2.9257 2.9488998 2.9721003 2.9954 3.0186 3.0418 3.065 3.0882 3.1115003 3.1347 3.1579 3.1811 3.2043 3.2276 3.2508 3.274 3.2972 3.3204 3.3437 3.3668998 3.3901003 3.4133003 3.4365 3.4598 3.483 3.5062 3.5294 3.5526 3.5759 3.5991 3.6223 3.6455 3.6686998 3.692 3.7152 3.7384 3.7616 3.7848 3.8080998 3.8313003 3.8545 3.8777 3.9009 3.9242 3.9474 3.9706 3.9938 4.017 4.0403 4.0635 4.0867 4.1099 4.1331 4.1564 4.1796 4.2028 4.226 4.2492 4.2725 4.2957 4.3189 4.3421 4.3653 4.3886 4.4118 4.435 4.4582 4.4814 4.5047 4.5279 4.5511 4.5743 4.5975 4.6208 4.644 4.6672 4.6904 4.7136 4.7369 4.7601 4.7833 4.8065 4.8297 4.853 4.8762 4.8994 4.9226 4.9458 4.9691 4.9923 5.0155 5.0387 5.0619 5.0852 5.1084 5.1316 5.1548 5.178 5.2013 5.2245 5.2477 5.2709 5.2941 5.3174 5.3406 5.3638 5.387 5.4102 5.4334993 5.4567003 5.4799004 5.5031004 5.5263 5.5496 5.5728 5.596 5.6192 5.6424 5.6657 5.6889 5.7121 5.7353 5.7584996 5.7818 5.805 5.8282 5.8514 5.8745995 5.8979 5.9211 5.9443 5.9675 5.9906993 6.014 6.0372 6.0604 6.0836 6.1068 6.1301 6.1533 6.1765 6.1997 6.2229 6.2462 6.2694 6.2926 6.3158 6.339 6.3623004 6.3855 6.4087 6.4319 6.4551 6.4784 6.5016 6.5248 6.548 6.5712 6.5945 6.6176996 6.6408997 6.6641007 6.6873007 6.7106 6.7337995 6.7569995 6.7802005 6.8034005 6.8267 6.8498993 6.8730993 6.8962994 6.9195004 6.9428 6.966 6.9892 7.0124 7.0356 7.0589 7.0821 7.1053 7.1285 7.1517 7.175 7.1982 7.2214 7.2446 7.2678 7.2911 7.3143 7.3375 7.3607 7.3839 7.4072 7.4304 7.4536)) (quote (68.0 -1842.0 -1852.0 -1881.9999 -1896.0001 -1906.0 -1906.0 -1908.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1910.0 -1908.0 -1908.0 -1908.0 -1906.0 -1906.0 -1906.0 -1906.0 -1906.0 -1906.0 -1904.0 -1906.0 -1908.0 -1912.0 -1912.0 -1910.0 -1906.0 -1896.0001 -1896.0001 -1902.0 -1904.0 -1904.0 -1906.0 -1906.0 -1904.0 -1900.0 -1900.0 -1904.0 -1904.0 -1910.0 -1910.0 -1910.0 -1908.0 -1908.0 -1908.0 -1908.0 -1908.0 -1910.0 -1914.0 -1914.0 -1916.0 -1914.0 -1914.0 -1912.0 -1912.0 -1910.0 -1908.0 -1906.0 -1906.0 -1906.0 -1902.0 -1902.0 -1900.0 -1900.0 -1902.0 -1904.0 -1908.0 -1908.0 -1908.0 -1904.0 -1902.0 -1900.0 -1900.0 -1900.0 -1904.0 -1906.0 -1914.0 -1920.0 -1920.0 -1910.0 -1904.0 -1890.0001 -1890.0001 -1902.0 -1910.0 -1920.0 -1920.0 -1916.0 -1912.0 -1906.0 -1906.0 -1910.0 -1916.0 -1924.0 -1924.0 -1926.0 -2040.0 -2080.0 -2096.0 -2106.0 -2114.0 -2128.0 -2128.0 -946.00007 -946.00007 -1110.0 -2292.0 -2292.0 -2282.0 -2220.0 -2130.0 -2104.0 -2086.0 -2058.0 -2000.0 -1936.0 -1930.0 -1926.0 -1930.0 -1934.0 -1986.0 -2090.0 -2104.0 -2112.0 -2116.0 -2116.0 -2116.0 -2116.0 -2118.0 -2122.0 -2122.0 -2120.0 -2118.0 -2116.0 -2116.0 -2270.0 -2284.0 -2290.0 -2292.0 -2292.0 -2292.0 -2292.0 -2290.0 -2288.0 -2284.0 -211.99999 -211.99999 -2104.0 -2104.0 -2104.0 -2108.0 -2110.0 -2108.0 -2108.0 -2106.0 -2106.0 -2106.0 -2106.0 -2104.0 -2104.0 -2106.0 -2106.0 -2106.0 -2106.0 -2106.0 -2106.0 -2106.0 -2106.0 -2106.0 -2094.0 -2094.0 -2086.0 -1908.0 -1908.0 -1910.0 -1914.0 -1916.0 -1916.0 -1916.0 -1916.0 -1914.0 -1914.0 -1912.0 -1910.0 -1786.0 -1786.0 -1792.0 -1794.0 -1794.0 -1796.0 -1796.0 -1798.0 -1798.0 -1794.0 -1782.0 -1782.0 -1780.0 84.0 84.0 -1582.0 -1586.0 -1590.0 -1592.0 -1594.0 -1596.0 -1596.0 -1596.0 -1596.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1594.0 -1592.0 -1592.0 -1592.0 -1592.0 -1592.0 -1592.0 -1590.0 -1590.0 -1580.0 -1576.0001 -176.0 -176.0 -186.0 -1396.0 -1398.0 -1398.0 -1398.0 -1398.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1398.0 -1398.0 -1398.0 -1398.0 -1398.0 -1398.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1398.0 -1398.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1400.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1402.0 -1404.0 -1404.0 -1404.0 -1404.0 -1404.0 -1406.0 -1408.0 -1408.0 -1408.0 -1408.0 -1408.0 -1408.0 -1406.0 -1406.0 -1402.0 -1398.0 -1398.0 -1406.0 -1406.0 -1406.0 -1406.0 -1408.0 -1408.0 -1406.0 -208.0 -179.99999 -179.99999 -206.0 -206.0 220.00002)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 68 85) (om-make-point 1342 481))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 431 202) (om-make-point 429 103) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0232 0.0464 0.0696 0.0929 0.1161 0.1393 0.1625 0.1857 0.209 0.2322 0.2554 0.2786 0.3018 0.3251 0.3483 0.3715 0.3947 0.4179 0.4412 0.4644 0.4876 0.5108 0.534 0.5573 0.5805 0.6037 0.6269 0.6501 0.6734 0.6966 0.7198 0.743 0.7662 0.7895 0.8127 0.8359 0.8591 0.8823 0.9056 0.9288 0.952 0.9752 0.9984 1.0217 1.0449 1.0681 1.0913 1.1145 1.1378 1.161 1.1842 1.2074 1.2306 1.2539 1.2771 1.3003 1.3235 1.3467 1.37 1.3932 1.4164 1.4396 1.4628 1.4861 1.5093 1.5325 1.5557 1.5789 1.6022 1.6254 1.6486 1.6718 1.695 1.7183 1.7415 1.7647 1.7879 1.8111 1.8344 1.8576 1.8808 1.904 1.9272 1.9505 1.9737 1.9969 2.0201 2.0433 2.0666 2.0898 2.113 2.1362 2.1594 2.1827 2.2059 2.2291 2.2523 2.2755 2.2988 2.322 2.3452 2.3684 2.3916 2.4149 2.4381 2.4613 2.4845 2.5077 2.531 2.5542 2.5774 2.6006 2.6238 2.6471 2.6703 2.6935 2.7167 2.7399 2.7632 2.7864 2.8096 2.8328 2.856 2.8793 2.9025 2.9257 2.9489 2.9721 2.9954 3.0186 3.0418 3.065 3.0882 3.1115 3.1347 3.1579 3.1811 3.2043 3.2276 3.2508 3.274 3.2972 3.3204 3.3437 3.3669 3.3901 3.4133 3.4365 3.4598 3.483 3.5062 3.5294 3.5526 3.5759 3.5991 3.6223 3.6455 3.6687 3.692 3.7152 3.7384 3.7616 3.7848 3.8081 3.8313 3.8545 3.8777 3.9009 3.9242 3.9474 3.9706 3.9938 4.017 4.0403 4.0635 4.0867 4.1099 4.1331 4.1564 4.1796 4.2028 4.226 4.2492 4.2725 4.2957 4.3189 4.3421 4.3653 4.3886 4.4118 4.435 4.4582 4.4814 4.5047 4.5279 4.5511 4.5743 4.5975 4.6208 4.644 4.6672 4.6904 4.7136 4.7369 4.7601 4.7833 4.8065 4.8297 4.853 4.8762 4.8994 4.9226 4.9458 4.9691 4.9923 5.0155 5.0387 5.0619 5.0852 5.1084 5.1316 5.1548 5.178 5.2013 5.2245 5.2477 5.2709 5.2941 5.3174 5.3406 5.3638 5.387 5.4102 5.4335 5.4567 5.4799 5.5031 5.5263 5.5496 5.5728 5.596 5.6192 5.6424 5.6657 5.6889 5.7121 5.7353 5.7585 5.7818 5.805 5.8282 5.8514 5.8746 5.8979 5.9211 5.9443 5.9675 5.9907 6.014 6.0372 6.0604 6.0836 6.1068 6.1301 6.1533 6.1765 6.1997 6.2229 6.2462 6.2694 6.2926 6.3158 6.339 6.3623 6.3855 6.4087 6.4319 6.4551 6.4784 6.5016 6.5248 6.548 6.5712 6.5945 6.6177 6.6409 6.6641 6.6873 6.7106 6.7338 6.757 6.7802 6.8034 6.8267 6.8499 6.8731 6.8963 6.9195 6.9428 6.966 6.9892 7.0124 7.0356 7.0589 7.0821 7.1053 7.1285 7.1517 7.175 7.1982 7.2214 7.2446 7.2678 7.2911 7.3143 7.3375 7.3607 7.3839 7.4072 7.4304 7.4536)) (quote (251.5665 757.8627 762.1787 775.4578 782.4358 786.4437 786.7167 787.5832 788.1099 788.3638 788.9753 788.3638 788.9031 788.9031 788.9031 788.8256 788.6993 788.6293 788.097 788.097 788.1715 788.3598 788.3598 788.3598 788.2587 788.1696 787.7766 787.3625 787.3625 786.6309 787.0146 787.0146 787.0146 786.4979 786.4979 786.2172 786.6632 788.0121 789.8343 789.8343 788.7642 786.2885 782.3884 782.3884 785.1615 785.8617 785.8887 786.711 786.711 785.9214 784.1846 784.1846 786.0469 786.2186 788.6398 788.6398 788.6398 788.0429 788.0429 788.0213 788.0213 788.0213 788.3184 790.7621 790.7621 791.0735 790.4322 790.1937 789.7585 789.222 788.1609 787.1956 786.3854 786.3632 786.2733 784.9578 784.9191 784.2426 784.2426 784.8763 786.0454 787.49 787.49 787.2217 786.0656 785.0513 784.4367 784.2429 784.4367 785.3864 786.9175 790.7421 792.8029 792.8029 788.336 785.8107 779.4238 779.4238 784.5487 788.7905 793.2037 793.2037 791.5853 789.5125 787.0109 787.0109 788.5522 791.0145 795.0374 795.0374 795.6981 850.252 870.0047 878.3785 882.5726 887.1406 894.106 894.106 451.5923 451.5923 496.758 983.1512 983.1512 978.0594 943.5058 895.6647 882.3829 873.3851 859.1111 830.4284 800.7218 797.6835 796.2462 797.6835 799.5156 823.6535 874.7379 881.9963 886.475 887.7067 887.7067 887.7067 888.5291 889.16 890.9423 890.9423 890.4289 888.7723 887.7473 887.7473 971.2605 978.28 982.5189 983.3219 982.9675 982.9675 982.6718 981.6764 980.6567 978.4308 295.8698 295.8698 881.7535 881.7535 882.4836 883.9487 884.8002 883.9487 883.7836 883.4644 882.8318 882.8318 882.7834 882.2179 882.2179 882.7739 882.7739 882.8969 882.8969 883.3056 883.3056 883.0909 882.9376 882.9193 876.7753 876.7753 873.0521 787.1987 787.1987 788.1653 790.3417 790.9651 791.2899 791.5909 791.5909 790.7245 790.7245 789.3506 788.345 734.1848 734.1848 736.8109 737.4701 737.5711 738.0541 738.6621 739.1483 739.1483 737.7524 732.1295 732.1295 731.4774 249.1324 249.1324 652.4681 654.1431 655.6425 656.0556 656.602 657.6756 657.6756 657.6556 657.6094 657.0809 656.9688 656.8893 656.9204 656.9204 656.9924 656.9924 656.9924 656.9786 656.8149 656.1134 656.1134 656.2991 656.2991 656.244 656.244 655.217 655.217 651.6333 650.2942 289.7077 289.7077 291.2704 586.1289 586.8055 586.8411 586.9676 586.9676 587.1115 587.1115 587.1729 587.2605 587.2605 586.8917 586.8917 586.9429 586.9429 586.9376 586.9376 587.2701 587.2701 587.3512 587.3512 587.4659 587.4659 587.2784 587.1545 587.1545 587.1545 586.8613 586.8613 587.1404 587.5724 587.5724 587.5307 587.5307 587.546 588.0308 588.0482 588.0577 588.0577 588.0577 588.2076 587.7798 587.9175 587.9175 588.1208 588.3257 588.7062 588.7062 588.7339 588.7905 588.8938 589.3492 589.9567 589.9567 590.099 590.1387 590.334 590.1387 589.4291 589.2274 588.1631 586.7056 586.7056 589.5543 589.5543 589.467 589.467 589.8106 589.8106 589.3009 295.0615 290.3318 290.3318 294.8228 294.8228 230.4218)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 97 70) (om-make-point 1233 512))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F0->BPF" (quote f0->bpf) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 297 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "f0.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 184 213) (om-make-point 70 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "f0" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 509 65) (om-make-point 48 30) 1024 "1024" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 394 50) (om-make-point 48 30) 2048 "2048" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 322 54) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 249 48) (om-make-point 41 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F0-ESTIMATE" (quote f0-estimate) (quote ((om-load-inputfun (quote input-funbox) "" "INFILE" nil) (om-load-inputkeyword (quote input-keyword) "" "fund-minfreq" (quote :fund-minfreq) 50.0 nil) (om-load-inputkeyword (quote input-keyword) "" "fund-maxfreq" (quote :fund-maxfreq) 1000.0 nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) 256 nil))) (om-make-point 110 121) (om-make-point 499 83.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 629 600) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 569 606) (om-make-point 24 30) (quote t) "t" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 407 597) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 301 606) (om-make-point 48 30) 4096 "4096" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERVP-TRANSPOSITION" (quote supervp-transposition) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" 0) (om-load-inputfunmenu1 (quote input-funmenu) "" "PRESERVE-ENVELOPPE" (quote t) (list (list "Preserve Enveloppe On" (quote t)) (list "Preserve Enveloppe Off" nil))) (om-load-inputfunmenu1 (quote input-funmenu) "" "ENVELOPPE-TYPE" (quote t) (list (list "True Enveloppe" (quote t)) (list "LPC Enveloppe" nil))) (om-load-inputfun (quote input-funbox) "" "FILTER-ORDER" 70))) (om-make-point 109 529) (om-make-point 150 83.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "trumpetgold.aiff-transposicao.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 350 735) (om-make-point 214 111) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "trumpetgold.aiff-transposicao" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "trumpetgold.aiff-transposicao.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1147 188) (om-make-point 126 30) "-transposicao.aiff" "\"-transposicao.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-NAME" (quote get-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 898 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1048 252) (om-make-point 184 47.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "" "END" nil) (om-load-inputfun (quote input-funbox) "" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "" "SHAPE-INVARIANT" (quote t) (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "" "OUTFILE" "out.aiff"))) (om-make-point 29 639) (om-make-point 719 83.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "trumpetgold.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 65 2) (om-make-point 154 65) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "snds")) :device :unspecific :host :unspecific :name "trumpetgold" :type "aiff") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "trumpetgold.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 212 244) (om-make-point 959 340) 0 nil 1 (quote :om-audio) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (4 0 2 1 nil 0) (7 2 4 0 nil 0) (7 1 6 1 ((om-make-point 601 303) (om-make-point 322 329) (om-make-point 283 355) (om-make-point 267 409)) 0) (2 0 6 2 nil 0) (0 0 6 3 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (14 0 9 0 nil 0) (25 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (11 0 14 3 nil 1) (11 0 14 4 nil 1) (10 0 14 5 nil 0) (6 0 19 0 nil 0) (24 0 20 0 nil 0) (25 0 22 0 nil 0) (22 0 23 0 nil 0) (21 0 23 1 nil 0) (25 0 24 0 nil 0) (19 0 24 1 nil 0) (18 0 24 4 nil 0) (18 0 24 5 nil 0) (17 0 24 6 nil 0) (16 0 24 9 nil 0) (15 0 24 10 nil 0) (23 0 24 11 ((om-make-point 1138 297.0) (om-make-point 1138 468.0) (om-make-point 888 609.0) (om-make-point 689 639)) 0))) nil 6.120001))
