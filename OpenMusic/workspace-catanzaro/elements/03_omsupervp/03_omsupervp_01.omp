; OM File Header - Saved 2017/05/31 0:44:05
; (6.120001 :patc (om-make-point 10 110) (om-make-point 0 23) (om-make-point 1280 708) "" 183 0 "2017/05/17 14:34:28" "2017/05/17 15:53:05")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../in-files/snds/6NV00001\"") (list (quote :sdif) "#P\"../out-files/6NV00001_freq_fund.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-SuperVP" "RepMus")))(setf *om-current-persistent* (om-load-patch1 "03_omsupervp_01" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 287 53) (quote "Quantificação") nil (om-make-point 867 771) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 148 47) (quote "Filtragem") nil (om-make-point 931 601) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 757 686) (om-make-point 442 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (6500) (6700) (7000) (7200) (7100) (7000) (6900) (7000) (7100) (7200) (7100) (7200) (7500) (7700) (7600) (7300) (7100) (7200) (7100) (7000) (6900) (7100) (7000) (6800) (6900) (7000) (6900) (6800) (6900) (7000) (7100) (7000) (6900) (7000) (7100) (7200) (7100) (7000) (6900) (7000) (6900) (7000) (7100) (7000) (6900) (7000) (6800) (6600) (6500) (6600) (6700) (6800) (6600) (6400) (6300) (6400) (6500) (6600) (6700) (6800) (6700) (6600) (6800) (6900) (7000) (6700) (6900) (7000) (7100) (6900) (7100) (7200) (7300) (7100) (6900) (7000) (6900) (6800) (6900) (7000) (6600) (6500) (6600) (6700) (6800) (6700) (6600) (6400) (6300) (6400) (6500) (6700) (6800) (6600) (6700) (6800) (7000) (6900) (6800) (6900) (7000) (6900) (6800) (6900) (7000) (6900) (6700) (6600) (6700) (6600) (6400) (6500) (6600) (6700) (6500) (6700) (6800) (6900) (6600) (6700) (6800) (6700) (6500) (6300) (6100) (6200) (6300) (6400) (6300) (6400) (6300) (6200) (6000) (6600) (6900) (7000) (6900) (6400) (6800) (6900) (7000) (6900) (6800) (6900) (6600) (6800) (6600) (6000) (-1272300))) :lonset (quote (0 47 70 93 116 163 186 325 441 558 697 790 859 883 906 952 975 999 1068 1138 1161 1184 1254 1324 1347 1417 1440 1510 1533 1579 1602 1626 1695 1718 1765 1788 1811 1881 1904 1927 1974 2090 2322 2345 2392 2415 2485 2578 2601 2624 2671 2694 2717 2763 2787 2810 2903 2926 2949 2972 2996 3042 3065 3135 3158 3181 3251 3321 3344 3367 3437 3506 3530 3553 3599 3622 3715 3785 3831 3878 3901 3971 3994 4064 4087 4110 4157 4180 4203 4250 4319 4342 4366 4389 4435 4505 4528 4551 4621 4644 4714 4737 4807 4853 4900 4946 4993 5016 5039 5085 5202 5225 5364 5387 5410 5480 5550 5573 5596 5666 5759 5782 5828 5852 5875 5898 5945 5968 5991 6061 6130 6200 6246 6316 6595 6641 6664 6780 6804 6850 6873 6896 6943 6966 6989 7059 7129 7198 7222 7500 8524)) :ldur (quote ((47) (23) (23) (23) (47) (23) (139) (116) (117) (139) (93) (69) (24) (23) (46) (23) (24) (69) (70) (23) (23) (70) (70) (23) (70) (23) (70) (23) (46) (23) (24) (69) (23) (47) (23) (23) (70) (23) (23) (47) (116) (232) (23) (47) (23) (70) (93) (23) (23) (47) (23) (23) (46) (24) (23) (93) (23) (23) (23) (24) (46) (23) (70) (23) (23) (70) (70) (23) (23) (70) (69) (24) (23) (46) (23) (93) (70) (46) (47) (23) (70) (23) (70) (23) (23) (47) (23) (23) (47) (69) (23) (24) (23) (46) (70) (23) (23) (70) (23) (70) (23) (70) (46) (47) (46) (47) (23) (23) (46) (117) (23) (139) (23) (23) (70) (70) (23) (23) (70) (93) (23) (46) (24) (23) (23) (47) (23) (23) (70) (69) (70) (46) (70) (279) (46) (23) (116) (24) (46) (23) (23) (47) (23) (23) (70) (70) (69) (24) (278) (1024))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 104 121) (om-make-point 1183 425) 0 1000 nil 407/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 60 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHSEQ->POLY" (quote chseq->poly) (quote ((om-load-inputfun (quote input-funbox) "" "CHSEQ" nil) (om-load-inputfun (quote input-funbox) "" "APPROX" 2))) (om-make-point 771 601) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 829 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "f->mc") nil (om-make-point 628 442) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1079 341) (om-make-point 52 30) 0.001 "0.001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0) (om-load-inputfun (quote input-funbox) "divisor" "DIVISOR" 1))) (om-make-point 978 390) (om-make-point 149 71.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 148 47) (quote "om-round") nil (om-make-point 1134 388) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 757 501) (om-make-point 442 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6414) (6414) (6542) (6718) (7034) (7176) (7176) (7106) (7028) (7028) (7028) (7044) (7044) (6996) (6946) (6896) (6896) (6908) (6944) (6950) (6952) (6960) (6982) (7040) (7060) (7060) (7050) (7050) (7054) (7086) (7150) (7228) (7244) (7244) (7140) (7072) (7072) (7170) (7494) (7650) (7650) (7566) (7300) (7114) (7114) (7140) (7198) (7208) (7208) (7148) (7036) (6904) (6904) (6946) (7056) (7086) (7086) (7002) (6836) (6798) (6798) (6888) (6950) (6960) (6960) (6898) (6804) (6804) (6876) (6982) (7066) (7086) (7086) (6956) (6864) (6864) (6980) (7110) (7208) (7208) (7190) (7056) (6960) (6928) (6928) (6976) (7002) (7010) (7010) (6978) (6908) (6860) (6860) (6874) (6898) (6910) (6910) (6858) (6858) (6938) (7036) (7056) (7056) (6958) (6858) (6858) (6870) (6952) (7022) (7022) (7000) (6778) (6612) (6512) (6512) (6618) (6720) (6804) (6804) (6572) (6354) (6312) (6298) (6298) (6334) (6388) (6488) (6594) (6712) (6808) (6808) (6718) (6568) (6568) (6642) (6756) (6942) (7008) (7008) (6952) (6728) (6710) (6710) (6878) (7012) (7108) (7108) (7074) (6928) (6900) (6900) (7070) (7208) (7318) (7318) (7138) (6948) (6864) (6864) (6920) (6996) (7042) (7042) (6948) (6876) (6834) (6834) (6936) (7012) (7012) (6994) (6596) (6496) (6496) (6496) (6584) (6716) (6766) (6766) (6676) (6552) (6422) (6358) (6300) (6300) (6302) (6380) (6516) (6730) (6756) (6756) (6620) (6580) (6580) (6670) (6796) (6954) (7010) (7010) (6932) (6766) (6766) (6814) (6920) (6994) (7014) (7014) (6948) (6854) (6814) (6814) (6882) (6934) (6954) (6954) (6898) (6730) (6642) (6642) (6660) (6718) (6730) (6730) (6656) (6564) (6448) (6388) (6366) (6364) (6364) (6396) (6482) (6610) (6732) (6732) (6650) (6534) (6534) (6548) (6654) (6832) (6938) (6938) (6860) (6624) (6568) (6568) (6614) (6678) (6768) (6768) (6694) (6482) (6262) (6120) (6120) (6204) (6272) (6352) (6364) (6364) (6328) (6328) (6338) (6366) (6406) (6406) (6326) (6290) (6230) (6234) (6230) (6006) (6006) (6038) (6038) (6002) (5962) (5958) (5958) (6006) (6026) (6026) (6026) (6558) (6558) (6914) (7034) (7034) (7034) (7030) (7030) (6896) (6356) (6356) (6836) (6878) (6980) (6980) (6908) (6816) (6852) (6852) (6852) (6566) (6566) (6586) (6848) (6788) (6788) (6576) (6016) (6022) (6022) (6022) (6004) (6004) (6022) (6026) (6026) (6026) (5994) (5988) (-1272300) (-1272300))) :lonset (quote (23 46 70 93 116 139 162 186 209 232 255 279 302 325 348 371 395 418 441 464 488 511 534 557 581 604 627 650 673 697 720 743 766 789 813 836 859 882 906 929 952 975 998 1022 1045 1068 1091 1115 1138 1161 1184 1207 1231 1254 1277 1300 1324 1347 1370 1393 1416 1440 1463 1486 1509 1533 1556 1579 1602 1625 1649 1672 1695 1718 1741 1765 1788 1811 1834 1858 1881 1904 1927 1950 1974 1997 2020 2043 2067 2090 2113 2136 2159 2183 2206 2229 2252 2276 2299 2322 2345 2368 2392 2415 2438 2461 2484 2508 2531 2554 2577 2601 2624 2647 2670 2694 2717 2740 2763 2786 2810 2833 2856 2879 2902 2926 2949 2972 2995 3019 3042 3065 3088 3111 3135 3158 3181 3204 3228 3251 3274 3297 3320 3344 3367 3390 3413 3437 3460 3483 3506 3529 3553 3576 3599 3622 3645 3669 3692 3715 3738 3762 3785 3808 3831 3854 3878 3901 3924 3947 3971 3994 4017 4040 4063 4087 4110 4133 4156 4180 4203 4226 4249 4273 4296 4319 4342 4365 4389 4412 4435 4458 4481 4505 4528 4551 4574 4597 4621 4644 4667 4690 4714 4737 4760 4783 4806 4830 4853 4876 4899 4923 4946 4969 4992 5016 5039 5062 5085 5108 5132 5155 5178 5201 5225 5248 5271 5294 5317 5341 5364 5387 5410 5433 5457 5480 5503 5526 5550 5573 5596 5619 5642 5666 5689 5712 5735 5759 5782 5805 5828 5851 5875 5898 5921 5944 5968 5991 6014 6037 6060 6084 6107 6130 6153 6176 6200 6223 6246 6269 6293 6316 6339 6362 6385 6409 6432 6455 6478 6502 6525 6548 6571 6594 6618 6641 6664 6687 6711 6734 6757 6780 6803 6827 6850 6873 6896 6919 6943 6966 6989 7012 7036 7059 7082 7105 7128 7152 7175 7198 7221 7245 7268 7291 7314 7337 7361 7384 7407 7430 7454 7477 7500 7523 7547 8547)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 103 154) (om-make-point 1183 425) 0 1000 nil 627/100 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 60 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 148 47) (quote "chord-seq") nil (om-make-point 577 611) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 52) (quote "y-points") nil (om-make-point 387 718) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 52) (quote "x-points") nil (om-make-point 222 719) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 336 38) (quote "Windowsize/fftsize/step") nil (om-make-point 569 209) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 471 210) (om-make-point 48 30) 1024 "1024" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 382 203) (om-make-point 48 30) 2048 "2048" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 53) (quote "FFT") nil (om-make-point 795 91) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 282 40) (quote "<= fund max freq") nil (om-make-point 391 158) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 330 178) (om-make-point 41 30) 700 "700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 282 40) (quote "<= fund min freq") nil (om-make-point 344 128) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 155) (om-make-point 41 30) 250 "250" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 269 52) (quote "\"_freq_fund.sdif\"") nil (om-make-point 485 3) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 370 24) (om-make-point 114 30) "_freq_fund.sdif" "\"_freq_fund.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 328 85) (om-make-point 97 47.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 185 53) (quote "string+") nil (om-make-point 436 74) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-NAME" (quote get-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 228 81) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 335 46) (quote "#<bpf 4010141D1B>") nil (om-make-point 233 532) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 97 593) (om-make-point 467 121) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0232 0.0464 0.0696 0.0929 0.1161 0.1393 0.1625 0.1857 0.209 0.2322 0.2554 0.2786 0.3018 0.3251 0.3483 0.3715 0.3947 0.4179 0.4412 0.4644 0.4876 0.5108 0.534 0.5573 0.5805 0.6037 0.6269 0.6501 0.6734 0.6966 0.7198 0.743 0.7662 0.7895 0.8127 0.8359 0.8591 0.8823 0.9056 0.9288 0.952 0.9752 0.9984 1.0217 1.0449 1.0681 1.0913 1.1145 1.1378 1.161 1.1842 1.2074 1.2306 1.2539 1.2771 1.3003 1.3235 1.3467 1.37 1.3932 1.4164 1.4396 1.4628 1.4861 1.5093 1.5325 1.5557 1.5789 1.6022 1.6254 1.6486 1.6718 1.695 1.7183 1.7415 1.7647 1.7879 1.8111 1.8344 1.8576 1.8808 1.904 1.9272 1.9505 1.9737 1.9969 2.0201 2.0433 2.0666 2.0898 2.113 2.1362 2.1594 2.1827 2.2059 2.2291 2.2523 2.2755 2.2988 2.322 2.3452 2.3684 2.3916 2.4149 2.4381 2.4613 2.4845 2.5077 2.531 2.5542 2.5774 2.6006 2.6238 2.6471 2.6703 2.6935 2.7167 2.7399 2.7632 2.7864 2.8096 2.8328 2.856 2.8793 2.9025 2.9257 2.9489 2.9721 2.9954 3.0186 3.0418 3.065 3.0882 3.1115 3.1347 3.1579 3.1811 3.2043 3.2276 3.2508 3.274 3.2972 3.3204 3.3437 3.3669 3.3901 3.4133 3.4365 3.4598 3.483 3.5062 3.5294 3.5526 3.5759 3.5991 3.6223 3.6455 3.6687 3.692 3.7152 3.7384 3.7616 3.7848 3.8081 3.8313 3.8545 3.8777 3.9009 3.9242 3.9474 3.9706 3.9938 4.017 4.0403 4.0635 4.0867 4.1099 4.1331 4.1564 4.1796 4.2028 4.226 4.2492 4.2725 4.2957 4.3189 4.3421 4.3653 4.3886 4.4118 4.435 4.4582 4.4814 4.5047 4.5279 4.5511 4.5743 4.5975 4.6208 4.644 4.6672 4.6904 4.7136 4.7369 4.7601 4.7833 4.8065 4.8297 4.853 4.8762 4.8994 4.9226 4.9458 4.9691 4.9923 5.0155 5.0387 5.0619 5.0852 5.1084 5.1316 5.1548 5.178 5.2013 5.2245 5.2477 5.2709 5.2941 5.3174 5.3406 5.3638 5.387 5.4102 5.4335 5.4567 5.4799 5.5031 5.5263 5.5496 5.5728 5.596 5.6192 5.6424 5.6657 5.6889 5.7121 5.7353 5.7585 5.7818 5.805 5.8282 5.8514 5.8746 5.8979 5.9211 5.9443 5.9675 5.9907 6.014 6.0372 6.0604 6.0836 6.1068 6.1301 6.1533 6.1765 6.1997 6.2229 6.2462 6.2694 6.2926 6.3158 6.339 6.3623 6.3855 6.4087 6.4319 6.4551 6.4784 6.5016 6.5248 6.548 6.5712 6.5945 6.6177 6.6409 6.6641 6.6873 6.7106 6.7338 6.757 6.7802 6.8034 6.8267 6.8499 6.8731 6.8963 6.9195 6.9428 6.966 6.9892 7.0124 7.0356 7.0589 7.0821 7.1053 7.1285 7.1517 7.175 7.1982 7.2214 7.2446 7.2678 7.2911 7.3143 7.3375 7.3607 7.3839 7.4072 7.4304 7.4536 7.4768 7.5 7.5233 7.5465)) (quote (332.1686 332.1686 357.7835 396.0492 475.3474 516.0706 516.0706 495.7621 474.0061 473.8982 473.8982 478.3638 478.3638 465.0846 451.9193 438.7989 438.7989 442.0957 451.1197 453.0293 453.2924 455.6039 461.1246 477.0075 482.3254 482.3254 479.7998 479.7998 480.6721 489.6472 508.5772 531.7501 536.7123 536.7123 505.3739 486.0434 486.0434 514.1797 620.3845 678.5101 678.5101 646.1439 554.5019 497.8285 497.8285 505.3527 522.5943 525.805 525.805 507.74 476.0487 440.8314 440.8314 451.8378 481.232 490.0574 490.0574 466.6169 424.0123 414.6379 414.6379 436.9825 452.8292 455.4112 455.4112 439.3484 416.1809 416.1809 434.0974 461.4615 484.0725 489.8346 489.8346 454.5201 430.915 430.915 460.7099 496.6925 525.9353 525.9353 520.0225 481.5376 455.2978 447.1277 447.1277 459.8568 466.4668 468.6351 468.6351 460.0728 441.8829 429.9964 429.9964 433.407 439.5855 442.4898 442.4898 429.5756 429.5756 449.9556 475.8991 481.7335 481.7335 455.116 429.3192 429.3192 432.677 453.6086 472.3189 472.3189 465.928 409.913 372.4792 351.7891 351.7891 373.6695 396.581 416.4413 416.4413 364.2302 320.9354 313.4704 310.71 310.71 317.2591 327.4875 346.8948 368.5691 394.5999 417.3769 417.3769 396.1459 363.1243 363.1243 379.1558 404.8827 450.6605 468.2329 468.2329 453.5152 398.3076 394.3249 394.3249 434.5308 469.2733 496.2207 496.2207 486.7138 447.3627 439.7643 439.7643 485.3326 525.6463 560.0655 560.0655 504.6663 452.2863 430.8911 430.8911 445.3124 464.9962 477.6093 477.6093 452.3295 434.0402 423.6277 423.6277 449.2131 469.5635 469.5635 464.3319 369.1778 348.4026 348.4026 348.4026 366.4283 395.725 407.1928 407.1928 386.3955 359.9113 334.0209 321.5468 311.1147 311.1147 311.5475 325.8948 352.4528 398.8178 404.9285 404.9285 374.318 365.9421 365.9421 385.0453 414.498 453.6883 469.0153 469.0153 448.2778 407.4456 407.4456 418.728 445.2554 464.3354 469.9943 469.9943 452.1285 428.2477 418.8737 418.8737 435.4397 448.7749 454.1971 454.1971 439.6835 398.7123 379.2664 379.2664 382.8365 396.2945 399.055 399.055 382.2865 362.5703 338.8707 327.328 323.117 322.9843 322.9843 328.8055 345.5982 372.3282 399.4412 399.4412 381.0448 355.9569 355.9569 358.9608 381.5766 422.8456 450.0177 450.0177 429.8992 375.1642 363.2018 363.2018 373.2105 387.2607 407.8167 407.8167 390.7194 345.7888 304.483 280.4023 280.4023 294.3863 306.0322 320.5963 322.7512 322.7512 316.1554 316.1554 317.863 323.2972 330.8871 330.8871 315.6695 309.3197 298.6419 299.3448 298.6419 262.5633 262.5633 267.4652 267.4652 262.0246 255.9166 255.4898 255.4898 262.471 265.7355 265.7355 265.7355 360.9471 360.9471 443.4091 475.2992 475.2992 475.2992 474.1798 474.1798 439.1499 321.4768 321.4768 423.8419 434.6231 460.788 460.788 442.063 419.2609 427.8691 427.8691 427.8691 362.8481 362.8481 366.9303 426.9716 412.5912 412.5912 364.8037 264.1008 265.0384 265.0384 265.0384 262.093 262.093 265.0223 265.6532 265.6532 265.6532 260.7767 259.6696 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 163) (om-make-point 1430 477))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 97 56) (quote "bpf") nil (om-make-point 7 528) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F0->BPF" (quote f0->bpf) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 172 474) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 131 52) (quote "f0->bpf") nil (om-make-point 10 427) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 323 45) (quote "#<sdiffile 4030013EEB>") nil (om-make-point 259 444) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 399 54) (quote "<= \"path\"  caminho, o endereço") nil (om-make-point 258 379) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 421 53) (quote "<= \"path\"  caminho, o endereço") nil (om-make-point 248 335) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "6NV00001_freq_fund.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 153 372) (om-make-point 86 64) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host :unspecific :name "6NV00001_freq_fund" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 53) (quote "sdiffile") nil (om-make-point 9 337) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "6NV00001" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 140 0) (om-make-point 145 67) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files" "snds")) :device :unspecific :host :unspecific :name "6NV00001" :type :unspecific) 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "6NV00001") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 130 178) (om-make-point 1065 317) 0 nil 1 (quote :om-audio) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 53) (quote "sound") nil (om-make-point 26 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F0-ESTIMATE" (quote f0-estimate) (quote ((om-load-inputfun (quote input-funbox) "" "INFILE" nil) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "f0.sdif" nil) (om-load-inputkeyword (quote input-keyword) "" "fund-minfreq" (quote :fund-minfreq) 50.0 nil) (om-load-inputkeyword (quote input-keyword) "" "fund-maxfreq" (quote :fund-maxfreq) 1000.0 nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step" (quote :step) 256 nil))) (om-make-point 142 246) (om-make-point 393 83.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 175 56) (quote "f0-estimate") nil (om-make-point 773 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (9 0 3 0 nil 0) (27 2 4 0 nil 0) (27 1 7 0 ((om-make-point 281 712) (om-make-point 574 820) (om-make-point 576 264) (om-make-point 870 305) (om-make-point 1015 390)) 2) (6 0 7 2 nil 0) (4 0 9 1 nil 0) (7 0 9 2 ((om-make-point 1050 459.0) (om-make-point 1039 482.0) (om-make-point 986 478.0) (om-make-point 904 501)) 0) (25 0 23 0 nil 0) (22 0 23 1 nil 0) (36 0 25 0 nil 0) (29 0 27 0 nil 0) (34 0 29 0 nil 0) (38 0 34 0 nil 0) (36 0 38 0 nil 0) (23 0 38 1 ((om-make-point 374 130.0) (om-make-point 230 151.0) (om-make-point 232 188.0) (om-make-point 240 246)) 0) (20 0 38 2 nil 0) (18 0 38 3 nil 0) (15 0 38 4 nil 0) (15 0 38 5 nil 0) (14 0 38 6 nil 0))) nil 6.120001))
