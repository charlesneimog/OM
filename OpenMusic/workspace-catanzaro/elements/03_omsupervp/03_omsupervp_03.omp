; OM File Header - Saved 2017/05/17 17:42:02
; (6.120001 :patc (om-make-point 10 210) (om-make-point 165 41) (om-make-point 976 724) "" 183 0 "2017/05/17 16:19:16" "2017/05/17 16:22:47")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "03_omsupervp_03" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 273 141) (quote "<= objeto para tratamento ou lista de tratamentos") nil (om-make-point 309 212) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 134 222) (om-make-point 159 142) nil "()" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 379 571) (om-make-point 154 89) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 810 182) (om-make-point 118 30) "-tratamento.aiff" "\"-tratamento.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-NAME" (quote get-name) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 652 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 728 244) (om-make-point 184 47.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUPERVP-PROCESSING" (quote supervp-processing) (quote ((om-load-inputfun (quote input-funbox) "" "SRCPATH" nil) (om-load-inputfun (quote input-funbox) "" "PROCESSINGS" "") (om-load-inputfun (quote input-funbox) "" "BEGIN" nil) (om-load-inputfun (quote input-funbox) "" "END" nil) (om-load-inputfun (quote input-funbox) "" "WINDOWSIZE" 4096) (om-load-inputfun (quote input-funbox) "" "FFTSIZE" 4096) (om-load-inputfunmenu1 (quote input-funmenu) "" "WINDOWSTEP-OVERSAMP" 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputfunmenu1 (quote input-funmenu) "" "WINDOW-TYPE" "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputfunmenu1 (quote input-funmenu) "" "SHAPE-INVARIANT" nil (list (list "Shape Invariant On" (quote t)) (list "Shape Invariant Off" nil))) (om-load-inputfun (quote input-funbox) "" "PRESERVE-TRANSIENT" (quote t)) (om-load-inputfunmenu1 (quote input-funmenu) "" "NORMALIZE" nil (list (list "Normalize On" (quote t)) (list "Normalize Off" nil))) (om-load-inputfun (quote input-funbox) "" "OUTFILE" "out.aiff"))) (om-make-point 59 398) (om-make-point 719 83.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 546 69) (quote "supervp-processing") nil (om-make-point 558 493) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 82 48) (om-make-point 154 89) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 533 87) (quote "Estrutura geral dos patches de tratamento") nil (om-make-point 205 14) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 2 0 nil 0) (8 0 4 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (8 0 6 0 nil 0) (1 0 6 1 nil 0) (5 0 6 11 nil 0))) nil 6.120001))
