; OM File Header - Saved 2018/06/07 9:42:50
; (6.130002 :patc (om-make-point 1036 10) (om-make-point 766 421) (om-make-point 674 402) "" 183 0 "2018/04/03 13:18:24" "2018/06/07 9:42:50")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "microtones" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 79 34) (quote "port") "" (om-make-point 332 106) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 149 169) (quote "Use only channels \"$1$2$5$6$9$12$13$for setting program changes") "" (om-make-point 433 34) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 82 37) (quote "for resetting $to 1/2") "" (om-make-point 110 24) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 64 26) (quote "for 1/4") "" (om-make-point 24 75) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 193 89) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 94 83) (om-make-point 32 28) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 126 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 242 232) (om-make-point 163 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 272 45) (om-make-point 123 30) (list 3 4 7 8 11 14 15) "(3 4 7 8 11 14 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 379 146) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC-TO-PITCHWHEEL" (quote mc-to-pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "" "MIDIC" nil))) (om-make-point 111 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 135 79) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 4 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (10 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 7 2 nil 0) (6 0 10 0 nil 0))) nil 6.130002))