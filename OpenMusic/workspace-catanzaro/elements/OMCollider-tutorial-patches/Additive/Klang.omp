; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 172 10) (om-make-point 877 168) (om-make-point 670 838) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Klang" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 433 727) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 1) (om-load-inputfun (quote input-funbox) "" "WARP" 0) (om-load-inputfun (quote input-funbox) "" "LAG" 0))) (om-make-point 455 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPLAY_AR" (quote omsc::splay_ar) (quote ((om-load-inputfun (quote input-funbox) "" "INARRAY" 0) (om-load-inputfun (quote input-funbox) "" "SPREAD" 1) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1) (om-load-inputfun (quote input-funbox) "" "CENTER" 0) (om-load-inputfun (quote input-funbox) "" "LEVELCOMP" "true"))) (om-make-point 288 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 87 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 73 95) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 184 94) (om-make-point 41 30) 440 "440" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 120 94) (om-make-point 48 30) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 24) (quote "Partials") "" (om-make-point 76 40) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ABC-SUM" (quote omsc::abc-sum) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 358 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 4" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 461 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 354 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 496 77) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 306 74) (om-make-point 55 30) (list 0.01) "(0.01)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 192 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KLANG" (quote omsc::klang) (quote ((om-load-inputfun (quote input-funbox) "" "ARRAYREF" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQSCALE" 1) (om-load-inputfun (quote input-funbox) "" "FREQOFFSET" (list 0)))) (om-make-point 279 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 256 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 310 638) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 0 0 nil 0) (14 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 3 2 nil 0) (13 0 8 0 nil 0) (10 0 8 1 nil 0) (9 0 8 2 nil 0) (11 0 9 0 nil 0) (12 0 10 0 nil 0) (3 0 13 0 nil 0) (8 0 14 0 nil 0) (2 0 15 0 nil 0) (15 0 16 0 nil 0))) nil 6.120003))
