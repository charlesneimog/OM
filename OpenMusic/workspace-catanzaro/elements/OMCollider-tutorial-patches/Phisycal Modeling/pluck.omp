; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 220 405) (om-make-point 469 168) (om-make-point 939 677) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "pluck" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 526 542) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 23) (quote "Autopan") "" (om-make-point 551 262) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE2_AR" (quote omsc::rotate2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "X" 0) (om-load-inputfun (quote input-funbox) "" "Y" 0) (om-load-inputfun (quote input-funbox) "" "POS" 1))) (om-make-point 372 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_KR" (quote omsc::sinosc_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 2) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 548 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLUCK 2" (quote omsc::pluck) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "TRIG" 1) (om-load-inputfun (quote input-funbox) "" "MAXDELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DECAYTIME" 1) (om-load-inputfun (quote input-funbox) "" "COEF" 0.5) (om-load-inputfun (quote input-funbox) "" "MUL" 2) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 690 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WHITENOISE_AR 2" (quote omsc::whitenoise_ar) (quote ((om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 543 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "UNARY 2" (quote omsc::unary) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "IN" (quote omsc::reciprocal) (list (list "neg" (quote (quote omsc::neg))) (list "reciprocal" (quote (quote omsc::reciprocal))) (list "abs" (quote (quote abs))) (list "floor" (quote (quote floor))) (list "ceil" (quote (quote omsc::ceil))) (list "frac" (quote (quote omsc::frac))) (list "sign" (quote (quote omsc::sign))) (list "squared" (quote (quote omsc::squared))) (list "cubed" (quote (quote omsc::cubed))) (list "sqrt" (quote (quote sqrt))) (list "exp" (quote (quote exp))) (list "midicps" (quote (quote omsc::midicps))) (list "cpsmidi" (quote (quote omsc::cpsmidi))) (list "midiratio" (quote (quote omsc::midiratio))) (list "ratiomidi" (quote (quote omsc::ratiomidi))) (list "dbamp" (quote (quote omsc::dbamp))) (list "ampdb" (quote (quote omsc::ampdb))) (list "octcps" (quote (quote omsc::octcps))) (list "cpsoct" (quote (quote omsc::cpsoct))) (list "log" (quote (quote log))) (list "log2" (quote (quote omsc::log2))) (list "log10" (quote (quote omsc::log10))) (list "sin" (quote (quote sin))) (list "cos" (quote (quote cos))) (list "tan" (quote (quote tan))) (list "asin" (quote (quote asin))) (list "acos" (quote (quote acos))) (list "atan" (quote (quote atan))) (list "sinh" (quote (quote sinh))) (list "cosh" (quote (quote cosh))) (list "tanh" (quote (quote tanh))) (list "distort" (quote (quote omsc::distort))) (list "softclip" (quote (quote omsc::softclip))) (list "isPositive" (quote (quote omsc::ispositive))) (list "isNegative" (quote (quote omsc::isnegative))) (list "isStrictlyPositive" (quote (quote omsc::isstrictlypositive))))) (om-load-inputfun (quote input-funbox) "" "MODE" (quote freq)))) (om-make-point 755 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 822 39) (om-make-point 41 30) 222 "222" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR 2" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 10) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 654 39) (om-make-point 50 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 10) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 144 44) (om-make-point 50 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 391 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 317 42) (om-make-point 41 30) 220 "220" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 385 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "UNARY" (quote omsc::unary) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "IN" (quote omsc::reciprocal) (list (list "neg" (quote (quote omsc::neg))) (list "reciprocal" (quote (quote omsc::reciprocal))) (list "abs" (quote (quote abs))) (list "floor" (quote (quote floor))) (list "ceil" (quote (quote omsc::ceil))) (list "frac" (quote (quote omsc::frac))) (list "sign" (quote (quote omsc::sign))) (list "squared" (quote (quote omsc::squared))) (list "cubed" (quote (quote omsc::cubed))) (list "sqrt" (quote (quote sqrt))) (list "exp" (quote (quote exp))) (list "midicps" (quote (quote omsc::midicps))) (list "cpsmidi" (quote (quote omsc::cpsmidi))) (list "midiratio" (quote (quote omsc::midiratio))) (list "ratiomidi" (quote (quote omsc::ratiomidi))) (list "dbamp" (quote (quote omsc::dbamp))) (list "ampdb" (quote (quote omsc::ampdb))) (list "octcps" (quote (quote omsc::octcps))) (list "cpsoct" (quote (quote omsc::cpsoct))) (list "log" (quote (quote log))) (list "log2" (quote (quote omsc::log2))) (list "log10" (quote (quote omsc::log10))) (list "sin" (quote (quote sin))) (list "cos" (quote (quote cos))) (list "tan" (quote (quote tan))) (list "asin" (quote (quote asin))) (list "acos" (quote (quote acos))) (list "atan" (quote (quote atan))) (list "sinh" (quote (quote sinh))) (list "cosh" (quote (quote cosh))) (list "tanh" (quote (quote tanh))) (list "distort" (quote (quote omsc::distort))) (list "softclip" (quote (quote omsc::softclip))) (list "isPositive" (quote (quote omsc::ispositive))) (list "isNegative" (quote (quote omsc::isnegative))) (list "isStrictlyPositive" (quote (quote omsc::isstrictlypositive))))) (om-load-inputfun (quote input-funbox) "" "MODE" (quote freq)))) (om-make-point 287 74) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WHITENOISE_AR" (quote omsc::whitenoise_ar) (quote ((om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 53 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLUCK" (quote omsc::pluck) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "TRIG" 1) (om-load-inputfun (quote input-funbox) "" "MAXDELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DECAYTIME" 1) (om-load-inputfun (quote input-funbox) "" "COEF" 0.5) (om-load-inputfun (quote input-funbox) "" "MUL" 2) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 195 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (15 0 2 0 nil 0) (4 0 2 1 nil 0) (3 0 2 2 nil 0) (5 0 4 0 nil 0) (8 0 4 1 nil 0) (6 0 4 2 nil 0) (6 0 4 3 nil 0) (7 0 6 1 nil 0) (2 0 10 0 nil 0) (10 0 12 0 nil 0) (11 0 13 1 nil 0) (14 0 15 0 nil 0) (9 0 15 1 nil 0) (13 0 15 2 nil 0) (13 0 15 3 nil 0))) nil 6.120003))
