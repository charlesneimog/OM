; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 226 10) (om-make-point 571 46) (om-make-point 1073 695) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Klank+sample" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 469 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sample" (om-load-patch-abs1 "Sample" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 88 41) (om-make-point 95 45) "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav" "\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 338 277) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BUFFER-READ" (quote omsc::buffer-read) (quote ((om-load-inputfun (quote input-funbox) "" "FILENAME" nil))) (om-make-point 213 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAYBUF" (quote omsc::playbuf) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" 1) (om-load-inputfun (quote input-funbox) "" "BUFNUM" "k") (om-load-inputfun (quote input-funbox) "" "RATE" 1) (om-load-inputfun (quote input-funbox) "" "TRIGGER" 1) (om-load-inputfun (quote input-funbox) "" "STARTPOS" 0) (om-load-inputfun (quote input-funbox) "" "LOOP" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 278 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 1 nil 0))) 6.120003 nil "" (om-make-point 545 359) (om-make-point 471 366)) (quote nil) (om-make-point 374 62) nil (list (list "PlayBuf.ar(" 1 "," (list "Buffer.read(s," "\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav\"" ");" #\Return #\Newline) "," 1 "," 1 "," 0 "," 1 "," 2 ")")) nil "Sample"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 116 115) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 4" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 151 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 267 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KLANK" (quote omsc::klank) (quote ((om-load-inputfun (quote input-funbox) "" "ARRAYREF" (list 0)) (om-load-inputfun (quote input-funbox) "" "INPUT" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQSCALE" 1) (om-load-inputfun (quote input-funbox) "" "FREQOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "DECAYSCALE" 1))) (om-make-point 385 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 665 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ABC-SUM" (quote omsc::abc-sum) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 760 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 367 518) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 290 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 754 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 863 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 433 40) (quote "frequencies:  amplitudes:   decay times:$$") "" (om-make-point 595 31) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 715 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0.1) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 758 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 851 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODAL_RATIOS" (quote omsc::modal_ratios) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "LISTA" (list 221 614 1145 1804 2577 3456 4419) (list (list "Chalandi_plates" (list (quote list) 62 107 360 460 863)) (list "tibetan_bowl" (list (quote list) 221 614 1145 1804 2577 3456 4419)) (list "tibetan_bowl2" (list (quote list) 314 836 1519 2360 3341 4462 5696)) (list "tibetan_bowl3" (list (quote list) 528 1460 2704 4122 5694)) (list "small_handbell" (list (quote list) 1312 1314.5 2353.3 2362.9 3306.5 3309.4 3923.8 3928.2 4966.6 4993.7 5994.4 6003.0 6598.9 6619.7 7971.7 7753.2 8413.1 8453.3 9292.4 9305.2 9602.3 9912.4)) (list "spinel_sphere" (list (quote list) 977.25 1003.16 1390.13 1414.93 1432.84 1465.34 1748.48 1834.2 1919.9 1933.64 1987.2 2096.48 2107.1 2202.08 2238.4 2280.1 2290.53 2400.88 2435.85 2507.8 2546.3 2608.55 2652.35 2691.7 2708.0)))))) (om-make-point 630 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 285 79) (quote "$Klank is a bank of fixed frequency resonators.") "" (om-make-point 612 456) nil (om-make-color 1.0 0.5019608 0.0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (2 0 3 0 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (7 0 5 0 nil 0) (1 0 5 1 nil 0) (16 0 6 0 nil 0) (6 0 7 0 nil 0) (10 0 7 1 nil 0) (11 0 7 2 nil 0) (9 0 8 0 nil 0) (4 0 9 0 nil 0) (14 0 10 0 nil 0) (15 0 11 0 nil 0) (16 0 13 0 nil 0) (13 0 14 1 nil 0) (13 0 15 1 nil 0))) nil 6.120003))
