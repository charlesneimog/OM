; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 138 620) (om-make-point 969 273) (om-make-point 434 542) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "grain-sine" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER 2" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 275 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 57 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Random" (om-load-patch-abs1 "Random" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 443 402) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HPF_AR" (quote omsc::hpf_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" 68) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 313 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 430 517) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 100 60) (quote "Frequency") "" (om-make-point 514 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Duration") "" (om-make-point 116 35) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFNOISE1_KR 2" (quote omsc::lfnoise1_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 4) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 528 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFNOISE1_KR" (quote omsc::lfnoise1_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 4) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 121 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 632 89) (om-make-point 209 48) (load-buffer-textfile (quote ("\".exprange(120,980)\"" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 665 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 203 63) (om-make-point 209 48) (load-buffer-textfile (quote ("\".exprange(0.0001,0.04)\"" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 256 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAINSIN" (quote omsc::grainsin) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" (list 1)) (om-load-inputfun (quote input-funbox) "" "TRIGGER" (list 0)) (om-load-inputfun (quote input-funbox) "" "DUR" (list 1)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "PAN" (list 0)) (om-load-inputfun (quote input-funbox) "" "ENVBUFNUM" (list -1)) (om-load-inputfun (quote input-funbox) "" "MAXGRAINS" (list 512)) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 325 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 100) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 93 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (5 0 8 0 nil 0) (7 1 8 1 nil 0) (6 0 10 0 nil 0) (9 1 10 1 nil 0) (12 0 11 1 nil 0) (10 0 11 2 nil 0) (8 0 11 3 nil 0))) 6.120003 nil "" (om-make-point 41 227) (om-make-point 920 602)) (quote nil) (om-make-point 63 45) nil (list (list "HPF.ar(" (list "GrainSin.ar(" (list 1) "," (list "Dust.kr(" 100 "," (list 1) "," (list 0) ")") "," (list "LFNoise1.kr(" 4 "," (list 1) "," (list 0) ")" ".exprange(0.0001,0.04)") "," (list "LFNoise1.kr(" 4 "," (list 1) "," (list 0) ")" ".exprange(120,980)") "," (list 0) "," (list -1) "," (list 512) "," 0.5 "," (list 0) ")") "," 1000 "," (list 1) "," (list 0) ")")) nil "Random"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR 2" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 274 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI 2" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 301 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY 2" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 268 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Mouse-controller" (om-load-patch-abs1 "Mouse-controller" (quote ((let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 478 347) (om-make-point 38 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HPF_AR" (quote omsc::hpf_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" 68) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 348 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 364 451) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 281 51) (om-make-point 45 30) 0.15 "0.15" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 514 58) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 411 58) (om-make-point 41 30) 440 "440" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 176 55) (om-make-point 52 30) 0.001 "0.001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAINSIN" (quote omsc::grainsin) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" (list 1)) (om-load-inputfun (quote input-funbox) "" "TRIGGER" (list 0)) (om-load-inputfun (quote input-funbox) "" "DUR" (list 1)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "PAN" (list 0)) (om-load-inputfun (quote input-funbox) "" "ENVBUFNUM" (list -1)) (om-load-inputfun (quote input-funbox) "" "MAXGRAINS" (list 512)) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 236 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.0) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 10) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 192 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-Y" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 1) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 100) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 460 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 100) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 88 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (10 0 7 1 nil 0) (8 0 7 2 nil 0) (9 0 7 3 nil 0) (6 0 8 0 nil 0) (3 0 8 1 nil 0) (5 0 9 0 nil 0) (4 0 9 1 nil 0))) 6.120003 nil "" (om-make-point -1488 278) (om-make-point 673 564)) (quote nil) (om-make-point 273 32) nil (list (list "HPF.ar(" (list "GrainSin.ar(" (list 1) "," (list "Dust.kr(" 100 "," (list 1) "," (list 0) ")") "," (list "MouseX.kr(" 0.001 "," 0.15 "," 2 "," 0.2 ")") "," (list "MouseY.kr(" 440 "," 1000 "," 2 "," 0.2 ")") "," (list 0) "," (list -1) "," (list 512) "," 0.5 "," (list 0) ")") "," 1000 "," (list 1) "," (list 0) ")")) nil "Mouse-controller"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 46 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 79 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 52 182) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (8 0 1 0 nil 0) (6 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (9 0 7 0 nil 0) (7 0 8 0 nil 0) (2 0 9 0 nil 0))) nil 6.120003))
