; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 140 170) (om-make-point 67 130) (om-make-point 1043 918) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "concat" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 471 787) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 394 813) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HPF_AR" (quote omsc::hpf_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" 1000) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 238 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "control" (om-load-patch-abs1 "control" (quote ((let ((box (om-load-boxcall (quote genfun) "MOUSE-Y 3" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 120) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 500) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 335 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 149 555) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 146 447) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-Y" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.1) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 1) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 175 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFNOISE0_KR" (quote omsc::lfnoise0_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 205 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_KR" (quote omsc::sinosc_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 50) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 256 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAW" (quote omsc::saw) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 195 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 0.5) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 26 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (7 0 2 0 nil 0) (6 0 2 1 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 5 3 nil 0) (5 0 6 0 nil 0))) 6.120003 nil "" (om-make-point 343 119) (om-make-point 431 673)) (quote nil) (om-make-point 112 165) nil (list (list (list "SinOsc.ar(" 0.5 "," 0 "," 1 "," 0 ")") "*" (list "Saw.ar(" (list "SinOsc.kr(" (list "LFNoise0.kr(" (list "MouseY.kr(" 0.1 "," 1 "," 2 "," 0.2 ")") "," (list 1) "," (list 0) ")") "," 0 "," 50 "," (list "MouseY.kr(" 120 "," 500 "," 2 "," 0.2 ")") ")") "," 1 "," 0 ")"))) nil "control"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FSINOSC_KR" (quote omsc::fsinosc_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 2) (om-load-inputfun (quote input-funbox) "" "PHASE" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 464 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 466 20) (om-make-point 528 30) "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav" "\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 347 715) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Room size (cathedral)") "" (om-make-point 50 348) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 126 392) (om-make-point 41 30) 243 "243" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GVERB" (quote omsc::gverb) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "ROOM" 10) (om-load-inputfun (quote input-funbox) "" "REVTIME" 3) (om-load-inputfun (quote input-funbox) "" "DAMP" 0.5) (om-load-inputfun (quote input-funbox) "" "INPUTBW" 0.5) (om-load-inputfun (quote input-funbox) "" "SPREAD" 15) (om-load-inputfun (quote input-funbox) "" "DRYLEVEL" 0.3) (om-load-inputfun (quote input-funbox) "" "EARLYREF" 0.7) (om-load-inputfun (quote input-funbox) "" "TAILLEVEL" 0.3) (om-load-inputfun (quote input-funbox) "" "MAXROOM" 300) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 170 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X 2" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.001) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 4) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 549 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 187 119) (quote "concatenative sound synthesis") "" (om-make-point 26 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONCAT" (quote omsc::concat) (quote ((om-load-inputfun (quote input-funbox) "" "CONTROL" 0) (om-load-inputfun (quote input-funbox) "" "SOURCE" 0) (om-load-inputfun (quote input-funbox) "" "STORESIZE" 4) (om-load-inputfun (quote input-funbox) "" "SEEKTIME" 4) (om-load-inputfun (quote input-funbox) "" "SEEKDUR" 4) (om-load-inputfun (quote input-funbox) "" "MATCHLENGTH" 0.05) (om-load-inputfun (quote input-funbox) "" "FREEZESTORE" 0) (om-load-inputfun (quote input-funbox) "" "ZCR" 1) (om-load-inputfun (quote input-funbox) "" "LMS" 1) (om-load-inputfun (quote input-funbox) "" "SC" 1) (om-load-inputfun (quote input-funbox) "" "ST" 0) (om-load-inputfun (quote input-funbox) "" "RANDSCORE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 349 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 251 627) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 345 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BUFFER-READ" (quote omsc::buffer-read) (quote ((om-load-inputfun (quote input-funbox) "" "FILENAME" nil))) (om-make-point 584 45) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAYBUF" (quote omsc::playbuf) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" (list 1)) (om-load-inputfun (quote input-funbox) "" "BUFNUM" (list "k")) (om-load-inputfun (quote input-funbox) "" "RATE" (list 1)) (om-load-inputfun (quote input-funbox) "" "TRIGGER" (list 1)) (om-load-inputfun (quote input-funbox) "" "STARTPOS" (list 0)) (om-load-inputfun (quote input-funbox) "" "LOOP" (list 1)) (om-load-inputfun (quote input-funbox) "" "DONEACTION" (list 2)))) (om-make-point 423 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-Y" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.1) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 2) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 286 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (9 0 2 0 nil 0) (13 0 6 0 nil 0) (14 0 9 0 nil 0) (8 0 9 1 nil 0) (3 0 12 0 nil 0) (16 0 12 1 nil 0) (10 0 12 5 nil 0) (2 0 13 0 nil 0) (12 0 14 0 nil 0) (4 0 14 1 nil 0) (5 0 15 0 nil 0) (15 0 16 1 nil 0) (17 0 16 2 nil 0))) nil 6.120003))
