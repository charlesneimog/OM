; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 118 110) (om-make-point 550 262) (om-make-point 719 683) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Multiple score" (quote ((let ((box (om-load-boxcall (quote abstraction) "Score-2" (om-load-patch-abs1 "Score-2" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 387 231) (om-make-point 133 30) (list 0.2 0.3 0.4 0.5 0.6 1 1.2) "(.2 .3 .4 .5 .6 1 1.2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 424 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-TO-PATTERN" (quote omsc::om-to-pattern) (quote ((om-load-inputfun (quote input-funbox) "" "SYNTHNAME" "test") (om-load-inputfun (quote input-funbox) "" "MIDINOTE" (list 60)) (om-load-inputfun (quote input-funbox) "" "DUR" (list 0.2)) (om-load-inputfun (quote input-funbox) "" "LENGTH" "inf"))) (om-make-point 121 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 132 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 242 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 298 185) (om-make-point 28 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 101 38) (om-make-point 353 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7302) (7440) (7568) (7688) (7800) (7904) (8004) (8098) (8186) (8270) (8352) (8428) (8502) (8572) (8640) (8706) (8768) (8830) (8888) (8946) (9000))) :lonset (quote (11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 319 472) (om-make-point 1571 540) 0 1000 nil 1 (quote :microplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "frequenze, durate") "" (om-make-point 487 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (1 0 2 2 nil 0) (2 0 4 0 nil 0) (7 1 5 0 nil 0) (6 0 5 1 nil 0))) 6.120003 nil "" (om-make-point 200 200) (om-make-point 723 652)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 623 48) nil (list (list "//pattern" #\Return "Pbind(" #\Return #\Newline "\\instrument" "," "\\texture" "," #\Return #\Newline "\\midinote," "Pseq(" (list "[" "(3651/50), (372/5), (1892/25), (1922/25), (78), (1976/25), (2001/25), (4049/50), (4093/50), (827/10), (2088/25), (2107/25), (4251/50), (2143/25), (432/5), (4353/50), (2192/25), (883/10), (2222/25), (4473/50), (90)" "]") "," "inf" ")" #\Return "," #\Return #\Newline "\\dur," "Pseq(" (list "[" "0.2, 0.3, 0.4, 0.5, 0.6, 1.2, 1" "]") "," "inf" ")" #\Return #\Space ").trace.play" #\Return #\Newline)) nil "Score-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 454 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 30 308) (om-make-point 70 30) "texture" "\"texture\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 335 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Score-1" (om-load-patch-abs1 "Score-1" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 445 225) (om-make-point 44 154) (list 0.1 0.05 0.2 0.06 0.25 0.15) "(0.1 0.05 0.2 0.06 0.25 0.15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 424 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-TO-PATTERN" (quote omsc::om-to-pattern) (quote ((om-load-inputfun (quote input-funbox) "" "SYNTHNAME" "test") (om-load-inputfun (quote input-funbox) "" "MIDINOTE" (list 60)) (om-load-inputfun (quote input-funbox) "" "DUR" (list 0.2)) (om-load-inputfun (quote input-funbox) "" "LENGTH" "inf"))) (om-make-point 121 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 132 417) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 242 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 298 185) (om-make-point 28 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 101 38) (om-make-point 353 119) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3000) (4200) (4902) (5400) (5786) (6102) (6368))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 258 333) (om-make-point 1016 528) 0 1000 nil 1 (quote :microplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "frequenze, durate") "" (om-make-point 487 65) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (1 0 2 2 nil 0) (2 0 4 0 nil 0) (7 1 5 0 nil 0) (6 0 5 1 nil 0))) 6.120003 nil "" (om-make-point 809 369) (om-make-point 657 555)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 559 46) nil (list (list "//pattern" #\Return "Pbind(" #\Return #\Newline "\\instrument" "," "\\texture" "," #\Return #\Newline "\\midinote," "Pseq(" (list "[" "(30), (42), (2451/50), (54), (2893/50), (3051/50), (1592/25)" "]") "," "inf" ")" #\Return "," #\Return #\Newline "\\dur," "Pseq(" (list "[" "0.1, 0.25, 0.05, 0.15, 0.2, 0.06" "]") "," "inf" ")" #\Return #\Space ").trace.play" #\Return #\Newline)) nil "Score-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" ";") (om-load-inputfun (quote input-funbox) "additional elements" "LST?" ";"))) (om-make-point 574 157) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 393 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 91 209) (om-make-point 70 50) (load-buffer-textfile (quote ("\"arg freq;\"" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 93 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 67 68) (om-make-point 48 30) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 174 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Synth" (om-load-patch-abs1 "Synth" (quote ((let ((box (om-load-boxcall (quote genfun) "MOOGFF_AR" (quote omsc::moogff_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 100)) (om-load-inputfun (quote input-funbox) "" "GAIN" (list 2)) (om-load-inputfun (quote input-funbox) "" "RESET" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 195 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFDNOISE1_KR" (quote omsc::lfdnoise1_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 1) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 206 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 348 161) (om-make-point 55 30) 12000 "12000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 299 166) (om-make-point 31 30) 200 "200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 492 405) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPRANGE" (quote omsc::exprange) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 200) (om-load-inputfun (quote input-funbox) "" "MIN" 200) (om-load-inputfun (quote input-funbox) "" "MAX" 12000))) (om-make-point 295 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 691 50) (om-make-point 17 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENVGEN" (quote omsc::envgen) (quote ((om-load-inputfun (quote input-funbox) "" "ENVELOPE" nil) (om-load-inputfun (quote input-funbox) "" "GATE" 0.1) (om-load-inputfun (quote input-funbox) "" "LEVELSCALE" 1) (om-load-inputfun (quote input-funbox) "" "LEVELBIAS" 0) (om-load-inputfun (quote input-funbox) "" "TIMESCALE" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 577 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 503 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENV-TRIANGLE" (quote omsc::env-triangle) (quote ((om-load-inputfun (quote input-funbox) "" "DUR" 2) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.1) (om-load-inputfun (quote input-funbox) "" "CURVE" "0.5"))) (om-make-point 671 88) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COSC_AR" (quote omsc::cosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "BUFNUM" 1) (om-load-inputfun (quote input-funbox) "" "FREQ" (quote freq)) (om-load-inputfun (quote input-funbox) "" "BEATS" 0.5) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 101 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 67 42) (om-make-point 422 30) "Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})" "\"Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (5 0 0 1 nil 0) (8 0 4 0 nil 0) (1 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (9 0 7 0 nil 0) (0 0 8 0 nil 0) (7 0 8 1 nil 0) (6 0 9 0 nil 0) (11 0 10 0 nil 0))) 6.120003 nil "" (om-make-point 243 159) (om-make-point 802 582)) (quote nil) (om-make-point 185 26) nil (list (list (list "MoogFF.ar(" (list "COsc.ar(" "Buffer.alloc(s, 512, 1, {arg buf; buf.sine1Msg(1.0/[1,2,3,4,5,6,7,8])})" "," (quote freq) "," 0.5 "," 0.5 "," 0 ")") "," (list (list "LFDNoise1.kr(" 1 "," (list 1) "," (list 0) ")") ".exprange(" 200 "," 12000 ")") "," (list 2) "," (list 0) "," (list 1) "," (list 0) ")") "*" (list "EnvGen.ar(" (list "Env.triangle(" 4 "," 0.1 "," "0.5" ")") "," 0.1 "," 1 "," 0 "," 1 "," 2 ")"))) nil "Synth"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHDEF" (quote omsc::synthdef) (quote ((om-load-inputfun (quote input-funbox) "" "SYNTHNAME" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 121 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 437 28) (om-make-point 70 30) "texture" "\"texture\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 215 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (3 0 1 0 nil 0) (6 0 3 0 nil 0) (13 0 4 0 nil 0) (4 0 5 0 nil 0) (0 0 5 2 nil 0) (12 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 8 0 nil 0) (8 0 10 0 nil 0) (11 0 10 1 nil 0) (2 0 12 0 nil 0) (14 0 12 1 nil 0) (7 1 14 0 nil 0) (10 0 14 1 nil 0))) nil 6.120003))
