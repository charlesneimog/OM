; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 24 24) (om-make-point 407 146) (om-make-point 1424 863) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "SinOsc" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER 3" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 1180 706) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 1105 697) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 611 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 536 543) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER 2" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 148 541) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPLAY_AR" (quote omsc::splay_ar) (quote ((om-load-inputfun (quote input-funbox) "" "INARRAY" 0) (om-load-inputfun (quote input-funbox) "" "SPREAD" 1) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1) (om-load-inputfun (quote input-funbox) "" "CENTER" 0) (om-load-inputfun (quote input-funbox) "" "LEVELCOMP" "true"))) (om-make-point 1185 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 1071 89) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 15" (quote list) (quote nil) (om-make-point 1035 29) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 14" (quote list) (quote nil) (om-make-point 965 29) (om-make-point 31 30) 400 "400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 20))) (om-make-point 1026 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 400) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 983 65) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 4" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 1138 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 16" (quote list) (quote nil) (om-make-point 1247 157) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 3" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 1189 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY 3" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 1190 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI 3" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 1201 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 527 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 9" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 524 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 567 38) (om-make-point 31 30) 442 "442" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 707 109) (om-make-point 45 30) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 473 39) (om-make-point 31 30) 440 "440" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 649 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY 2" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 631 330) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 634 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 242 35) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 174 37) (om-make-point 31 30) 440 "440" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI 2" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 164 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 73 532) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 161 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 30 149) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 56 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 170 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 184 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (23 0 2 0 nil 0) (26 0 4 0 nil 0) (13 0 5 0 nil 0) (10 0 9 0 nil 0) (6 0 9 1 nil 0) (8 0 10 0 nil 0) (7 0 10 1 nil 0) (9 0 11 0 nil 0) (11 0 13 0 nil 0) (12 0 13 2 nil 0) (5 0 14 0 nil 0) (14 0 15 0 nil 0) (17 0 16 0 nil 0) (20 0 17 0 nil 0) (18 0 17 1 nil 0) (16 0 21 0 nil 0) (19 0 21 2 nil 0) (21 0 22 0 nil 0) (22 0 23 0 nil 0) (28 0 26 0 nil 0) (31 0 28 0 nil 0) (29 0 30 0 nil 0) (30 0 31 0 nil 0) (32 0 31 1 nil 0) (25 0 32 0 nil 0) (24 0 32 2 nil 0))) nil 6.120003))
