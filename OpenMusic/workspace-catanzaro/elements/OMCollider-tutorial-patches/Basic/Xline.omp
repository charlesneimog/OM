; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 146 619) (om-make-point 782 271) (om-make-point 634 710) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Xline" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 373 577) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 311 577) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 572 113) (om-make-point 22 28) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 458 70) (om-make-point 38 52) 200 "200$$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 381 75) (om-make-point 26 40) 1 "1$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINE.KR" (quote omsc::line.kr) (quote ((om-load-inputfun (quote input-funbox) "" "START" 0) (om-load-inputfun (quote input-funbox) "" "END" 1) (om-load-inputfun (quote input-funbox) "" "DUR" 1) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 390 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 282 67) (om-make-point 22 28) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 191 46) (om-make-point 50 40) 12000 "12000$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 95 33) (om-make-point 58 43) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "XLINE.KR" (quote omsc::xline.kr) (quote ((om-load-inputfun (quote input-funbox) "" "START" 0) (om-load-inputfun (quote input-funbox) "" "END" 1) (om-load-inputfun (quote input-funbox) "" "DUR" 1) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 197 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 122 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BLIP" (quote omsc::blip) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "NUMHARM" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 109 244) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 212 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 128 417) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (2 0 5 2 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (11 0 10 0 nil 0) (9 0 11 0 nil 0) (5 0 11 1 nil 0) (13 0 12 0 nil 0) (10 0 13 0 nil 0))) nil 6.120003))
