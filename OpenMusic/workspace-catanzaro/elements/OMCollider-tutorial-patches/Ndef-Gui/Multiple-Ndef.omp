; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 10 110) (om-make-point 931 376) (om-make-point 463 596) "" 183 0 nil "2020/12/05 20:27:01")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Multiple-Ndef" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 225 459) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sine-4" (om-load-patch-abs1 "Sine-4" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 204 160) (om-make-point 59 30) "sine4" "\"sine4\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NDEF" (quote omsc::ndef) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 129 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 313 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 363 64) (om-make-point 44 30) "amp" "\"amp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 54 90) (om-make-point 144 30) "freq=100,amp=0.99" "\"freq=100,amp=0.99\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 287 63) (om-make-point 42 30) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 60) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 516 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 415 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (8 0 1 1 nil 0) (0 0 1 2 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (4 0 3 2 nil 0) (3 0 8 0 nil 0) (7 0 8 1 nil 0))) 6.120003 nil "" (om-make-point 0 376) (om-make-point 628 450)) (quote nil) (om-make-point 371 51) nil (list (list "(" #\Return "Ndef(" "\\sine4" ",{|" "freq=100,amp=0.99" "|" #\Return (list (list "SinOsc.ar(" "freq" "," 0 "," "amp" "," 0 ")") "*" (list "SinOsc.ar(" 60 "," 0 "," 1 "," 0 ")")) "}" #\Return ").gui;" ")" #\Return #\Newline)) nil "Sine-4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sine-3" (om-load-patch-abs1 "Sine-3" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 204 160) (om-make-point 59 30) "sine3" "\"sine3\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NDEF" (quote omsc::ndef) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 129 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 313 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 363 64) (om-make-point 54 30) "amp" "\"amp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 54 90) (om-make-point 144 30) "freq=100,amp=0.99" "\"freq=100,amp=0.99\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 287 63) (om-make-point 52 30) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 60) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 516 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 415 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (8 0 1 1 nil 0) (0 0 1 2 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (4 0 3 2 nil 0) (3 0 8 0 nil 0) (7 0 8 1 nil 0))) 6.120003 nil "" (om-make-point 123 331) (om-make-point 626 453)) (quote nil) (om-make-point 277 53) nil (list (list "(" #\Return "Ndef(" "\\sine3" ",{|" "freq=100,amp=0.99" "|" #\Return (list (list "SinOsc.ar(" "freq" "," 0 "," "amp" "," 0 ")") "*" (list "SinOsc.ar(" 60 "," 0 "," 1 "," 0 ")")) "}" #\Return ").gui;" ")" #\Return #\Newline)) nil "Sine-3"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 195 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 180 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sine-2" (om-load-patch-abs1 "Sine-2" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 204 160) (om-make-point 59 30) "sine2" "\"sine2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NDEF" (quote omsc::ndef) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 129 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 313 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 365 63) (om-make-point 54 30) "amp" "\"amp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 54 90) (om-make-point 144 30) "freq=100,amp=0.99" "\"freq=100,amp=0.99\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 287 63) (om-make-point 52 30) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 60) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 516 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 415 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (8 0 1 1 nil 0) (0 0 1 2 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (4 0 3 2 nil 0) (3 0 8 0 nil 0) (7 0 8 1 nil 0))) 6.120003 nil "" (om-make-point 203 330) (om-make-point 638 439)) (quote nil) (om-make-point 167 50) nil (list (list "(" #\Return "Ndef(" "\\sine2" ",{|" "freq=100,amp=0.99" "|" #\Return (list (list "SinOsc.ar(" "freq" "," 0 "," "amp" "," 0 ")") "*" (list "SinOsc.ar(" 60 "," 0 "," 1 "," 0 ")")) "}" #\Return ").gui;" ")" #\Return #\Newline)) nil "Sine-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sine-1" (om-load-patch-abs1 "Sine-1" (quote ((let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 204 160) (om-make-point 59 30) "sine1" "\"sine1\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NDEF" (quote omsc::ndef) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "NAME" nil))) (om-make-point 129 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 238 316) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 313 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 363 64) (om-make-point 44 30) "amp" "\"amp\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 54 90) (om-make-point 144 30) "freq=100,amp=0.99" "\"freq=100,amp=0.99\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 287 63) (om-make-point 42 30) "freq" "\"freq\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 60) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 516 160) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 415 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (8 0 1 1 nil 0) (0 0 1 2 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (4 0 3 2 nil 0) (3 0 8 0 nil 0) (7 0 8 1 nil 0))) 6.120003 nil "" (om-make-point 0 446) (om-make-point 630 434)) (quote nil) (om-make-point 65 53) nil (list (list "(" #\Return "Ndef(" "\\sine1" ",{|" "freq=100,amp=0.99" "|" #\Return (list (list "SinOsc.ar(" "freq" "," 0 "," "amp" "," 0 ")") "*" (list "SinOsc.ar(" 60 "," 0 "," 1 "," 0 ")")) "}" #\Return ").gui;" ")" #\Return #\Newline)) nil "Sine-1"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 177 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (6 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 3 2 nil 0) (1 0 3 3 nil 0) (3 0 4 0 nil 0) (4 0 7 0 nil 0))) nil 6.120003))
