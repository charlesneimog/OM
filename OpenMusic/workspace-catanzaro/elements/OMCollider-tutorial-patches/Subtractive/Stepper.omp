; OM File Header - Saved 2020/12/05 20:27:01
; (6.120003 :patc (om-make-point 159 536) (om-make-point 607 244) (om-make-point 1375 774) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Stepper" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 801 647) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFNOISE1_KR" (quote omsc::lfnoise1_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 1141 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALLPASSN" (quote omsc::allpassn) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "MAXDELAYTIME" 0.013) (om-load-inputfun (quote input-funbox) "" "DELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DECAYTIME" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 0.3) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 990 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 1291 184) (om-make-point 52 30) 0.013 "0.013" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1207 188) (om-make-point 73 30) 1.0E-6 "0.000001" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1146 60) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPRANGE" (quote omsc::exprange) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "MIN" nil) (om-load-inputfun (quote input-funbox) "" "MAX" nil))) (om-make-point 1211 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 2" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 743 382) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sequencer" (om-load-patch-abs1 "Sequencer" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 301 458) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 357 154) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 295 142) (om-make-point 34 30) 24 "24" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 240 144) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 341 324) (om-make-point 41 30) 440 "440" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STEPPER_KR" (quote omsc::stepper_kr) (quote ((om-load-inputfun (quote input-funbox) "" "TRIG" 0) (om-load-inputfun (quote input-funbox) "" "RESET" 0) (om-load-inputfun (quote input-funbox) "" "MIN" 0) (om-load-inputfun (quote input-funbox) "" "MAX" 7) (om-load-inputfun (quote input-funbox) "" "STEP" 1) (om-load-inputfun (quote input-funbox) "" "RESETVAL" -1))) (om-make-point 221 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 279 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IMPULSE_KR" (quote omsc::impulse_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 8) (om-load-inputfun (quote input-funbox) "" "PHASE" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 88 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (7 0 5 0 nil 0) (3 0 5 2 nil 0) (2 0 5 3 nil 0) (1 0 5 4 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0))) 6.120003 nil "" (om-make-point 1387 425) (om-make-point 658 578)) (quote nil) (om-make-point 855 80) nil (list (list (list "Stepper.kr(" (list "Impulse.kr(" 8 "," (list 0) "," (list 1) "," (list 0) ")") "," 0 "," 2 "," 24 "," 4 "," -1 ")") "*" 440)) nil "Sequencer"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOOGFF_AR" (quote omsc::moogff_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQ" (list 100)) (om-load-inputfun (quote input-funbox) "" "GAIN" (list 2)) (om-load-inputfun (quote input-funbox) "" "RESET" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 673 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAWDPW_AR" (quote omsc::sawdpw_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "PHASE" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 676 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Step Sequencer") "" (om-make-point 138 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 432 395) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 384 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 10" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 322 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 339 618) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STEPPER_KR" (quote omsc::stepper_kr) (quote ((om-load-inputfun (quote input-funbox) "" "TRIG" 0) (om-load-inputfun (quote input-funbox) "" "RESET" 0) (om-load-inputfun (quote input-funbox) "" "MIN" 0) (om-load-inputfun (quote input-funbox) "" "MAX" 7) (om-load-inputfun (quote input-funbox) "" "STEP" 1) (om-load-inputfun (quote input-funbox) "" "RESETVAL" -1))) (om-make-point 201 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 9" (quote list) (quote nil) (om-make-point 321 304) (om-make-point 34 30) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 259 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 8" (quote list) (quote nil) (om-make-point 337 134) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 275 122) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 220 124) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IMPULSE_KR" (quote omsc::impulse_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 8) (om-load-inputfun (quote input-funbox) "" "PHASE" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 68 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 738 565) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 670 679) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 709 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((23 0 0 0 nil 0) (5 0 1 0 nil 0) (9 0 2 0 nil 0) (6 0 2 2 nil 0) (1 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (9 0 7 0 nil 0) (2 0 7 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (15 0 10 0 nil 0) (18 0 13 0 nil 0) (12 0 13 1 nil 0) (18 0 14 0 nil 0) (13 0 14 1 nil 0) (14 0 15 0 nil 0) (22 0 16 0 nil 0) (21 0 16 2 nil 0) (20 0 16 3 nil 0) (19 0 16 4 nil 0) (16 0 18 0 nil 0) (17 0 18 1 nil 0) (25 0 23 0 nil 0) (7 0 25 0 nil 0))) nil 6.120003))
