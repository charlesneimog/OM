; OM File Header - Saved 2020/12/19 23:35:45
; (6.070104 :patc (om-make-point 340 51) (om-make-point 717 392) (om-make-point 615 413) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/Bassclarinet1.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-sound-samples" (quote ((om-load-boxcomment "comment" (om-make-point 57 27) (quote "BPF") "" (om-make-point 376 278) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 3))) (om-make-point 178 271) (om-make-point 195 81) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0 170.0 180.0 190.0 200.0 210.0 220.0 230.0 240.0 250.0 260.0 270.0 280.0 290.0 300.0 310.0 320.0 330.0 340.0 350.0 360.0 370.0 380.0 390.0 400.0 410.0 420.0 430.0 440.0 450.0 460.0 470.0 480.0 490.0 500.0 510.0 520.0 530.0 540.0 550.0 560.0 570.0 580.0 590.0 600.0 610.0 620.0 630.0 640.0 650.0 660.0 670.0 680.0 690.0 700.0 710.0 720.0 730.0 740.0 750.0 760.0 770.0 780.0 790.0 800.0 810.0 820.0 830.0 840.0 850.0 860.0 870.0 880.0 890.0 900.0 910.0 920.0 930.0 940.0 950.0 960.0 970.0 980.0 990.0 1000.0 1010.0 1020.0 1030.0 1040.0 1050.0 1060.0 1070.0 1080.0 1090.0 1100.0 1110.0 1120.0 1130.0 1140.0 1150.0 1160.0 1170.0 1180.0 1190.0 1200.0 1210.0 1220.0 1230.0 1240.0 1250.0 1260.0 1270.0 1280.0 1290.0 1300.0 1310.0 1320.0 1330.0 1340.0 1350.0 1360.0 1370.0 1380.0 1390.0 1400.0 1410.0 1420.0 1430.0 1440.0 1450.0 1460.0 1470.0 1480.0 1490.0)) (quote (0.0 0.067 -0.019 -0.025 -0.027 -0.033 -0.017 0.005 -0.111 0.057 0.008 0.005 0.03 0.018 -0.093 -0.017 0.083 -0.029 -0.072 -0.03 -0.082 -0.03 0.059 0.044 -0.081 -0.097 0.024 -0.082 0.131 -0.242 -0.052 -0.034 0.173 0.113 0.153 0.094 -0.153 0.097 -0.083 0.034 -0.072 0.05 -0.034 -0.03 -0.037 0.076 -0.085 -0.12 0.195 -0.055 0.108 -0.033 0.016 0.164 0.012 0.426 -0.362 -0.452 -0.079 0.403 0.033 0.012 0.102 0.117 -0.02 0.102 -0.077 0.18 -0.061 -0.025 0.012 -0.163 -0.005 0.02 0.244 -0.005 0.038 0.034 -0.04 -0.005 -0.004 -0.019 0.015 0.085 0.042 0.064 -0.104 0.042 -0.156 -0.115 -0.066 -0.097 -0.119 0.075 0.102 0.067 0.052 0.109 -0.008 0.022 -0.048 -0.06 0.04 0.063 0.079 0.011 0.007 -0.044 0.026 -0.026 -0.02 0.016 -0.048 0.008 0.075 0.042 -0.01 0.027 0.057 0.02 -0.005 0.016 0.04 -0.038 0.007 -0.012 -0.037 0.003 0.012 0.035 0.075 0.03 0.033 0.007 0.003 -0.01 -0.02 -0.083 -0.037 -0.025 -0.046 -0.005 -0.011 -0.007 -0.018 -0.036 0.015 0.0 -0.002 0.001)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 145 25) (quote "<-- Number of points") "" (om-make-point 313 164) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 272 171) (om-make-point 32 25) 150 "150" nil) (om-load-boxcall (quote genfun) "SOUND-POINTS" (quote sound-points) (quote ((om-load-inputfun (quote input-funbox) "sound file" "SELF" nil) (om-load-inputfun (quote input-funbox) "num of points" "NUM" 1000))) (om-make-point 230 201) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 57 27) (quote "SOUND") "" (om-make-point 143 93) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 141 42) (quote "Downsample the waveform") "" (om-make-point 299 9) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 131 34) (quote "Sound Samples") "" (om-make-point 160 12) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "Bassclarinet1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 216 90) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems player)) (list nil 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) (quote :midishare))) t nil nil nil))) (quote ((4 0 1 2 nil 0) (8 0 4 0 nil 0) (3 0 4 1 nil 0))) nil 6.070104))
