; OM File Header - Saved 2020/12/19 23:35:45
; (6.070104 :patc (om-make-point 146 117) (om-make-point 79 465) (om-make-point 972 629) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/africa.aiff\"" "#P\"../../in-files/Bassclarinet2.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "06-sound-sequences" (quote ((om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 666 410) (om-make-point 238 103) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale player)) (list 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 1375 336) (om-make-point 88 191) 0 1 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 777 235) (om-make-point 78 25) "newsnd2.aiff" "\"newsnd2.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 770 264) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil))) (om-make-point 715 334) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 26) (quote "Repeat n times") "" (om-make-point 747 166) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 710 155) (om-make-point 27 30) 3 "3" nil) (om-load-boxcall (quote genfun) "SOUND-LOOP" (quote sound-loop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S" nil) (om-load-inputfun (quote input-funbox) "no documentation" "N" nil))) (om-make-point 668 186) nil nil nil nil 1) (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 654 84) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale player)) (list 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 1196 437) (om-make-point 481 200) 0 1 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 109 30) (quote "Sound loop") "" (om-make-point 688 26) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "Bassclarinet2.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 284 244) (om-make-point 88 63) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet2" :type "aif") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet2.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale player)) (list 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 40 10) 0 1 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote genfun) "SOUND-SEQ1" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S2" nil))) (om-make-point 221 366) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 100 26) (quote "1s silence") "" (om-make-point 252 155) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 213 161) (om-make-point 32 28) 1000 "1000" nil) (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DUR" 1000))) (om-make-point 181 191) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S2" nil))) (om-make-point 145 256) nil nil nil nil 1) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 281 510) (om-make-point 134 65) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale player)) (list 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 55 22) 0 1 (quote t) nil (quote :midishare))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 406 344) (om-make-point 95 30) "newsnd.aiff" "\"newsnd.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 399 373) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil))) (om-make-point 344 443) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 57 27) (quote "SOUND") "" (om-make-point 29 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 174 31) (quote "Sound sequences") "" (om-make-point 175 19) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "africa.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 93 82) (om-make-point 102 70) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa" :type "aiff") 1))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "africa.aiff") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale player)) (list 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 794 285) (om-make-point 254 377) 0 1 (quote t) nil (quote :midishare))) t nil nil nil))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (14 0 10 0 nil 0) (9 0 10 1 nil 0) (12 0 13 0 nil 0) (21 0 14 0 nil 0) (13 0 14 1 nil 0) (18 0 15 0 nil 0) (16 0 17 0 nil 0) (10 0 18 0 nil 0) (17 0 18 1 nil 0))) nil 6.070104))
