; OM File Header - Saved 2020/12/19 23:35:45
; (6.070104 :patc (om-make-point 338 116) (om-make-point 163 88) (om-make-point 496 761) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../in-files/Bassclarinet1.aif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "08-sound-processing" (quote ((om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 71 645) (om-make-point 251 80) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :libaudiostream) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote float)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 359 104) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 185 462) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S2" nil))) (om-make-point 242 404) nil nil "l" nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 225 333) (om-make-point 34 30) 10 "10" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 191 363) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "random-cut" (om-load-patch-abs1 "random-cut" (quote ((om-load-boxin "list" 1 (om-make-point 200 0) "" "list" nil nil) (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BEG" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "END" 1.0))) (om-make-point 90 383) nil nil nil nil 1) (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 157 302) nil nil nil nil 2))) (setf (numouts box) 2) box) (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 161 233) nil nil "&" nil 1) (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 169 158) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 190 109) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 212 62) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 163 62) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 181 433) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "pair" nil) (om-load-boxin "sound" 0 (om-make-point 51 295) "" "sound" nil nil))) (quote ((9 0 1 0 nil 0) (2 0 1 1 nil 0) (2 1 1 2 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (0 0 6 0 nil 0) (0 0 7 0 nil 0) (1 0 8 0 nil 0))) 6.070104 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 202 186) nil (list nil) nil "random-cut") (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0.1) (om-load-inputfun (quote input-funbox) "end " "END" 5) (om-load-inputfun (quote input-funbox) "step" "STEP" 0.5))) (om-make-point 361 36) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 223 28) (quote "Sound Processing patches") "" (om-make-point 157 2) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 307 444) (om-make-point 93 30) "mixall2.aiff" "\"mixall2.aiff\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 305 482) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILENAME" nil))) (om-make-point 182 550) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "S1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "S2" nil))) (om-make-point 139 290) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 128 197) (om-make-point 38 30) 0.2 "0.2" nil) (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "DUR" 1))) (om-make-point 102 231) nil nil nil nil 1) (om-load-editor-box1 "Bassclarinet1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "no documentation" "MARKERS" nil))) (om-make-point 184 94) (om-make-point 128 67) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "Bassclarinet1" :type "aif") 1))) (when thesound (setf (markers thesound) (quote (0.1 0.6 1.1 1.6 2.1 2.6 3.1 3.6 4.1 4.6)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 (om-make-point 370 280) (om-make-point 55 22) 0 1 (quote t) nil)) t nil nil nil))) (quote ((11 0 0 0 nil 0) (7 0 1 1 nil 0) (3 0 2 0 nil 0) (5 0 2 1 nil 0) (12 0 5 0 nil 0) (4 0 5 1 nil 0) (15 0 6 0 nil 0) (15 2 6 1 nil 0) (9 0 10 0 nil 0) (2 0 11 0 nil 0) (10 0 11 1 nil 0) (14 0 12 0 nil 0) (6 0 12 1 nil 0) (13 0 14 0 nil 0) (1 0 15 2 nil 0))) nil 6.070104))
