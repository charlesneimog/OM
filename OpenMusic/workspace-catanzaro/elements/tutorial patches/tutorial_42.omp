; OM File Header - Saved 2017/05/31 0:40:15
; (6.120001 :patc (om-make-point 460 292) (om-make-point 458 23) (om-make-point 642 490) "No documentation " 183 0 nil "2017/05/04 14:16:57")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_42" (quote ((let ((box (om-load-boxcomment "comment1112" (om-make-point 344 32) (quote "TUTORIAL 42 - Creating Generic Functions (I)") "" (om-make-point 154 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 285 225) (om-make-point 64 27) (list 5 6 7 8 9) "(5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 360 225) (om-make-point 64 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 176 227) (om-make-point 69 28) (list 5 6 7 8 9) "(5 6 7 8 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 254 226) (om-make-point 24 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MYPLUS" (quote myplus) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INPUT" 0) (om-load-inputfun (quote input-funbox) "no documentation" "INPUT1" 0))) (om-make-point 343 269) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 343 269)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MYPLUS" (quote myplus) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INPUT" 0) (om-load-inputfun (quote input-funbox) "no documentation" "INPUT1" 0))) (om-make-point 212 267) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 212 267)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MYPLUS" (quote myplus) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INPUT" 0) (om-load-inputfun (quote input-funbox) "no documentation" "INPUT1" 0))) (om-make-point 208 125) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 208 125)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 191 84) (om-make-point 26 26) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 233 86) (om-make-point 19 27) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 353 85) (om-make-point 65 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 321 86) (om-make-point 23 26) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "MYPLUS" (quote myplus) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "INPUT" 0) (om-load-inputfun (quote input-funbox) "no documentation" "INPUT1" 0))) (om-make-point 338 127) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 338 127)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 5 0 nil 0) (2 0 5 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (11 0 12 0 nil 0) (10 0 12 1 nil 0))) nil 6.120001))
