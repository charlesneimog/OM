; OM File Header - Saved 2018/06/07 9:42:50
; (6.130002 :patc (om-make-point 104 128) (om-make-point 286 23) (om-make-point 828 712) "No documentation " 183 0 nil "2018/06/06 23:47:04")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_11" (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 300)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 482 391) (om-make-point 308 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7404 7586 3600 6386 7752) (8288 6000 8168 6000 6702 7752) (7404 3600 7586 7404 8168 7200 6968 6968 8040) (4800 7200 7586 3600 8168 7586 8288 7404 7404 7752) (6702 6000 7902 6702) (7904 8086 4100 6886 8252) (8788 6500 8668 6500 7202 8252) (7904 4100 8086 7904 8668 7700 7468 7468 8540) (5300 7700 8086 4100 8668 8086 8788 7904 7904 8252) (7202 6500 8402 7202) (7404 7586 3600 6386 7752) (8288 6000 8168 6000 6702 7752) (7404 3600 7586 7404 8168 7200 6968 6968 8040) (4800 7200 7586 3600 8168 7586 8288 7404 7404 7752) (6702 6000 7902 6702) (8104 8286 4300 7086 8452) (8988 6700 8868 6700 7402 8452) (8104 4300 8286 8104 8868 7900 7668 7668 8740) (5500 7900 8286 4300 8868 8286 8988 8104 8104 8452) (7402 6700 8602 7402) (7404 7586 3600 6386 7752) (8288 6000 8168 6000 6702 7752) (7404 3600 7586 7404 8168 7200 6968 6968 8040) (4800 7200 7586 3600 8168 7586 8288 7404 7404 7752) (6702 6000 7902 6702))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200 7500)) :ldur (quote ((300 300 300 300 300) (300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300) (300 300 300 300 300) (300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300) (300 300 300 300 300) (300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300) (300 300 300 300 300) (300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300) (300 300 300 300 300) (300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300) (300 300 300 300 300 300 300 300 300 300) (300 300 300 300))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.130002 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport scale player)) (list 0 (quote :normal) (quote t) 0 0 (om-make-point 10 40) (om-make-point 1007 261) 0 1000 nil 151/100 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 nil (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 93 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1112" (om-make-point 373 39) (quote "TUTORIAL 11 -  Random notes from a harmonic spectrum") "" (om-make-point 362 53) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 581 176) (om-make-point 19 25) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 538 141) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 401 138) (om-make-point 133 30) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 466 214) (om-make-point 142 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111111111" (om-make-point 18 22) (quote "J") "" (om-make-point 225 637) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11111111" (om-make-point 18 22) (quote "I") "" (om-make-point 336 447) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1111111" (om-make-point 18 22) (quote "H") "" (om-make-point 213 459) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111111" (om-make-point 18 22) (quote "G") "" (om-make-point 106 511) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11111" (om-make-point 18 22) (quote "F") "" (om-make-point 154 380) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1111" (om-make-point 18 22) (quote "E") "" (om-make-point 139 311) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment111" (om-make-point 18 22) (quote "D") "" (om-make-point 253 224) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment11" (om-make-point 18 22) (quote "C") "" (om-make-point 131 237) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment1" (om-make-point 18 22) (quote "B") "" (om-make-point 424 224) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 18 22) (quote "A") "" (om-make-point 132 114) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 376 555) (om-make-point 40 25) (list 0 250) "(0 250)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 511 556) (om-make-point 31 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 500))) (om-make-point 357 440) (om-make-point 59 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 387 410) (om-make-point 41 26) 700 "700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 263 420) (om-make-point 31 30) 500 "500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 133 496) (om-make-point 371 53) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 300)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 188 592) (om-make-point 308 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 8168 4800 7404) (7404 7902 7586 5502) (7586 7902 7586) (6000 7586 3600 8288 8040 8400 4800 8400) (8400 7586 3600 5502 7200 6386 7902 7200 3600) (6002 6886 8252) (7904 7202 6500 5300 6886) (8086 7904 7468 8540 8668 6500 6886 7904 4100 6002) (8252 8086 7904 8900 8540 8540 8900 8788 6500 8086) (5300 4100 7468 6002 7904 8668 6500 4100) (8168 7586 7586 7586 8168 7902 6000 8400 8168 3600) (7902 6386 8168 8168 6000 8288 7586 8040) (6968 8168 7200 3600 5502 7200 7586 8168 8400 7200) (7586 6000 3600 5502 7902 7200) (8288 4800 7404 8168 7586 6386 8168 7404) (5500 8104 6700 8602 8286) (8740 7086 9100 8452 7900 8740 5500) (8602 7402 6202 8988 7402 7668 4300 6202 8452) (8602 8868 6700 8868 8286 8104 7086 8868 8104 8452) (4300 8104 4300 7900 6202 4300 8740) (4800 5502 7200 8288 3600 7752 6000 6386 7200) (7404 7752 6386 8400 3600 7586 6968) (7200 6386 6000 6386 5502) (6968 8168 7404 5502 6000) (8400 7752 7902))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000 3250 3500 3750 4000 4250 4500 4750 5000 5250 5500 5750 6000 6250)) :ldur (quote ((250 250 250 250) (250 250 250 250) (250 250 250) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250) (250 250 250) (250 250 250 250 250) (250 250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250) (250 250 250 250 250 250 250 250) (250 250 250 250 250) (250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250) (250 250 250 250 250 250 250 250 250) (250 250 250 250 250 250 250) (250 250 250 250 250) (250 250 250 250 250) (250 250 250))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.130002 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (score-mode cursor-mode show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport scale player)) (list 0 (quote :normal) (quote t) 0 0 (om-make-point 10 40) (om-make-point 756 285) 0 1000 nil 151/100 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 nil (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 500))) (om-make-point 233 455) (om-make-point 59 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 300 182) (om-make-point 26 25) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 182) (om-make-point 26 27) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 0))) (om-make-point 272 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 212 336) (om-make-point 27 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 175 368) nil (list (list (list 7404 7586 3600 6386 7752) (list 8288 6000 8168 6000 6702 7752) (list 7404 3600 7586 7404 8168 7200 6968 6968 8040) (list 4800 7200 7586 3600 8168 7586 8288 7404 7404 7752) (list 6702 6000 7902 6702))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 154 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 142 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)))) (om-make-point 159 51) (om-make-point 88 162) (let ((thechord (make-instance (quote chord) :lmidic (quote (3600 4800 5502 6000 6386 6702 6968 7200 7404 7586 7752 7902 8040 8168 8288 8400)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize mode grillestep notechancolor? zoom inport outport cmnpref staff fontsize approx deltapict scale player)) (list (quote t) 0 0 2621450 18350450 0 1000 nil 1 0 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 8 (om-make-point 0 -15) nil (quote :midishare))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 0 1 nil 0) (22 0 1 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (3 0 6 2 nil 0) (29 0 19 0 nil 0) (20 0 19 1 nil 0) (29 0 22 0 nil 0) (24 0 22 1 nil 0) (29 0 22 2 nil 2) (19 0 22 3 nil 0) (29 0 22 4 nil 3) (22 0 23 1 nil 0) (17 0 23 2 nil 0) (18 0 23 7 nil 0) (29 0 24 0 nil 0) (21 0 24 1 nil 0) (26 0 27 0 nil 0) (25 0 27 1 nil 0) (30 0 29 0 nil 0) (28 0 29 1 nil 0) (31 0 30 0 nil 0) (27 0 30 1 nil 0) (32 1 31 0 nil 0))) nil 6.130002))
