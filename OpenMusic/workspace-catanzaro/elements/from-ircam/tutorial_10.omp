; OM File Header - Saved 2011/11/09 17:30:47
; (6.010003 :patc (om-make-point 43 128) (om-make-point 439 346) (om-make-point 760 837) "No documentation " 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "tutorial_10" (quote ((om-load-boxcomment "comment1112" (om-make-point 158 48) (quote "TUTORIAL 10 - MIDI Microtone Setup") "" (om-make-point 546 78) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment111111" (om-make-point 22 20) (quote "D") "" (om-make-point 261 139) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 481 706) (om-make-point 31 24) 0 "0" nil) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 362 744) (om-make-point 163 53) nil nil "pitchwheel" 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 418 706) (om-make-point 56 33) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 418 588) (om-make-point 52 29) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 362 626) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 481 588) (om-make-point 30 26) 0 "0" nil) (om-load-boxcall (quote bastype) "aux11" (quote t) (quote nil) (om-make-point 471 479) (om-make-point 21 24) 0 "0" nil) (om-load-boxcall (quote bastype) "aux10" (quote t) (quote nil) (om-make-point 496 216) (om-make-point 23 20) 0 "0" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 226 139) (om-make-point 20 24) 0 "0" nil) (om-load-boxcomment "comment111111" (om-make-point 22 20) (quote "E") "" (om-make-point 42 233) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1111" (om-make-point 22 20) (quote "G") "" (om-make-point 440 226) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment111" (om-make-point 22 20) (quote "F") "" (om-make-point 77 349) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment11" (om-make-point 22 20) (quote "C") "" (om-make-point 169 142) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment1" (om-make-point 22 20) (quote "B") "" (om-make-point 315 66) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 22 20) (quote "A") "" (om-make-point 119 69) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 434 158) (om-make-point 21 20) 12 "12" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 406 158) (om-make-point 14 20) 1 "1" nil) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 402 182) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 2) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 386 248) (om-make-point 160 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 180 276) (om-make-point 57 25) (list 0 250) "(0 250)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 68 229) (om-make-point 214 42) (list 6000 7100 5300 6300 4500 8000 7300 6800 6700 6200 6600 4000) "(6000 7100 5300 6300 4500 8000 7300 6800 6700 6200 6600 4000)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 344 277) (om-make-point 33 24) 100 "100" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 111 298) (om-make-point 276 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (7100) (5300) (6300) (4500) (8000) (7300) (6800) (6700) (6200) (6600) (4000))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250 2500 2750 3000)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (2) (3) (4) (5) (6) (7) (8) (9) (11) (12) (13))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom approx fontsize staff cmnpref deltapict outport inport palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 0 0 (quote t) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 241 92) (om-make-point 159 27) (list 1 2 3 4 5 6 7 8 9 11 12 13) "(1 2 3 4 5 6 7 8 9 11 12 13)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 16 92) (om-make-point 208 29) (list 1 30 72 76 54 89 45 12 36 65 55 47) "(1 30 72 76 54 89 45 12 36 65 55 47)" nil) (om-load-boxcall (quote genfun) "PGMOUT" (quote pgmout) (quote ((om-load-inputfun (quote input-funbox) "program number" "PROG" 2) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" nil))) (om-make-point 114 166) (om-make-point 160 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 107 18) (quote "pitchbend setup  reset") "" (om-make-point 381 680) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 353 706) (om-make-point 62 25) (list 0 0 0 0) "(0 0 0 0)" nil) (om-load-boxcomment "comment" (om-make-point 132 19) (quote " if  pitchbend setup  range = 1") "" (om-make-point 365 569) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 133 29) (quote " if  pitchbend setup  range = 2$(Default value)") "" (om-make-point 356 450) nil (om-make-color 0 0 0) (om-make-font "Helvetica" 9 :family "Helvetica" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 301 588) (om-make-point 108 30) (list 0 2048 4095 6142) "(0 2048 4095 6142)" nil) (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 79 536) (om-make-point 28 20) 6000 "6000" nil) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 106 564) (om-make-point 26 35) nil nil nil 1) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 113 472) (om-make-point 15 20) 0 "0" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 132 472) (om-make-point 24 20) 200 "200" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 158 472) (om-make-point 26 20) 25 "25" nil) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 115 501) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 408 479) (om-make-point 54 28) (list 1 2 3 4) "(1 2 3 4)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 294 480) (om-make-point 110 26) (list 0 1024 2048 3072) "(0 1024 2048 3072)" nil) (om-load-boxcall (quote genfun) "PITCHWHEEL" (quote pitchwheel) (quote ((om-load-inputfun (quote input-funbox) "wheel value" "VALUES" 0) (om-load-inputfun (quote input-funbox) "channel" "CHANS" 1) (om-load-inputfun (quote input-funbox) "optional port" "PORT" 0))) (om-make-point 352 517) (om-make-point 163 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 243 604) (om-make-point 29 23) 100 "100" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 130 601) (om-make-point 48 26) (list 0 250) "(0 250)" nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 71 629) (om-make-point 210 98) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6025) (6050) (6075) (6100) (6125) (6150) (6175) (6200))) :lonset (quote (0 250 500 750 1000 1250 1500 1750 2000 2250)) :ldur (quote ((250) (250) (250) (250) (250) (250) (250) (250) (250))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 100)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom inport outport deltapict cmnpref staff fontsize approx palette-mode obj-mode show-stems scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8 0 0 (quote t) nil)) t nil nil nil))) (quote ((29 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 3 2 nil 0) (32 0 6 0 nil 0) (5 0 6 1 nil 0) (7 0 6 2 nil 0) (18 0 19 0 nil 0) (17 0 19 1 nil 0) (19 0 20 0 nil 0) (25 0 20 1 ((om-make-point 319 117) (om-make-point 343 130) (om-make-point 467 131) (om-make-point 466 248)) 0) (9 0 20 2 nil 0) (22 0 24 1 nil 0) (21 0 24 2 nil 0) (25 0 24 6 nil 0) (23 0 24 7 nil 0) (26 0 27 0 nil 0) (25 0 27 1 nil 0) (10 0 27 2 nil 0) (33 0 34 0 nil 0) (38 0 34 1 nil 0) (35 0 38 0 nil 0) (36 0 38 1 nil 0) (37 0 38 2 nil 0) (40 0 41 0 nil 0) (39 0 41 1 nil 0) (8 0 41 2 nil 0) (34 0 44 1 nil 0) (43 0 44 2 nil 0) (42 0 44 7 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-path nil) :thepict nil :storemode :external :extraobjs (list (list (quote line) (list 5/67 117/235 317/335 114/235) (list (om-make-color 0.9306569 0.0 0.0) 4 (quote line) nil) nil))))) (setf (pict-pos newpict) (om-make-point 26 428)) (setf (pict-size newpict) (om-make-point 500 4)) newpict)) 6.010003))
