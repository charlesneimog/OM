; OM File Header - Saved 2011/11/09 17:30:47
; (6.050003 :patc (om-make-point 25 90) (om-make-point 45 0) (om-make-point 1235 752) "" 183 0 "2011/10/18 10:35:56" "2011/10/18 17:31:52")
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/Screen shot 2011-10-18 at 12.01.54 PM"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "omloop01" (quote ((om-load-boxcomment "comment 4" (om-make-point 507 36) (quote "________________________________________________________________") nil (om-make-point 695 230) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 242 25) (quote "OM => (4700 6000 6400 6800 7100)") nil (om-make-point 936 185) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 244 28) (quote "OM => ((a b c d e f g h) (1 2 3 4 5 6))") nil (om-make-point 688 186) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 69) (quote "cospe o primeiro elemento da lista") nil (om-make-point 173 603) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 218 55) (quote "para fazer a diferença intervalar entre todas as notas") nil (om-make-point 897 286) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 178 88) (quote "OM => $((1300 1700 2100 2400) $(400 800 1100) $(400 700) $(300))") nil (om-make-point 856 507) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 937 65) (om-make-point 184 30) (list 6400 4700 6000 6800 7100) "(6400  4700 6000 6800 7100)" nil) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 999 127) nil nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 803 526) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 570) (om-make-point 27 30) nil "nil" nil) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 260 592) nil nil nil nil 1) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 228 264) nil nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 240 489) nil nil nil nil 3) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 241 443) (om-make-point 53 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 305 368) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 193 368) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 244 183) nil nil nil nil 1) (om-load-boxin "accord" 0 (om-make-point 240 94) "" "accord" nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 410 677) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 54 573) nil nil nil 0)) (quote ((0 0 1 0 nil 0) (3 1 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (2 0 5 0 nil 0) (2 0 6 0 nil 0) (8 0 7 0 nil 0) (1 0 9 0 nil 0) (3 0 10 0 nil 0))) 1 "omloop" nil) (om-load-boxcomment "comment" (om-make-point 170 92) (quote "cmd+click para colocar as notas direto na pauta (na parte de edição)") nil (om-make-point 1047 387) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 744 374) (om-make-point 298 118) (let ((thechord (make-instance (quote chord) :lmidic (quote (4700 6000 6400 6800 7100)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 568 317) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 702 290) (om-make-point 180 30) (list 4700 6000 6400 6800 7100) "(4700 6000 6400 6800 7100)" nil) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "tira o primeiro elemento da lista") nil (om-make-point 304 604) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 230 44) (quote "combien d'éléments vont être enlevés du début de la liste") nil (om-make-point 411 540) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 390 553) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote lispfun) "NTHCDR" (quote nthcdr) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 407 595) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 280 612) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 147 614) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 632 32) (quote "_____________________________________________________________________________") nil (om-make-point 60 511) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 154 542) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxcomment "comment" (om-make-point 150 150) (quote "OM > (a b c d e f g h)$OM > (b c d e f g h)$OM > (c d e f g h)$OM > (d e f g h)$OM > (e f g h)$OM > (f g h)$OM > (g h)$OM > (h)$OM => (cest fini)") nil (om-make-point 230 372) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 74 27) (quote "onlistloop") nil (om-make-point 71 352) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 80 398) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 5" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 80 431) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 461 419) (om-make-point 68 30) (list (quote cest) (quote fini)) "(cest fini)" nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 322 280) nil nil nil nil 1) (om-load-boxcall (quote genfun) "onlist" (quote onlistloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 310 176) nil nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 325 84) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 444 449) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 226 435) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 4 0 nil 0) (1 0 5 0 nil 0))) 1 nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 803 145) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 832 65) (om-make-point 86 30) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 697 65) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 279 224) (om-make-point 152 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h) (quote i) (quote j) (quote k) (quote l) (quote m)) "(a b c d e f g h i j k l m)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 4" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 279 257) nil nil nil (list (om-load-boxcomment "comment" (om-make-point 172 84) (quote "vai recebendo os resultados e acoplando em uma só lista") nil (om-make-point 379 314) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 100 60) (quote "joga a lista de elementos na saída um a um") nil (om-make-point 491 196) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 188 71) (quote "cria uma lista de números com a length da lista inicial e joga na saída um a um") nil (om-make-point 28 202) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxin "input0" 0 (om-make-point 410 61) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 332 362) nil nil nil nil 3) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 343 304) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 431 176) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 304 137) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 252 147) (om-make-point 21 30) 1 "1" nil) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 223 207) (om-make-point 148 59) nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 447 492) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 251 518) nil nil nil 0)) (quote ((5 0 4 0 nil 0) (9 0 5 0 nil 0) (6 0 5 1 nil 0) (3 0 6 0 nil 0) (3 0 7 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (4 1 10 0 nil 0) (4 0 11 0 nil 0))) 1 nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 3" (quote omloop) (quote nil) (om-make-point 91 256) nil nil nil (list (om-load-boxcomment "comment 2" (om-make-point 40 28) (quote "max") nil (om-make-point 286 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 40 28) (quote "min") nil (om-make-point 236 139) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 368 387) (om-make-point 68 30) (list (quote cest) (quote fini)) "(cest fini)" nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 269 329) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 290 173) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 171) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 223 207) (om-make-point 148 59) nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 351 417) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 93 423) nil nil nil 0)) (quote ((6 0 3 0 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (2 0 7 0 nil 0) (3 0 8 0 nil 0))) 1 nil nil) (om-load-boxcomment "comment 2" (om-make-point 632 32) (quote "_____________________________________________________________________________") nil (om-make-point 58 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote nil) (om-make-point 185 256) nil nil nil (list (om-load-boxcomment "comment 2" (om-make-point 40 28) (quote "max") nil (om-make-point 286 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 40 28) (quote "min") nil (om-make-point 236 139) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 55 30) (quote "par pas") nil (om-make-point 325 136) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 331 171) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 368 387) (om-make-point 68 30) (list (quote cest) (quote fini)) "(cest fini)" nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 269 329) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 290 173) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 249 171) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10) (om-load-inputfun (quote input-funbox) "step" "BY" 2))) (om-make-point 223 207) (om-make-point 148 59) nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 351 417) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 93 423) nil nil nil 0)) (quote ((8 0 5 0 nil 0) (7 0 8 0 nil 0) (6 0 8 1 nil 0) (3 0 8 2 nil 0) (4 0 9 0 nil 0) (5 0 10 0 nil 0))) 1 nil nil) (om-load-boxcomment "comment" (om-make-point 151 41) (quote "Forloop (un compteur)") nil (om-make-point 56 201) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 632 32) (quote "_____________________________________________________________________________") nil (om-make-point 54 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 270 39) (quote "OM => ((a 1) (b 2) (c 3) (d 4) (e 5) (f 6))") nil (om-make-point 353 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 489 48) (om-make-point 86 30) (list 1 2 3 4 5 6) "(1 2 3 4 5 6)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 353 47) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "loop input" "OPLIST" nil))) (om-make-point 406 90) (om-make-point 128 59) nil nil (list (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 379 268) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 519 171) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 523 86) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 386 348) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 256 169) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 260 95) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" (quote *cest)))) (om-make-point 521 500) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 249 501) nil nil nil 0)) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 4 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 236 88) nil nil nil (list (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 141 441) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 641 103) (quote "construit une liste;$son comportement dépend de la liste qu'on évalue:$1ère: prend la dernière valeur;$2ème: fait une copie de l'état interne de collect - c'est la sortie qu'on connecte normalemente à finally;$3ème: réinitialise le collect.") nil (om-make-point 289 295) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 299) nil nil nil nil 3) (om-load-boxcomment "comment" (om-make-point 438 70) (quote "a) énumère une liste;$b) envoi un message à la fin de la liste pour arrêter le processus;") nil (om-make-point 282 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 235 169) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 239 95) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" (quote *cest)))) (om-make-point 413 562) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 39 573) nil nil nil 0)) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (5 0 4 0 nil 0) (2 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 211 46) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 66 47) (om-make-point 104 30) (list (quote a) (quote b) (quote c) (quote d) (quote e) (quote f) (quote g) (quote h)) "(a b c d e f g h)" nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 91 88) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 387 488) (om-make-point 68 30) (list (quote cest) (quote fini)) "(cest fini)" nil) (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 106 304) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 438 70) (quote "a) énumère une liste;$b) envoi un message à la fin de la liste pour arrêter le processus;") nil (om-make-point 297 196) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 235 193) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 239 95) "" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" (quote *cest)))) (om-make-point 413 562) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 39 573) nil nil nil 0)) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0) (1 0 6 0 nil 0))) 1 nil nil))) (quote ((6 0 7 0 nil 0) (10 1 8 0 nil 0) (11 0 10 1 nil 0) (14 0 15 0 nil 0) (19 0 15 1 nil 0) (19 0 16 0 nil 0) (19 0 17 0 nil 0) (22 0 23 0 nil 0) (26 0 24 0 nil 0) (25 0 24 1 nil 0) (27 0 28 0 nil 0) (36 0 37 0 nil 0) (35 0 37 1 nil 0) (39 0 38 0 nil 0) (40 0 41 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "Screen shot 2011-10-18 at 12.01.54 PM" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "Screen shot 2011-10-18 at 12.01.54 PM" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 720 597)) (setf (pict-size newpict) (om-make-point 298 138)) newpict)) 6.050003))
