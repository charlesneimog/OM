; OM File Header - Saved 2021/08/30 15:56:03
; (6.19 :patc (om-make-point 857 157) (om-make-point 143 10) (om-make-point 1511 1030) "" 183 0 "2021/08/09 15:30:21" "2021/08/30 15:56:03")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../in-files/Bassclarinet1.aif\"" "#P\"../in-files/cowbell.aif\"" "#P\"../../../../../DOCUMENTS/OM#/OUT-FILES/spat-binaural3.aiff\""))
(in-package :om)(load-lib-for (quote ("OM-Spat")))(setf *om-current-persistent* (om-load-patch1 "fft-spat" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 286 14) (om-make-point 51 32) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 204 12) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM 2" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 225 59) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 1019 483) (om-make-point 33 32) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 1070 479) (om-make-point 40 32) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE 2" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 1072 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 779 593) (om-make-point 33 32) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 842 592) (om-make-point 40 32) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 752 643) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 1161 530) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 351 503) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 848 125) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 883 167) (om-make-point 36 32) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 835 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 1244 576) (om-make-point 36 32) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 959 650) (om-make-point 335 195) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.039197684 0.26287627 0.4666214 0.6327541 0.747828 0.80409205 0.8002641 0.7415252 0.6387459 0.5070522 0.3639158 0.2270156 0.11213898 0.031382084 -0.008134186 -0.0048846603 0.037159086 0.10931481 0.19953764 0.29414082 0.37964845 0.44453856 0.4806484 0.48406732 0.45542002 0.39952016 0.32446754 0.24033416 0.15763223 0.08579481 0.031876684 -3.383756E-4 -0.010706544 -0.002527833 0.018176437 0.043795705 0.06649947 0.07963145 0.07891989 0.063316345 0.03532958 7.936955E-4 -0.031906784 -0.053054393 -0.053094328 -0.024191678 0.038371444 0.13516891 0.26213837 0.4107144 0.56859696 0.72107435 0.8527472 0.94943184 1.0 0.99790836 0.9422053 0.8378694 0.69541514 0.52979637 0.35873103 0.20064307 0.07247782 -0.012340188 -0.04554975 -0.025082946 0.044648648 0.1532551 0.28559947 0.42360878 0.5484427 0.6427535 0.69275785 0.68986595 0.6316713 0.5221847 0.37129223 0.19351447 0.00622952 -0.17240817 -0.32559395 -0.43977588 -0.50610614 -0.5212698 -0.48760775 -0.41254014 -0.30738628 -0.18575579 -0.06173325 0.05189824 0.14516413 0.21194494 0.25044084 0.26301706 0.25547278 0.23586333 0.21305442 0.1952281 0.1885593 0.19624973 0.21806026 0.25039816 0.28694308 0.31971335 0.34040928 0.34183252 0.31916416 0.27091002 0.19935727 0.11046756 0.013204217 -0.08162594 -0.16285932 -0.22058834 -0.2476737 -0.24093326 -0.2018308 -0.13654626 -0.055394706 0.02835071 0.10009444 0.14580918 0.15393603 0.11704576 0.033029437 -0.09434682 -0.25561786 -0.4365226 -0.6195379 -0.78586466 -0.9176251 -1.0)) (quote (-4.47631E-5 -0.049832166 -0.099496126 -0.14891356 -0.19796193 -0.2465195 -0.29446608 -0.34168267 -0.38805223 -0.43345988 -0.47779292 -0.5209416 -0.56279874 -0.60326064 -0.64222706 -0.6796013 -0.71529085 -0.749207 -0.7812658 -0.81138784 -0.8394983 -0.8655275 -0.88941086 -0.91108937 -0.9305091 -0.947622 -0.96238554 -0.97476334 -0.9847243 -0.99224425 -0.997304 -0.9998916 -1.0 -0.99762947 -0.9927855 -0.98548037 -0.975732 -0.96356476 -0.9490086 -0.93209976 -0.91288 -0.89139724 -0.8677045 -0.84186054 -0.81392956 -0.78398085 -0.7520885 -0.7183316 -0.68279374 -0.64556337 -0.6067325 -0.5663976 -0.52465857 -0.48161858 -0.43738484 -0.39206696 -0.3457771 -0.29862976 -0.2507422 -0.20223338 -0.15322322 -0.10383332 -0.054185804 -0.004404366 0.045387984 0.09506762 0.14451158 0.19359708 0.24220239 0.29020715 0.33749223 0.38394082 0.42943704 0.4738685 0.51712525 0.5590999 0.59968794 0.63878906 0.6763065 0.712147 0.7462219 0.77844656 0.8087412 0.8370303 0.8632443 0.8873179 0.9091919 0.9288113 0.94612796 0.96109856 0.97368646 0.98386014 0.9915944 0.99687016 0.9996744 1.0 0.99784625 0.99321855 0.9861281 0.9765928 0.964636 0.9502876 0.93358326 0.9145639 0.8932773 0.86977566 0.8441174 0.8163667 0.7865914 0.754866 0.72126925 0.6858839 0.6487982 0.6101035 0.569896 0.5282756 0.4853452 0.44121197 0.39598417 0.3497746 0.30269825 0.25487077 0.20641172 0.1574403 0.10807861 0.058449153 0.008674383 -0.04112214 -0.09081632 -0.14028591 -0.18940741 -0.23805984)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) nil nil (pairlis (quote (winsize winpos mode show-axes show-room room-size line-width bg-color picture)) (list (om-make-point 800 800) (om-make-point 600 200) 0 1 1 2 1.0 nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "IMAGPART" (quote imagpart) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 749 422) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 709 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REALPART" (quote realpart) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 568 429) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 630 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+ 2" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 597 391) (om-make-point 182 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 551 260) (om-make-point 47 35) nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 601 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 1316 402) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 1086 249) (om-make-point 78 32) (list 0 0.003) "(0 0.003)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 1253 200) (om-make-point 55 32) 0.003 "0.003" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1336 224) (om-make-point 58 32) 44100 "44100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEC->SAMPLES" (quote sec->samples) (quote ((om-load-inputfun (quote input-funbox) "duration (s)" "SECS" 0) (om-load-inputfun (quote input-funbox) "sample rate (Hz)" "SAMPLERATE" nil))) (om-make-point 1267 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 1106 358) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CREATE-PURE-TONE" (quote create-pure-tone) (quote ((om-load-inputfun (quote input-funbox) "FREQUENCY" "FREQUENCY" nil) (om-load-inputfun (quote input-funbox) "TIME" "TIME" nil))) (om-make-point 867 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1154 64) (om-make-point 48 32) 6.18 "6.18" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1086 114) (om-make-point 107 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 947 48) (om-make-point 35 32) 19 "19" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 927 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 918 258) (om-make-point 101 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 849 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 541 212) (om-make-point 220 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 764 67) (om-make-point 50 32) (list 1 1) "(1 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 718 8) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 671 53) (om-make-point 34 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 600 31) (om-make-point 55 32) 0.003 "0.003" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "DO-SENOIDE" (quote do-senoide) (quote ((om-load-inputfun (quote input-funbox) "DUR" "DUR" nil) (om-load-inputfun (quote input-funbox) "FREQ" "FREQ" nil) (om-load-inputfun (quote input-funbox) "GAIN" "GAIN" nil) (om-load-inputfun (quote input-funbox) "ENVELOPE" "ENVELOPE" nil))) (om-make-point 602 123) (om-make-point 205 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SPAT-MATRIX" (quote spat-matrix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "number of components" "numcols" 1) (om-load-inputkeyword (quote editor-keyword) "" "sounds" (quote :sounds) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "durations" (quote :durations) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "onsets" (quote :onsets) nil nil) (om-load-inputkeyword (quote editor-keyword) "" "trajectories" (quote :trajectories) nil nil))) (om-make-point 71 545) (om-make-point 251 129) (if (find-class (quote spat-matrix) nil) (let ((array (make-instance (quote spat-matrix) :numcols 2))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote sounds)) (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Bassclarinet1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "cowbell" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj))) (setf (slot-value array (quote src-names)) nil) (setf (slot-value array (quote trajectories)) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.24441529 0.5135082 0.6158056 0.5477799 0.36926126 0.17955888 0.077096224 0.118573785 0.29442322 0.531162 0.7205355 0.76430226 0.6167215 0.3071754 -0.06706369 -0.3760336 -0.5069182 -0.4088946 -0.11486172 0.269184 0.6035727 0.7680379 0.7076124 0.45313105 0.10807538 -0.19312394 -0.33877867 -0.28421927 -0.0689345 0.20031846 0.39368057 0.41194427 0.2282723 -0.09892267 -0.44725835 -0.67748464 -0.68778635 -0.45380968 -0.038681567 0.43077162 0.8120165 1.0 0.9647097 0.7587869 0.49292842 0.2895677 0.23367335 0.3402102 0.550714 0.75955475 0.858631 0.7821804 0.533792 0.1852696 -0.15156156 -0.36829388 -0.4011169 -0.25368214 0.0066410303 0.27662146 0.457278 0.49007443 0.37536728 0.16697514 -0.05348444 -0.2110343 -0.266285 -0.22770983 -0.14347965 -0.07760525 -0.08118856 -0.17089224 -0.3229828 -0.48437253 -0.5950057 -0.6116787 -0.5235271 -0.35359204 -0.14711815 0.04729712 0.19518197 0.28518713 0.32691216 0.3400892 0.34131932 0.33506238 0.31296027 0.26113892 0.17108965 0.048047066 -0.08789086 -0.20888305 -0.29141915 -0.3273415 -0.32801497 -0.31902474 -0.3273617 -0.36701322 -0.43011022 -0.4886513 -0.5070234 -0.4603177 -0.3501094 -0.20973915 -0.0952301 -0.06427705 -0.15141231 -0.34999633 -0.60965425 -0.8517314 -0.99776954 -1.0 -0.86122495 -0.63513935 -0.4058839 -0.2542876 -0.22429699 -0.30366594 -0.42767102 -0.50538755 -0.45854706 -0.25725895 0.062551856 0.40822876 0.6635971 0.7338419 0.5842718 0.2569704 -0.14222408 -0.4822021 -0.6558919 -0.6209965)) (quote (0.15572465 0.12078762 0.085882664 0.051041365 0.01629579 -0.018322349 -0.052781403 -0.08704984 -0.12109643 -0.15488994 -0.18839956 -0.22159462 -0.2544449 -0.28692007 -0.31899083 -0.3506276 -0.38180155 -0.41248423 -0.44264746 -0.47226393 -0.50130624 -0.5297481 -0.5575633 -0.58472664 -0.6112131 -0.63699866 -0.66205955 -0.686373 -0.7099167 -0.73266924 -0.7546098 -0.77571816 -0.7959752 -0.81536234 -0.83386195 -0.85145694 -0.86813146 -0.8838701 -0.8986584 -0.9124831 -0.92533136 -0.93719155 -0.94805277 -0.9579051 -0.9667395 -0.974548 -0.98132325 -0.9870593 -0.9917508 -0.99539346 -0.99798394 -0.99951995 -1.0 -0.9994237 -0.9977915 -0.9951051 -0.9913667 -0.9865798 -0.9807488 -0.973879 -0.9659768 -0.95704926 -0.9471046 -0.936152 -0.92420125 -0.9112635 -0.89735055 -0.882475 -0.8666505 -0.84989155 -0.8322134 -0.81363225 -0.79416514 -0.7738297 -0.7526444 -0.7306291 -0.70780367 -0.68418897 -0.65980644 -0.6346785 -0.6088282 -0.582279 -0.55505527 -0.52718187 -0.49868426 -0.4695885 -0.43992096 -0.40970916 -0.37898058 -0.34776324 -0.31608576 -0.28397697 -0.25146633 -0.21858348 -0.18535847 -0.15182173 -0.118003905 -0.0839358 -0.049648703 -0.015173852 0.019457221 0.05421269 0.08906114 0.1239704 0.15890873 0.1938442 0.22874476 0.26357853 0.29831386 0.33291876 0.36736166 0.4016112 0.435636 0.46940494 0.5028871 0.5360521 0.5688695 0.6013092 0.63334144 0.66493726 0.6960678 0.72670436 0.7568189 0.786384 0.8153728 0.84375847 0.87151546 0.898618 0.9250417 0.950762 0.97575576 1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.12984205 0.29155397 0.2944399 0.21018398 0.13257814 0.12689793 0.19658518 0.28332675 0.3000834 0.1803937 -0.08085793 -0.4161026 -0.7099612 -0.849541 -0.7767557 -0.5177298 -0.17469239 0.116806634 0.24624408 0.17550338 -0.046272993 -0.3068686 -0.48266876 -0.49372748 -0.33692694 -0.0826031 0.16259218 0.30797255 0.32082248 0.23811925 0.14292109 0.11764573 0.197752 0.34920645 0.48162115 0.49156976 0.31567705 -0.03218305 -0.4582441 -0.82338936 -1.0 -0.92554 -0.62853814 -0.21523607 0.17674709 0.43632022 0.52201355 0.47125423 0.3730092 0.3182155 0.3525939 0.4547341 0.54969264 0.5508696 0.40904892 0.14386857 -0.15861118 -0.3821621 -0.43383414 -0.2892279 -0.0075720553 0.2914846 0.47949067 0.47584987 0.2835343 -0.012550592 -0.28370637 -0.4143871 -0.3517505 -0.12540251 0.1708473 0.42550814 0.5614389 0.56852186 0.5018947 0.44755813 0.4730204 0.5879308 0.7347239 0.8146812 0.73741174 0.46998468 0.06151259 -0.36981475 -0.6826421 -0.77103156 -0.6091616 -0.26172173 0.1447097 0.47608897 0.64621807 0.64800084 0.5473131 0.44385862 0.41873312 0.49425253 0.6251539 0.7247801 0.7127533 0.56016875 0.30950308 0.058687214 -0.08374077 -0.051199317 0.14606393 0.42123199 0.6473061 0.7134836 0.5756906 0.27784443 -0.06615996 -0.32159227 -0.390666 -0.2526636 0.03139472 0.3506229 0.5967387 0.71195734 0.70982314 0.66002644 0.64571023 0.715114 0.8520038 0.9800962 1.0 0.8410922 0.5030086 0.06583691 -0.3373524 -0.57417566 -0.5686977 -0.33378512)) (quote (-2.173185E-4 -0.106747806 -0.21206641 -0.31497502 -0.414303 -0.5089204 -0.5977508 -0.67978365 -0.7540859 -0.81981206 -0.87621457 -0.9226518 -0.9585957 -0.983637 -0.9974909 -1.0 -0.99113554 -0.97099847 -0.93981797 -0.89794857 -0.8458667 -0.7841648 -0.7135446 -0.6348096 -0.54885567 -0.45666057 -0.35927278 -0.25780064 -0.15339816 -0.047252715 0.05942738 0.16542888 0.2695464 0.37059474 0.46742478 0.55893517 0.64408446 0.7219044 0.7915096 0.852108 0.9030102 0.9436376 0.9735277 0.9923407 0.9998625 0.996007 0.98081887 0.9544705 0.9172616 0.86961574 0.81207455 0.7452929 0.6700299 0.5871426 0.49757364 0.40234172 0.30253053 0.19927514 0.093749404 -0.0128442645 -0.1192944 -0.22438987 -0.3269351 -0.42576373 -0.5197518 -0.60782916 -0.6889944 -0.7623242 -0.8269844 -0.8822393 -0.9274607 -0.9621334 -0.98586357 -0.99838114 -0.9995437 -0.9893378 -0.9678798 -0.93541384 -0.89230907 -0.839056 -0.7762604 -0.7046366 -0.6249994 -0.5382547 -0.4453893 -0.34745878 -0.245579 -0.14090795 -0.034636438 0.07202673 0.17786885 0.28168416 0.3822925 0.4785496 0.56936014 0.6536914 0.7305838 0.7991626 0.8586478 0.90836257 0.9477415 0.9763365 0.9938222 1.0 0.9947991 0.97827924 0.95062787 0.91215986 0.8633126 0.8046421 0.73681546 0.6606045 0.57687605 0.48658264 0.39075136 0.29047072 0.186885 0.0811708 -0.025469244 -0.13182211 -0.2366777 -0.33884346 -0.437157 -0.53049994 -0.6178105 -0.6980953 -0.7704411 -0.8340255 -0.8881239 -0.9321216 -0.96551806 -0.9879333)) (quote (-0.8536769 -0.92578805 -0.97423137 -0.99776817 -0.9957972 -0.9683684 -0.91618324 -0.8405757 -0.7434789 -0.6273751 -0.49523252 -0.35042942 -0.19666773 -0.037878573 0.12187862 0.27851963 0.4280398 0.5666182 0.69070864 0.7971405 0.8831937 0.946666 0.98593617 1.0 0.98849816 0.95172447 0.89061916 0.80674446 0.70224476 0.5797913 0.442515 0.2939253 0.13782072 -0.021807433 -0.18087942 -0.33532655 -0.48120126 -0.61477417 -0.7326305 -0.83175707 -0.9096198 -0.964228 -0.99418575 -0.99872685 -0.9777354 -0.93174804 -0.8619399 -0.77009666 -0.6585659 -0.53019894 -0.38827753 -0.23643005 -0.07853836 0.08136082 0.23918034 0.39088404 0.5325942 0.66068817 0.77189136 0.8633598 0.9327559 0.9783052 0.9988433 0.99384535 0.9634388 0.9084007 0.83013905 0.7306539 0.6124892 0.47866547 0.33260405 0.17803931 0.018922449 -0.14067859 -0.29668432 -0.44510454 -0.58214665 -0.7043054 -0.8084586 -0.8919435 -0.952626 -0.9889543 -1.0 -0.9854805 -0.9457671 -0.88187516 -0.79543794 -0.68866504 -0.56428677 -0.42548215 -0.2758006 -0.1190685 0.04070735 0.19944263 0.35307813 0.49768734 0.62957204 0.745361 0.8420944 0.9172987 0.9690514 0.99602974 0.9975435 0.9735545 0.92467547 0.8521564 0.75785137 0.6441709 0.51402164 0.37073076 0.21796155 0.059620027 -0.10024631 -0.25755018 -0.40826982 -0.5485524 -0.67481107 -0.7838184 -0.87278736 -0.9394433 -0.9820825 -0.9996145 -0.9915911 -0.9582175 -0.9003471 -0.8194592 -0.71762175 -0.5974382 -0.4619813 -0.314714 -0.15940118 -1.35303E-5)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list -0.8536769 -0.92578805 -0.97423137 -0.99776817 -0.9957972 -0.9683684 -0.91618324 -0.8405757 -0.7434789 -0.6273751 -0.49523252 -0.35042942 -0.19666773 -0.037878573 0.12187862 0.27851963 0.4280398 0.5666182 0.69070864 0.7971405 0.8831937 0.946666 0.98593617 1.0 0.98849816 0.95172447 0.89061916 0.80674446 0.70224476 0.5797913 0.442515 0.2939253 0.13782072 -0.021807433 -0.18087942 -0.33532655 -0.48120126 -0.61477417 -0.7326305 -0.83175707 -0.9096198 -0.964228 -0.99418575 -0.99872685 -0.9777354 -0.93174804 -0.8619399 -0.77009666 -0.6585659 -0.53019894 -0.38827753 -0.23643005 -0.07853836 0.08136082 0.23918034 0.39088404 0.5325942 0.66068817 0.77189136 0.8633598 0.9327559 0.9783052 0.9988433 0.99384535 0.9634388 0.9084007 0.83013905 0.7306539 0.6124892 0.47866547 0.33260405 0.17803931 0.018922449 -0.14067859 -0.29668432 -0.44510454 -0.58214665 -0.7043054 -0.8084586 -0.8919435 -0.952626 -0.9889543 -1.0 -0.9854805 -0.9457671 -0.88187516 -0.79543794 -0.68866504 -0.56428677 -0.42548215 -0.2758006 -0.1190685 0.04070735 0.19944263 0.35307813 0.49768734 0.62957204 0.745361 0.8420944 0.9172987 0.9690514 0.99602974 0.9975435 0.9735545 0.92467547 0.8521564 0.75785137 0.6441709 0.51402164 0.37073076 0.21796155 0.059620027 -0.10024631 -0.25755018 -0.40826982 -0.5485524 -0.67481107 -0.7838184 -0.87278736 -0.9394433 -0.9820825 -0.9996145 -0.9915911 -0.9582175 -0.9003471 -0.8194592 -0.71762175 -0.5974382 -0.4619813 -0.314714 -0.15940118 -1.35303E-5))) newobj))) (setf (slot-value array (quote durations)) 10) (setf (slot-value array (quote onsets)) (list 0.0 0.0)) (setf (slot-value array (quote orientations)) nil) (setf (slot-value array (quote apertures)) nil) (setf (slot-value array (quote presence)) 90) (setf (slot-value array (quote warmth)) 30) (setf (slot-value array (quote brillance)) 30) (setf (slot-value array (quote room-presence)) 48) (setf (slot-value array (quote running-reverberance)) 34) (setf (slot-value array (quote envelopment)) 24) (setf (slot-value array (quote omni-filter)) (list (list 0 1.7 0 -3.8 177 5657))) (setf (slot-value array (quote axis-filter)) (list (list 0 0 0 0 177 5657))) (setf (slot-value array (quote room)) 1) (setf (lcontrols array) (list)) (setf (data array) (list (list (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Bassclarinet1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "cowbell" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj)) (list nil nil) (list (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.24441529 0.5135082 0.6158056 0.5477799 0.36926126 0.17955888 0.077096224 0.118573785 0.29442322 0.531162 0.7205355 0.76430226 0.6167215 0.3071754 -0.06706369 -0.3760336 -0.5069182 -0.4088946 -0.11486172 0.269184 0.6035727 0.7680379 0.7076124 0.45313105 0.10807538 -0.19312394 -0.33877867 -0.28421927 -0.0689345 0.20031846 0.39368057 0.41194427 0.2282723 -0.09892267 -0.44725835 -0.67748464 -0.68778635 -0.45380968 -0.038681567 0.43077162 0.8120165 1.0 0.9647097 0.7587869 0.49292842 0.2895677 0.23367335 0.3402102 0.550714 0.75955475 0.858631 0.7821804 0.533792 0.1852696 -0.15156156 -0.36829388 -0.4011169 -0.25368214 0.0066410303 0.27662146 0.457278 0.49007443 0.37536728 0.16697514 -0.05348444 -0.2110343 -0.266285 -0.22770983 -0.14347965 -0.07760525 -0.08118856 -0.17089224 -0.3229828 -0.48437253 -0.5950057 -0.6116787 -0.5235271 -0.35359204 -0.14711815 0.04729712 0.19518197 0.28518713 0.32691216 0.3400892 0.34131932 0.33506238 0.31296027 0.26113892 0.17108965 0.048047066 -0.08789086 -0.20888305 -0.29141915 -0.3273415 -0.32801497 -0.31902474 -0.3273617 -0.36701322 -0.43011022 -0.4886513 -0.5070234 -0.4603177 -0.3501094 -0.20973915 -0.0952301 -0.06427705 -0.15141231 -0.34999633 -0.60965425 -0.8517314 -0.99776954 -1.0 -0.86122495 -0.63513935 -0.4058839 -0.2542876 -0.22429699 -0.30366594 -0.42767102 -0.50538755 -0.45854706 -0.25725895 0.062551856 0.40822876 0.6635971 0.7338419 0.5842718 0.2569704 -0.14222408 -0.4822021 -0.6558919 -0.6209965)) (quote (0.15572465 0.12078762 0.085882664 0.051041365 0.01629579 -0.018322349 -0.052781403 -0.08704984 -0.12109643 -0.15488994 -0.18839956 -0.22159462 -0.2544449 -0.28692007 -0.31899083 -0.3506276 -0.38180155 -0.41248423 -0.44264746 -0.47226393 -0.50130624 -0.5297481 -0.5575633 -0.58472664 -0.6112131 -0.63699866 -0.66205955 -0.686373 -0.7099167 -0.73266924 -0.7546098 -0.77571816 -0.7959752 -0.81536234 -0.83386195 -0.85145694 -0.86813146 -0.8838701 -0.8986584 -0.9124831 -0.92533136 -0.93719155 -0.94805277 -0.9579051 -0.9667395 -0.974548 -0.98132325 -0.9870593 -0.9917508 -0.99539346 -0.99798394 -0.99951995 -1.0 -0.9994237 -0.9977915 -0.9951051 -0.9913667 -0.9865798 -0.9807488 -0.973879 -0.9659768 -0.95704926 -0.9471046 -0.936152 -0.92420125 -0.9112635 -0.89735055 -0.882475 -0.8666505 -0.84989155 -0.8322134 -0.81363225 -0.79416514 -0.7738297 -0.7526444 -0.7306291 -0.70780367 -0.68418897 -0.65980644 -0.6346785 -0.6088282 -0.582279 -0.55505527 -0.52718187 -0.49868426 -0.4695885 -0.43992096 -0.40970916 -0.37898058 -0.34776324 -0.31608576 -0.28397697 -0.25146633 -0.21858348 -0.18535847 -0.15182173 -0.118003905 -0.0839358 -0.049648703 -0.015173852 0.019457221 0.05421269 0.08906114 0.1239704 0.15890873 0.1938442 0.22874476 0.26357853 0.29831386 0.33291876 0.36736166 0.4016112 0.435636 0.46940494 0.5028871 0.5360521 0.5688695 0.6013092 0.63334144 0.66493726 0.6960678 0.72670436 0.7568189 0.786384 0.8153728 0.84375847 0.87151546 0.898618 0.9250417 0.950762 0.97575576 1.0)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0))) newobj) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.12984205 0.29155397 0.2944399 0.21018398 0.13257814 0.12689793 0.19658518 0.28332675 0.3000834 0.1803937 -0.08085793 -0.4161026 -0.7099612 -0.849541 -0.7767557 -0.5177298 -0.17469239 0.116806634 0.24624408 0.17550338 -0.046272993 -0.3068686 -0.48266876 -0.49372748 -0.33692694 -0.0826031 0.16259218 0.30797255 0.32082248 0.23811925 0.14292109 0.11764573 0.197752 0.34920645 0.48162115 0.49156976 0.31567705 -0.03218305 -0.4582441 -0.82338936 -1.0 -0.92554 -0.62853814 -0.21523607 0.17674709 0.43632022 0.52201355 0.47125423 0.3730092 0.3182155 0.3525939 0.4547341 0.54969264 0.5508696 0.40904892 0.14386857 -0.15861118 -0.3821621 -0.43383414 -0.2892279 -0.0075720553 0.2914846 0.47949067 0.47584987 0.2835343 -0.012550592 -0.28370637 -0.4143871 -0.3517505 -0.12540251 0.1708473 0.42550814 0.5614389 0.56852186 0.5018947 0.44755813 0.4730204 0.5879308 0.7347239 0.8146812 0.73741174 0.46998468 0.06151259 -0.36981475 -0.6826421 -0.77103156 -0.6091616 -0.26172173 0.1447097 0.47608897 0.64621807 0.64800084 0.5473131 0.44385862 0.41873312 0.49425253 0.6251539 0.7247801 0.7127533 0.56016875 0.30950308 0.058687214 -0.08374077 -0.051199317 0.14606393 0.42123199 0.6473061 0.7134836 0.5756906 0.27784443 -0.06615996 -0.32159227 -0.390666 -0.2526636 0.03139472 0.3506229 0.5967387 0.71195734 0.70982314 0.66002644 0.64571023 0.715114 0.8520038 0.9800962 1.0 0.8410922 0.5030086 0.06583691 -0.3373524 -0.57417566 -0.5686977 -0.33378512)) (quote (-2.173185E-4 -0.106747806 -0.21206641 -0.31497502 -0.414303 -0.5089204 -0.5977508 -0.67978365 -0.7540859 -0.81981206 -0.87621457 -0.9226518 -0.9585957 -0.983637 -0.9974909 -1.0 -0.99113554 -0.97099847 -0.93981797 -0.89794857 -0.8458667 -0.7841648 -0.7135446 -0.6348096 -0.54885567 -0.45666057 -0.35927278 -0.25780064 -0.15339816 -0.047252715 0.05942738 0.16542888 0.2695464 0.37059474 0.46742478 0.55893517 0.64408446 0.7219044 0.7915096 0.852108 0.9030102 0.9436376 0.9735277 0.9923407 0.9998625 0.996007 0.98081887 0.9544705 0.9172616 0.86961574 0.81207455 0.7452929 0.6700299 0.5871426 0.49757364 0.40234172 0.30253053 0.19927514 0.093749404 -0.0128442645 -0.1192944 -0.22438987 -0.3269351 -0.42576373 -0.5197518 -0.60782916 -0.6889944 -0.7623242 -0.8269844 -0.8822393 -0.9274607 -0.9621334 -0.98586357 -0.99838114 -0.9995437 -0.9893378 -0.9678798 -0.93541384 -0.89230907 -0.839056 -0.7762604 -0.7046366 -0.6249994 -0.5382547 -0.4453893 -0.34745878 -0.245579 -0.14090795 -0.034636438 0.07202673 0.17786885 0.28168416 0.3822925 0.4785496 0.56936014 0.6536914 0.7305838 0.7991626 0.8586478 0.90836257 0.9477415 0.9763365 0.9938222 1.0 0.9947991 0.97827924 0.95062787 0.91215986 0.8633126 0.8046421 0.73681546 0.6606045 0.57687605 0.48658264 0.39075136 0.29047072 0.186885 0.0811708 -0.025469244 -0.13182211 -0.2366777 -0.33884346 -0.437157 -0.53049994 -0.6178105 -0.6980953 -0.7704411 -0.8340255 -0.8881239 -0.9321216 -0.96551806 -0.9879333)) (quote (-0.8536769 -0.92578805 -0.97423137 -0.99776817 -0.9957972 -0.9683684 -0.91618324 -0.8405757 -0.7434789 -0.6273751 -0.49523252 -0.35042942 -0.19666773 -0.037878573 0.12187862 0.27851963 0.4280398 0.5666182 0.69070864 0.7971405 0.8831937 0.946666 0.98593617 1.0 0.98849816 0.95172447 0.89061916 0.80674446 0.70224476 0.5797913 0.442515 0.2939253 0.13782072 -0.021807433 -0.18087942 -0.33532655 -0.48120126 -0.61477417 -0.7326305 -0.83175707 -0.9096198 -0.964228 -0.99418575 -0.99872685 -0.9777354 -0.93174804 -0.8619399 -0.77009666 -0.6585659 -0.53019894 -0.38827753 -0.23643005 -0.07853836 0.08136082 0.23918034 0.39088404 0.5325942 0.66068817 0.77189136 0.8633598 0.9327559 0.9783052 0.9988433 0.99384535 0.9634388 0.9084007 0.83013905 0.7306539 0.6124892 0.47866547 0.33260405 0.17803931 0.018922449 -0.14067859 -0.29668432 -0.44510454 -0.58214665 -0.7043054 -0.8084586 -0.8919435 -0.952626 -0.9889543 -1.0 -0.9854805 -0.9457671 -0.88187516 -0.79543794 -0.68866504 -0.56428677 -0.42548215 -0.2758006 -0.1190685 0.04070735 0.19944263 0.35307813 0.49768734 0.62957204 0.745361 0.8420944 0.9172987 0.9690514 0.99602974 0.9975435 0.9735545 0.92467547 0.8521564 0.75785137 0.6441709 0.51402164 0.37073076 0.21796155 0.059620027 -0.10024631 -0.25755018 -0.40826982 -0.5485524 -0.67481107 -0.7838184 -0.87278736 -0.9394433 -0.9820825 -0.9996145 -0.9915911 -0.9582175 -0.9003471 -0.8194592 -0.71762175 -0.5974382 -0.4619813 -0.314714 -0.15940118 -1.35303E-5)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf "3DC") newbpf)))) (when newobj (setf (z-points newobj) (list -0.8536769 -0.92578805 -0.97423137 -0.99776817 -0.9957972 -0.9683684 -0.91618324 -0.8405757 -0.7434789 -0.6273751 -0.49523252 -0.35042942 -0.19666773 -0.037878573 0.12187862 0.27851963 0.4280398 0.5666182 0.69070864 0.7971405 0.8831937 0.946666 0.98593617 1.0 0.98849816 0.95172447 0.89061916 0.80674446 0.70224476 0.5797913 0.442515 0.2939253 0.13782072 -0.021807433 -0.18087942 -0.33532655 -0.48120126 -0.61477417 -0.7326305 -0.83175707 -0.9096198 -0.964228 -0.99418575 -0.99872685 -0.9777354 -0.93174804 -0.8619399 -0.77009666 -0.6585659 -0.53019894 -0.38827753 -0.23643005 -0.07853836 0.08136082 0.23918034 0.39088404 0.5325942 0.66068817 0.77189136 0.8633598 0.9327559 0.9783052 0.9988433 0.99384535 0.9634388 0.9084007 0.83013905 0.7306539 0.6124892 0.47866547 0.33260405 0.17803931 0.018922449 -0.14067859 -0.29668432 -0.44510454 -0.58214665 -0.7043054 -0.8084586 -0.8919435 -0.952626 -0.9889543 -1.0 -0.9854805 -0.9457671 -0.88187516 -0.79543794 -0.68866504 -0.56428677 -0.42548215 -0.2758006 -0.1190685 0.04070735 0.19944263 0.35307813 0.49768734 0.62957204 0.745361 0.8420944 0.9172987 0.9690514 0.99602974 0.9975435 0.9735545 0.92467547 0.8521564 0.75785137 0.6441709 0.51402164 0.37073076 0.21796155 0.059620027 -0.10024631 -0.25755018 -0.40826982 -0.5485524 -0.67481107 -0.7838184 -0.87278736 -0.9394433 -0.9820825 -0.9996145 -0.9915911 -0.9582175 -0.9003471 -0.8194592 -0.71762175 -0.5974382 -0.4619813 -0.314714 -0.15940118 -1.35303E-5))) newobj)) (list 10 10) (list 0.0 0.0) (list nil nil) (list nil nil) (list 90 90) (list 30 30) (list 30 30) (list 48 48) (list 34 34) (list 24 24) (list (list 0 1.7 0 -3.8 177 5657) (list 0 1.7 0 -3.8 177 5657)) (list (list 0 0 0 0 177 5657) (list 0 0 0 0 177 5657)) (list 1 1))) array)) nil nil (pairlis (quote (winpos winsize color-list show-opt-fields cur-group-ind panel-list)) (list (om-make-point 567 563) (om-make-point 988 465) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (quote t) 0 (list (list "group 1" (list 0 (quote t)) (list 1 nil) (list 2 (quote t))) (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 123 501) (om-make-point 21 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 204 472) (om-make-point 28 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Bassclarinet1.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 112 348) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Bassclarinet1" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Bassclarinet1.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 774 491) (om-make-point 413 390) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "cowbell.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 219 354) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "cowbell" :type "aif") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "cowbell.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :libaudio) 1 nil 1000 0 (om-make-point 894 328) (om-make-point 577 283) 0 1 (quote t) nil 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 131 434) (om-make-point 79 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SPAT-SYNTH" (quote spat-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "OUTPUT" 2) (om-load-inputkeyword (quote input-keyword) "" "out-path" (quote :out-path) nil nil) (om-load-inputkeyword (quote input-keyword) "type of spatialization" "panning-type" (quote :panning-type) (quote binaural) (list (list "angular" (quote angular)) (list "vbap" (quote vbap)) (list "binaural" (quote binaural)))))) (om-make-point 176 698) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "spat-binaural3.aiff" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 37 780) (om-make-point 600 197) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM#" "OUT-FILES")) :device nil :host nil :name "spat-binaural3" :type "aiff") 1 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "spat-binaural3.aiff") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 414 260) (om-make-point 1216 896) 0 1000 nil 1 (quote :libaudio) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 231 503) (om-make-point 74 32) (list 0.0 0.0) "(0.0 0.0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 345 658) (om-make-point 142 32) "spat-binaural3.aiff" "\"spat-binaural3.aiff\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 371 690) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (17 0 5 0 nil 0) (3 0 5 1 nil 0) (4 0 5 2 nil 0) (19 0 8 0 nil 0) (6 0 8 1 nil 0) (7 0 8 2 nil 0) (5 0 9 0 nil 0) (15 0 10 0 ((om-make-point 1013 843) (om-make-point 687 843) (om-make-point 400 479) (om-make-point 360 498) (om-make-point 360 503)) 0) (15 0 10 1 ((om-make-point 1013 843) (om-make-point 691 843) (om-make-point 544 569) (om-make-point 369 498) (om-make-point 369 503)) 0) (11 0 13 0 nil 0) (12 0 13 1 nil 0) (8 0 15 1 nil 0) (5 0 15 2 nil 0) (9 0 15 3 nil 0) (14 0 15 4 nil 0) (16 0 17 0 nil 0) (20 0 17 1 nil 0) (18 0 19 0 nil 0) (20 0 19 1 nil 0) (22 0 20 0 nil 0) (29 0 20 1 nil 0) (21 0 22 0 nil 0) (36 0 22 1 nil 0) (27 0 23 0 nil 0) (25 0 27 0 nil 0) (26 0 27 1 nil 0) (24 0 28 0 nil 0) (23 0 28 1 nil 0) (35 0 29 0 nil 0) (28 2 29 1 nil 0) (33 0 31 0 nil 0) (30 0 31 1 nil 0) (32 0 33 1 nil 0) (13 0 34 0 nil 0) (31 0 34 1 nil 0) (34 0 35 0 nil 0) (41 0 36 0 nil 0) (41 0 36 1 nil 0) (41 0 36 2 nil 0) (41 0 36 3 nil 0) (40 0 41 0 nil 0) (35 0 41 1 nil 0) (38 0 41 2 nil 0) (37 0 41 3 nil 0) (43 0 42 1 nil 0) (47 0 42 2 nil 0) (44 0 42 3 nil 0) (50 0 42 4 nil 0) (10 0 42 5 nil 0) (45 0 47 0 nil 0) (46 0 47 1 nil 0) (42 0 48 0 nil 0) (52 0 48 2 nil 0) (48 0 49 0 nil 0) (51 0 52 0 nil 0))) nil 6.19))