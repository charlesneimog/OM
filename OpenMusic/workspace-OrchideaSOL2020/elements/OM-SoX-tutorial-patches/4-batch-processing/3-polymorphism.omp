; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 39 154) (om-make-point 183 22) (om-make-point 1362 900) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/seagull.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/men-of-goodwill.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/drumloop.aif\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "3-polymorphism" (quote ((om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 168 416) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-BAND" (quote sox-band) (quote ((om-load-inputfun (quote input-funbox) "Center-frequency (Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Filter-bandwidth" "BANDWIDTH" 100) (om-load-inputfunmenu1 (quote input-funmenu) "Bandpass, Bandreject, SPKit resonator (normal), SPKit resonator (noise)" "MODE" "bandpass" (list (list "bandpass" "bandpass") (list "bandreject" "bandreject") (list "SPKit resonator (normal)" "band") (list "SPKit resonator (noise)" "band -n"))))) (om-make-point 1229 415) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-STRETCH 2" (quote sox-stretch) (quote ((om-load-inputfun (quote input-funbox) "stretch-factor" "FACTOR" 2.0))) (om-make-point 991 422) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PHASER 2" (quote sox-phaser) (quote ((om-load-inputfun (quote input-funbox) "delay (in milliseconds)" "DELAY" 1) (om-load-inputfun (quote input-funbox) "decay (in % relative to input-gain)" "DECAY" 75) (om-load-inputfun (quote input-funbox) "modulation-frequency (in Hz)" "MODULATION-FREQUENCY" 0.2) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 969 508) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-OVERDRIVE 3" (quote sox-overdrive) (quote ((om-load-inputfun (quote input-funbox) "gain" "GAIN" 20) (om-load-inputfun (quote input-funbox) "colour" "COLOUR" 20) (om-load-inputkeyword (quote input-keyword) "connect sox-effects to append to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 983 602) nil nil nil nil 1) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 268 417) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 576 296) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 515 409) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 638 305) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 429 409) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 624 297) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment 5" (om-make-point 151 24) (quote "C) list of sox-effect chains") "" (om-make-point 1134 387) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 116 24) (quote "B) sox-effect chain") "" (om-make-point 981 388) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 116 24) (quote "A) single sox-effect") "" (om-make-point 835 389) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 26 75) (quote "+$+$+$+") "" (om-make-point 245 97) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 36 75) (quote "-->$-->$-->$-->") "" (om-make-point 387 98) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 715 77) (quote "output: atom$output: list (each item in sox-input processed with the same sox-effect)$output: list (as many outputs as items in sox-effect)$output: list (parallel processing: each item in sox-input is processed with the corresponding (nth) item in sox-effect") "" (om-make-point 433 96) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 114 75) (quote "sox-effect: atom$sox-effect: atom$sox-effect: list$sox-effect: list") "" (om-make-point 274 97) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 112 75) (quote "sox-input: atom$sox-input: list$sox-input: atom$sox-input: list") "" (om-make-point 135 97) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 109 599) (om-make-point 250 81) "|'/Users/Marlon_MBPro3/Research/OM-SoX/OM-SoX/executables/macos/sox'  '/Users/Marlon_MBPro3/Research/OM-SoX/OM-SoX/resources/sounds/cherokee.aif' -p " "\"|'/Users/Marlon_MBPro3/Research/OM-SoX/OM-SoX/executables/macos/sox'  '/Users/Marlon_MBPro3/Research/OM-SoX/OM-SoX/resources/sounds/cherokee.aif' -p \"" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 801 748) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 310 34) (quote "Possible types of arguments for sox-effect") "" (om-make-point 884 344) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 308 34) (quote "Possible types of arguments for sox-input") "" (om-make-point 206 331) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 650 30) (quote "The output of sox-process will depend on the input arguments supplied according to the following scheme:") "" (om-make-point 134 60) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 526 44) (quote "Polymorphism of sox-process and sox-analysis") "" (om-make-point 130 17) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 18.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST 6" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 438 466) nil nil nil nil 1) (om-load-editor-box1 "SOX-MIX 3" (quote sox-mix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "soundfiles" nil) (om-load-inputfun (quote input-funbox) "" "gains" nil))) (om-make-point 504 474) (om-make-point 76 74) (if (find-class (quote sox-mix) nil) (make-instance (quote sox-mix) :sound nil :gains nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 104 150))) nil nil nil nil) (om-load-boxcall (quote lispfun) "SOUND-PATH 3" (quote sound-path) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 250 469) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-TRANSPOSE" (quote sox-transpose) (quote ((om-load-inputfun (quote input-funbox) "transposition in midicents" "TRANSPOSITION" -500))) (om-make-point 1108 422) nil nil nil nil 1) (om-load-boxcomment "comment 9" (om-make-point 551 78) (quote "If there are more elements in a list for sox-input than sox-effects, there are 3 different modes:$$break (default): stops sox-process when no more sox-effects are available$repeat: repeats last sox-effect for remaining input-objects$cycle: loops the list of sox-effects until all input-objects have been processed") "" (om-make-point 136 187) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 606 655) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 570 325) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "SOUND-PATH" (quote sound-path) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 588 716) nil nil nil nil 1) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 472 606) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 623 285) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 474 770) nil nil nil nil 1) (om-load-editor-box1 "SOX-MERGE 2" (quote sox-merge) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "soundfiles" nil) (om-load-inputfun (quote input-funbox) "" "gains" nil))) (om-make-point 389 649) (om-make-point 87 78) (if (find-class (quote sox-merge) nil) (make-instance (quote sox-merge) :sound nil :gains nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 104 150))) nil nil nil nil) (om-load-editor-box1 "SOX-MIX 2" (quote sox-mix) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "soundfiles" nil) (om-load-inputfun (quote input-funbox) "" "gains" nil))) (om-make-point 512 660) (om-make-point 76 74) (if (find-class (quote sox-mix) nil) (make-instance (quote sox-mix) :sound nil :gains nil :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 150 100) (om-make-point 104 150))) nil nil nil nil) (om-load-boxcall (quote genfun) "SOX-STRETCH 4" (quote sox-stretch) (quote ((om-load-inputfun (quote input-funbox) "stretch-factor" "FACTOR" 0.5))) (om-make-point 856 420) nil nil nil nil 1) (om-load-boxcomment "comment 5" (om-make-point 200 24) (quote "1) sound-object or sound-path") "" (om-make-point 142 383) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 162 24) (quote "2) OM-SoX input class") "" (om-make-point 436 382) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 81 24) (quote "3) pipe input") "" (om-make-point 135 567) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 225 36) (quote "4) combined list:$OM-SoX-class, sound-object, pipe, filepath") "" (om-make-point 398 566) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-OVERDRIVE" (quote sox-overdrive) (quote ((om-load-inputfun (quote input-funbox) "gain" "GAIN" 5) (om-load-inputfun (quote input-funbox) "colour" "COLOUR" 50) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 1191 503) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 5" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1184 593) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-REVERSE" (quote sox-reverse) (quote ((om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 1112 503) nil nil nil nil 1))) (quote ((2 0 3 3 nil 0) (3 0 4 2 nil 0) (7 0 22 0 nil 0) (6 0 22 1 nil 0) (22 0 23 1 nil 0) (5 0 24 0 nil 0) (27 0 28 0 nil 0) (31 0 30 0 nil 0) (29 0 30 1 nil 0) (32 0 30 2 nil 0) (28 0 30 3 nil 0) (1 0 38 2 nil 0) (40 0 39 0 nil 0) (38 0 39 1 nil 0) (25 0 40 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 60 8)) (setf (pict-size newpict) (om-make-point 63 49)) newpict)) 6.070005))
