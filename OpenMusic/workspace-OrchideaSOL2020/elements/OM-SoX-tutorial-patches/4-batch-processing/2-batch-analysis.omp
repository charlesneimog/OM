; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 40 97) (om-make-point 365 138) (om-make-point 638 611) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "2-batch-analysis" (quote ((om-load-boxcall (quote genfun) "IN-FILES 2" (quote in-files) (quote ((om-load-inputkeyword (quote input-keyword) "" "type" (quote :type) nil nil))) (om-make-point 284 186) nil nil "x" nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 2" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "fundamental frequency" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 333 257) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 158 58) (quote "-> retrieve list of paths of .aif files contained in a folder") "" (om-make-point 338 169) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 158 46) (quote "-> use sox-process for rendering of new files") "" (om-make-point 251 503) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 160 74) (quote "-> use lambda function to create folder and write the value into the filenames") "" (om-make-point 346 397) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 132 30) (quote "-> run sox-analysis") "" (om-make-point 402 274) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 179 74) (quote "Example: $Tagging a collection of soundfiles with a time or frequency domain descriptor") "" (om-make-point 34 115) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 118 34) (quote "Batch Analysis") "" (om-make-point 128 19) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" "") (om-load-inputkeyword (quote input-keyword) "" "output" (quote :output) "realtime" (list (list "realtime" "realtime") (list "new file" nil) (list "replace file" "replace file") (list "pipe" "pipe"))))) (om-make-point 174 473) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 283 430) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 287 147) (om-make-point 44 30) "aif" "\"aif\"" nil) (om-load-boxcall (quote abstraction) "rename" (om-load-patch-abs1 "rename" (quote ((om-load-boxcall (quote lispfun) "MAKESTRING" (quote makestring) (quote ((om-load-inputfun (quote input-funbox) "ANYTHING" "ANYTHING" nil))) (om-make-point 600 268) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "NAMESTRING" (quote namestring) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 381 55) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 317 162) (om-make-point 35 30) "-" "\"-\"" nil) (om-load-boxin "analysis value" 1 (om-make-point 594 150) "" "analysis value" nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 196 167) (om-make-point 69 30) "tagged" "\"tagged\"" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 158 197) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote -)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 297 244) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PATHNAME-TYPE" (quote pathname-type) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 417 136) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 295 402) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "OM-MAKE-PATHNAME" (quote om-make-pathname) (quote ((om-load-inputkeyword (quote input-keyword) "" "directory" (quote :directory) nil nil) (om-load-inputkeyword (quote input-keyword) "" "name" (quote :name) nil nil) (om-load-inputkeyword (quote input-keyword) "" "type" (quote :type) nil nil))) (om-make-point 257 343) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PATHNAME-NAME" (quote pathname-name) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 260 116) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "PATHNAME-DIRECTORY" (quote pathname-directory) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 121 116) nil nil nil nil 1) (om-load-boxin "filepath" 0 (om-make-point 269 23) "" "filepath" nil nil))) (quote ((3 0 0 0 nil 0) (12 0 1 0 nil 0) (11 0 5 0 nil 0) (4 0 5 1 nil 0) (10 0 6 0 nil 0) (2 0 6 1 nil 0) (0 0 6 2 nil 0) (1 0 7 0 nil 0) (9 0 8 0 nil 0) (5 0 9 0 nil 0) (6 0 9 1 nil 0) (7 0 9 2 nil 0) (1 0 10 0 nil 0) (1 0 11 0 nil 0))) 6.070005 nil "" (om-make-point 178 422) (om-make-point 943 532)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 230 364) nil nil "l" "rename"))) (quote ((10 0 0 0 nil 0) (0 0 1 0 nil 0) (0 0 8 0 nil 0) (9 0 8 2 nil 0) (11 0 9 0 nil 0) (0 0 9 1 nil 0) (1 0 9 2 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 58 10)) (setf (pict-size newpict) (om-make-point 63 49)) newpict)) 6.070005))
