; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 10 130) (om-make-point 0 102) (om-make-point 1071 745) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/Callas-MicroPatterns.aif\"") (list (quote :abstraction) "#P\"../support/spectro-pipe-input.omp\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "5-sox-spectrogram" (quote ((om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 268 452) (om-make-point 432 246) (make-instance (quote picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote patch-box) "spectro-pipe-input" (quote ("elements" "om-sox-tutorials" "support" "spectro-pipe-input")) (quote nil) (om-make-point 788 637) nil nil nil "spectro-pipe-input" 0) (om-load-boxcomment "comment" (om-make-point 441 34) (quote "Use \"sox-spectrogram\" to render a spectrogram as an image") "" (om-make-point 126 19) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 21 105) (quote "|$|$|$|$|$") "" (om-make-point 797 256) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 85 30) (quote "FFT params") "" (om-make-point 645 236) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 105 30) (quote "COLOR Params") "" (om-make-point 498 237) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 21 105) (quote "|$|$|$|$|$") "" (om-make-point 452 268) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 47 45) (quote "color$ type") "" (om-make-point 531 303) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 55 30) (quote "legend") "" (om-make-point 288 292) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 414 219) (om-make-point 55 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 35 23) "-5" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 347 219) (om-make-point 55 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 35 23) "-55" :font (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 635 316) (om-make-point 42 30) 8000 "8000" nil) (om-load-editor-box1 "SLIDER 2" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :vertical) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list -60 0)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "initial-value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 353 107) (om-make-point 34 105) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 24 72) "untitled" :direction :vertical :range (quote (-60 0)) :increment 1 :value -55))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "SLIDER" (quote slider) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "vertical or horizontal" "direction" (quote :vertical) (list (list "horizontal" (quote :horizontal)) (list "vertical" (quote :vertical)))) (om-load-inputfun (quote input-funbox) "min and max values" "range" (list -60 0)) (om-load-inputfun (quote input-funbox) "step" "increment" 1) (om-load-inputfun (quote input-funbox) "initial-value" "value" 60) (om-load-inputfun (quote input-funbox) "a patch in mode lambda" "action" nil))) (om-make-point 420 110) (om-make-point 34 105) (let ((rep (om-make-dialog-item (quote slider) (om-make-point 1 1) (om-make-point 24 72) "untitled" :direction :vertical :range (quote (-60 0)) :increment 1 :value -5))) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 422 299) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 344 319) (om-make-point 70 30) (list 320 240) "(320 240)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 775 212) (om-make-point 120 30) "myspectrogram" "\"myspectrogram\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "") (om-load-inputkeyword (quote input-keyword) "directories" "subdirs" (quote :subdirs) nil nil))) (om-make-point 819 286) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 861 251) (om-make-point 127 30) "sox-spectrograms" "\"sox-spectrograms\"" nil) (om-load-boxcomment "comment 11" (om-make-point 69 30) (quote "size (X*Y)") "" (om-make-point 341 292) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 78 45) (quote "low$thresh (dB)") "" (om-make-point 322 64) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 78 45) (quote "high$thresh (dB)") "" (om-make-point 419 64) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 44 45) (quote "color$depth") "" (om-make-point 471 267) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 474 313) (om-make-point 27 30) 4 "4" nil) (om-load-boxcomment "comment 7" (om-make-point 49 30) (quote "mode") "" (om-make-point 575 307) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 6" (om-make-point 15 135) (quote "|$|$|$|$|$|$|$|") "" (om-make-point 617 226) nil (om-make-color 1.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 55 45) (quote "window type") "" (om-make-point 690 305) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 4" (om-make-point 60 45) (quote "window-$size") "" (om-make-point 742 305) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "Callas-MicroPatterns.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 60 150) (om-make-point 210 103) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "Callas-MicroPatterns" :type "aif") 1 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Callas-MicroPatterns.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 602 322) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-SPECTROGRAM" (quote sox-spectrogram) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "RANGE" nil) (om-load-inputfun (quote input-funbox) "no documentation" "CHANNEL" nil) (om-load-inputkeyword (quote input-keyword) "spectrogram w/ legend" "legend" (quote :legend) (quote t) nil) (om-load-inputkeyword (quote input-keyword) "size in pixels X * Y" "size" (quote :size) nil nil) (om-load-inputkeyword (quote input-keyword) "choose white / blackpoint for spectrogram (list in db)" "contrast" (quote :contrast) nil nil) (om-load-inputkeyword (quote input-keyword) "n/a" "color-depth" (quote :color-depth) nil nil) (om-load-inputkeyword (quote input-keyword) "color mode" "color-type" (quote :color-type) nil (list (list "1" 1) (list "2" 2) (list "3" 3) (list "4" 4) (list "5" 5) (list "6" 6))) (om-load-inputkeyword (quote input-keyword) "specify nyquist frequency" "mode" (quote :mode) nil (list (list "positiv" "positiv") (list "negativ" "negativ") (list "monochrome" "monochrome") (list "negativ-monochrome" "negativ-monochrome"))) (om-load-inputkeyword (quote input-keyword) "choose windowing function for STFTs" "nyquist" (quote :nyquist) nil nil) (om-load-inputkeyword (quote input-keyword) "choose windowsize for STFTs" "window" (quote :window) nil (list (list "Hann" "Hann") (list "Hamming" "Hamming") (list "Bartlett" "Bartlett") (list "Rectangular" "Rectangular") (list "Kaiser" "Kaiser"))) (om-load-inputkeyword (quote input-keyword) "outpath" "windowsize" (quote :windowsize) nil (list (list "129" 129) (list "257" 257) (list "513" 513) (list "1025" 1025) (list "2049" 2049))) (om-load-inputkeyword (quote input-keyword) "" "outpath" (quote :outpath) nil nil))) (om-make-point 104 354) (om-make-point 765 59) nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 57 30) (quote "channel") "" (om-make-point 231 294) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 259 317) (om-make-point 21 30) 1 "1" nil) (om-load-boxcomment "comment 2" (om-make-point 54 30) (quote "nyquist") "" (om-make-point 628 288) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (quote ((29 0 0 0 nil 0) (13 3 9 0 nil 0) (12 3 10 0 nil 0) (10 0 14 0 nil 0) (9 0 14 1 nil 0) (16 0 17 0 nil 0) (18 0 17 1 nil 0) (28 0 29 0 nil 0) (28 2 29 1 nil 0) (11 0 29 9 nil 0) (17 0 29 12 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 61 11)) (setf (pict-size newpict) (om-make-point 63 48)) newpict)) 6.070005))
