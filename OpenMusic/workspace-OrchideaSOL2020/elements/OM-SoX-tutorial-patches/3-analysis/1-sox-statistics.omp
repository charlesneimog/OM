; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 21 10) (om-make-point 411 29) (om-make-point 1269 917) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/altosax-multi-1.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/seagull.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/drumloop.aif\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\"" "#P\"../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/sax-tenor-multi.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "1-sox-statistics" (quote ((om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 843 651) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 740 269) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "peak level" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))) (om-load-inputkeyword (quote input-keyword) "Specify region (start and endpoint in seconds) of input audio to be analyzed [list]" "clipping" (quote :clipping) nil nil) (om-load-inputkeyword (quote input-keyword) "Channel of input audio on which to run the analysis [string]" "channel" (quote :channel) 1 nil))) (om-make-point 399 211) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "mean norm amplitude" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 579 634) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 137 608) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-ANALYSIS 5" (quote sox-analysis) (quote ((om-load-inputfun (quote input-funbox) "Audio input to be analyzed [sound, path, string/pipe, sox-input]" "SOX-INPUT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Sox-statistic to be analyzed for [string]" "SOX-STATISTIC" "peak level" (list (list "filetype" "filetype") (list "samplerate" "samplerate") (list "channels" "channels") (list "comment" "comment") (list "samples" "samples") (list "duration" "duration") (list "scale-factor" "scale-factor") (list "peak amplitude" "peak amplitude") (list "max positive amplitude" "max positive amplitude") (list "max negative amplitude" "max negative amplitude") (list "mid amplitude" "mid amplitude") (list "mean amplitude" "mean amplitude") (list "mean norm amplitude" "mean norm amplitude") (list "rms amplitude" "rms amplitude") (list "max delta amplitude" "max delta amplitude") (list "min delta amplitude" "min delta amplitude") (list "mean delta amplitude" "mean delta amplitude") (list "rms delta amplitude" "rms delta amplitude") (list "dc offset" "dc offset") (list "headroom" "headroom") (list "peak level" "peak level") (list "rms level" "rms level") (list "rms peak level" "rms peak level") (list "rms trough level" "rms trough level") (list "fundamental frequency" "fundamental frequency") (list "crest factor" "crest factor") (list "flat factor" "flat factor") (list "peak count" "peak count") (list "bit depth ratio" "bit depth ratio"))))) (om-make-point 90 206) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 273 30) (quote "-> alternatively, specify statistic as a string") "" (om-make-point 40 507) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 214 567) (om-make-point 159 30) (list "duration" "headroom") "(\"duration\" \"headroom\")" nil) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 124 692) (om-make-point 102 62) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 90 33) "untitled"))) (om-set-dialog-item-text rep "
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 212 30) (quote "returns a list containing 2 values") "" (om-make-point 91 763) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "altosax-multi-1.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 103 541) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "altosax-multi-1" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "altosax-multi-1.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 566 283) (om-make-point 414 313) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 148 72) (quote "-> you can analyze a specific channel and a smaller region of the soundfile using the$keywords") "" (om-make-point 498 208) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 401 291) (om-make-point 103 63) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 91 34) "untitled"))) (om-set-dialog-item-text rep "
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 480 181) (om-make-point 27 30) 2 "2" nil) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 389 150) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote (1.657 2.683)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 556 287) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 885 525) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 666 332) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 797 525) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 598 315) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 858 593) nil nil nil nil 1) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 573 522) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 575 300) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 485 522) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 568 301) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 92 30) (quote "returns a list") "" (om-make-point 859 360) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "sax-tenor-multi.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 748 203) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "sax-tenor-multi" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "sax-tenor-multi.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 539 281) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "seagull.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 98 149) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "seagull" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "seagull.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 553 298) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 317 75) (quote "Note: sox-analysis writes temporary textfiles $from which the data is read into OM. $Use OM's Audio Preferences to specify $whether these temporary files should be removed.") "" (om-make-point 59 799) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 107 30) (quote "returns a value") "" (om-make-point 181 314) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 176 45) (quote "analysis of multiple sounds$for multiple statistics") "" (om-make-point 799 483) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 277 45) (quote "returns a list of lists $(each containg the values for a given input)") "" (om-make-point 866 806) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 159 46) (quote "returns a value per soundfile") "" (om-make-point 543 792) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 224 30) (quote "analysis of multiple sounds at once") "" (om-make-point 465 487) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 167 30) (quote "single analysis parameter") "" (om-make-point 75 115) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 257 60) (quote "It is possible to daisy-chain sox-statistics$ for analysis of multiple parameters. $Note, this will return a list of results.") "" (om-make-point 693 124) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 159 58) (quote "-> choose statistic from the menu on the second inlet") "" (om-make-point 158 213) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 235 34) (quote "General usage of \"sox-analysis\"") "" (om-make-point 133 20) nil (om-make-color 0.0 0.19194556 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-DURATION 2" (quote sox-duration) (quote ((om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 981 544) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-DURATION" (quote sox-duration) (quote ((om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 879 257) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-DC-OFFSET 2" (quote sox-dc-offset) (quote ((om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 1081 560) nil nil nil nil 1) (om-load-editor-box1 "TEXT-VIEW 4" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 872 727) (om-make-point 194 68) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 182 39) "untitled"))) (om-set-dialog-item-text rep "
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-VIEW 3" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 538 718) (om-make-point 158 62) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 146 33) "untitled"))) (om-set-dialog-item-text rep "
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-VIEW 2" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 698 350) (om-make-point 159 64) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 147 35) "untitled"))) (om-set-dialog-item-text rep "
") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-editor-box1 "TEXT-VIEW" (quote text-view) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 77 297) (om-make-point 102 62) (let ((rep (om-make-dialog-item (quote text-view) (om-make-point 1 1) (om-make-point 90 33) "untitled"))) (om-set-dialog-item-text rep "") rep) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-SAMPLES 2" (quote sox-samples) (quote nil) (om-make-point 1017 455) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 546 590) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-SAMPLES" (quote sox-samples) (quote nil) (om-make-point 881 180) nil nil nil nil 1))) (quote ((17 0 0 0 nil 0) (35 0 0 1 nil 0) (21 0 1 0 nil 0) (34 0 1 1 nil 0) (14 0 2 0 nil 0) (14 2 2 2 nil 0) (13 0 2 3 nil 0) (41 0 3 0 nil 0) (10 0 4 0 nil 0) (7 0 4 1 nil 0) (22 0 5 0 nil 0) (4 0 8 0 nil 0) (2 0 12 0 nil 0) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (40 0 33 0 nil 0) (42 0 34 0 nil 0) (33 0 35 0 nil 0) (0 0 36 0 nil 0) (3 0 37 0 nil 0) (1 0 38 0 nil 0) (5 0 39 0 nil 0) (19 0 41 0 nil 0) (18 0 41 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 62 8)) (setf (pict-size newpict) (om-make-point 63 49)) newpict)) 6.070005))
