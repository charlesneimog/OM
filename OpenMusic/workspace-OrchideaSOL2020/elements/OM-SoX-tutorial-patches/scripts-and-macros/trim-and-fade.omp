; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 35 25) (om-make-point 4 305) (om-make-point 347 389) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "trim-and-fade" (quote ((om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 140 185) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "fadeout" (om-load-patch-abs1 "fadeout" (quote ((om-load-boxcall (quote lispfun) "SOX-SOUND-DURATION" (quote sox-sound-duration) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 121 102) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 319 163) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0.5))) (om-make-point 305 193) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 113 187) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 265 153) (om-make-point 25 30) 0.4 ".4" nil) (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0.8))) (om-make-point 248 187) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 93 354) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 165 31) "" nil nil nil) (om-load-boxcall (quote genfun) "SOX-FADE" (quote sox-fade) (quote ((om-load-inputfun (quote input-funbox) "fadein-length (in secs)" "SOUNDFILE" 0) (om-load-inputfun (quote input-funbox) "fadeout-length (in secs)" "FADEOUT-LENGTH" 0) (om-load-inputfun (quote input-funbox) "stoptime (in secs, if 0 = duration of soundfile)" "STOPTIME" 0) (om-load-inputkeyword (quote input-keyword) "fade-type (logarithmic/parabola/quarter-sine/half-sine/linear)" "type" (quote :type) "l" (list (list "logarithmic" "l") (list "parabola" "p") (list "quarter sinewave" "q") (list "half sinewave" "h") (list "linear" "t"))))) (om-make-point 88 266) nil nil nil nil 1))) (quote ((7 0 0 0 nil 0) (5 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 6 0 nil 0) (2 0 8 1 nil 0) (3 0 8 2 nil 0))) 6.070004 nil "" (om-make-point 4 407) (om-make-point 432 462)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 72 109) nil nil "l" "fadeout") (om-load-boxout "output" 0 (om-make-point 73 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "soundfiles" 0 (om-make-point 174 67) "" "soundfiles" nil nil))) (quote ((1 0 0 0 nil 0) (3 0 0 1 nil 0) (0 0 2 0 nil 0))) nil 6.070004))
