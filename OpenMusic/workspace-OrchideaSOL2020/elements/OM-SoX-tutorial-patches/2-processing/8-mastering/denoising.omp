; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 32 20) (om-make-point 445 52) (om-make-point 829 548) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/men-of-goodwill.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "denoising" (quote ((om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 104 152) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote (0.027 0.852)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 576 296) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 433 34) (quote "Use \"sox-noiseprofile\" and \"sox-denoise\" for noise reduction") "" (om-make-point 127 22) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 590 78) (quote "Reduce noise in the audio signal by profiling and filtering. $This effect can be used for removing consistent background noise such as hiss or hum. $To use it, first generate a noiseprofile with 'sox-noiseprofile' on a section of audio that ideally would $contain silence but in fact contains noise. Then provide this noiseprofile as argument to 'sox-denoise'. ") "" (om-make-point 201 105) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 322 30) (quote "2. use sox-denoise with noiseprofile as noise filter.") "" (om-make-point 311 317) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 277 30) (quote "1. create a noiseprofile with 'sox-noiseprofile'") "" (om-make-point 336 246) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 96 369) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-NOISEPROFILE" (quote sox-noiseprofile) (quote ((om-load-inputfun (quote input-funbox) "a soundfile provided as sound-object, pathname, or string" "SND" nil) (om-load-inputfun (quote input-funbox) "specify section of audio to be used for noiseprint" "RANGE" nil))) (om-make-point 237 211) nil nil nil nil 1) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 112 460) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 554 287) (om-make-point 4 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-DENOISE" (quote sox-denoise) (quote ((om-load-inputfun (quote input-funbox) "amount of noise-reduction (1=max. 0=no red.)" "AMOUNT" nil) (om-load-inputfun (quote input-funbox) "supply noiseprint file (generated with sox-noiseprint)" "NOISEPROFILE" nil))) (om-make-point 233 289) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 167 254) (om-make-point 45 30) 0.25 "0.25" nil))) (quote ((0 0 5 0 nil 0) (8 0 5 1 nil 0) (0 0 6 0 nil 0) (0 2 6 1 nil 0) (5 0 7 0 nil 0) (9 0 8 0 nil 0) (6 0 8 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 59 10)) (setf (pict-size newpict) (om-make-point 63 53)) newpict)) 6.070005))
