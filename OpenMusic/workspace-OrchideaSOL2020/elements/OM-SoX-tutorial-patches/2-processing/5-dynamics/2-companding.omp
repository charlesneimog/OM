; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 159 27) (om-make-point 522 268) (om-make-point 1158 670) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/drumloop.aif\"" "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "2-companding" (quote ((om-load-boxcall (quote genfun) "SOX-MULTI-COMPAND" (quote sox-multi-compand) (quote ((om-load-inputfun (quote input-funbox) "attack-time (secs)" "ATTACKS" (list 0.005 0.003 6.25E-4 1.0E-4 0)) (om-load-inputfun (quote input-funbox) "release-time (secs)" "RELEASES" (list 0.8 6 -5 -90 0.3)) (om-load-inputfun (quote input-funbox) "crossover frequencies (Hz)" "CROSSOVER-FREQS" (list 100 400 1600 6400 nil)) (om-load-inputkeyword (quote input-keyword) "makeup-gain (in dB)" "makeup-gain" (quote :makeup-gain) (list -12 -12 -12 -12 -12) nil) (om-load-inputkeyword (quote input-keyword) "transferfunction describing changes from input to output levels over dynamic range of audio (bpf)" "transferfunction" (quote :transferfunction) nil nil))) (om-make-point 752 396) nil nil nil nil 1) (om-load-editor-box1 "drumloop.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 633 409) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "drumloop" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "drumloop.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 540 283) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 127 281) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 535 293) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 678 243) (om-make-point 192 30) (list 0.005 0.003 0.001 0.02 0.01) "(0.005 0.003 0.001 0.02 0.01)" nil) (om-load-boxcomment "comment 4" (om-make-point 589 34) (quote "Use \"sox-compand\" / \"sox-multicompand\" for single and multi-band companding") "" (om-make-point 128 16) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 421 30) (quote "Use \"sox-compand\" for single-band compression/expansion/limiting.") "" (om-make-point 88 150) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "BPF 6" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 385 211) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70 -30 -20 -12 0)) (quote (-60 -57 -50 -9 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 4 40) (om-make-point 1167 502))) t nil nil nil) (om-load-boxcomment "comment 11" (om-make-point 151 24) (quote "NB: can be non-monotonic") "" (om-make-point 932 217) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 721 555) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 552 290) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 194 437) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 564 299) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment 12" (om-make-point 67 36) (quote "crossover$frequencies") "" (om-make-point 677 317) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 11" (om-make-point 94 24) (quote "Transferfunctions") "" (om-make-point 954 190) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 10" (om-make-point 53 24) (quote "makeup") "" (om-make-point 726 360) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 9" (om-make-point 46 24) (quote "release") "" (om-make-point 655 283) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 8" (om-make-point 41 24) (quote "attack") "" (om-make-point 635 243) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 89 24) (quote "transferfunction") "" (om-make-point 381 189) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 453 45) (quote "Use \"sox-multicompand\" for multi-band compression/expansion/limiting. $Frequency bands are separated using Linkwitz/Riley crossover filters.") "" (om-make-point 614 126) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-COMPAND" (quote sox-compand) (quote ((om-load-inputfun (quote input-funbox) "gain" "ATTACK" 0.3) (om-load-inputfun (quote input-funbox) "colour" "RELEASE" 0.8) (om-load-inputkeyword (quote input-keyword) "" "makeup-gain" (quote :makeup-gain) -5 nil) (om-load-inputkeyword (quote input-keyword) "" "transferfunction" (quote :transferfunction) nil nil))) (om-make-point 269 271) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 216 229) (om-make-point 39 30) 0.001 ".001" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 265 212) (om-make-point 32 30) 0.1 "0.1" nil) (om-load-boxcomment "comment 3" (om-make-point 41 24) (quote "attack") "" (om-make-point 211 207) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 46 24) (quote "release") "" (om-make-point 256 190) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 309 221) (om-make-point 26 30) -9 "-9" nil) (om-load-boxcomment "comment" (om-make-point 53 24) (quote "makeup") "" (om-make-point 307 198) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 178 347) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 704 283) (om-make-point 179 30) (list 0.1 0.05 0.012 0.025 0.025) "(0.1 0.05 0.012 0.025 0.025)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 747 320) (om-make-point 134 30) (list 100 400 1600 6400) "(100 400 1600 6400)" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 705 474) nil nil nil nil 1) (om-load-editor-box1 "BPF 5" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 1075 237) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70 -60 -20 0)) (quote (-60 -20 -37 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 464 447))) t nil nil nil) (om-load-editor-box1 "BPF 4" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 942 237) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70.0 -24.73918 -17.547837 0.0)) (quote (-60.0 -41.564103 -5.837607 0.0)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 464 447))) t nil nil nil) (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 1031 237) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70.0 -59.123005 -24.73918 0.0)) (quote (-60.0 -29.589745 -11.478633 0.0)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 464 447))) t nil nil nil) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 899 237) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70.0 -65.08656 -27.720957 -13.864465 0.0)) (quote (-60.0 -40.871796 -33.102566 -3.9572654 0.0)) (quote bpf) 8))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 464 447))) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 969 346) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 778 360) (om-make-point 113 30) (list -3 -6 -6 -12 -3) "(-3 -6 -6 -12 -3)" nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "X-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "Y-POINTS" (list -48 0)) (om-load-inputfun (quote input-funbox) "precision (integer)" "DECIMALS" 0))) (om-make-point 987 237) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (-70 -20 -12 0)) (quote (-60 -50 -9 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1167 502))) t nil nil nil))) (quote ((3 0 0 0 nil 0) (25 0 0 1 nil 0) (26 0 0 2 nil 0) (33 0 0 3 nil 0) (32 0 0 4 nil 0) (27 0 8 0 nil 0) (24 0 9 0 nil 0) (18 0 17 0 nil 0) (19 0 17 1 nil 0) (22 0 17 2 nil 0) (6 0 17 3 nil 0) (2 0 24 0 nil 0) (17 0 24 1 nil 0) (1 0 27 0 nil 0) (0 0 27 1 nil 0) (31 0 32 0 nil 0) (29 0 32 1 nil 0) (34 0 32 2 nil 0) (30 0 32 3 nil 0) (28 0 32 4 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 60 9)) (setf (pict-size newpict) (om-make-point 63 55)) newpict)) 6.070005))
