; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 232 41) (om-make-point 526 22) (om-make-point 752 897) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/amen-break.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "1-IIR-filters" (quote ((om-load-boxcomment "comment" (om-make-point 548 34) (quote "Filter audio using highpass/lowpass/bandpass/bandreject/allpass IIR filters.") "" (om-make-point 134 23) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-ALLPASS" (quote sox-allpass) (quote ((om-load-inputfun (quote input-funbox) "Frequency (Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Width (default unit: Hz)" "WIDTH" 100))) (om-make-point 577 639) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-BAND 2" (quote sox-band) (quote ((om-load-inputfun (quote input-funbox) "Center-frequency (Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Filter-bandwidth" "BANDWIDTH" 100) (om-load-inputfunmenu1 (quote input-funmenu) "Bandpass, Bandreject, SPKit resonator (normal), SPKit resonator (noise)" "MODE" "band -n" (list (list "bandpass" "bandpass") (list "bandreject" "bandreject") (list "SPKit resonator (normal)" "band") (list "SPKit resonator (noise)" "band -n"))) (om-load-inputkeyword (quote input-keyword) "Select unit for bandwidth value (Hz/kHz/Octaves/Q-factor). Defaults to Hz." "unit" (quote :unit) "Hz" (list (list "Hz" "Hz") (list "kHz" "kHz") (list "Octaves" "Octaves") (list "Q-factor" "Q-factor"))))) (om-make-point 249 635) nil nil nil nil 1) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 429 640) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 552 297) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 98 637) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 546 273) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 428 285) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 570 305) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "amen-break.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 88 288) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "amen-break" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "amen-break.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 574 316) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-LOWPASS" (quote sox-lowpass) (quote ((om-load-inputfun (quote input-funbox) "Cutoff-frequency (Hz)" "CUTOFF-FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Filter width (applies only to two-pole filters). Default unit: Hz" "WIDTH" 100) (om-load-inputfunmenu1 (quote input-funmenu) "One- or Two-pole filtering" "POLES" "twopole" (list (list "onepole" "onepole") (list "twopole" "twopole"))) (om-load-inputkeyword (quote input-keyword) "Select unit for bandwidth value (Hz/kHz/Octaves/Q-factor). Defaults to Hz." "unit" (quote :unit) "Hz" (list (list "Hz" "Hz") (list "kHz" "kHz") (list "Octaves" "Octaves") (list "Q-factor" "Q-factor"))))) (om-make-point 564 278) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-HIGHPASS 3" (quote sox-highpass) (quote ((om-load-inputfun (quote input-funbox) "Cutoff-frequency" "CUTOFF-FREQUENCY" 10) (om-load-inputfun (quote input-funbox) "Filter width (applies only to two-pole filters). Default unit: Hz" "WIDTH" 100) (om-load-inputfunmenu1 (quote input-funmenu) "One- or Two-pole filtering" "POLES" "twopole" (list (list "onepole" "onepole") (list "twopole" "twopole"))) (om-load-inputkeyword (quote input-keyword) "Select unit for bandwidth value (Hz/kHz/Octaves/Q-factor). Defaults to Hz." "unit" (quote :unit) "Q-factor" (list (list "Hz" "Hz") (list "kHz" "kHz") (list "Octaves" "Octaves") (list "Q-factor" "Q-factor"))))) (om-make-point 222 271) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 247 60) (quote "-> All sox IIR filters support $different units for specifying filter-widths.$Shift-click on the keyword inlet for \"units\" $to get a choice of Hz, kHz, Octaves, Q-factor") "" (om-make-point 137 126) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-HIGHPASS 2" (quote sox-highpass) (quote ((om-load-inputfun (quote input-funbox) "Cutoff-frequency" "CUTOFF-FREQUENCY" 10) (om-load-inputfun (quote input-funbox) "Filter width (applies only to two-pole filters). Default unit: Hz" "WIDTH" 100) (om-load-inputfunmenu1 (quote input-funmenu) "One- or Two-pole filtering" "POLES" "onepole" (list (list "onepole" "onepole") (list "twopole" "twopole"))) (om-load-inputkeyword (quote input-keyword) "Select unit for bandwidth value (Hz/kHz/Octaves/Q-factor). Defaults to Hz." "unit" (quote :unit) "Hz" (list (list "Hz" "Hz") (list "kHz" "kHz") (list "Octaves" "Octaves") (list "Q-factor" "Q-factor"))))) (om-make-point 57 129) nil nil nil nil 1) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 517 794) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 543 285) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 194 792) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 548 283) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 508 439) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 555 288) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 200 441) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 544 284) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 244 229) (om-make-point 27 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 258 597) (om-make-point 34 30) 30 "30" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 207 597) (om-make-point 48 30) 1500 "1500" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 4" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 178 713) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 573 600) (om-make-point 42 30) 5000 "5000" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 3" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 501 716) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 617 600) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 184 358) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 191 229) (om-make-point 48 30) 4000 "4000" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 492 356) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 536 239) (om-make-point 41 30) 600 "600" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 581 239) (om-make-point 41 30) 150 "150" nil))) (quote ((19 0 1 0 nil 0) (21 0 1 1 nil 0) (17 0 2 0 nil 0) (16 0 2 1 nil 0) (25 0 7 0 nil 0) (26 0 7 1 nil 0) (23 0 8 0 nil 0) (15 0 8 1 nil 0) (20 0 11 0 nil 0) (18 0 12 0 nil 0) (24 0 13 0 nil 0) (22 0 14 0 nil 0) (4 0 18 0 nil 0) (2 0 18 1 nil 0) (3 0 20 0 nil 0) (1 0 20 1 nil 0) (6 0 22 0 nil 0) (8 0 22 1 nil 0) (5 0 24 0 nil 0) (7 0 24 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 64 8)) (setf (pict-size newpict) (om-make-point 63 53)) newpict)) 6.070005))
