; OM File Header - Saved 2021/07/30 13:49:34
; (6.070005 :patc (om-make-point 40 28) (om-make-point 491 22) (om-make-point 999 526) "" 183 0 nil "2021/07/30 13:49:34")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/viola-ricochet.wav\"" "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/men-of-goodwill.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "1-delays" (quote ((om-load-boxcomment "comment" (om-make-point 227 45) (quote "\"sox-tapdelay\" adds a sequence $of echoes (delay-taps) to the audio.") "" (om-make-point 529 123) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 159 393) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 584 352) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 604 422) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 544 284) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 199 36) (quote "list of delaytimes (sec) $to be applied to successive channels") "" (om-make-point 277 172) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 330 30) (quote "\"sox-delay\" delays one or more input audio channels") "" (om-make-point 70 129) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 417 34) (quote "Delay an audio signal using \"sox-delay\" or \"sox-tapdelay\"") "" (om-make-point 134 19) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 121 52) (quote "-you can use bpfs $to graphically $specify delays") "" (om-make-point 846 136) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 3)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list -6 -30)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 10))) (om-make-point 798 133) (om-make-point 40 60) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4470968 0.7180339 0.98903227 1.3430834 1.8512905 3.0)) (quote (-6.8849163 -14.39409 -19.548604 -14.865993 -26.33296 -29.999999)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 573 129) (om-make-point 335 275))) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-TAPDELAY 4" (quote sox-tapdelay) (quote ((om-load-inputfun (quote input-funbox) "list of delaytimes (sec)" "TIMES" (list 0.1 0.17 0.21)) (om-load-inputfun (quote input-funbox) "list of levels for each tap (dB)" "LEVELS" (list -6 -6 -6)) (om-load-inputfunmenu1 (quote input-funmenu) "Parallel or serial structure for delay lines. The latter means accumulating taps." "MODE" "serial" (list (list "parallel" "parallel") (list "serial" "serial"))))) (om-make-point 792 229) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-DELAY" (quote sox-delay) (quote ((om-load-inputfun (quote input-funbox) "list of delaytimes (sec) to be applied to successive channels" "TIMES" (list 0.5 0.7 1.1)))) (om-make-point 201 218) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-TAPDELAY 2" (quote sox-tapdelay) (quote ((om-load-inputfun (quote input-funbox) "list of delaytimes (sec)" "TIMES" (list 0.1 0.17 0.21)) (om-load-inputfun (quote input-funbox) "list of levels per tap (dB)" "LEVELS" (list -6 -6 -6)) (om-load-inputfunmenu1 (quote input-funmenu) "Parallel or serial structure for delay lines. The latter means accumulating taps." "MODE" "serial" (list (list "parallel" "parallel") (list "serial" "serial"))))) (om-make-point 687 232) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 200 175) (om-make-point 70 30) (list 0.2 0.3) "(0.2 0.3)" nil) (om-load-editor-box1 "viola-ricochet.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 80 222) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "viola-ricochet" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "viola-ricochet.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 552 291) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 560 244) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 589 282) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 3" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "SND" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 143 298) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 681 191) (om-make-point 95 30) (list -18 -21 -24) "(-18 -21 -24)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 578 191) (om-make-point 99 30) (list 0.1 0.25 0.33) "(0.1 0.25 .33)" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "SND" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" nil))) (om-make-point 588 328) nil nil nil nil 1))) (quote ((14 0 1 0 nil 0) (17 0 2 0 nil 0) (7 1 8 0 nil 0) (7 2 8 1 nil 0) (11 0 9 0 nil 0) (16 0 10 0 nil 0) (15 0 10 1 nil 0) (12 0 14 0 nil 0) (9 0 14 1 nil 0) (13 0 17 0 nil 0) (10 0 17 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 63 8)) (setf (pict-size newpict) (om-make-point 62 54)) newpict)) 6.070005))
