; OM File Header - Saved 2021/08/02 18:09:21
; (6.120003 :patc (om-make-point 280 110) (om-make-point 662 77) (om-make-point 640 757) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :instance) "#P\"../globals/myvariable.omi\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "example 15 - not working" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 161 116) (quote "This patch will give an error message if less than three values are found (i.e. if 7100 is picked before the 3rd iteration).") nil (om-make-point 438 185) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 278 676) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 519 452) (om-make-point 48 30) 5900 "5900" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 244 469) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 369 75) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 261 75) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 315 75) (om-make-point 48 30) 7100 "7100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 280 617) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT 2" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" (quote value)) (om-load-inputfun (quote input-funbox) "value" "VALUE" 59))) (om-make-point 465 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "myvariable 2" (get-inst-from-globals "myvariable") (quote nil) (om-make-point 445 404) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "myvariable" (get-inst-from-globals "myvariable") (quote nil) (om-make-point 73 65) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" (quote value)))) (om-make-point 88 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" (quote value)) (om-load-inputfun (quote input-funbox) "value" "VALUE" 45))) (om-make-point 181 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "myvariable" (get-inst-from-globals "myvariable") (quote nil) (om-make-point 161 323) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 307 363) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 4))) (om-make-point 185 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 60 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 80 80) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 29 92) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 48 287) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (0 0 3 0 nil 0))) 6.120003 nil "" (om-make-point 283 359) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 92 198) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE-IF" (quote remove-if) (quote ((om-load-inputfun (quote input-funbox) "PREDICATE" "PREDICATE" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 294 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 288 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 6000) (om-load-inputfun (quote input-funbox) "end " "END" 71) (om-load-inputfun (quote input-funbox) "step" "STEP" 100))) (om-make-point 305 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (8 0 7 0 nil 0) (15 0 7 1 nil 0) (9 0 8 0 nil 0) (2 0 8 2 nil 0) (10 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 12 2 nil 0) (17 0 14 0 nil 0) (12 0 15 0 nil 0) (3 0 15 1 nil 0) (11 0 16 0 nil 0) (16 0 17 0 nil 0) (18 0 17 1 nil 0) (19 0 18 0 nil 0) (5 0 19 0 nil 0) (6 0 19 1 nil 0) (4 0 19 2 nil 0))) nil 6.120003))
