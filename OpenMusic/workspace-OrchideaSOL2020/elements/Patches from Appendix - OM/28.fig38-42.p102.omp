; OM File Header - Saved 2021/08/02 18:09:21
; (6.120003 :patc (om-make-point 928 210) (om-make-point 50 50) (om-make-point 505 434) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote ("OMChaos")))(setf *om-current-persistent* (om-load-patch1 "chaos" (quote ((let ((box (om-load-boxcall (quote genfun) "KAOSN" (quote alea::kaosn) (quote ((om-load-inputfun (quote input-funbox) "first value" "SEED" 0.3) (om-load-inputfun (quote input-funbox) "chaotic factor (between 0 and 4.0)" "LAMBDA" 3.6) (om-load-inputfun (quote input-funbox) "length of the sequence" "LONG" 20) (om-load-inputfun (quote input-funbox) "index of the conjugate function" "FN?" 1))) (om-make-point 193 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 10))) (om-make-point 188 202) (om-make-point 202 213) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 100.0 200.0 300.0 400.0 500.0 600.0 700.0 800.0 900.0 1000.0 1100.0 1200.0 1300.0 1400.0 1500.0 1600.0 1700.0 1800.0 1900.0 2000.0)) (quote (0.3 0.75600005 0.6640703 0.80309135 0.56928826 0.8827169 0.37269998 0.8416609 0.47976413 0.8985258 0.32823774 0.7937918 0.589271 0.8713104 0.4036627 0.8665889 0.41620547 0.8747225 0.394499 0.85993034 0.43362054)) (quote bpf) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 139 51) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 192 51) (om-make-point 38 30) 3.6 "3.6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 242 51) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 0 1 nil 0) (4 0 0 2 nil 0) (0 0 1 2 nil 0))) nil 6.120003))
