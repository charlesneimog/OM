; OM File Header - Saved 2021/08/02 18:09:21
; (6.120003 :patc (om-make-point 982 60) (om-make-point 168 39) (om-make-point 960 805) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "profile interpolation" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 392 417) (om-make-point 50 28) (quote sample) "sample" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 511 428) (om-make-point 331 322) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 4.0 5.0 6.0 8.0 9.0 10.0 12.0 17.0)) (quote (0.0 8.0 7.0 13.0 12.0 11.0 15.67 18.0 17.0 15.0 23.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 4.0 5.0 6.0 8.0 9.0 10.0 12.0 17.0)) (quote (0.0 7.83 9.67 15.44 15.67 14.11 15.44 15.67 13.67 11.67 15.33)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 4.0 5.0 6.0 8.0 9.0 10.0 12.0 17.0)) (quote (0.0 7.67 12.33 17.89 19.33 17.22 15.22 13.33 10.33 8.33 7.67)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 4.0 5.0 6.0 8.0 9.0 10.0 12.0 17.0)) (quote (0.0 7.5 15.0 20.33 23.0 20.33 15.0 11.0 7.0 5.0 0.0)) (quote bpf) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BPF-INTERPOL" (quote bpf-interpol) (quote ((om-load-inputfun (quote input-funbox) "a bpf or bpc" "FIRST" nil) (om-load-inputfun (quote input-funbox) "a bpf or bpc" "SECOND" nil) (om-load-inputfun (quote input-funbox) "number of steps" "STEPS" 4) (om-load-inputfun (quote input-funbox) "interpolation curve" "CURVE" 0.0) (om-load-inputfun (quote input-funbox) "precision" "DECIMALS" 2) (om-load-inputfunmenu1 (quote input-funmenu) "interpolation mode" "MODE" (quote sample) (list (list "points to point" (quote (quote points))) (list "resample curves" (quote (quote sample))))))) (om-make-point 335 455) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 2 5 8 10 17)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 15 23 15 7 0)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 1))) (om-make-point 499 30) (om-make-point 305 313) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 2.0 5.0 8.0 10.0 17.0)) (quote (0.0 15.0 23.0 15.0 7.0 0.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 1 2 4 6 9 12 17)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 8 7 13 11 18 15 23)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 1))) (om-make-point 98 29) (om-make-point 305 313) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0 2.0 4.0 6.0 9.0 12.0 17.0)) (quote (0.0 8.0 7.0 13.0 11.0 18.0 15.0 23.0)) (quote bpf) 1))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (0 0 2 5 nil 0))) nil 6.120003))
