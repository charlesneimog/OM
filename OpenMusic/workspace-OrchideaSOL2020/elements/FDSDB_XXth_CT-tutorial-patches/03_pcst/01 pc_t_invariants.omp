; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 10 10) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "01 pc_t_invariants" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 119 30) (quote "5-9 B (0 2 4 5 6)") "" (om-make-point 252 33) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 95 30) (quote "4-8 (0 1 5 6)") "" (om-make-point 149 41) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 231 495) (quote "These objects works in$Pitch-classes Space, that is the$space represented by the 12$pitch-classes, always module 12.$$\"pc-t-invariants\" object calculates$the matrix of differences of$Pitch-classes of the two input sets,$module 12.$$\"pc-t-invariants-stat\" lists the$occurrences of every matrix$number. So, for example, (1 3)$indicates that there are three$number 1 in the matrix, so that,$transposing 5-9 B set for its$pitch-classes by 1 halftone there$will be three invariants with 4-8 set$(top row in matrix label for its$pitch-classes).$In fact (0,2,4,5,6), transposed by$1 halftone, becomes (1,3,5,6,7),$that has  (1,5,6) as invariants with$4-8 set.$$References:$$Morris, Robert (1988), Composition$With Pitch-Classes: A Tehory of$Compositional Desing, Yale$University Press, New Haven and$London.") "" (om-make-point 473 56) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 123 338) (om-make-point 106 98) (load-buffer-textfile (quote ("(0 1 5 6)" "(10 11 3 4)" "(8 9 1 2)" "(7 8 0 1)" "(6 7 11 0)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-T-INVARIANTS" (quote fdsdb_xxth_ct::pc-t-invariants) (quote ((om-load-inputfun (quote input-funbox) "First pc set" "SET1" nil) (om-load-inputfun (quote input-funbox) "Second pc set" "SET2" nil))) (om-make-point 123 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 2 5 7)))) (om-make-point 149 71) (om-make-point 91 89) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 1 5 6)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 39))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 2 5 7)))) (om-make-point 253 61) (om-make-point 91 89) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 0 2 4 5 6)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 300 339) (om-make-point 77 170) (load-buffer-textfile (quote ("(0 3)" "(1 3)" "(2 1)" "(3 1)" "(4 1)" "(5 1)" "(6 2)" "(7 2)" "(8 2)" "(9 1)" "(10 1)" "(11 2)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-T-INVARIANTS-STAT" (quote fdsdb_xxth_ct::pc-t-invariants-stat) (quote ((om-load-inputfun (quote input-funbox) "First pc set" "SET1" nil) (om-load-inputfun (quote input-funbox) "Second pc set" "SET2" nil))) (om-make-point 274 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 1 nil 0) (5 2 4 0 nil 0) (6 2 4 1 nil 0) (8 0 7 1 nil 0) (5 2 8 0 nil 0) (6 2 8 1 nil 0))) nil 6.17))
