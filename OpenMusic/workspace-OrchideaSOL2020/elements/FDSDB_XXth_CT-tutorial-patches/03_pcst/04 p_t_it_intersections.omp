; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 10 60) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "04 p_t_it_intersections" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 256 450) (quote "These objects works in Pitch Space,$that is the space represented by$absolute pitches (not module 12).$Central C is the number 0 and$halftones upwards are, chromatically in$order, entire positive numbers, while$halftones downwards are, chromatically$in order, entire negative numbers. So$F4 is number +5, and G3 is number -5.$$\"intersections-tchord2-chord1\"$calculates common absolute pitches$among all chord2 transpositions from$-12 to +12 halftones and chord1. In$order every result line gives the$transposition, the number of common$pitches and the MIDI number of$common pitches.$$\"intersections-itchord2-chord1\" acts$the same, but first inverting second$chord and then transposing it.$$References:$$Morris, Robert (1988), Composition$With Pitch-Classes: A Theory of$Compositional Desing, Yale University$Press, New Haven and London.") "" (om-make-point 698 156) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 414 336) (om-make-point 137 319) (load-buffer-textfile (quote ("(12 1 (7100))" "(11 0 nil)" "(10 1 (6100))" "(9 2 (6100 6800))" "(8 0 nil)" "(7 0 nil)" "(6 1 (6100))" "(5 0 nil)" "(4 0 nil)" "(3 0 nil)" "(2 2 (6100 7200))" "(1 1 (7100))" "(0 0 nil)" "(-1 1 (7200))" "(-2 2 (6800 7100))" "(-3 0 nil)" "(-4 0 nil)" "(-5 1 (6800))" "(-6 0 nil)" "(-7 0 nil)" "(-8 0 nil)" "(-9 1 (6100))" "(-10 0 nil)" "(-11 0 nil)" "(-12 1 (6100))" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 210 336) (om-make-point 137 319) (load-buffer-textfile (quote ("(12 0 nil)" "(11 2 (6100 7200))" "(10 1 (7100))" "(9 0 nil)" "(8 0 nil)" "(7 2 (6800 7200))" "(6 1 (7100))" "(5 0 nil)" "(4 1 (7200))" "(3 3 (6800 7100 7200))" "(2 1 (7100))" "(1 0 nil)" "(0 2 (6100 6800))" "(-1 1 (6800))" "(-2 0 nil)" "(-3 0 nil)" "(-4 1 (6100))" "(-5 0 nil)" "(-6 0 nil)" "(-7 1 (6100))" "(-8 1 (6100))" "(-9 0 nil)" "(-10 0 nil)" "(-11 0 nil)" "(-12 0 nil)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERSECTIONS-ITCHORD2-CHORD1" (quote fdsdb_xxth_ct::intersections-itchord2-chord1) (quote ((om-load-inputfun (quote input-funbox) "First chord (Midicent)" "CHORD1" nil) (om-load-inputfun (quote input-funbox) "Second chord (Midicent)" "CHORD2" nil))) (om-make-point 384 247) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERSECTIONS-TCHORD2-CHORD1" (quote fdsdb_xxth_ct::intersections-tchord2-chord1) (quote ((om-load-inputfun (quote input-funbox) "First chord (Midicent)" "CHORD1" nil) (om-load-inputfun (quote input-funbox) "Second chord (Midicent)" "CHORD2" nil))) (om-make-point 182 236) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 343 65) (om-make-point 325 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4700) (5000) (6100) (6500) (6800) (6900))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 620 383) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 85 66) (om-make-point 225 110) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6100) (6800) (7100) (7200))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 525 321) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 1 nil 0) (4 0 2 1 nil 0) (6 1 3 0 nil 0) (5 1 3 1 nil 0) (6 1 4 0 nil 0) (5 1 4 1 nil 0))) nil 6.17))
