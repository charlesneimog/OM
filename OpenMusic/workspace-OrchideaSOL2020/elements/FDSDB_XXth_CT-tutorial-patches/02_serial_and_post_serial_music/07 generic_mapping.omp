; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 316.15771484375D0 370) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "07 generic_mapping" (quote ((let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 821 397) (om-make-point 188 108) (load-buffer-textfile (quote ("(three five one zero four two)" "(two five four zero three one)" "(two one four zero five three)" "(five two four one zero three)" "(three one four zero five two)" "(two three one four zero five)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 895 224) (om-make-point 184 30) (list (quote zero) (quote one) (quote two) (quote three) (quote four) (quote five)) "(zero one two three four five)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 743 154) (om-make-point 100 102) (load-buffer-textfile (quote ("(3 5 1 0 4 2)" "(2 5 4 0 3 1)" "(2 1 4 0 5 3)" "(5 2 4 1 0 3)" "(3 1 4 0 5 2)" "(2 3 1 4 0 5)" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 65 30) (quote "User list") nil (om-make-point 951 187) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 231 45) (quote "Starting matrix$(it can consist also of only one line)") nil (om-make-point 746 107) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GENERIC-MAPPING2" (quote fdsdb_xxth_ct::generic-mapping2) (quote ((om-load-inputfun (quote input-funbox) "Start matrix" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "User list" "USER-LIST" nil))) (om-make-point 845 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 443 397) (om-make-point 324 210) (load-buffer-textfile (quote ("(cr. fg. cr. fg. cl. ob. tr. cl. ob. tr. fl. fl.)" "(fg. cl. fg. cl. ob. fl. cr. ob. fl. cr. tr. tr.)" "(cr. fg. cr. fg. cl. ob. tr. cl. ob. tr. fl. fl.)" "(fg. cl. fg. cl. ob. fl. cr. ob. fl. cr. tr. tr.)" "(cl. ob. cl. ob. fl. tr. fg. fl. tr. fg. cr. cr.)" "(ob. fl. ob. fl. tr. cr. cl. tr. cr. cl. fg. fg.)" "(tr. cr. tr. cr. fg. cl. fl. fg. cl. fl. ob. ob.)" "(cl. ob. cl. ob. fl. tr. fg. fl. tr. fg. cr. cr.)" "(ob. fl. ob. fl. tr. cr. cl. tr. cr. cl. fg. fg.)" "(tr. cr. tr. cr. fg. cl. fl. fg. cl. fl. ob. ob.)" "(fl. tr. fl. tr. cr. fg. ob. cr. fg. ob. cl. cl.)" "(fl. tr. fl. tr. cr. fg. ob. cr. fg. ob. cl. cl.)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 594 234) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GENERIC-MAPPING-MOD" (quote fdsdb_xxth_ct::generic-mapping-mod) (quote ((om-load-inputfun (quote input-funbox) "Matrix" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "User list" "USER" nil) (om-load-inputfun (quote input-funbox) "Module" "MODULE" 12))) (om-make-point 510 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 220 75) (quote "The numbers of the matrix are$mapped onto 12 user defined$elements, without or with module$restriction.") "" (om-make-point 311 95) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 40 397) (om-make-point 324 210) (load-buffer-textfile (quote ("(fg. cl. v.la vl. harp trb. cr. ob. fl. vc. tr. cb.)" "(cl. ob. vl. harp trb. tr. fg. fl. cb. v.la cr. vc.)" "(v.la vl. fg. cl. ob. fl. vc. harp trb. cr. cb. tr.)" "(vl. harp cl. ob. fl. cb. v.la trb. tr. fg. vc. cr.)" "(harp trb. ob. fl. cb. vc. vl. tr. cr. cl. v.la fg.)" "(trb. tr. fl. cb. vc. v.la harp cr. fg. ob. vl. cl.)" "(cr. fg. vc. v.la vl. harp tr. cl. ob. cb. trb. fl.)" "(ob. fl. harp trb. tr. cr. cl. cb. vc. vl. fg. v.la)" "(fl. cb. trb. tr. cr. fg. ob. vc. v.la harp cl. vl.)" "(vc. v.la cr. fg. cl. ob. cb. vl. harp tr. fl. trb.)" "(tr. cr. cb. vc. v.la vl. trb. fg. cl. fl. harp ob.)" "(cb. vc. tr. cr. fg. cl. fl. v.la vl. trb. ob. harp)" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 78 38) (om-make-point 200 188) (load-buffer-textfile (quote ("" "(4 3 10 9 8 7 5 2 1 11 6 12)" "(3 2 9 8 7 6 4 1 12 10 5 11)" "(10 9 4 3 2 1 11 8 7 5 12 6)" "(9 8 3 2 1 12 10 7 6 4 11 5)" "(8 7 2 1 12 11 9 6 5 3 10 4)" "(7 6 1 12 11 10 8 5 4 2 9 3)" "(5 4 11 10 9 8 6 3 2 12 7 1)" "(2 1 8 7 6 5 3 12 11 9 4 10)" "(1 12 7 6 5 4 2 11 10 8 3 9)" "(11 10 5 4 3 2 12 9 8 6 1 7)" "(6 5 12 11 10 9 7 4 3 1 8 2)" "(12 11 6 5 4 3 1 10 9 7 2 8)" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 316 180) (om-make-point 267 30) (list (quote fl.) (quote ob.) (quote cl.) (quote fg.) (quote cr.) (quote tr.) (quote trb.) (quote harp) (quote vl.) (quote v.la) (quote vc.) (quote cb.)) "(fl. ob. cl. fg. cr. tr. trb. harp vl. v.la vc. cb.)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GENERIC-MAPPING" (quote fdsdb_xxth_ct::generic-mapping) (quote ((om-load-inputfun (quote input-funbox) "Matrix" "MATRIX" nil) (om-load-inputfun (quote input-funbox) "User list" "USER" nil))) (om-make-point 122 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 1 nil 0) (2 1 5 0 nil 0) (1 0 5 1 nil 0) (8 0 6 1 nil 0) (11 1 8 0 nil 0) (12 0 8 1 nil 0) (7 0 8 2 nil 0) (13 0 10 1 nil 0) (11 1 13 0 nil 0) (12 0 13 1 nil 0))) nil 6.17))
