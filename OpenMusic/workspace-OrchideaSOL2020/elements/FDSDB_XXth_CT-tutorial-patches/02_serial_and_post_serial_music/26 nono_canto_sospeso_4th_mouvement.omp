; OM File Header - Saved 2021/08/05 18:54:15
; (6.18 :patc (om-make-point 12.0D0 670) (om-make-point 61 46) (om-make-point 1080 698) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "26 nono_canto_sospeso_4th_mouvement" (quote ((let ((box (om-load-boxcall (quote genfun) "CS4-1" (quote fdsdb_xxth_ct::cs4-1) (quote ((om-load-inputfun (quote input-funbox) "Factor" "NUM" 5) (om-load-inputfun (quote input-funbox) "Module" "MOD" 12) (om-load-inputfun (quote input-funbox) "Length" "LENGTH" 12))) (om-make-point 194 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 160 98) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 199 98) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 240 98) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "value" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 146 269) (om-make-point 162 45) (load-buffer-textfile (quote ("(5 10 3 8 1 6 11 4 9 2 7 12)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 199 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 246 229) (om-make-point 60 30) "value" "\"value\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CS4-2" (quote fdsdb_xxth_ct::cs4-2) (quote ((om-load-inputfun (quote input-funbox) "Number series" "SERIES" nil))) (om-make-point 188 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 104 408) (om-make-point 257 189) (load-buffer-textfile (quote ("(5 10 3 8 1 6 11 4 9 2 7 12)" "(10 8 6 4 2 12 5 3 1 11 9 7)" "(8 4 12 3 11 7 10 6 2 5 1 9)" "(4 3 7 6 5 9 8 12 11 10 2 1)" "(3 6 9 12 10 1 4 7 5 8 11 2)" "(6 12 1 7 8 2 3 9 10 4 5 11)" "(12 7 2 9 4 11 6 1 8 3 10 5)" "(7 9 11 1 3 5 12 2 4 6 8 10)" "(9 1 5 2 6 10 7 11 3 12 4 8)" "(1 2 10 11 12 8 9 5 6 7 3 4)" "(2 11 8 5 7 4 1 10 12 9 6 3)" "(11 5 4 10 9 3 2 8 7 1 12 6)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 484 240) (quote "cs4-1, parameters: factor - module - length$$multiplies a factor by the series of integers from 1 to length giving a result$according to a selected module.$$cs4-2:$$applies permutations to a series, selecting before even position elements and$then odd position elements, and then applies the same process to resulting$series from first step, and so on, recursively until the end. As many series as$many elements in initial series.$$Reference:$Jeanne Ma. Guerrero, \"Serial Intervention in Nono's Il canto Sospeso\"$in Music Theory Online, Volume 12, Number 1, February 2006.") "" (om-make-point 349 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (3 0 0 2 nil 0) (5 0 4 1 nil 0) (6 0 4 3 nil 0) (0 0 5 0 nil 0) (4 1 7 0 nil 0) (7 0 8 1 nil 0))) nil 6.18))
