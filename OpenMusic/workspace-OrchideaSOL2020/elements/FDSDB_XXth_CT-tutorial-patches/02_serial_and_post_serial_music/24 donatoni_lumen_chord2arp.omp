; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 43.0D0 190) (om-make-point 0 23) (om-make-point 1280 722) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "24 donatoni_lumen_chord2arp" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 202 60) (quote "Transformation into a series of$arpeggios with repetition of$last low pitch.") "" (om-make-point 471 462) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 499 150) (quote "Transformation of a series of chords into a series of arpeggio.$This transformation technique has been used by Donatoni in$composing \"Lumen\", specifically passing from first panel to$second panel.$$See Fabio De Sanctis De Benedictis, \"Figura, processo e$articolazione parametrica in Lumen di Franco Donatoni\", in$\"Gli spazi della musica\", V. 4 N. 2 (2015)$nternet: https://www.ojs.unito.it/index.php/spazidellamusica/article/view/1356") "" (om-make-point 706 59) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 567 581) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BUTTON" (quote button) (quote ((om-load-inputfun (quote input-funbox) "button text" "text" "click me") (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" (quote t)))) (om-make-point 499 639) (om-make-point 130 44) (let ((rep (om-make-dialog-item (quote button) (om-make-point 1 1) (om-make-point 110 24) "click me"))) rep) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "5-8 pitches 20 chord generation" (om-load-patch-abs1 "5-8 pitches 20 chord generation" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 142 608) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 113 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 75 59) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 123 59) (om-make-point 48 30) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 177 59) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 107 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 124 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 199 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 199 169) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 243 169) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote =)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 131 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 138 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 176 473) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 142 391) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 137 463) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 423) (om-make-point 48 30) 4800 "4800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 1 2 nil 0) (1 0 5 0 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (6 0 10 0 nil 0) (14 0 11 0 nil 0) (12 0 11 1 nil 0) (10 0 13 0 nil 0) (15 0 14 0 nil 0) (13 0 14 1 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 147 12) nil (list (list (list 4800 5200 6000 6900 7900 9000 10200) (list 4800 4900 5500 6300 7200 8300) (list 4800 4800 5000 5300 6000 7200) (list 4800 4900 5100 5500 6100 7100) (list 4800 5000 5400 5900 6700 7700) (list 4800 5000 5400 6000 6800) (list 4800 4800 5000 5300 6200) (list 4800 5100 5700 6400 7200 8200) (list 4800 4900 5100 5400 6100 6900 7900) (list 4800 4800 4900 5500 6400 7500) (list 4800 4900 5300 5900 6600) (list 4800 4800 5000 5700 6700 7900) (list 4800 5000 5300 5800 6400 7400) (list 4800 5000 5300 5800 6400 7100 8100) (list 4800 4800 5200 6000 6900) (list 4800 4800 4900 5100 5500 6000 7200) (list 4800 5200 5900 6700 7800 9000) (list 4800 5100 5500 6100 6900 7800 8900) (list 4800 5000 5400 6000 7000 8100) (list 4800 4800 4900 5100 6100 7300))) nil "5-8 pitches 20 chord generation"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 700 415) (om-make-point 286 145) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5200) (6000) (6900) (7900) (9000) (10200) (9000) (7900) (6900) (6000) (5200) (4800) (4900) (5500) (6300) (7200) (8300) (7200) (6300) (5500) (4900) (4800) (5000) (5300) (6000) (7200) (6000) (5300) (5000) (4800) (4900) (5100) (5500) (6100) (7100) (6100) (5500) (5100) (4900) (4800) (5000) (5400) (5900) (6700) (7700) (6700) (5900) (5400) (5000) (4800) (5000) (5400) (6000) (6800) (6000) (5400) (5000) (4800) (5000) (5300) (6200) (5300) (5000) (4800) (5100) (5700) (6400) (7200) (8200) (7200) (6400) (5700) (5100) (4800) (4900) (5100) (5400) (6100) (6900) (7900) (6900) (6100) (5400) (5100) (4900) (4800) (4900) (5500) (6400) (7500) (6400) (5500) (4900) (4800) (4900) (5300) (5900) (6600) (5900) (5300) (4900) (4800) (5000) (5700) (6700) (7900) (6700) (5700) (5000) (4800) (5000) (5300) (5800) (6400) (7400) (6400) (5800) (5300) (5000) (4800) (5000) (5300) (5800) (6400) (7100) (8100) (7100) (6400) (5800) (5300) (5000) (4800) (5200) (6000) (6900) (6000) (5200) (4800) (4900) (5100) (5500) (6000) (7200) (6000) (5500) (5100) (4900) (4800) (5200) (5900) (6700) (7800) (9000) (7800) (6700) (5900) (5200) (4800) (5100) (5500) (6100) (6900) (7800) (8900) (7800) (6900) (6100) (5500) (5100) (4800) (5000) (5400) (6000) (7000) (8100) (7000) (6000) (5400) (5000) (4800) (4900) (5100) (6100) (7300) (6100) (5100) (4900))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3000 3125 3250 3375 3500 3625 3750 3875 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7125 7250 7375 7500 7625 7750 7875 8000 8125 8250 8375 8500 8625 8750 8875 9000 9125 9250 9375 9500 9625 9750 9875 10000 10125 10250 10375 10500 10625 10750 10875 11000 11125 11250 11375 11500 11625 11750 11875 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13375 13500 13625 13750 13875 14000 14125 14250 14375 14500 14625 14750 14875 15000 15125 15250 15375 15500 15625 15750 15875 16000 16125 16250 16375 16500 16625 16750 16875 17000 17125 17250 17375 17500 17625 17750 17875 18000 18125 18250 18375 18500 18625 18750 18875 19000 19125 19250 19375 19500 19625 19750 19875 20000 20125 20250 20375 20500 20625 20750 20875 21000 21125 21250 21375 21500 21625 21750 21875 22000 22125 22250 22375 22500 22625 22750 22875 23000 23125 23250 23375 23500)) :ldur (quote ((125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 625 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 767 375) (om-make-point 62 30) (list 0 125) "(0 125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 834 375) (om-make-point 51 30) (list 125) "(125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 60) (quote "Transformation into a series of$arpeggios without repetition of$last low pitch.") "" (om-make-point 1001 462) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LUMEN-CHORD2ARP-2 2" (quote fdsdb_xxth_ct::lumen-chord2arp-2) (quote ((om-load-inputfun (quote input-funbox) "A list of chords in Midicent" "CHORD-SEQ" nil))) (om-make-point 708 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LUMEN-CHORD2ARP-1" (quote fdsdb_xxth_ct::lumen-chord2arp-1) (quote ((om-load-inputfun (quote input-funbox) "A list of chords in Midicent" "CHORD-SEQ" nil))) (om-make-point 178 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 154 30) (quote "Initial chord sequence.") "" (om-make-point 474 159) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 304 375) (om-make-point 51 30) (list 125) "(125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 237 375) (om-make-point 62 30) (list 0 125) "(0 125)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 170 415) (om-make-point 286 145) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800) (5200) (6000) (6900) (7900) (9000) (10200) (9000) (7900) (6900) (6000) (5200) (4800) (4800) (4900) (5500) (6300) (7200) (8300) (7200) (6300) (5500) (4900) (4800) (4800) (5000) (5300) (6000) (7200) (6000) (5300) (5000) (4800) (4800) (4900) (5100) (5500) (6100) (7100) (6100) (5500) (5100) (4900) (4800) (4800) (5000) (5400) (5900) (6700) (7700) (6700) (5900) (5400) (5000) (4800) (4800) (5000) (5400) (6000) (6800) (6000) (5400) (5000) (4800) (4800) (5000) (5300) (6200) (5300) (5000) (4800) (4800) (5100) (5700) (6400) (7200) (8200) (7200) (6400) (5700) (5100) (4800) (4800) (4900) (5100) (5400) (6100) (6900) (7900) (6900) (6100) (5400) (5100) (4900) (4800) (4800) (4900) (5500) (6400) (7500) (6400) (5500) (4900) (4800) (4800) (4900) (5300) (5900) (6600) (5900) (5300) (4900) (4800) (4800) (5000) (5700) (6700) (7900) (6700) (5700) (5000) (4800) (4800) (5000) (5300) (5800) (6400) (7400) (6400) (5800) (5300) (5000) (4800) (4800) (5000) (5300) (5800) (6400) (7100) (8100) (7100) (6400) (5800) (5300) (5000) (4800) (4800) (5200) (6000) (6900) (6000) (5200) (4800) (4800) (4900) (5100) (5500) (6000) (7200) (6000) (5500) (5100) (4900) (4800) (4800) (5200) (5900) (6700) (7800) (9000) (7800) (6700) (5900) (5200) (4800) (4800) (5100) (5500) (6100) (6900) (7800) (8900) (7800) (6900) (6100) (5500) (5100) (4800) (4800) (5000) (5400) (6000) (7000) (8100) (7000) (6000) (5400) (5000) (4800) (4800) (4900) (5100) (6100) (7300) (6100) (5100) (4900) (4800))) :lonset (quote (0 125 250 375 500 625 750 875 1000 1125 1250 1375 1500 1625 1750 1875 2000 2125 2250 2375 2500 2625 2750 2875 3000 3125 3250 3375 3500 3625 3750 3875 4000 4125 4250 4375 4500 4625 4750 4875 5000 5125 5250 5375 5500 5625 5750 5875 6000 6125 6250 6375 6500 6625 6750 6875 7000 7125 7250 7375 7500 7625 7750 7875 8000 8125 8250 8375 8500 8625 8750 8875 9000 9125 9250 9375 9500 9625 9750 9875 10000 10125 10250 10375 10500 10625 10750 10875 11000 11125 11250 11375 11500 11625 11750 11875 12000 12125 12250 12375 12500 12625 12750 12875 13000 13125 13250 13375 13500 13625 13750 13875 14000 14125 14250 14375 14500 14625 14750 14875 15000 15125 15250 15375 15500 15625 15750 15875 16000 16125 16250 16375 16500 16625 16750 16875 17000 17125 17250 17375 17500 17625 17750 17875 18000 18125 18250 18375 18500 18625 18750 18875 19000 19125 19250 19375 19500 19625 19750 19875 20000 20125 20250 20375 20500 20625 20750 20875 21000 21125 21250 21375 21500 21625 21750 21875 22000 22125 22250 22375 22500 22625 22750 22875 23000 23125 23250 23375 23500 23625 23750 23875 24000 24125 24250 24375 24500 24625 24750 24875 25000 25125 25250 25375 25500 25625 25750 25875 26000)) :ldur (quote ((125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125) (125))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 625 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 174 111) (om-make-point 286 145) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4800 5200 6000 6900 7900 9000 10200) (4800 4900 5500 6300 7200 8300) (4800 4800 5000 5300 6000 7200) (4800 4900 5100 5500 6100 7100) (4800 5000 5400 5900 6700 7700) (4800 5000 5400 6000 6800) (4800 4800 5000 5300 6200) (4800 5100 5700 6400 7200 8200) (4800 4900 5100 5400 6100 6900 7900) (4800 4800 4900 5500 6400 7500) (4800 4900 5300 5900 6600) (4800 4800 5000 5700 6700 7900) (4800 5000 5300 5800 6400 7400) (4800 5000 5300 5800 6400 7100 8100) (4800 4800 5200 6000 6900) (4800 4800 4900 5100 5500 6000 7200) (4800 5200 5900 6700 7800 9000) (4800 5100 5500 6100 6900 7800 8900) (4800 5000 5400 6000 7000 8100) (4800 4800 4900 5100 6100 7300))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 625 352) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((14 1 2 0 nil 0) (5 0 2 1 nil 0) (2 0 3 1 nil 0) (9 0 5 1 nil 0) (6 0 5 2 nil 0) (7 0 5 3 nil 0) (15 1 9 0 nil 0) (15 1 10 0 nil 0) (10 0 14 1 nil 0) (13 0 14 2 nil 0) (12 0 14 3 nil 0) (4 0 15 1 nil 0))) nil 6.17))
