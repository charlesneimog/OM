; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 55.0D0 430) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "06 boulez_structures_ia_6" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 229 210) (quote "Original series is converted into$Inverse one, and mapping of$Inverse series ordered$transpositions on amplitudes is$performed.$$References:$$Ligeti, György (1960), Pierre$Boulez, «die Reihe» n. 4, Theodore$Presser Co., Pennsylvania (German$original edition$Universal Edition, Wien 1958.") "" (om-make-point 680 89) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "I-MATRIX-AMPS-MOD" (quote fdsdb_xxth_ct::i-matrix-amps-mod) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil) (om-load-inputfun (quote input-funbox) "Module" "MODULE" 12))) (om-make-point 455 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "I-MATRIX-AMPS" (quote fdsdb_xxth_ct::i-matrix-amps) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil))) (om-make-point 131 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 365 322) (om-make-point 364 198) (load-buffer-textfile (quote ("(p quasi_p p quasi_p mp pppp pp mp pppp pp ppp ppp)" "(quasi_p mp quasi_p mp pppp ppp p pppp ppp p pp pp)" "(p quasi_p p quasi_p mp pppp pp mp pppp pp ppp ppp)" "(quasi_p mp quasi_p mp pppp ppp p pppp ppp p pp pp)" "(mp pppp mp pppp ppp pp quasi_p ppp pp quasi_p p p)" "(pppp ppp pppp ppp pp p mp pp p mp quasi_p quasi_p)" "(pp p pp p quasi_p mp ppp quasi_p mp ppp pppp pppp)" "(mp pppp mp pppp ppp pp quasi_p ppp pp quasi_p p p)" "(pppp ppp pppp ppp pp p mp pp p mp quasi_p quasi_p)" "(pp p pp p quasi_p mp ppp quasi_p mp ppp pppp pppp)" "(ppp pp ppp pp p quasi_p pppp p quasi_p pppp mp mp)" "(ppp pp ppp pp p quasi_p pppp p quasi_p pppp mp mp)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 63 322) (om-make-point 276 189) (load-buffer-textfile (quote ("(p quasi_p ff fff ffff pppp pp mp mf f ppp quasi_f)" "(quasi_p mp fff ffff pppp ppp p mf quasi_f ff pp f)" "(ff fff p quasi_p mp mf f ffff pppp pp quasi_f ppp)" "(fff ffff quasi_p mp mf quasi_f ff pppp ppp p f pp)" "(ffff pppp mp mf quasi_f f fff ppp pp quasi_p ff p)" "(pppp ppp mf quasi_f f ff ffff pp p mp fff quasi_p)" "(pp p f ff fff ffff ppp quasi_p mp quasi_f pppp mf)" "(mp mf ffff pppp ppp pp quasi_p quasi_f f fff p ff)" "(mf quasi_f pppp ppp pp p mp f ff ffff quasi_p fff)" "(f ff pp p quasi_p mp quasi_f fff ffff ppp mf pppp)" "(ppp pp quasi_f f ff fff pppp p quasi_p mf ffff mp)" "(quasi_f f ppp pp p quasi_p mf ff fff pppp mp ffff)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 521 189) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 41 40) (om-make-point 615 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7400) (6900) (6800) (6700) (6600) (6400) (7300) (7200) (7000) (6500) (7100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 1 1 0 nil 0) (5 0 1 1 nil 0) (6 1 2 0 nil 0) (1 0 3 1 nil 0) (2 0 4 1 nil 0))) nil 6.17))
