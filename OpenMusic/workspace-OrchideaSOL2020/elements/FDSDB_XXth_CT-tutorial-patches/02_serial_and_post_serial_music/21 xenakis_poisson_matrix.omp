; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 52.0D0 250) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "20 xenakis_poisson_matrix" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 253 375) (quote "\"poisson-matrix\" builds a matrix in$which values are distributed according$to a Poisson distribution logic, like in$\"Achorripsis\", in first phase of$determination of the number of$events. 'max' sets the maximum$value, in arithmetic progression$starting from 0 (null event) to 'max'.$$\"poisson-list\" returns the matrix values$in form of list, useful for further uses,$for example mapping. The remaining$last nnumber is due to a different$approximation way in PWGL respect to$original Xanakis's calculations.$$References:$$Orcalli, Angelo (1993), Fenomenologia$della musica sperimentale, Potenza,$Sonus edizioni Musicali.$$Xenakis, Iannis (1963), Musique$formelles, Paris, La Revue Musicale.") "" (om-make-point 808 122) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POISSON-MATRIX" (quote fdsdb_xxth_ct::poisson-matrix) (quote ((om-load-inputfun (quote input-funbox) "Number of columns" "NUM-COLUMNS" 28) (om-load-inputfun (quote input-funbox) "Number of rows" "NUM-ROWS" 7) (om-load-inputfun (quote input-funbox) "Maximum number of allowed events" "MAX" 4) (om-load-inputfun (quote input-funbox) "Density" "DENSITY" 0.6))) (om-make-point 338 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 256 281) (om-make-point 308 126) (load-buffer-textfile (quote ("(1 1 0 0 0 0 0 0 0 0 1 1 0 0 3 1 0 0 0 0 0 1 0 1 0 1 1 0)" "(1 0 0 1 0 0 0 2 0 0 0 1 0 0 0 0 1 0 0 2 0 1 0 1 1 1 0 0)" "(0 0 1 0 0 0 2 0 1 1 1 1 1 1 0 2 0 0 0 4 0 0 0 1 1 1 2 2)" "(0 1 1 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0 0 2 1 2 1 1 2 2 0 0)" "(0 1 2 0 2 2 0 1 1 0 0 3 2 0 0 2 1 0 1 3 0 1 1 0 0 1 1 1)" "(0 0 1 1 0 0 1 0 0 0 1 0 1 0 2 0 0 1 1 0 2 0 0 0 0 1 1 1)" "(1 0 1 0 3 0 0 0 0 0 1 0 0 1 0 1 1 2 1 0 0 0 0 0 2 1 0 0)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 332 30) (quote "Builds a first phase Poisson matrix as in Achorripsis.") "" (om-make-point 436 175) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 312 105) (om-make-point 34 30) 28 "28" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 352 105) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 390 105) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 426 105) (om-make-point 38 30) 0.6 "0.6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 144 105) (quote "Arguments:$$- Number of columns$ Number of rows$- Max event number$- Density") "" (om-make-point 132 86) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (5 0 1 1 nil 0) (6 0 1 2 nil 0) (7 0 1 3 nil 0) (1 0 2 1 nil 0))) nil 6.17))
