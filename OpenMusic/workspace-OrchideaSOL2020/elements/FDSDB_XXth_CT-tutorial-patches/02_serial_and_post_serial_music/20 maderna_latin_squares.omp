; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 298.15771484375D0 670) (om-make-point 0 27) (om-make-point 1280 718) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "19 maderna_latin_squares" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 232 390) (quote "Every object builds a random Latin$Square.$$A Latin Square is  a matrix in which$the sum of the rows, columns and$main diagonals is always the same$number.$$'seed3' and 'seed4' are relative to$the starting generating number,$that is always at least the half of$the square of the side minus 1 in$odd late squares. That is, in 3X3$square, ((3^2)-1)/2 = 4. In even$squares it is, for example,$((4^2)/2)-1 = 7, and so on.$$'seed1' and 'seed2' are minimum$and maximum values for random$factor.$$Because combinations are not$infinite, sometimes it can be$necessary to evaluate more times$before to get a new result.") "" (om-make-point 9 260) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 330) (quote "The suggestion is from Maderna's$composition techniques, even if$Maderna's squares have smaller$numbers.$$References:$$Böhlen, Manfred Johann (1989),$Nell'incantesimo del numero il$Flötenkonzert di Maderna, in$Baroni, Mario$Dalmonte, Rossana (eds.), Studi su$Bruno Maderna, Edizioni Suvini$Zerboni, Milano.$$Brescia, Teodoro (2004), Il numero$9 e il magico teorema Luoshu,$Rivista Punto Zero n. 9. Internet: h$ttp://www.nexusedizioni.it/it/CT/il-$numero-9-e-il-magico-teorema-luos$hu-4729") "" (om-make-point 244 260) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 489 411) (om-make-point 342 235) (load-buffer-textfile (quote ("(267 21 19 273 275 13 11 281 283 5 3 289)" "(47 245 247 41 39 253 255 33 31 261 263 25)" "(219 69 67 225 227 61 59 233 235 53 51 241)" "(95 197 199 89 87 205 207 81 79 213 215 73)" "(171 117 115 177 179 109 107 185 187 101 99 193)" "(143 149 151 137 135 157 159 129 127 165 167 121)" "(169 123 125 163 161 131 133 155 153 139 141 147)" "(97 191 189 103 105 183 181 111 113 175 173 119)" "(217 75 77 211 209 83 85 203 201 91 93 195)" "(49 239 237 55 57 231 229 63 65 223 221 71)" "(265 27 29 259 257 35 37 251 249 43 45 243)" "(1 287 285 7 9 279 277 15 17 271 269 23)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 591 316) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "3x3" "4x4" "5x5" "6x6" "7x7" "8x8" "9x9" "10x10" "11x11" "12x12")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 665 248) (om-make-point 130 50) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 110 26) "untitled" :range (quote ("3x3" "4x4" "5x5" "6x6" "7x7" "8x8" "9x9" "10x10" "11x11" "12x12"))))) (om-set-selected-item-index rep (quote 9)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 10 206) (om-make-point 1214 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-12X12" (quote fdsdb_xxth_ct::latin-squares-12x12) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 3) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 1) (om-load-inputfun (quote input-funbox) "Seed 4" "SEED4" 5))) (om-make-point 1082 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 35" (quote t) (quote nil) (om-make-point 1084 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 34" (quote t) (quote nil) (om-make-point 1176 50) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 33" (quote t) (quote nil) (om-make-point 1115 50) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 32" (quote t) (quote nil) (om-make-point 1145 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-11X11" (quote fdsdb_xxth_ct::latin-squares-11x11) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 4))) (om-make-point 962 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 31" (quote t) (quote nil) (om-make-point 970 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 30" (quote t) (quote nil) (om-make-point 1050 50) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 29" (quote t) (quote nil) (om-make-point 1010 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-10X10" (quote fdsdb_xxth_ct::latin-squares-10x10) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 3) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 1) (om-load-inputfun (quote input-funbox) "Seed 4" "SEED4" 5))) (om-make-point 842 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 28" (quote t) (quote nil) (om-make-point 844 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 27" (quote t) (quote nil) (om-make-point 936 50) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 26" (quote t) (quote nil) (om-make-point 876 50) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 25" (quote t) (quote nil) (om-make-point 905 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-9X9" (quote fdsdb_xxth_ct::latin-squares-9x9) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 3))) (om-make-point 730 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 24" (quote t) (quote nil) (om-make-point 734 51) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 23" (quote t) (quote nil) (om-make-point 770 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 806 51) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-8X8" (quote fdsdb_xxth_ct::latin-squares-8x8) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 1) (om-load-inputfun (quote input-funbox) "Seed 4" "SEED4" 3))) (om-make-point 610 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 603 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 698 50) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 634 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 667 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-7X7" (quote fdsdb_xxth_ct::latin-squares-7x7) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 3))) (om-make-point 490 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 494 51) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 566 51) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 530 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-6X6" (quote fdsdb_xxth_ct::latin-squares-6x6) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 1) (om-load-inputfun (quote input-funbox) "Seed 4" "SEED4" 2))) (om-make-point 370 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 359 51) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 462 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 393 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 428 51) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-5X5" (quote fdsdb_xxth_ct::latin-squares-5x5) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 5))) (om-make-point 250 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 254 51) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 326 51) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 290 51) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-4X4" (quote fdsdb_xxth_ct::latin-squares-4x4) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 8) (om-load-inputfun (quote input-funbox) "Seed 4" "SEED4" 2))) (om-make-point 131 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 122 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 221 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 155 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 188 50) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 88 50) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 62 50) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 36 50) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LATIN-SQUARES-3X3" (quote fdsdb_xxth_ct::latin-squares-3x3) (quote ((om-load-inputfun (quote input-funbox) "Seed 1" "SEED1" 1) (om-load-inputfun (quote input-funbox) "Seed2" "SEED2" 2) (om-load-inputfun (quote input-funbox) "Seed3" "SEED3" 8))) (om-make-point 22 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (50 0 5 0 nil 0) (42 0 5 1 nil 0) (38 0 5 2 nil 0) (33 0 5 3 nil 0) (29 0 5 4 nil 0) (24 0 5 5 nil 0) (20 0 5 6 nil 0) (15 0 5 7 nil 0) (11 0 5 8 nil 0) (6 0 5 9 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 6 2 nil 0) (8 0 6 3 nil 0) (12 0 11 0 nil 0) (14 0 11 1 nil 0) (13 0 11 2 nil 0) (16 0 15 0 nil 0) (18 0 15 1 nil 0) (19 0 15 2 nil 0) (17 0 15 3 nil 0) (21 0 20 0 nil 0) (22 0 20 1 nil 0) (23 0 20 2 nil 0) (25 0 24 0 nil 0) (27 0 24 1 nil 0) (28 0 24 2 nil 0) (26 0 24 3 nil 0) (30 0 29 0 nil 0) (32 0 29 1 nil 0) (31 0 29 2 nil 0) (34 0 33 0 nil 0) (36 0 33 1 nil 0) (37 0 33 2 nil 0) (35 0 33 3 nil 0) (39 0 38 0 nil 0) (41 0 38 1 nil 0) (40 0 38 2 nil 0) (43 0 42 0 nil 0) (45 0 42 1 nil 0) (46 0 42 2 nil 0) (44 0 42 3 nil 0) (49 0 50 0 nil 0) (48 0 50 1 nil 0) (47 0 50 2 nil 0))) nil 6.17))
