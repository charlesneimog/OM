; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 299.15771484375D0 190) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "05 boulez_structures_ia_5" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 242 195) (quote "In this example the matrix generated$by Original series ordered$transpositions is mapped on$amplitudes, from pppp to ffff.$$References:$$Ligeti, György (1960), Pierre Boulez,$«die Reihe» n. 4, Theodore Presser$Co., Pennsylvania (German original$edition$Universal Edition, Wien 1958.") "" (om-make-point 689 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 365 322) (om-make-point 364 198) (load-buffer-textfile (quote ("(p pp p pp ppp pppp quasi_p ppp pppp quasi_p mp mp)" "(pp ppp pp ppp pppp mp p pppp mp p quasi_p quasi_p)" "(p pp p pp ppp pppp quasi_p ppp pppp quasi_p mp mp)" "(pp ppp pp ppp pppp mp p pppp mp p quasi_p quasi_p)" "(ppp pppp ppp pppp mp quasi_p pp mp quasi_p pp p p)" "(pppp mp pppp mp quasi_p p ppp quasi_p p ppp pp pp)" "(quasi_p p quasi_p p pp ppp mp pp ppp mp pppp pppp)" "(ppp pppp ppp pppp mp quasi_p pp mp quasi_p pp p p)" "(pppp mp pppp mp quasi_p p ppp quasi_p p ppp pp pp)" "(quasi_p p quasi_p p pp ppp mp pp ppp mp pppp pppp)" "(mp quasi_p mp quasi_p p pp pppp p pp pppp ppp ppp)" "(mp quasi_p mp quasi_p p pp pppp p pp pppp ppp ppp)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-MATRIX-AMPS-MOD" (quote fdsdb_xxth_ct::o-matrix-amps-mod) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil) (om-load-inputfun (quote input-funbox) "Module" "MODULE" 12))) (om-make-point 417 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 63 322) (om-make-point 276 189) (load-buffer-textfile (quote ("(p pp ff f quasi_f mf quasi_p ppp pppp fff mp ffff)" "(pp ppp f quasi_f mf mp p pppp ffff ff quasi_p fff)" "(ff f p pp ppp pppp fff quasi_f mf quasi_p ffff mp)" "(f quasi_f pp ppp pppp ffff ff mf mp p fff quasi_p)" "(quasi_f mf ppp pppp ffff fff f mp quasi_p pp ff p)" "(mf mp pppp ffff fff ff quasi_f quasi_p p ppp f pp)" "(quasi_p p fff ff f quasi_f mp pp ppp ffff mf pppp)" "(ppp pppp quasi_f mf mp quasi_p pp ffff fff f p ff)" "(pppp ffff mf mp quasi_p p ppp fff ff quasi_f pp f)" "(fff ff quasi_p p pp ppp ffff f quasi_f mp pppp mf)" "(mp quasi_p ffff fff ff f mf p pp pppp quasi_f ppp)" "(ffff fff mp quasi_p p pp pppp ff f mf ppp quasi_f)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-MATRIX-AMPS" (quote fdsdb_xxth_ct::o-matrix-amps) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil))) (om-make-point 130 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 521 189) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 41 40) (om-make-point 615 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7400) (6900) (6800) (6700) (6600) (6400) (7300) (7200) (7000) (6500) (7100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (6 1 2 0 nil 0) (5 0 2 1 nil 0) (4 0 3 1 nil 0) (6 1 4 0 nil 0))) nil 6.17))
