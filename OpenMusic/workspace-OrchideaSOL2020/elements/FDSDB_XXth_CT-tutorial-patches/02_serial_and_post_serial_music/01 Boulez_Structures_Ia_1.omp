; OM File Header - Saved 2021/08/05 18:54:15
; (6.17 :patc (om-make-point 55.0D0 10) (om-make-point 0 29) (om-make-point 1280 716) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "01 Boulez_Structures_Ia_1" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 259 450) (quote "This example and following analogous$ones take suggestion from Ligeti's$analysis on Boulez's \"Structures Ia\" for$two pianos.$$So \"o-matrix-pitches\" builds the$Original series matrix (ordered$transpositions), but, differently respect$to Boulez, not using the position index$of pitches in starting series, but$converting the pitches into pitch-classes$+ 1.$$\"o-matrix-pitches-mod\" applies the$same process, but with the further$possibility to filter the resulting$numbers by a module selected by the$user. Changing the module value and$evaluating the matrix, new values are$shown. This technique does not appear$in Boulez, it is a variation on Boulez's$technique.$$References:$$Ligeti, György (1960), Pierre Boulez,$«die Reihe» n. 4, Theodore Presser Co.,$Pennsylvania (German original edition$Universal Edition, Wien 1958.") "" (om-make-point 702 103) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 314 362) (om-make-point 195 195) (load-buffer-textfile (quote ("(4 3 4 3 2 1 5 2 1 5 6 6)" "(3 2 3 2 1 6 4 1 6 4 5 5)" "(4 3 4 3 2 1 5 2 1 5 6 6)" "(3 2 3 2 1 6 4 1 6 4 5 5)" "(2 1 2 1 6 5 3 6 5 3 4 4)" "(1 6 1 6 5 4 2 5 4 2 3 3)" "(5 4 5 4 3 2 6 3 2 6 1 1)" "(2 1 2 1 6 5 3 6 5 3 4 4)" "(1 6 1 6 5 4 2 5 4 2 3 3)" "(5 4 5 4 3 2 6 3 2 6 1 1)" "(6 5 6 5 4 3 1 4 3 1 2 2)" "(6 5 6 5 4 3 1 4 3 1 2 2)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 94 362) (om-make-point 195 195) (load-buffer-textfile (quote ("(4 3 10 9 8 7 5 2 1 11 6 12)" "(3 2 9 8 7 6 4 1 12 10 5 11)" "(10 9 4 3 2 1 11 8 7 5 12 6)" "(9 8 3 2 1 12 10 7 6 4 11 5)" "(8 7 2 1 12 11 9 6 5 3 10 4)" "(7 6 1 12 11 10 8 5 4 2 9 3)" "(5 4 11 10 9 8 6 3 2 12 7 1)" "(2 1 8 7 6 5 3 12 11 9 4 10)" "(1 12 7 6 5 4 2 11 10 8 3 9)" "(11 10 5 4 3 2 12 9 8 6 1 7)" "(6 5 12 11 10 9 7 4 3 1 8 2)" "(12 11 6 5 4 3 1 10 9 7 2 8)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 419 187) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-MATRIX-PITCHES-MOD" (quote fdsdb_xxth_ct::o-matrix-pitches-mod) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil) (om-load-inputfun (quote input-funbox) "Module" "MODULE" 12))) (om-make-point 330 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 40 39) (om-make-point 615 129) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (7400) (6900) (6800) (6700) (6600) (6400) (7300) (7200) (7000) (6500) (7100))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "O-MATRIX-PITCHES" (quote fdsdb_xxth_ct::o-matrix-pitches) (quote ((om-load-inputfun (quote input-funbox) "Series" "SERIES" nil))) (om-make-point 124 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 1 nil 0) (6 0 2 1 nil 0) (5 1 4 0 nil 0) (3 0 4 1 nil 0) (5 1 6 0 nil 0))) nil 6.17))
