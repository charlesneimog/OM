; OM File Header - Saved 2021/08/05 18:54:15
; (6.130002 :patc (om-make-point 10 60) (om-make-point 50 50) (om-make-point 781 577) "" 183 0 nil "2021/08/05 18:54:15")
; End File Header
(in-package :om)(load-lib-for (quote ("FDSDB_XXth_CT")))(setf *om-current-persistent* (om-load-patch1 "03 in-sorting" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 263 60) (quote "Sorts sublists of input list.$Second argument set ascending$or descending order, with values < or >.") nil (om-make-point 305 165) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 175 270) (om-make-point 210 114) (load-buffer-textfile (quote ("(1 2 3 4 5 7 9)" "(5 20 34 67 84)" "(1 2 3 4 4 8 45 98)" "(0 2 24 876 5678)" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 267 115) (om-make-point 29 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IN-SORTING" (quote fdsdb_xxth_ct::in-sorting) (quote ((om-load-inputfun (quote input-funbox) "Input list" "INPUT" nil) (om-load-inputfun (quote input-funbox) "Test: ascendent or descendent" "TEST" (quote <)))) (om-make-point 231 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 48 81) (om-make-point 410 30) (list (list 1 3 2 4 7 5 9) (list 84 5 20 34 67) (list 3 1 4 2 8 4 98 45) (list 876 24 5678 2 0)) "((1 3 2 4 7 5 9)(84 5 20 34 67)(3 1 4 2 8 4 98 45)(876 24 5678 2 0))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 1 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0))) nil 6.130002))
