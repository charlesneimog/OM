; OM File Header - Saved 2021/07/23 17:12:54
; (6.19 :patc (om-make-point 10 10) (om-make-point 430 233) (om-make-point 1101 658) "" 183 0 "2021/07/23 14:39:26" "2021/07/23 17:12:54")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "Patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 729 305) (om-make-point 28 32) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CKN-IN-FILES" (quote ckn-in-files) (quote ((om-load-inputfun (quote input-funbox) "PATH" "PATH" nil) (om-load-inputfun (quote input-funbox) "TYPE" "TYPE" nil))) (om-make-point 835 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 371 182) (om-make-point 49 32) (quote :wav) ":wav" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 391 289) (om-make-point 36 32) 90 "90" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CKN-DINAMICS" (quote ckn-dinamics) (quote ((om-load-inputfun (quote input-funbox) "LIST-OF-SAMPLES" "LIST-OF-SAMPLES" nil) (om-load-inputfun (quote input-funbox) "VELOCITY" "VELOCITY" nil))) (om-make-point 335 338) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 227 156) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 186 157) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CKN-FIND-THE-SAMPLES" (quote ckn-find-the-samples) (quote ((om-load-inputfun (quote input-funbox) "WHERE-IS-THE-NOME" "WHERE-IS-THE-NOME" nil) (om-load-inputfun (quote input-funbox) "NOTE" "NOTE" nil) (om-load-inputfun (quote input-funbox) "ORCHIDEASOL" "ORCHIDEASOL" nil) (om-load-inputfun (quote input-funbox) "PATH-OF-THE-INSTRUMENT" "PATH-OF-THE-INSTRUMENT" nil) (om-load-inputfun (quote input-funbox) "TYPE" "TYPE" (quote wav)))) (om-make-point 166 223) (om-make-point 268 44) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 872 490) (om-make-point 99 76) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 817 346) (om-make-point 51 32) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-POSITION" (quote ckn-position) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "MY-NUMBER" nil))) (om-make-point 787 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "SYMB" (list "C3")) (om-load-inputfunmenu1 (quote input-funmenu) "octave of middle C" "MIDDLE-C" (list "C3") (list (list "middle-C = 3" 3) (list "middle-C = 4" 4))))) (om-make-point 701 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1251/2 180) (om-make-point 28 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 335 135) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" 3) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 3))) (om-make-point 285 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 196 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 60 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-FILENAME" (quote get-filename) (quote ((om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 50 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 184 153) (om-make-point 36 32) "-" "\"-\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING-TO-LIST" (quote string-to-list) (quote ((om-load-inputfun (quote input-funbox) "STRING" "STRING" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 136 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (3 0 4 0 nil 0) (4 0 6 0 nil 0) (5 0 6 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 458 436)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1195/2 217) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 685 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 384 101) (om-make-point 167 32) "Winds/Flute/ordinario/" "\"Winds/Flute/ordinario/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MERGE-PATHNAMES" (quote merge-pathnames) (quote ((om-load-inputfun (quote input-funbox) "PATHNAME" "PATHNAME" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 664 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 63 16) (om-make-point 569 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Documentos/OrchideaSOL2020/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Documentos/OrchideaSOL2020/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 926 140) (om-make-point 44 32) (quote wav) "wav" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((16 0 1 0 nil 0) (18 0 1 1 nil 0) (8 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 7 0 nil 0) (5 0 7 1 nil 0) (17 0 7 2 nil 0) (15 0 7 3 nil 0) (2 0 7 4 nil 0) (1 0 8 0 nil 0) (10 0 8 1 nil 0) (11 0 10 0 nil 0) (9 0 10 1 nil 0) (14 0 11 0 nil 0) (0 0 11 1 nil 0) (12 0 13 1 nil 0) (13 0 14 0 nil 0) (1 0 14 1 nil 0) (15 0 16 0 nil 0) (17 0 16 1 nil 0))) nil 6.19))
