; OM File Header - Saved 2021/07/26 20:00:14
; (6.19 :patc (om-make-point 388 10) (om-make-point 50 50) (om-make-point 1322 644) "" 183 0 "2021/07/26 17:25:13" "2021/07/26 20:00:14")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"C:../../../Ircam Instrumentos/03 Clarinet in Bb/multiphonics/BbCl-mul-D4-G6+-C6+-C7+-mf.aif\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "Patch 4" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 794 317) (om-make-point 58 32) (list 0 12) "(0 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 576 347) (om-make-point 666 242) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (6178) (6180) (6180) (6180) (6180) (6180) (6180) (6182) (6184) (6184) (6184) (6186) (6188) (6188) (6188) (6188) (6188) (6186 8466) (6188 8466) (6188 8466) (6188 8466) (6188 8466) (6188 8466) (6188 7924 8468) (6188 7928 8466) (6188 7926 8466) (6190 7924 8466) (6188 7924 8466) (6188 7922 8464) (6188 7922 8464) (6188 7924 8464) (6188 7924 8466) (6188 7926 8466 8878) (6188 7926 8468 8878) (6188 7926 8466 8878) (6188 7926 8466 8878) (6188 7924 8464 8876 9664) (6186 7922 8464 8874 9664) (6186 7922 8464 8874 9662) (6186 7922 8464 8876 9664) (6186 7922 8466 8876 9664) (6186 7924 8466 8876 9666) (6186 7924 8464 8876 9664) (6184 7922 8462 8874 9662) (6184 7920 8460 8872 9412 9660) (6184 7918 8460 8870 9410 9658) (6184 7916 8460 8870 9410 9658) (6182 7918 8460 8872 9410 9660) (6184 7918 8462 8872 9412 9660) (6184 7920 8462 8874 9662) (6184 7922 8464 8876 9664) (6184 7922 8464 8876 9664) (6184 7922 8464 8874 9664) (6184 7922 8462 8874 9662) (6184 7922 8462 8874 9662) (6184 7922 8464 8874 9662) (6184 7922 8464 8874 9664) (6184 7924 8464 8876 9664) (6184 7926 8466 8876 9666) (6184 7926 8466 8876 9666) (6184 7924 8464 8876 9664) (6182 7924 8464 8874 9664) (6182 7922 8462 8874 9662) (6182 7922 8462 8872 9660) (6182 7922 8462 8872 9660) (6182 7922 8464 8874 9662) (6182 7924 8464 8876 9664) (6184 7924 8466 8876 9666) (6184 7926 8466 8876 9666) (6184 7926 8466 8876 9666) (6182 7926 8466 8876 9664) (6182 7926 8464 8876 9664) (6184 7924 8464 8874 9664) (6182 7924 8466 8876 9664) (6182 7926 8466 8876 9666) (6184 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9664) (6182 7926 8464 8874 9664) (6182 7926 8464 8874 9664) (6182 7926 8464 8874 9664) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7928 8466 8876 9666) (6182 7928 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8874 9666) (6182 7926 8464 8874 9664) (6182 7924 8464 8874 9664) (6182 7924 8464 8874 9662) (6180 7924 8464 8874 9662) (6180 7924 8464 8874 9662) (6182 7924 8464 8874 9662) (6182 7924 8464 8874 9664) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6182 7926 8466 8876 9666) (6180 7926 8464 8874 9664) (6180 7926 8464 8874 9664) (6182 7926 8464 8874 9664) (6180 7926 8464 8874 9664) (6180 7926 8464 8874 9664) (6180 7926 8466 8874 9666) (6180 7926 8466 8874 9666) (6180 7928 8466 8876 9666) (6180 7928 8466 8876 9666) (6180 7928 8466 8876 9666) (6180 7926 8466 8874 9664) (6180 7926 8464 8874 9664) (6180 7926 8464 8874 9664) (6180 7926 8466 8876 9666) (6180 7928 8466 8876 9666) (6180 7928 8466 8876 9666) (6180 7928 8466 8876 9666) (6180 7930 8466 8876 9666) (6180 7930 8468 8876 9666) (6180 7930 8468 8876 9668) (6180 7932 8468 8878 9668) (6180 7932 8468 8878 9668) (6180 7932 8468 8878 9668) (6180 7934 8468 8878 9668) (6180 7932 8468 8878 9668) (6178 7930 8466 8876 9666) (6178 7926 8462 8870 9664) (6178 7922 8460 8870 9662) (6180 7920 8460 8870 9662) (6180 7920 8462 8870 9662) (6180 7922 8462 8872) (6180 7922 8462 8872) (6180 7924 8464 8874) (6180 7924 8464 8874) (6180 7926 8464 8874) (6180 7926 8464 8874) (6180 7924 8464 8872) (6178 7924 8464 8872) (6180 7926 8464 8874) (6180 7926 8466 8874) (6180 7926 8466 8874) (6180 7928 8466 8876) (6180 7928 8466 8876) (6180 7928 8466 8874) (6180 7928 8466 8874) (6180 7928 8466 8874) (6178 7928 8466 8874) (6180 7930 8466 8876) (6180 7928 8466 8876) (6180 7930 8466 8876) (6180 7930 8468 8876) (6180 7930 8468 8876) (6178 7930 8466 8876) (6178 7930 8466 8876) (6180 7930 8466 8876) (6180 7930 8466 8876) (6178 7930 8466 8876) (6180 7930 8468 8878) (6178 7932 8468 8878) (6178 7932 8468 8876) (6180 7932 8468 8876) (6180 7930 8468 8876) (6180 7930 8468 8876) (6178 7930 8468 8876) (6178 7932 8468 8876) (6180 7932 8468 8876) (6180 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8878) (6180 7932 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7932 8468 8878) (6178 7932 8468 8878) (6178 7934 8468 8878) (6178 7932 8468 8878) (6180 7932 8468 8878) (6180 7932 8468 8878) (6180 7934 8468 8878) (6180 7932 8468 8878) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6180 7932 8468 8876) (6180 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8878) (6178 7932 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8878) (6178 7932 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8878) (6178 7934 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8878) (6178 7934 8468 8878) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8466 8876) (6178 7930 8466 8874) (6178 7930 8466 8874) (6178 7930 8466 8874) (6178 7930 8466 8876) (6178 7930 8466 8876) (6178 7930 8466 8876) (6178 7930 8466 8874) (6178 7930 8466 8874) (6178 7928 8466 8874) (6178 7928 8466 8874) (6178 7930 8466 8874) (6178 7928 8466 8874) (6176 7928 8464 8874) (6176 7926 8464 8872) (6178 7926 8464 8874) (6178 7928 8466 8874) (6178 7928 8466 8874) (6178 7930 8466 8876) (6178 7930 8466 8876) (6178 7930 8466 8874) (6178 7930 8466 8874) (6178 7930 8466 8874) (6178 7928 8466 8874) (6178 7928 8466 8874) (6178 7930 8466 8876) (6178 7930 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8466 8876) (6178 7932 8466 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8876) (6178 7932 8468 8878) (6178 7934 8468 8878) (6178 7936 8468 8878) (6178 7934 8468 8878) (6176 7934 8468 8878) (6176 7934 8470 8878) (6176 7936 8470 8878) (6176 7936 8468 8878 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7932 8468 8876 10210) (6176 7932 8468 8876 10208) (6176 7932 8468 8876 10208) (6176 7932 8468 8876 10210) (6176 7932 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7932 8468 8876 10210) (6176 7932 8468 8876 10208) (6176 7932 8466 8876 10208) (6176 7930 8466 8874 10208) (6176 7930 8466 8874 10206) (6176 7928 8466 8874 9664 10206) (6176 7928 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 10208) (6176 7930 8466 8874 10208) (6176 7930 8466 8874 9664 10206) (6176 7930 8466 8874 9664 10206) (6176 7930 8466 8874 9664 10206) (6176 7928 8464 8874 9664 10206) (6176 7928 8464 8872 9664 10206) (6176 7928 8464 8872 9664 10204) (6176 7926 8464 8872 9662 10204) (6176 7926 8464 8872 9664 10204) (6176 7926 8464 8872 9664 10204) (6176 7928 8464 8874 9664 10204) (6176 7928 8464 8872 9664 10204) (6176 7928 8464 8872 9664 10204) (6176 7928 8464 8872 9664 10206) (6176 7926 8464 8872 9664 10206) (6176 7928 8464 8874 9664 10204) (6176 7928 8466 8874 9666 10206) (6176 7928 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9664 10206) (6176 7928 8466 8874 9664 10206) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10208) (6176 7932 8468 8876 9668 10210) (6176 7934 8468 8878 9668 10210) (6176 7934 8468 8878 9670 10210) (6176 7934 8468 8878 9670 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10208) (6176 7932 8466 8876 10208) (6176 7932 8466 8876 10208) (6176 7930 8466 8874 10208) (6176 7930 8466 8876 9668 10208) (6176 7932 8468 8876 9670 10210) (6176 7934 8468 8876 9670 10210) (6176 7934 8468 8876 9668 10208) (6176 7932 8466 8876 9666 10208) (6176 7932 8466 8874 9664 10208) (6176 7930 8466 8874 9662 10206) (6176 7928 8464 8874 9664 10206) (6176 7928 8466 8874 9664 10206) (6176 7928 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10208) (6176 7932 8466 8874 9666 10208) (6176 7930 8466 8874 9664 10208) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10208) (6176 7932 8466 8876 9668 10208) (6176 7932 8468 8876 9668 10210) (6176 7932 8468 8876 10208) (6176 7932 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7934 8468 8876 10210) (6176 7932 8468 8876 10210) (6176 7934 8468 8876 10208) (6176 7932 8468 8876) (6176 7932 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7932 8468 8876 9666) (6176 7932 8466 8876 9666) (6176 7932 8466 8876 9666 10208) (6176 7932 8466 8876 9666 10208) (6176 7930 8466 8874 9666 10208) (6176 7932 8466 8876 9666 10208) (6176 7932 8468 8876 9668 10210) (6176 7932 8468 8876 9670 10210) (6176 7934 8468 8876 9668 10210) (6176 7934 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8466 8874 9666 10208) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7934 8468 8876 9668 10210) (6176 7934 8468 8876 9668 10210) (6176 7934 8468 8876 9666 10208) (6176 7932 8466 8874 9666 10208) (6174 7932 8466 8874 9666 10208) (6176 7932 8466 8874 9666 10208) (6176 7932 8468 8876 9668 10210) (6176 7932 8468 8876 9670 10210) (6176 7934 8468 8878 9670 10210) (6176 7936 8470 8878 9672 10212) (6176 7936 8470 8878 9670) (6176 7936 8470 8878 9670) (6176 7936 8470 8878 9670) (6176 7936 8468 8878 9668) (6176 7934 8470 8878 9670) (6176 7936 8470 8878 9670) (6176 7936 8468 8878 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9666) (6176 7932 8466 8874 9666) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9666 10208) (6176 7932 8466 8876 9666) (6176 7932 8466 8876 9666 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8466 8876 9666 10208) (6176 7932 8466 8874 9666 10208) (6176 7930 8466 8874 9664 10208) (6176 7930 8466 8874 9666 10206) (6176 7930 8466 8874 9666 10208) (6176 7930 8466 8874 9666 10208) (6176 7932 8468 8876 9668 10208) (6176 7932 8468 8876 10210) (6176 7934 8468 8876) (6176 7934 8468 8876) (6176 7936 8468 8876) (6176 7936 8470 8876) (6176 7936 8468 8876) (6176 7934 8468 8876) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8878 9668) (6176 7934 8468 8878 9668) (6176 7934 8468 8878 9670) (6176 7934 8468 8878 9670) (6176 7936 8468 8878 9670) (6176 7936 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8878 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9668) (6176 7934 8468 8876 9670) (6176 7934 8468 8876 9670) (6176 7934 8468 8876 9670) (6176 7934 8468 8876) (6176 7934 8468 8876) (6176 7934 8468 8876) (6176 7932 8468 8876) (6176 7932 8466 8876) (6174 7932 8466 8876 10208) (6176 7932 8466 8874 10208) (6176 7932 8466 8874 10208) (6176 7932 8468 8876 10208) (6176 7932 8468 8876) (6176 7932 8466 8876 10208) (6176 7932 8468 8876 10208) (6176 7932 8468 8876 10208) (6176 7932 8466 8876 10208) (6176 7932 8466 8874) (6176 7932 8466 8874) (6174 7932 8466 8874) (6174 7930 8466 8874) (6174 7930 8466 8874) (6176 7930 8466 8874) (6176 7932 8466 8874) (6176 7932 8466 8874) (6174 7932 8466 8874) (6174 7930 8466 8874) (6174 7930 8466 8874) (6174 7930 8466 8874) (6174 7930 8466 8874) (6176 7930 8466 8874) (6176 7930 8466 8874) (6174 7932 8466 8874) (6176 7932 8466 8874) (6176 7932 8466 8876 9666) (6176 7932 8466 8876 9666) (6176 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8468 8876 9666) (6174 7934 8468 8876 9666) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7936 8468 8876 9668) (6174 7936 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9670) (6174 7934 8468 8876 9670) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7934 8468 8876 9668) (6174 7932 8468 8876 9668) (6174 7932 8466 8876 9668) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7932 8466 8874 9666) (6172 7930 8466 8874 9666) (6172 7930 8466 8872 9664) (6172 7930 8464 8872 9664) (6174 7928 8464 8872 9664) (6174 7928 8464 8872 9664) (6174 7928 8464 8872 9664) (6174 7930 8466 8874 9664) (6174 7930 8466 8874 9666) (6174 7930 8466 8872 9664) (6174 7930 8466 8874 9664) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7932 8466 8874 9666) (6174 7930 8466 8872 9666) (6172 7930 8464 8872 9664) (6172 7930 8464 8872 9664) (6174 7930 8464 8872 9664) (6174 7930 8466 8872 9664) (6174 7930 8466 8874 9666) (6174 7930 8466 8874 9666) (6174 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6172 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6174 7932 8466 8874 9668) (6174 7932 8468 8874 9668) (6174 7934 8468 8876 9668) (6174 7936 8470 8878) (6174 7938 8470 8878) (6174 7940 8470) (6174 7940 8470) (6174 8470) (6174 8470) (6172 8470) (6172 8470) (6172 8470) (6172 8472) (6172 8474) (6172 8476) (6172 8476) (6172 8474) (6172 8472) (6172 8470) (6172 8468) (6172 8468) (6172 8470) (6170 8470) (6170 8470) (6170) (6170) (6170) (6170) (6172) (6172) (6172) (6170) (6170) (6170) (6170) (6170) (6170) (6170) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :lonset (quote (0 12 24 36 48 60 72 84 96 108 120 132 144 156 168 180 192 204 216 228 240 252 264 276 288 300 312 324 336 348 360 372 384 396 408 420 432 444 456 468 480 492 504 516 528 540 552 564 576 588 600 612 624 636 648 660 672 684 696 708 720 732 744 756 768 780 792 804 816 828 840 852 864 876 888 900 912 924 936 948 960 972 984 996 1008 1020 1032 1044 1056 1068 1080 1092 1104 1116 1128 1140 1152 1164 1176 1188 1200 1212 1224 1236 1248 1260 1272 1284 1296 1308 1320 1332 1344 1356 1368 1380 1392 1404 1416 1428 1440 1452 1464 1476 1488 1500 1512 1524 1536 1548 1560 1572 1584 1596 1608 1620 1632 1644 1656 1668 1680 1692 1704 1716 1728 1740 1752 1764 1776 1788 1800 1812 1824 1836 1848 1860 1872 1884 1896 1908 1920 1932 1944 1956 1968 1980 1992 2004 2016 2028 2040 2052 2064 2076 2088 2100 2112 2124 2136 2148 2160 2172 2184 2196 2208 2220 2232 2244 2256 2268 2280 2292 2304 2316 2328 2340 2352 2364 2376 2388 2400 2412 2424 2436 2448 2460 2472 2484 2496 2508 2520 2532 2544 2556 2568 2580 2592 2604 2616 2628 2640 2652 2664 2676 2688 2700 2712 2724 2736 2748 2760 2772 2784 2796 2808 2820 2832 2844 2856 2868 2880 2892 2904 2916 2928 2940 2952 2964 2976 2988 3000 3012 3024 3036 3048 3060 3072 3084 3096 3108 3120 3132 3144 3156 3168 3180 3192 3204 3216 3228 3240 3252 3264 3276 3288 3300 3312 3324 3336 3348 3360 3372 3384 3396 3408 3420 3432 3444 3456 3468 3480 3492 3504 3516 3528 3540 3552 3564 3576 3588 3600 3612 3624 3636 3648 3660 3672 3684 3696 3708 3720 3732 3744 3756 3768 3780 3792 3804 3816 3828 3840 3852 3864 3876 3888 3900 3912 3924 3936 3948 3960 3972 3984 3996 4008 4020 4032 4044 4056 4068 4080 4092 4104 4116 4128 4140 4152 4164 4176 4188 4200 4212 4224 4236 4248 4260 4272 4284 4296 4308 4320 4332 4344 4356 4368 4380 4392 4404 4416 4428 4440 4452 4464 4476 4488 4500 4512 4524 4536 4548 4560 4572 4584 4596 4608 4620 4632 4644 4656 4668 4680 4692 4704 4716 4728 4740 4752 4764 4776 4788 4800 4812 4824 4836 4848 4860 4872 4884 4896 4908 4920 4932 4944 4956 4968 4980 4992 5004 5016 5028 5040 5052 5064 5076 5088 5100 5112 5124 5136 5148 5160 5172 5184 5196 5208 5220 5232 5244 5256 5268 5280 5292 5304 5316 5328 5340 5352 5364 5376 5388 5400 5412 5424 5436 5448 5460 5472 5484 5496 5508 5520 5532 5544 5556 5568 5580 5592 5604 5616 5628 5640 5652 5664 5676 5688 5700 5712 5724 5736 5748 5760 5772 5784 5796 5808 5820 5832 5844 5856 5868 5880 5892 5904 5916 5928 5940 5952 5964 5976 5988 6000 6012 6024 6036 6048 6060 6072 6084 6096 6108 6120 6132 6144 6156 6168 6180 6192 6204 6216 6228 6240 6252 6264 6276 6288 6300 6312 6324 6336 6348 6360 6372 6384 6396 6408 6420 6432 6444 6456 6468 6480 6492 6504 6516 6528 6540 6552 6564 6576 6588 6600 6612 6624 6636 6648 6660 6672 6684 6696 6708 6720 6732 6744 6756 6768 6780 6792 6804 6816 6828 6840 6852 6864 6876 6888 6900 6912 6924 6936 6948 6960 6972 6984 6996 7008 7020 7032 7044 7056 7068 7080 7092 7104 7116 7128 7140 7152 7164 7176 7188 7200 7212 7224 7236 7248 7260 7272 7284 7296 7308 7320 7332 7344 7356 7368 7380 7392 7404 7416 7428 7440 7452 7464 7476 7488 7500 7512 7524 7536 7548 7560 7572 7584 7596 7608 7620 7632 7644 7656 7668 8308)) :ldur (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :lvel (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (20) (21) (21) (21) (21) (22) (22) (23) (24) (24) (25) (25) (25) (25) (25) (25) (25) (25 20) (25 21) (25 21) (25 21) (25 21) (25 21) (25 20 21) (25 20 21) (25 20 22) (25 21 22) (25 21 22) (25 21 23) (25 21 23) (25 21 24) (25 21 24) (25 21 25 20) (25 22 26 20) (25 22 27 20) (25 22 28 21) (25 22 29 21 20) (25 23 29 21 20) (25 23 30 21 21) (25 23 31 21 21) (25 23 31 21 21) (25 23 32 21 21) (25 23 32 21 21) (25 23 32 21 21) (25 24 32 21 20 21) (25 24 32 21 20 21) (25 24 32 21 20 21) (25 24 32 21 20 21) (25 24 32 21 20 21) (25 24 33 21 21) (25 24 33 21 21) (25 23 33 21 21) (25 23 33 21 21) (25 23 33 21 21) (25 23 33 21 21) (25 23 33 21 21) (25 23 33 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 33 21 21) (25 24 33 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 34 21 21) (25 23 35 21 21) (25 23 35 21 21) (25 23 35 21 21) (25 23 35 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 36 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 23 37 21 21) (25 24 37 21 21) (24 24 38 21 21) (24 24 38 21 21) (25 24 38 21 21) (25 24 38 21 21) (25 24 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 39 21 21) (25 23 39 21 21) (25 23 39 21 21) (24 23 38 21 21) (25 23 38 21 21) (25 23 38 21 21) (25 23 39 21 21) (25 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 38 21 21) (25 23 36 21 21) (25 23 34 21 21) (25 23 33 21 20) (25 23 33 21 20) (25 23 33 21) (25 23 32 21) (25 23 32 21) (25 23 33 21) (25 23 32 21) (25 23 32 21) (25 23 32 21) (25 23 33 21) (25 23 33 21) (25 23 33 21) (25 22 33 21) (25 22 33 21) (25 22 33 21) (25 22 33 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 32 21) (25 22 33 21) (25 22 33 21) (25 22 33 21) (25 22 33 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 34 21) (25 22 35 21) (25 22 35 21) (25 22 35 21) (25 22 35 21) (25 22 35 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 36 21) (25 22 37 21) (25 22 37 21) (25 22 37 21) (25 22 37 21) (25 22 37 21) (25 22 37 21) (25 22 37 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 39 21) (25 22 39 21) (25 22 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 38 21) (25 23 38 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 23 39 21) (25 22 39 21) (25 22 39 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 38 21) (25 22 39 21) (25 22 39 21) (25 22 39 21) (25 22 40 21) (25 22 40 21) (25 22 40 21) (25 22 41 21) (24 22 41 21) (24 22 42 21) (24 22 43 21) (24 23 44 21 20) (24 23 44 21 20) (24 23 45 21 20) (24 23 46 21 20) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 20) (24 23 46 21 20) (24 23 46 21 20) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 21) (24 23 46 21 20 21) (24 23 47 21 20 21) (24 23 47 21 20 21) (24 23 47 21 21) (24 23 46 21 21) (24 23 46 21 20 21) (24 23 46 21 20 21) (24 23 46 21 20 21) (24 23 46 21 21 21) (24 23 46 21 21 21) (24 23 46 21 21 21) (24 23 46 21 21 21) (24 24 46 21 21 21) (24 23 46 21 21 21) (24 23 46 21 21 21) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 21 20) (24 23 46 21 20 20) (24 23 45 21 20 20) (24 23 45 21 20) (24 23 45 21 20) (24 23 46 21 20) (24 23 46 21 20) (24 23 46 21 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 21 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 46 21 20 20) (24 23 45 21 20 20) (24 23 45 21 20 20) (24 23 45 21 20 20) (24 23 45 21 20 20) (24 23 45 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20) (24 23 44 21 20) (24 23 44 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 44 21 20 20) (24 23 43 21 20 20) (24 23 43 21 21 20) (24 22 42 21 21) (24 22 42 21 21) (24 22 42 21 21) (24 23 42 21 21) (24 23 42 21 21) (24 23 42 21 21) (24 23 42 21 21) (24 23 42 21 21) (24 23 42 21 21) (24 23 43 21 21) (24 23 43 21 21 20) (24 23 43 21 21 20) (24 23 43 21 21 20) (24 23 43 21 21 20) (24 23 43 21 21) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 43 21 20 20) (24 23 42 21 20) (24 23 42 21) (24 23 42 21) (24 23 42 21) (24 23 41 21) (24 23 41 21) (24 23 41 21) (24 23 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 22 41 21 20) (24 22 41 21 20) (24 22 41 21 20) (24 23 41 21 20) (24 23 41 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21) (24 23 43 21) (24 23 43 21) (24 23 43 21) (24 23 43 21) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21 20) (24 23 43 21) (24 23 43 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 42 21 20) (24 23 42 21) (24 23 42 21) (24 23 42 21) (24 23 42 21) (24 23 42 21) (24 23 42 21) (24 23 41 21) (24 23 41 21) (24 23 41 21) (24 23 41 21) (24 23 40 21) (24 23 40 21) (24 23 40 21) (24 23 40 21) (24 23 40 21) (24 23 40 21) (24 23 40 21) (24 23 40 21 20) (24 23 40 21 20) (24 23 40 21 20) (24 23 40 21 20) (24 23 40 21 20) (24 23 40 21 21) (24 23 40 21 21) (24 23 40 21 21) (24 23 39 21 21) (24 22 39 21 21) (24 22 39 21 21) (24 22 39 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 22 38 21 21) (24 23 38 21 21) (24 23 38 21 21) (24 23 38 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 21) (24 23 39 21 22) (24 23 39 21 22) (24 23 39 21 22) (24 23 39 21 22) (24 23 39 21 22) (24 23 39 21 22) (24 23 39 21 22) (24 23 38 21 22) (24 23 38 21 22) (24 23 38 21 22) (24 23 38 21 22) (24 23 38 21 22) (24 22 38 21 22) (24 22 38 21 22) (24 22 37 21 22) (24 22 37 21 22) (24 22 37 21 22) (24 23 37 21 22) (24 23 37 21 22) (24 23 37 21 21) (24 23 37 21 21) (24 23 37 21 21) (24 22 37 21 21) (24 22 37 21 21) (24 22 36 21 21) (24 22 36 21 21) (24 22 36 21 21) (24 22 36 21 21) (24 22 35 21 21) (24 22 35 21 21) (24 22 35 21 21) (24 22 35 21 21) (24 22 34 21 21) (24 22 34 21 21) (24 22 34 21 21) (24 22 33 21 21) (24 22 33 21 21) (24 22 32 21 21) (24 22 31 21 21) (24 22 31 21 21) (24 21 30 21 20) (24 21 29 21 20) (24 21 28 21 20) (24 21 28 21 20) (24 21 27 20 20) (24 21 26 20) (24 21 25 20) (23 20 24) (23 20 24) (23 23) (23 22) (23 22) (23 21) (23 21) (23 21) (23 21) (23 20) (23 20) (23 20) (23 20) (22 20) (22 20) (22 20) (22 20) (22 20) (22 20) (22) (22) (22) (21) (21) (21) (21) (21) (21) (21) (21) (21) (20) (20) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :loffset (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :lchan (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)) :legato 0)))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 1300 552) 0 1000 nil 3/100 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 36 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->CHORD" (quote fft->chord) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "CKN-FFT-INSTANCE" 6000))) (om-make-point 666 234) nil (list (list (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180)) :ldur (quote (1000)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182)) :ldur (quote (1000)) :lvel (quote (23)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184)) :ldur (quote (1000)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184)) :ldur (quote (1000)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188)) :ldur (quote (1000)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 8466)) :ldur (quote (1000 1000)) :lvel (quote (25 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7924 8468)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 20 21)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7928 8466)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 20 21)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7926 8466)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 20 22)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6190 7924 8466)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 22)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7924 8466)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 22)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7922 8464)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 23)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7922 8464)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 23)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7924 8464)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7924 8466)) :ldur (quote (1000 1000 1000)) :lvel (quote (25 21 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7926 8466 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 21 25 20)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7926 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 26 20)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7926 8466 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 27 20)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7926 8466 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 28 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6188 7924 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 22 29 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7922 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 29 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7922 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 30 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7922 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 31 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7922 8466 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 31 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7924 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 32 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6186 7924 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 32 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8462 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 32 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7920 8460 8872 9412 9660)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (25 24 32 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7918 8460 8870 9410 9658)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (25 24 32 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7916 8460 8870 9410 9658)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (25 24 32 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7918 8460 8872 9410 9660)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (25 24 32 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7918 8462 8872 9412 9660)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (25 24 32 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7920 8462 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8462 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8462 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7922 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7924 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7924 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7922 8462 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7922 8462 8872 9660)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7922 8462 8872 9660)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7922 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7924 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7924 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8466 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6184 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7924 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 24 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7924 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 24 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8874 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7924 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 24 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6182 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7934 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7926 8462 8870 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7922 8460 8870 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7920 8460 8870 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7920 8462 8870 9662)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (25 23 33 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7922 8462 8872)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7922 8462 8872)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7924 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7924 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7924 8464 8872)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7924 8464 8872)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7926 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7928 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 32 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 33 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 34 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 35 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 35 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 35 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 35 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 35 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6180 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 36 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 37 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7926 8464 8872)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7926 8464 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 23 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7928 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7930 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 38 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 39 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7932 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7936 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6178 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (25 22 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 22 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8470 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 22 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 22 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8878 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 10206)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 47 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 47 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 47 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8872 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8872 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7926 8464 8872 9662 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7926 8464 8872 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 24 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7926 8464 8872 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8874 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 21)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8872 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8872 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8872 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7926 8464 8872 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8874 9664 10204)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9664 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9662 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8464 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9664 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7928 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 46 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 45 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 44 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9670 10210)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878 9672 10212)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8470 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9664 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10206)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874 9666 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 9668 10208)) :ldur (quote (1000 1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20 20)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10210)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8470 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8878 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7936 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 41 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8878 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7934 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 43 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 43 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8468 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 10208)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 42 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 42 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 41 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7930 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 23 40 21)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6176 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8468 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 40 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7936 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7936 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9670)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 39 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 38 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 37 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 37 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7930 8466 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 37 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7930 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 37 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7928 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 37 21 22)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7928 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7928 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 23 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 37 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 36 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8872 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7930 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7930 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8464 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 35 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8872 9664)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7930 8466 8874 9666)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 34 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 33 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 32 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 31 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 22 31 21 21)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 21 30 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 21 29 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8466 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 21 28 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7932 8468 8874 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 21 28 21 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7934 8468 8876 9668)) :ldur (quote (1000 1000 1000 1000 1000)) :lvel (quote (24 21 27 20 20)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7936 8470 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 21 26 20)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7938 8470 8878)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (24 21 25 20)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7940 8470)) :ldur (quote (1000 1000 1000)) :lvel (quote (23 20 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 7940 8470)) :ldur (quote (1000 1000 1000)) :lvel (quote (23 20 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 8470)) :ldur (quote (1000 1000)) :lvel (quote (23 23)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6174 8470)) :ldur (quote (1000 1000)) :lvel (quote (23 22)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8470)) :ldur (quote (1000 1000)) :lvel (quote (23 22)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8470)) :ldur (quote (1000 1000)) :lvel (quote (23 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8470)) :ldur (quote (1000 1000)) :lvel (quote (23 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8472)) :ldur (quote (1000 1000)) :lvel (quote (23 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8474)) :ldur (quote (1000 1000)) :lvel (quote (23 21)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8476)) :ldur (quote (1000 1000)) :lvel (quote (23 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8476)) :ldur (quote (1000 1000)) :lvel (quote (23 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8474)) :ldur (quote (1000 1000)) :lvel (quote (23 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8472)) :ldur (quote (1000 1000)) :lvel (quote (23 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8470)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8468)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8468)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172 8470)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170 8470)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170 8470)) :ldur (quote (1000 1000)) :lvel (quote (22 20)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (22)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6172)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (21)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6170)) :ldur (quote (1000)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 767 103) (om-make-point 41 32) -50 "-50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->SIN-MODEL" (quote fft->sin-model) (quote ((om-load-inputfun (quote input-funbox) "A list of ckn-fft-instance class." "CKN-INSTANCES" (list nil)) (om-load-inputfun (quote input-funbox) "Threshold in dB." "DB-FILTER" -60))) (om-make-point 692 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-FFT" (quote do-fft) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "SOUND" nil) (om-load-inputfun (quote input-funbox) "FFT-size" "FFT-SIZE" 2048) (om-load-inputfun (quote input-funbox) "Hop-size" "HOP-SIZE" 512) (om-load-inputfunmenu1 (quote input-funmenu) "Windows-type" "WINDOW-TYPE" 1 (list (list "hann" 1) (list "blackman" 2) (list "barlett" 3) (list "hamming" 4) (list "rectangular" 5) (list "nenhuma" 6))))) (om-make-point 351 153) (om-make-point 203 76) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BbCl-mul-D4-G6+-C6+-C7+-mf.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 336 11) (om-make-point 205 86) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Ircam Instrumentos" "03 Clarinet in Bb" "multiphonics")) :device nil :host nil :name "BbCl-mul-D4-G6+-C6+-C7+-mf" :type "aif") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "BbCl-mul-D4-G6+-C6+-C7+-mf.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (0 0 1 2 nil 0) (4 0 2 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 5 0 nil 0))) nil 6.19))
