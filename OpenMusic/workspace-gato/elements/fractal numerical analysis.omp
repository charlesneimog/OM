; OM File Header - Saved 2016/09/24 12:55:36
; (6.1001 :patc (om-make-point 461 334) (om-make-point 50 23) (om-make-point 1304 1001) "" 183 0 "2015/07/16 19:48:21" "2015/07/16 19:48:21")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fractal study cello" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 1107 662) (quote "$2,0 - (0 -200 200 300 -300                               200 -200 100 100 -300 100 0 -300 100 200 0 -200 0 200 -100 0 100 -200 -100 400 -300 200 -200 200 -500 800 -700 600 -400 200 -200 200 -400 600 -600 600 -400 200 -300 400 -400 400 -300 200 -400 600 -700 800 -400 0 -300 600 -400 200 -400 600 -400 200 -700 1200 -400 -400 -300 1000 -400 -200 -200 600 -400 200)$2,1 - (100 200 -100 200                                  -200 200 -100 -100 300 -100 0 300 -100 -200 0 200 0 -200 100 0 -100 200 100 -400 300 -200 200 -200 500 -800 700 -600 400 -200 200 -200 400 -600 600 -600 400 -200 300 -400 400 -400 300 -200 400 -600 700 -800 400 0 300 -600 400 -200 400 -600 400 -200 700 -1200 400 400 300 -1000 400 200 200 -600 400 -200)$$$3,0 - (                -100 100 200 0 -100 100 0 -200 400 -400 400 -600 500 -400 500 -700 700 -400 200 -700 1100 -400 0 -400 800 -400 -200 -200 700 -400 0 -300 800 -400 -300 0 700 -400 0 -600 800 -400 -300 400 700 -400 0 -800 800 -400)$3,1 - (                                             0 200 0 200 -100 200 -300 500 -700 400 -400 400 -300 300 -400 300 -300 600 -400 -100 -300 800 -400 200 -600 1000 -400 0 -500 800 -400 100 -600 1100 -400 0 -700 800 -400 0 -200 1100 -400 0 -1100 800 -400 200 -200)$3,2 - (                          100 200 -300 0 0 -100 300 -500 500 -200 400 -400 300 -300 500 -400 100 -400 900 -400 -300 -200 600 -400 0 -400 800 -400 100 -400 700 -400 0 -500 800 -400 100 -200 800 -400 0 -900 800 -400 100 200 600 -400 0)$$4,0 - (-200 500 -100 -100 -200 100 -200           200 -200 100 100 -300 100 0 -300 100 200 0 -200 0 200 -100 0 100 -200 -100 400 -300 200 -200 200 -500 800 -700 600 -400 200)$4,1 - (300 100 0 -200 200 300 -300                   200 -200 100 100 -300 100 0 -300 100 200 0 -200 0 200 -100 0 100 -200 -100 400 -300 200 -200 200 -500 800 -700 600 -400 200)$4,2 - (0 0 0 200 -200 -300 300                          -200 200 -100 -100 300 -100 0 300 -100 -200 0 200 0 -200 100 0 -100 200 100 -400 300 -200 200 -200 500 -800 700 -600 400 -200)$4,3 - (100 0 100 200 -100 200                          -200 200 -100 -100 300 -100 0 300 -100 -200 0 200 0 -200 100 0 -100 200 100 -400 300 -200 200 -200 500 -800 700 -600 400 -200)$$6,0 - (0 200                                    0 -200 0 -200 100 -200 300 -500 700 -400 400 -400 300 -300 400 -300 300 -600 400 100 300 -800 400)$6,1 - (200 200              100 200 -300 0 0 -100 300 -500 500 -200 400 -400 300 -300 500 -400 100 -400 900 -400 -300 -200)$6,2 - (300 -300           -100 -200 300 0 0 100 -300 500 -500 200 -400 400 -300 300 -500 400 -100 400 -900 400 300 200)$6,3 - (300          -100 100 200 0 -100 100 0 -200 400 -400 400 -600 500 -400 500 -700 700 -400 200 -700 1100 -400 0)") "" (om-make-point 34 721) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 459 292) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 514 305) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 579 305) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 632 317) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 391 371) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 298 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 69 462) (om-make-point 954 143) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3800) (3900) (4100) (4000) (4200) (4000) (4200) (4100) (4000) (4300) (4200) (4200) (4500) (4400) (4200) (4200) (4400) (4400) (4200) (4300) (4300) (4200) (4400) (4500) (4100) (4400) (4200) (4400) (4200) (4700) (3900) (4600) (4000) (4400) (4200) (4400) (4200) (4600) (4000) (4600) (4000) (4400) (4200) (4500) (4100) (4500) (4100) (4400) (4200) (4600) (4000) (4700) (3900) (4300) (4300) (4600) (4000) (4400) (4200) (4600) (4000) (4400) (4200) (4900) (3700) (4100) (4500) (4800) (3800) (4200) (4400) (4600) (4000) (4400) (4200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000)) :ldur (quotelvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.090012 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 818 380) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote f) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "a list positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 114 365) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 416 608) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 313 611) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 367 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 766 312) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 406 301) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 699 302) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 44 79) (om-make-point 1201 146) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4000) (3800) (4000) (3900) (3800) (4100) (4000) (4000) (4300) (4200) (4000) (4000) (4200) (4200) (4000) (4100) (4100) (4000) (4200) (4300) (3900) (4200) (4000) (4200) (4000) (4500) (3700) (4400) (3800) (4200) (4000) (4200) (4000) (4400) (3800) (4400) (3800) (4200) (4000) (4300) (3900) (4300) (3900) (4200) (4000) (4400) (3800) (4500) (3700) (4100) (4100) (4400) (3800) (4200) (4000) (4400) (3800) (4200) (4000) (4700) (3500) (3900) (4300) (4600) (3600) (4000) (4200) (4400) (3800) (4200) (4000) (4400) (3800) (4200) (4000) (4600) (3600) (4000) (4200) (4600) (3600) (4000) (4200) (4400) (3800) (4200) (4000) (4500) (3700) (4100) (4100) (4500) (3700) (4100) (4100) (4400) (3800) (4200) (4000) (4600) (3600) (4000) (4200) (4700) (3500) (3900) (4300) (4300) (3900) (4300) (3900) (4600) (3600) (4000) (4200) (4400) (3800) (4200) (4000) (4600) (3600) (4000) (4200) (4400) (3800) (4200) (4000) (4900) (3300) (3700) (4500) (4100) (4100) (4500) (3700) (4800) (3400) (3800) (4400) (4200) (4000) (4400) (3800) (4600) (3600) (4000) (4200) (4400) (3800) (4200) (4000))) :lonset (quote (0 300 600 900 1200 1500 1800 2100 2400 2700 3000 3300 3600 3900 4200 4500 4800 5100 5400 5700 6000 6300 6600 6900 7200 7500 7800 8100 8400 8700 9000 9300 9600 9900 10200 10500 10800 11100 11400 11700 12000 12300 12600 12900 13200 13500 13800 14100 14400 14700 15000 15300 15600 15900 16200 16500 16800 17100 17400 17700 18000 18300 18600 18900 19200 19500 19800 20100 20400 20700 21000 21300 21600 21900 22200 22500 22800 23100 23400 23700 24000 24300 24600 24900 25200 25500 25800 26100 26400 26700 27000 27300 27600 27900 28200 28500 28800 29100 29400 29700 30000 30300 30600 30900 31200 31500 31800 32100 32400 32700 33000 33300 33600 33900 34200 34500 34800 35100 35400 35700 36000 36300 36600 36900 37200 37500 37800 38100 38400 38700 39000 39300 39600 39900 40200 40500 40800 41100 41400 41700 42000 42300 42600 42900 43200 43500 43800 44100 44400 44700 45000 45300)) :ldur (quote ((300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300))) :lvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 36 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 1 nil 1000 0 (om-make-point 708 429) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 5 0 nil 0) (11 0 5 1 nil 0) (2 0 5 2 nil 0) (15 1 6 0 nil 0) (8 0 7 1 nil 0) (15 1 8 0 nil 0) (5 0 8 1 nil 0) (10 0 9 0 nil 0) (7 1 10 0 nil 0) (6 0 11 0 nil 0))) nil 6.090012))
