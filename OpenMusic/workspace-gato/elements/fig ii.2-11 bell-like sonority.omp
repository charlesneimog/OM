; OM File Header - Saved 2016/09/24 12:55:36
; (6.1001 :patc (om-make-point 246 100) (om-make-point -1440 11) (om-make-point 924 700) "" 183 0 "2015/07/16 18:48:47" "2016/09/24 12:55:36")
; End File Header
(in-package :om)(load-lib-for (quote ("Esquisse")))(setf *om-current-persistent* (om-load-patch1 "fig ii.2-11 bell-like sonority" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 99 31) (quote "Fundamentals") "" (om-make-point 365 223) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 48) (quote "List of numbers to add") "" (om-make-point 606 130) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 30) (quote "Partials") "" (om-make-point 484 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 47 28) (quote "BELL") "" (om-make-point 221 59) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 372 351) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 148 62) (om-make-point 71 30) (list 7 8 9 13) "(7 8 9 13)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 558 416) (om-make-point 52 30) (list 2000) "(2000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 485 405) (om-make-point 63 30) (list 0 2000) "(0 2000)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 328 468) (om-make-point 484 117) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7302 7440 7568 8004) (6568 6800 7004 7640) (5300 5686 6002 6886) (5600 5986 6302 7186) (5400 5786 6102 6986) (5786 6102 6368 7152) (5686 6002 6268 7052) (6368 6600 6804 7440) (7004 7186 7352 7888) (6704 6886 7052 7588) (7502 7640 7768 8204) (7202 7340 7468 7904) (6568 6800 7004 7640) (6804 6986 7152 7688) (6268 6500 6704 7340) (5986 6302 6568 7352) (6368 6600 6804 7440) (6268 6500 6704 7340))) :lonset (quote (0 2000 4000 6000 8000 10000 12000 14000 16000 18000 20000 22000 24000 26000 28000 30000 32000 34000 36000)) :ldur (quote ((2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000) (2000 2000 2000 2000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 608 1003) (om-make-point 1021 365) 0 1000 nil 1 (quote :midi-player) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 28 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 499 203) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 378 253) (om-make-point 116 30) (list 2900 3000 3200) "(2900 3000 3200)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-HARM" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 1 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 496 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 516 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 499 137) (om-make-point 106 30) (list 0 -2 3 -4 -5 -2) "(0 -2 3 -4 -5 -2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 398 102) (om-make-point 85 30) (list 9 10 11 15) "(9 10 11 15)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 47 112) (om-make-point 42 30) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 2000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 87 255) (om-make-point 109 187) (let ((thechord (make-instance (quote chord) :lmidic (quote (5368 5600 5804 6440)) :ldur (quote (2000 2000 2000 2000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 609 439) 1 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 28 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-HARM" (quote nth-harm) (quote ((om-load-inputfun (quote input-funbox) "Fundamental" "FUND" 3600) (om-load-inputfun (quote input-funbox) "Partial-numbers" "NTH" (list 1 2 3 4 5)) (om-load-inputfunmenu1 (quote input-funmenu) "Unit" "UNIT" 1 (list (list "Midics" 1) (list "Freqs" 2))) (om-load-inputfunmenu1 (quote input-funmenu) "Type" "TYPE" 1 (list (list "Chord" 2) (list "ChordSeq" 1))))) (om-make-point 73 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 4 0 nil 0) (4 0 8 1 nil 0) (7 0 8 2 nil 0) (6 0 8 3 nil 0) (14 0 9 1 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (9 0 12 0 nil 0) (13 0 12 1 nil 0) (17 0 16 1 nil 0) (15 0 17 0 nil 0) (5 0 17 1 nil 0))) nil 6.1001))
