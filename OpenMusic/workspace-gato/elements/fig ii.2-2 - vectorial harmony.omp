; OM File Header - Saved 2016/09/24 12:55:36
; (6.1001 :patc (om-make-point 60.0D0 430) (om-make-point -1364 348) (om-make-point 925 527) "" 183 0 "2015/07/15 9:33:04" "2016/09/24 12:55:36")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fig ii.2-2 - vectorial harmony" (quote ((let ((box (om-load-boxcall (quote abstraction) "rot_harmoniavectorial 2" (om-load-patch-abs1 "rot_harmoniavectorial" (quote ((let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 709 763) (om-make-point 40 26) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 683 794) (om-make-point 39 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 745 882) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "vozes" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 411 914) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "acordes" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vector" 2 (om-make-point 550 37) "" "vector" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "ciclos" 1 (om-make-point 413 37) "" "ciclos" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "acorde" 0 (om-make-point 64 44) "" "acorde" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 38) (quote "aqui produzo acordes") "" (om-make-point 419 715) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "aplicar_vector_com_rot" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 473 574) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 168 434) (om-make-point 84 59) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 206 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 131 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 175 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 77 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 184 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE" (quote rotate) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil) (om-load-inputfun (quote input-funbox) "nth" "NTH" 1))) (om-make-point 249 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 236 59) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 63 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 221 540) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 130 533) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (2 0 1 0 nil 0) (8 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 3 1 nil 0) (8 0 4 0 nil 0) (1 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (0 1 9 0 nil 0) (0 0 10 0 nil 0))) 1 "aplicar_vector_com_rot" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 217 93) (quote "para obter notas comuns, e assim tornar a progressão mais coerente, usar no vector intervalar intervalos contidos no acorde inicial") "" (om-make-point 659 160) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 66 26) (quote "opcional") "" (om-make-point 563 821) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REVERSE1" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 515 818) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 57 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 48) (quote "intervalos$(vector intervalar)") "" (om-make-point 613 52) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 40) (quote "número de ciclos") "" (om-make-point 332 47) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux8" (quote t) (quote nil) (om-make-point 374 263) (om-make-point 13 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 354 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*1" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 340 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH1" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 312 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 444 777) (om-make-point 40 26) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 418 808) (om-make-point 39 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 274 607) (om-make-point 19 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST2" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 228 650) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GROUP-LIST" (quote group-list) (quote ((om-load-inputfun (quote input-funbox) " a List" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "a List" "SEGMENTATION" (list 1 3)) (om-load-inputfunmenu1 (quote input-funmenu) "Menu" "MODE" (quote linear) (list (list "linear" (quote (quote linear))) (list "circular" (quote (quote circular))))))) (om-make-point 194 776) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER2" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 143 652) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 367 699) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 225 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 127 261) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 147 182) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 135 278) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POSN-MATCH" (quote posn-match) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 10 20 30 40 50 60 70 80 90)) (om-load-inputfun (quote input-funbox) "positions" "POSITIONS" (list (list 0 1) 4 (list 6))))) (om-make-point 91 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 155 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 171 42) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 183 359) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 56 345) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 1 1 nil 0) (3 0 2 0 nil 0) (0 1 5 0 nil 0) (0 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 20 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 197 45) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 238 326) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 42 315) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 2 1 nil 0) (5 0 3 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "omloop2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 231 38) (quote "aqui produzo as linhas vectoriais para cada nota") "" (om-make-point 610 580) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 74 359) (om-make-point 31 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 58 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "one list" "LST" nil))) (om-make-point 454 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 437 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (20 0 3 0 nil 0) (28 0 8 0 nil 0) (29 0 8 1 nil 0) (20 0 11 0 nil 0) (6 0 12 0 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0) (18 0 17 0 nil 0) (5 0 17 1 nil 0) (4 0 18 0 nil 0) (25 0 20 0 nil 0) (19 0 20 1 nil 0) (16 0 22 0 ((om-make-point 362 324) (om-make-point 336 469) (om-make-point 249 579) (om-make-point 250 650)) 0) (21 0 22 1 nil 0) (24 0 23 0 nil 0) (22 0 23 1 nil 0) (17 0 24 1 ((om-make-point 348 233) (om-make-point 323 393) (om-make-point 285 463) (om-make-point 177 652)) 0) (23 0 25 0 nil 0) (8 0 25 1 nil 0) (12 0 28 0 nil 0) (27 0 28 1 nil 0) (30 0 29 0 nil 0) (5 0 30 0 nil 0) (4 0 30 1 nil 0))) 6.1001 nil "" (om-make-point -1418 42) (om-make-point 1060 1005)) (quote ((om-load-inputfun (quote input-funbox) "" "acorde" nil) (om-load-inputfun (quote input-funbox) "" "ciclos" nil) (om-load-inputfun (quote input-funbox) "" "vector" nil))) (om-make-point 332 123) nil (list (list (list 5500 6900 6900 8300) (list 5700 5800 7000 9000) (list 4600 5900 7700 9200) (list 4700 6600 7900 8100) (list 5400 6800 6800 8200) (list 5600 5700 6900 8900) (list 4500 5800 7600 9100) (list 4600 6500 7800 8000) (list 5300 6700 6700 8100) (list 5500 5600 6800 8800) (list 4400 5700 7500 9000) (list 4500 6400 7700 7900) (list 5200 6600 6600 8000) (list 5400 5500 6700 8700) (list 4300 5600 7400 8900) (list 4400 6300 7600 7800) (list 5100 6500 6500 7900) (list 5300 5400 6600 8600) (list 4200 5500 7300 8800) (list 4300 6200 7500 7700) (list 5000 6400 6400 7800) (list 5200 5300 6500 8500) (list 4100 5400 7200 8700) (list 4200 6100 7400 7600) (list 4900 6300 6300 7700) (list 5100 5200 6400 8400) (list 4000 5300 7100 8600) (list 4100 6000 7300 7500) (list 4800 6200 6200 7600) (list 5000 5100 6300 8300) (list 3900 5200 7000 8500) (list 4000 5900 7200 7400) (list 4700 6100 6100 7500) (list 4900 5000 6200 8200) (list 3800 5100 6900 8400) (list 3900 5800 7100 7300) (list 4600 6000 6000 7400) (list 4800 4900 6100 8100) (list 3700 5000 6800 8300) (list 3800 5700 7000 7200) (list 4500 5900 5900 7300) (list 4700 4800 6000 8000) (list 3600 4900 6700 8200) (list 3700 5600 6900 7100) (list 4400 5800 5800 7200)) (list (list 5500 5700 4600 4700 5400 5600 4500 4600 5300 5500 4400 4500 5200 5400 4300 4400 5100 5300 4200 4300 5000 5200 4100 4200 4900 5100 4000 4100 4800 5000 3900 4000 4700 4900 3800 3900 4600 4800 3700 3800 4500 4700 3600 3700 4400) (list 6900 5800 5900 6600 6800 5700 5800 6500 6700 5600 5700 6400 6600 5500 5600 6300 6500 5400 5500 6200 6400 5300 5400 6100 6300 5200 5300 6000 6200 5100 5200 5900 6100 5000 5100 5800 6000 4900 5000 5700 5900 4800 4900 5600 5800) (list 6900 7000 7700 7900 6800 6900 7600 7800 6700 6800 7500 7700 6600 6700 7400 7600 6500 6600 7300 7500 6400 6500 7200 7400 6300 6400 7100 7300 6200 6300 7000 7200 6100 6200 6900 7100 6000 6100 6800 7000 5900 6000 6700 6900 5800) (list 8300 9000 9200 8100 8200 8900 9100 8000 8100 8800 9000 7900 8000 8700 8900 7800 7900 8600 8800 7700 7800 8500 8700 7600 7700 8400 8600 7500 7600 8300 8500 7400 7500 8200 8400 7300 7400 8100 8300 7200 7300 8000 8200 7100 7200))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "midi_with_sep_chnnls 2" (om-load-patch-abs1 "midi_with_sep_chnnls" (quote ((let ((box (om-load-boxcall (quote genfun) "CREATE-MIDISEQ" (quote create-midiseq) (quote ((om-load-inputfun (quote input-funbox) "and object" "SELF" nil))) (om-make-point 10 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEPARATE-CHANNELS" (quote separate-channels) (quote ((om-load-inputfun (quote input-funbox) "an EventMIDI-seq object" "SELF" nil))) (om-make-point 13 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 36 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 54 353) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "midi-file" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord-seq self" 0 (om-make-point 35 32) "" "chord-seq self" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (0 0 1 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0))) 6.1001 nil "" (om-make-point 200 200) (om-make-point 503 436)) (quote ((om-load-inputfun (quote input-funbox) "" "chord-seq self" nil))) (om-make-point 174 426) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "ordered_chan_list_from_list_of_chords 2" (om-load-patch-abs1 "ordered_chan_list_from_list_of_chords" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 233 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 184 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 246 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" nil))) (om-make-point 109 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 113 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 11 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 124 335) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "lchan" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lmidic" 0 (om-make-point 59 46) "" "lmidic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (0 0 3 1 nil 0) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (3 0 6 0 nil 0))) 6.1001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "lmidic" nil))) (om-make-point 579 136) nil (list (list (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1) (list 4 3 2 1))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 31 66) (om-make-point 108 106) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6900 8300 6900)) :ldur (quote (1000 1000 1000 1000)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 0 0 (om-make-point 400 20) (om-make-point 517 349) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 429 86) (om-make-point 76 30) (list 2 -11 1 7) "(2 -11 1 7)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 396 93) (om-make-point 28 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 125 211) (om-make-point 701 172) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500 6900 6900 8300) (5700 5800 7000 9000) (4600 5900 7700 9200) (4700 6600 7900 8100) (5400 6800 6800 8200) (5600 5700 6900 8900) (4500 5800 7600 9100) (4600 6500 7800 8000) (5300 6700 6700 8100) (5500 5600 6800 8800) (4400 5700 7500 9000) (4500 6400 7700 7900) (5200 6600 6600 8000) (5400 5500 6700 8700) (4300 5600 7400 8900) (4400 6300 7600 7800) (5100 6500 6500 7900) (5300 5400 6600 8600) (4200 5500 7300 8800) (4300 6200 7500 7700) (5000 6400 6400 7800) (5200 5300 6500 8500) (4100 5400 7200 8700) (4200 6100 7400 7600) (4900 6300 6300 7700) (5100 5200 6400 8400) (4000 5300 7100 8600) (4100 6000 7300 7500) (4800 6200 6200 7600) (5000 5100 6300 8300) (3900 5200 7000 8500) (4000 5900 7200 7400) (4700 6100 6100 7500) (4900 5000 6200 8200) (3800 5100 6900 8400) (3900 5800 7100 7300) (4600 6000 6000 7400) (4800 4900 6100 8100) (3700 5000 6800 8300) (3800 5700 7000 7200) (4500 5900 5900 7300) (4700 4800 6000 8000) (3600 4900 6700 8200) (3700 5600 6900 7100) (4400 5800 5800 7200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0))) :lchan (quote ((4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1) (4 3 2 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 256 943) (om-make-point 1986 375) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggf) 36 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 0 0 nil 0) (5 0 0 1 nil 0) (4 0 0 2 nil 0) (6 0 1 0 nil 0) (0 0 2 0 nil 0) (0 0 6 1 nil 0) (2 0 6 6 nil 0))) nil 6.1001))
