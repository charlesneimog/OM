; OM File Header - Saved 2016/09/24 12:55:36
; (6.1001 :patc (om-make-point 573 156) (om-make-point -1440 -209) (om-make-point 1440 1129) "" 183 0 "2015/07/16 19:39:25" "2016/09/24 12:55:36")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fig ii.2-45 - canti firmi" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 79 47) (quote "FINAL SEGMENT") "" (om-make-point 1096 944) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 79 47) (quote "FILTERED SEGMENT") "" (om-make-point 857 803) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 81 26) (quote "MADRIGAL") "" (om-make-point 736 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 39) (quote "Time segments") "" (om-make-point 983 529) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 379 698) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 347 745) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 390 937) (om-make-point 698 121) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7400) (6900) (6900) (7000) (7300) (7400) (7200) (6900) (7900) (7200) (7600) (7200) (7500) (6900) (7200) (7000) (7400) (7700) (6900) (7300) (7200) (6900) (7000) (6900) (6900) (7300))) :lonset (quote (25000 1000 19500 24500 4500 23500 18250 4250 19000 28500 3750 22500 8500 11000 13500 5250 1500 4500 25000 17500 23000 500 25500 3500 5000 10000 20500 29000)) :ldur (quote ((500) (500) (1000) (1000) (500) (1500) (250) (250) (500) (500) (250) (500) (1500) (1000) (1000) (125) (1000) (750) (500) (500) (500) (500) (2000) (250) (500) (500) (2000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 1840 514) 0 1000 nil 31/50 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 285 920) (om-make-point 38 30) 0.4 "0.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "random filter" (om-load-patch-abs1 "random filter" (quote ((let ((box (om-load-boxin "keep_fraction" 1 (om-make-point 451 81) "" "keep_fraction" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 42 146) (om-make-point 396 77) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote nil) :lonset (quote (0)) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil) :legato 0)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 36 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 31/50 nil 1000 0 (om-make-point 1016 501) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 116 427) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 149 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 99 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 265 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 241 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 329 429) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 448 434) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 399 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 460 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 445 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 513 438) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 210 520) nil nil "&" nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 101 611) (om-make-point 433 62) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote nil) :lonset (quote (0)) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil) :legato 0)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 36 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midishare) 31/50 nil 1000 0 (om-make-point 1016 501) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 215 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 165 360) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 119 699) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 1 0 nil 0) (4 0 2 0 nil 0) (16 0 2 1 nil 0) (5 0 2 2 nil 0) (1 2 3 0 nil 0) (1 1 4 0 nil 0) (1 3 5 0 nil 0) (2 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (11 0 8 1 nil 0) (1 1 9 0 nil 0) (9 0 10 0 nil 0) (0 0 10 1 nil 0) (10 0 11 0 nil 0) (8 0 12 0 nil 0) (12 0 13 0 nil 0) (13 0 14 1 nil 0) (13 1 14 2 nil 0) (13 2 14 3 nil 0) (3 0 15 0 nil 0) (3 0 16 0 nil 0) (15 0 16 1 nil 0) (14 0 18 0 nil 0))) 6.1001 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "keep_fraction" nil))) (om-make-point 235 950) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (7400) (6900) (6900) (7000) (7300) (7400) (7200) (6900) (7900) (7200) (7600) (7200) (7500) (6900) (7200) (7000) (7400) (7700) (6900) (7300) (7200) (6900) (7000) (6900) (6900) (7300))) :lonset (quote (25000 1000 19500 24500 4500 23500 18250 4250 19000 28500 3750 22500 8500 11000 13500 5250 1500 4500 25000 17500 23000 500 25500 3500 5000 10000 20500 29000)) :ldur (quote ((500) (500) (1000) (1000) (500) (1500) (250) (250) (500) (500) (250) (500) (1500) (1000) (1000) (125) (1000) (750) (500) (500) (500) (500) (2000) (250) (500) (500) (2000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "random filter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 151 165) (quote "Time segments:$$1 - (0 29420)$2 - (29420 53300)$3 - (53300 62743)$4 - (62743 70157)$5 - (70157 85374)$6 - (85374 110346)$7 - (110346 140000)") "" (om-make-point 39 553) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 130 34) (quote "REGISTER FILTERS") "" (om-make-point 1230 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1247 541) (om-make-point 104 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500 6400)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 22) (om-make-point 522 371) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1224 408) (om-make-point 104 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 5700)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 22) (om-make-point 522 371) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1234 233) (om-make-point 104 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900 7900)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 22) (om-make-point 522 371) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1256 680) (om-make-point 104 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 7900)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 22) (om-make-point 522 371) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 1134 648) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 392 418) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 2" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 1110 560) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT. 3" (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil))) (om-make-point 1151 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 1234 105) (om-make-point 104 110) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6700)) :ldur (quote (1000 1000)) :lvel (quote (100 100)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 22) (om-make-point 522 371) 0 1000 nil 1 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 1197 628) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE-FILTER" (quote table-filter) (quote ((om-load-inputfun (quote input-funbox) "function or function name" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list of lists" "LIST" (list (list 1 2) (list 1 2))) (om-load-inputfun (quote input-funbox) "rank" "NUMCOL" 0) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 1061 694) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>=" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 1059 634) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE-FILTER" (quote table-filter) (quote ((om-load-inputfun (quote input-funbox) "function or function name" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list of lists" "LIST" (list (list 1 2) (list 1 2))) (om-load-inputfun (quote input-funbox) "rank" "NUMCOL" 0) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 1172 732) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 155 787) (om-make-point 696 124) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7400) (6900) (7700) (7200) (7400) (7000) (7500) (7000) (7500) (7000) (6900) (7000) (7200) (6900) (7400) (7000) (7600) (7200) (7000) (7700) (7400) (6900) (7200) (7000) (7200) (6900) (6900) (6900) (6900) (7200) (7400) (6900) (7000) (7500) (7200) (7400) (6900) (7200) (6900) (6900) (7200) (6900) (7400) (7200) (7200) (6900) (6900) (7300) (6900) (6900) (7600) (7300) (7600) (7300) (7900) (7300) (6900) (7700) (7400) (7600) (6900) (6900) (7400) (7100) (7900) (7200) (7600))) :lonset (quote (0 500 500 500 1000 1000 1500 1500 2000 3000 3250 3500 3750 3750 4000 4000 4250 4250 4500 4500 4500 5000 5250 5375 5500 5500 5500 6500 7500 8500 10000 10000 10500 11000 11000 12000 12000 13000 13500 16500 17000 17500 18250 18500 18750 19000 19500 20500 20500 22500 22500 22500 23000 23000 23500 23500 24500 25000 25000 25500 25500 27500 27500 28000 28500 29000 29000 30000)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (1000) (500) (500) (250) (250) (250) (250) (250) (250) (250) (250) (500) (1000) (750) (500) (125) (125) (3000) (500) (750) (250) (2000) (1500) (1000) (500) (500) (1000) (1000) (500) (500) (500) (1000) (500) (500) (500) (250) (1000) (250) (500) (1000) (2000) (2000) (500) (500) (500) (500) (500) (1500) (1500) (1000) (500) (500) (2000) (2000) (500) (1000) (1000) (500) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 1016 501) 0 1000 nil 21/100 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" (quote second)))) (om-make-point 563 648) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 39) (quote "SCALING") "" (om-make-point 1126 318) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1151 231) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 1128 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1060 230) (om-make-point 34 30) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 1068 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 285 621) (om-make-point 183 59) nil "&" nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 482 648) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 197 409) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 552 383) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE-FILTER" (quote table-filter) (quote ((om-load-inputfun (quote input-funbox) "function or function name" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list of lists" "LIST" (list (list 1 2) (list 1 2))) (om-load-inputfun (quote input-funbox) "rank" "NUMCOL" 1) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 435 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>=" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 327 395) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS 2" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 514 285) nil nil nil nil 2))) (setf (numouts box) 2) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 796 500) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 810 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 851 460) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 933 531) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST 2" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 908 460) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 948 393) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 992 468) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE-FILTER" (quote table-filter) (quote ((om-load-inputfun (quote input-funbox) "function or function name" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "list of lists" "LIST" (list (list 1 2) (list 1 2))) (om-load-inputfun (quote input-funbox) "rank" "NUMCOL" 1) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 320 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 862 380) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE/SUM" (quote om-scale/sum) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" (list 1 2 3)) (om-load-inputfun (quote input-funbox) "number" "SUM" 10))) (om-make-point 759 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SAMPLE" (quote om-sample) (quote ((om-load-inputfun (quote input-funbox) "object to resample" "SELF" nil) (om-load-inputfun (quote input-funbox) "number of samples (int) or sample rate (float)" "SAMPLE-RATE" 1))) (om-make-point 875 288) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 968 230) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Segment length") "" (om-make-point 987 121) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 820 115) (om-make-point 158 89) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 69 70 71 72 73 74 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 100)) (quote (99 99 98 98 97 96 95 94 93 92 90 89 86 84 83 81 78 74 69 66 61 58 54 50 45 42 40 36 30 27 25 21 17 15 11 10 8 7 6 6 5 4 4 4 3 3 3 3 4 5 5 6 7 9 10 12 13 14 16 17 19 21 25 27 30 34 37 39 43 45 47 51 53 56 60 63 65 68 71 73 77 79 82 84 87 88 89 91 92 93 94 95 96 97 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 746 470) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 190 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 240 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-ELEM" (quote last-elem) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 714 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 290 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 124 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 174 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 141 336) (om-make-point 104 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 32 40) (om-make-point 696 111) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5500) (6200) (7400) (6700) (5800) (5300) (6900) (7700) (7200) (6000) (4600) (6500) (7400) (7000) (6200) (5100) (5800) (7500) (7000) (6700) (6300) (7500) (6000) (6300) (6200) (6500) (6300) (6700) (7000) (6500) (6900) (6700) (7000) (6700) (6500) (7200) (6900) (6400) (5800) (6200) (7400) (7000) (6500) (7600) (7200) (4600) (7000) (7700) (7400) (6200) (4800) (6400) (5000) (6900) (6500) (5200) (7200) (6700) (7000) (5300) (6500) (7200) (6900) (6900) (5500) (6400) (6200) (5700) (6000) (6500) (5800) (6500) (6700) (6500) (6000) (6900) (6400) (6700) (6500) (6500) (6700) (6400) (5300) (6000) (6900) (6500) (7200) (6400) (7400) (6900) (6500) (7000) (6700) (7500) (7200) (6500) (7400) (6900) (7200) (6700) (6300) (6500) (6900) (6200) (6200) (6500) (5100) (6700) (5500) (6000) (6300) (5300) (5700) (5500) (5800) (6700) (6200) (6000) (6900) (6400) (5700) (5300) (5700) (7200) (6500) (6000) (6900) (6200) (4600) (6700) (6200) (5500) (7400) (5500) (4500) (6400) (7200) (5700) (7200) (6900) (5000) (6200) (6900) (6600) (5700) (5700) (6400) (7300) (6900) (5700) (6900) (7600) (7300) (6400) (5200) (6700) (7600) (7300) (5200) (6700) (7900) (7300) (6900) (6400) (5000) (7700) (7400) (5700) (4900) (6400) (7600) (6900) (5700) (6400) (5500) (5000) (6900) (7400) (5400) (7100) (5200) (7900) (6400) (5500) (7200) (7600) (6700) (6000) (5200) (6000) (5500) (6400) (7100) (7900) (6700) (6200) (6900) (6000) (5500) (7100) (7400) (6200) (7900) (7200) (7600) (6000) (7700) (7600) (7000) (7400) (6900) (7200) (7200) (7000) (7600) (7200) (6500) (7700) (7400) (6700) (7400) (7000) (7000) (6700) (7600) (6400) (5700) (6500) (6900) (6000) (6000) (5300) (5700) (5800) (5500) (5700) (6000) (5000) (6200) (5300) (5700) (6000) (5500) (5800) (5200) (7900) (5700) (7900) (5500) (5300) (6000) (7200) (6900) (5700) (6900) (5800) (6200) (6500) (6500) (5500) (7000) (5800) (5500) (7400) (5000) (7000) (7700) (7400) (6200) (6500) (7700) (6900) (5700) (7200) (6500) (6000) (6900) (6200) (6600) (6900) (6200) (5700) (7300) (6700) (7600) (7300) (6900) (7700) (7400) (6500) (6700) (6400) (7600) (6900) (7300) (6400) (5000) (6500) (5200) (6700) (5300) (6900) (4600) (7000) (6700) (6200) (7200) (6900) (6700) (7400) (7000) (6400) (5800) (6500) (6000) (6200) (6700) (5800) (5700) (7200) (6500) (6500) (5300) (6200) (5300) (5200) (7300) (6400) (7400) (6600) (7600) (6700) (6100) (5000) (6900) (6200) (6600) (5400) (6600) (7000) (6100) (7300) (5400) (6600) (7300) (7000) (6100) (5400) (6200) (7400) (6900) (5700) (5300) (6200) (7400) (6900) (5700) (4800) (6700) (7500) (6000) (6900) (5300) (7200) (6900) (6000) (6500) (5700) (5700) (6400) (7300) (6900) (5700) (5700) (6000) (6400) (5500) (6000) (6400) (6700) (5800) (6200) (5500) (7400) (5500) (7500) (6700) (5800) (6700) (5800) (5200) (7200) (5300) (6000) (6500) (5700) (6500) (5700) (6000) (6900) (6400) (6400) (6200) (6900) (6500) (6500) (7000) (6000) (7200) (6400) (7200) (6900) (6900) (6500) (6900) (6900) (7200) (6500) (6900) (7200) (6500) (7400) (7000) (6200) (5800) (7700) (6200) (6500) (6900) (6900) (7200) (5700) (7400) (5800) (6700) (7600) (7400) (6900) (7700) (5700) (7600) (7300) (5800) (6700) (7400) (7000) (5700) (6900) (7800) (7200) (5500) (7000) (7900) (7400) (6200) (5700) (6500) (7200) (6900) (6000) (5800) (5300) (6900) (6000) (6500) (6900) (4800) (6400) (7200) (6700) (6000) (5500) (5200) (7200) (7900) (7600) (5300) (6900) (7700) (7400) (5700) (6900) (7600) (7300) (5000) (6900) (7700) (7400) (5700) (4600) (6200) (7400) (6700) (5800) (6200) (5000) (6200) (6600) (5700) (6900) (5700) (5000) (5500) (5800) (5800) (5500) (5300) (6200) (6900) (6500) (7400) (7000) (6500) (6200) (6900) (7700) (7200) (6000) (7200) (6500) (6900) (6500) (6500) (6900) (5300) (6900) (6000) (6500) (5800) (7400) (6700) (5700) (7200) (6400) (6900) (6500) (6000) (6500) (5500) (6300) (7000) (6700) (5800) (6000) (5000) (6200) (6600) (5700) (5300) (6500) (6900) (5300) (7700) (6900) (5500) (7000) (5500) (7500) (5800) (6700) (7400) (7000) (6200) (6000) (6700) (6400) (6000) (6400) (6200) (6500) (7000) (5800) (6700) (6400) (5300) (7400) (6900) (7400) (6900) (6200) (7500) (7200) (6000) (6000) (5700) (6200) (7400) (7000) (5800) (6200) (5800) (6500) (6200) (5500) (6200) (7000) (5800) (5500) (5200) (6700) (5900) (5900) (5100) (7200) (6700) (6000) (5000) (7400) (6500) (6900) (7400) (5900) (4800) (6700) (6000) (7900) (6400) (6400) (6700) (7600) (7200) (7500) (4600) (6700) (7400) (6200) (6200) (5000) (6200) (6600) (5900) (6600) (5500) (6700) (5800) (5000) (5700) (6600) (4300) (7100) (6700) (5500))) :lonset (quote (500 500 500 500 500 1000 1000 1000 1000 1000 1500 1500 1500 1500 1500 2000 2000 2000 2000 2000 2500 2500 3000 3000 3250 3250 3500 3500 3500 3750 3750 4000 4000 4000 4250 4250 4250 4375 4500 4500 4500 4500 4500 4750 4750 5000 5000 5000 5000 5000 5250 5250 5500 5500 5500 5750 5750 5750 5875 6000 6000 6000 6000 6000 6250 6250 6375 6500 6500 6500 6750 6750 6750 6875 7000 7000 7000 7250 7250 7375 7500 7750 8000 8000 8000 8000 9000 10000 10500 10500 10500 11000 11000 11500 11500 12000 12500 12500 13500 13500 13500 14000 14000 14000 14500 14500 15000 15000 15000 15500 15500 16000 16000 16500 16500 16500 16500 17000 17000 17000 17000 17500 17500 17500 17500 17750 18000 18000 18500 18500 18500 18500 18750 18750 19000 19000 19000 19000 19250 19500 20000 20000 20000 20000 20000 21000 21000 21000 21000 23000 23000 23000 23000 23000 23500 23500 23500 23500 24000 24000 24000 24000 25000 25000 25500 25500 25500 25500 26000 26000 26000 26000 26000 27000 27500 28000 28000 28000 28000 28500 29000 29000 29000 29000 29500 29500 29500 29500 29750 29750 30000 30000 30500 30500 30500 30500 30750 30750 31000 31000 31000 31000 31500 32000 32000 32000 32500 33000 33500 33500 34000 34000 34500 34750 35000 35000 35500 35500 35500 36000 36000 36000 36500 37000 37000 38000 39000 39000 39000 39000 39500 40000 40000 40500 40750 41000 41000 41500 41500 42000 42000 42000 42500 42500 43000 43000 43500 43500 43750 44000 44000 44000 44000 44000 44500 45000 45000 45000 45500 46000 46000 46000 46500 46500 47000 47000 47000 47000 47000 47500 47500 47500 48000 48000 48000 48500 48500 49000 49000 49500 49500 50000 50000 50500 50500 50500 51000 51000 51000 51000 51500 52000 52000 52000 53000 53000 54000 54000 54500 54500 55000 55000 56000 56000 56000 56000 56500 56500 57000 57000 57000 57500 58000 58000 58500 59000 59000 59000 60000 60000 60000 60500 61000 61000 61500 62000 62000 62000 62500 62500 63000 63000 63000 64000 64000 64000 65000 67000 67000 67000 67000 68000 69000 69000 69000 69000 69000 71000 71000 71000 71000 71000 72000 72000 72000 72000 72000 73000 73000 73000 73000 73500 74000 74000 74000 74000 75000 76000 77000 77000 77000 77000 77500 78000 78500 78500 79000 79000 79000 79500 80000 80000 80500 80500 81000 81000 81000 81000 81500 81500 82000 82000 82500 82500 82500 82500 83000 83000 83500 83500 83500 83500 84000 84000 84000 84500 84500 85000 85000 85000 85500 85500 86000 86000 86500 86500 86500 86500 87000 87000 87500 87500 87500 87500 88000 88000 88000 88250 88250 88500 88500 88500 89000 89000 89500 89500 89750 90000 90000 90000 91000 91000 91250 91250 91250 91250 91500 91500 91500 91500 91750 91750 91750 91750 91750 92000 92000 92000 92000 92000 92250 92500 92500 92500 92750 92750 93000 93000 93000 93000 93250 93500 94250 94250 94250 94250 94500 94500 94500 94500 94750 94750 94750 94750 95000 95000 95000 95000 95250 95500 95500 95500 95500 95500 95750 96000 96000 96000 96000 96500 96500 96750 97000 97000 97500 97750 98000 98000 98250 98250 98500 98500 98500 98750 99000 99000 99000 99000 99500 99500 99500 100000 100500 100500 101000 101000 101000 101500 102000 102000 103000 104000 104000 104000 105000 105000 105000 105500 106000 106000 106000 107000 107000 107500 108000 108000 108000 108000 109000 109000 109000 109500 109500 109500 110000 110000 110000 110500 111000 111000 111500 111500 111500 112000 112000 112000 112500 112500 113000 113000 114000 115000 115000 115000 116000 116000 116000 116500 116500 116500 117000 117000 117000 118000 118000 119000 119000 119000 119000 119500 119500 120000 120000 121000 121000 121000 121000 121500 122000 122000 122000 122500 123000 123000 123000 123000 124000 124000 124000 124500 125000 125000 126000 126000 126000 127000 127000 127500 128000 128000 129000 129000 130000 130000 130000 130000 131000 132000 132000 132000 132000 132500 133000 133000 133000 134000 134000 135000 136000 136000 136000 136000 140000)) :ldur (quote ((500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (500) (2000) (500) (500) (1000) (2000) (500) (500) (250) (250) (250) (250) (250) (250) (500) (250) (250) (250) (250) (250) (125) (250) (250) (125) (500) (500) (250) (250) (500) (250) (250) (250) (500) (1000) (750) (250) (250) (250) (250) (500) (250) (250) (125) (250) (125) (250) (250) (3000) (500) (750) (250) (125) (125) (250) (1500) (250) (250) (250) (125) (125) (1000) (250) (250) (125) (500) (125) (500) (250) (2000) (2000) (2000) (2000) (1500) (500) (1000) (500) (500) (500) (1000) (1000) (1000) (1000) (500) (500) (500) (1000) (500) (500) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (500) (1000) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (750) (500) (500) (500) (1000) (250) (500) (500) (500) (500) (500) (250) (250) (250) (1000) (1000) (1000) (1000) (250) (500) (1000) (1000) (1000) (1000) (2000) (2000) (2000) (2000) (2000) (500) (500) (500) (500) (2000) (500) (500) (500) (500) (1500) (1000) (1500) (1500) (1000) (500) (500) (500) (500) (500) (2000) (1000) (2000) (2000) (1500) (1000) (500) (1000) (500) (1000) (1000) (1000) (750) (500) (500) (500) (1000) (1000) (1000) (250) (250) (250) (1000) (500) (250) (1000) (500) (250) (250) (250) (1000) (1000) (1000) (1000) (500) (1000) (1000) (1000) (500) (1500) (500) (500) (1500) (750) (500) (250) (500) (500) (500) (500) (500) (500) (1000) (3000) (500) (2000) (1000) (1000) (1000) (500) (1000) (1500) (500) (1500) (750) (500) (250) (1000) (500) (500) (500) (500) (500) (2000) (500) (1000) (1000) (500) (250) (500) (250) (1000) (1000) (1000) (500) (1000) (500) (1000) (1500) (500) (500) (500) (1000) (1000) (500) (500) (1000) (500) (500) (500) (1000) (500) (500) (500) (500) (1000) (500) (500) (1000) (1000) (1500) (1000) (500) (4000) (500) (500) (500) (500) (1000) (1000) (2000) (500) (500) (1000) (2000) (1000) (1000) (1000) (500) (500) (500) (500) (1000) (2000) (2000) (500) (500) (1500) (500) (500) (1000) (3000) (2000) (500) (500) (1000) (500) (1000) (1000) (1000) (6000) (1000) (500) (500) (500) (2000) (500) (2000) (500) (500) (500) (500) (1000) (2000) (1000) (2000) (2000) (2000) (1000) (2000) (2000) (2000) (2000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1500) (1000) (1000) (2000) (1000) (1000) (500) (3000) (3000) (3000) (2000) (2000) (2000) (500) (1000) (1000) (1000) (500) (1000) (500) (500) (1000) (1000) (1000) (1000) (1000) (1000) (500) (500) (1000) (1000) (500) (500) (1000) (1000) (500) (2000) (1000) (500) (500) (500) (500) (500) (500) (1000) (500) (500) (1000) (500) (1000) (500) (1000) (1000) (500) (1000) (1000) (1000) (500) (500) (1000) (500) (500) (1000) (500) (500) (500) (500) (500) (500) (250) (1500) (500) (250) (250) (1000) (500) (500) (2000) (1000) (500) (250) (250) (1000) (1000) (1000) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (750) (500) (750) (250) (250) (500) (500) (750) (250) (250) (1000) (1000) (1000) (1000) (250) (500) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (250) (500) (500) (500) (500) (250) (500) (500) (1000) (500) (250) (250) (750) (1000) (1000) (500) (500) (500) (250) (500) (750) (500) (250) (3000) (500) (250) (250) (500) (500) (500) (250) (500) (500) (500) (2000) (1000) (500) (1000) (1000) (1000) (500) (1000) (2000) (1000) (500) (2000) (2000) (2000) (2000) (1000) (1000) (1000) (1000) (2000) (500) (1000) (2000) (1000) (2000) (500) (500) (1000) (2000) (1000) (2000) (500) (500) (500) (500) (1000) (500) (6000) (1000) (1000) (1000) (1000) (500) (500) (500) (500) (500) (3000) (500) (500) (500) (2000) (2000) (2000) (1000) (1000) (1000) (4000) (500) (500) (500) (500) (500) (2000) (2000) (1000) (1000) (1000) (500) (1000) (2000) (500) (500) (500) (1000) (1000) (1000) (1000) (1000) (500) (500) (1000) (1000) (500) (500) (1000) (1000) (1000) (2000) (2000) (500) (3000) (500) (1000) (1000) (2000) (1000) (2000) (1000) (1000) (500) (1000) (1000) (1000) (1000) (2000) (2000) (6000) (2000) (1000) (1000) (8000) (500) (1000) (500) (1000) (2000) (1000) (2000) (2000) (1000) (4000) (4000) (4000) (4000))) :lvel (quoteloffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1001 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 22) (om-make-point 1966 468) 0 1000 nil 49/100 (quote :midishare) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 36 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((31 1 4 0 nil 0) (31 1 5 0 nil 0) (4 0 5 1 nil 0) (8 0 6 0 nil 0) (24 0 8 0 nil 0) (7 0 8 1 nil 0) (18 0 17 0 nil 0) (13 1 18 0 nil 0) (17 1 20 1 nil 0) (22 0 21 0 nil 0) (35 0 21 1 nil 0) (15 0 21 2 nil 0) (17 0 22 1 nil 0) (20 0 23 0 nil 0) (21 0 23 1 nil 0) (15 0 23 2 nil 0) (31 0 24 1 nil 0) (5 0 24 2 nil 0) (31 2 24 3 nil 0) (23 0 25 0 nil 0) (29 0 28 0 nil 0) (27 0 28 1 nil 0) (48 2 30 0 nil 0) (29 0 30 1 nil 0) (28 0 30 2 nil 0) (32 0 31 0 nil 0) (25 0 32 0 nil 0) (58 0 33 0 nil 0) (37 1 34 1 nil 0) (34 0 35 0 nil 0) (45 0 35 1 nil 0) (16 0 35 2 nil 0) (37 0 36 1 nil 0) (39 0 37 0 nil 0) (38 0 39 0 nil 0) (41 0 39 1 nil 0) (40 0 41 0 nil 0) (42 0 41 1 nil 0) (44 0 41 2 nil 0) (43 0 42 0 nil 0) (46 0 43 1 nil 0) (43 0 44 0 nil 0) (36 0 45 0 nil 0) (33 0 45 1 nil 0) (16 0 45 2 nil 0) (47 0 46 0 nil 0) (30 0 47 0 nil 0) (54 0 47 1 nil 0) (51 0 48 0 nil 0) (49 0 48 1 nil 0) (57 0 52 0 nil 0) (53 0 52 1 nil 0) (57 0 53 0 nil 0) (59 2 54 0 nil 0) (59 3 55 0 nil 0) (59 1 56 0 nil 0) (59 2 57 0 nil 0) (56 0 58 0 nil 0) (52 0 58 1 nil 0) (55 0 58 2 nil 0))) nil 6.1001))
