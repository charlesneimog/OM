; OM File Header - Saved 2015/07/16 20:24:33
; (6.090012 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 542 657) "" 183 0 "2015/07/16 20:09:45" "2015/07/16 20:24:33")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"create_mode_segment.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "create_mode_segment" (quote ((let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 169 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 134 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 180 58) (quote "É necessário verificar que o interval set permite uma solução!") "" (om-make-point 280 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 21 271) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 168 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-FILTER" (quote list-filter) (quote ((om-load-inputfun (quote input-funbox) "function or function name" "TEST" (quote numberp)) (om-load-inputfun (quote input-funbox) "a list" "LIST" (list 1 2 3)) (om-load-inputfunmenu1 (quote input-funmenu) "pass or reject" "MODE" (quote pass) (list (list "Reject" (quote (quote reject))) (list "Pass" (quote (quote pass))))))) (om-make-point 193 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<=" (quote om<=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 133 261) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 95 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "create_mode_segment" (quote ("elements" "_abstractions" "create_mode_segment")) (quote ((om-load-inputfun (quote input-funbox) "" "limits" nil) (om-load-inputfun (quote input-funbox) "" "interval_set" nil))) (om-make-point 320 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 49 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INCLUDED?" (quote included?) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST1" nil) (om-load-inputfun (quote input-funbox) "a list" "LST2" nil))) (om-make-point 89 404) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 155 561) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "mode_segment" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 34 477) (om-make-point 323 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "interval_set" 1 (om-make-point 201 10) "" "interval_set" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "limits" 0 (om-make-point 21 38) "" "limits" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 233 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 170 204) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 259 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (14 0 3 0 nil 2) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 5 0 nil 0) (17 0 5 1 nil 0) (7 0 6 1 nil 0) (9 0 7 0 nil 0) (14 0 8 0 nil 2) (13 0 8 1 nil 1) (14 0 9 0 nil 2) (9 0 10 0 nil 0) (5 0 10 1 nil 0) (12 0 11 0 nil 0) (10 0 12 0 nil 0) (4 0 12 1 nil 0) (8 0 12 2 nil 0) (13 0 15 0 nil 1) (15 0 16 0 nil 0) (0 0 16 1 nil 0) (16 0 17 1 nil 0))) nil 6.090012))