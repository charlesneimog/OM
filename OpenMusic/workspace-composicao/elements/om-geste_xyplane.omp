; OM File Header - Saved 2021/09/08 17:25:50
; (6.19 :patc (om-make-point 223 660) (om-make-point 50 50) (om-make-point 1336 608) "" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "om-geste_xyplane" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 195 42) (quote "-> list of 3D-trajectories (one 3D-trajectory per 'slice')") nil (om-make-point 643 390) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 30) (quote "-> list of 3DC (one 3DC per 'slice')") nil (om-make-point 238 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 96 30) (quote "3D-trajectory") nil (om-make-point 566 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 41 30) (quote "3DC") nil (om-make-point 132 90) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 60) (quote "list of z-coordinates to define 'slices'") nil (om-make-point 674 213) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 110 60) (quote "list of z-coordinates to define 'slices'") nil (om-make-point 237 168) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch 2" (quote ((let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 61 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 95 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 5 285) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0))) 6.1 nil "" (om-make-point 163 203) (om-make-point 509 594)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 465 181) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 538 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TIMES" (quote times) (quote ((om-load-inputfun (quote input-funbox) "3D-TIMED-CURVE" "3D-TIMED-CURVE" nil))) (om-make-point 601 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POINT-PAIRS 2" (quote point-pairs) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil))) (om-make-point 532 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 671 272) (om-make-point 112 30) (list 0 100 200 300) "(0 100 200 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 595 342) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 416 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 275 516) (om-make-point 80 60) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote nil) (quote nil) (quote nil) (quote nil) (quote 3d-trajectory) 0 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) nil) (setf (z-points newobj) nil)) newobj) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize color-max color-min color-mode)) (list nil nil 1.0 2 1 1 0 (om-make-point 600 200) (om-make-point 800 800) (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 304 589) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 460 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 447 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 316 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 368 58) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 148 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "filter" (om-load-patch-abs1 "filter" (quote ((let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 364 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 388 63) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 338 63) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 345 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 268 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 195 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 242 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 133 351) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 59) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 5 1 nil 0) (8 0 6 0 nil 0) (5 0 7 0 nil 0))) 6.1 nil "" (om-make-point -1522 165) (om-make-point 558 523)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 322 199) nil (list nil) "l" "filter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 138 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 222 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 237 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 283 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 341 432) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 162 61) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 374 659) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 233 660) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((10 0 0 0 nil 0) (11 0 1 1 nil 0) (12 0 1 2 nil 0) (13 0 1 3 nil 0) (0 0 1 5 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (3 0 4 0 nil 0) (6 0 5 0 nil 0) (8 0 7 0 nil 0) (14 0 7 1 nil 0) (5 0 8 1 nil 0) (4 0 8 2 nil 0) (7 0 9 1 nil 0) (9 0 10 0 nil 0) (10 0 11 0 nil 0) (10 0 12 0 nil 0) (10 0 13 0 nil 0) (2 1 15 0 nil 0) (2 0 16 0 nil 0))) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3D-TRAJECTORY" (quote 3d-trajectory) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" nil) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" nil) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" nil) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0) (om-load-inputfun (quote input-funbox) "time for each point (list)" "times" nil) (om-load-inputfun (quote input-funbox) "optional computation of actual trajectory points" "sample-params" nil) (om-load-inputfunmenu1 (quote input-funmenu) "optional autmatic time comptation mode" "interpol-mode" (quote points) (list (list "points (constant time)" (quote (quote points))) (list "distance (constant speed)" (quote (quote dist))))))) (om-make-point 567 97) (om-make-point 80 60) (let ((newobj (when (find-class (quote 3d-trajectory) nil) (let ((newbpf (traject-from-list (quote (0.0 1.9999998 3.9999996 5.0 6.0000014 6.0000005 5.999998 4.9999995 3.0000015 0.0 -2.9999988 -7.999995 -11.999991 -16.999995 -20.999995 -25.99999 -29.999993 -32.99999 -35.999993 -36.999993 -37.999997 -35.999985 -33.999993 -30.000006 -23.99999 -16.999995 -9.000002 0.0 9.999991 19.999995 29.999985 39.99998 48.999985 56.99999 64.00001 69.0 72.00002 73.00003 71.00004 68.00006 61.000065 53.000088 42.000073 29.000073 15.000073 7.19054E-5 -15.999939 -31.999949 -47.99995 -62.99994 -76.999955 -87.99996 -97.99995 -103.999955 -107.99994 -107.99992 -104.99994 -98.99994 -88.99993 -75.99992 -59.999894 -41.99991 -21.999882 1.006675E-4 22.000065 44.000073 66.000046 86.00003 104.00003 120.00003 132.00005 140.00005 144.00005 144.00003 139.00005 130.00006 116.00005 99.00009 78.00005 54.00008 28.000082 8.62865E-5 -27.999913 -56.99993 -83.9999 -108.999886 -131.99988 -150.99983 -164.99985 -174.99982 -179.99982 -178.99977 -172.99982 -160.99976 -143.99974 -121.99971 -95.999726 -65.99975 -33.999794 1.581916E-4 35.0001 69.000046 101.99999 132.00002 159.00003 182.00002 199.00005 211.00008 216.0001 215.00017 207.0002 192.00025 172.00029 145.00028 114.000275 79.00025 40.00024 1.869541E-4 -40.99986 -80.99986 -119.99981 -155.99983 -186.99977 -212.99973 -232.9997 -245.99968 -251.99965 -249.99958 -240.99968 -222.9996 -198.99959 -167.99962 -131.99956 -90.9996 -46.999627 3.595265E-4 47.000283 94.000275 138.00026 179.00026 214.00034 244.00038 267.00034 282.0004 288.00046 286.00046 274.0005 255.00052 227.00054 192.00057 150.00058 103.00061 53.000515 4.889569E-4 -52.99955 -105.99951 -155.9996 -201.99959 -241.9996 -274.99945 -300.99948 -316.99942 -323.9994 -320.99933 -307.9993 -285.9993 -253.99927 -214.99916 -167.99924 -115.99923 -58.999295 7.286404E-4 60.000687 118.00063 174.00064 225.00063 270.0007 307.00073 335.00076 353.0008 360.0009)) (quote (0.0 1.9999998 3.9999996 5.9999995 8.0 9.999998 11.999999 14.0 16.000002 18.0 20.000002 22.000004 24.000004 26.000006 28.000004 30.000008 32.000008 34.00001 36.00001 38.000016 40.00001 42.00002 44.000008 46.000004 47.999993 49.999993 51.99999 53.999985 55.999993 57.99999 59.999985 61.999985 63.99999 66.0 68.0 69.99999 71.999985 73.99998 75.999985 77.99997 79.99997 81.99997 83.99999 86.00001 88.000016 90.00002 92.00002 94.00003 96.000046 98.00007 100.00007 102.00004 104.00006 106.00005 108.00005 110.00005 112.00004 114.000046 116.000016 118.000046 120.00003 122.00001 123.999985 125.99996 127.99996 129.99993 131.99996 133.99996 135.99994 137.99994 139.99994 141.99996 143.99997 145.99997 147.99997 150.0 152.0 154.00003 156.00005 158.00006 160.00008 162.00008 164.00009 166.0001 168.00016 170.00012 172.00017 174.0002 176.00022 178.0002 180.0002 182.00017 184.00012 186.00012 188.00009 190.00005 191.99997 193.99996 195.99987 197.99982 199.99974 201.99973 203.99976 205.99979 207.99983 209.99979 211.99985 213.99987 215.99988 217.99991 219.99993 221.99996 223.99996 226.00003 228.00014 230.00017 232.00022 234.00022 236.00032 238.0003 240.00028 242.00035 244.00034 246.00037 248.00037 250.00037 252.0003 254.00032 256.00024 258.00018 260.0002 262.0001 264.00003 265.9999 267.99988 269.99982 271.99973 273.9997 275.99966 277.9996 279.99963 281.99957 283.99954 285.99954 287.99957 289.9996 291.99963 293.9997 295.99982 297.9999 300.0 302.0001 304.00018 306.0003 308.00037 310.00043 312.00052 314.00052 316.00058 318.00064 320.00055 322.00064 324.00064 326.0006 328.00052 330.00046 332.0003 334.0002 336.0001 338.0 339.99985 341.99976 343.99957 345.99948 347.99945 349.99927 351.99924 353.99915 355.99908 357.9991 359.99915)) (quote (0.0 -1.236E-7 1.0000006 3.0000005 4.9999995 8.0 10.000003 12.999999 16.0 18.0 20.0 20.999999 20.999999 19.999999 17.999999 14.999994 10.9999895 5.9999967 -2.2254E-6 -6.999995 -13.999989 -20.999997 -27.999995 -35.0 -42.000008 -47.000008 -51.000016 -54.00001 -55.00001 -55.000008 -52.00003 -47.000027 -41.00004 -33.000027 -23.00002 -12.000022 -2.87274E-5 12.999963 25.999962 38.999974 50.999974 62.99996 72.99996 80.99997 86.99997 89.99998 90.999985 87.999985 82.99997 74.99998 63.99996 50.999955 35.999966 17.99997 -4.30911E-5 -19.00004 -38.000027 -57.000008 -75.00002 -89.99999 -104.00003 -115.0 -122.000046 -126.00002 -126.00004 -122.000046 -114.000046 -103.00003 -87.000046 -69.00005 -48.000058 -25.000023 -5.74549E-5 24.999949 50.99995 74.99992 97.999916 117.999916 134.99994 147.99994 157.99991 161.99993 161.99993 155.99993 144.99988 129.99991 110.999886 86.99988 59.999867 30.999823 -1.932015E-4 -32.000225 -59.000214 -93.00018 -121.000176 -146.0002 -166.00017 -182.00017 -193.00017 -198.0002 -197.00022 -190.00025 -177.00029 -158.00026 -134.00028 -105.00035 -73.00036 -37.000355 -3.046715E-4 37.999653 74.99964 110.99961 143.99967 172.99973 196.99968 215.99971 227.99973 233.99976 231.99973 223.99971 207.99976 184.99973 156.99974 122.99976 84.99969 42.99969 -2.704821E-4 -44.00024 -88.000244 -129.0003 -167.00019 -201.00023 -229.00022 -250.00023 -264.00018 -270.0002 -268.0002 -257.00024 -239.00025 -213.00028 -180.00023 -141.00019 -97.00026 -50.000287 -3.091224E-4 49.999665 99.999695 146.99965 189.99971 231.99965 259.9997 283.9997 298.99973 305.9997 302.9997 290.99973 269.9997 240.99962 202.99967 158.99967 108.99969 55.999672 -3.477627E-4 -57.00037 -112.000405 -165.00038 -213.00038 -256.00046 -291.00037 -318.0003 -335.0003 -342.00024 -339.00027 -325.0003 -301.0003 -268.0004 -226.00035 -177.00046 -122.00046 -62.00053 -5.077859E-4)) (quote (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180)) (quote 3d-trajectory) 10 (quote nil) (quote points)))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (interpol-mode newobj) (quote points)) (setf (sample-params newobj) nil) (setf (times newobj) (listsetf (z-points newobj) (list 0.0 -1.236E-7 1.0000006 3.0000005 4.9999995 8.0 10.000003 12.999999 16.0 18.0 20.0 20.999999 20.999999 19.999999 17.999999 14.999994 10.9999895 5.9999967 -2.2254E-6 -6.999995 -13.999989 -20.999997 -27.999995 -35.0 -42.000008 -47.000008 -51.000016 -54.00001 -55.00001 -55.000008 -52.00003 -47.000027 -41.00004 -33.000027 -23.00002 -12.000022 -2.87274E-5 12.999963 25.999962 38.999974 50.999974 62.99996 72.99996 80.99997 86.99997 89.99998 90.999985 87.999985 82.99997 74.99998 63.99996 50.999955 35.999966 17.99997 -4.30911E-5 -19.00004 -38.000027 -57.000008 -75.00002 -89.99999 -104.00003 -115.0 -122.000046 -126.00002 -126.00004 -122.000046 -114.000046 -103.00003 -87.000046 -69.00005 -48.000058 -25.000023 -5.74549E-5 24.999949 50.99995 74.99992 97.999916 117.999916 134.99994 147.99994 157.99991 161.99993 161.99993 155.99993 144.99988 129.99991 110.999886 86.99988 59.999867 30.999823 -1.932015E-4 -32.000225 -59.000214 -93.00018 -121.000176 -146.0002 -166.00017 -182.00017 -193.00017 -198.0002 -197.00022 -190.00025 -177.00029 -158.00026 -134.00028 -105.00035 -73.00036 -37.000355 -3.046715E-4 37.999653 74.99964 110.99961 143.99967 172.99973 196.99968 215.99971 227.99973 233.99976 231.99973 223.99971 207.99976 184.99973 156.99974 122.99976 84.99969 42.99969 -2.704821E-4 -44.00024 -88.000244 -129.0003 -167.00019 -201.00023 -229.00022 -250.00023 -264.00018 -270.0002 -268.0002 -257.00024 -239.00025 -213.00028 -180.00023 -141.00019 -97.00026 -50.000287 -3.091224E-4 49.999665 99.999695 146.99965 189.99971 231.99965 259.9997 283.9997 298.99973 305.9997 302.9997 290.99973 269.9997 240.99962 202.99967 158.99967 108.99969 55.999672 -3.477627E-4 -57.00037 -112.000405 -165.00038 -213.00038 -256.00046 -291.00037 -318.0003 -335.0003 -342.00024 -339.00027 -325.0003 -301.0003 -268.0004 -226.00035 -177.00046 -122.00046 -62.00053 -5.077859E-4))) newobj) "x" nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize color-max color-min color-mode)) (list nil nil 1.0 2 1 1 0 (om-make-point -1202 22) (om-make-point 800 800) (list 0.0 0.9 1.0) (list 0.4 0.8 1.0) 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 233 228) (om-make-point 112 30) (list 0 100 200 300) "(0 100 200 300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 205 275) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 304 589) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 460 129) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 447 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 316 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 368 58) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 148 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "filter" (om-load-patch-abs1 "filter" (quote ((let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 364 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 388 63) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 338 63) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 345 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 268 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 195 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 242 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 133 351) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 59) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 5 1 nil 0) (8 0 6 0 nil 0) (5 0 7 0 nil 0))) 6.1 nil "" (om-make-point -1629 180) (om-make-point 527 453)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 322 199) nil (list nil) "l" "filter"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 138 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 222 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 237 439) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 283 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 350 441) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 275 517) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (4 5 6 6 6 5 3 0 -3 -8 -12 -17 -21 -26 -30 -33 73 71 68 61 53 42 29 15 0 -16 -32 -48 -63 -77 -88 -98 -104 144 139 130 116 99 78 54 28 0 -28 -57 -84 -109 -132 -151 -165 -175 215 207 192 172 145 114 79 40 0 -41 -81 -120 -156 -187 -213 -233 -246 286 274 255 227 192 150 103 53 0 -53 -106 -156 -202 -242 -275 -301 -317)) (quote (4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322)) (quote (1 3 5 8 10 13 16 18 20 21 21 20 18 15 11 6 13 26 39 51 63 73 81 87 90 91 88 83 75 64 51 36 18 25 51 75 98 118 135 148 158 162 162 156 145 130 111 87 60 31 38 75 111 144 173 197 216 228 234 232 224 208 185 157 123 85 43 50 100 147 190 232 260 284 299 306 303 291 270 241 203 159 109 56)) (quote 3dc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 1 3 5 8 10 13 16 18 20 21 21 20 18 15 11 6 13 26 39 51 63 73 81 87 90 91 88 83 75 64 51 36 18 25 51 75 98 118 135 148 158 162 162 156 145 130 111 87 60 31 38 75 111 144 173 197 216 228 234 232 224 208 185 157 123 85 43 50 100 147 190 232 260 284 299 306 303 291 270 241 203 159 109 56))) newobj) nil nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point -800 68) (om-make-point 800 800))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 162 61) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 374 659) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 233 660) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((12 0 0 0 nil 0) (4 0 1 0 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (6 0 5 0 nil 0) (13 0 5 1 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0) (5 0 7 1 nil 0) (7 0 8 0 nil 0) (8 0 9 0 nil 0) (8 0 10 0 nil 0) (8 0 11 0 nil 0) (9 0 12 1 nil 0) (10 0 12 2 nil 0) (11 0 12 3 nil 0) (0 1 14 0 nil 0) (0 0 15 0 nil 0))) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POINT-PAIRS" (quote point-pairs) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil))) (om-make-point 114 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "3DC" (quote 3dc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Z coordinates (list)" "z-points" (list 0 0)) (om-load-inputfun (quote input-funbox) "precision (number)" "decimals" 0))) (om-make-point 120 117) (om-make-point 60 60) (let ((newobj (when (find-class (quote 3dc) nil) (let ((newbpf (3dc-from-list (quote (0.0 1.9999998 3.9999996 5.0 6.0000014 6.0000005 5.999998 4.9999995 3.0000015 0.0 -2.9999988 -7.999995 -11.999991 -16.999995 -20.999995 -25.99999 -29.999993 -32.99999 -35.999993 -36.999993 -37.999997 -35.999985 -33.999993 -30.000006 -23.99999 -16.999995 -9.000002 0.0 9.999991 19.999995 29.999985 39.99998 48.999985 56.99999 64.00001 69.0 72.00002 73.00003 71.00004 68.00006 61.000065 53.000088 42.000073 29.000073 15.000073 7.19054E-5 -15.999939 -31.999949 -47.99995 -62.99994 -76.999955 -87.99996 -97.99995 -103.999955 -107.99994 -107.99992 -104.99994 -98.99994 -88.99993 -75.99992 -59.999894 -41.99991 -21.999882 1.006675E-4 22.000065 44.000073 66.000046 86.00003 104.00003 120.00003 132.00005 140.00005 144.00005 144.00003 139.00005 130.00006 116.00005 99.00009 78.00005 54.00008 28.000082 8.62865E-5 -27.999913 -56.99993 -83.9999 -108.999886 -131.99988 -150.99983 -164.99985 -174.99982 -179.99982 -178.99977 -172.99982 -160.99976 -143.99974 -121.99971 -95.999726 -65.99975 -33.999794 1.581916E-4 35.0001 69.000046 101.99999 132.00002 159.00003 182.00002 199.00005 211.00008 216.0001 215.00017 207.0002 192.00025 172.00029 145.00028 114.000275 79.00025 40.00024 1.869541E-4 -40.99986 -80.99986 -119.99981 -155.99983 -186.99977 -212.99973 -232.9997 -245.99968 -251.99965 -249.99958 -240.99968 -222.9996 -198.99959 -167.99962 -131.99956 -90.9996 -46.999627 3.595265E-4 47.000283 94.000275 138.00026 179.00026 214.00034 244.00038 267.00034 282.0004 288.00046 286.00046 274.0005 255.00052 227.00054 192.00057 150.00058 103.00061 53.000515 4.889569E-4 -52.99955 -105.99951 -155.9996 -201.99959 -241.9996 -274.99945 -300.99948 -316.99942 -323.9994 -320.99933 -307.9993 -285.9993 -253.99927 -214.99916 -167.99924 -115.99923 -58.999295 7.286404E-4 60.000687 118.00063 174.00064 225.00063 270.0007 307.00073 335.00076 353.0008 360.0009)) (quote (0.0 1.9999998 3.9999996 5.9999995 8.0 9.999998 11.999999 14.0 16.000002 18.0 20.000002 22.000004 24.000004 26.000006 28.000004 30.000008 32.000008 34.00001 36.00001 38.000016 40.00001 42.00002 44.000008 46.000004 47.999993 49.999993 51.99999 53.999985 55.999993 57.99999 59.999985 61.999985 63.99999 66.0 68.0 69.99999 71.999985 73.99998 75.999985 77.99997 79.99997 81.99997 83.99999 86.00001 88.000016 90.00002 92.00002 94.00003 96.000046 98.00007 100.00007 102.00004 104.00006 106.00005 108.00005 110.00005 112.00004 114.000046 116.000016 118.000046 120.00003 122.00001 123.999985 125.99996 127.99996 129.99993 131.99996 133.99996 135.99994 137.99994 139.99994 141.99996 143.99997 145.99997 147.99997 150.0 152.0 154.00003 156.00005 158.00006 160.00008 162.00008 164.00009 166.0001 168.00016 170.00012 172.00017 174.0002 176.00022 178.0002 180.0002 182.00017 184.00012 186.00012 188.00009 190.00005 191.99997 193.99996 195.99987 197.99982 199.99974 201.99973 203.99976 205.99979 207.99983 209.99979 211.99985 213.99987 215.99988 217.99991 219.99993 221.99996 223.99996 226.00003 228.00014 230.00017 232.00022 234.00022 236.00032 238.0003 240.00028 242.00035 244.00034 246.00037 248.00037 250.00037 252.0003 254.00032 256.00024 258.00018 260.0002 262.0001 264.00003 265.9999 267.99988 269.99982 271.99973 273.9997 275.99966 277.9996 279.99963 281.99957 283.99954 285.99954 287.99957 289.9996 291.99963 293.9997 295.99982 297.9999 300.0 302.0001 304.00018 306.0003 308.00037 310.00043 312.00052 314.00052 316.00058 318.00064 320.00055 322.00064 324.00064 326.0006 328.00052 330.00046 332.0003 334.0002 336.0001 338.0 339.99985 341.99976 343.99957 345.99948 347.99945 349.99927 351.99924 353.99915 355.99908 357.9991 359.99915)) (quote (0.0 -1.236E-7 1.0000006 3.0000005 4.9999995 8.0 10.000003 12.999999 16.0 18.0 20.0 20.999999 20.999999 19.999999 17.999999 14.999994 10.9999895 5.9999967 -2.2254E-6 -6.999995 -13.999989 -20.999997 -27.999995 -35.0 -42.000008 -47.000008 -51.000016 -54.00001 -55.00001 -55.000008 -52.00003 -47.000027 -41.00004 -33.000027 -23.00002 -12.000022 -2.87274E-5 12.999963 25.999962 38.999974 50.999974 62.99996 72.99996 80.99997 86.99997 89.99998 90.999985 87.999985 82.99997 74.99998 63.99996 50.999955 35.999966 17.99997 -4.30911E-5 -19.00004 -38.000027 -57.000008 -75.00002 -89.99999 -104.00003 -115.0 -122.000046 -126.00002 -126.00004 -122.000046 -114.000046 -103.00003 -87.000046 -69.00005 -48.000058 -25.000023 -5.74549E-5 24.999949 50.99995 74.99992 97.999916 117.999916 134.99994 147.99994 157.99991 161.99993 161.99993 155.99993 144.99988 129.99991 110.999886 86.99988 59.999867 30.999823 -1.932015E-4 -32.000225 -59.000214 -93.00018 -121.000176 -146.0002 -166.00017 -182.00017 -193.00017 -198.0002 -197.00022 -190.00025 -177.00029 -158.00026 -134.00028 -105.00035 -73.00036 -37.000355 -3.046715E-4 37.999653 74.99964 110.99961 143.99967 172.99973 196.99968 215.99971 227.99973 233.99976 231.99973 223.99971 207.99976 184.99973 156.99974 122.99976 84.99969 42.99969 -2.704821E-4 -44.00024 -88.000244 -129.0003 -167.00019 -201.00023 -229.00022 -250.00023 -264.00018 -270.0002 -268.0002 -257.00024 -239.00025 -213.00028 -180.00023 -141.00019 -97.00026 -50.000287 -3.091224E-4 49.999665 99.999695 146.99965 189.99971 231.99965 259.9997 283.9997 298.99973 305.9997 302.9997 290.99973 269.9997 240.99962 202.99967 158.99967 108.99969 55.999672 -3.477627E-4 -57.00037 -112.000405 -165.00038 -213.00038 -256.00046 -291.00037 -318.0003 -335.0003 -342.00024 -339.00027 -325.0003 -301.0003 -268.0004 -226.00035 -177.00046 -122.00046 -62.00053 -5.077859E-4)) (quote 3dc) 10))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj (setf (z-points newobj) (list 0.0 -1.236E-7 1.0000006 3.0000005 4.9999995 8.0 10.000003 12.999999 16.0 18.0 20.0 20.999999 20.999999 19.999999 17.999999 14.999994 10.9999895 5.9999967 -2.2254E-6 -6.999995 -13.999989 -20.999997 -27.999995 -35.0 -42.000008 -47.000008 -51.000016 -54.00001 -55.00001 -55.000008 -52.00003 -47.000027 -41.00004 -33.000027 -23.00002 -12.000022 -2.87274E-5 12.999963 25.999962 38.999974 50.999974 62.99996 72.99996 80.99997 86.99997 89.99998 90.999985 87.999985 82.99997 74.99998 63.99996 50.999955 35.999966 17.99997 -4.30911E-5 -19.00004 -38.000027 -57.000008 -75.00002 -89.99999 -104.00003 -115.0 -122.000046 -126.00002 -126.00004 -122.000046 -114.000046 -103.00003 -87.000046 -69.00005 -48.000058 -25.000023 -5.74549E-5 24.999949 50.99995 74.99992 97.999916 117.999916 134.99994 147.99994 157.99991 161.99993 161.99993 155.99993 144.99988 129.99991 110.999886 86.99988 59.999867 30.999823 -1.932015E-4 -32.000225 -59.000214 -93.00018 -121.000176 -146.0002 -166.00017 -182.00017 -193.00017 -198.0002 -197.00022 -190.00025 -177.00029 -158.00026 -134.00028 -105.00035 -73.00036 -37.000355 -3.046715E-4 37.999653 74.99964 110.99961 143.99967 172.99973 196.99968 215.99971 227.99973 233.99976 231.99973 223.99971 207.99976 184.99973 156.99974 122.99976 84.99969 42.99969 -2.704821E-4 -44.00024 -88.000244 -129.0003 -167.00019 -201.00023 -229.00022 -250.00023 -264.00018 -270.0002 -268.0002 -257.00024 -239.00025 -213.00028 -180.00023 -141.00019 -97.00026 -50.000287 -3.091224E-4 49.999665 99.999695 146.99965 189.99971 231.99965 259.9997 283.9997 298.99973 305.9997 302.9997 290.99973 269.9997 240.99962 202.99967 158.99967 108.99969 55.999672 -3.477627E-4 -57.00037 -112.000405 -165.00038 -213.00038 -256.00046 -291.00037 -318.0003 -335.0003 -342.00024 -339.00027 -325.0003 -301.0003 -268.0004 -226.00035 -177.00046 -122.00046 -62.00053 -5.077859E-4))) newobj) "x" nil (pairlis (quote (picture bg-color line-width room-size show-room show-axes mode winpos winsize)) (list nil nil 1.0 2 1 1 0 (om-make-point -800 68) (om-make-point 800 800))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 0 nil 0) (9 0 7 1 nil 0) (8 0 7 2 nil 0) (12 0 8 0 nil 0) (12 0 9 0 nil 0) (7 0 11 0 nil 0) (10 0 11 1 nil 0) (15 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 15 0 nil 0))) nil 6.1))
