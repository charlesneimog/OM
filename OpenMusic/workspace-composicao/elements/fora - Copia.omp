; OM File Header - Saved 2021/07/22 16:06:26
; (6.19 :patc (om-make-point 472 386) (om-make-point 52 11) (om-make-point 1566 861) "" 183 0 nil "2021/07/22 16:06:26")
; End File Header
; External resources 
; (list (list (quote :sound) nil"))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "fora" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 864 540) (om-make-point 40 32) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 458 582) (om-make-point 833 217) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (6 (((4 4) (-1 (1 (4 4 4 4 4 4 1)) (1 (3.0 4 4 4 4 4 2)) (1 (2.0 4 4 4 4 4 3)))) ((4 4) ((1 (1.0 4 4 4 4 4 4)) (1 (4 4 4 4 4 4 1)) (1 (3.0 4 4 4 4 4 2)) (1 (2.0 4 4 4 4 4 3)))) ((4 4) ((1 (1.0 4 4 4 4 4 4)) (1 (4 4 4 4 4 4 1)) (1 (3.0 4 4 4 4 4 2)) (1 (2.0 4 4 4 4 4 3)))) ((4 4) ((1 (1.0 4 4 4 4 4 4)) (1 (4 4 4 4 4 4 1)) (1 (3.0 4 4 4 4 4 2)) (1 (2.0 4 4 4 4 4 3)))) ((4 4) ((1 (1.0 4 4 4 4 4 4)) (1 (4 4 4 4 4 4 1)) (1 (3.0 4 4 4 4 4 2)) (1 (2.0 4 4 4 4 4 3)))) ((4 4) ((1 (1.0 4 4 4 4 4 4)) (1 (4 4 16 1.0)) 2.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8022 8076)) :ldur (quote (40 40)) :lvel (quote (24 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7996 8058 8128 8128)) :ldur (quote (40 40 40 40)) :lvel (quote (24 26 27 27)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8048 8134 8134)) :ldur (quote (40 40 40)) :lvel (quote (25 29 29)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8048 8132 8132 8132)) :ldur (quote (40 40 40 40)) :lvel (quote (24 25 25 25)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8148 8192)) :ldur (quote (40 40)) :lvel (quote (24 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8132 8200)) :ldur (quote (10 10)) :lvel (quote (26 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8044 8138 8138)) :ldur (quote (40 40 40)) :lvel (quote (26 27 27)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8032 8146 8146)) :ldur (quote (40 40 40)) :lvel (quote (27 24 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7670 8058)) :ldur (quote (40 40)) :lvel (quote (24 25)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7658 7790)) :ldur (quote (40 40)) :lvel (quote (25 34)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7646 7762 7838 7904 7904 7904 7904)) :ldur (quote (40 40 40 40 40 40 40)) :lvel (quote (24 32 42 38 38 38 38)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7710 7760 7830 7910 7974 7974 7974 7974 7974 7974)) :ldur (quote (20 20 20 20 20 20 20 20 20 20)) :lvel (quote (24 24 39 42 42 42 42 42 42 42)) :loffset (quote (0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7792 7856 7908 7994 7994 7994 7994 7994)) :ldur (quote (40 40 40 40 40 40 40 40)) :lvel (quote (28 31 28 58 58 58 58 58)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7986 7986 7986 7986 7986)) :ldur (quote (40 40 40 40 40)) :lvel (quote (56 56 56 56 56)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7904 7990 7990 7990 7990)) :ldur (quote (40 40 40 40 40)) :lvel (quote (45 39 39 39 39)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7758 7856 7966 8012 8012 8012 8012 8012)) :ldur (quote (40 40 40 40 40 40 40 40)) :lvel (quote (25 46 28 25 25 25 25 25)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7836 7960 7986 7986)) :ldur (quote (40 40 40 40)) :lvel (quote (52 27 25 25)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7830 7918 7992 7992 7992)) :ldur (quote (30 30 30 30 30)) :lvel (quote (66 25 28 28 28)) :loffset (quote (0 0 0 0 0)) :lchan (quote (1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7828 7994 7994 7994)) :ldur (quote (40 40 40 40)) :lvel (quote (72 26 26 26)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7836 7930 7930 7930)) :ldur (quote (40 40 40 40)) :lvel (quote (61 26 26 26)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7854)) :ldur (quote (40)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818 7868 7868)) :ldur (quote (40 40 40)) :lvel (quote (29 45 45)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7850 7850)) :ldur (quote (40 40)) :lvel (quote (38 38)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7848 7900 7900)) :ldur (quote (40 40 40)) :lvel (quote (37 27 27)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7836)) :ldur (quote (40)) :lvel (quote (52)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7822 7822)) :ldur (quote (40 40)) :lvel (quote (66 66)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7820 7820)) :ldur (quote (40 40)) :lvel (quote (72 72)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818)) :ldur (quote (40)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7810 7876)) :ldur (quote (40 40)) :lvel (quote (60 27)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7794 7794)) :ldur (quote (40 40)) :lvel (quote (43 43)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7792)) :ldur (quote (10)) :lvel (quote (46)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804 7804)) :ldur (quote (40 40)) :lvel (quote (48 48)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7798 7798)) :ldur (quote (40 40)) :lvel (quote (44 44)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7792 7792)) :ldur (quote (40 40)) :lvel (quote (33 33)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7766 7822 7822)) :ldur (quote (40 40 40)) :lvel (quote (38 34 34)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7782 7782)) :ldur (quote (40 40)) :lvel (quote (56 56)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7776 7776)) :ldur (quote (20 20)) :lvel (quote (69 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7768 7768)) :ldur (quote (40 40)) :lvel (quote (69 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7766 7822 7822)) :ldur (quote (40 40 40)) :lvel (quote (66 28 28)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7766 7824 7824)) :ldur (quote (40 40 40)) :lvel (quote (70 28 28)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7762)) :ldur (quote (40)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7758)) :ldur (quote (40)) :lvel (quote (64)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7686 7746 7746)) :ldur (quote (30 30 30)) :lvel (quote (24 48 48)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7736 7822 7822)) :ldur (quote (40 40 40)) :lvel (quote (47 26 26)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7746 7746)) :ldur (quote (40 40)) :lvel (quote (59 59)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7742 7742)) :ldur (quote (40 40)) :lvel (quote (69 69)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7732 7732)) :ldur (quote (40 40)) :lvel (quote (65 65)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7724)) :ldur (quote (40)) :lvel (quote (65)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7724)) :ldur (quote (40)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7720)) :ldur (quote (40)) :lvel (quote (71)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7714)) :ldur (quote (40)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7704 7704)) :ldur (quote (40 40)) :lvel (quote (49 49)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700 7700)) :ldur (quote (40 40)) :lvel (quote (50 50)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7694 7694)) :ldur (quote (40 40)) :lvel (quote (46 46)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7670 7728)) :ldur (quote (40 40)) :lvel (quote (45 29)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7670)) :ldur (quote (10)) :lvel (quote (53)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7658)) :ldur (quote (40)) :lvel (quote (56)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7648 7720)) :ldur (quote (40 40)) :lvel (quote (58 30)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7640)) :ldur (quote (40)) :lvel (quote (61)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7628)) :ldur (quote (40)) :lvel (quote (48)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7608 7680)) :ldur (quote (40 40)) :lvel (quote (42 30)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7596 7640)) :ldur (quote (20 20)) :lvel (quote (35 31)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7576 7670)) :ldur (quote (40 40)) :lvel (quote (36 29)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7584)) :ldur (quote (40)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7570)) :ldur (quote (40)) :lvel (quote (41)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7560)) :ldur (quote (40)) :lvel (quote (42)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7556)) :ldur (quote (40)) :lvel (quote (38)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7518 7596)) :ldur (quote (30 30)) :lvel (quote (33 28)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7512 7642)) :ldur (quote (40 40)) :lvel (quote (33 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7498 7600)) :ldur (quote (40 40)) :lvel (quote (30 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7464 7542)) :ldur (quote (40 40)) :lvel (quote (29 26)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7460)) :ldur (quote (40)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7444)) :ldur (quote (40)) :lvel (quote (34)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7420 7504)) :ldur (quote (40 40)) :lvel (quote (28 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7352)) :ldur (quote (40)) :lvel (quote (28)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7320 7400)) :ldur (quote (40 40)) :lvel (quote (25 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7436)) :ldur (quote (40)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7076)) :ldur (quote (40)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7080)) :ldur (quote (40)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7074)) :ldur (quote (10)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7070)) :ldur (quote (40)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7062)) :ldur (quote (40)) :lvel (quote (26)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7048)) :ldur (quote (40)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7002)) :ldur (quote (40)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7014)) :ldur (quote (20)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000 8204)) :ldur (quote (40 40)) :lvel (quote (24 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7010 8212)) :ldur (quote (40 40)) :lvel (quote (24 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7032)) :ldur (quote (40)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7054)) :ldur (quote (40)) :lvel (quote (25)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7066 8264)) :ldur (quote (40 40)) :lvel (quote (26 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7056 8262)) :ldur (quote (30 30)) :lvel (quote (26 25)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7058)) :ldur (quote (40)) :lvel (quote (24)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote nil) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil)))) (load-port-info thechord (quote nil)) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6684 7882)) :ldur (quote (40 40)) :lvel (quote (23 25)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6670 7864)) :ldur (quote (40 40)) :lvel (quote (24 27)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6654 7848)) :ldur (quote (40 40)) :lvel (quote (24 28)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6648 7842 7842)) :ldur (quote (40 40 40)) :lvel (quote (24 30 30)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650 7846 7846)) :ldur (quote (40 40 40)) :lvel (quote (24 32 32)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6658 7860 7860)) :ldur (quote (40 40 40)) :lvel (quote (24 30 30)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6668 7878 7878)) :ldur (quote (40 40 40)) :lvel (quote (25 28 28)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6668 7872 7872)) :ldur (quote (40 40 40)) :lvel (quote (25 28 28)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6662 7864)) :ldur (quote (40 40)) :lvel (quote (25 29)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6658 7848 7848)) :ldur (quote (40 40 40)) :lvel (quote (25 27 27)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6646 7840 7840)) :ldur (quote (10 10 10)) :lvel (quote (24 30 30)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7838 7838)) :ldur (quote (40 40)) :lvel (quote (37 37)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7822)) :ldur (quote (40)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7804)) :ldur (quote (40)) :lvel (quote (34)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7790)) :ldur (quote (40)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7790 7852 7852)) :ldur (quote (40 40 40)) :lvel (quote (28 24 24)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818 7818)) :ldur (quote (20 20)) :lvel (quote (31 31)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818)) :ldur (quote (40)) :lvel (quote (36)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7820 7820)) :ldur (quote (40 40)) :lvel (quote (39 39)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6640 7838 7838)) :ldur (quote (40 40 40)) :lvel (quote (24 34 34)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650 7850 7850)) :ldur (quote (40 40 40)) :lvel (quote (24 32 32)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7852 7852)) :ldur (quote (40 40)) :lvel (quote (30 30)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7842 7842)) :ldur (quote (30 30)) :lvel (quote (32 32)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7832 7832)) :ldur (quote (40 40)) :lvel (quote (39 39)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7824 7824)) :ldur (quote (40 40)) :lvel (quote (38 38)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7806)) :ldur (quote (40)) :lvel (quote (32)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7792)) :ldur (quote (40)) :lvel (quote (28)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7786 7850)) :ldur (quote (40 40)) :lvel (quote (26 24)) :loffset (quote (0 0)) :lchan (quote (1 1))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818)) :ldur (quote (40)) :lvel (quote (29)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7818)) :ldur (quote (40)) :lvel (quote (33)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7816)) :ldur (quote (40)) :lvel (quote (37)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7820)) :ldur (quote (160)) :lvel (quote (39)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 28 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 57 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 465 569) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 376 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 434 424) (om-make-point 41 34) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 533 429) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 590 435) (om-make-point 41 34) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8) (om-load-inputfun (quote input-funbox) "list of forbidden subdivisions" "FORBID" nil) (om-load-inputfun (quote input-funbox) "grace-notes?" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "precision (0.0-1.0)" "PRECIS" 0.5))) (om-make-point 255 482) (om-make-point 381 67.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 373 358) (om-make-point 56 34) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 336 412) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 58 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 120 356) (om-make-point 22.5 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 218 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 252 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (0 0 1 0 nil 0) (11 0 1 2 nil 0) (7 0 2 0 nil 0) (12 0 7 0 nil 0) (9 0 7 1 nil 0) (8 0 7 2 nil 0) (4 0 7 3 nil 0) (5 0 7 5 nil 0) (6 0 7 6 nil 0) (3 0 10 0 nil 0) (10 0 11 0 nil 0) (1 0 12 0 nil 0) (13 0 12 1 nil 0) (3 0 13 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1005 726)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1323/2 1989/4) nil nil "&" "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 653 278) (om-make-point 60 32) (list 0 40) "(0 40)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1073 112) (om-make-point 46 32) 8400 "8400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1015 99) (om-make-point 46 32) 4800 "4800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 543 432) (om-make-point 129 64) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 574 377) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 517 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 520 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "filtro" (om-load-patch-abs1 "filtro" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 127 352) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 151 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 80 288) (om-make-point 147 52.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM< 3" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 4800) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 448 179) (om-make-point 88 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 4800) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 354 179) (om-make-point 88 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "range-up" 3 (om-make-point 476 53) "" "range-up" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "range-down" 2 (om-make-point 394 52) "" "range-down" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 397 240) (om-make-point 114 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lvel" 1 (om-make-point 182 45) "" "lvel" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lmidic" 0 (om-make-point 89 43) "" "lmidic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (9 0 1 0 nil 0) (8 0 1 1 nil 0) (7 0 2 0 nil 0) (1 0 2 1 nil 0) (9 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 4 0 nil 0) (9 0 4 1 nil 0) (4 0 7 0 nil 0) (3 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 915 468)) (quote ((om-load-inputfun (quote input-funbox) "" "lmidic" nil) (om-load-inputfun (quote input-funbox) "" "lvel" nil) (om-load-inputfun (quote input-funbox) "" "range-down" nil) (om-load-inputfun (quote input-funbox) "" "range-up" nil))) (om-make-point 572 120) (om-make-point 168 60.0) nil "l" "filtro"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 184 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 218 230) (om-make-point 30 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 195 279) (om-make-point 129 64) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 84 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 135 367) (om-make-point 153 52.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" 1) (om-load-inputfun (quote input-funbox) "LIST" "LIST" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 469 257) (om-make-point 176 42.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "range-up" 3 (om-make-point 724 47) "" "range-up" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "range-down" 2 (om-make-point 638 49) "" "range-down" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lvel" 1 (om-make-point 227 63) "" "lvel" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "lmidic" 0 (om-make-point 124 57) "" "lmidic" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 1 nil 0) (1 0 0 2 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (10 0 3 0 nil 0) (12 0 4 2 nil 0) (11 0 4 3 nil 0) (9 0 5 0 nil 0) (6 0 7 1 nil 0) (6 0 7 2 nil 0) (6 0 7 3 nil 0) (6 0 7 4 nil 0) (6 0 7 5 nil 0) (14 0 8 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (0 0 9 2 nil 0) (4 0 10 0 nil 0) (14 0 10 1 nil 0) (13 0 10 2 nil 0))) 6.19 nil "" (om-make-point 218 119) (om-make-point 931 628)) (quote ((om-load-inputfun (quote input-funbox) "" "lmidic" nil) (om-load-inputfun (quote input-funbox) "" "lvel" nil) (om-load-inputfun (quote input-funbox) "" "range-down" nil) (om-load-inputfun (quote input-funbox) "" "range-up" nil))) (om-make-point 1010 155) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 772 260) (om-make-point 189 42.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 750 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 751 48) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 684 47) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 690 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 501 327) (om-make-point 539 168) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote (nil (8022 8076) (7996 8058 8128 8128) (8048 8134 8134) (8048 8132 8132 8132) (8148 8192) (8132 8200) (8044 8138 8138) (8032 8146 8146) (7670 8058) (7658 7790) (7646 7762 7838 7904 7904 7904 7904) (7710 7760 7830 7910 7974 7974 7974 7974 7974 7974) (7792 7856 7908 7994 7994 7994 7994 7994) (7986 7986 7986 7986 7986) (7904 7990 7990 7990 7990) (7758 7856 7966 8012 8012 8012 8012 8012) (7836 7960 7986 7986) (7830 7918 7992 7992 7992) (7828 7994 7994 7994) (7836 7930 7930 7930) (7854) (7818 7868 7868) (7850 7850) (7848 7900 7900) (7836) (7822 7822) (7820 7820) (7818) (7810 7876) (7794 7794) (7792) (7804 7804) (7798 7798) (7792 7792) (7766 7822 7822) (7782 7782) (7776 7776) (7768 7768) (7766 7822 7822) (7766 7824 7824) (7762) (7758) (7686 7746 7746) (7736 7822 7822) (7746 7746) (7742 7742) (7732 7732) (7724) (7724) (7720) (7714) (7704 7704) (7700 7700) (7694 7694) (7670 7728) (7670) (7658) (7648 7720) (7640) (7628) (7608 7680) (7596 7640) (7576 7670) (7584) (7570) (7560) (7556) (7518 7596) (7512 7642) (7498 7600) (7464 7542) (7460) (7444) (7420 7504) (7352) (7320 7400) nil (7436) (7076) (7080) (7074) (7070) (7062) (7048) nil (7002) (7014) (7000 8204) (7010 8212) (7032) (7054) (7066 8264) (7056 8262) (7058) nil (6684 7882) (6670 7864) (6654 7848) (6648 7842 7842) (6650 7846 7846) (6658 7860 7860) (6668 7878 7878) (6668 7872 7872) (6662 7864) (6658 7848 7848) (6646 7840 7840) (7838 7838) (7822) (7804) (7790) (7790 7852 7852) (7818 7818) (7818) (7820 7820) (6640 7838 7838) (6650 7850 7850) (7852 7852) (7842 7842) (7832 7832) (7824 7824) (7806) (7792) (7786 7850) (7818) (7818) (7816) (7820))) :lonset (quote (0 40 80 120 160 200 240 280 320 360 400 440 480 520 560 600 640 680 720 760 800 840 880 920 960 1000 1040 1080 1120 1160 1200 1240 1280 1320 1360 1400 1440 1480 1520 1560 1600 1640 1680 1720 1760 1800 1840 1880 1920 1960 2000 2040 2080 2120 2160 2200 2240 2280 2320 2360 2400 2440 2480 2520 2560 2600 2640 2680 2720 2760 2800 2840 2880 2920 2960 3000 3040 3080 3120 3160 3200 3240 3280 3320 3360 3400 3440 3480 3520 3560 3600 3640 3680 3720 3760 3800 3840 3880 3920 3960 4000 4040 4080 4120 4160 4200 4240 4280 4320 4360 4400 4440 4480 4520 4560 4600 4640 4680 4720 4760 4800 4840 4880 4920 4960 5000 5040 5080 6080)) :ldur (quote (nilnil (1000) (1000) (1000) (1000) (1000) (1000) (1000) nil (1000) (1000) (1000 1000) (1000 1000) (1000) (1000) (1000 1000) (1000 1000) (1000) nil (1000 1000) (1000 1000) (1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000) (1000) (1000) (1000) (1000 1000 1000) (1000 1000) (1000) (1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000 1000) (1000) (1000) (1000 1000) (1000) (1000) (1000) (1000))) :lvel (quote (nil (24 24) (24 26 27 27) (25 29 29) (24 25 25 25) (24 24) (26 24) (26 27 27) (27 24 24) (24 25) (25 34) (24 32 42 38 38 38 38) (24 24 39 42 42 42 42 42 42 42) (28 31 28 58 58 58 58 58) (56 56 56 56 56) (45 39 39 39 39) (25 46 28 25 25 25 25 25) (52 27 25 25) (66 25 28 28 28) (72 26 26 26) (61 26 26 26) (50) (29 45 45) (38 38) (37 27 27) (52) (66 66) (72 72) (71) (60 27) (43 43) (46) (48 48) (44 44) (33 33) (38 34 34) (56 56) (69 69) (69 69) (66 28 28) (70 28 28) (70) (64) (24 48 48) (47 26 26) (59 59) (69 69) (65 65) (65) (70) (71) (61) (49 49) (50 50) (46 46) (45 29) (53) (56) (58 30) (61) (48) (42 30) (35 31) (36 29) (40) (41) (42) (38) (33 28) (33 24) (30 24) (29 26) (33) (34) (28 24) (28) (25 24) nil (24) (24) (25) (26) (26) (26) (25) nil (24) (25) (24 24) (24 24) (25) (25) (26 24) (26 25) (24) nil (23 25) (24 27) (24 28) (24 30 30) (24 32 32) (24 30 30) (25 28 28) (25 28 28) (25 29) (25 27 27) (24 30 30) (37 37) (37) (34) (29) (28 24 24) (31 31) (36) (39 39) (24 34 34) (24 32 32) (30 30) (32 32) (39 39) (38 38) (32) (28) (26 24) (29) (33) (37) (39))) :loffset (quote (nil (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) nil (0) (0) (0) (0) (0) (0) (0) nil (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) nil (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0))) :lchan (quote (nil (1 1) (1 1 1 1) (1 1 1) (1 1 1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 1 1 1) (1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1) (1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1 1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1 1) nil (1) (1) (1) (1) (1) (1) (1) nil (1) (1) (1 1) (1 1) (1) (1) (1 1) (1 1) (1) nil (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1) (1) (1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1) (1 1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote (nil (0 0) (0 0 0 0) (0 0 0) (0 0 0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0) (0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0 0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0 0) nil (0) (0) (0) (0) (0) (0) (0) nil (0) (0) (0 0) (0 0) (0) (0) (0 0) (0 0) (0) nil (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0) (0) (0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0) (0 0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 10 nil 1000 0 (om-make-point 938 404) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->CHORD" (quote fft->chord) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "CKN-FFT-INSTANCE" 6000))) (om-make-point 518 106) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 556 5) (om-make-point 40 32) -30 "-30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->SIN-MODEL" (quote fft->sin-model) (quote ((om-load-inputfun (quote input-funbox) "A list of ckn-fft-instance class." "CKN-INSTANCES" (list nil)) (om-load-inputfun (quote input-funbox) "Threshold in dB." "DB-FILTER" -60))) (om-make-point 506 39) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 269 85) (om-make-point 40 32) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 219 85) (om-make-point 46 32) 2048 "2048" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-FFT" (quote do-fft) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "SOUND" nil) (om-load-inputfun (quote input-funbox) "FFT-size" "FFT-SIZE" 2048) (om-load-inputfun (quote input-funbox) "Hop-size" "HOP-SIZE" 512) (om-load-inputfunmenu1 (quote input-funmenu) "Windows-type" "WINDOW-TYPE" 2 (list (list "hann" 1) (list "blackman" 2) (list "barlett" 3) (list "hamming" 4) (list "rectangular" 5) (list "nenhuma" 6))))) (om-make-point 146 125) (om-make-point 236 66.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "395192__killyourpepe__duskwolf.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 137 7) (om-make-point 230 74) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "neimog" "Downloads")) :device nil :host nil :name "395192__killyourpepe__duskwolf" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "395192__killyourpepe__duskwolf.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 1 nil 0) (12 0 1 2 nil 0) (0 0 1 3 nil 0) (12 2 2 0 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (6 0 7 0 nil 0) (11 0 7 1 nil 0) (8 0 7 2 nil 0) (9 0 8 0 nil 0) (13 0 8 1 nil 0) (10 0 11 0 nil 0) (13 0 11 1 nil 0) (7 0 12 1 nil 0) (3 0 12 2 nil 0) (15 0 13 0 nil 0) (18 0 15 0 nil 0) (14 0 15 1 nil 0) (19 0 18 0 nil 0) (17 0 18 1 nil 0) (16 0 18 2 nil 0))) nil 6.19))
