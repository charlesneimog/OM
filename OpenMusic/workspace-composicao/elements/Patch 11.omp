; OM File Header - Saved 2021/07/24 16:12:32
; (6.19 :patc (om-make-point 1198 10) (om-make-point 202 19) (om-make-point 1485 435) "" 183 0 "2021/07/24 0:46:41" "2021/07/24 16:12:29")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "Patch 11" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 617 236) (om-make-point 40 32) (list 2) "(2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 587 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 696 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 308 223) (om-make-point 177 54.0) nil nil (list (let ((box (om-load-boxcall (quote abstraction) "fora 2" (om-load-patch-abs1 "fora 2" (quote ((let ((box (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 459 657) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 380 533) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 707 592) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 378 598) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 173 183) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 223) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" 0) (om-load-inputfun (quote input-funbox) "second element" "L2?" 1))) (om-make-point 681 403) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 761 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 801 264) (om-make-point 53 32) 44100 "44100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAMPLES->SEC" (quote samples->sec) (quote ((om-load-inputfun (quote input-funbox) "number of samples" "SAMPLES" 0) (om-load-inputfun (quote input-funbox) "sample rate (Hz)" "SAMPLERATE" nil))) (om-make-point 748 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 3" (om-load-patch-abs1 "mypatch 3" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 256 304) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 179) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction 2" (om-load-lisp-abspatch "lispfunction" 6.19 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x y) (make-instance 'chord :lmidic x :lvel y))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "Y" nil))) (om-make-point 239 209) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302) (4998 5438 6122 6566 7624 8302 8302 8302))) :lonset (quote (0 23 46 69 92 115 138 161 184 207 230 253 276 299 322 345 368 391 414 437 460 483 506 529 552 575 598 621 644 667 690 713 736 759 782 805 828 851 874 897 920 943 966 989 1012 1035 1058 1081 1104 1127 1150 1173 1196 1219 1242 1265 1288 1311 1334 1357 1380 1403 1426 1449 1472 1495 1518 1541 1564 1587 1610 1633 1656 1679 1702 1725 1748 1771 1794 1817 1840 1863 1886 1909 1932 1955 1978 2001 2024 2047 2070 2093 2116 2139 2162 2185 2208 2231 2254 2277 2300 2323 2346 2369 2392 2415 2438 2461 2484 2507 2530 2553 2576 2599 2622 2645 2668 2691 2714 2737 2760 2783 2806 2829 2852 2875 2898 2921 2944 2967 2990 3013 3036 3059 3082 3105 3128 3151 3174 3197 3220 3243 3266 3289 3312 3335 3358 3381 3404 3427 3450 3473 3496 3519 3542 3565 3588 3611 3634 3657 3680 3703 3726 3749 3772 3795 3818 3841 3864 3887 3910 3933 3956 3979 4002 4025 4048 4071 4094 4117 4140 4163 4186 4209 4232 4255 4278 4301 4324 4347 4370 4393 4416 4439 4462 4485 4508 4531 4554 4577 4600 4623 4646 4669 4692 4715 4738 4761 4784 4807 4830 4853 4876 4899 4922 4945 4968 4991 5014 5037 5060 5083 5106 5129 5152 5175 5198 5221 5244 5267 5290 5313 5336 5359 5382 5405 5428 5451 5474 5497 5520 5543 5566 5589 5612 5635 5658 5681 5704 5727 5750 5773 5796 5819 5842 5865 5888 5911 5934 5957 5980 6003 6026 6049 6072 6095 6118 6141 6164 6187 6210 6233 6256 6279 6302 6325 6348 6371 6394 6417 6440 6463 6486 6509 6532 6555 6578 6601 6624 6647 6670 6693 6716 6739 6762 6785 6808 6831 6854 6877 6900 6923 6946 6969 6992 7015 7038 7061 7084 7107 7130 7153 7176 7199 7222 7245 7268 7291 7314 7337 7360 7383 7406 7429 7452 7475 7498 7521 7544 7567 7590 7613 7636 7659 7682 7705 7728 7751 7774 7797 7820 7843 7866 7889 7912 7935 7958 7981 8004 8027 8050 8073 8096 8119 8142 8165 8188 8211 8234 8257 8280 8303 8326 8349 8372 8395 8418 8441 8464 8487 8510 8533 8556 8579 8602 8625 8648 8671 8694 8717 8740 8763 8786 8809 9809)) :ldur (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20) (20 20 20 20 20 20 20 20))) :loffset (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0))) :lchan (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 282 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 219 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 3" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 239 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (3 0 2 1 nil 0) (5 0 3 0 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 763/4 501) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 279 574) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 4" (om-load-patch-abs1 "mypatch 4" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 113 345) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 10697/63 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 10256/63 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 3" (om-load-patch-abs1 "mypatch 3" (quote ((let ((box (om-load-boxin "input" 0 (om-make-point 225 4) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 397 219) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 112 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 4800) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 144 121) (om-make-point 88 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM< 2" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 4800) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 50 121) (om-make-point 88 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 93 182) (om-make-point 114 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 52 58) (om-make-point 46 32) 5500 "5500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 194 80) (om-make-point 46 32) 7700 "7700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 332 121) (om-make-point 87 52.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 1 0 nil 0) (0 0 2 0 nil 0) (2 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0) (5 0 8 0 nil 0) (0 0 8 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 2794/21) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1068/7 598/3) (om-make-point 76 42.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (4 0 1 1 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 52919/252 15733/42) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 5" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 293 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 427 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 410 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 307 351) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 375 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 611 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 609 126) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 318 159) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 352 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->CHORD" (quote fft->chord) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "CKN-FFT-INSTANCE" 6000))) (om-make-point 382 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 429 50) (om-make-point 40 32) -60 "-60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FFT->SIN-MODEL" (quote fft->sin-model) (quote ((om-load-inputfun (quote input-funbox) "A list of ckn-fft-instance class." "CKN-INSTANCES" (list nil)) (om-load-inputfun (quote input-funbox) "Threshold in dB." "DB-FILTER" -60))) (om-make-point 379 82) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (9 0 1 0 nil 0) (5 0 4 1 nil 0) (7 0 5 0 nil 0) (2 0 7 0 nil 0) (6 0 7 1 nil 0) (8 0 9 0 nil 0) (11 0 9 1 nil 0) (10 0 11 0 nil 0) (15 0 11 1 nil 0) (19 0 12 0 nil 0) (16 0 12 1 nil 0) (12 0 13 0 nil 0) (14 0 15 0 nil 0) (13 0 15 1 nil 0) (17 0 16 0 nil 0) (20 0 16 1 nil 0) (18 0 19 0 nil 0) (20 0 19 1 nil 4) (22 0 20 0 nil 0) (3 0 22 0 nil 0) (21 0 22 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1175 662)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 933329/1260 103093/840) nil nil "&" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LONSET" (quote lonset) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 646 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction 3" (om-load-lisp-abspatch "lispfunction 3" 6.19 "$$(lambda (x y) (make-instance 'voice :tree x :chords y))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "Y" nil))) (om-make-point 245 362) nil nil "&" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction 2" (om-load-lisp-abspatch "lispfunction" 6.19 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x y z) (make-instance 'chord-seq :lmidic x :lvel y :Lchan z))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "Y" nil) (om-load-inputfun (quote input-funbox) "" "Z" nil))) (om-make-point 812 485) (om-make-point 187 60.0) nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL 2" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 905 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 793 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.19 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x y) (make-instance 'chord-seq :lmidic x :lonset y))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil) (om-load-inputfun (quote input-funbox) "" "Y" nil))) (om-make-point 733 230) nil nil "&" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 333 606) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 266 702) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 456 778) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 448 568) (om-make-point 350 32) "TODAS AS ALTURAS POSSUEM SAMPLES CORRESPONDENTES" "\"TODAS AS ALTURAS POSSUEM SAMPLES CORRESPONDENTES\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 407 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 419 713) (om-make-point 127 52.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 66 0) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 198 604) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 234 549) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1015 320) (om-make-point 33 32) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 976 321) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 951 382) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 305 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 238 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voices->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 199 493) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS 2" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 191 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "save-temp-sounds" (om-load-patch-abs1 "save-temp-sounds" (quote ((let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 143 242) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 73 338) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 347 146) nil nil "l" "save-temp-sounds"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 299 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 43 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 294 320.0) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voice->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 21 206) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 668 624) (om-make-point 40 32) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL 2" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 584 661) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT 3" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 18 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1143 733) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 279 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 763 789) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 635 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 653 850) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 290 692) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 237 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 159 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 690 746) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 811 718) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 90 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 335 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1313 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "acorde" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 537 588) (om-make-point 40 32) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 452 625) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 412 550) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (22 0 4 2 nil 0) (22 0 5 0 nil 0) (9 0 5 1 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (21 0 8 0 nil 0) (12 0 9 0 nil 0) (11 0 10 0 nil 0) (16 0 10 1 nil 0) (15 0 11 0 nil 0) (14 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (13 0 14 0 nil 0) (16 0 14 1 nil 0) (18 0 15 0 nil 0) (7 0 15 1 nil 0) (6 0 15 2 nil 0) (8 0 16 0 nil 0) (18 0 16 1 nil 0) (8 0 18 0 nil 0) (17 0 18 1 nil 0) (2 1 23 0 nil 0) (2 0 24 0 nil 0))) 1 "acorde" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1038 769) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 1011 824) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 40 32) 127 "127" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 40 32) 0.7 "0.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 40 32) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 1161 824) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 140 58) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 689 528) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 579) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 331 481) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 339 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 408 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 570 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 416 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 101 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 77 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 76 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 8 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 186 924) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((34 0 1 0 nil 0) (0 0 1 1 nil 0) (59 0 2 0 nil 0) (8 0 3 0 nil 0) (10 0 5 0 nil 2) (13 0 6 0 nil 0) (9 0 7 1 nil 2) (7 0 8 0 nil 2) (6 0 8 2 nil 2) (5 0 9 0 nil 2) (11 0 10 1 nil 2) (60 0 11 0 nil 2) (9 0 12 0 nil 2) (12 0 13 0 nil 0) (31 0 13 1 nil 0) (4 0 14 0 nil 0) (16 0 15 0 nil 0) (4 0 16 0 nil 0) (15 0 17 0 nil 0) (19 0 18 0 nil 0) (54 0 19 0 nil 1) (51 0 19 1 nil 1) (50 0 19 2 nil 1) (47 0 19 3 nil 1) (27 0 21 0 nil 0) (20 0 21 1 nil 0) (20 0 21 2 nil 0) (39 0 26 0 ((om-make-point 653 306.0) (om-make-point 655 473.0) (om-make-point 1098 347.0) (om-make-point 1189 638)) 5) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (23 0 26 3 nil 0) (22 0 26 4 nil 0) (3 0 27 0 nil 0) (26 0 27 1 nil 0) (51 0 28 0 nil 0) (28 0 30 0 nil 0) (29 0 30 1 nil 0) (30 0 31 0 nil 0) (1 0 31 1 nil 0) (18 0 31 2 nil 0) (53 0 33 0 nil 0) (32 0 33 1 nil 0) (32 0 33 2 nil 0) (36 0 34 0 nil 0) (42 0 35 0 nil 0) (43 0 35 1 nil 0) (38 0 36 0 nil 0) (42 0 36 1 nil 0) (35 0 36 2 nil 4) (37 0 38 0 nil 0) (43 0 38 1 nil 0) (47 0 39 0 nil 0) (50 0 40 0 nil 0) (46 0 41 0 nil 0) (41 0 42 0 nil 7) (40 0 42 1 nil 6) (39 0 42 2 ((om-make-point 655 307.0) (om-make-point 655 349.0) (om-make-point 628 384.0) (om-make-point 582 392)) 0) (44 0 43 0 nil 0) (51 0 44 0 nil 0) (46 0 44 1 nil 0) (51 0 46 0 nil 0) (45 0 46 1 nil 0) (48 0 47 0 nil 0) (52 0 47 1 ((om-make-point 218 216.0) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 606 179)) 3) (15 0 48 0 nil 0) (15 0 49 0 nil 0) (49 0 50 0 nil 0) (52 0 50 1 ((om-make-point 218 216.0) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 456 177)) 3) (17 0 51 0 nil 0) (52 0 51 1 nil 3) (14 0 52 0 nil 0) (54 0 53 0 nil 0) (55 0 54 0 nil 0) (59 0 55 0 nil 0) (57 0 56 0 nil 0) (58 0 57 0 nil 0) (21 0 57 1 nil 0) (33 0 57 2 nil 0) (2 0 58 0 nil 0) (60 0 59 0 nil 0) (4 0 60 0 nil 0) (56 1 61 0 nil 0) (56 0 62 0 nil 0))) 1 "voice->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 339 425.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 274 426.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 0 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (3 0 4 0 nil 0) (2 0 5 0 nil 0) (4 0 6 0 nil 0) (5 1 7 0 nil 0) (5 0 8 0 nil 0))) 1 "voices->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-SAMPLES-FOLDER" (quote ircam-samples-folder) (quote ((om-load-inputfun (quote input-funbox) "Name of the composer" "X" nil))) (om-make-point 695 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 515 646) (om-make-point 508 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 4" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1096 483) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "channel" (om-load-patch-abs1 "channel" (quote ((let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 117 81) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 410/3 263) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midi-check" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 377/3 204) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 371 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 527 550) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 723 304) (om-make-point 73 32) "NAO HA" "\"NAO HA\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 675 319) (om-make-point 40 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-PRINT" (quote om-print) (quote ((om-load-inputfun (quote input-funbox) "STR" "STR" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 698 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 588 430) (om-make-point 170 52.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 563 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 607 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 338 573) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 449 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 592 313) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 386 163) (om-make-point 162 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 261 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 211 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 3 2 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1222 526)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 293/3 222) nil nil "l" "mypatch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 186 482) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 341 196) (om-make-point 53 32) (list 300) "(300)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 441 345) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 45 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 219 591) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 119 591) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (7 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (12 0 5 2 nil 0) (12 0 6 0 nil 0) (5 0 7 1 nil 0) (0 0 8 0 nil 0) (13 0 9 0 nil 0) (8 0 10 0 nil 0) (9 0 12 0 nil 0) (11 0 12 1 nil 0) (14 0 13 0 nil 0) (10 1 15 0 nil 0) (10 0 16 0 nil 0))) 1 "midi-check" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 503/3 115) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 401/3 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 1 0 nil 0) (5 0 3 0 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 6859/6 413) nil (list nil) "l" "channel"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 226 128) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 887 358) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 782 372) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 100 242) (om-make-point 47 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 76 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 282 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 299 134) (om-make-point 46 32) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 229 188) (om-make-point 92 31.75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 151 425) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 106 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1035/4 537/2) nil (list (list (quote ?) (list (list (list 4 4) (list (list 1 (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2)) (list 1 (list 1.0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1)) (list 1 (list 2.0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)) (list 1 (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2)))) (list (list 4 4) (list (list 1 (list 1.0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1)) (list 1 (list 2.0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3)) (list 1 (list 3 3 3 3 3 110)) 1.0)) (list (list 4 4) (list 2.0 (list 1 (list 31.0 -219)) -1))))) nil "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 195 54) (om-make-point 46 32) 1024 "1024" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 122) (om-make-point 46 32) 2048 "2048" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-FFT" (quote do-fft) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "SOUND" nil) (om-load-inputfun (quote input-funbox) "FFT-size" "FFT-SIZE" 2048) (om-load-inputfun (quote input-funbox) "Hop-size" "HOP-SIZE" 512) (om-load-inputfunmenu1 (quote input-funmenu) "Windows-type" "WINDOW-TYPE" 2 (list (list "hann" 1) (list "blackman" 2) (list "barlett" 3) (list "hamming" 4) (list "rectangular" 5) (list "nenhuma" 6))))) (om-make-point 50 162) (om-make-point 236 66.0) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (21 0 1 0 nil 0) (34 0 2 0 nil 0) (32 0 2 1 nil 0) (8 0 3 0 nil 0) (31 0 4 0 nil 0) (5 0 4 1 ((om-make-point 904 543.0) (om-make-point 608 543.0) (om-make-point 386 310) (om-make-point 313 347) (om-make-point 313 362)) 0) (30 0 5 0 nil 0) (20 0 5 1 nil 0) (26 0 5 2 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (2 0 8 0 nil 0) (2 1 8 1 nil 0) (16 0 10 0 nil 0) (9 0 10 1 nil 0) (14 0 11 0 nil 0) (1 0 13 0 nil 0) (12 0 13 1 nil 0) (0 0 14 0 nil 0) (10 0 14 1 nil 0) (17 0 16 0 nil 0) (23 0 17 0 nil 0) (29 0 20 0 nil 0) (19 0 20 1 nil 0) (18 0 20 2 nil 0) (4 0 21 0 nil 0) (4 0 22 0 nil 0) (22 0 23 0 nil 0) (25 0 24 0 nil 0) (27 0 26 0 nil 0) (30 0 26 1 nil 0) (6 0 29 1 nil 0) (7 0 30 1 nil 0) (3 0 31 0 nil 0) (15 0 34 0 nil 0) (33 0 34 1 nil 0) (32 0 34 2 nil 0) (28 0 34 3 nil 0))) 6.19 nil "" (om-make-point 119 100) (om-make-point 1357 608)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 117 365) (om-make-point 283 60.0) nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 532 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST->STRING-FUN 2" (quote list->string-fun) (quote ((om-load-inputfun (quote input-funbox) "CKN-LIST" "CKN-LIST" nil))) (om-make-point 487 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 690 267) (om-make-point 60 32) "-to-" "\"-to-\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 488 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" ".wav"))) (om-make-point 656 341) (om-make-point 162 42.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 638 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST->STRING-FUN" (quote list->string-fun) (quote ((om-load-inputfun (quote input-funbox) "CKN-LIST" "CKN-LIST" nil))) (om-make-point 776 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 727 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 502 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 381 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 142 186) (om-make-point 192 79) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 275 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 212 510) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 256 594) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 156 594) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((11 0 0 0 nil 0) (1 0 0 1 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (9 0 4 0 nil 0) (2 0 5 0 nil 0) (3 0 5 1 nil 0) (7 0 5 2 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 8 0 nil 0) (10 0 9 0 nil 0) (12 0 10 0 nil 0) (13 0 11 0 nil 0) (10 0 11 2 nil 0) (0 0 14 0 nil 0) (14 1 15 0 nil 0) (14 0 16 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 615 99) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 563 118) (om-make-point 27 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LOOP-IN-PARTS" (quote loop-in-parts) (quote ((om-load-inputfun (quote input-funbox) "SOUND-BYTES-WINDOW" "SOUND-BYTES-WINDOW" nil) (om-load-inputfun (quote input-funbox) "WINDOW" "WINDOW" nil) (om-load-inputfun (quote input-funbox) "HOP-SIZE" "HOP-SIZE" nil))) (om-make-point 525 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 777 57) (om-make-point 27 32) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 709 44) (om-make-point 40 32) 510 "510" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 638 55) (om-make-point 27 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 686 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 73 19) (om-make-point 620 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/OM - Workspace/in-files/untitled.wav" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/OM - Workspace/in-files/untitled.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (0 0 1 1 nil 0) (11 0 3 0 nil 0) (1 0 3 1 nil 0) (10 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (7 0 10 2 nil 0))) nil 6.19))
