; OM File Header - Saved 2021/09/02 0:15:06
; (6.070005 :patc (om-make-point 30 15) (om-make-point 309 22) (om-make-point 1124 890) "" 183 0 nil "2021/09/02 0:15:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/men-of-goodwill.wav\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "1-trimming" (quote ((om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 837 747) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 577 306) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 171 806) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) 1 0 (om-make-point 400 22) (om-make-point 543 294) 0 1000 nil 1 (quote :soxplayer) 0 nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "reverse the file again") "" (om-make-point 488 590) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 486 34) (quote "Trim / Crop audio with sox-trim, sox-voicetrim and sox-trimsilence") "" (om-make-point 132 22) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 203 36) (quote "trim audio to a desired region$specified as list (startpoint endpoint)") "" (om-make-point 288 214) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 354 45) (quote "\"sox-voicetrim\" attempts to automatically trim off audio $from begging/end of speech-like sounds") "" (om-make-point 643 92) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 361 30) (quote "\"sox-trim\" cuts off unwanted audio from beggining or end") "" (om-make-point 79 105) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 7" (om-make-point 221 60) (quote "\"sox-trimsilence\" strips off silence $based on levels and duration $(similar to a noisegate)") "" (om-make-point 74 487) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 950 511) (om-make-point 32 30) -6 "-6" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 911 511) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 4" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 821 642) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 305 580) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 347 580) (om-make-point 32 30) -6 "-6" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 3" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 155 710) nil nil nil nil 1) (om-load-boxcomment "comment 6" (om-make-point 112 36) (quote "strip off silence $from the beginning") "" (om-make-point 404 665) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 5" (om-make-point 366 31) (quote "-> do the same thing in one go using the keyword inlets") "" (om-make-point 704 473) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 96 643) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 584 303) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 733 578) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 578 306) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 854 525) (om-make-point 27 30) 1 "1" nil) (om-load-boxcomment "comment 3" (om-make-point 112 48) (quote "strip off silence $from the beginning$ (i.e. 'end')") "" (om-make-point 392 504) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 141 30) (quote "reverse the file again") "" (om-make-point 499 456) nil (om-make-color 0.0 0.19194556 1.0) (om-make-font "Verdana" 10.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-TRIMSILENCE 4" (quote sox-trimsilence) (quote ((om-load-inputfun (quote input-funbox) "How many periods of non-silence should be retained" "ABOVE-PERIODS" 1) (om-load-inputfun (quote input-funbox) "Amount of time that non-silence must be detected before it stops trimming audio" "DURATION" 2) (om-load-inputfun (quote input-funbox) "Silence-threshold (in dB)" "THRESHOLD" -60) (om-load-inputkeyword (quote input-keyword) "append sox-effects/statistics to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 304 636) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 349 444) (om-make-point 32 30) -6 "-6" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 307 444) (om-make-point 32 30) 0.5 "0.5" nil) (om-load-boxcall (quote genfun) "SOX-TRIMSILENCE 3" (quote sox-trimsilence) (quote ((om-load-inputfun (quote input-funbox) "How many periods of non-silence should be retained" "ABOVE-PERIODS" 1) (om-load-inputfun (quote input-funbox) "Amount of time that non-silence must be detected before it stops trimming audio" "DURATION" 2) (om-load-inputfun (quote input-funbox) "Silence-threshold (in dB)" "THRESHOLD" -60) (om-load-inputkeyword (quote input-keyword) "append sox-effects/statistics to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 306 477) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-REVERSE 2" (quote sox-reverse) (quote ((om-load-inputkeyword (quote input-keyword) "append sox-effects/statistics to the processing chain" "sox-append" (quote :sox-append) nil nil))) (om-make-point 416 561) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-REVERSE" (quote sox-reverse) (quote nil) (om-make-point 425 426) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-TRIMSILENCE 2" (quote sox-trimsilence) (quote ((om-load-inputfun (quote input-funbox) "How many periods of non-silence should be retained" "ABOVE-PERIODS" 1) (om-load-inputfun (quote input-funbox) "Amount of time that non-silence must be detected before it stops trimming audio" "DURATION" 2) (om-load-inputfun (quote input-funbox) "Silence-threshold (in dB)" "THRESHOLD" -60) (om-load-inputkeyword (quote input-keyword) "How many periods of silence should be retained" "below-periods" (quote :below-periods) 1 nil) (om-load-inputkeyword (quote input-keyword) "Amount of time that silence must be detected before it trims audio" "below-duration" (quote :below-duration) 1 nil) (om-load-inputkeyword (quote input-keyword) "Below-threshold (in dB)" "below-threshold" (quote :below-threshold) -50 nil))) (om-make-point 876 566) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-VOICETRIM 2" (quote sox-voicetrim) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode: trim silence from front/back/front+back" "MODE" "front" (list (list "front" "front") (list "back" "back") (list "front+back" "front+back"))))) (om-make-point 812 144) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-TRIM 2" (quote sox-trim) (quote ((om-load-inputfun (quote input-funbox) "start (number in secs), or start and end (list of 'start' and 'end' point (in secs)" "START-AND-END" nil))) (om-make-point 224 187) nil nil nil nil 1) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 141 135) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote (2.093 3.193)))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 576 309) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "men-of-goodwill.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 710 153) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "men-of-goodwill" :type "wav") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "men-of-goodwill.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 631 312) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 702 230) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "" "INPUT" nil) (om-load-inputfun (quote input-funbox) "" "COMMANDS" ""))) (om-make-point 133 263) nil nil nil nil 1) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 149 343) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 663 306) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "SELF" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "TRACKNUM" 1) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "MARKERS" nil))) (om-make-point 718 313) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 589 290) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil))) (quote ((10 0 0 0 nil 0) (13 0 1 0 nil 0) (17 0 10 0 nil 0) (27 0 10 1 nil 0) (16 0 13 0 nil 0) (21 0 13 1 nil 0) (11 0 21 1 nil 0) (12 0 21 2 nil 0) (25 0 21 3 nil 0) (23 0 24 1 nil 0) (22 0 24 2 nil 0) (26 0 24 3 nil 0) (24 0 25 0 nil 0) (18 0 27 0 nil 0) (9 0 27 1 nil 0) (8 0 27 2 nil 0) (18 0 27 3 nil 0) (9 0 27 4 nil 0) (8 0 27 5 nil 0) (30 2 29 0 nil 0) (31 0 32 0 nil 0) (28 0 32 1 nil 0) (30 0 33 0 nil 0) (29 0 33 1 nil 0) (33 0 34 0 nil 0) (32 0 35 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 62 8)) (setf (pict-size newpict) (om-make-point 63 56)) newpict)) 6.070005))
