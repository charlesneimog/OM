; OM File Header - Saved 2021/09/02 0:15:06
; (6.070005 :patc (om-make-point 361 230) (om-make-point 559 22) (om-make-point 907 910) "" 183 0 nil "2021/09/02 0:15:06")
; End File Header
; External resources 
; (list (list (quote :picture) "#P\"../../../../resources/pict/omsox\"") (list (quote :sound) "#P\"../../../../../../../../Research/OM-SoX/OM-SoX 1.0/resources/sounds/noise-white.aif\""))
(in-package :om)(load-lib-for (quote ("OM-SoX")))(setf *om-current-persistent* (om-load-patch1 "3-equalizers" (quote ((om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" ""))) (om-make-point 223 729) nil nil nil nil 1) (om-load-editor-box1 "noise-white.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 178 630) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "noise-white" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "noise-white.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 556 330) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 239 814) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 568 310) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SOX-SHELF-EQ" (quote sox-shelf-eq) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "low-shelf, high-shelf" "MODE" "bass" (list (list "low-shelf" "bass") (list "high-shelf" "treble"))) (om-load-inputfun (quote input-funbox) "Frequency" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Bandwidth (default unit: Hz)" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "Gain (in dB)" "GAIN" 6))) (om-make-point 555 643) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 666 606) (om-make-point 39 30) -50 "-50" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 614 592) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 569 591) (om-make-point 41 30) 200 "200" nil) (om-load-boxcall (quote genfun) "SOX-PEAK-EQ" (quote sox-peak-eq) (quote ((om-load-inputfun (quote input-funbox) "Center-Frequency (in Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "bandwidth Hz" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "gain in dB" "GAIN" -12) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 308 638) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 277 592) (om-make-point 41 30) 500 "500" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 324 586) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 368 577) (om-make-point 33 30) -36 "-36" nil) (om-load-boxcomment "comment" (om-make-point 289 30) (quote "Use \"sox-peak-eq\" for parametric peak EQing ") "" (om-make-point 514 150) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-SHELF-EQ" (quote sox-shelf-eq) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "low-shelf, high-shelf" "MODE" "bass" (list (list "low-shelf" "bass") (list "high-shelf" "treble"))) (om-load-inputfun (quote input-funbox) "Frequency" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "Bandwidth (default unit: Hz)" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "Gain (in dB)" "GAIN" 6))) (om-make-point 242 240) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 303 30) (quote "Use \"sox-shelf-eq\" for high- or low-shelf filtering") "" (om-make-point 95 154) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 343 26) (quote "NB: Add EQs in series for multiple peaks/notches/shelves") "" (om-make-point 306 535) nil (om-make-color 0.0 0.0 1.0) (om-make-font "Verdana" 11.0 :family "Verdana" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 319 34) (quote "Equalize audio using shelf- and peak-filters") "" (om-make-point 142 24) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SOX-PEAK-EQ" (quote sox-peak-eq) (quote ((om-load-inputfun (quote input-funbox) "Center-Frequency (in Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "bandwidth Hz" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "gain in dB" "GAIN" -12) (om-load-inputkeyword (quote input-keyword) "Append sox-effects/statistics to the processing chain." "sox-append" (quote :sox-append) nil nil))) (om-make-point 446 633) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 408 580) (om-make-point 48 30) 1000 "1000" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 462 581) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 507 572) (om-make-point 33 30) -36 "-36" nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 617 421) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 546 311) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 208 417) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 572 308) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "noise-white.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 521 261) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "noise-white" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "noise-white.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 570 346) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-editor-box1 "noise-white.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 121 243) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "Marlon_MBPro3" "Research" "OM-SoX" "OM-SoX 1.0" "resources" "sounds")) :device nil :host nil :name "noise-white" :type "aif") 0 100 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "noise-white.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :soxplayer) 1 nil 1000 0 (om-make-point 639 334) (om-make-point 400 22) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 754 202) (om-make-point 33 30) -36 "-36" nil) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 711 193) (om-make-point 35 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 661 207) (om-make-point 41 30) 500 "500" nil) (om-load-boxcall (quote genfun) "SOX-PEAK-EQ" (quote sox-peak-eq) (quote ((om-load-inputfun (quote input-funbox) "Center-Frequency (in Hz)" "FREQUENCY" 1000) (om-load-inputfun (quote input-funbox) "bandwidth Hz" "BANDWIDTH" 100) (om-load-inputfun (quote input-funbox) "gain in dB" "GAIN" -12))) (om-make-point 687 245) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SOX-PROCESS 2" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" nil))) (om-make-point 601 328) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 321 201) (om-make-point 39 30) -50 "-50" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 272 189) (om-make-point 41 30) 100 "100" nil) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 224 197) (om-make-point 41 30) 200 "200" nil) (om-load-boxcall (quote genfun) "SOX-PROCESS" (quote sox-process) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SND" nil) (om-load-inputfun (quote input-funbox) "no documentation" "COMMANDS" ""))) (om-make-point 192 322) nil nil nil nil 1))) (quote ((1 0 0 0 nil 0) (7 0 0 1 nil 0) (0 0 2 0 nil 0) (6 0 3 1 nil 0) (5 0 3 2 nil 0) (4 0 3 3 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0) (10 0 7 2 nil 0) (16 0 7 3 nil 0) (31 0 12 1 nil 0) (30 0 12 2 nil 0) (29 0 12 3 nil 0) (17 0 16 0 nil 0) (18 0 16 1 nil 0) (19 0 16 2 nil 0) (3 0 16 3 nil 0) (28 0 20 0 nil 0) (32 0 21 0 nil 0) (26 0 27 0 nil 0) (25 0 27 1 nil 0) (24 0 27 2 nil 0) (22 0 28 0 nil 0) (27 0 28 1 nil 0) (23 0 32 0 nil 0) (12 0 32 1 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name "omsox" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "omsox" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil))) (setf (pict-pos newpict) (om-make-point 59 8)) (setf (pict-size newpict) (om-make-point 65 56)) newpict)) 6.070005))
