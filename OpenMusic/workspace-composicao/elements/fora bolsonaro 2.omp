; OM File Header - Saved 2021/08/30 16:35:25
; (6.19 :patc (om-make-point 50.0 130) (om-make-point 13 8) (om-make-point 1687 870) "" 183 0 "2021/07/12 14:59:40" "2021/08/30 16:35:25")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../in-files/mange-sound-mono.sdif\"") (list (quote :sound) "#P\"C:../../../../../../../out-files/tes9t.wav\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "fora bolsonaro 2" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 492 175) (om-make-point 146 54.0) nil nil (list (let ((box (om-load-boxin "input1" 1 (om-make-point 35 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 200 250) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote nil) 1 nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 569 15) (om-make-point 79 32) (list 0 1 2 3) "(0 1 2 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 504 12) (om-make-point 60 32) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 440 65) (om-make-point 255 51.0) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SDIF->LIST-FUN" (quote sdif->list-fun) (quote ((om-load-inputfun (quote input-funbox) "SDIF-FILE" "SDIF-FILE" nil))) (om-make-point 944 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 88 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-ABORT" (quote om-abort) (quote nil) (om-make-point 208 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 885 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 105 501) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 190 554) (om-make-point 98 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 869 356) (om-make-point 126 32) "Pedro test.wav" "\"Pedro test.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 859 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 134 435) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 104 354) (om-make-point 131 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples-inside-voices" (om-load-patch-abs1 "samples-inside-voices" (quote ((let ((box (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 217 416) (om-make-point 61 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 767 425) (om-make-point 40 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 770 473) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 422 233) (om-make-point 27 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NOT 2" (quote not) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 320 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" 0) (om-load-inputfun (quote input-funbox) "Y" "Y" 0))) (om-make-point 352 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-PULSES" (quote n-pulses) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (list (quote ?) (list (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 337 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 785 171) (om-make-point 33 32) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 659 237) (om-make-point 295 135) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 562 144) (om-make-point 130 70) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 474 431) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 212 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 313 62) (om-make-point 377 34) "Todas as alturas possuem samples correspondentes" "\"Todas as alturas possuem samples correspondentes\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 76 269) (om-make-point 149 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 481 376) (om-make-point 40 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 21 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (4 0 0 1 nil 0) (1 0 2 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (3 0 5 1 nil 0) (8 0 6 0 nil 0) (9 1 8 1 nil 0) (9 2 8 2 nil 0) (7 0 8 3 nil 0) (11 0 9 0 nil 0) (14 0 10 0 nil 0) (15 0 13 0 nil 0) (12 0 13 1 nil 0) (0 0 14 0 nil 0) (9 0 14 1 nil 0) (11 0 15 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1243 665)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 26 283) nil (list nil) "l" "samples-inside-voices"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "tes9t.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 821 520) (om-make-point 318 143) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files")) :device nil :host nil :name "tes9t" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "tes9t.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 358 390) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voices->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 182 615) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS 2" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 191 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 341 345) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 91 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "save-temp-sounds" (om-load-patch-abs1 "save-temp-sounds" (quote ((let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 58 101) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 48 194) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 612)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 347 146) nil nil "l" "save-temp-sounds"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 299 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 43 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 153 448.0) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voice->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 21 206) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "PRINT 3" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 18 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1143 733) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 279 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 763 789) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 635 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 653 850) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 290 692) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 237 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 159 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 690 686) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 811 718) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 90 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 335 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1313 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "acorde" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 362 592) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (20 0 2 2 nil 0) (20 0 3 0 nil 0) (7 0 3 1 nil 0) (17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (10 0 7 0 nil 0) (9 0 8 0 nil 0) (14 0 8 1 nil 0) (13 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (11 0 12 0 nil 0) (14 0 12 1 nil 0) (16 0 13 0 nil 0) (5 0 13 1 nil 0) (4 0 13 2 nil 0) (6 0 14 0 nil 0) (16 0 14 1 nil 0) (6 0 16 0 nil 0) (15 0 16 1 nil 0) (0 1 21 0 nil 0) (0 0 22 0 nil 0))) 1 "acorde" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1038 769) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 1011 824) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 43 32) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 41 34) 0.7 "0.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 41 34) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 1161 824) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 689 528) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 579) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 331 481) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 339 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 408 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 570 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 416 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 101 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 77 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 76 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 8 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 186 924) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((57 0 0 0 nil 0) (6 0 1 0 nil 0) (8 0 3 0 nil 2) (11 0 4 0 nil 0) (7 0 5 1 nil 2) (5 0 6 0 nil 2) (4 0 6 2 nil 2) (3 0 7 0 nil 2) (9 0 8 1 nil 2) (58 0 9 0 nil 2) (7 0 10 0 nil 2) (10 0 11 0 nil 0) (29 0 11 1 nil 0) (2 0 12 0 nil 0) (14 0 13 0 nil 0) (2 0 14 0 nil 0) (13 0 15 0 nil 0) (17 0 16 0 nil 0) (52 0 17 0 nil 1) (49 0 17 1 nil 1) (48 0 17 2 nil 1) (45 0 17 3 nil 1) (25 0 19 0 nil 0) (18 0 19 1 nil 0) (18 0 19 2 nil 0) (37 0 24 0 ((om-make-point 655 307.0) (om-make-point 655 473.0) (om-make-point 1098 347.0) (om-make-point 1189 638)) 5) (23 0 24 1 nil 0) (22 0 24 2 nil 0) (21 0 24 3 nil 0) (20 0 24 4 nil 0) (1 0 25 0 nil 0) (24 0 25 1 nil 0) (49 0 26 0 nil 0) (26 0 28 0 nil 0) (27 0 28 1 nil 0) (28 0 29 0 nil 0) (32 0 29 1 nil 0) (16 0 29 2 nil 0) (51 0 31 0 nil 0) (30 0 31 1 nil 0) (30 0 31 2 nil 0) (34 0 32 0 nil 0) (40 0 33 0 nil 0) (41 0 33 1 nil 0) (36 0 34 0 nil 0) (40 0 34 1 nil 0) (33 0 34 2 nil 4) (35 0 36 0 nil 0) (41 0 36 1 nil 0) (45 0 37 0 nil 0) (48 0 38 0 nil 0) (44 0 39 0 nil 0) (39 0 40 0 nil 7) (38 0 40 1 nil 6) (37 0 40 2 ((om-make-point 655 307.0) (om-make-point 655 349.0) (om-make-point 628 384.0) (om-make-point 582 392)) 0) (42 0 41 0 nil 0) (49 0 42 0 nil 0) (44 0 42 1 nil 0) (49 0 44 0 nil 0) (43 0 44 1 nil 0) (46 0 45 0 nil 0) (50 0 45 1 ((om-make-point 218 216.0) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 606 179)) 3) (13 0 46 0 nil 0) (13 0 47 0 nil 0) (47 0 48 0 nil 0) (50 0 48 1 ((om-make-point 218 216.0) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 456 177)) 3) (15 0 49 0 nil 0) (50 0 49 1 nil 3) (12 0 50 0 nil 0) (52 0 51 0 nil 0) (53 0 52 0 nil 0) (57 0 53 0 nil 0) (55 0 54 0 nil 0) (56 0 55 0 nil 0) (19 0 55 1 nil 0) (31 0 55 2 nil 0) (0 0 56 0 nil 0) (58 0 57 0 nil 0) (2 0 58 0 nil 0) (54 1 59 0 nil 0) (54 0 60 0 nil 0))) 1 "voice->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 216 563.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 133 554.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((8 0 0 0 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (3 0 4 0 nil 0) (0 0 4 1 nil 0) (5 0 6 0 nil 0) (1 0 7 0 nil 0) (6 0 8 0 nil 0) (7 1 9 0 nil 0) (7 0 10 0 nil 0))) 1 "voices->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-index" (om-load-patch-abs1 "all-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 41 329) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 85 72) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 32 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 38 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 28 54) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 47 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (1 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 348)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 974/3 331/2) nil (list (list 272 282 292 302 312 322 332 342 352 362 372 382 392 402 412 422 432 442 452 462 472 482 492 502 512 522 532 542 552 562 572 582 592 602 612 622 632 642 652 662 672 682 692 702 712 722 732 742 752 762 772 782 792 802 812 822 832 842 852 862 872 882 892 902 912 922 932 942 952 962 972 982 992 1002 1012 1022 1032 1042 1052 1062 1072 1082 1092 1102 1112 1122 1132 1142 1152 1162 1172 1182 1192 1202 1212 1222 1232 1242 1252 1262 1272 1282 1292 1302 1312 1322 1332 1342 1352 1362 1372 1382 1392 1402 1412 1422 1432 1442 1452 1462 1472 1482 1492 1502 1512 1522 1532 1542 1552 1562 1572 1582 1592 1602 1612 1622 1632 1642 1652 1662 1672 1682 1692 1702 1712 1722 1732 1742 1752 1762 1772 1782 1792 1802 1812 1822 1832 1842 1852 1862 1872 1882 1892 1902 1912 1922 1932 1942 1952 1962 1972 1982 1992 2002 2012 2022 2032 2042 2052 2062 2072 2082 2092 2102 2112 2122 2132 2142 2152 2162 2172 2182 2192 2202 2212 2222 2232 2242 2252 2262 2272 2282 2292 2302 2312 2322 2332 2342 2352 2362 2372 2382 2392 2402 2412 2422 2432 2442 2452 2462 2472 2482 2492 2502 2512 2522 2532 2542 2552 2562 2572 2582 2592 2602 2612 2622 2632 2642 2652 2662 2672 2682 2692 2702 2712 2722 2732 2742 2752 2762 2772 2782 2792 2802 2812 2822 2832 2842 2852 2862 2872 2882 2892 2902 2912 2922 2932 2942 2952 2962)) nil "all-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "parcials-melodias" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 232 247) nil nil "x" (list (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 510 469) (om-make-point 40 32) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 761 167) (om-make-point 46 32) " =" "\" =\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST->STRING-FUN" (quote list->string-fun) (quote ((om-load-inputfun (quote input-funbox) "CKN-LIST" "CKN-LIST" nil))) (om-make-point 640 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 734 44) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 537 132) (om-make-point 93 32) "total de " "\"total de \"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 638 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "OM-PRINT" (quote om-print) (quote ((om-load-inputfun (quote input-funbox) "STR" "STR" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 558 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 545 512) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "channel" (om-load-patch-abs1 "channel" (quote ((let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 128 224) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 377/3 278) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 135 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "midi-check" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 371/3 168) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 395 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 339 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 449 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 592 313) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 386 163) (om-make-point 162 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 261 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 211 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 3 2 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1038 354)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 293/3 222) nil nil "l" "mypatch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 177 382) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 234 164) (om-make-point 337 32) (list 381 20 24 25 40 63 118 271 274 300 328 425 497) "(381 20 24 25 40 63 118 271 274 300 328 425 497)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 283 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 45 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 210 491) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 491) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 1 nil 0) (0 0 1 0 nil 0) (6 0 2 0 nil 0) (1 0 3 0 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (3 1 8 0 nil 0) (3 0 9 0 nil 0))) 1 "midi-check" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 503/3 69) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 401/3 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 1 nil 0) (0 0 1 0 nil 0) (5 0 3 0 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.19 nil "" (om-make-point -9 -9) (om-make-point 1920 926)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 4465/6 329) nil nil "&" "channel"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 201 874) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 449 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 604 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 87 861) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 212 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 208 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "index-match" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 398 224) nil nil "&" (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 277 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 301 56) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 231 102) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 280 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 141 294) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 82 384) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 75 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 181 462) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 83 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 125 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 260 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (6 0 0 1 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (4 1 8 0 nil 0) (4 0 9 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 254 230) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 14 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 294 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 194 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (5 0 4 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "index-match" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tempo" (om-load-patch-abs1 "tempo" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 129 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 77 227) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 110 485/2) nil (list (list 353 373 393 413 433 453 473 493 513 533 553 573 593 613 633 653 673 693 713 733 753 773 793 813 833 853 873 893 913 933 953 973 993 1013 1033 1053 1073 1093 1113 1133 1153 1173 1193 1213 1233 1253 1273 1293 1313 1333 1353 1373 1393 1413 1433 1453 1473 1493 1513 1533 1553 1573 1593 1613 1633 1653 1673 1693 1713 1733 1753 1773 1793 1813 1833 1853 1873 1893 1913 1933 1953 1973 1993 2013 2033 2053 2073 2093 2113 2133 2153 2173 2193 2213 2233 2253 2273 2293 2313 2333 2353 2373 2393 2413 2433 2453 2473 2493 2513 2533 2553 2573 2593 2613 2633 2653 2673 2693 2713)) nil "tempo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" 1) (om-load-inputfun (quote input-funbox) "LIST" "LIST" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 121 478) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "match-tempo-index" (om-load-patch-abs1 "match-tempo-index" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 40 55) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 296 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 364 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 188 380) (om-make-point 99 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 273 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 50 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 3 2 nil 0) (0 0 4 1 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 687)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 23 1228/3) nil (list nil) "l" "match-tempo-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 149 533) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-amp" (om-load-patch-abs1 "all-amp" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 69 195) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 267 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 84 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 165 124) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 146 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 926/3 517/2) nil (list (list 7.019699551165104D-4 0.0010565248085185886D0 3.008124476764351D-4 2.0798126934096217D-4 1.3190918252803385D-4 6.909732474014163D-4 9.132507839240134D-4 9.783150162547827D-4 9.388269972987473D-4 7.276074029505253D-4 0.0015086521161720157D0 0.001332091516815126D0 7.237246027216315D-4 1.2038720888085663D-4 9.071091189980507D-4 7.705130701651797D-5 0.0010638278909027577D0 3.3032658393494785D-4 0.0027056036051362753D0 2.4947006022557616D-4 1.9533139129634947D-4 2.6038801297545433D-4 0.0020692069083452225D0 8.85823043063283D-4 0.0013584120897576213D0 2.4382449919357896D-4 2.0144929294474423D-4 1.365414500469342D-4 4.169129897491075D-5 0.001908414182253182D0 9.91844804957509D-4 0.0011942624114453793D0 5.807105335406959D-4 6.676318298559636D-5 9.08338843146339D-5 1.4078349340707064D-4 3.528445085976273D-5 0.0015665438259020448D0 4.8260431503877044D-4 0.002423263620585203D0 2.2756270482204855D-4 1.990704913623631D-4 3.410493372939527D-4 6.716814823448658D-5 9.041072917170823D-5 0.0017970986664295197D0 1.8576761067379266D-4 0.0016726113390177489D0 8.643275941722095D-4 6.590386037714779D-4 4.8236773000098765D-4 1.7976447998080403D-4 3.611467545852065D-4 6.211132858879864D-4 5.971495993435383D-4 0.003767138347029686D0 4.384389612823725D-4 5.07354096043855D-4 5.717753083445132D-4 1.7523812130093575D-4 3.6499096313491464D-4 8.491082699038088D-4 2.6890228036791086D-4 0.0016798850847408176D0 3.2218429259955883D-4 0.0013903743820264936D0 0.006671598181128502D0 0.0011766079114750028D0 6.866129697300494D-4 1.2438444537110627D-4 9.55670780967921D-4 8.054666686803103D-4 0.001067491015419364D0 8.431244059465826D-4 4.4486974366009236D-4 5.7106521126115695D-5 4.975619376637042D-4 0.0017031739698722959D0 0.0012397381942719222D0 0.002400362864136696D0 0.0030729600694030524D0 0.002012050710618496D0 8.291869307868183D-4 8.398735080845654D-4 5.140749271959066D-4 0.002382306382060051D0 6.718090153299272D-4 8.454505586996675D-4 6.220891373232007D-4 6.381305865943432D-4 0.0013921302743256092D0 0.0D0 0.0016784889157861472D0 0.0025438524316996336D0 0.0012228479608893395D0 8.370746509172022D-4 0.001896027009934187D0 0.0010275628883391619D0 3.64738458301872D-4 0.004130644723773003D0 5.066560115665197D-4 0.0039298031479120255D0 0.0017239277949556709D0 0.01075331587344408D0 0.0037640337832272053D0 0.0013894210569560528D0 0.002255583181977272D0 5.247099325060844D-4 0.001079800073057413D0 0.001089163706637919D0 8.552645449526608D-4 6.231540464796126D-4 8.99501028470695D-4 0.00387689471244812D0 0.003570837900042534D0 0.0070511577650904656D0 0.0033406568691134453D0 0.002475699409842491D0 0.003129765158519149D0 0.003587741404771805D0 0.0019056282471865416D0 0.0019461631309241057D0 0.0012710461160168052D0 0.003105438081547618D0 0.006376719567924738D0 0.003913783933967352D0 9.718778310343623D-4 0.0012596488231793046D0 7.788356160745025D-4 0.0011563891312107444D0 0.002234413754194975D0 8.667580550536513D-4 0.0020829986315220595D0 0.0010090727591887117D0 9.270553709939122D-4 0.003056394634768367D0 3.902528842445463D-4 0.001528860884718597D0 7.430397672578692D-4 0.003491202834993601D0 3.826379543170333D-4 3.1840766314417124D-4 8.189163636416197D-4 8.830612059682608D-4 5.751979188062251D-4 0.0038822086062282324D0 1.7448997823521495D-4 0.0023840314242988825D0 7.733840029686689D-4 0.0010960445506498218D0 3.212334122508764D-4 2.6335037546232343D-4 7.833703421056271D-4 5.829603760503233D-4 5.414906772784889D-4 1.4695362187922D-4 3.0552837415598333D-4 2.6386132230982185D-4 4.15258837165311D-4 2.160946314688772D-4 5.29320037458092D-4 5.924520883127116D-5 1.360338064841926D-4 2.0028972357977182D-4 2.362816740060225D-4 1.077447523130104D-4 1.3025998487137258D-4 9.1845853603445D-5 1.8636583990883082D-4 8.210661326302216D-5 4.987510619685054D-4 3.869985812343657D-5 3.6777587956748903D-4 7.973420724738389D-5 6.376200472004712D-4 2.4752842728048563D-4 5.0320733862463385D-5 5.86054811719805D-4 6.243205280043185D-4 9.512158430879936D-5 1.9047905516345054D-4 3.732021723408252D-4 1.3033616414759308D-4 5.029496969655156D-4 1.0550739534664899D-4 0.001147995819337666D0 2.318906772416085D-4 0.001119786174967885D0 1.6774906544014812D-4 1.1586474283831194D-4 4.752534441649914D-4 0.002827645745128393D0 0.005009005777537823D0 0.0019568982534110546D0 4.877886385656893D-4 0.0022737025283277035D0 8.528330945409834D-4 2.701071498449892D-4 0.003598983632400632D0 7.844686624594033D-4 0.008717411197721959D0 5.285362713038921D-4 0.0020370392594486475D0 0.0017390255816280842D0 3.998831089120358D-4 8.84460227098316D-4 4.338722792454064D-4 0.003743127454072237D0 0.0011604942847043276D0 0.003572695190086961D0 6.183747318573296D-4 0.0029815302696079016D0 0.0012855813838541508D0 0.005421774461865425D0 0.002601684769615531D0 0.0019776395056396723D0 0.001123021706007421D0 7.596550858579576D-4 8.749790140427649D-4 0.0010608036536723376D0 0.0012247153790667653D0 0.006076762918382883D0 0.0052414205856621266D0 0.0029492806643247605D0 0.001010740757919848D0 0.004042642656713724D0 6.718510994687676D-4 7.777205319143832D-4 0.010175385512411595D0 0.006009458098560572D0 0.004276179242879152D0 0.0032516135834157467D0 0.002015369012951851D0 0.00412879791110754D0 0.0013600412057712675D0 0.003906605299562216D0 0.002143377671018243D0 0.0035330988466739655D0 0.0033235519658774138D0 0.0013435528380796314D0 0.003978752065449953D0 0.00216924911364913D0 0.0013981107622385025D0 0.0028535800520330668D0 0.009032603353261948D0 0.008907409384846688D0 0.002043113112449646D0 0.0022149705328047276D0 0.002794215688481927D0 0.003781960578635335D0 0.005037769675254822D0 0.007027757819741964D0 0.007745446637272835D0 0.0028642453253269196D0 0.0023541932459920645D0 0.003693755716085434D0 0.0026309629902243615D0 0.0026575836818665266D0 0.0026712901890277863D0 0.002169741550460458D0 0.005707601550966501D0 0.0D0 0.008791017346084118D0 0.0026631418149918318D0 3.163610235787928D-4 0.003559884149581194D0 0.0012611133279278875D0 4.841480986215174D-4 3.1856243731454015D-4 2.0561201381497085D-4 6.938663427717984D-4 2.597782004158944D-4 0.0D0 0.008237697184085846D0 0.0035455164033919573D0 9.561812039464712D-4 3.7152928416617215D-4 4.5215050340630114D-4 6.807661266066134D-4 0.008617968298494816D0 1.661434944253415D-4 0.006056156475096941D0 0.004599803127348423D0 0.002693437272682786D0 2.488461323082447D-4 0.0015090483939275146D0 4.340127343311906D-4 0.010974951088428498D0 0.0030360014643520117D0 0.0025305377785116434D0 0.0054189409129321575D0 5.656369612552226D-4 0.04628625139594078D0 9.555615833960474D-4 0.019574787467718125D0 0.0011009852169081569D0 0.012231491506099701D0 0.005418550688773394D0 0.001988067524507642D0 0.011996744200587273D0 0.0026626288890838623D0 0.0018312075408175588D0 0.004390000831335783D0 8.25472641736269D-4 0.014932803809642792D0 8.599582361057401D-4 0.006361664738506079D0 0.00277333683334291D0 0.0017818495398387313D0 9.117115987464786D-4 0.05255194753408432D0 5.178057472221553D-4 9.236007463186979D-4 0.00908123329281807D0 5.280404002405703D-4 0.04855520650744438D0 0.0015222786460071803D0 0.020693330094218254D0 9.250813745893538D-4 0.01047983206808567D0 5.926445592194796D-4 0.020148267969489098D0 3.2853116863407195D-4 0.0011470543686300517D0 0.019688736647367478D0 9.949543746188283D-4 0.0026582214049994946D0 0.0019955900497734547D0 0.04864586517214775D0 7.507450645789504D-4 0.0016903206706047059D0 3.853020607493818D-4 0.0017124528530985117D0 8.601929876022041D-4 9.157271706499159D-4 0.008019205182790757D0 0.01805301569402218D0 0.02668019011616707D0 5.274928407743573D-4 0.009204285219311715D0 0.0013552388409152627D0 0.07717736810445786D0 0.0017373943701386452D0 0.002047955757007003D0 0.001214579096995294D0 0.0015070991357788444D0 0.0016427442897111178D0 0.03172363340854645D0 0.007105990778654814D0 7.75556021835655D-4 0.019301950931549073D0 0.08037125319242478D0 0.014228485524654389D0 0.0011430629529058934D0 0.12206015735864639D0 0.0010200777323916555D0 0.0048982128500938416D0 0.0014679116429761053D0 0.001464693690650165D0 0.05320050194859505D0 0.0020602212753146887D0 0.004431215114891529D0 9.353336063213646D-4 0.010927719064056874D0 0.08453628420829773D0 0.013070146553218365D0 0.007442370057106018D0 0.16738615930080414D0 0.0010451477719470859D0 0.010999680496752262D0 0.002747541991993785D0 0.08112579584121704D0 0.003872751956805587D0 0.005980321206152439D0 7.059336639940739D-4 6.537958397530019D-4 0.0D0 0.0010137241333723069D0 0.006680375896394253D0 0.0013730546925216914D0 6.176133174449205D-4 0.001810941263101995D0 0.03826756030321121D0 0.009801536798477173D0 0.003248213091865182D0 0.2170180082321167D0 0.0017195899272337556D0 0.0014347601681947709D0 0.04883715137839317D0 0.009066935628652573D0 0.0047545828856527805D0 9.191179415211082D-4 0.0012952110264450312D0 0.001409777207300067D0 0.0028513974975794554D0 0.00113056565169245D0 0.0014853389002382756D0 0.00414753844961524D0 6.483375327661634D-4 0.002389994217082858D0 0.005845631472766399D0 5.214990815147758D-4 0.006103960797190666D0 0.015577912330627442D0 0.004915688652545214D0 0.0026770520489662886D0 0.21213705837726593D0 6.565978401340544D-4 5.722593050450087D-4 0.022468775510787964D0 4.102176462765783D-4 0.0010207557352259756D0 0.0014829037245362997D0 0.0012071201344951988D0 3.6447966704145074D-4 7.043520454317331D-4 0.0020222626626491547D0 7.32742715626955D-4 4.049257840961218D-4 0.0010101113002747298D0 0.0015679378993809224D0 0.002195626264438033D0 0.16310955584049225D0 9.764378191903234D-4 5.164939793758094D-4 0.024247275665402413D0 0.001510449219495058D0 0.0018377475207671524D0 0.004505885299295187D0 7.958992500789464D-4 0.004347790498286486D0 0.00251342193223536D0 0.007922512479126454D0 0.0036720959469676018D0 0.003163197310641408D0 0.012877724133431912D0 0.19963915646076203D0 0.0018627579556778074D0 0.003924604970961809D0 0.0036777372006326914D0 0.011268021538853646D0 0.003768958617001772D0 0.0013492099242284894D0 0.027815217152237892D0 0.0D0 0.002938151126727462D0 0.00538348825648427D0 0.07551004737615586D0 0.0015889372443780303D0 0.19727493822574616D0 0.0016998511273413897D0 0.001715772203169763D0 0.004222600255161524D0 0.009982658550143242D0 0.003418795997276902D0 0.002218751236796379D0 0.038568321615457535D0 0.001031273975968361D0 0.0036694123409688473D0 0.056192465126514435D0 0.0013085411628708244D0 0.19917842745780945D0 4.4880350469611585D-4 8.310165721923113D-4 0.0031132111325860024D0 0.0019691421184688807D0 0.0022307245526462794D0 6.981558981351554D-4 0.007842130959033966D0 0.08104956150054932D0 0.004019079729914665D0 0.0013914419105276466D0 0.09707706421613693D0 1.2196485477034003D-4 1.9592445460148156D-4 1.957534987013787D-4 7.667214376851916D-4 5.258991150185466D-4 0.0021028397604823113D0 0.03316591680049896D0 0.0020587239414453507D0 1.7212888633366674D-4 0.0425008088350296D0 1.1494250793475658D-4 1.3941930956207216D-4 2.2110043209977448D-4 3.7130567943677306D-4 0.030515801161527634D0 0.004441710188984871D0 6.030495569575578D-5 0.06829066574573517D0 1.0171528265345842D-4 3.692807877087034D-5 1.1663917393889278D-4 3.63790662959218D-4 0.021521497517824173D0 0.0029743595514446497D0 1.3188693264964968D-4 0.035106170922517777D0 1.5036528930068016D-4 2.185295452363789D-4 0.019777853041887284D0 0.0010459978366270662D0 8.185003389371559D-5 0.054934311658144D0 2.8210581513121724D-4 3.734736528713256D-4 0.00305083766579628D0 3.502487379591912D-5 0.02931246906518936D0 5.818671197630465D-4 0.05402344465255737D0 4.347006033640355D-4 9.124020289164037D-5 0.01052705105394125D0 4.0839414577931166D-4 0.11398079991340637D0 0.0017658158903941513D0 0.05953511968255043D0 3.20129853207618D-4 5.096807144582272D-4 0.00993325188755989D0 0.0012360779801383615D0 0.11678272485733032D0 0.0019090408459305764D0 0.08749057352542877D0 6.959163583815098D-4 4.368599547888152D-5 0.0031875879503786564D0 5.691811093129218D-4 0.07195015251636505D0 0.0018197919707745314D0 0.0018995594000443817D0 0.013455666601657868D0 0.08484578132629395D0 8.976420504041016D-4 5.798429265269078D-5 0.004265140276402235D0 0.0015212413854897023D0 0.08884932845830918D0 0.0030546735506504774D0 7.874169968999922D-4 8.775792230153457D-5 0.008252836763858796D0 8.359525236301124D-4 0.06237664446234703D0 3.5937310894951225D-4 3.4976861206814647D-4 0.0019042290514335037D0 0.07451194524765015D0 0.0020071431063115597D0 3.032315871678293D-4 2.816674823407084D-4 0.004097865894436836D0 9.968150407075882D-4 3.352555213496089D-4 3.767592424992472D-4 0.027035685256123543D0 0.0024894860107451678D0 3.517725854180753D-4 4.245526506565511D-4 0.0237567275762558D0 0.013751357793807984D0 0.0028839921578764916D0 0.0017662136815488339D0 0.0010738419368863106D0 0.003747411770746112D0 0.005296289920806885D0 0.002318379934877157D0 0.009416201151907444D0 6.606763345189393D-4 0.004767933394759893D0 0.0012492386158555746D0 0.0031783152371644974D0 0.0031753897201269865D0 0.009974345564842224D0 0.003531560767441988D0 6.564789218828082D-4 5.748105468228459D-4 0.015415055677294732D0 0.0014588115736842156D0 0.004750012885779142D0 0.0011619736906141043D0 0.004855732433497906D0 0.0031509934924542904D0 0.003122682450339198D0 0.034123990684747696D0 0.004013003781437874D0 0.010954884812235833D0 0.00406996626406908D0 0.01171764824539423D0 0.007350703701376915D0 0.009321440011262894D0 0.0D0 0.005352572072297335D0 0.0D0 0.002835287945345044D0 0.014764184132218361D0 0.014458638615906239D0 6.534418207593262D-4 0.017239296808838845D0 0.0033904050942510367D0 0.003962749615311623D0 0.00347954616881907D0 0.0011320181656628848D0 0.009223547764122486D0 0.0021014579106122256D0 0.0018510096706449986D0 5.255791475065053D-4 0.017905421555042267D0 0.008892549201846123D0 0.022634519264101982D0 0.01237280759960413D0 0.01045734528452158D0 0.0025854995474219323D0 0.01499628834426403D0 0.0D0 0.00432250089943409D0 0.0D0 0.0011406734120100737D0 7.130253943614662D-4 0.001376297208480537D0 0.008513808250427246D0 0.00825717207044363D0 0.002302022185176611D0 0.002489537000656128D0 0.006434611044824123D0 0.013050327077507973D0 0.001631743274629116D0 0.002951332600787282D0 0.0019421002361923457D0 0.0017019954975694418D0 0.0012734269257634879D0 0.01823013834655285D0 0.014745466411113739D0 0.006399952806532383D0 0.009176001884043217D0 0.03070061281323433D0 0.0034949583932757378D0 0.008099300786852837D0 0.005189655348658562D0 4.2328922427259386D-4 0.0020040266681462527D0 0.0088223647326231D0 0.009554591029882431D0 0.0030222004279494286D0 0.0030987230129539967D0 0.005679141730070114D0 0.006542510353028774D0 0.0033356475178152323D0 0.0038512281607836485D0 0.002032069256529212D0 9.608817636035383D-4 0.0012557487934827805D0 0.009775384329259396D0 0.007112470455467701D0 0.005251784343272448D0 0.007798917591571808D0 0.011733624152839184D0 0.0025676055811345578D0 0.0023963116109371186D0 5.429394659586251D-4 0.0033951732330024243D0 0.003839945187792182D0 0.006230665370821953D0 0.0023707589134573937D0 0.005236465949565172D0 8.742992067709565D-4 3.834564950011554D-7 0.011349203996360302D0 0.006052709184587002D0 8.831162704154849D-4 0.0012377423699945212D0 0.0027386501897126437D0 0.0011219697771593929D0 0.0029070822056382895D0 0.002685423707589507D0 0.002452475018799305D0 0.002433776156976819D0 6.556737353093922D-4 5.72832184843719D-4 0.002066426444798708D0 0.0013704599114134908D0 0.003912836778908968D0 0.0015959852607920766D0 0.001458452781662345D0 0.0062498413026332855D0 8.201126474887133D-4 4.6432905946858227D-4 0.006901801098138094D0 5.372444866225123D-4 4.7775296843610704D-4 7.755284896120429D-4 4.4050122960470617D-4 7.390336832031608D-4 5.125045427121222D-4 0.0037941986229270697D0 0.0027569043450057507D0 0.012187940068542958D0 3.069646772928536D-4 2.1766888676211238D-4 5.310099222697318D-4 0.0010385385248810053D0 0.001560330973006785D0 0.028289366513490677D0 0.004457642324268818D0 7.383707561530173D-4 3.9880210533738137D-4 3.6467687459662557D-4 5.165956099517643D-4 0.0012581690680235625D0 0.052238136529922485D0 0.0018788108136504889D0 0.012029719538986683D0 4.744976758956909D-4 0.00405303156003356D0 0.013396192342042923D0 0.0010975338518619538D0 4.3330626795068383D-4 6.980511825531721D-4 0.001546998042613268D0 0.0019308794289827347D0 0.07447312027215958D0 0.0017286187503486872D0 0.03463601693511009D0 0.0013630571775138379D0 0.005487287882715464D0 7.471757708117366D-4 1.3482352369464934D-4 1.8191048002336174D-4 5.492024865816347D-5 7.58045818656683D-4 0.06975776702165604D0 0.0026614158414304257D0 0.014883052557706833D0 2.9244800680316985D-4 1.732307719066739D-4 1.4887664292473346D-4 8.937784878071398D-5 0.06995327770709992D0 0.0010650519980117679D0 0.013467221520841122D0 3.886471677105874D-4 3.1372864032164216D-4 2.3319711908698082D-4 1.235522940987721D-4 0.05463506281375885D0 0.0021813097409904003D0 0.01639748550951481D0 8.111103670671582D-4 8.768389816395938D-4 1.0468869004398585D-4 3.242738021072D-4 0.06397823244333267D0 0.0010524123208597303D0 0.01255813892930746D0 6.570378900505602D-4 7.46890262234956D-4 0.0010412555420771242D0 0.0012874954845756293D0 2.27396929403767D-4 0.06370265781879425D0 0.007370305713266134D0 0.0168056171387434D0 0.0014547450700774789D0 0.0025216289795935154D0 0.0012814243091270328D0 0.0024235507007688284D0 0.002465256955474615D0 0.0013208359014242888D0 5.77859056647867D-4 0.06128475442528725D0 0.005899915471673012D0 0.03419988602399826D0 0.0010123588144779206D0 0.002895598066970706D0 0.001379205845296383D0 0.002912848489359021D0 0.004263503476977348D0 3.754094068426639D-4 0.001864090794697404D0 6.740151438862085D-4 0.034529466181993485D0 0.01532250177115202D0 0.021711722016334534D0 7.330756052397192D-4 0.001751223229803145D0 0.0018589511746540666D0 0.002126730279996991D0 0.001334570231847465D0 8.494657231494784D-4 0.0013407280202955008D0 0.0020385528914630413D0 0.02381676435470581D0 0.016315236687660218D0 0.025346318259835243D0 0.006174679379910231D0 0.006552091334015131D0 0.0031401615124195814D0 9.622012730687857D-4 5.034441710449755D-4 0.0036980463191866875D0 2.052629424724728D-4 0.024118714034557343D0 0.005028567276895046D0 0.006648426875472069D0 4.1689054341986776D-4 0.0020323668140918017D0 0.0019658738747239113D0 0.001605690224096179D0 2.7671982039123577D-8 0.002745924284681678D0 0.002174720400944352D0 0.030898626893758774D0 0.006420578341931105D0 5.988204502500594D-4 0.0049803839065134525D0 5.935569643042982D-4 4.058402846567333D-4 0.001174799632281065D0 0.00884800311177969D0 0.028206050395965576D0 0.0027990660164505244D0 1.2484684702940285D-4 0.0011479038512334228D0 9.512976394034922D-4 0.004631530959159136D0 0.025600438937544823D0 3.5120832035318017D-4 3.251619928050786D-4 1.0398770245956257D-4 0.0015374378999695182D0 4.963798564858735D-4 0.017751505598425865D0 2.7737847995013D-4 9.703522664494813D-5 0.001156346290372312D0 1.4103393186815083D-4 0.010894366540014744D0 4.922793596051633D-4 0.0015798897948116064D0 4.4333626283332706D-4 0.005258698016405106D0 0.00260631600394845D0 0.0010590829188004137D0 0.0027926182374358178D0 0.0015860960120335222D0 7.079260540194809D-4 0.0023852477315813303D0 6.092640105634928D-4 3.614201268646866D-4 0.0016278444090858102D0 3.069527738261968D-4 2.0704806956928224D-4 0.0010459296172484756D0 4.2828600271604955D-4 5.695055449450592D-8 0.0018538193544372917D0 4.4761429307982326D-4 0.00201701233163476D0 1.581112010171637D-4 0.0021206005476415158D0 2.871526521630585D-4 0.002151224762201309D0 4.2637813021428883D-4 0.002807971788570285D0 7.750551449134946D-4 0.00196853862144053D0 4.203525895718485D-4 8.14346014522016D-4 3.8716034032404423D-4 4.6689267037436366D-4 2.476325025781989D-4 0.0013607221189886332D0 4.762001917697489D-4 0.00151872169226408D0 9.489516378380358D-5 8.084043656708673D-5 3.6251929122954607D-4 7.562419050373137D-4 4.578781081363559D-4 0.0012248464627191425D0 2.9245298355817795D-4 0.00214219419285655D0 3.345520526636392D-4 0.00103280961047858D0 5.238845478743315D-4 0.0031788749620318413D0 3.383171570021659D-4 0.0029055543709546328D0 6.869063945487142D-4 0.003130922093987465D0 0.0010669685434550047D0 0.0023870610166341067D0 1.4623129391111434D-4 0.00190109689719975D0 8.052630582824349D-4 2.284873917233199D-4 3.8458287599496544D-4 7.971126615302637D-5 4.13953181123361D-4 5.330184358172119D-4 2.9909840668551624D-4)) "&" "all-amp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1437 79.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1514 79.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1223 212.0) (om-make-point 354 55.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1345 146.0) (om-make-point 41 34) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1289 150.0) (om-make-point 34 34) 50 "50" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 28 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 57 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 465 569) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 376 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 87 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 434 424) (om-make-point 41 34) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 533 429) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 590 435) (om-make-point 41 34) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8) (om-load-inputfun (quote input-funbox) "list of forbidden subdivisions" "FORBID" nil) (om-load-inputfun (quote input-funbox) "grace-notes?" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "precision (0.0-1.0)" "PRECIS" 0.5))) (om-make-point 255 482) (om-make-point 381 67.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 373 358) (om-make-point 56 34) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 336 412) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 58 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 120 356) (om-make-point 22.5 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 218 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 252 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 50 174) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (0 0 1 0 nil 0) (12 0 1 2 nil 0) (8 0 2 0 nil 0) (15 0 4 0 nil 0) (3 0 4 1 nil 0) (13 0 8 0 nil 0) (10 0 8 1 nil 0) (9 0 8 2 nil 0) (5 0 8 3 nil 0) (6 0 8 5 nil 0) (7 0 8 6 nil 0) (4 0 11 0 nil 0) (11 0 12 0 nil 0) (1 0 13 0 nil 0) (14 0 13 1 nil 0) (4 0 14 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1047 643)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 733/2 1909/4) nil (list (list 7/4 (list (list (list 4 4) (list -4)) (list (list 3 4) (list -1 (list 1 (list -9 2 -14)) -1))))) "&" "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 491 732) (om-make-point 495 179) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) (-4)) ((3 4) (-1 (1 (-8 -1.0 2 -14)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (11684)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "note-of-the-index" (om-load-patch-abs1 "note-of-the-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 157 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 89 280) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 637)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1522/3 346) nil (list (list 11684 11682)) "&" "note-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "amp-of-the-index" (om-load-patch-abs1 "amp-of-the-index" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 66 252) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2905/3 163) nil (list (list 0.003978752065449953D0 0.003693755716085434D0)) "&" "amp-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 837 474) (om-make-point 300 183) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((11684) (11682))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000) (1000))) :lvel (quote ((31) (31))) :loffset (quote ((0) (0))) :lchan (quote ((1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 791 255) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 757 698) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 106 808) (om-make-point 86 53.5) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 76 640) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 100 715) (om-make-point 132 31.0) nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 207 959) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 45 959) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 2 0 nil 0) (11 0 3 0 nil 0) (4 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 5 2 nil 0) (10 0 6 0 nil 0) (5 0 6 1 nil 0) (0 0 7 0 nil 0) (8 0 7 1 nil 0) (29 0 8 0 nil 0) (13 1 9 1 ((om-make-point 115 914.0) (om-make-point 158 940.0) (om-make-point 176 869) (om-make-point 237 869) (om-make-point 237 874)) 0) (11 0 10 0 nil 0) (33 0 13 0 nil 0) (14 0 15 0 nil 0) (12 0 15 1 nil 0) (15 0 16 0 nil 0) (6 0 16 1 nil 0) (12 0 17 0 nil 0) (19 0 18 0 nil 0) (17 0 18 1 nil 0) (16 0 18 2 nil 0) (18 0 20 1 nil 0) (15 0 21 0 nil 0) (21 0 22 0 nil 0) (21 0 23 0 nil 0) (30 0 24 0 nil 0) (26 0 24 1 nil 0) (25 0 24 2 nil 0) (22 0 24 3 nil 0) (23 0 24 4 nil 0) (20 0 27 0 nil 8) (27 0 28 1 nil 2) (31 0 28 2 nil 0) (32 0 28 3 nil 0) (16 0 29 0 nil 0) (16 0 30 0 nil 0) (29 0 31 1 nil 0) (24 0 31 4 nil 0) (8 0 31 6 nil 0) (35 0 33 0 nil 0) (28 0 33 2 nil 0) (20 0 34 1 nil 0) (34 0 35 0 nil 0) (7 0 35 1 ((om-make-point 565 552.0) (om-make-point 539 598.0) (om-make-point 166 634.0) (om-make-point 166 715)) 1) (9 0 36 0 nil 0) (13 0 37 0 nil 0))) 1 "parcials-melodias" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "mange-sound-mono.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 111 9) (om-make-point 169 83) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "in-files")) :device nil :host nil :name "mange-sound-mono" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos player)) (list (om-make-point 400 500) (om-make-point 10 40) (quote :spat-sdif-player))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->LIST" (quote sdif->list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SDIF-FILE" nil))) (om-make-point 132 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (3 1 0 1 nil 0) (20 0 3 0 nil 0) (2 0 3 2 nil 0) (2 0 3 3 nil 0) (1 0 3 4 nil 0) (21 0 5 0 nil 0) (10 0 7 0 nil 0) (12 0 8 0 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (12 0 9 2 nil 0) (16 0 11 0 nil 0) (7 0 11 1 nil 0) (13 0 12 1 nil 0) (14 0 13 0 nil 0) (19 0 13 1 nil 0) (11 0 15 0 nil 0) (17 0 16 0 nil 0) (9 0 17 0 nil 0) (21 0 18 0 nil 0) (21 0 19 0 nil 0) (18 0 19 1 nil 0) (20 0 21 0 nil 0))) nil 6.19))