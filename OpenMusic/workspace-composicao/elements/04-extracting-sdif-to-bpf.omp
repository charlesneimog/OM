; OM File Header - Saved 2021/07/16 17:11:33
; (6.17 :patc (om-make-point 397.73047 130) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"../../in-files/trumpetgold-analysis.sdif\"") (list (quote :instance) "#P\"../../globals/pointeur.omi\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-extracting-sdif-to-bpf" (quote ((let ((box (om-load-editor-box1 "BPF-LIB 2" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 58 195) (om-make-point 183 134) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.012494 0.024989 0.037483 0.049977 0.062472 0.074966 0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646)) (quote (1518.9293 1518.051 1516.5264 1516.2745 1517.8215 1520.9176 1527.6256 1544.1433 1554.3317 1561.2997 1566.6597 1569.8828 1571.2647 1571.8109 1572.4439 1573.311 1574.2561 1575.1629 1575.8671 1576.4146 1576.9639 1577.4082 1577.521 1577.3779 1577.3119 1577.4568 1577.5756 1577.3989 1576.9291 1576.3527 1575.8656 1575.6705 1575.8909 1576.228 1576.321 1576.1954 1576.0724 1576.0797 1576.4046 1576.9917 1577.3446 1577.3095 1577.2153 1577.2698 1577.3793 1577.4224 1577.3359 1577.1666 1577.0001 1576.7659 1576.3657 1575.873 1575.3687 1574.8457 1574.3486 1573.9338 1573.604 1573.5375 1573.9281 1574.512 1574.7749 1574.4597 1573.6206 1572.5548 1571.7208 1571.4404 1571.6246 1572.1087 1572.8984 1574.0221 1575.3855 1576.8291 1578.2811 1579.6395 1580.4993 1580.1671 1578.2173 1574.7766 1570.6257 1567.101 1565.1329 1564.8031 1565.7688 1567.253 1568.8334 1570.4714 1571.9537 1572.8805 1573.0385 1572.6487 1572.1283 1571.61 1570.7778 1569.3674 1567.611 1566.3662 1566.518 1568.0978 1570.1408 1571.6856 1572.752 1573.8488 1575.2387 1576.1978 1575.6901 1573.6264 1571.1791 1570.9194 1571.2775 1570.3098 1569.2864 1570.7085 1572.7361 1574.1315 1574.6384 1574.5038 1574.5247 1575.4539 1577.7479 1581.3674 1583.6437 1583.2639 1581.2839 1580.5462 1581.1238 1581.3809 1580.8406 1580.0383 1579.4926 1579.0197 1578.4185 1577.657 1576.689 1575.51 1574.3938 1573.702 1573.3862 1572.9913 1572.1007 1571.044 1570.6964 1571.2809 1572.0907 1572.3883 1572.0159 1571.0946 1570.0632 1569.6828 1570.435 1571.849 1572.8961 1573.2651 1573.2854 1573.2863 1573.3197 1573.2429 1572.8873 1572.1776 1571.1881 1570.0984 1569.1607 1568.6095 1568.3742 1568.114 1567.6161 1567.1842 1567.4982 1568.9113 1571.2195 1573.925 1576.7802 1579.6196 1582.0647 1583.5704 1583.6022 1582.002 1579.1312 1575.6738 1571.6251 1566.3937 1561.9179 1559.8477 1560.2041 1563.1668 1568.1426 1573.6511 1578.582 1582.7438 1584.9943 1584.9806 1583.436 1581.9583 1580.9617 1579.841 1578.3711 1576.7775 1575.4078 1574.4863 1574.2888 1575.2239 1577.533 1581.1975 1585.4613 1587.8878 1587.071 1580.5374 1576.299 1576.9087 1579.9909 1582.0568 1582.9238 1583.5964 1584.4974 1585.8666 1586.6425 1585.2413 1581.8322 1580.6881 1588.2135 1592.3975 1590.4013 1585.2616 1582.0674 1580.382 1579.7542 1579.436 1577.6986 1568.5875 1566.6821 1569.5045 1573.8157 1576.5155 1582.1098 1588.0117 1590.8153 1589.0097 1579.8976 1578.9136 1585.1382 1589.9476 1599.3997 1579.3551 1560.8152 1591.3324 1591.3803 1592.3502 1593.3615 1594.3438 1595.5975 1596.7811 1597.2163 1597.0537 1598.355 1578.7516 1583.0088 1598.5437 1596.6934 1595.7163 1596.5733 1598.8973 1599.2936 1597.9519 1596.7282 1595.8622 1594.8552 1594.9165 1596.9639 1598.7125 1597.8375 1596.8671 1597.54 1596.2492 1593.4782 1594.672 1598.8342 1597.2655 1593.156 1593.0361 1597.127 1601.1835 1602.224 1601.6824 1600.069 1598.0479 1596.9998 1598.5618 1600.734 1599.545 1595.1154 1592.6543 1592.5112 1593.593 1595.4271 1596.871 1596.483 1594.0167 1592.1709 1591.679 1589.162 1585.4352 1580.0388 1575.3483 1578.9094 1582.819 1600.871 1600.9523 1599.863 1599.1707 1598.5253 1597.3322 1595.6052 1588.4268 1566.7305 1564.7022 1560.6626 1560.7976 1563.8229 1564.5491 1563.0755 1560.9713 1555.8764 1549.043 1544.8992 1529.3635 1519.8616 1519.8616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.012494 0.024989 0.037483 0.049977 0.062472 0.074966 0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583)) (quote (760.9288 761.91706 760.94104 759.6873 759.8926 761.8404 766.2142 773.275 778.4871 781.8501 783.8426 784.9919 785.7578 786.33307 786.7113 786.91517 787.16504 787.63367 788.16944 788.527 788.69245 788.76764 788.7733 788.7006 788.59095 788.50074 788.45447 788.40955 788.28156 788.0651 787.87995 787.86194 788.0409 788.275 788.3544 788.2307 788.05634 787.9782 788.0454 788.21515 788.3762 788.46534 788.53907 788.6292 788.6694 788.62555 788.5542 788.504 788.4563 788.3607 788.2015 788.003 787.77167 787.5121 787.26264 787.0414 786.8687 786.8563 787.0691 787.34235 787.41425 787.1445 786.57654 785.92676 785.501 785.44184 785.6701 786.08417 786.68555 787.48505 788.4033 789.2735 789.91407 790.21546 790.1227 789.5792 788.52167 786.9926 785.2034 783.5043 782.31305 781.9684 782.4723 783.53064 784.74964 785.85657 786.6294 786.8998 786.6954 786.255 785.846 785.49775 785.0144 784.29407 783.52894 783.1038 783.28235 784.02454 785.044 786.0546 786.9015 787.5919 788.18335 788.64277 788.96515 789.424 791.11805 798.19794 800.73957 797.8457 792.48835 789.8002 788.9726 788.9322 788.77594 788.2128 787.4705 787.2269 788.06226 789.74695 791.15967 791.6068 791.40717 791.1701 791.0289 790.7504 790.28565 789.82074 789.4388 789.063 788.6533 788.27424 787.97266 787.716 787.43976 787.13117 786.84595 786.6277 786.41486 786.11884 785.75556 785.41285 785.1479 784.9806 784.8934 784.8533 784.8777 785.0521 785.4273 785.90607 786.2987 786.536 786.7114 786.8942 787.0259 786.9872 786.69165 786.14936 785.4723 784.8069 784.2752 783.9664 783.87085 783.82685 783.69715 783.6183 783.91205 784.75055 786.04505 787.5869 789.16004 790.5336 791.5135 791.9859 791.9022 791.1956 789.835 787.8583 785.2822 782.46027 780.3926 779.7845 780.6316 782.5086 784.9403 787.54535 789.80384 791.3772 792.3006 792.6908 792.53266 791.8285 790.75367 789.58625 788.50867 787.68824 787.2637 787.23804 787.5692 788.3235 789.61255 791.33216 793.0508 794.2175 794.7258 795.16175 796.5935 798.44635 798.1732 793.69007 791.4843 792.7761 794.2871 795.37226 796.52857 796.3698 794.6111 792.56177 790.50904 788.8947 789.60675 792.3581 794.84156 795.2636 794.49994 792.75727 790.1537 787.8725 783.5682 780.8905 783.968 788.4726 791.63086 793.64747 793.6864 792.2058 789.45295 787.4178 781.2548 760.5851 736.3253 739.1707 738.0326 739.658 746.9322 746.3212 743.92176 741.9979 742.6514 737.80726 737.80726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977 0.08746 0.099955 0.112449 0.124943 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968)) (quote (2329.7124 2321.1345 2332.1514 2339.5227 2340.8179 2363.062 2330.0142 2361.665 2361.8167 2362.3213 2363.2254 2364.167 2364.8506 2365.29 2365.539 2365.5203 2365.2063 2364.818 2364.6555 2364.7332 2364.7105 2364.4038 2364.1136 2364.1226 2364.4175 2364.8777 2365.2422 2365.2117 2364.8394 2364.492 2364.4485 2364.7227 2365.105 2365.3916 2365.6377 2365.9766 2366.2925 2366.404 2366.319 2366.1404 2365.9905 2365.7559 2365.097 2364.1016 2363.3045 2362.857 2362.5782 2362.3809 2362.2063 2362.074 2362.166 2362.4683 2362.5923 2362.0974 2361.0406 2359.9268 2359.513 2359.9876 2360.8902 2361.6524 2361.9478 2361.847 2361.8037 2362.2886 2363.272 2364.3592 2365.424 2366.8113 2368.7034 2371.1053 2375.2408 2375.5423 2372.531 2371.0603 2370.4229 2367.3748 2364.8435 2364.511 2363.5384 2361.5498 2358.309 2355.7117 2356.0982 2358.9624 2360.9048 2362.5198 2366.5132 2367.9427 2365.3079 2358.4483 2357.0345 2357.3504 2359.3572 2362.359 2364.2835 2364.7766 2364.7913 2364.906 2364.542 2361.6638 2359.2547 2358.519 2357.2627 2350.8792 2350.6797 2355.6433 2364.1204 2364.1077 2363.84 2363.7642 2365.0847 2368.0037 2371.0965 2373.1592 2373.9229 2373.5154 2372.554 2371.8335 2371.3867 2370.9326 2370.482 2369.881 2368.8435 2367.3838 2365.8296 2364.392 2363.019 2361.6553 2360.525 2359.963 2359.974 2360.1026 2359.9578 2359.3648 2358.092 2356.2276 2354.8255 2354.4688 2354.5286 2354.0196 2353.7425 2354.975 2357.6387 2359.7923 2360.7864 2361.3404 2361.7996 2362.0208 2361.708 2360.6656 2359.1197 2357.5677 2355.851 2352.074 2348.2559 2347.998 2350.315 2352.0174 2352.9468 2354.468 2356.5432 2359.1355 2362.6429 2367.3704 2372.3252 2375.4326 2376.7617 2376.479 2374.3748 2370.4817 2368.264 2368.9085 2371.0174 2372.1482 2370.0327 2370.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977 0.062472 0.074966 0.08746)) (quote (790.95087 788.50385 805.0431 805.0431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594)) (quote (3114.9546 3123.367 3130.8457 3137.3684 3141.0042 3143.116 3144.3933 3145.4217 3146.3682 3147.413 3149.0694 3151.3753 3153.4532 3154.6949 3155.2928 3155.372 3154.754 3153.6975 3152.9385 3152.9326 3153.354 3153.584 3153.288 3152.7002 3152.3516 3152.5828 3153.0972 3153.2776 3152.9414 3152.48 3152.3736 3152.7237 3153.2896 3153.7373 3153.9705 3154.1543 3154.4536 3154.854 3155.0935 3154.936 3154.5388 3154.1487 3153.7024 3153.1055 3152.4068 3151.5804 3150.566 3149.5186 3148.5962 3147.9214 3147.8174 3148.4458 3149.3282 3149.6426 3148.9226 3147.231 3145.1465 3143.5674 3142.9485 3143.1023 3143.973 3145.762 3148.4532 3151.519 3154.4063 3157.085 3159.3836 3160.1087 3158.2783 3153.704 3147.8448 3141.9744 3136.5916 3131.375 3127.9998 3128.1016 3131.6648 3138.2566 3142.745 3145.2735 3146.654 3147.069 3146.5166 3144.6577 3142.513 3140.3775 3137.2544 3133.8706 3132.1619 3132.938 3135.9717 3139.5496 3142.8245 3146.032 3148.8894 3150.9898 3152.4346 3153.5637 3153.957 3150.0276 3144.8809 3138.9383 3135.726 3136.208 3139.848 3147.5926 3150.9182 3151.6612 3150.6665 3149.4229 3150.2632 3155.5789 3161.9827 3164.424 3164.4497 3163.7154 3163.4549 3163.3423 3162.689 3161.4016 3160.0 3158.725 3157.2027 3155.3653 3153.7259 3152.4768 3151.3863 3150.2495 3149.027 3147.8553 3146.8528 3145.9095 3144.8323 3143.6563 3142.5379 3141.538 3140.7163 3140.0752 3139.5733 3139.4136 3140.0003 3141.5025 3143.4473 3145.0896 3146.2466 3147.151 3147.8892 3148.2349 3147.8904 3146.7559 3144.9783 3142.8694 3140.633 3138.3828 3136.5547 3135.4873 3134.821 3134.033 3133.6792 3134.9632 3138.4683 3143.487 3149.093 3156.009 3162.4458 3165.6477 3166.419 3165.3535 3162.566 3157.5269 3151.0408 3144.8487 3135.1099 3125.8352 3122.27 3122.6262 3127.5733 3139.5943 3152.024 3159.4554 3165.243 3168.2852 3168.7039 3167.5305 3165.7464 3163.1519 3158.9849 3153.7017 3150.8157 3150.0623 3150.8982 3152.6148 3154.9524 3158.9414 3164.5513 3169.7305 3175.092 3179.1328 3180.9737 3181.389 3182.276 3181.3086 3171.3792 3175.636 3172.8643 3155.0523 3152.8435 3150.2595 3150.48 3154.0125 3156.8706 3159.1155 3161.3535 3161.8035 3157.2346 3152.56 3150.446 3150.286 3148.4158 3145.0157 3145.4549 3167.9832 3165.906 3165.6863 3156.1177 3154.3853 3156.0564 3156.1355 3154.768 3153.5847 3151.315 3148.6817 3142.136 3169.0232 3139.3135 3133.2044 3106.6934 3117.0008 3121.189 3158.326 3160.3855 3160.3855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.499773 0.537256 0.562245 0.574739)) (quote (1507.7561 1529.9663 1522.4555 1521.8546 1522.9861 1523.7053 1525.5383 1524.7981 1524.329 1524.9124 1524.4483 1525.3169 1527.7872 1531.5795 1534.7304 1543.4569 1536.6415 1515.4489 1520.6857 1529.6199 1534.1953 1535.4505 1530.2869 1526.0357 1524.3617 1526.1607 1527.0195 1530.707 1541.713 1548.7527 1528.181 1550.085 1545.3179 1547.846 1547.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796 0.46229 0.474785 0.487279 0.499773 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.937075 0.949569 0.974558 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252)) (quote (1737.5405 1734.7499 1736.9894 1741.927 1741.5927 1747.604 1747.6199 1744.8505 1735.103 1732.432 1734.2257 1735.3626 1733.4315 1730.4944 1729.6152 1728.1036 1724.5919 1720.5676 1715.3392 1712.8198 1711.6289 1710.8674 1712.6389 1712.2706 1708.5142 1699.1098 1693.9642 1688.7548 1686.4907 1689.0225 1691.2511 1693.6668 1695.1764 1694.5659 1692.9342 1679.353 1658.9354 1658.1286 1667.4384 1667.6917 1670.4674 1676.6862 1648.6233 1615.054 1644.7692 1691.7852 1688.7129 1686.0165 1684.102 1651.2328 1647.8969 1693.4956 1689.2865 1685.0692 1713.7545 1675.8825 1680.7568 1681.8095 1676.746 1671.723 1665.5816 1651.8965 1654.6004 1655.9905 1674.5791 1672.3602 1671.6182 1677.9043 1683.6076 1686.9974 1688.4074 1689.3433 1690.2949 1690.5719 1685.6499 1680.7715 1682.3815 1691.2958 1692.6764 1691.7345 1664.5818 1651.3921 1676.5044 1704.4277 1727.2809 1727.2272 1727.2272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388 1.361882 1.374376 1.386871)) (quote (1538.516 1535.9008 1537.5548 1537.5548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161)) (quote (1499.5161 1496.312 1477.5598 1471.4555 1495.3064 1512.509 1512.3493 1479.0106 1454.7267 1455.908 1456.5444 1455.1046 1453.0977 1453.1183 1454.9502 1476.7254 1482.2612 1489.7782 1498.2565 1499.7206 1500.0115 1498.081 1494.6769 1491.5637 1491.8638 1491.6358 1460.3828 1484.0569 1483.2249 1480.0028 1477.7394 1475.7346 1473.1179 1473.239 1478.094 1480.8671 1481.2573 1507.1326 1508.9248 1510.2059 1488.4597 1485.7684 1491.3283 1499.2401 1499.9326 1496.3248 1486.2692 1486.2692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365 1.411859 1.424354 1.436848 1.449342 1.461837)) (quote (1468.0379 1466.2351 1464.8754 1461.3715 1456.4714 1456.4714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673)) (quote (1971.3322 1970.9177 1969.3427 1948.0936 1946.9804 1945.4869 1938.3301 1940.2627 1939.4397 1935.5557 1939.7688 1943.8931 1941.0221 1938.4988 1938.7584 1936.8807 1934.987 1938.3483 1945.5465 1957.8667 1958.727 1957.9668 1957.4437 1956.6504 1962.5545 1985.7504 1979.2377 1981.2089 1983.6189 1984.4208 1981.3696 1977.7904 1973.7119 1968.1589 1965.1692 1964.0949 1964.9957 1966.4556 1966.8944 1965.9125 1962.8026 1954.9824 1946.2598 1948.6909 1947.4677 1925.5664 1927.1898 1931.1105 1933.7147 1931.8748 1929.6419 1930.0452 1930.935 1963.3576 1962.662 1962.1161 1959.1409 1953.3429 1950.9708 1960.2018 1968.5106 1979.295 1983.0855 1983.0276 1983.0936 1991.8888 1994.092 1993.962 1987.3921 1981.1192 1980.9036 1991.3112 1994.7826 1995.861 1996.5111 1995.7202 1992.4677 1969.3219 1966.6743 1960.715 1959.7055 1969.936 1971.197 1990.8425 1995.1902 1994.1586 1992.1376 1992.7241 1995.1035 2003.8115 2003.9124 2001.3626 1997.6817 1996.4197 1991.9367 1987.0795 1995.7759 1976.5671 1998.7863 1983.3214 1976.7777 1972.8285 1969.062 1965.3279 1961.848 1958.2263 1951.9807 1942.2285 1947.9838 1947.9838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168)) (quote (1632.8538 1627.7664 1629.0436 1631.489 1652.8233 1658.5436 1617.6344 1623.002 1621.6574 1653.5791 1651.8873 1673.5504 1654.7994 1655.3276 1656.9558 1661.8494 1663.5098 1662.0872 1657.0347 1652.3473 1649.9268 1648.6734 1648.0353 1651.1878 1653.6253 1654.0363 1660.7766 1662.862 1660.4782 1656.1228 1651.3611 1650.5497 1653.3672 1654.7955 1656.2192 1659.943 1666.2676 1673.7173 1673.8864 1675.2322 1675.1329 1669.7097 1662.7311 1655.6192 1652.4685 1652.6947 1655.4326 1659.668 1665.7617 1670.5089 1673.2339 1674.5145 1675.8627 1680.128 1681.1918 1678.5055 1676.7755 1676.9699 1680.0137 1687.2515 1702.1488 1705.3286 1709.0723 1709.8709 1706.394 1704.3963 1703.9375 1700.978 1698.0724 1717.5878 1712.1047 1713.5247 1718.7676 1733.6144 1741.6039 1745.7255 1750.506 1756.649 1762.4175 1767.0673 1771.5088 1775.7609 1780.2031 1787.5172 1797.6155 1802.734 1803.2794 1799.0783 1776.9268 1774.8063 1772.7463 1772.7938 1771.4786 1769.8145 1772.9083 1775.4613 1776.8042 1758.8773 1727.8976 1695.539 1695.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415 1.911633 1.936621 1.96161 1.999093 2.011587 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261)) (quote (1544.1032 1544.8543 1545.0859 1536.5282 1534.1238 1512.229 1497.2838 1504.6655 1507.4046 1518.7764 1520.2245 1513.7827 1508.2467 1500.8526 1505.319 1515.2151 1519.2948 1527.6658 1535.3031 1524.7083 1492.7994 1483.7726 1510.8954 1509.727 1513.8176 1514.9541 1512.4404 1513.089 1506.6652 1493.9104 1490.2949 1489.4356 1489.1748 1490.181 1494.5606 1498.2186 1500.5314 1503.237 1504.5339 1505.2197 1504.7456 1503.4535 1503.8368 1504.4866 1501.477 1498.3508 1495.5944 1489.2866 1485.8748 1487.0441 1501.9011 1503.0093 1509.3455 1515.754 1510.743 1499.4805 1494.5361 1490.3187 1493.5916 1499.2267 1501.1676 1498.7396 1496.3427 1493.0515 1488.6056 1466.156 1459.952 1461.0477 1468.2534 1467.9391 1463.739 1464.0106 1469.5134 1480.6154 1487.0953 1490.4115 1486.7974 1477.1824 1474.6693 1472.2864 1468.1294 1504.5938 1529.6758 1530.6936 1531.9813 1535.5274 1542.5662 1526.8549 1499.1183 1469.7067 1465.8064 1463.7946 1465.9904 1471.3754 1477.3276 1479.996 1478.022 1473.7219 1477.9384 1484.0354 1479.915 1475.5625 1475.0482 1474.1753 1463.5177 1462.4055 1438.9196 1436.6746 1466.2155 1474.1912 1471.3157 1468.9883 1468.1932 1468.9053 1471.9276 1472.7527 1489.5215 1477.829 1483.8978 1489.2758 1492.9537 1494.7797 1501.666 1510.0647 1512.9536 1514.0061 1513.0026 1511.8925 1511.8312 1492.2503 1492.1345 1492.8888 1496.2645 1498.8993 1504.988 1508.6099 1518.0512 1488.124 1468.4716 1468.8803 1462.8108 1461.0368 1461.7566 1463.1066 1464.7688 1466.8662 1466.051 1462.0568 1454.7616 1450.4395 1448.2311 1448.5144 1453.3212 1454.0637 1454.9688 1485.7493 1485.7766 1492.5405 1500.5098 1503.7946 1508.2262 1509.9409 1503.3091 1497.6069 1501.2446 1505.7494 1506.6337 1506.5932 1512.9467 1515.6703 1510.1133 1506.2489 1476.3423 1473.2564 1472.664 1473.0571 1473.6188 1446.4104 1447.2544 1446.8903 1448.2564 1448.5453 1445.1987 1440.5707 1435.9365 1437.2946 1471.6305 1458.3302 1458.3844 1457.6962 1457.0881 1457.3256 1459.0916 1462.1897 1465.1558 1459.5173 1455.0346 1455.2494 1457.383 1457.4262 1455.6543 1454.9663 1454.9518 1455.4026 1456.866 1460.1908 1453.8385 1438.1846 1468.396 1468.0934 1469.1266 1470.5371 1472.1524 1473.6838 1474.8278 1475.4701 1475.7935 1476.0252 1476.2721 1476.6194 1477.1425 1477.752 1478.2191 1478.4481 1478.3936 1477.7861 1476.2202 1473.4866 1469.6897 1465.8807 1462.79 1460.2445 1483.4219 1483.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.785782 3.798277 3.810771 3.823265 3.848254 3.873243 3.885737)) (quote (2338.9082 2338.6492 2339.9458 2341.7835 2343.6104 2345.8289 2350.6394 2358.5105 2366.7288 2372.903 2374.391 2372.8814 2369.691 2367.6243 2366.8067 2366.5384 2365.4473 2358.0586 2354.5742 2354.7837 2373.832 2370.9339 2364.8958 2386.2632 2369.5154 2371.1714 2367.5845 2365.7954 2366.359 2370.153 2372.9663 2374.273 2373.3333 2370.5493 2368.235 2367.6612 2367.6914 2366.6963 2365.4995 2366.9988 2369.4715 2369.262 2368.5098 2369.439 2369.6524 2363.7534 2357.62 2358.8496 2363.9453 2367.6477 2369.5908 2369.3572 2365.598 2362.1853 2360.3523 2361.1324 2363.4785 2364.9385 2363.3833 2361.5366 2362.7173 2367.441 2372.5786 2390.5794 2393.935 2393.3199 2391.8155 2390.488 2389.9187 2390.6333 2393.2007 2397.739 2403.2046 2407.2415 2404.2845 2426.0152 2398.8076 2393.5699 2412.6355 2424.1802 2394.1729 2395.381 2394.9414 2393.3098 2391.862 2391.6944 2393.105 2395.346 2397.8098 2399.8902 2400.2288 2394.7066 2390.355 2390.267 2392.555 2394.302 2395.3389 2396.0852 2396.823 2398.2075 2399.3023 2398.318 2395.7495 2393.3408 2391.3384 2390.3106 2390.4693 2390.6304 2391.561 2420.2368 2401.5337 2399.4373 2397.155 2396.5159 2397.5366 2398.6165 2398.868 2393.2664 2384.4846 2381.174 2388.2864 2392.1265 2421.3658 2420.6377 2430.6414 2454.1802 2423.6988 2414.6258 2414.6258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.348934 2.373923 2.386417 2.411406 2.436394 2.448889 2.461383 2.498866 2.511361 2.523855 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873)) (quote (803.92194 804.0726 816.8756 828.11847 831.8606 829.3023 835.3111 834.54725 827.2316 825.53675 831.25837 815.59894 832.6965 834.51587 829.547 828.00037 856.86817 829.91224 851.8723 860.21814 868.2814 873.6926 876.64136 879.4756 882.70417 886.063 888.5682 890.3578 892.91535 896.97126 902.06867 909.617 912.4024 908.21814 923.3397 923.3397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474 2.273968 2.286463 2.298957)) (quote (1586.6547 1594.9124 1591.8328 1591.8328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619)) (quote (1070.8687 1070.9019 1070.9097 1069.8705 1067.2035 1065.1115 1065.3993 1065.7636 1056.4578 1052.4679 1052.9472 1057.8004 1067.9995 1063.658 1039.0564 1044.6463 1044.0695 1038.5701 1045.3328 1044.3777 1072.9552 1072.9552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.997733 5.022721 5.035215 5.04771 5.060204)) (quote (2613.0215 2619.8413 2628.0987 2639.189 2647.1382 2653.0076 2659.0586 2665.0728 2637.6516 2615.8206 2614.2913 2608.7776 2605.8692 2637.7022 2669.514 2677.5452 2679.8665 2701.8218 2706.2298 2711.2825 2723.095 2724.923 2683.3582 2661.922 2658.7276 2652.9253 2646.035 2639.1065 2634.4554 2615.6099 2592.9817 2574.7732 2599.3076 2580.2356 2577.3714 2579.4815 2615.4185 2607.2613 2641.3203 2653.4949 2653.756 2656.4549 2659.4065 2636.4768 2650.6697 2650.824 2653.8716 2658.5957 2663.1968 2665.566 2665.6682 2664.4824 2663.3775 2663.2906 2664.1348 2665.2188 2666.3145 2667.9458 2670.6778 2674.0469 2676.6328 2677.9715 2678.4248 2684.7034 2663.3384 2662.5974 2666.1035 2669.1096 2671.471 2673.769 2675.8435 2675.953 2674.4842 2673.3164 2674.8399 2677.142 2677.5076 2674.481 2667.975 2663.7324 2661.8272 2661.2554 2662.6006 2678.2239 2680.792 2680.4693 2674.757 2668.3904 2665.9163 2667.3626 2667.1043 2660.0008 2645.3242 2644.1043 2644.1158 2645.0764 2647.3572 2650.86 2653.6336 2655.4602 2656.962 2657.9436 2657.769 2656.0598 2652.9754 2649.7488 2647.5799 2646.691 2646.509 2646.4339 2646.7349 2647.7537 2648.9842 2649.7942 2650.4539 2651.4644 2652.8518 2654.2137 2654.7993 2654.2483 2653.1514 2652.3745 2652.208 2652.5196 2653.2268 2654.167 2654.8794 2655.1353 2655.2115 2655.2932 2654.894 2653.0415 2647.636 2639.382 2634.2364 2626.198 2617.4746 2618.2866 2592.5664 2589.5144 2590.058 2610.2342 2609.227 2638.2466 2656.375 2654.7058 2655.839 2657.6297 2658.0603 2656.4026 2654.5076 2652.663 2650.3098 2647.6692 2647.3804 2647.5347 2645.5135 2644.2967 2646.474 2648.081 2649.026 2649.693 2651.2322 2664.0337 2664.0725 2642.3289 2648.778 2649.5445 2650.75 2652.717 2652.6407 2651.3953 2648.7188 2649.0447 2652.081 2653.4832 2650.2075 2650.0408 2656.7937 2660.617 2658.6065 2655.6668 2653.1783 2654.2139 2655.5332 2658.8045 2666.2303 2668.8067 2651.77 2650.9456 2652.5862 2620.6697 2620.6697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043)) (quote (833.52857 831.9403 846.6986 844.9675 828.0279 845.71314 862.99994 841.4993 841.22406 835.6757 834.50104 835.12915 834.94837 833.284 832.38324 833.65107 837.6707 846.6539 851.3902 860.7655 886.0275 874.5566 876.26886 865.62635 866.8506 850.61915 841.5103 829.27765 819.8589 813.371 840.5237 810.8968 782.26355 825.56025 798.0391 797.65 797.2128 796.8692 796.88196 797.4043 798.3783 799.6235 801.4177 812.6425 818.7333 822.38855 821.6874 821.6874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782)) (quote (1013.80066 1014.1538 1027.5628 1025.3308 1007.5059 1002.9613 997.4084 992.3798 988.56977 985.8999 983.9433 982.57544 981.9106 986.6435 992.2875 992.0052 988.1202 988.7201 989.7675 990.3512 989.9591 988.0194 985.87507 985.1749 984.7867 984.17316 984.7873 986.8603 987.91126 987.04145 985.50574 988.21454 991.2941 991.321 968.27204 967.7242 969.002 971.4867 970.93567 968.4344 962.9236 989.528 987.49836 987.0909 987.9191 988.5062 988.157 988.45765 989.95624 989.98346 986.991 981.99256 981.0857 981.0956 980.54395 981.1834 985.67365 991.2432 973.77094 979.5884 973.499 972.5348 973.4071 975.7318 978.9787 981.6785 983.00934 983.2496 983.12397 983.1313 983.2731 983.26075 982.9713 982.5216 981.95057 981.1678 980.37787 979.92835 979.9587 980.8571 991.5454 966.71375 942.0913 981.9882 981.9882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259 2.748753 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.359614 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.359161 7.371655)) (quote (867.8418 864.5657 887.5115 893.73096 891.9675 888.1489 881.55854 881.2931 903.84876 905.54377 909.8583 912.02247 912.24665 906.03907 898.904 892.1961 884.91706 878.6031 868.79035 862.26465 866.522 872.3396 874.899 876.2911 876.5845 875.12 865.7814 864.5416 868.69617 869.2931 870.90265 874.7397 875.71106 874.39075 876.1169 879.8045 882.9109 884.9782 886.5218 887.47516 887.6926 887.4268 887.2329 887.34626 887.63 887.9304 888.3041 888.7247 889.1502 889.82557 890.7908 891.1133 888.86817 881.30854 875.015 872.05036 871.05524 871.29706 873.8216 892.2197 890.53815 892.60517 901.3718 906.6116 903.9018 893.59577 892.1211 890.21076 889.27717 890.11744 890.8287 890.7959 889.81775 887.9989 886.9913 886.64484 886.8274 888.15766 890.8952 895.50434 901.3883 900.80085 880.56507 881.2653 881.7217 882.5297 883.6052 884.51087 885.12806 885.5467 885.825 885.90686 885.69806 885.1783 884.4062 883.6473 883.2671 883.2811 883.264 882.82917 882.1283 881.85267 882.3236 883.11695 883.68177 884.0303 884.3445 884.5322 884.4238 884.10187 883.85224 883.85395 884.0405 884.30854 884.6589 885.04804 885.284 885.2249 885.0212 884.9176 884.8748 884.52295 883.3925 881.3495 878.9934 886.67664 889.4947 885.0454 879.7703 880.0114 881.08136 888.2848 891.4381 885.3544 876.8166 882.0689 888.0949 886.09125 878.79627 878.42164 880.2919 882.47455 883.92347 884.0518 883.34217 882.26716 881.42017 882.23224 885.73725 888.52674 888.57966 886.56067 884.22266 882.40235 881.73456 881.7216 881.4175 879.7529 879.2597 881.5392 882.94336 881.5715 878.9621 879.873 881.7974 883.11127 883.41114 883.6144 885.74195 887.1774 885.9374 883.13324 882.0367 882.2773 883.1416 886.9664 888.9221 884.5084 877.77796 877.895 878.22126 878.9649 882.11487 884.9333 884.6113 882.4882 881.4367 882.36005 883.8579 884.3513 883.7151 883.59205 883.68134 882.30597 879.80445 882.9647 889.3999 889.6935 887.5147 886.1893 881.9322 880.0803 881.73145 884.73334 886.2989 889.05164 891.52875 892.0509 892.13184 883.8959 876.3479 871.30317 873.2598 877.6081 878.0591 875.9556 873.0805 869.7164 859.53614 856.51764 856.0543 855.0967 853.64527 843.37336 844.8093 849.3057 853.33594 851.81275 850.88337 852.92676 854.0821 853.2097 851.3018 848.09314 854.6695 861.5608 864.26276 861.76325 876.3199 907.34845 941.4171 967.0822 939.13904 893.55024 869.00544 846.52955 859.79535 862.91047 873.7857 876.9815 875.95936 871.44214 865.44935 855.12397 850.7037 850.5992 851.1079 850.61335 850.0623 847.8684 842.4875 843.35364 844.15686 857.2259 863.1371 864.33606 861.6305 882.16547 879.50696 878.28577 881.09504 892.49695 891.6399 889.0858 881.0468 880.542 885.60535 887.8823 887.3223 885.9076 885.96827 886.44275 887.3336 890.96796 892.1687 887.5775 867.71875 856.4982 885.0994 885.1055 909.8432 910.8397 886.55787 887.5145 888.22034 889.69715 894.1086 907.0249 912.0836 914.7592 910.55915 906.6695 912.4114 895.48304 873.70954 842.6255 843.6259 839.5039 813.7308 787.25354 799.1574 802.9607 807.3585 811.5197 812.57074 815.6711 818.28266 820.40827 827.0885 832.0258 832.58094 832.89496 834.8045 837.1398 836.91596 834.63105 828.0132 817.1308 813.2238 797.9607 805.91675 807.45246 805.53357 805.5923 812.32697 818.47657 829.37665 830.1615 830.49036 828.81916 827.5897 830.1745 832.43226 833.7833 834.9 837.7674 840.21784 839.992 837.5686 834.83625 832.3354 830.97876 831.60846 835.12446 836.8836 834.84656 808.17536 798.6667 795.9979 795.04346 792.0783 786.02027 781.08997 756.0588 756.0588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.298503 3.310998 3.323492 3.335986 3.360975 3.373469 3.385964 3.410952 3.423447 3.435941)) (quote (1680.1885 1677.69 1676.7864 1660.8645 1654.8043 1652.754 1651.1929 1650.4347 1652.6832 1658.855 1658.5009 1654.0282 1652.1356 1652.0599 1656.3766 1665.856 1668.1781 1675.048 1661.4779 1664.6282 1662.3905 1657.6931 1653.0022 1650.6665 1651.3019 1654.5624 1651.4428 1647.5507 1648.3666 1651.0818 1674.8829 1672.9072 1678.175 1674.6798 1670.9317 1667.5103 1665.5997 1665.7335 1680.8047 1689.3595 1686.3182 1681.628 1661.4373 1660.3965 1657.5637 1653.1235 1624.4608 1626.4712 1622.1409 1616.8252 1615.482 1615.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873 2.811224 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123)) (quote (1831.3327 1814.0968 1800.7859 1803.093 1807.6935 1795.1867 1810.8904 1783.003 1777.8915 1771.6828 1766.1282 1759.8522 1750.9876 1741.0186 1729.4055 1721.0004 1719.637 1719.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834)) (quote (1973.3165 1969.8931 1961.5603 1957.2819 1951.1182 1950.3545 1954.8417 1958.4397 1954.8668 1948.9677 1948.5855 1953.6275 1955.2667 1944.4889 1944.2936 1967.513 1963.5779 1964.5541 1967.3081 1969.5587 1969.7731 1967.492 1964.5144 1963.9708 1967.0499 1967.6797 1965.1846 1961.5446 1960.7804 1962.082 1967.2971 1971.313 1974.1753 1975.408 1974.2478 1967.684 1961.4243 1965.0385 1973.5798 1977.203 1971.0496 1938.8898 1940.9718 1937.9819 1940.3063 1943.1459 1946.8777 1953.0193 1960.9794 1964.9596 1966.0332 1965.9995 1966.0186 1966.0523 1965.7899 1965.545 1965.6217 1965.6989 1965.1027 1963.3663 1960.9578 1958.6249 1955.8945 1952.0242 1950.4863 1950.7487 1951.2296 1954.0519 1934.0571 1961.9922 1961.6868 1962.3344 1968.7056 1969.5757 1966.0115 1962.287 1963.9002 1966.0691 1967.7053 1967.1525 1964.1974 1959.6467 1966.9203 1967.802 1965.1668 1966.1185 1965.8324 1963.2637 1963.4968 1966.3541 1965.962 1958.7141 1956.1133 1956.4851 1958.1332 1962.6749 1965.4832 1967.7478 1966.9168 1963.9478 1961.1118 1960.0266 1962.6216 1966.8698 1967.5763 1964.0287 1959.7496 1957.4371 1959.9533 1961.0067 1960.579 1951.1184 1950.9837 1952.316 1974.3135 1968.5359 1967.0042 1965.1527 1963.9107 1965.8505 1969.7671 1967.4701 1963.6585 1962.7582 1962.2029 1959.2868 1953.8335 1944.5479 1928.2158 1928.2377 1926.9766 1928.2201 1930.8067 1929.4938 1927.3859 1928.2489 1927.1165 1925.5238 1927.4077 1944.1815 1941.6643 1948.2485 1952.474 1953.2135 1949.7805 1944.448 1914.8134 1914.8134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145)) (quote (1917.7944 1911.9928 1909.7733 1916.4083 1896.3366 1877.2897 1877.2897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.26102 3.273515 3.286009 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918)) (quote (962.36744 946.7942 944.04627 934.7629 931.1655 924.9403 901.5765 906.7694 908.0271 909.1033 907.9147 911.92475 890.84595 897.3288 897.6187 892.92695 900.8323 920.99866 921.0131 919.77076 918.39057 915.35206 925.3798 929.22687 927.09424 916.12464 926.2099 923.11054 934.74897 917.49274 937.3888 934.0249 939.0315 909.52784 910.988 907.7899 889.3735 897.89454 897.89454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662 2.961156 2.998639 3.011134 3.036123 3.048617 3.073606 3.0861 3.098594)) (quote (1603.1985 1604.2445 1577.9843 1562.4658 1593.0939 1630.4483 1624.2207 1565.2344 1565.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651 2.986145 2.998639 3.011134 3.036123 3.073606 3.0861)) (quote (795.494 779.785 778.55524 777.3877 799.61835 766.78406 766.78406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639 3.011134 3.023628 3.036123 3.048617 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521)) (quote (1776.253 1758.2666 1767.4185 1774.0189 1775.43 1744.8644 1743.3726 1768.781 1769.7002 1770.8439 1768.7955 1761.8014 1754.3805 1756.7896 1761.4213 1765.8328 1769.36 1772.7086 1775.5382 1776.973 1776.886 1776.03 1775.3153 1775.2546 1775.7919 1776.5585 1777.4336 1778.6249 1780.4186 1782.6348 1784.1732 1783.9098 1782.0679 1779.9959 1778.84 1778.229 1777.0187 1775.5764 1775.5582 1775.1941 1773.6521 1773.3861 1776.7322 1779.255 1778.1759 1775.7127 1776.0629 1779.537 1783.428 1785.2745 1785.3565 1784.4337 1783.0178 1781.6185 1773.1774 1790.8607 1768.255 1773.0597 1775.5626 1768.4736 1787.2199 1762.3746 1762.4321 1762.8394 1763.3295 1764.2045 1765.675 1767.4866 1769.1475 1770.5881 1771.6664 1771.9094 1771.1621 1769.7749 1768.2969 1767.0657 1766.152 1765.4008 1764.4757 1763.5342 1763.5154 1764.7249 1766.0647 1766.676 1767.0757 1767.9026 1769.1141 1770.0437 1770.0872 1769.3285 1768.5137 1768.2885 1768.5895 1769.059 1769.4718 1769.7189 1769.716 1769.5227 1769.405 1769.4812 1769.1995 1767.5886 1762.8611 1754.1607 1749.6174 1750.1819 1739.6318 1718.376 1718.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.211043 3.223537 3.236032 3.26102 3.273515 3.286009 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447)) (quote (1701.2466 1694.1668 1694.435 1701.7769 1706.9054 1716.1002 1720.9022 1723.7966 1721.3513 1724.0734 1728.8905 1730.2737 1711.9439 1714.6213 1718.8368 1718.0073 1711.1843 1705.4396 1740.6914 1721.3392 1721.9409 1747.6969 1732.4475 1729.6841 1735.369 1742.8779 1740.045 1742.9053 1718.2846 1719.935 1719.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617 3.061111 3.0861 3.111089 3.123583 3.136077 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007)) (quote (719.4405 718.0291 735.6618 753.74555 770.874 768.60187 794.16736 788.69526 789.7073 796.8471 797.99817 801.39545 791.92597 801.1334 807.0256 810.8296 812.071 811.573 803.09607 797.68964 794.74415 793.0956 792.6232 793.4064 795.0204 793.9965 794.2458 796.65986 798.93714 798.1332 797.407 797.9086 799.6346 802.6559 806.8293 809.1669 786.48114 791.4602 794.0809 796.0375 798.4814 801.85547 804.7164 804.93335 803.5075 802.74567 802.4647 803.5123 810.3671 837.92115 835.2143 839.76874 822.81434 791.4365 789.02387 788.502 788.4215 788.6533 789.2016 789.7557 790.10486 790.53534 791.7664 793.6866 795.1839 795.498 795.15754 794.8951 793.4211 790.0996 788.9902 797.39704 802.86664 797.0617 772.2959 771.9738 774.02527 786.83454 789.31275 793.4143 796.4904 795.4522 789.70417 786.6563 787.31665 790.79834 792.1015 790.71735 789.0428 788.27857 787.39924 785.48676 783.17865 781.5267 776.6456 777.1721 765.62934 769.88587 789.7194 789.44837 788.7378 788.4087 788.4295 788.7999 789.4043 789.9486 790.25086 790.4279 790.6869 790.99286 791.1883 791.25074 791.1987 790.9616 790.58155 790.38617 790.7321 791.92695 794.1744 797.0916 798.46845 797.71814 796.23 796.73835 798.0185 797.51685 793.9476 792.44147 792.85346 792.68165 791.1436 788.7955 790.426 792.591 793.24805 791.5786 786.2812 781.9997 782.12024 782.95057 788.1314 788.45984 786.5338 776.6553 745.7378 739.9233 739.3497 740.39527 740.52594 739.90497 736.7399 731.04346 728.84015 729.82685 732.77765 734.89417 736.2949 737.82026 738.8341 738.76667 737.84357 736.86646 736.3708 736.7745 738.58674 740.8788 741.2064 739.02124 736.22895 734.9136 734.9739 735.5394 735.8842 736.1047 736.854 739.4292 741.30524 740.56385 738.5576 737.9459 738.70215 739.9952 741.3301 740.3339 737.13117 735.9253 738.0421 741.7081 745.29444 746.0801 741.15235 737.49305 737.5671 737.3482 735.2252 735.4752 741.332 741.63166 753.06214 757.9225 758.27704 755.3471 748.6536 741.09436 733.9454 736.11316 734.8654 730.84607 725.431 729.3384 754.5772 783.2337 812.86255 812.3674 812.7733 813.0331 814.76905 817.7624 818.6769 817.88984 810.2458 809.7655 813.9663 818.29285 816.6532 812.16376 805.0853 800.54297 797.9141 795.53577 791.3998 781.84205 779.97315 780.40235 781.29175 782.32496 787.3015 789.4003 788.52045 784.11615 775.38764 767.7645 765.002 765.8239 778.5412 812.31586 848.52234 819.6607 816.8945 822.7876 829.1808 832.51227 832.643 831.84607 831.3576 855.7721 850.98554 850.5444 854.45325 863.39216 870.2746 865.4896 864.2396 862.7945 856.8686 852.03315 847.5343 854.4985 859.5554 871.1058 872.015 873.74866 873.91565 873.91565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093 3.498413 3.510907 3.523401 3.535896 3.54839)) (quote (991.88617 1004.7081 1004.0981 1015.3426 1034.051 1034.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.735805 3.748299 3.760794 3.773288)) (quote (1737.1134 1725.7908 1726.2008 1730.0604 1729.7728 1729.2634 1729.48 1719.3899 1717.8922 1735.665 1754.6126 1743.8076 1741.3865 1741.782 1742.3624 1739.6709 1730.6399 1729.7798 1737.5211 1751.2731 1764.624 1764.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862 3.623356 3.63585 3.648345 3.673333 3.685828 3.710816 3.723311 3.735805 3.748299 3.760794 3.798277 3.810771 3.823265 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.198095 4.210589 4.223084 4.260567 4.273061 4.285555 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.497959 4.522948 4.535442 4.547936 4.560431 4.572925 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921)) (quote (1271.2116 1275.9684 1286.7512 1281.421 1279.5814 1304.4691 1276.053 1275.1515 1262.802 1259.9458 1259.2025 1268.7166 1265.607 1263.4025 1262.2208 1254.3756 1248.1283 1239.9209 1241.6918 1246.9063 1252.4933 1253.2405 1280.4464 1285.6077 1288.7733 1290.2929 1290.4768 1291.3836 1294.6633 1293.8099 1316.0269 1315.6118 1300.2201 1298.2974 1298.3579 1299.3399 1299.3333 1300.8327 1311.4282 1310.9765 1307.4678 1315.4719 1319.8589 1284.975 1285.8893 1283.491 1262.6784 1256.4389 1256.524 1259.0238 1243.9729 1243.5016 1242.8717 1234.3063 1231.1211 1231.97 1236.1245 1239.3506 1242.2774 1245.8814 1223.8773 1245.0917 1244.3104 1244.4989 1270.5076 1269.6643 1284.4779 1279.2374 1274.7345 1275.0985 1271.1762 1262.7654 1262.4312 1264.9697 1266.9408 1267.2282 1264.683 1261.765 1262.31 1282.9061 1284.232 1284.7578 1311.8388 1314.3668 1316.2968 1317.1336 1314.1215 1308.7498 1306.0845 1302.7739 1313.094 1312.7929 1306.8497 1300.9469 1302.7149 1304.1449 1305.4985 1306.8901 1308.2382 1309.3209 1310.0353 1310.5198 1311.0952 1311.9757 1312.9694 1313.6594 1313.8893 1313.8294 1313.6419 1313.3965 1313.1663 1312.9583 1312.7033 1312.4183 1312.2225 1312.2031 1312.3152 1312.4126 1312.4244 1312.4531 1312.6041 1312.8097 1312.8864 1312.7582 1312.5516 1312.4558 1312.5188 1312.6026 1312.507 1312.1461 1311.6207 1311.1607 1310.979 1311.0991 1311.3279 1311.4689 1311.4961 1311.5016 1311.6104 1311.8961 1312.2312 1312.3292 1311.8973 1310.6649 1308.6399 1306.3557 1303.9259 1299.2505 1296.8937 1300.1098 1272.6968 1272.6968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299 3.760794 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068)) (quote (1010.97577 1012.22614 983.4517 981.8121 980.6479 980.46857 980.57184 981.0853 981.5374 981.74006 982.1284 982.6929 982.12854 980.2988 978.846 977.4739 974.43586 966.3896 964.03986 967.2161 967.2161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578 4.260567 4.285555 4.29805 4.310544 4.335533 4.348027 4.360521 4.38551 4.398005 4.410499 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297)) (quote (1798.9513 1810.4127 1819.2617 1806.799 1780.2146 1797.637 1822.2799 1842.4956 1769.7637 1750.599 1745.1635 1767.7048 1769.0077 1770.6397 1770.7395 1770.303 1770.652 1770.2512 1768.8151 1768.6494 1769.6065 1769.9523 1770.3798 1772.0169 1773.4111 1775.954 1751.5681 1761.6935 1763.3093 1764.2837 1764.9545 1764.2802 1762.1366 1760.123 1764.8916 1767.0532 1765.6921 1765.4337 1768.5596 1773.1998 1773.2627 1769.6206 1765.2924 1766.1812 1768.4154 1770.1614 1771.8734 1772.8483 1770.5344 1763.6371 1762.3599 1762.7899 1765.9988 1768.3596 1768.9783 1768.6257 1770.4848 1772.9142 1771.6511 1766.6889 1765.2496 1764.3305 1762.3091 1759.1223 1754.3191 1732.5458 1760.1371 1761.8505 1762.744 1765.3043 1774.6113 1780.3347 1802.9503 1799.1841 1801.275 1806.0264 1816.5852 1780.0744 1780.6422 1777.1334 1769.389 1762.1295 1760.9144 1767.042 1785.2141 1789.5851 1792.0426 1795.868 1798.4258 1798.5839 1799.4597 1802.7992 1801.535 1795.0714 1791.9107 1814.5513 1817.4437 1817.814 1815.2405 1806.6997 1804.2587 1805.8908 1805.9082 1800.2448 1790.935 1771.0001 1752.4437 1775.2523 1755.5392 1758.3139 1759.2604 1759.4791 1759.001 1758.4822 1758.5994 1759.1356 1759.5414 1759.6347 1759.6455 1759.866 1760.281 1760.587 1760.5941 1760.4445 1760.4125 1760.5663 1760.7337 1760.8255 1760.9463 1761.0924 1761.0748 1760.8084 1760.4122 1760.0706 1759.9188 1759.9739 1760.1109 1760.1901 1760.154 1760.027 1759.9248 1759.9682 1760.1721 1760.4597 1760.724 1760.85 1760.7999 1760.6973 1760.6834 1760.7601 1760.8648 1761.0048 1761.1886 1761.2899 1761.1644 1760.862 1760.5755 1760.4367 1760.4816 1760.623 1760.6145 1760.3366 1759.9932 1759.8253 1759.8624 1760.0584 1760.4141 1760.8798 1761.2687 1761.382 1761.2478 1761.1034 1761.1144 1761.2156 1761.3023 1761.4246 1761.7117 1762.124 1762.4271 1762.482 1762.4208 1762.4132 1762.4837 1762.6139 1762.8314 1763.1222 1763.3574 1763.3651 1763.2078 1763.1727 1763.4025 1763.7499 1764.1093 1764.4705 1764.7739 1764.967 1765.0809 1765.1455 1765.063 1764.6819 1764.1356 1763.8338 1763.895 1764.0357 1764.1702 1764.4489 1764.9249 1765.6381 1766.7617 1768.4891 1770.7759 1772.577 1772.7859 1771.4215 1769.8665 1769.0431 1769.2442 1773.6011 1755.0398 1729.3723 1729.3723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544 4.323039 4.335533 4.348027)) (quote (865.6873 864.2679 873.6406 873.6406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533 4.348027 4.360521 4.373016 4.398005 4.410499 4.422993 4.435488)) (quote (1763.429 1767.7185 1769.3598 1769.4441 1771.1867 1771.6914 1769.9805 1769.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766)) (quote (1569.9312 1571.8635 1572.839 1573.9213 1575.025 1576.0726 1577.1769 1578.4755 1579.758 1580.5869 1580.9517 1581.2634 1581.7041 1582.0608 1582.1184 1581.8654 1581.3753 1580.7025 1579.9057 1579.1076 1579.1698 1581.6489 1583.9772 1584.0133 1581.1731 1578.6995 1577.9877 1577.8176 1577.1228 1575.8901 1575.35 1576.2745 1578.0182 1579.5604 1581.1289 1582.7092 1583.4473 1583.2157 1582.6607 1582.1172 1581.642 1581.5065 1582.0631 1582.8032 1581.7022 1574.5143 1588.248 1588.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261)) (quote (737.73456 737.9223 735.83417 735.27765 735.2021 735.6006 736.2728 737.01374 737.56684 737.86207 738.023 738.12665 738.21454 738.36847 738.6465 738.9926 739.286 739.43976 739.3895 739.00055 738.1279 736.62714 734.63984 732.9024 732.1679 739.2836 747.70606 747.70606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.146758 7.159252 7.171746 7.18424)) (quote (2192.461 2198.97 2201.1485 2203.4107 2205.825 2208.2127 2210.4358 2212.294 2213.645 2214.5616 2214.9556 2214.9492 2215.107 2215.711 2216.471 2217.1287 2217.6704 2217.8709 2217.1892 2215.3955 2212.6477 2202.7962 2222.059 2222.0789 2207.4837 2208.3553 2204.8667 2202.0948 2201.4087 2199.198 2196.7039 2198.7295 2212.8194 2215.449 2215.8609 2215.0205 2214.5208 2214.4097 2214.0926 2213.5823 2213.9444 2219.794 2223.3782 2222.1275 2213.872 2206.1394 2202.7447 2201.8875 2203.4773 2208.213 2212.1963 2212.9146 2205.0132 2195.7969 2195.7854 2211.3762 2213.83 2215.2725 2215.598 2214.9502 2216.0457 2217.8828 2216.5987 2211.1878 2208.833 2207.6148 2204.5598 2202.9658 2203.2234 2204.1482 2203.0017 2201.2383 2199.0027 2195.4998 2189.026 2187.5054 2191.031 2196.1402 2195.8274 2192.5457 2168.141 2172.878 2173.824 2205.6033 2216.59 2218.426 2219.613 2214.3843 2212.0218 2213.8008 2239.4502 2238.515 2236.0794 2259.118 2264.008 2263.0906 2262.3863 2269.7464 2245.5955 2246.1717 2248.25 2250.5613 2251.7112 2251.7149 2250.7515 2247.3377 2239.2022 2226.8794 2215.303 2212.3919 2216.491 2196.1616 2198.2879 2228.001 2232.3255 2237.3968 2236.7544 2232.9544 2232.669 2238.833 2242.7986 2242.5345 2242.5108 2244.2403 2243.6785 2239.9773 2238.877 2245.7195 2264.3626 2264.8557 2257.8684 2244.784 2237.927 2233.8445 2237.26 2239.518 2235.8384 2231.333 2226.994 2223.8418 2220.4803 2214.957 2211.94 2212.4439 2214.6077 2220.1443 2235.1314 2237.993 2235.4029 2216.1382 2220.8316 2227.192 2229.5533 2255.8465 2274.621 2273.9358 2275.872 2283.201 2283.6072 2281.5572 2280.8325 2284.435 2284.153 2261.281 2267.9112 2268.8553 2260.4593 2255.8977 2246.2403 2242.0242 2243.5452 2243.2854 2237.6275 2224.8675 2222.4156 2216.1665 2208.8997 2210.8894 2214.2693 2218.2595 2222.4634 2225.2227 2227.9143 2232.786 2204.8555 2207.4693 2212.9463 2207.7679 2188.3936 2194.0637 2198.6924 2202.2263 2202.9002 2203.7368 2201.9253 2201.7703 2201.694 2221.575 2224.7796 2228.659 2212.488 2202.8994 2192.916 2192.916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272 4.922766 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229)) (quote (1955.2651 1965.0512 1955.9384 1960.8099 1957.4959 1957.541 1958.7255 1960.6242 1962.722 1964.489 1965.6643 1966.3312 1966.926 1967.7772 1968.8237 1969.7478 1970.239 1970.2395 1970.0575 1970.0387 1970.0792 1969.8239 1969.2517 1968.7257 1968.5359 1968.6209 1968.7363 1968.6956 1968.5523 1968.5839 1968.9032 1969.2294 1969.2254 1968.9392 1968.6953 1968.6846 1968.8045 1968.8372 1968.6316 1968.1577 1967.507 1966.9519 1966.7777 1966.9734 1967.2307 1967.3088 1967.22 1967.1176 1967.2128 1967.6293 1968.1314 1968.2769 1967.7908 1966.5682 1964.7689 1963.004 1964.7315 1947.3424 1972.5794 1969.3903 1968.0195 1968.4021 1968.8335 1968.3977 1967.1433 1966.3383 1966.6386 1967.1729 1967.1266 1966.8322 1966.9785 1967.4933 1967.958 1968.0278 1967.4302 1966.6533 1966.6062 1967.2503 1968.0657 1967.6508 1966.1312 1964.4428 1964.3617 1965.7723 1967.8989 1970.0563 1970.1093 1969.2555 1968.4319 1967.3862 1966.6618 1968.2874 1970.4502 1970.3926 1967.1968 1964.8598 1964.6351 1966.4566 1970.2808 1970.3998 1991.6996 1958.0869 1954.2722 1951.4038 1948.3329 1939.866 1932.2575 1925.4711 1920.5313 1917.8591 1916.4484 1919.3645 1931.222 1934.1282 1933.0278 1933.4559 1963.3379 1961.6731 1967.7166 1970.1698 1970.8108 1979.9551 1986.2744 2015.5056 2014.8424 2015.9358 2045.839 2043.9917 2043.3082 2040.6433 2068.846 2066.025 2063.567 2067.7544 2072.2085 2074.36 2072.623 2071.8352 2073.4478 2075.231 2077.3743 2091.5679 2098.44 2109.7046 2091.3523 2093.6807 2071.4387 2069.5364 2091.6199 2078.6968 2074.9253 2054.7122 2050.9947 2033.6322 2033.8701 2029.3754 2025.4107 2022.6626 2024.3106 2026.1299 2022.8333 2018.4524 2018.4649 2020.3862 2023.0835 2030.7594 2035.3723 2036.4823 2030.3754 2021.396 1992.96 1992.7968 1992.9169 1964.7808 1972.3795 1975.1578 1976.619 1978.3706 1981.4381 1983.0018 1984.4496 1987.2594 1987.2594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766 4.935261 4.947755 4.960249 4.972744 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.622449 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.422086 6.447075 6.472064 6.497052 6.509546 6.547029 6.559524 6.572018 6.597007 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.484104)) (quote (1397.1781 1398.3085 1406.7887 1407.9015 1389.4622 1359.8829 1364.7814 1365.2949 1355.5355 1364.4204 1359.1537 1387.9303 1366.153 1359.9485 1360.7904 1384.2776 1388.4646 1358.9241 1350.7409 1349.5848 1361.3023 1367.0054 1349.9694 1358.4121 1351.4727 1355.85 1344.741 1356.1764 1349.1102 1355.496 1364.7553 1356.4208 1376.8403 1356.339 1349.0792 1356.8573 1345.7059 1355.9948 1346.2976 1355.6779 1348.4647 1356.111 1365.1279 1357.4546 1353.6397 1347.9712 1356.4815 1365.4907 1356.9974 1367.3327 1365.8163 1355.3688 1351.6522 1370.2106 1340.1853 1319.7029 1319.3358 1311.6453 1310.9566 1309.8394 1309.397 1309.9077 1310.8931 1311.5995 1311.4246 1310.7642 1311.5875 1312.394 1293.2625 1307.5296 1306.7429 1307.2449 1308.5051 1310.2067 1311.3855 1311.7296 1311.7396 1311.8778 1311.4049 1309.73 1308.4312 1308.2444 1307.5062 1304.1339 1295.0219 1294.438 1298.17 1304.1007 1306.6764 1309.0233 1311.6636 1312.9004 1311.477 1309.0309 1308.2794 1313.731 1317.0859 1315.9054 1310.3432 1308.9806 1308.8377 1307.554 1306.6328 1278.6552 1279.5281 1281.416 1278.7059 1277.8191 1280.769 1282.6167 1310.0868 1311.7953 1311.5245 1308.1636 1304.6143 1274.796 1282.031 1281.2233 1288.5838 1284.4995 1282.0715 1277.6295 1283.8495 1286.8107 1266.7974 1248.5579 1252.9152 1253.5258 1253.9932 1256.4268 1259.4979 1262.6397 1274.6881 1273.7803 1272.5164 1266.3176 1266.8682 1258.7324 1254.3097 1244.1882 1243.3091 1247.7538 1219.8793 1214.358 1220.3607 1213.3224 1219.7792 1242.3591 1258.7799 1254.9058 1259.2337 1262.7752 1242.2308 1211.0964 1213.1384 1211.996 1213.9276 1220.5464 1231.072 1224.8626 1231.0028 1256.7308 1258.3916 1259.6615 1260.3543 1262.6033 1268.7955 1278.7334 1278.4331 1273.4347 1295.2847 1292.7435 1290.8723 1290.723 1296.1791 1305.077 1311.2766 1320.962 1323.8156 1343.731 1340.4107 1340.1004 1345.0918 1347.3898 1349.9739 1354.6605 1358.2726 1361.3536 1365.6267 1361.9514 1375.4357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.459116 7.47161 7.484104)) (quote (676.55164 671.20685 664.3467 654.5488 655.0631 654.5961 654.17206 654.0291 654.1877 654.59626 655.1098 655.50415 655.71625 655.8953 656.1881 656.57367 656.8754 656.96015 656.9034 656.8576 656.83936 656.74567 656.5572 656.4032 656.38074 656.4232 656.42945 656.4027 656.3885 656.394 656.40247 656.39277 656.3567 656.3393 656.3886 656.4769 656.5297 656.4999 656.3742 656.1581 655.8769 655.6013 655.44025 655.4459 655.5489 655.62934 655.6296 655.5842 655.58545 655.7045 655.89777 656.00635 655.8555 655.39887 655.0326 655.69965 662.00635 665.04944 662.858 657.40015 656.123 655.8434 656.16895 656.49176 656.42554 656.69977 657.73645 658.4975 658.12964 656.9603 656.22236 656.2866 656.42646 656.1908 656.01246 656.68836 657.72535 657.8308 657.15577 657.2701 657.69654 656.6202 653.6395 650.1992 647.225 643.4303 642.0553 644.6148 651.3115 654.87 657.3391 658.33814 658.375 658.25824 658.7385 659.35614 658.4513 655.97547 654.8532 655.985 657.29377 657.2036 655.8398 654.5752 653.55835 652.8057 653.19227 655.64576 657.81714 658.20704 655.1887 652.5321 652.6397 656.1357 658.1272 658.4606 658.3175 654.3977 653.56244 652.1784 654.69806 657.22547 658.32044 656.82624 653.12476 652.3066 653.84644 659.8063 660.8455 660.94306 660.9684 660.34345 654.07386 652.8658 653.2997 658.8352 659.06116 652.0683 651.5496 651.23267 643.0622 623.45166 623.19257 623.61347 644.30036 654.0804 653.2412 653.3775 655.56495 660.2257 659.2462 655.6388 655.4965 655.9169 655.1868 655.0616 658.63184 660.926 653.438 633.6694 624.1287 624.2709 624.4593 625.00995 624.9606 633.82306 644.13807 644.4268 644.37915 634.2573 624.5341 624.2242 623.667 623.89795 624.3392 632.6687 654.20185 671.228 693.1753 702.7399 717.61817 713.97205 714.13935 719.4738 724.9563 728.3678 731.67084 733.9956 733.0384 709.25257 706.9408 705.7445 701.3511 696.66034 697.01484 695.39924 689.80494 687.56745 689.5453 697.90784 698.0039 697.34144 697.3501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.459116 7.47161 7.484104)) (quote (608.44477 602.11054 596.4314 591.423 588.4703 587.3865 587.19367 587.1299 586.93396 586.69245 586.5089 586.4115 586.3896 586.46216 586.62824 586.801 586.90155 586.9403 586.919 586.8385 586.78547 586.82886 586.916 586.98035 587.0219 587.0428 587.0174 586.93915 586.8284 586.72236 586.67096 586.6829 586.70154 586.68634 586.65027 586.6178 586.6173 586.6776 586.786 586.89765 586.98066 587.0146 586.9982 586.97175 586.9767 587.0013 587.0167 587.0394 587.0952 587.1449 587.1204 587.0171 586.8935 586.8148 586.8195 586.87354 586.8698 586.75696 586.6194 586.56617 586.61487 586.73 586.8855 587.0585 587.2008 587.2587 587.2323 587.181 587.1524 587.15314 587.19587 587.309 587.4791 587.6365 587.71424 587.7069 587.6645 587.64136 587.6574 587.70447 587.76624 587.82465 587.8563 587.84754 587.819 587.8104 587.8326 587.8678 587.907 587.9523 588.0035 588.0554 588.09644 588.1188 588.12195 588.1034 588.0758 588.0708 588.0908 588.1053 588.12574 588.20795 588.3792 588.6209 588.88416 589.09675 589.2111 589.2517 589.2843 589.34656 589.42615 589.4883 589.5153 589.52076 589.5212 589.50776 589.44806 589.29877 589.0321 588.66694 588.258 587.8279 587.36567 586.97437 587.0473 588.3361 590.96485 592.7035 592.31525 590.6636 589.6306 589.3049 589.3057 589.51624 589.77625 589.84455 589.5023 588.82917 588.2418 587.9725 587.8699 587.7706 587.71485 587.9836 589.2792 591.3928 592.233 591.2403 589.87226 589.28125 589.19855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.459116 7.47161 7.484104)) (quote (1176.1157 1177.9264 1176.4464 1175.4909 1174.7506 1174.1133 1173.57 1173.3003 1173.3113 1173.4492 1173.5635 1173.6356 1173.7528 1173.906 1173.9608 1173.8705 1173.7041 1173.5532 1173.4993 1173.563 1173.7019 1173.874 1174.0194 1174.0505 1173.9227 1173.6862 1173.4323 1173.2393 1173.1576 1173.1696 1173.1995 1173.209 1173.2247 1173.2731 1173.3629 1173.4976 1173.6572 1173.8097 1173.9203 1173.9462 1173.8969 1173.8526 1173.8619 1173.8947 1173.9295 1173.9962 1174.0816 1174.1126 1174.046 1173.9092 1173.7656 1173.7014 1173.7588 1173.8474 1173.8165 1173.6401 1173.443 1173.3457 1173.3882 1173.5643 1173.834 1174.1205 1174.3237 1174.3629 1174.2686 1174.167 1174.1399 1174.1825 1174.2843 1174.4556 1174.6896 1174.9309 1175.0938 1175.1347 1175.097 1175.0704 1175.1293 1175.2836 1175.4757 1175.6367 1175.7227 1175.7046 1175.6201 1175.5735 1175.6173 1175.7125 1175.8118 1175.9055 1176.003 1176.1018 1176.1813 1176.2288 1176.2483 1176.2351 1176.2058 1176.2138 1176.2686 1176.3303 1176.4306 1176.6592 1177.0372 1177.4927 1177.9209 1178.2079 1178.3009 1178.3198 1178.4567 1178.7499 1179.0756 1179.3251 1179.4691 1179.5151 1179.508 1179.5012 1179.5576 1179.6924 1179.5923 1178.7354 1177.0014 1175.1395 1174.2487 1175.1073 1177.2334 1178.4934 1178.2748 1177.75 1177.663 1177.9122 1178.3263 1178.7554 1179.1162 1179.3748 1179.4098 1179.1135 1178.6503 1178.3889 1178.8505 1181.3231 1185.0663 1185.562 1182.561 1179.6046 1178.4636 1177.5751 1176.2135 1173.2876 1169.3338 1167.4528 1167.6936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 1118 626) (om-make-point 92 29) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "extracting-partials-to-bpf-lib 2" (om-load-patch-abs1 "extracting-partials-to-bpf-lib" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 584 286) (om-make-point 26 30) (quote c) "c" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 549 274) (om-make-point 27 30) (quote b) "b" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 493 274) (om-make-point 47 30) (list (quote a) (quote d)) "(a d)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 543 316) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 550 40) (om-make-point 186 30) (list (list 5 4 5 6) (list 1 5 4 6) (list 2 6 7 8)) "((5 4 5 6) (1 5 4 6) (2 6 7 8))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 680 102) (om-make-point 42 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 652 101) (om-make-point 23 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST 2" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 580 159) (om-make-point 132 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "frames" nil) (om-load-inputfun (quote input-funbox) "" "onsets" nil))) (om-make-point 218 140) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 324 481) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 310 511) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 180 34) (quote "((((i f a t) (i f a t) (i f a t)))") "" (om-make-point 317 440) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 166 34) (quote "((i f a t) (i f a t) (i f a t))") "" (om-make-point 12 396) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 229 419) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 224 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 166 257) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 133 47) (quote "((i f a) (i f a) (i f a))") "" (om-make-point 11 194) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 466 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 197 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 454 23) (quote "(((i f a) (i f a) (i f a) (i f a)) ((i f a) (i f a) (i f a )) (( i f a) (i f a) ( i f a)))") "" (om-make-point 0 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "onsets" 1 (om-make-point 461 41) "" "onsets" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "frames" 0 (om-make-point 195 92) "" "frames" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 515 537) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 143 516) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 1 1 0 nil 0) (0 0 1 1 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (9 0 5 1 nil 0) (8 0 6 1 nil 2) (11 0 8 0 nil 0) (12 0 9 0 nil 0) (1 0 13 0 nil 0) (4 0 14 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 286 39) (om-make-point 59 30) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 220 41) (om-make-point 59 30) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 185 41) (om-make-point 21 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 163 79) (om-make-point 221 55) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "sdif" 0 (om-make-point 158 5) "" "sdif" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 227 444) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) "bpf" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 162 25) (quote "((i f a t) (i f a t) (i f a t))") "" (om-make-point 27 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 249 306) nil nil "&" (list (let ((box (om-load-boxcomment "comment" (om-make-point 20 29) (quote "i") "" (om-make-point 742 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 20 29) (quote "i") "" (om-make-point 224 305) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 53 28) (quote "(i f a t)") "" (om-make-point 244 181) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 600 552) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 26) (quote "sac princ") "" (om-make-point 548 311) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 67 26) (quote "sac aux") "" (om-make-point 426 229) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 724 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (get-inst-from-globals "pointeur") (quote nil) (om-make-point 590 176) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 643 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 647 155) (om-make-point 45 30) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 418 467) (om-make-point 148 48) nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 170 34) (quote "((i f a t) (i f a t) (i f a t))") "" (om-make-point 323 56) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 239 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 199 368) (om-make-point 45 30) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil))) (om-make-point 155 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (get-inst-from-globals "pointeur") (quote nil) (om-make-point 124 340) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 0))) (om-make-point 232 496) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 235 569) (om-make-point 175 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 123 133) (om-make-point 45 30) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 114 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 194 96) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 300 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (get-inst-from-globals "pointeur") (quote nil) (om-make-point 72 68) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 117 259) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 372 215) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 498 297) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 268 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 759 656) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 233 681) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((25 0 3 0 nil 3) (25 1 3 1 nil 0) (21 0 6 0 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (6 0 8 2 nil 0) (25 0 10 0 nil 0) (24 2 10 1 nil 2) (24 0 10 2 ((om-make-point 384 272) (om-make-point 384 370) (om-make-point 421 423) (om-make-point 508 467)) 1) (8 0 10 3 nil 0) (21 0 12 0 nil 0) (15 0 14 0 nil 0) (13 0 14 1 nil 0) (14 0 16 0 nil 0) (12 0 16 1 nil 13) (16 0 17 0 nil 0) (24 0 17 1 nil 1) (10 0 17 2 nil 0) (22 0 19 0 nil 0) (18 0 19 1 nil 0) (20 0 19 2 nil 0) (26 0 20 0 nil 0) (26 0 21 0 nil 0) (19 0 23 0 nil 0) (21 0 24 0 nil 0) (24 1 25 0 nil 0) (3 1 27 0 nil 0) (17 0 28 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 215 205) (om-make-point 132 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 287 147) (om-make-point 23 30) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 315 148) (om-make-point 36 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 157 37) (quote "((i f a t) (i f a t) (i f a t))") "" (om-make-point 303 311) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 216 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 276 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 228 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "((i f a t) (i f a t) i f a t))") "" (om-make-point 312 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 235 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 443 176) (om-make-point 21 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 209 295) (om-make-point 169 94) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 237 19) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 222 437) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (3 0 1 0 nil 0) (6 0 3 0 nil 0) (1 0 5 1 nil 0) (0 0 5 2 nil 0) (4 0 5 3 nil 0) (5 0 7 0 nil 0))) 6.17 nil "" (om-make-point 42 260) (om-make-point 557 434)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 180 300) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 3 2 nil 0) (4 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (12 0 8 0 nil 0) (12 1 8 1 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (10 0 12 3 nil 0) (9 0 12 4 nil 0) (21 0 14 0 nil 0) (17 0 16 0 nil 0) (8 0 17 0 nil 0) (18 0 17 1 nil 0) (19 0 17 2 nil 0) (22 0 21 0 nil 0) (16 0 21 1 nil 0))) 6.17 nil "" (om-make-point 345 23) (om-make-point 773 527)) (quote ((om-load-inputfun (quote input-funbox) "" "sdif" nil))) (om-make-point 116 115) nil (list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.012494 0.024989 0.037483 0.049977 0.062472 0.074966 0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646)) (quote (1518.9293 1518.051 1516.5264 1516.2745 1517.8215 1520.9176 1527.6256 1544.1433 1554.3317 1561.2997 1566.6597 1569.8828 1571.2647 1571.8109 1572.4439 1573.311 1574.2561 1575.1629 1575.8671 1576.4146 1576.9639 1577.4082 1577.521 1577.3779 1577.3119 1577.4568 1577.5756 1577.3989 1576.9291 1576.3527 1575.8656 1575.6705 1575.8909 1576.228 1576.321 1576.1954 1576.0724 1576.0797 1576.4046 1576.9917 1577.3446 1577.3095 1577.2153 1577.2698 1577.3793 1577.4224 1577.3359 1577.1666 1577.0001 1576.7659 1576.3657 1575.873 1575.3687 1574.8457 1574.3486 1573.9338 1573.604 1573.5375 1573.9281 1574.512 1574.7749 1574.4597 1573.6206 1572.5548 1571.7208 1571.4404 1571.6246 1572.1087 1572.8984 1574.0221 1575.3855 1576.8291 1578.2811 1579.6395 1580.4993 1580.1671 1578.2173 1574.7766 1570.6257 1567.101 1565.1329 1564.8031 1565.7688 1567.253 1568.8334 1570.4714 1571.9537 1572.8805 1573.0385 1572.6487 1572.1283 1571.61 1570.7778 1569.3674 1567.611 1566.3662 1566.518 1568.0978 1570.1408 1571.6856 1572.752 1573.8488 1575.2387 1576.1978 1575.6901 1573.6264 1571.1791 1570.9194 1571.2775 1570.3098 1569.2864 1570.7085 1572.7361 1574.1315 1574.6384 1574.5038 1574.5247 1575.4539 1577.7479 1581.3674 1583.6437 1583.2639 1581.2839 1580.5462 1581.1238 1581.3809 1580.8406 1580.0383 1579.4926 1579.0197 1578.4185 1577.657 1576.689 1575.51 1574.3938 1573.702 1573.3862 1572.9913 1572.1007 1571.044 1570.6964 1571.2809 1572.0907 1572.3883 1572.0159 1571.0946 1570.0632 1569.6828 1570.435 1571.849 1572.8961 1573.2651 1573.2854 1573.2863 1573.3197 1573.2429 1572.8873 1572.1776 1571.1881 1570.0984 1569.1607 1568.6095 1568.3742 1568.114 1567.6161 1567.1842 1567.4982 1568.9113 1571.2195 1573.925 1576.7802 1579.6196 1582.0647 1583.5704 1583.6022 1582.002 1579.1312 1575.6738 1571.6251 1566.3937 1561.9179 1559.8477 1560.2041 1563.1668 1568.1426 1573.6511 1578.582 1582.7438 1584.9943 1584.9806 1583.436 1581.9583 1580.9617 1579.841 1578.3711 1576.7775 1575.4078 1574.4863 1574.2888 1575.2239 1577.533 1581.1975 1585.4613 1587.8878 1587.071 1580.5374 1576.299 1576.9087 1579.9909 1582.0568 1582.9238 1583.5964 1584.4974 1585.8666 1586.6425 1585.2413 1581.8322 1580.6881 1588.2135 1592.3975 1590.4013 1585.2616 1582.0674 1580.382 1579.7542 1579.436 1577.6986 1568.5875 1566.6821 1569.5045 1573.8157 1576.5155 1582.1098 1588.0117 1590.8153 1589.0097 1579.8976 1578.9136 1585.1382 1589.9476 1599.3997 1579.3551 1560.8152 1591.3324 1591.3803 1592.3502 1593.3615 1594.3438 1595.5975 1596.7811 1597.2163 1597.0537 1598.355 1578.7516 1583.0088 1598.5437 1596.6934 1595.7163 1596.5733 1598.8973 1599.2936 1597.9519 1596.7282 1595.8622 1594.8552 1594.9165 1596.9639 1598.7125 1597.8375 1596.8671 1597.54 1596.2492 1593.4782 1594.672 1598.8342 1597.2655 1593.156 1593.0361 1597.127 1601.1835 1602.224 1601.6824 1600.069 1598.0479 1596.9998 1598.5618 1600.734 1599.545 1595.1154 1592.6543 1592.5112 1593.593 1595.4271 1596.871 1596.483 1594.0167 1592.1709 1591.679 1589.162 1585.4352 1580.0388 1575.3483 1578.9094 1582.819 1600.871 1600.9523 1599.863 1599.1707 1598.5253 1597.3322 1595.6052 1588.4268 1566.7305 1564.7022 1560.6626 1560.7976 1563.8229 1564.5491 1563.0755 1560.9713 1555.8764 1549.043 1544.8992 1529.3635 1519.8616 1519.8616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.012494 0.024989 0.037483 0.049977 0.062472 0.074966 0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583)) (quote (760.9288 761.91706 760.94104 759.6873 759.8926 761.8404 766.2142 773.275 778.4871 781.8501 783.8426 784.9919 785.7578 786.33307 786.7113 786.91517 787.16504 787.63367 788.16944 788.527 788.69245 788.76764 788.7733 788.7006 788.59095 788.50074 788.45447 788.40955 788.28156 788.0651 787.87995 787.86194 788.0409 788.275 788.3544 788.2307 788.05634 787.9782 788.0454 788.21515 788.3762 788.46534 788.53907 788.6292 788.6694 788.62555 788.5542 788.504 788.4563 788.3607 788.2015 788.003 787.77167 787.5121 787.26264 787.0414 786.8687 786.8563 787.0691 787.34235 787.41425 787.1445 786.57654 785.92676 785.501 785.44184 785.6701 786.08417 786.68555 787.48505 788.4033 789.2735 789.91407 790.21546 790.1227 789.5792 788.52167 786.9926 785.2034 783.5043 782.31305 781.9684 782.4723 783.53064 784.74964 785.85657 786.6294 786.8998 786.6954 786.255 785.846 785.49775 785.0144 784.29407 783.52894 783.1038 783.28235 784.02454 785.044 786.0546 786.9015 787.5919 788.18335 788.64277 788.96515 789.424 791.11805 798.19794 800.73957 797.8457 792.48835 789.8002 788.9726 788.9322 788.77594 788.2128 787.4705 787.2269 788.06226 789.74695 791.15967 791.6068 791.40717 791.1701 791.0289 790.7504 790.28565 789.82074 789.4388 789.063 788.6533 788.27424 787.97266 787.716 787.43976 787.13117 786.84595 786.6277 786.41486 786.11884 785.75556 785.41285 785.1479 784.9806 784.8934 784.8533 784.8777 785.0521 785.4273 785.90607 786.2987 786.536 786.7114 786.8942 787.0259 786.9872 786.69165 786.14936 785.4723 784.8069 784.2752 783.9664 783.87085 783.82685 783.69715 783.6183 783.91205 784.75055 786.04505 787.5869 789.16004 790.5336 791.5135 791.9859 791.9022 791.1956 789.835 787.8583 785.2822 782.46027 780.3926 779.7845 780.6316 782.5086 784.9403 787.54535 789.80384 791.3772 792.3006 792.6908 792.53266 791.8285 790.75367 789.58625 788.50867 787.68824 787.2637 787.23804 787.5692 788.3235 789.61255 791.33216 793.0508 794.2175 794.7258 795.16175 796.5935 798.44635 798.1732 793.69007 791.4843 792.7761 794.2871 795.37226 796.52857 796.3698 794.6111 792.56177 790.50904 788.8947 789.60675 792.3581 794.84156 795.2636 794.49994 792.75727 790.1537 787.8725 783.5682 780.8905 783.968 788.4726 791.63086 793.64747 793.6864 792.2058 789.45295 787.4178 781.2548 760.5851 736.3253 739.1707 738.0326 739.658 746.9322 746.3212 743.92176 741.9979 742.6514 737.80726 737.80726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977 0.08746 0.099955 0.112449 0.124943 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968)) (quote (2329.7124 2321.1345 2332.1514 2339.5227 2340.8179 2363.062 2330.0142 2361.665 2361.8167 2362.3213 2363.2254 2364.167 2364.8506 2365.29 2365.539 2365.5203 2365.2063 2364.818 2364.6555 2364.7332 2364.7105 2364.4038 2364.1136 2364.1226 2364.4175 2364.8777 2365.2422 2365.2117 2364.8394 2364.492 2364.4485 2364.7227 2365.105 2365.3916 2365.6377 2365.9766 2366.2925 2366.404 2366.319 2366.1404 2365.9905 2365.7559 2365.097 2364.1016 2363.3045 2362.857 2362.5782 2362.3809 2362.2063 2362.074 2362.166 2362.4683 2362.5923 2362.0974 2361.0406 2359.9268 2359.513 2359.9876 2360.8902 2361.6524 2361.9478 2361.847 2361.8037 2362.2886 2363.272 2364.3592 2365.424 2366.8113 2368.7034 2371.1053 2375.2408 2375.5423 2372.531 2371.0603 2370.4229 2367.3748 2364.8435 2364.511 2363.5384 2361.5498 2358.309 2355.7117 2356.0982 2358.9624 2360.9048 2362.5198 2366.5132 2367.9427 2365.3079 2358.4483 2357.0345 2357.3504 2359.3572 2362.359 2364.2835 2364.7766 2364.7913 2364.906 2364.542 2361.6638 2359.2547 2358.519 2357.2627 2350.8792 2350.6797 2355.6433 2364.1204 2364.1077 2363.84 2363.7642 2365.0847 2368.0037 2371.0965 2373.1592 2373.9229 2373.5154 2372.554 2371.8335 2371.3867 2370.9326 2370.482 2369.881 2368.8435 2367.3838 2365.8296 2364.392 2363.019 2361.6553 2360.525 2359.963 2359.974 2360.1026 2359.9578 2359.3648 2358.092 2356.2276 2354.8255 2354.4688 2354.5286 2354.0196 2353.7425 2354.975 2357.6387 2359.7923 2360.7864 2361.3404 2361.7996 2362.0208 2361.708 2360.6656 2359.1197 2357.5677 2355.851 2352.074 2348.2559 2347.998 2350.315 2352.0174 2352.9468 2354.468 2356.5432 2359.1355 2362.6429 2367.3704 2372.3252 2375.4326 2376.7617 2376.479 2374.3748 2370.4817 2368.264 2368.9085 2371.0174 2372.1482 2370.0327 2370.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.049977 0.062472 0.074966 0.08746)) (quote (790.95087 788.50385 805.0431 805.0431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08746 0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.487279 0.499773 0.512268 0.524762 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.912086 0.924581 0.937075 0.949569 0.962063 0.974558 0.987052 0.999546 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.224444 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594)) (quote (3114.9546 3123.367 3130.8457 3137.3684 3141.0042 3143.116 3144.3933 3145.4217 3146.3682 3147.413 3149.0694 3151.3753 3153.4532 3154.6949 3155.2928 3155.372 3154.754 3153.6975 3152.9385 3152.9326 3153.354 3153.584 3153.288 3152.7002 3152.3516 3152.5828 3153.0972 3153.2776 3152.9414 3152.48 3152.3736 3152.7237 3153.2896 3153.7373 3153.9705 3154.1543 3154.4536 3154.854 3155.0935 3154.936 3154.5388 3154.1487 3153.7024 3153.1055 3152.4068 3151.5804 3150.566 3149.5186 3148.5962 3147.9214 3147.8174 3148.4458 3149.3282 3149.6426 3148.9226 3147.231 3145.1465 3143.5674 3142.9485 3143.1023 3143.973 3145.762 3148.4532 3151.519 3154.4063 3157.085 3159.3836 3160.1087 3158.2783 3153.704 3147.8448 3141.9744 3136.5916 3131.375 3127.9998 3128.1016 3131.6648 3138.2566 3142.745 3145.2735 3146.654 3147.069 3146.5166 3144.6577 3142.513 3140.3775 3137.2544 3133.8706 3132.1619 3132.938 3135.9717 3139.5496 3142.8245 3146.032 3148.8894 3150.9898 3152.4346 3153.5637 3153.957 3150.0276 3144.8809 3138.9383 3135.726 3136.208 3139.848 3147.5926 3150.9182 3151.6612 3150.6665 3149.4229 3150.2632 3155.5789 3161.9827 3164.424 3164.4497 3163.7154 3163.4549 3163.3423 3162.689 3161.4016 3160.0 3158.725 3157.2027 3155.3653 3153.7259 3152.4768 3151.3863 3150.2495 3149.027 3147.8553 3146.8528 3145.9095 3144.8323 3143.6563 3142.5379 3141.538 3140.7163 3140.0752 3139.5733 3139.4136 3140.0003 3141.5025 3143.4473 3145.0896 3146.2466 3147.151 3147.8892 3148.2349 3147.8904 3146.7559 3144.9783 3142.8694 3140.633 3138.3828 3136.5547 3135.4873 3134.821 3134.033 3133.6792 3134.9632 3138.4683 3143.487 3149.093 3156.009 3162.4458 3165.6477 3166.419 3165.3535 3162.566 3157.5269 3151.0408 3144.8487 3135.1099 3125.8352 3122.27 3122.6262 3127.5733 3139.5943 3152.024 3159.4554 3165.243 3168.2852 3168.7039 3167.5305 3165.7464 3163.1519 3158.9849 3153.7017 3150.8157 3150.0623 3150.8982 3152.6148 3154.9524 3158.9414 3164.5513 3169.7305 3175.092 3179.1328 3180.9737 3181.389 3182.276 3181.3086 3171.3792 3175.636 3172.8643 3155.0523 3152.8435 3150.2595 3150.48 3154.0125 3156.8706 3159.1155 3161.3535 3161.8035 3157.2346 3152.56 3150.446 3150.286 3148.4158 3145.0157 3145.4549 3167.9832 3165.906 3165.6863 3156.1177 3154.3853 3156.0564 3156.1355 3154.768 3153.5847 3151.315 3148.6817 3142.136 3169.0232 3139.3135 3133.2044 3106.6934 3117.0008 3121.189 3158.326 3160.3855 3160.3855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.099955 0.112449 0.124943 0.137438 0.149932 0.162426 0.174921 0.187415 0.199909 0.212404 0.224898 0.237392 0.249887 0.262381 0.274875 0.28737 0.299864 0.312358 0.324853 0.337347 0.349841 0.362336 0.37483 0.387324 0.399819 0.412313 0.424807 0.437302 0.449796 0.46229 0.474785 0.499773 0.537256 0.562245 0.574739)) (quote (1507.7561 1529.9663 1522.4555 1521.8546 1522.9861 1523.7053 1525.5383 1524.7981 1524.329 1524.9124 1524.4483 1525.3169 1527.7872 1531.5795 1534.7304 1543.4569 1536.6415 1515.4489 1520.6857 1529.6199 1534.1953 1535.4505 1530.2869 1526.0357 1524.3617 1526.1607 1527.0195 1530.707 1541.713 1548.7527 1528.181 1550.085 1545.3179 1547.846 1547.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.449796 0.46229 0.474785 0.487279 0.499773 0.537256 0.549751 0.562245 0.574739 0.587234 0.599728 0.612222 0.624717 0.637211 0.649705 0.6622 0.674694 0.687188 0.699683 0.712177 0.724671 0.737166 0.74966 0.762154 0.774649 0.787143 0.799637 0.812132 0.824626 0.83712 0.849615 0.862109 0.874603 0.887097 0.899592 0.937075 0.949569 0.974558 1.012041 1.024535 1.03703 1.049524 1.062018 1.074512 1.087007 1.099501 1.111995 1.12449 1.136984 1.149478 1.161973 1.174467 1.186961 1.199456 1.21195 1.236939 1.249433 1.261927 1.274422 1.286916 1.29941 1.311905 1.324399 1.336893 1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.436848 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252)) (quote (1737.5405 1734.7499 1736.9894 1741.927 1741.5927 1747.604 1747.6199 1744.8505 1735.103 1732.432 1734.2257 1735.3626 1733.4315 1730.4944 1729.6152 1728.1036 1724.5919 1720.5676 1715.3392 1712.8198 1711.6289 1710.8674 1712.6389 1712.2706 1708.5142 1699.1098 1693.9642 1688.7548 1686.4907 1689.0225 1691.2511 1693.6668 1695.1764 1694.5659 1692.9342 1679.353 1658.9354 1658.1286 1667.4384 1667.6917 1670.4674 1676.6862 1648.6233 1615.054 1644.7692 1691.7852 1688.7129 1686.0165 1684.102 1651.2328 1647.8969 1693.4956 1689.2865 1685.0692 1713.7545 1675.8825 1680.7568 1681.8095 1676.746 1671.723 1665.5816 1651.8965 1654.6004 1655.9905 1674.5791 1672.3602 1671.6182 1677.9043 1683.6076 1686.9974 1688.4074 1689.3433 1690.2949 1690.5719 1685.6499 1680.7715 1682.3815 1691.2958 1692.6764 1691.7345 1664.5818 1651.3921 1676.5044 1704.4277 1727.2809 1727.2272 1727.2272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388 1.361882 1.374376 1.386871)) (quote (1538.516 1535.9008 1537.5548 1537.5548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.349388 1.361882 1.374376 1.386871 1.399365 1.411859 1.424354 1.449342 1.461837 1.474331 1.486825 1.49932 1.511814 1.524308 1.536803 1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161)) (quote (1499.5161 1496.312 1477.5598 1471.4555 1495.3064 1512.509 1512.3493 1479.0106 1454.7267 1455.908 1456.5444 1455.1046 1453.0977 1453.1183 1454.9502 1476.7254 1482.2612 1489.7782 1498.2565 1499.7206 1500.0115 1498.081 1494.6769 1491.5637 1491.8638 1491.6358 1460.3828 1484.0569 1483.2249 1480.0028 1477.7394 1475.7346 1473.1179 1473.239 1478.094 1480.8671 1481.2573 1507.1326 1508.9248 1510.2059 1488.4597 1485.7684 1491.3283 1499.2401 1499.9326 1496.3248 1486.2692 1486.2692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.399365 1.411859 1.424354 1.436848 1.449342 1.461837)) (quote (1468.0379 1466.2351 1464.8754 1461.3715 1456.4714 1456.4714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.549297 1.561791 1.574286 1.58678 1.599274 1.611769 1.624263 1.636757 1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.724218 1.736712 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673)) (quote (1971.3322 1970.9177 1969.3427 1948.0936 1946.9804 1945.4869 1938.3301 1940.2627 1939.4397 1935.5557 1939.7688 1943.8931 1941.0221 1938.4988 1938.7584 1936.8807 1934.987 1938.3483 1945.5465 1957.8667 1958.727 1957.9668 1957.4437 1956.6504 1962.5545 1985.7504 1979.2377 1981.2089 1983.6189 1984.4208 1981.3696 1977.7904 1973.7119 1968.1589 1965.1692 1964.0949 1964.9957 1966.4556 1966.8944 1965.9125 1962.8026 1954.9824 1946.2598 1948.6909 1947.4677 1925.5664 1927.1898 1931.1105 1933.7147 1931.8748 1929.6419 1930.0452 1930.935 1963.3576 1962.662 1962.1161 1959.1409 1953.3429 1950.9708 1960.2018 1968.5106 1979.295 1983.0855 1983.0276 1983.0936 1991.8888 1994.092 1993.962 1987.3921 1981.1192 1980.9036 1991.3112 1994.7826 1995.861 1996.5111 1995.7202 1992.4677 1969.3219 1966.6743 1960.715 1959.7055 1969.936 1971.197 1990.8425 1995.1902 1994.1586 1992.1376 1992.7241 1995.1035 2003.8115 2003.9124 2001.3626 1997.6817 1996.4197 1991.9367 1987.0795 1995.7759 1976.5671 1998.7863 1983.3214 1976.7777 1972.8285 1969.062 1965.3279 1961.848 1958.2263 1951.9807 1942.2285 1947.9838 1947.9838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.649252 1.661746 1.67424 1.686735 1.699229 1.711723 1.749206 1.761701 1.774195 1.786689 1.799184 1.811678 1.824172 1.836667 1.849161 1.861655 1.87415 1.886644 1.899138 1.911633 1.924127 1.936621 1.949116 1.96161 1.974104 1.986599 1.999093 2.011587 2.024082 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168)) (quote (1632.8538 1627.7664 1629.0436 1631.489 1652.8233 1658.5436 1617.6344 1623.002 1621.6574 1653.5791 1651.8873 1673.5504 1654.7994 1655.3276 1656.9558 1661.8494 1663.5098 1662.0872 1657.0347 1652.3473 1649.9268 1648.6734 1648.0353 1651.1878 1653.6253 1654.0363 1660.7766 1662.862 1660.4782 1656.1228 1651.3611 1650.5497 1653.3672 1654.7955 1656.2192 1659.943 1666.2676 1673.7173 1673.8864 1675.2322 1675.1329 1669.7097 1662.7311 1655.6192 1652.4685 1652.6947 1655.4326 1659.668 1665.7617 1670.5089 1673.2339 1674.5145 1675.8627 1680.128 1681.1918 1678.5055 1676.7755 1676.9699 1680.0137 1687.2515 1702.1488 1705.3286 1709.0723 1709.8709 1706.394 1704.3963 1703.9375 1700.978 1698.0724 1717.5878 1712.1047 1713.5247 1718.7676 1733.6144 1741.6039 1745.7255 1750.506 1756.649 1762.4175 1767.0673 1771.5088 1775.7609 1780.2031 1787.5172 1797.6155 1802.734 1803.2794 1799.0783 1776.9268 1774.8063 1772.7463 1772.7938 1771.4786 1769.8145 1772.9083 1775.4613 1776.8042 1758.8773 1727.8976 1695.539 1695.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87415 1.911633 1.936621 1.96161 1.999093 2.011587 2.036576 2.04907 2.061565 2.074059 2.086553 2.099048 2.111542 2.124036 2.136531 2.149025 2.161519 2.174014 2.186508 2.199002 2.211497 2.223991 2.236485 2.24898 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261)) (quote (1544.1032 1544.8543 1545.0859 1536.5282 1534.1238 1512.229 1497.2838 1504.6655 1507.4046 1518.7764 1520.2245 1513.7827 1508.2467 1500.8526 1505.319 1515.2151 1519.2948 1527.6658 1535.3031 1524.7083 1492.7994 1483.7726 1510.8954 1509.727 1513.8176 1514.9541 1512.4404 1513.089 1506.6652 1493.9104 1490.2949 1489.4356 1489.1748 1490.181 1494.5606 1498.2186 1500.5314 1503.237 1504.5339 1505.2197 1504.7456 1503.4535 1503.8368 1504.4866 1501.477 1498.3508 1495.5944 1489.2866 1485.8748 1487.0441 1501.9011 1503.0093 1509.3455 1515.754 1510.743 1499.4805 1494.5361 1490.3187 1493.5916 1499.2267 1501.1676 1498.7396 1496.3427 1493.0515 1488.6056 1466.156 1459.952 1461.0477 1468.2534 1467.9391 1463.739 1464.0106 1469.5134 1480.6154 1487.0953 1490.4115 1486.7974 1477.1824 1474.6693 1472.2864 1468.1294 1504.5938 1529.6758 1530.6936 1531.9813 1535.5274 1542.5662 1526.8549 1499.1183 1469.7067 1465.8064 1463.7946 1465.9904 1471.3754 1477.3276 1479.996 1478.022 1473.7219 1477.9384 1484.0354 1479.915 1475.5625 1475.0482 1474.1753 1463.5177 1462.4055 1438.9196 1436.6746 1466.2155 1474.1912 1471.3157 1468.9883 1468.1932 1468.9053 1471.9276 1472.7527 1489.5215 1477.829 1483.8978 1489.2758 1492.9537 1494.7797 1501.666 1510.0647 1512.9536 1514.0061 1513.0026 1511.8925 1511.8312 1492.2503 1492.1345 1492.8888 1496.2645 1498.8993 1504.988 1508.6099 1518.0512 1488.124 1468.4716 1468.8803 1462.8108 1461.0368 1461.7566 1463.1066 1464.7688 1466.8662 1466.051 1462.0568 1454.7616 1450.4395 1448.2311 1448.5144 1453.3212 1454.0637 1454.9688 1485.7493 1485.7766 1492.5405 1500.5098 1503.7946 1508.2262 1509.9409 1503.3091 1497.6069 1501.2446 1505.7494 1506.6337 1506.5932 1512.9467 1515.6703 1510.1133 1506.2489 1476.3423 1473.2564 1472.664 1473.0571 1473.6188 1446.4104 1447.2544 1446.8903 1448.2564 1448.5453 1445.1987 1440.5707 1435.9365 1437.2946 1471.6305 1458.3302 1458.3844 1457.6962 1457.0881 1457.3256 1459.0916 1462.1897 1465.1558 1459.5173 1455.0346 1455.2494 1457.383 1457.4262 1455.6543 1454.9663 1454.9518 1455.4026 1456.866 1460.1908 1453.8385 1438.1846 1468.396 1468.0934 1469.1266 1470.5371 1472.1524 1473.6838 1474.8278 1475.4701 1475.7935 1476.0252 1476.2721 1476.6194 1477.1425 1477.752 1478.2191 1478.4481 1478.3936 1477.7861 1476.2202 1473.4866 1469.6897 1465.8807 1462.79 1460.2445 1483.4219 1483.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.236485 2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.323946 2.33644 2.348934 2.361428 2.373923 2.386417 2.398911 2.411406 2.4239 2.436394 2.448889 2.461383 2.473878 2.486372 2.498866 2.511361 2.523855 2.536349 2.548844 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.785782 3.798277 3.810771 3.823265 3.848254 3.873243 3.885737)) (quote (2338.9082 2338.6492 2339.9458 2341.7835 2343.6104 2345.8289 2350.6394 2358.5105 2366.7288 2372.903 2374.391 2372.8814 2369.691 2367.6243 2366.8067 2366.5384 2365.4473 2358.0586 2354.5742 2354.7837 2373.832 2370.9339 2364.8958 2386.2632 2369.5154 2371.1714 2367.5845 2365.7954 2366.359 2370.153 2372.9663 2374.273 2373.3333 2370.5493 2368.235 2367.6612 2367.6914 2366.6963 2365.4995 2366.9988 2369.4715 2369.262 2368.5098 2369.439 2369.6524 2363.7534 2357.62 2358.8496 2363.9453 2367.6477 2369.5908 2369.3572 2365.598 2362.1853 2360.3523 2361.1324 2363.4785 2364.9385 2363.3833 2361.5366 2362.7173 2367.441 2372.5786 2390.5794 2393.935 2393.3199 2391.8155 2390.488 2389.9187 2390.6333 2393.2007 2397.739 2403.2046 2407.2415 2404.2845 2426.0152 2398.8076 2393.5699 2412.6355 2424.1802 2394.1729 2395.381 2394.9414 2393.3098 2391.862 2391.6944 2393.105 2395.346 2397.8098 2399.8902 2400.2288 2394.7066 2390.355 2390.267 2392.555 2394.302 2395.3389 2396.0852 2396.823 2398.2075 2399.3023 2398.318 2395.7495 2393.3408 2391.3384 2390.3106 2390.4693 2390.6304 2391.561 2420.2368 2401.5337 2399.4373 2397.155 2396.5159 2397.5366 2398.6165 2398.868 2393.2664 2384.4846 2381.174 2388.2864 2392.1265 2421.3658 2420.6377 2430.6414 2454.1802 2423.6988 2414.6258 2414.6258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24898 2.261474 2.273968 2.286463 2.298957 2.311451 2.348934 2.373923 2.386417 2.411406 2.436394 2.448889 2.461383 2.498866 2.511361 2.523855 2.561338 2.573832 2.586327 2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873)) (quote (803.92194 804.0726 816.8756 828.11847 831.8606 829.3023 835.3111 834.54725 827.2316 825.53675 831.25837 815.59894 832.6965 834.51587 829.547 828.00037 856.86817 829.91224 851.8723 860.21814 868.2814 873.6926 876.64136 879.4756 882.70417 886.063 888.5682 890.3578 892.91535 896.97126 902.06867 909.617 912.4024 908.21814 923.3397 923.3397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.261474 2.273968 2.286463 2.298957)) (quote (1586.6547 1594.9124 1591.8328 1591.8328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.598821 2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619)) (quote (1070.8687 1070.9019 1070.9097 1069.8705 1067.2035 1065.1115 1065.3993 1065.7636 1056.4578 1052.4679 1052.9472 1057.8004 1067.9995 1063.658 1039.0564 1044.6463 1044.0695 1038.5701 1045.3328 1044.3777 1072.9552 1072.9552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.997733 5.022721 5.035215 5.04771 5.060204)) (quote (2613.0215 2619.8413 2628.0987 2639.189 2647.1382 2653.0076 2659.0586 2665.0728 2637.6516 2615.8206 2614.2913 2608.7776 2605.8692 2637.7022 2669.514 2677.5452 2679.8665 2701.8218 2706.2298 2711.2825 2723.095 2724.923 2683.3582 2661.922 2658.7276 2652.9253 2646.035 2639.1065 2634.4554 2615.6099 2592.9817 2574.7732 2599.3076 2580.2356 2577.3714 2579.4815 2615.4185 2607.2613 2641.3203 2653.4949 2653.756 2656.4549 2659.4065 2636.4768 2650.6697 2650.824 2653.8716 2658.5957 2663.1968 2665.566 2665.6682 2664.4824 2663.3775 2663.2906 2664.1348 2665.2188 2666.3145 2667.9458 2670.6778 2674.0469 2676.6328 2677.9715 2678.4248 2684.7034 2663.3384 2662.5974 2666.1035 2669.1096 2671.471 2673.769 2675.8435 2675.953 2674.4842 2673.3164 2674.8399 2677.142 2677.5076 2674.481 2667.975 2663.7324 2661.8272 2661.2554 2662.6006 2678.2239 2680.792 2680.4693 2674.757 2668.3904 2665.9163 2667.3626 2667.1043 2660.0008 2645.3242 2644.1043 2644.1158 2645.0764 2647.3572 2650.86 2653.6336 2655.4602 2656.962 2657.9436 2657.769 2656.0598 2652.9754 2649.7488 2647.5799 2646.691 2646.509 2646.4339 2646.7349 2647.7537 2648.9842 2649.7942 2650.4539 2651.4644 2652.8518 2654.2137 2654.7993 2654.2483 2653.1514 2652.3745 2652.208 2652.5196 2653.2268 2654.167 2654.8794 2655.1353 2655.2115 2655.2932 2654.894 2653.0415 2647.636 2639.382 2634.2364 2626.198 2617.4746 2618.2866 2592.5664 2589.5144 2590.058 2610.2342 2609.227 2638.2466 2656.375 2654.7058 2655.839 2657.6297 2658.0603 2656.4026 2654.5076 2652.663 2650.3098 2647.6692 2647.3804 2647.5347 2645.5135 2644.2967 2646.474 2648.081 2649.026 2649.693 2651.2322 2664.0337 2664.0725 2642.3289 2648.778 2649.5445 2650.75 2652.717 2652.6407 2651.3953 2648.7188 2649.0447 2652.081 2653.4832 2650.2075 2650.0408 2656.7937 2660.617 2658.6065 2655.6668 2653.1783 2654.2139 2655.5332 2658.8045 2666.2303 2668.8067 2651.77 2650.9456 2652.5862 2620.6697 2620.6697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.611315 2.62381 2.636304 2.648798 2.661293 2.673787 2.686281 2.698776 2.71127 2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043)) (quote (833.52857 831.9403 846.6986 844.9675 828.0279 845.71314 862.99994 841.4993 841.22406 835.6757 834.50104 835.12915 834.94837 833.284 832.38324 833.65107 837.6707 846.6539 851.3902 860.7655 886.0275 874.5566 876.26886 865.62635 866.8506 850.61915 841.5103 829.27765 819.8589 813.371 840.5237 810.8968 782.26355 825.56025 798.0391 797.65 797.2128 796.8692 796.88196 797.4043 798.3783 799.6235 801.4177 812.6425 818.7333 822.38855 821.6874 821.6874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.723764 2.736259 2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782)) (quote (1013.80066 1014.1538 1027.5628 1025.3308 1007.5059 1002.9613 997.4084 992.3798 988.56977 985.8999 983.9433 982.57544 981.9106 986.6435 992.2875 992.0052 988.1202 988.7201 989.7675 990.3512 989.9591 988.0194 985.87507 985.1749 984.7867 984.17316 984.7873 986.8603 987.91126 987.04145 985.50574 988.21454 991.2941 991.321 968.27204 967.7242 969.002 971.4867 970.93567 968.4344 962.9236 989.528 987.49836 987.0909 987.9191 988.5062 988.157 988.45765 989.95624 989.98346 986.991 981.99256 981.0857 981.0956 980.54395 981.1834 985.67365 991.2432 973.77094 979.5884 973.499 972.5348 973.4071 975.7318 978.9787 981.6785 983.00934 983.2496 983.12397 983.1313 983.2731 983.26075 982.9713 982.5216 981.95057 981.1678 980.37787 979.92835 979.9587 980.8571 991.5454 966.71375 942.0913 981.9882 981.9882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.736259 2.748753 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.359614 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.359161 7.371655)) (quote (867.8418 864.5657 887.5115 893.73096 891.9675 888.1489 881.55854 881.2931 903.84876 905.54377 909.8583 912.02247 912.24665 906.03907 898.904 892.1961 884.91706 878.6031 868.79035 862.26465 866.522 872.3396 874.899 876.2911 876.5845 875.12 865.7814 864.5416 868.69617 869.2931 870.90265 874.7397 875.71106 874.39075 876.1169 879.8045 882.9109 884.9782 886.5218 887.47516 887.6926 887.4268 887.2329 887.34626 887.63 887.9304 888.3041 888.7247 889.1502 889.82557 890.7908 891.1133 888.86817 881.30854 875.015 872.05036 871.05524 871.29706 873.8216 892.2197 890.53815 892.60517 901.3718 906.6116 903.9018 893.59577 892.1211 890.21076 889.27717 890.11744 890.8287 890.7959 889.81775 887.9989 886.9913 886.64484 886.8274 888.15766 890.8952 895.50434 901.3883 900.80085 880.56507 881.2653 881.7217 882.5297 883.6052 884.51087 885.12806 885.5467 885.825 885.90686 885.69806 885.1783 884.4062 883.6473 883.2671 883.2811 883.264 882.82917 882.1283 881.85267 882.3236 883.11695 883.68177 884.0303 884.3445 884.5322 884.4238 884.10187 883.85224 883.85395 884.0405 884.30854 884.6589 885.04804 885.284 885.2249 885.0212 884.9176 884.8748 884.52295 883.3925 881.3495 878.9934 886.67664 889.4947 885.0454 879.7703 880.0114 881.08136 888.2848 891.4381 885.3544 876.8166 882.0689 888.0949 886.09125 878.79627 878.42164 880.2919 882.47455 883.92347 884.0518 883.34217 882.26716 881.42017 882.23224 885.73725 888.52674 888.57966 886.56067 884.22266 882.40235 881.73456 881.7216 881.4175 879.7529 879.2597 881.5392 882.94336 881.5715 878.9621 879.873 881.7974 883.11127 883.41114 883.6144 885.74195 887.1774 885.9374 883.13324 882.0367 882.2773 883.1416 886.9664 888.9221 884.5084 877.77796 877.895 878.22126 878.9649 882.11487 884.9333 884.6113 882.4882 881.4367 882.36005 883.8579 884.3513 883.7151 883.59205 883.68134 882.30597 879.80445 882.9647 889.3999 889.6935 887.5147 886.1893 881.9322 880.0803 881.73145 884.73334 886.2989 889.05164 891.52875 892.0509 892.13184 883.8959 876.3479 871.30317 873.2598 877.6081 878.0591 875.9556 873.0805 869.7164 859.53614 856.51764 856.0543 855.0967 853.64527 843.37336 844.8093 849.3057 853.33594 851.81275 850.88337 852.92676 854.0821 853.2097 851.3018 848.09314 854.6695 861.5608 864.26276 861.76325 876.3199 907.34845 941.4171 967.0822 939.13904 893.55024 869.00544 846.52955 859.79535 862.91047 873.7857 876.9815 875.95936 871.44214 865.44935 855.12397 850.7037 850.5992 851.1079 850.61335 850.0623 847.8684 842.4875 843.35364 844.15686 857.2259 863.1371 864.33606 861.6305 882.16547 879.50696 878.28577 881.09504 892.49695 891.6399 889.0858 881.0468 880.542 885.60535 887.8823 887.3223 885.9076 885.96827 886.44275 887.3336 890.96796 892.1687 887.5775 867.71875 856.4982 885.0994 885.1055 909.8432 910.8397 886.55787 887.5145 888.22034 889.69715 894.1086 907.0249 912.0836 914.7592 910.55915 906.6695 912.4114 895.48304 873.70954 842.6255 843.6259 839.5039 813.7308 787.25354 799.1574 802.9607 807.3585 811.5197 812.57074 815.6711 818.28266 820.40827 827.0885 832.0258 832.58094 832.89496 834.8045 837.1398 836.91596 834.63105 828.0132 817.1308 813.2238 797.9607 805.91675 807.45246 805.53357 805.5923 812.32697 818.47657 829.37665 830.1615 830.49036 828.81916 827.5897 830.1745 832.43226 833.7833 834.9 837.7674 840.21784 839.992 837.5686 834.83625 832.3354 830.97876 831.60846 835.12446 836.8836 834.84656 808.17536 798.6667 795.9979 795.04346 792.0783 786.02027 781.08997 756.0588 756.0588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.748753 2.761247 2.773741 2.786236 2.79873 2.811224 2.823719 2.836213 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.298503 3.310998 3.323492 3.335986 3.360975 3.373469 3.385964 3.410952 3.423447 3.435941)) (quote (1680.1885 1677.69 1676.7864 1660.8645 1654.8043 1652.754 1651.1929 1650.4347 1652.6832 1658.855 1658.5009 1654.0282 1652.1356 1652.0599 1656.3766 1665.856 1668.1781 1675.048 1661.4779 1664.6282 1662.3905 1657.6931 1653.0022 1650.6665 1651.3019 1654.5624 1651.4428 1647.5507 1648.3666 1651.0818 1674.8829 1672.9072 1678.175 1674.6798 1670.9317 1667.5103 1665.5997 1665.7335 1680.8047 1689.3595 1686.3182 1681.628 1661.4373 1660.3965 1657.5637 1653.1235 1624.4608 1626.4712 1622.1409 1616.8252 1615.482 1615.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79873 2.811224 2.848707 2.861202 2.873696 2.88619 2.898685 2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123)) (quote (1831.3327 1814.0968 1800.7859 1803.093 1807.6935 1795.1867 1810.8904 1783.003 1777.8915 1771.6828 1766.1282 1759.8522 1750.9876 1741.0186 1729.4055 1721.0004 1719.637 1719.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834)) (quote (1973.3165 1969.8931 1961.5603 1957.2819 1951.1182 1950.3545 1954.8417 1958.4397 1954.8668 1948.9677 1948.5855 1953.6275 1955.2667 1944.4889 1944.2936 1967.513 1963.5779 1964.5541 1967.3081 1969.5587 1969.7731 1967.492 1964.5144 1963.9708 1967.0499 1967.6797 1965.1846 1961.5446 1960.7804 1962.082 1967.2971 1971.313 1974.1753 1975.408 1974.2478 1967.684 1961.4243 1965.0385 1973.5798 1977.203 1971.0496 1938.8898 1940.9718 1937.9819 1940.3063 1943.1459 1946.8777 1953.0193 1960.9794 1964.9596 1966.0332 1965.9995 1966.0186 1966.0523 1965.7899 1965.545 1965.6217 1965.6989 1965.1027 1963.3663 1960.9578 1958.6249 1955.8945 1952.0242 1950.4863 1950.7487 1951.2296 1954.0519 1934.0571 1961.9922 1961.6868 1962.3344 1968.7056 1969.5757 1966.0115 1962.287 1963.9002 1966.0691 1967.7053 1967.1525 1964.1974 1959.6467 1966.9203 1967.802 1965.1668 1966.1185 1965.8324 1963.2637 1963.4968 1966.3541 1965.962 1958.7141 1956.1133 1956.4851 1958.1332 1962.6749 1965.4832 1967.7478 1966.9168 1963.9478 1961.1118 1960.0266 1962.6216 1966.8698 1967.5763 1964.0287 1959.7496 1957.4371 1959.9533 1961.0067 1960.579 1951.1184 1950.9837 1952.316 1974.3135 1968.5359 1967.0042 1965.1527 1963.9107 1965.8505 1969.7671 1967.4701 1963.6585 1962.7582 1962.2029 1959.2868 1953.8335 1944.5479 1928.2158 1928.2377 1926.9766 1928.2201 1930.8067 1929.4938 1927.3859 1928.2489 1927.1165 1925.5238 1927.4077 1944.1815 1941.6643 1948.2485 1952.474 1953.2135 1949.7805 1944.448 1914.8134 1914.8134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.911179 2.923673 2.936168 2.948662 2.961156 2.973651 2.986145)) (quote (1917.7944 1911.9928 1909.7733 1916.4083 1896.3366 1877.2897 1877.2897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.936168 2.948662 2.961156 2.973651 2.986145 2.998639 3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.26102 3.273515 3.286009 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918)) (quote (962.36744 946.7942 944.04627 934.7629 931.1655 924.9403 901.5765 906.7694 908.0271 909.1033 907.9147 911.92475 890.84595 897.3288 897.6187 892.92695 900.8323 920.99866 921.0131 919.77076 918.39057 915.35206 925.3798 929.22687 927.09424 916.12464 926.2099 923.11054 934.74897 917.49274 937.3888 934.0249 939.0315 909.52784 910.988 907.7899 889.3735 897.89454 897.89454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.948662 2.961156 2.998639 3.011134 3.036123 3.048617 3.073606 3.0861 3.098594)) (quote (1603.1985 1604.2445 1577.9843 1562.4658 1593.0939 1630.4483 1624.2207 1565.2344 1565.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.973651 2.986145 2.998639 3.011134 3.036123 3.073606 3.0861)) (quote (795.494 779.785 778.55524 777.3877 799.61835 766.78406 766.78406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.998639 3.011134 3.023628 3.036123 3.048617 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.236032 3.248526 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.310544 4.323039 4.335533 4.348027 4.360521)) (quote (1776.253 1758.2666 1767.4185 1774.0189 1775.43 1744.8644 1743.3726 1768.781 1769.7002 1770.8439 1768.7955 1761.8014 1754.3805 1756.7896 1761.4213 1765.8328 1769.36 1772.7086 1775.5382 1776.973 1776.886 1776.03 1775.3153 1775.2546 1775.7919 1776.5585 1777.4336 1778.6249 1780.4186 1782.6348 1784.1732 1783.9098 1782.0679 1779.9959 1778.84 1778.229 1777.0187 1775.5764 1775.5582 1775.1941 1773.6521 1773.3861 1776.7322 1779.255 1778.1759 1775.7127 1776.0629 1779.537 1783.428 1785.2745 1785.3565 1784.4337 1783.0178 1781.6185 1773.1774 1790.8607 1768.255 1773.0597 1775.5626 1768.4736 1787.2199 1762.3746 1762.4321 1762.8394 1763.3295 1764.2045 1765.675 1767.4866 1769.1475 1770.5881 1771.6664 1771.9094 1771.1621 1769.7749 1768.2969 1767.0657 1766.152 1765.4008 1764.4757 1763.5342 1763.5154 1764.7249 1766.0647 1766.676 1767.0757 1767.9026 1769.1141 1770.0437 1770.0872 1769.3285 1768.5137 1768.2885 1768.5895 1769.059 1769.4718 1769.7189 1769.716 1769.5227 1769.405 1769.4812 1769.1995 1767.5886 1762.8611 1754.1607 1749.6174 1750.1819 1739.6318 1718.376 1718.376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.011134 3.023628 3.036123 3.048617 3.061111 3.073606 3.0861 3.098594 3.111089 3.123583 3.136077 3.148571 3.161066 3.17356 3.186054 3.211043 3.223537 3.236032 3.26102 3.273515 3.286009 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447)) (quote (1701.2466 1694.1668 1694.435 1701.7769 1706.9054 1716.1002 1720.9022 1723.7966 1721.3513 1724.0734 1728.8905 1730.2737 1711.9439 1714.6213 1718.8368 1718.0073 1711.1843 1705.4396 1740.6914 1721.3392 1721.9409 1747.6969 1732.4475 1729.6841 1735.369 1742.8779 1740.045 1742.9053 1718.2846 1719.935 1719.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.048617 3.061111 3.0861 3.111089 3.123583 3.136077 3.161066 3.17356 3.186054 3.198549 3.211043 3.223537 3.26102 3.273515 3.286009 3.298503 3.310998 3.323492 3.335986 3.348481 3.360975 3.373469 3.385964 3.398458 3.410952 3.423447 3.435941 3.448435 3.46093 3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.585873 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.710816 3.723311 3.735805 3.748299 3.760794 3.773288 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.185601 4.198095 4.210589 4.223084 4.235578 4.248073 4.260567 4.273061 4.285555 4.29805 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007)) (quote (719.4405 718.0291 735.6618 753.74555 770.874 768.60187 794.16736 788.69526 789.7073 796.8471 797.99817 801.39545 791.92597 801.1334 807.0256 810.8296 812.071 811.573 803.09607 797.68964 794.74415 793.0956 792.6232 793.4064 795.0204 793.9965 794.2458 796.65986 798.93714 798.1332 797.407 797.9086 799.6346 802.6559 806.8293 809.1669 786.48114 791.4602 794.0809 796.0375 798.4814 801.85547 804.7164 804.93335 803.5075 802.74567 802.4647 803.5123 810.3671 837.92115 835.2143 839.76874 822.81434 791.4365 789.02387 788.502 788.4215 788.6533 789.2016 789.7557 790.10486 790.53534 791.7664 793.6866 795.1839 795.498 795.15754 794.8951 793.4211 790.0996 788.9902 797.39704 802.86664 797.0617 772.2959 771.9738 774.02527 786.83454 789.31275 793.4143 796.4904 795.4522 789.70417 786.6563 787.31665 790.79834 792.1015 790.71735 789.0428 788.27857 787.39924 785.48676 783.17865 781.5267 776.6456 777.1721 765.62934 769.88587 789.7194 789.44837 788.7378 788.4087 788.4295 788.7999 789.4043 789.9486 790.25086 790.4279 790.6869 790.99286 791.1883 791.25074 791.1987 790.9616 790.58155 790.38617 790.7321 791.92695 794.1744 797.0916 798.46845 797.71814 796.23 796.73835 798.0185 797.51685 793.9476 792.44147 792.85346 792.68165 791.1436 788.7955 790.426 792.591 793.24805 791.5786 786.2812 781.9997 782.12024 782.95057 788.1314 788.45984 786.5338 776.6553 745.7378 739.9233 739.3497 740.39527 740.52594 739.90497 736.7399 731.04346 728.84015 729.82685 732.77765 734.89417 736.2949 737.82026 738.8341 738.76667 737.84357 736.86646 736.3708 736.7745 738.58674 740.8788 741.2064 739.02124 736.22895 734.9136 734.9739 735.5394 735.8842 736.1047 736.854 739.4292 741.30524 740.56385 738.5576 737.9459 738.70215 739.9952 741.3301 740.3339 737.13117 735.9253 738.0421 741.7081 745.29444 746.0801 741.15235 737.49305 737.5671 737.3482 735.2252 735.4752 741.332 741.63166 753.06214 757.9225 758.27704 755.3471 748.6536 741.09436 733.9454 736.11316 734.8654 730.84607 725.431 729.3384 754.5772 783.2337 812.86255 812.3674 812.7733 813.0331 814.76905 817.7624 818.6769 817.88984 810.2458 809.7655 813.9663 818.29285 816.6532 812.16376 805.0853 800.54297 797.9141 795.53577 791.3998 781.84205 779.97315 780.40235 781.29175 782.32496 787.3015 789.4003 788.52045 784.11615 775.38764 767.7645 765.002 765.8239 778.5412 812.31586 848.52234 819.6607 816.8945 822.7876 829.1808 832.51227 832.643 831.84607 831.3576 855.7721 850.98554 850.5444 854.45325 863.39216 870.2746 865.4896 864.2396 862.7945 856.8686 852.03315 847.5343 854.4985 859.5554 871.1058 872.015 873.74866 873.91565 873.91565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46093 3.498413 3.510907 3.523401 3.535896 3.54839)) (quote (991.88617 1004.7081 1004.0981 1015.3426 1034.051 1034.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.473424 3.485918 3.498413 3.510907 3.523401 3.535896 3.54839 3.560884 3.573379 3.598367 3.610862 3.623356 3.63585 3.648345 3.660839 3.673333 3.685828 3.698322 3.735805 3.748299 3.760794 3.773288)) (quote (1737.1134 1725.7908 1726.2008 1730.0604 1729.7728 1729.2634 1729.48 1719.3899 1717.8922 1735.665 1754.6126 1743.8076 1741.3865 1741.782 1742.3624 1739.6709 1730.6399 1729.7798 1737.5211 1751.2731 1764.624 1764.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.610862 3.623356 3.63585 3.648345 3.673333 3.685828 3.710816 3.723311 3.735805 3.748299 3.760794 3.798277 3.810771 3.823265 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068 4.023175 4.035669 4.048163 4.060658 4.073152 4.085646 4.098141 4.110635 4.123129 4.135623 4.148118 4.160612 4.173107 4.198095 4.210589 4.223084 4.260567 4.273061 4.285555 4.310544 4.323039 4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.497959 4.522948 4.535442 4.547936 4.560431 4.572925 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921)) (quote (1271.2116 1275.9684 1286.7512 1281.421 1279.5814 1304.4691 1276.053 1275.1515 1262.802 1259.9458 1259.2025 1268.7166 1265.607 1263.4025 1262.2208 1254.3756 1248.1283 1239.9209 1241.6918 1246.9063 1252.4933 1253.2405 1280.4464 1285.6077 1288.7733 1290.2929 1290.4768 1291.3836 1294.6633 1293.8099 1316.0269 1315.6118 1300.2201 1298.2974 1298.3579 1299.3399 1299.3333 1300.8327 1311.4282 1310.9765 1307.4678 1315.4719 1319.8589 1284.975 1285.8893 1283.491 1262.6784 1256.4389 1256.524 1259.0238 1243.9729 1243.5016 1242.8717 1234.3063 1231.1211 1231.97 1236.1245 1239.3506 1242.2774 1245.8814 1223.8773 1245.0917 1244.3104 1244.4989 1270.5076 1269.6643 1284.4779 1279.2374 1274.7345 1275.0985 1271.1762 1262.7654 1262.4312 1264.9697 1266.9408 1267.2282 1264.683 1261.765 1262.31 1282.9061 1284.232 1284.7578 1311.8388 1314.3668 1316.2968 1317.1336 1314.1215 1308.7498 1306.0845 1302.7739 1313.094 1312.7929 1306.8497 1300.9469 1302.7149 1304.1449 1305.4985 1306.8901 1308.2382 1309.3209 1310.0353 1310.5198 1311.0952 1311.9757 1312.9694 1313.6594 1313.8893 1313.8294 1313.6419 1313.3965 1313.1663 1312.9583 1312.7033 1312.4183 1312.2225 1312.2031 1312.3152 1312.4126 1312.4244 1312.4531 1312.6041 1312.8097 1312.8864 1312.7582 1312.5516 1312.4558 1312.5188 1312.6026 1312.507 1312.1461 1311.6207 1311.1607 1310.979 1311.0991 1311.3279 1311.4689 1311.4961 1311.5016 1311.6104 1311.8961 1312.2312 1312.3292 1311.8973 1310.6649 1308.6399 1306.3557 1303.9259 1299.2505 1296.8937 1300.1098 1272.6968 1272.6968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.748299 3.760794 3.785782 3.798277 3.810771 3.823265 3.83576 3.848254 3.860748 3.873243 3.885737 3.898231 3.910726 3.92322 3.935714 3.948209 3.960703 3.973197 3.985692 3.998186 4.01068)) (quote (1010.97577 1012.22614 983.4517 981.8121 980.6479 980.46857 980.57184 981.0853 981.5374 981.74006 982.1284 982.6929 982.12854 980.2988 978.846 977.4739 974.43586 966.3896 964.03986 967.2161 967.2161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.235578 4.260567 4.285555 4.29805 4.310544 4.335533 4.348027 4.360521 4.38551 4.398005 4.410499 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297)) (quote (1798.9513 1810.4127 1819.2617 1806.799 1780.2146 1797.637 1822.2799 1842.4956 1769.7637 1750.599 1745.1635 1767.7048 1769.0077 1770.6397 1770.7395 1770.303 1770.652 1770.2512 1768.8151 1768.6494 1769.6065 1769.9523 1770.3798 1772.0169 1773.4111 1775.954 1751.5681 1761.6935 1763.3093 1764.2837 1764.9545 1764.2802 1762.1366 1760.123 1764.8916 1767.0532 1765.6921 1765.4337 1768.5596 1773.1998 1773.2627 1769.6206 1765.2924 1766.1812 1768.4154 1770.1614 1771.8734 1772.8483 1770.5344 1763.6371 1762.3599 1762.7899 1765.9988 1768.3596 1768.9783 1768.6257 1770.4848 1772.9142 1771.6511 1766.6889 1765.2496 1764.3305 1762.3091 1759.1223 1754.3191 1732.5458 1760.1371 1761.8505 1762.744 1765.3043 1774.6113 1780.3347 1802.9503 1799.1841 1801.275 1806.0264 1816.5852 1780.0744 1780.6422 1777.1334 1769.389 1762.1295 1760.9144 1767.042 1785.2141 1789.5851 1792.0426 1795.868 1798.4258 1798.5839 1799.4597 1802.7992 1801.535 1795.0714 1791.9107 1814.5513 1817.4437 1817.814 1815.2405 1806.6997 1804.2587 1805.8908 1805.9082 1800.2448 1790.935 1771.0001 1752.4437 1775.2523 1755.5392 1758.3139 1759.2604 1759.4791 1759.001 1758.4822 1758.5994 1759.1356 1759.5414 1759.6347 1759.6455 1759.866 1760.281 1760.587 1760.5941 1760.4445 1760.4125 1760.5663 1760.7337 1760.8255 1760.9463 1761.0924 1761.0748 1760.8084 1760.4122 1760.0706 1759.9188 1759.9739 1760.1109 1760.1901 1760.154 1760.027 1759.9248 1759.9682 1760.1721 1760.4597 1760.724 1760.85 1760.7999 1760.6973 1760.6834 1760.7601 1760.8648 1761.0048 1761.1886 1761.2899 1761.1644 1760.862 1760.5755 1760.4367 1760.4816 1760.623 1760.6145 1760.3366 1759.9932 1759.8253 1759.8624 1760.0584 1760.4141 1760.8798 1761.2687 1761.382 1761.2478 1761.1034 1761.1144 1761.2156 1761.3023 1761.4246 1761.7117 1762.124 1762.4271 1762.482 1762.4208 1762.4132 1762.4837 1762.6139 1762.8314 1763.1222 1763.3574 1763.3651 1763.2078 1763.1727 1763.4025 1763.7499 1764.1093 1764.4705 1764.7739 1764.967 1765.0809 1765.1455 1765.063 1764.6819 1764.1356 1763.8338 1763.895 1764.0357 1764.1702 1764.4489 1764.9249 1765.6381 1766.7617 1768.4891 1770.7759 1772.577 1772.7859 1771.4215 1769.8665 1769.0431 1769.2442 1773.6011 1755.0398 1729.3723 1729.3723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.310544 4.323039 4.335533 4.348027)) (quote (865.6873 864.2679 873.6406 873.6406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533 4.348027 4.360521 4.373016 4.398005 4.410499 4.422993 4.435488)) (quote (1763.429 1767.7185 1769.3598 1769.4441 1771.1867 1771.6914 1769.9805 1769.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.335533 4.348027 4.360521 4.373016 4.38551 4.398005 4.410499 4.422993 4.435488 4.447982 4.460476 4.47297 4.485465 4.497959 4.510454 4.522948 4.535442 4.547936 4.560431 4.572925 4.58542 4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766)) (quote (1569.9312 1571.8635 1572.839 1573.9213 1575.025 1576.0726 1577.1769 1578.4755 1579.758 1580.5869 1580.9517 1581.2634 1581.7041 1582.0608 1582.1184 1581.8654 1581.3753 1580.7025 1579.9057 1579.1076 1579.1698 1581.6489 1583.9772 1584.0133 1581.1731 1578.6995 1577.9877 1577.8176 1577.1228 1575.8901 1575.35 1576.2745 1578.0182 1579.5604 1581.1289 1582.7092 1583.4473 1583.2157 1582.6607 1582.1172 1581.642 1581.5065 1582.0631 1582.8032 1581.7022 1574.5143 1588.248 1588.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.597914 4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261)) (quote (737.73456 737.9223 735.83417 735.27765 735.2021 735.6006 736.2728 737.01374 737.56684 737.86207 738.023 738.12665 738.21454 738.36847 738.6465 738.9926 739.286 739.43976 739.3895 739.00055 738.1279 736.62714 734.63984 732.9024 732.1679 739.2836 747.70606 747.70606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.610408 4.622902 4.635397 4.647891 4.660386 4.67288 4.685374 4.697868 4.710363 4.722857 4.735352 4.747846 4.76034 4.772834 4.785329 4.797823 4.810318 4.822812 4.835306 4.8478 4.860295 4.872789 4.885283 4.897778 4.910272 4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.146758 7.159252 7.171746 7.18424)) (quote (2192.461 2198.97 2201.1485 2203.4107 2205.825 2208.2127 2210.4358 2212.294 2213.645 2214.5616 2214.9556 2214.9492 2215.107 2215.711 2216.471 2217.1287 2217.6704 2217.8709 2217.1892 2215.3955 2212.6477 2202.7962 2222.059 2222.0789 2207.4837 2208.3553 2204.8667 2202.0948 2201.4087 2199.198 2196.7039 2198.7295 2212.8194 2215.449 2215.8609 2215.0205 2214.5208 2214.4097 2214.0926 2213.5823 2213.9444 2219.794 2223.3782 2222.1275 2213.872 2206.1394 2202.7447 2201.8875 2203.4773 2208.213 2212.1963 2212.9146 2205.0132 2195.7969 2195.7854 2211.3762 2213.83 2215.2725 2215.598 2214.9502 2216.0457 2217.8828 2216.5987 2211.1878 2208.833 2207.6148 2204.5598 2202.9658 2203.2234 2204.1482 2203.0017 2201.2383 2199.0027 2195.4998 2189.026 2187.5054 2191.031 2196.1402 2195.8274 2192.5457 2168.141 2172.878 2173.824 2205.6033 2216.59 2218.426 2219.613 2214.3843 2212.0218 2213.8008 2239.4502 2238.515 2236.0794 2259.118 2264.008 2263.0906 2262.3863 2269.7464 2245.5955 2246.1717 2248.25 2250.5613 2251.7112 2251.7149 2250.7515 2247.3377 2239.2022 2226.8794 2215.303 2212.3919 2216.491 2196.1616 2198.2879 2228.001 2232.3255 2237.3968 2236.7544 2232.9544 2232.669 2238.833 2242.7986 2242.5345 2242.5108 2244.2403 2243.6785 2239.9773 2238.877 2245.7195 2264.3626 2264.8557 2257.8684 2244.784 2237.927 2233.8445 2237.26 2239.518 2235.8384 2231.333 2226.994 2223.8418 2220.4803 2214.957 2211.94 2212.4439 2214.6077 2220.1443 2235.1314 2237.993 2235.4029 2216.1382 2220.8316 2227.192 2229.5533 2255.8465 2274.621 2273.9358 2275.872 2283.201 2283.6072 2281.5572 2280.8325 2284.435 2284.153 2261.281 2267.9112 2268.8553 2260.4593 2255.8977 2246.2403 2242.0242 2243.5452 2243.2854 2237.6275 2224.8675 2222.4156 2216.1665 2208.8997 2210.8894 2214.2693 2218.2595 2222.4634 2225.2227 2227.9143 2232.786 2204.8555 2207.4693 2212.9463 2207.7679 2188.3936 2194.0637 2198.6924 2202.2263 2202.9002 2203.7368 2201.9253 2201.7703 2201.694 2221.575 2224.7796 2228.659 2212.488 2202.8994 2192.916 2192.916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.910272 4.922766 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229)) (quote (1955.2651 1965.0512 1955.9384 1960.8099 1957.4959 1957.541 1958.7255 1960.6242 1962.722 1964.489 1965.6643 1966.3312 1966.926 1967.7772 1968.8237 1969.7478 1970.239 1970.2395 1970.0575 1970.0387 1970.0792 1969.8239 1969.2517 1968.7257 1968.5359 1968.6209 1968.7363 1968.6956 1968.5523 1968.5839 1968.9032 1969.2294 1969.2254 1968.9392 1968.6953 1968.6846 1968.8045 1968.8372 1968.6316 1968.1577 1967.507 1966.9519 1966.7777 1966.9734 1967.2307 1967.3088 1967.22 1967.1176 1967.2128 1967.6293 1968.1314 1968.2769 1967.7908 1966.5682 1964.7689 1963.004 1964.7315 1947.3424 1972.5794 1969.3903 1968.0195 1968.4021 1968.8335 1968.3977 1967.1433 1966.3383 1966.6386 1967.1729 1967.1266 1966.8322 1966.9785 1967.4933 1967.958 1968.0278 1967.4302 1966.6533 1966.6062 1967.2503 1968.0657 1967.6508 1966.1312 1964.4428 1964.3617 1965.7723 1967.8989 1970.0563 1970.1093 1969.2555 1968.4319 1967.3862 1966.6618 1968.2874 1970.4502 1970.3926 1967.1968 1964.8598 1964.6351 1966.4566 1970.2808 1970.3998 1991.6996 1958.0869 1954.2722 1951.4038 1948.3329 1939.866 1932.2575 1925.4711 1920.5313 1917.8591 1916.4484 1919.3645 1931.222 1934.1282 1933.0278 1933.4559 1963.3379 1961.6731 1967.7166 1970.1698 1970.8108 1979.9551 1986.2744 2015.5056 2014.8424 2015.9358 2045.839 2043.9917 2043.3082 2040.6433 2068.846 2066.025 2063.567 2067.7544 2072.2085 2074.36 2072.623 2071.8352 2073.4478 2075.231 2077.3743 2091.5679 2098.44 2109.7046 2091.3523 2093.6807 2071.4387 2069.5364 2091.6199 2078.6968 2074.9253 2054.7122 2050.9947 2033.6322 2033.8701 2029.3754 2025.4107 2022.6626 2024.3106 2026.1299 2022.8333 2018.4524 2018.4649 2020.3862 2023.0835 2030.7594 2035.3723 2036.4823 2030.3754 2021.396 1992.96 1992.7968 1992.9169 1964.7808 1972.3795 1975.1578 1976.619 1978.3706 1981.4381 1983.0018 1984.4496 1987.2594 1987.2594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766 4.935261 4.947755 4.960249 4.972744 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.622449 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.422086 6.447075 6.472064 6.497052 6.509546 6.547029 6.559524 6.572018 6.597007 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.484104)) (quote (1397.1781 1398.3085 1406.7887 1407.9015 1389.4622 1359.8829 1364.7814 1365.2949 1355.5355 1364.4204 1359.1537 1387.9303 1366.153 1359.9485 1360.7904 1384.2776 1388.4646 1358.9241 1350.7409 1349.5848 1361.3023 1367.0054 1349.9694 1358.4121 1351.4727 1355.85 1344.741 1356.1764 1349.1102 1355.496 1364.7553 1356.4208 1376.8403 1356.339 1349.0792 1356.8573 1345.7059 1355.9948 1346.2976 1355.6779 1348.4647 1356.111 1365.1279 1357.4546 1353.6397 1347.9712 1356.4815 1365.4907 1356.9974 1367.3327 1365.8163 1355.3688 1351.6522 1370.2106 1340.1853 1319.7029 1319.3358 1311.6453 1310.9566 1309.8394 1309.397 1309.9077 1310.8931 1311.5995 1311.4246 1310.7642 1311.5875 1312.394 1293.2625 1307.5296 1306.7429 1307.2449 1308.5051 1310.2067 1311.3855 1311.7296 1311.7396 1311.8778 1311.4049 1309.73 1308.4312 1308.2444 1307.5062 1304.1339 1295.0219 1294.438 1298.17 1304.1007 1306.6764 1309.0233 1311.6636 1312.9004 1311.477 1309.0309 1308.2794 1313.731 1317.0859 1315.9054 1310.3432 1308.9806 1308.8377 1307.554 1306.6328 1278.6552 1279.5281 1281.416 1278.7059 1277.8191 1280.769 1282.6167 1310.0868 1311.7953 1311.5245 1308.1636 1304.6143 1274.796 1282.031 1281.2233 1288.5838 1284.4995 1282.0715 1277.6295 1283.8495 1286.8107 1266.7974 1248.5579 1252.9152 1253.5258 1253.9932 1256.4268 1259.4979 1262.6397 1274.6881 1273.7803 1272.5164 1266.3176 1266.8682 1258.7324 1254.3097 1244.1882 1243.3091 1247.7538 1219.8793 1214.358 1220.3607 1213.3224 1219.7792 1242.3591 1258.7799 1254.9058 1259.2337 1262.7752 1242.2308 1211.0964 1213.1384 1211.996 1213.9276 1220.5464 1231.072 1224.8626 1231.0028 1256.7308 1258.3916 1259.6615 1260.3543 1262.6033 1268.7955 1278.7334 1278.4331 1273.4347 1295.2847 1292.7435 1290.8723 1290.723 1296.1791 1305.077 1311.2766 1320.962 1323.8156 1343.731 1340.4107 1340.1004 1345.0918 1347.3898 1349.9739 1354.6605 1358.2726 1361.3536 1365.6267 1361.9514 1375.4357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.922766 4.935261 4.947755 4.960249 4.972744 4.985238 4.997733 5.010227 5.022721 5.035215 5.04771 5.060204 5.072699 5.085193 5.097687 5.110181 5.122676 5.13517 5.147665 5.160159 5.172653 5.185147 5.197642 5.210136 5.222631 5.235125 5.247619 5.260113 5.272608 5.285102 5.297596 5.310091 5.322585 5.335079 5.347574 5.360068 5.372562 5.385056 5.397551 5.410045 5.42254 5.435034 5.447528 5.460022 5.472517 5.485011 5.497506 5.51 5.522494 5.534989 5.547483 5.559978 5.572472 5.584966 5.59746 5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.459116 7.47161 7.484104)) (quote (676.55164 671.20685 664.3467 654.5488 655.0631 654.5961 654.17206 654.0291 654.1877 654.59626 655.1098 655.50415 655.71625 655.8953 656.1881 656.57367 656.8754 656.96015 656.9034 656.8576 656.83936 656.74567 656.5572 656.4032 656.38074 656.4232 656.42945 656.4027 656.3885 656.394 656.40247 656.39277 656.3567 656.3393 656.3886 656.4769 656.5297 656.4999 656.3742 656.1581 655.8769 655.6013 655.44025 655.4459 655.5489 655.62934 655.6296 655.5842 655.58545 655.7045 655.89777 656.00635 655.8555 655.39887 655.0326 655.69965 662.00635 665.04944 662.858 657.40015 656.123 655.8434 656.16895 656.49176 656.42554 656.69977 657.73645 658.4975 658.12964 656.9603 656.22236 656.2866 656.42646 656.1908 656.01246 656.68836 657.72535 657.8308 657.15577 657.2701 657.69654 656.6202 653.6395 650.1992 647.225 643.4303 642.0553 644.6148 651.3115 654.87 657.3391 658.33814 658.375 658.25824 658.7385 659.35614 658.4513 655.97547 654.8532 655.985 657.29377 657.2036 655.8398 654.5752 653.55835 652.8057 653.19227 655.64576 657.81714 658.20704 655.1887 652.5321 652.6397 656.1357 658.1272 658.4606 658.3175 654.3977 653.56244 652.1784 654.69806 657.22547 658.32044 656.82624 653.12476 652.3066 653.84644 659.8063 660.8455 660.94306 660.9684 660.34345 654.07386 652.8658 653.2997 658.8352 659.06116 652.0683 651.5496 651.23267 643.0622 623.45166 623.19257 623.61347 644.30036 654.0804 653.2412 653.3775 655.56495 660.2257 659.2462 655.6388 655.4965 655.9169 655.1868 655.0616 658.63184 660.926 653.438 633.6694 624.1287 624.2709 624.4593 625.00995 624.9606 633.82306 644.13807 644.4268 644.37915 634.2573 624.5341 624.2242 623.667 623.89795 624.3392 632.6687 654.20185 671.228 693.1753 702.7399 717.61817 713.97205 714.13935 719.4738 724.9563 728.3678 731.67084 733.9956 733.0384 709.25257 706.9408 705.7445 701.3511 696.66034 697.01484 695.39924 689.80494 687.56745 689.5453 697.90784 698.0039 697.34144 697.3501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.609955 5.622449 5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.459116 7.47161 7.484104)) (quote (608.44477 602.11054 596.4314 591.423 588.4703 587.3865 587.19367 587.1299 586.93396 586.69245 586.5089 586.4115 586.3896 586.46216 586.62824 586.801 586.90155 586.9403 586.919 586.8385 586.78547 586.82886 586.916 586.98035 587.0219 587.0428 587.0174 586.93915 586.8284 586.72236 586.67096 586.6829 586.70154 586.68634 586.65027 586.6178 586.6173 586.6776 586.786 586.89765 586.98066 587.0146 586.9982 586.97175 586.9767 587.0013 587.0167 587.0394 587.0952 587.1449 587.1204 587.0171 586.8935 586.8148 586.8195 586.87354 586.8698 586.75696 586.6194 586.56617 586.61487 586.73 586.8855 587.0585 587.2008 587.2587 587.2323 587.181 587.1524 587.15314 587.19587 587.309 587.4791 587.6365 587.71424 587.7069 587.6645 587.64136 587.6574 587.70447 587.76624 587.82465 587.8563 587.84754 587.819 587.8104 587.8326 587.8678 587.907 587.9523 588.0035 588.0554 588.09644 588.1188 588.12195 588.1034 588.0758 588.0708 588.0908 588.1053 588.12574 588.20795 588.3792 588.6209 588.88416 589.09675 589.2111 589.2517 589.2843 589.34656 589.42615 589.4883 589.5153 589.52076 589.5212 589.50776 589.44806 589.29877 589.0321 588.66694 588.258 587.8279 587.36567 586.97437 587.0473 588.3361 590.96485 592.7035 592.31525 590.6636 589.6306 589.3049 589.3057 589.51624 589.77625 589.84455 589.5023 588.82917 588.2418 587.9725 587.8699 587.7706 587.71485 587.9836 589.2792 591.3928 592.233 591.2403 589.87226 589.28125 589.19855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.634943 5.647438 5.659932 5.672426 5.684921 5.697415 5.709909 5.722404 5.734898 5.747392 5.759887 5.772381 5.784875 5.797369 5.809864 5.822358 5.834853 5.847347 5.859841 5.872335 5.88483 5.897324 5.909819 5.922313 5.934807 5.947301 5.959796 5.97229 5.984785 5.997279 6.009773 6.022267 6.034762 6.047256 6.059751 6.072245 6.084739 6.097234 6.109728 6.122222 6.134717 6.147211 6.159705 6.1722 6.184694 6.197188 6.209682 6.222177 6.234671 6.247166 6.25966 6.272154 6.284648 6.297143 6.309637 6.322132 6.334626 6.34712 6.359614 6.372109 6.384603 6.397098 6.409592 6.422086 6.43458 6.447075 6.459569 6.472064 6.484558 6.497052 6.509546 6.522041 6.534535 6.547029 6.559524 6.572018 6.584512 6.597007 6.609501 6.621995 6.63449 6.646984 6.659479 6.671973 6.684467 6.696961 6.709456 6.72195 6.734445 6.746939 6.759433 6.771927 6.784422 6.796916 6.809411 6.821905 6.834399 6.846893 6.859388 6.871882 6.884377 6.896871 6.909365 6.921859 6.934354 6.946848 6.959342 6.971837 6.984331 6.996825 7.00932 7.021814 7.034308 7.046803 7.059297 7.071791 7.084286 7.09678 7.109274 7.121768 7.134263 7.146758 7.159252 7.171746 7.18424 7.196735 7.209229 7.221724 7.234218 7.246712 7.259206 7.271701 7.284195 7.29669 7.309184 7.321678 7.334172 7.346667 7.359161 7.371655 7.38415 7.396644 7.409138 7.421633 7.434127 7.446621 7.459116 7.47161 7.484104)) (quote (1176.1157 1177.9264 1176.4464 1175.4909 1174.7506 1174.1133 1173.57 1173.3003 1173.3113 1173.4492 1173.5635 1173.6356 1173.7528 1173.906 1173.9608 1173.8705 1173.7041 1173.5532 1173.4993 1173.563 1173.7019 1173.874 1174.0194 1174.0505 1173.9227 1173.6862 1173.4323 1173.2393 1173.1576 1173.1696 1173.1995 1173.209 1173.2247 1173.2731 1173.3629 1173.4976 1173.6572 1173.8097 1173.9203 1173.9462 1173.8969 1173.8526 1173.8619 1173.8947 1173.9295 1173.9962 1174.0816 1174.1126 1174.046 1173.9092 1173.7656 1173.7014 1173.7588 1173.8474 1173.8165 1173.6401 1173.443 1173.3457 1173.3882 1173.5643 1173.834 1174.1205 1174.3237 1174.3629 1174.2686 1174.167 1174.1399 1174.1825 1174.2843 1174.4556 1174.6896 1174.9309 1175.0938 1175.1347 1175.097 1175.0704 1175.1293 1175.2836 1175.4757 1175.6367 1175.7227 1175.7046 1175.6201 1175.5735 1175.6173 1175.7125 1175.8118 1175.9055 1176.003 1176.1018 1176.1813 1176.2288 1176.2483 1176.2351 1176.2058 1176.2138 1176.2686 1176.3303 1176.4306 1176.6592 1177.0372 1177.4927 1177.9209 1178.2079 1178.3009 1178.3198 1178.4567 1178.7499 1179.0756 1179.3251 1179.4691 1179.5151 1179.508 1179.5012 1179.5576 1179.6924 1179.5923 1178.7354 1177.0014 1175.1395 1174.2487 1175.1073 1177.2334 1178.4934 1178.2748 1177.75 1177.663 1177.9122 1178.3263 1178.7554 1179.1162 1179.3748 1179.4098 1179.1135 1178.6503 1178.3889 1178.8505 1181.3231 1185.0663 1185.562 1182.561 1179.6046 1178.4636 1177.5751 1176.2135 1173.2876 1169.3338 1167.4528 1167.6936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) nil "extracting-partials-to-bpf-lib"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 229 590) (om-make-point 51 30) (list 100) "(100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 590) (om-make-point 62 30) (list 0 100) "(0 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 133 620) (om-make-point 228 76) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((9984) (9988) (9994) (10002) (10006) (10010) (10014) (10018) (10000) (9986) (9986) (9982) (9980) (10000) (10022) (10026) (10028) (10042) (10044) (10048) (10056) (10056) (10030) (10016) (10014) (10010) (10006) (10002) (9998) (9986) (9970) (9958) (9976) (9962) (9960) (9962) (9986) (9980) (10002) (10010) (10010) (10012) (10014) (10000) (10008) (10010) (10012) (10014) (10018) (10018) (10018) (10018) (10018) (10018) (10018) (10018) (10020) (10020) (10022) (10024) (10026) (10026) (10026) (10032) (10018) (10016) (10018) (10020) (10022) (10024) (10026) (10026) (10024) (10024) (10024) (10026) (10026) (10024) (10020) (10018) (10016) (10016) (10016) (10026) (10028) (10028) (10024) (10020) (10018) (10020) (10020) (10016) (10006) (10004) (10004) (10006) (10006) (10010) (10010) (10012) (10014) (10014) (10014) (10012) (10010) (10008) (10006) (10006) (10006) (10006) (10006) (10008) (10008) (10008) (10008) (10010) (10010) (10012) (10012) (10012) (10010) (10010) (10010) (10010) (10010) (10012) (10012) (10012) (10012) (10012) (10012) (10010) (10006) (10002) (9998) (9992) (9988) (9988) (9970) (9968) (9968) (9982) (9982) (10000) (10012) (10012) (10012) (10014) (10014) (10012) (10012) (10010) (10008) (10006) (10006) (10006) (10006) (10004) (10006) (10008) (10008) (10008) (10010) (10018) (10018) (10004) (10008) (10008) (10008) (10010) (10010) (10010) (10008) (10008) (10010) (10010) (10008) (10008) (10012) (10016) (10014) (10012) (10010) (10012) (10012) (10014) (10020) (10020) (10010) (10010) (10010) (9990) (9990))) :lonset (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200 19300)) :ldur (quotelvel (quoteloffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.17 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :microplayer) 1 nil 1000 0 (om-make-point 726 322) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 129 493) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 91 431) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 72 25) (quote "<= bpf") "" (om-make-point 195 524) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 72 25) (quote "<= bpf-lib") "" (om-make-point 238 236) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH 2" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 254 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 21 534) (om-make-point 168 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 3100 3200 3300 3400 3500 3600 3700 3800 3900 4000 4100 4200 4300 4400 4500 4600 4700 4800 4900 5000 5100 5200 5300 5400 5500 5600 5700 5800 5900 6000 6100 6200 6300 6400 6500 6600 6700 6800 6900 7000 7100 7200 7300 7400 7500 7600 7700 7800 7900 8000 8100 8200 8300 8400 8500 8600 8700 8800 8900 9000 9100 9200 9300 9400 9500 9600 9700 9800 9900 10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 11100 11200 11300 11400 11500 11600 11700 11800 11900 12000 12100 12200 12300 12400 12500 12600 12700 12800 12900 13000 13100 13200 13300 13400 13500 13600 13700 13800 13900 14000 14100 14200 14300 14400 14500 14600 14700 14800 14900 15000 15100 15200 15300 15400 15500 15600 15700 15800 15900 16000 16100 16200 16300 16400 16500 16600 16700 16800 16900 17000 17100 17200 17300 17400 17500 17600 17700 17800 17900 18000 18100 18200 18300 18400 18500 18600 18700 18800 18900 19000 19100 19200)) (quote (9984 9988 9994 10002 10006 10010 10014 10018 10000 9986 9986 9982 9980 10000 10022 10026 10028 10042 10044 10048 10056 10056 10030 10016 10014 10010 10006 10002 9998 9986 9970 9958 9976 9962 9960 9962 9986 9980 10002 10010 10010 10012 10014 10000 10008 10010 10012 10014 10018 10018 10018 10018 10018 10018 10018 10018 10020 10020 10022 10024 10026 10026 10026 10032 10018 10016 10018 10020 10022 10024 10026 10026 10024 10024 10024 10026 10026 10024 10020 10018 10016 10016 10016 10026 10028 10028 10024 10020 10018 10020 10020 10016 10006 10004 10004 10006 10006 10010 10010 10012 10014 10014 10014 10012 10010 10008 10006 10006 10006 10006 10006 10008 10008 10008 10008 10010 10010 10012 10012 10012 10010 10010 10010 10010 10010 10012 10012 10012 10012 10012 10012 10010 10006 10002 9998 9992 9988 9988 9970 9968 9968 9982 9982 10000 10012 10012 10012 10014 10014 10012 10012 10010 10008 10006 10006 10006 10006 10004 10006 10008 10008 10008 10010 10018 10018 10004 10008 10008 10008 10010 10010 10010 10008 10008 10010 10010 10008 10008 10012 10016 10014 10012 10010 10012 10012 10014 10020 10020 10010 10010 10010 9990 9990)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 1116 372))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "Y-POINTS" (quote y-points) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 198 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 171 385) (om-make-point 34 30) 17 "17" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 197 414) (om-make-point 58 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIFINFO" (quote sdifinfo) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 57 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "trumpetgold-analysis.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 112 28) (om-make-point 157 50) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "trumpetgold-analysis" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 553 542) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 1 nil 0) (15 0 1 0 nil 0) (10 2 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (6 0 5 0 nil 0) (11 0 5 1 nil 0) (0 1 9 0 nil 0) (5 0 10 2 nil 0) (13 0 11 0 nil 0) (12 0 13 0 nil 0) (0 1 13 1 nil 0) (15 0 14 0 nil 0))) nil 6.17))
