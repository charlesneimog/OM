; OM File Header - Saved 2021/09/01 23:59:24
; (6.19 :patc (om-make-point 200 10) (om-make-point -9 -9) (om-make-point 1920 1026) "" 183 0 "2021/07/22 15:02:29" "2021/09/01 23:59:23")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"C:../../../../../../../out-files/om-ckn/dihf.wav\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "fora" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 776 256) (om-make-point 48942 32) (list (list 4722 7946 8310) (list 7950 8308) (list 7116 8310) (list 6990 7842 8286) (list 6926 7770 8052 8256) (list 8104) (list 8050 8260) (list 4104 8230) (list 8222) (list 7894) (list 3788) (list 3910) (list 3654 7108) (list 7812) (list 6068 7798 8082) (list 6844 7898) (list 6828 7200 7828) (list 6694 7238 7810 8130 8302) (list 3724 6702 7238 7864 8106) (list 4020 6828 7176 7400 8040) (list 4992 6918 7784 8104) (list 5758 6880 7794 8134) (list 4294 5164 6932 7798 8242) (list 5108 6284 7006 7638 7878 8062 8244 8398) (list 5158 6144 6844 7146 7718 8104) (list 4982 6244 6866 7748 8184 8356) (list 4748 5926 6696 7542 7884 8292) (list 4670 5862 6662 7468 7838 8276) (list 4702 5884 6570 7504 8080) (list 4590 5862 6580 7486 7762 8078) (list 4622 5836 6592 6950 7406 7736 8064 8278) (list 4642 5876 6564 7120 7496 8024 8240) (list 4696 5870 6582 7110 7470 7806 8024) (list 4740 5942 6630 7112 7552 7974) (list 4850 5960 6690 7170 7612 7948 8358) (list 4758 6014 6698 7178 7604 7882 8112 8354) (list 4844 6040 6710 7224 7618 7896) (list 4836 6044 6724 7256 7608 7914 8226) (list 4812 6016 6750 7236 7618 7922 8258) (list 4840 6018 6768 7220 7650 7936) (list 4904 6032 6756 7226 7660 7954) (list 4946 6046 6754 7234 7626 7938) (list 4928 6064 6750 7224 7636 7942) (list 4822 6054 6760 7254 7632 7946 8198) (list 4808 6058 6742 7272 7642 7946 8232) (list 4884 6056 6752 7246 7656 7956 8200) (list 4918 6060 6752 7246 7638 7960 8198) (list 4844 6054 6774 7232 7644 7964 8224) (list 4814 6046 6764 7220 7632 7960 8224) (list 4848 6062 6738 7236 7582 7962) (list 4860 6050 6738 7244 7968 8212) (list 4808 6020 6712 7244 7598 7974) (list 4812 6014 6712 7214 7614 7956 8194 8362) (list 4830 6016 6718 7212 7600 7918 8182) (list 4830 6018 6720 7218 7586 7908 8190) (list 4760 5990 6676 7188 7564 8178 8346) (list 4794 5994 6666 7198 7554 8186) (list 4806 5984 6672 7174 7554 7902 8190) (list 4772 5944 6632 7150 7562 7874 8144 8334) (list 4688 5892 6590 7006 7450 7762 8056 8344) (list 4766 5838 6602 7052 7706 7996 8312) (list 4704 5810 6580 7078 8008 8248) (list 4582 5808 6560 7036 7988 8220) (list 4752 5806 6962 7396 7642 7994 8220) (list 4716 5840 6970 7400 7628 7978 8208 8398) (list 4574 5842 6402 7034 7410 7692 7974 8238) (list 4714 5830 7044 7632 7976 8224) (list 4748 5804 6516 6948 7690 7980 8218 8388) (list 4584 5806 6512 7978 8266 8368) (list 4754 5802 7054 7776 7978 8206 8394) (list 4752 5764 6534 7126 7818 8010 8214) (list 4370 5666 6760 7670 8060 8196) (list 4498 6740 7442 8000 8192) (list 4320 5556 6188 6756 7154 7444 7928 8260) (list 4430 5626 6732 7444 7666 7960 8116 8356) (list 4282 5584 6732 7712 7986) (list 4284 5532 6738 7724 7934 8130) (list 4368 6118 6708 7112 7696 7944 8300) (list 4274 5584 6958 7704 7902 8302) (list 4402 6220 6726 7122 7720 8006 8250) (list 4240 5546 6720 7834 8108 8298) (list 4312 6218 6680 7152 7884 8112) (list 4282 5558 6578 7072 7774 8126 8384) (list 4434 6198 6628 7138 7716 8012 8146) (list 4392 5586 7046 7916 8152) (list 4332 5590 7062 7920 8138) (list 4402 5694 6774 7526 8012 8280) (list 4410 5678 6716 7338 7738 8038 8294) (list 4414 6804 8146 8270) (list 4216 5576 6758 7156 7900 8224) (list 4394 5490 6242 6920 7884 8100 8284) (list 4402 5508 6908 8114) (list 4532 6516 7306 8032 8302) (list 4548 6548 7220 7596 7888 8106 8332) (list 4672 6550 7430 7964) (list 4508 5750 6500 7020 7772 7968) (list 4386 5592 6794 7436 7952 8292) (list 4374 5554 6776 7508 7970 8332) (list 4376 5592 6256 6804 7560 8004) (list 5218 6272 7630 8028) (list 4152 5524 6138 6722 6950 7594 7874 8086) (list 5498 6228 6590 6978 7598 8058 8274) (list 4216 5468 6142 6706 7532 7872 8088) (list 4446 5344 6286 6960 7524 7866 8138) (list 4318 5424 6570 7368 7558 7986 8184) (list 5370 6458 7422 7660 8202) (list 4432 5290 5936 6438 7394 8020 8282) (list 4966 5946 7438 7938) (list 4070 5884 6468 7198 7746 8130) (list 4412 5048 6344 7102 7940 8232) (list 3778 5332 5874 6546 7136 8198) (list 4216 6100 7106) (list 4110 5882 7108 7560) (list 3890 5416 6124 7160) (list 4374 5922 7112 7804) (list 4628 5664 6518 7174 7708) (list 5536 6566 7202) (list 4038 5534 6568) (list 3972 5508 6600) (list 5490 6338 6614 7082) (list 5516 6618 7042) (list 3934 5482 6530) (list 4234 5430 6634) (list 4462 5510 6724) (list 4406 5500 6406) (list 4412 5478 6696) (list 4460 5540) (list 5538 6450) (list 3926 5478 6662) (list 5428 6628) (list 5406 6182) (list 3770 5490) (list 3892 5540) (list 3992 5424) (list 5526) (list 5668 6550 7060 7320 7758) (list 5464 6408 7204 7708 8070) (list 3934 5426 6338 7170 7442 7980 8128) (list 5482 6628 7188 7952 8114 8388) (list 4344 5578 6992 7388 8014) (list 4976 5888 6440 7140 7532 8068 8200 8396) (list 4964 6138 6868 7712 7990 8142 8302) (list 4848 5626 6368 7606 7906 8140) (list 4554 5730 6394 7902 8106 8330) (list 4360 5642 6368 7216 7554 7806 8072) (list 4378 5686 6318 7262 7516 8054 8332) (list 4414 5650 6366 7300 7588 8062 8310) (list 4434 5690 6310 7238 7566 8036) (list 4504 5628 6334 6796 7578 7794 8042) (list 4406 5632 6338 6848 7224 7556 7820 8032) (list 4458 5692 6244 7274 7582 8024 8202) (list 4534 5656 6378 7304 7586 7850 8066) (list 4492 5702 6374 6794 7254 7578 7834 8060 8272) (list 4462 5684 6374 7252 7594 7842 8066 8294) (list 4552 5696 6394 6786 7292 7588 7862 8080 8280) (list 4552 5728 6400 7300 7600 7872 8108 8314) (list 4642 5678 6424 7326 7604 7870 8098) (list 4554 5756 6450 7314 7646 7918 8128 8328) (list 4618 5738 6440 7338 7672 7924 8128 8346) (list 4632 5734 6450 7288 7660 7926 8158 8348) (list 4538 5780 6456 7332 7648 7932 8158 8348) (list 4604 5762 6448 6962 7314 7636 7932 8158 8366) (list 4686 5740 6468 7328 7666 7934 8172) (list 4550 5768 6460 7304 7642 7912 8158 8350) (list 4662 5726 6454 7312 7656 7896 8172) (list 4680 5728 6448 7340 7648 7852 8166 8380) (list 4546 5768 6454 6948 7344 7646 7922 8166 8342) (list 4624 5722 6442 6964 7342 7646 8152 8364) (list 4570 5742 6452 6948 7672 8166 8384) (list 4524 5792 6472 6960 7328 7682 7950 8180 8390) (list 4634 5748 6448 6980 7328 7654 7980 8160) (list 4624 5742 6458 6972 7290 7686 7932 8168) (list 4528 5726 6402 7324 7638 7922 8118 8398) (list 4612 5598 6390 6982 7902 8318) (list 4572 5664 6882 7820 8034) (list 5632 6828 7590 7760 8030 8252) (list 4462 5630 6398 6804 7688 8024) (list 4378 5642 6384 6794 7212 7668 7980 8250 8396) (list 4420 5662 7130 7974 8168 8390) (list 4416 5564 6304 6784 7472 7990 8122 8312) (list 4368 5650 6154 7390 8016 8306) (list 4390 6262 6618 7208 7850 8272) (list 4338 6186 6638 7102 7454 7636 7890 8288) (list 4428 6704 8242) (list 3986 5416 6522 6840 7412 7846 8046 8258) (list 4334 6184 6820 7816 8202) (list 4042 5338 6426 7142 7626 8100 8196) (list 4252 7432 8036 8248) (list 4190 5720 6456 6876 7386 8222) (list 4130 5606 6246 7418 8032 8252) (list 4098 5512 6530 7274 7980 8240) (list 4120 5596 7198 7972 8214 8366) (list 4174 6694 7146 7568 8040 8312) (list 4270 6192 7174 7942 8206) (list 4282 5522 6172 7058 7902 8140 8388) (list 4342 6904 7890 8090 8278) (list 4344 5666 6812 8028 8232) (list 4452 5612 6816 7170 7640 8080) (list 4404 5596 6298 7108 7452 7720 8038 8198 8388) (list 4348 5754 6128 6796 7162 7962 8282) (list 4312 6154 6656 7402 8020 8354) (list 4300 6154 6640 7496 8058 8318) (list 4368 5582 6218 6632 6970 7444 7946 8148) (list 4326 5492 6282 7138 7970 8298) (list 4386 5698 6246 6852 7152 7548 7802 7976 8270) (list 4366 5506 6746 7476 7946 8390) (list 4286 5488 6180 6720 7134 7858 8068) (list 4236 5576 6138 6766 7008 7434 7712 8158) (list 4372 5482 6202 7114 7606 7972) (list 4136 5468 6204 6658 7070 7464 7906) (list 5364 7064 7834 8116) (list 4060 5430 6182 7022 7596 7802 8028 8246 8354) (list 4440 5446 6994 7538 7912) (list 4124 5398 6162 6984 7332 7620 7782 7982 8228) (list 4312 5502 6982 7548 7988) (list 4320 5324 6144 7008 7610 7994) (list 4174 5540 6946 7548 8030) (list 4366 5144 5952 6928 7366 7942) (list 4166 5698 7054 7638 7974) (list 4140 5918 6600 7144 7722 8016 8218) (list 4206 6060 7118 7530 7916) (list 4060 5902 6422 6776 7242 7900 8112) (list 4204 5966 7006 7308 7874 8024) (list 4140 5968 6628 7070 7880) (list 4124 5844 7096 7884 8136) (list 4094 5542 6148 7106 7844 8126) (list 4062 6810 7836) (list 4138 6234 7042 7872) (list 4014 5576 7130 7866) (list 4034 5494 6228 6674 7114 7640 7894) (list 4060 7106 7618) (list 4070 5526 7212 7526) (list 4034 5416 6432) (list 4010 5360 6180) (list 3926 5410 7068) (list 4236 5506) (list 4788 5568) (list 4382 5622) (list 4360 5490 6268) (list 4122 5604) (list 5360 6208) (list 5448) (list 5440) (list 3754 5638) (list 3936 5472 6188) (list 3986 5598) (list 4200 5522) (list 4430) (list 4148 5294 5922) (list 4092 5498) (list 3992 5546) (list 5606) (list 5394) (list 5394) (list 5382) (list 5382) (list 5382)) "((4722 7946 8310) (7950 8308) (7116 8310) (6990 7842 8286) (6926 7770 8052 8256) (8104) (8050 8260) (4104 8230) (8222) (7894) (3788) (3910) (3654 7108) (7812) (6068 7798 8082) (6844 7898) (6828 7200 7828) (6694 7238 7810 8130 8302) (3724 6702 7238 7864 8106) (4020 6828 7176 7400 8040) (4992 6918 7784 8104) (5758 6880 7794 8134) (4294 5164 6932 7798 8242) (5108 6284 7006 7638 7878 8062 8244 8398) (5158 6144 6844 7146 7718 8104) (4982 6244 6866 7748 8184 8356) (4748 5926 6696 7542 7884 8292) (4670 5862 6662 7468 7838 8276) (4702 5884 6570 7504 8080) (4590 5862 6580 7486 7762 8078) (4622 5836 6592 6950 7406 7736 8064 8278) (4642 5876 6564 7120 7496 8024 8240) (4696 5870 6582 7110 7470 7806 8024) (4740 5942 6630 7112 7552 7974) (4850 5960 6690 7170 7612 7948 8358) (4758 6014 6698 7178 7604 7882 8112 8354) (4844 6040 6710 7224 7618 7896) (4836 6044 6724 7256 7608 7914 8226) (4812 6016 6750 7236 7618 7922 8258) (4840 6018 6768 7220 7650 7936) (4904 6032 6756 7226 7660 7954) (4946 6046 6754 7234 7626 7938) (4928 6064 6750 7224 7636 7942) (4822 6054 6760 7254 7632 7946 8198) (4808 6058 6742 7272 7642 7946 8232) (4884 6056 6752 7246 7656 7956 8200) (4918 6060 6752 7246 7638 7960 8198) (4844 6054 6774 7232 7644 7964 8224) (4814 6046 6764 7220 7632 7960 8224) (4848 6062 6738 7236 7582 7962) (4860 6050 6738 7244 7968 8212) (4808 6020 6712 7244 7598 7974) (4812 6014 6712 7214 7614 7956 8194 8362) (4830 6016 6718 7212 7600 7918 8182) (4830 6018 6720 7218 7586 7908 8190) (4760 5990 6676 7188 7564 8178 8346) (4794 5994 6666 7198 7554 8186) (4806 5984 6672 7174 7554 7902 8190) (4772 5944 6632 7150 7562 7874 8144 8334) (4688 5892 6590 7006 7450 7762 8056 8344) (4766 5838 6602 7052 7706 7996 8312) (4704 5810 6580 7078 8008 8248) (4582 5808 6560 7036 7988 8220) (4752 5806 6962 7396 7642 7994 8220) (4716 5840 6970 7400 7628 7978 8208 8398) (4574 5842 6402 7034 7410 7692 7974 8238) (4714 5830 7044 7632 7976 8224) (4748 5804 6516 6948 7690 7980 8218 8388) (4584 5806 6512 7978 8266 8368) (4754 5802 7054 7776 7978 8206 8394) (4752 5764 6534 7126 7818 8010 8214) (4370 5666 6760 7670 8060 8196) (4498 6740 7442 8000 8192) (4320 5556 6188 6756 7154 7444 7928 8260) (4430 5626 6732 7444 7666 7960 8116 8356) (4282 5584 6732 7712 7986) (4284 5532 6738 7724 7934 8130) (4368 6118 6708 7112 7696 7944 8300) (4274 5584 6958 7704 7902 8302) (4402 6220 6726 7122 7720 8006 8250) (4240 5546 6720 7834 8108 8298) (4312 6218 6680 7152 7884 8112) (4282 5558 6578 7072 7774 8126 8384) (4434 6198 6628 7138 7716 8012 8146) (4392 5586 7046 7916 8152) (4332 5590 7062 7920 8138) (4402 5694 6774 7526 8012 8280) (4410 5678 6716 7338 7738 8038 8294) (4414 6804 8146 8270) (4216 5576 6758 7156 7900 8224) (4394 5490 6242 6920 7884 8100 8284) (4402 5508 6908 8114) (4532 6516 7306 8032 8302) (4548 6548 7220 7596 7888 8106 8332) (4672 6550 7430 7964) (4508 5750 6500 7020 7772 7968) (4386 5592 6794 7436 7952 8292) (4374 5554 6776 7508 7970 8332) (4376 5592 6256 6804 7560 8004) (5218 6272 7630 8028) (4152 5524 6138 6722 6950 7594 7874 8086) (5498 6228 6590 6978 7598 8058 8274) (4216 5468 6142 6706 7532 7872 8088) (4446 5344 6286 6960 7524 7866 8138) (4318 5424 6570 7368 7558 7986 8184) (5370 6458 7422 7660 8202) (4432 5290 5936 6438 7394 8020 8282) (4966 5946 7438 7938) (4070 5884 6468 7198 7746 8130) (4412 5048 6344 7102 7940 8232) (3778 5332 5874 6546 7136 8198) (4216 6100 7106) (4110 5882 7108 7560) (3890 5416 6124 7160) (4374 5922 7112 7804) (4628 5664 6518 7174 7708) (5536 6566 7202) (4038 5534 6568) (3972 5508 6600) (5490 6338 6614 7082) (5516 6618 7042) (3934 5482 6530) (4234 5430 6634) (4462 5510 6724) (4406 5500 6406) (4412 5478 6696) (4460 5540) (5538 6450) (3926 5478 6662) (5428 6628) (5406 6182) (3770 5490) (3892 5540) (3992 5424) (5526) (5668 6550 7060 7320 7758) (5464 6408 7204 7708 8070) (3934 5426 6338 7170 7442 7980 8128) (5482 6628 7188 7952 8114 8388) (4344 5578 6992 7388 8014) (4976 5888 6440 7140 7532 8068 8200 8396) (4964 6138 6868 7712 7990 8142 8302) (4848 5626 6368 7606 7906 8140) (4554 5730 6394 7902 8106 8330) (4360 5642 6368 7216 7554 7806 8072) (4378 5686 6318 7262 7516 8054 8332) (4414 5650 6366 7300 7588 8062 8310) (4434 5690 6310 7238 7566 8036) (4504 5628 6334 6796 7578 7794 8042) (4406 5632 6338 6848 7224 7556 7820 8032) (4458 5692 6244 7274 7582 8024 8202) (4534 5656 6378 7304 7586 7850 8066) (4492 5702 6374 6794 7254 7578 7834 8060 8272) (4462 5684 6374 7252 7594 7842 8066 8294) (4552 5696 6394 6786 7292 7588 7862 8080 8280) (4552 5728 6400 7300 7600 7872 8108 8314) (4642 5678 6424 7326 7604 7870 8098) (4554 5756 6450 7314 7646 7918 8128 8328) (4618 5738 6440 7338 7672 7924 8128 8346) (4632 5734 6450 7288 7660 7926 8158 8348) (4538 5780 6456 7332 7648 7932 8158 8348) (4604 5762 6448 6962 7314 7636 7932 8158 8366) (4686 5740 6468 7328 7666 7934 8172) (4550 5768 6460 7304 7642 7912 8158 8350) (4662 5726 6454 7312 7656 7896 8172) (4680 5728 6448 7340 7648 7852 8166 8380) (4546 5768 6454 6948 7344 7646 7922 8166 8342) (4624 5722 6442 6964 7342 7646 8152 8364) (4570 5742 6452 6948 7672 8166 8384) (4524 5792 6472 6960 7328 7682 7950 8180 8390) (4634 5748 6448 6980 7328 7654 7980 8160) (4624 5742 6458 6972 7290 7686 7932 8168) (4528 5726 6402 7324 7638 7922 8118 8398) (4612 5598 6390 6982 7902 8318) (4572 5664 6882 7820 8034) (5632 6828 7590 7760 8030 8252) (4462 5630 6398 6804 7688 8024) (4378 5642 6384 6794 7212 7668 7980 8250 8396) (4420 5662 7130 7974 8168 8390) (4416 5564 6304 6784 7472 7990 8122 8312) (4368 5650 6154 7390 8016 8306) (4390 6262 6618 7208 7850 8272) (4338 6186 6638 7102 7454 7636 7890 8288) (4428 6704 8242) (3986 5416 6522 6840 7412 7846 8046 8258) (4334 6184 6820 7816 8202) (4042 5338 6426 7142 7626 8100 8196) (4252 7432 8036 8248) (4190 5720 6456 6876 7386 8222) (4130 5606 6246 7418 8032 8252) (4098 5512 6530 7274 7980 8240) (4120 5596 7198 7972 8214 8366) (4174 6694 7146 7568 8040 8312) (4270 6192 7174 7942 8206) (4282 5522 6172 7058 7902 8140 8388) (4342 6904 7890 8090 8278) (4344 5666 6812 8028 8232) (4452 5612 6816 7170 7640 8080) (4404 5596 6298 7108 7452 7720 8038 8198 8388) (4348 5754 6128 6796 7162 7962 8282) (4312 6154 6656 7402 8020 8354) (4300 6154 6640 7496 8058 8318) (4368 5582 6218 6632 6970 7444 7946 8148) (4326 5492 6282 7138 7970 8298) (4386 5698 6246 6852 7152 7548 7802 7976 8270) (4366 5506 6746 7476 7946 8390) (4286 5488 6180 6720 7134 7858 8068) (4236 5576 6138 6766 7008 7434 7712 8158) (4372 5482 6202 7114 7606 7972) (4136 5468 6204 6658 7070 7464 7906) (5364 7064 7834 8116) (4060 5430 6182 7022 7596 7802 8028 8246 8354) (4440 5446 6994 7538 7912) (4124 5398 6162 6984 7332 7620 7782 7982 8228) (4312 5502 6982 7548 7988) (4320 5324 6144 7008 7610 7994) (4174 5540 6946 7548 8030) (4366 5144 5952 6928 7366 7942) (4166 5698 7054 7638 7974) (4140 5918 6600 7144 7722 8016 8218) (4206 6060 7118 7530 7916) (4060 5902 6422 6776 7242 7900 8112) (4204 5966 7006 7308 7874 8024) (4140 5968 6628 7070 7880) (4124 5844 7096 7884 8136) (4094 5542 6148 7106 7844 8126) (4062 6810 7836) (4138 6234 7042 7872) (4014 5576 7130 7866) (4034 5494 6228 6674 7114 7640 7894) (4060 7106 7618) (4070 5526 7212 7526) (4034 5416 6432) (4010 5360 6180) (3926 5410 7068) (4236 5506) (4788 5568) (4382 5622) (4360 5490 6268) (4122 5604) (5360 6208) (5448) (5440) (3754 5638) (3936 5472 6188) (3986 5598) (4200 5522) (4430) (4148 5294 5922) (4092 5498) (3992 5546) (5606) (5394) (5394) (5382) (5382) (5382))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 784 179) (om-make-point 24260 32) (list (list 1 1 1) (list 1 1) (list 1 1) (list 1 1 1) (list 1 1 1 1) (list 1) (list 1 1) (list 1 1) (list 1) (list 1) (list 1) (list 1) (list 1 1) (list 1) (list 1 1 1) (list 1 1) (list 1 1 1) (list 1 1 1 1 1) (list 1 1 1 1 1) (list 1 1 1 1 1) (list 1 1 1 1) (list 1 4 1 1) (list 1 1 4 1 1) (list 6 4 4 1 1 1 1 1) (list 15 6 4 4 1 1) (list 26 12 9 1 1 6) (list 34 17 15 1 1 4) (list 36 26 20 1 1 4) (list 34 34 20 1 4) (list 34 42 26 4 1 6) (list 23 39 28 6 4 4 6 1) (list 20 39 26 4 4 9 4) (list 20 45 28 6 4 1 6) (list 17 39 23 6 1 6) (list 17 39 20 6 1 4 1) (list 17 39 20 6 4 4 4 1) (list 17 39 23 6 4 4) (list 17 45 17 6 4 6 1) (list 15 50 12 6 4 4 1) (list 12 50 12 6 4 4) (list 9 47 12 6 4 4) (list 9 45 15 9 4 4) (list 9 45 15 6 4 6) (list 12 45 15 6 4 6 1) (list 12 45 15 6 4 6 1) (list 9 42 17 6 4 6 1) (list 12 42 15 6 4 6 1) (list 12 39 15 6 4 6 1) (list 15 39 15 6 4 6 1) (list 12 36 17 6 1 9) (list 12 36 23 6 9 1) (list 12 36 23 6 4 9) (list 12 39 20 6 4 6 4 1) (list 12 42 20 9 4 4 4) (list 15 42 20 9 4 4 6) (list 15 42 20 6 4 6 1) (list 15 39 17 6 4 9) (list 15 39 17 6 4 1 6) (list 15 39 17 4 4 1 4 4) (list 15 34 15 6 4 1 4 4) (list 12 31 12 6 1 4 6) (list 12 28 12 6 4 6) (list 15 34 12 6 4 4) (list 15 31 4 1 1 4 4) (list 15 36 6 1 1 4 4 4) (list 20 42 9 6 1 1 4 4) (list 15 36 6 1 4 4) (list 17 34 12 6 1 4 4 4) (list 20 42 12 4 4 4) (list 17 36 4 1 4 4 1) (list 17 31 9 4 1 4 4) (list 17 23 12 1 4 4) (list 17 12 1 4 4) (list 23 20 15 12 4 1 4 4) (list 23 31 9 1 1 4 4 1) (list 23 31 6 1 4) (list 23 20 6 1 4 4) (list 26 9 4 4 1 4 1) (list 26 20 4 1 4 1) (list 26 6 4 4 1 1 4) (list 23 15 4 1 4 1) (list 23 4 4 1 1 4) (list 23 9 4 1 1 4 1) (list 23 4 4 1 1 1 1) (list 20 6 1 1 1) (list 17 9 4 1 1) (list 15 12 4 1 4 4) (list 12 6 4 1 1 4 4) (list 12 4 4 4) (list 12 6 4 1 1 4) (list 12 6 4 1 1 4 4) (list 15 6 1 4) (list 17 4 1 4 1) (list 23 4 1 1 1 4 1) (list 23 6 1 4) (list 28 20 9 6 4 4) (list 26 26 9 4 6 1) (list 23 23 15 1 6 1) (list 23 23 9 15 1 6) (list 23 15 1 4) (list 17 26 23 15 6 4 4 4) (list 28 17 17 9 4 4 1) (list 15 28 15 17 1 4 4) (list 15 28 12 9 4 4 4) (list 15 31 15 4 4 1 4) (list 26 15 1 1 4) (list 12 17 15 15 1 4 4) (list 12 17 1 1) (list 12 15 12 4 1 1) (list 15 15 12 4 1 1) (list 12 12 6 6 4 1) (list 15 6 4) (list 12 6 1 1) (list 9 6 6 1) (list 6 4 1 1) (list 4 6 1 1 1) (list 6 4 1) (list 4 6 4) (list 4 4 4) (list 6 1 1 1) (list 4 1 1) (list 1 4 4) (list 1 4 1) (list 1 4 1) (list 1 4 1) (list 1 4 1) (list 1 1) (list 1 1) (list 1 4 1) (list 4 1) (list 4 1) (list 1 1) (list 1 1) (list 1 1) (list 1) (list 1 1 1 1 1) (list 1 1 1 1 1) (list 1 1 1 1 1 1 1) (list 1 1 1 1 1 1) (list 1 1 4 1 1) (list 4 1 1 1 1 1 1 1) (list 9 6 4 1 1 1 1) (list 15 12 12 1 1 4) (list 17 20 17 1 4 1) (list 20 23 23 4 1 1 4) (list 23 26 23 4 4 4 1) (list 26 28 26 4 4 6 1) (list 26 26 20 4 4 6) (list 20 28 20 6 4 4 6) (list 23 31 23 6 4 4 4 4) (list 26 28 23 4 4 4 1) (list 23 31 26 4 4 4 4) (list 23 31 28 6 4 4 4 4 1) (list 26 31 26 4 4 4 4 1) (list 26 34 26 6 4 4 4 1 1) (list 26 34 26 1 4 4 4 1) (list 23 31 23 1 1 4 4) (list 26 36 26 4 1 4 4 1) (list 23 34 26 4 1 4 4 1) (list 20 31 26 4 1 4 4 1) (list 26 34 28 4 4 4 4 1) (list 20 31 28 6 4 4 4 4 1) (list 20 31 28 4 4 4 4) (list 23 34 31 4 4 4 6 4) (list 20 31 31 4 4 4 6) (list 20 31 31 4 4 1 6 4) (list 23 34 31 6 4 4 1 6 4) (list 20 28 31 6 4 4 4 4) (list 20 28 31 6 4 4 4) (list 26 31 31 6 4 4 4 4 4) (list 23 26 31 4 4 4 1 4) (list 23 26 28 4 4 1 1 4) (list 23 26 23 1 1 1 1 4) (list 20 26 12 4 1 1) (list 17 28 6 1 1) (list 28 6 1 1 1 1) (list 20 28 9 6 1 1) (list 20 31 12 9 4 1 1 1 4) (list 20 31 4 1 1 4) (list 23 31 17 9 1 1 1 4) (list 23 23 17 4 1 4) (list 26 15 9 4 1 4) (list 28 17 9 4 4 1 1 4) (list 26 9 4) (list 26 23 9 9 1 4 1 4) (list 28 9 6 4 4) (list 28 15 6 1 1 4 4) (list 28 1 1 4) (list 26 15 4 4 1 1) (list 26 12 6 1 1 1) (list 23 9 6 1 4 4) (list 20 12 1 1 1 1) (list 17 4 1 1 1 1) (list 15 4 1 1 1) (list 15 4 4 1 1 1 1) (list 15 4 1 1 1) (list 15 6 4 1 1) (list 15 6 4 1 1 1) (list 15 6 4 1 1 1 1 1 1) (list 15 9 6 4 4 4 1) (list 15 9 6 1 4 1) (list 17 9 6 1 4 1) (list 17 9 6 4 4 1 4 1) (list 17 6 4 4 4 1) (list 20 9 9 4 4 1 1 4 1) (list 17 12 6 1 4 1) (list 17 17 9 6 4 4 1) (list 20 20 12 6 6 1 4 1) (list 23 23 9 6 1 4) (list 20 26 12 6 9 1 4) (list 26 9 4 4) (list 20 28 12 9 1 4 4 1 1) (list 20 28 6 1 4) (list 17 28 12 6 4 4 4 4 1) (list 20 26 6 4 4) (list 20 26 12 6 4 4) (list 20 23 6 4 4) (list 20 20 12 6 4 4) (list 20 15 4 4 4) (list 20 15 4 4 1 4 1) (list 23 9 4 1 4) (list 26 6 4 1 4 4 1) (list 26 6 1 1 1 1) (list 26 6 1 1 1) (list 23 6 1 1 1) (list 20 4 4 1 1 1) (list 17 1 4) (list 17 1 1 1) (list 15 4 1 1) (list 12 4 1 1 1 1 1) (list 9 1 1) (list 6 4 1 1) (list 4 4 1) (list 4 4 1) (list 4 4 1) (list 4 4) (list 4 4) (list 1 4) (list 4 4 1) (list 1 4) (list 4 1) (list 1) (list 1) (list 1 1) (list 1 1 1) (list 1 1) (list 1 1) (list 1) (list 1 1 1) (list 1 1) (list 1 1) (list 1) (list 1) (list 1) (list 1) (list 1) (list 1)) "((1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 4 1 1) (1 1 4 1 1) (6 4 4 1 1 1 1 1) (15 6 4 4 1 1) (26 12 9 1 1 6) (34 17 15 1 1 4) (36 26 20 1 1 4) (34 34 20 1 4) (34 42 26 4 1 6) (23 39 28 6 4 4 6 1) (20 39 26 4 4 9 4) (20 45 28 6 4 1 6) (17 39 23 6 1 6) (17 39 20 6 1 4 1) (17 39 20 6 4 4 4 1) (17 39 23 6 4 4) (17 45 17 6 4 6 1) (15 50 12 6 4 4 1) (12 50 12 6 4 4) (9 47 12 6 4 4) (9 45 15 9 4 4) (9 45 15 6 4 6) (12 45 15 6 4 6 1) (12 45 15 6 4 6 1) (9 42 17 6 4 6 1) (12 42 15 6 4 6 1) (12 39 15 6 4 6 1) (15 39 15 6 4 6 1) (12 36 17 6 1 9) (12 36 23 6 9 1) (12 36 23 6 4 9) (12 39 20 6 4 6 4 1) (12 42 20 9 4 4 4) (15 42 20 9 4 4 6) (15 42 20 6 4 6 1) (15 39 17 6 4 9) (15 39 17 6 4 1 6) (15 39 17 4 4 1 4 4) (15 34 15 6 4 1 4 4) (12 31 12 6 1 4 6) (12 28 12 6 4 6) (15 34 12 6 4 4) (15 31 4 1 1 4 4) (15 36 6 1 1 4 4 4) (20 42 9 6 1 1 4 4) (15 36 6 1 4 4) (17 34 12 6 1 4 4 4) (20 42 12 4 4 4) (17 36 4 1 4 4 1) (17 31 9 4 1 4 4) (17 23 12 1 4 4) (17 12 1 4 4) (23 20 15 12 4 1 4 4) (23 31 9 1 1 4 4 1) (23 31 6 1 4) (23 20 6 1 4 4) (26 9 4 4 1 4 1) (26 20 4 1 4 1) (26 6 4 4 1 1 4) (23 15 4 1 4 1) (23 4 4 1 1 4) (23 9 4 1 1 4 1) (23 4 4 1 1 1 1) (20 6 1 1 1) (17 9 4 1 1) (15 12 4 1 4 4) (12 6 4 1 1 4 4) (12 4 4 4) (12 6 4 1 1 4) (12 6 4 1 1 4 4) (15 6 1 4) (17 4 1 4 1) (23 4 1 1 1 4 1) (23 6 1 4) (28 20 9 6 4 4) (26 26 9 4 6 1) (23 23 15 1 6 1) (23 23 9 15 1 6) (23 15 1 4) (17 26 23 15 6 4 4 4) (28 17 17 9 4 4 1) (15 28 15 17 1 4 4) (15 28 12 9 4 4 4) (15 31 15 4 4 1 4) (26 15 1 1 4) (12 17 15 15 1 4 4) (12 17 1 1) (12 15 12 4 1 1) (15 15 12 4 1 1) (12 12 6 6 4 1) (15 6 4) (12 6 1 1) (9 6 6 1) (6 4 1 1) (4 6 1 1 1) (6 4 1) (4 6 4) (4 4 4) (6 1 1 1) (4 1 1) (1 4 4) (1 4 1) (1 4 1) (1 4 1) (1 4 1) (1 1) (1 1) (1 4 1) (4 1) (4 1) (1 1) (1 1) (1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 4 1 1) (4 1 1 1 1 1 1 1) (9 6 4 1 1 1 1) (15 12 12 1 1 4) (17 20 17 1 4 1) (20 23 23 4 1 1 4) (23 26 23 4 4 4 1) (26 28 26 4 4 6 1) (26 26 20 4 4 6) (20 28 20 6 4 4 6) (23 31 23 6 4 4 4 4) (26 28 23 4 4 4 1) (23 31 26 4 4 4 4) (23 31 28 6 4 4 4 4 1) (26 31 26 4 4 4 4 1) (26 34 26 6 4 4 4 1 1) (26 34 26 1 4 4 4 1) (23 31 23 1 1 4 4) (26 36 26 4 1 4 4 1) (23 34 26 4 1 4 4 1) (20 31 26 4 1 4 4 1) (26 34 28 4 4 4 4 1) (20 31 28 6 4 4 4 4 1) (20 31 28 4 4 4 4) (23 34 31 4 4 4 6 4) (20 31 31 4 4 4 6) (20 31 31 4 4 1 6 4) (23 34 31 6 4 4 1 6 4) (20 28 31 6 4 4 4 4) (20 28 31 6 4 4 4) (26 31 31 6 4 4 4 4 4) (23 26 31 4 4 4 1 4) (23 26 28 4 4 1 1 4) (23 26 23 1 1 1 1 4) (20 26 12 4 1 1) (17 28 6 1 1) (28 6 1 1 1 1) (20 28 9 6 1 1) (20 31 12 9 4 1 1 1 4) (20 31 4 1 1 4) (23 31 17 9 1 1 1 4) (23 23 17 4 1 4) (26 15 9 4 1 4) (28 17 9 4 4 1 1 4) (26 9 4) (26 23 9 9 1 4 1 4) (28 9 6 4 4) (28 15 6 1 1 4 4) (28 1 1 4) (26 15 4 4 1 1) (26 12 6 1 1 1) (23 9 6 1 4 4) (20 12 1 1 1 1) (17 4 1 1 1 1) (15 4 1 1 1) (15 4 4 1 1 1 1) (15 4 1 1 1) (15 6 4 1 1) (15 6 4 1 1 1) (15 6 4 1 1 1 1 1 1) (15 9 6 4 4 4 1) (15 9 6 1 4 1) (17 9 6 1 4 1) (17 9 6 4 4 1 4 1) (17 6 4 4 4 1) (20 9 9 4 4 1 1 4 1) (17 12 6 1 4 1) (17 17 9 6 4 4 1) (20 20 12 6 6 1 4 1) (23 23 9 6 1 4) (20 26 12 6 9 1 4) (26 9 4 4) (20 28 12 9 1 4 4 1 1) (20 28 6 1 4) (17 28 12 6 4 4 4 4 1) (20 26 6 4 4) (20 26 12 6 4 4) (20 23 6 4 4) (20 20 12 6 4 4) (20 15 4 4 4) (20 15 4 4 1 4 1) (23 9 4 1 4) (26 6 4 1 4 4 1) (26 6 1 1 1 1) (26 6 1 1 1) (23 6 1 1 1) (20 4 4 1 1 1) (17 1 4) (17 1 1 1) (15 4 1 1) (12 4 1 1 1 1 1) (9 1 1) (6 4 1 1) (4 4 1) (4 4 1) (4 4 1) (4 4) (4 4) (1 4) (4 4 1) (1 4) (4 1) (1) (1) (1 1) (1 1 1) (1 1) (1 1) (1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 2" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 1528 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 1450 319) (om-make-point 70 50) (load-buffer-textfile (quote ("((274 274 328) (328 300) (24 24) (274 274 300) (425 274 328 24) (328) (300 271) (274 271) (328) (274) (300) (271) (425 20) (328) (300 300 271) (20 24) (271 300 271) (271 20 271 328 328) (300 20 274 24 328) (274 425 425 300 328) (300 20 271 271) (271 118 20 300) (274 497 20 20 328) (300 328 425 271 274 328 271 300) (271 20 425 271 300 300) (425 40 20 300 271 328) (425 20 425 425 300 300) (425 497 24 20 328 328) (274 40 425 271 328) (271 271 271 425 271 300) (497 271 271 425 425 328 328 271) (425 118 328 274 328 300 328) (425 274 425 300 425 274 300) (274 40 300 425 300 118) (425 271 20 328 271 271 328) (271 118 118 425 274 300 271 300) (497 20 328 425 328 274) (25 20 118 425 274 328 328) (25 425 271 300 425 271 271) (300 300 274 425 274 300) (300 274 274 300 20 118) (271 328 271 328 425 271) (425 425 20 20 271 274) (300 274 20 274 20 328 300) (425 497 24 425 328 271 271) (271 40 425 271 274 300 328) (497 328 20 271 20 271 328) (425 40 300 425 271 328 271) (300 300 20 20 328 328 328) (271 497 300 271 274 328) (118 118 328 328 118 328) (274 300 271 300 300 328) (274 425 271 300 300 274 300 300) (300 300 300 328 271 328 271) (274 20 300 425 300 300 328) (25 271 425 20 328 271 24) (271 40 20 328 271 300) (25 425 425 300 300 300 300) (25 274 20 328 425 328 328 300) (497 300 118 20 271 274 328 328) (300 328 300 425 300 300 300) (274 300 271 274 118 271) (425 274 328 425 300 271) (25 497 274 425 300 328 271) (497 40 300 425 274 271 300 328) (274 328 497 274 20 271 328 300) (300 118 328 271 300 271) (497 497 20 274 271 271 328 300) (271 118 300 300 24 300) (274 274 425 274 300 328 300) (25 274 118 24 300 118 271) (300 300 300 271 300 300) (271 24 20 274 300) (300 425 271 328 328 20 300 24) (271 118 300 271 271 271 300 300) (274 497 300 328 274) (271 25 425 20 274 328) (497 40 425 20 271 271 24) (274 497 274 328 271 300) (300 497 425 274 274 274 328) (274 300 274 271 300 328) (425 40 24 20 271 271) (425 274 274 425 274 328 300) (497 118 118 425 274 118 271) (497 274 274 328 328) (300 274 328 300 271) (274 118 271 24 118 300) (271 274 328 328 271 271 24) (274 20 300 24) (425 497 328 300 328 300) (274 271 20 425 24 328 24) (271 118 274 328) (300 274 425 271 300) (300 40 300 328 300 300 271) (271 271 300 274) (425 40 300 425 328 328) (300 118 118 274 118 271) (497 25 118 271 300 328) (271 25 300 328 271 271) (25 20 300 328) (497 328 497 328 271 271 24 271) (328 271 328 274 425 300 24) (271 271 271 118 425 274 328) (497 300 271 425 20 24 271) (271 271 271 425 271 271 300) (497 271 300 271 300) (274 300 425 425 271 118 328) (271 271 274 271) (274 328 300 20 300 271) (497 25 497 274 300 271) (425 271 24 274 24 271) (425 271 274) (497 300 425 425) (271 271 497 271) (425 40 300 271) (425 271 300 425 328) (25 118 20) (497 118 425) (300 300 425) (300 274 40 20) (425 271 274) (425 425 271) (274 497 425) (300 328 271) (425 425 118) (271 118 118) (271 274) (328 20) (300 118 328) (497 328) (497 497) (425 25) (425 25) (274 300) (25) (300 20 425 300 328) (328 40 425 20 271) (271 300 40 300 271 271 300) (118 274 271 118 328 300) (274 425 300 425 118) (25 300 497 20 300 328 271 328) (300 425 20 274 274 300 328) (300 497 300 274 274 271) (425 271 118 274 300 271) (497 328 328 328 271 274 328) (274 425 118 328 20 328 300) (271 274 328 20 425 328 24) (497 300 300 274 274 271) (300 118 328 328 20 20 300) (300 25 118 328 20 328 20 328) (497 328 300 300 20 274 300) (274 274 274 328 274 274 271) (300 497 497 300 20 20 271 328 328) (497 274 274 271 271 271 271 271) (300 25 40 274 300 425 274 300 24) (497 271 328 328 300 271 271 328) (300 425 40 328 20 24 328) (497 271 20 328 328 328 300 328) (425 118 497 118 274 300 328 24) (425 25 271 118 271 300 300 24) (425 118 40 271 274 24 328 24) (497 274 300 425 271 20 24 328 300) (274 328 20 271 300 300 300) (497 271 20 118 271 328 328 328) (271 25 40 20 274 274 271) (274 274 328 118 271 271 271 328) (425 497 40 274 300 425 300 328 300) (425 300 425 271 274 300 328 300) (497 118 328 118 328 328 328) (300 425 40 274 274 271 274 271 328) (274 118 118 425 300 328 328 300) (425 118 40 274 300 20 271 271) (497 118 20 425 20 271 328 328) (271 118 425 425 271 271) (425 425 118 20 118) (300 328 328 328 328 271) (425 271 118 118 20 328) (425 118 40 300 300 300 118 24 328) (497 271 274 300 271 328) (300 271 274 20 425 328 300 24) (274 271 271 328 271 24) (425 497 271 300 300 271) (497 40 425 24 24 300 328 328) (425 300 300) (271 271 20 118 425 300 274 24) (300 425 271 20 271) (497 25 271 328 271 328 300) (271 274 118 300) (271 328 118 328 20 271) (497 25 300 274 271 271) (300 328 271 271 300 328) (271 118 20 271 271 328) (497 24 300 271 274 300) (300 328 20 24 328) (271 274 274 20 271 271 300) (497 274 271 271 300) (425 25 425 328 300) (271 25 20 425 274 328) (274 425 328 300 271 328 118 300 300) (425 328 300 425 300 328 24) (425 274 20 300 271 328) (425 20 20 300 328 271) (497 425 271 425 274 274 328 271) (274 271 274 300 118 300) (274 425 274 20 425 24 300 118 328) (274 425 274 274 300 328) (271 497 497 118 425 328 328) (300 274 274 271 425 425 300 300) (271 425 328 20 271 328) (274 271 425 274 425 274 271) (425 328 271 271) (271 300 328 20 20 274 300 328 328) (425 25 300 24 300) (425 300 40 274 274 300 274 300 328) (274 118 271 271 271) (497 425 300 274 20 300) (300 425 300 20 300) (497 274 425 300 328 300) (425 328 300 425 300) (425 40 328 425 20 328 328) (425 300 274 328 274) (497 25 328 271 274 24 300) (300 328 271 274 24 328) (425 300 300 271 274) (271 425 425 328 300) (425 118 118 274 274 300) (300 118 20) (271 274 300 271) (271 328 271 300) (300 274 274 300 300 300 274) (425 425 274) (300 25 271 328) (497 425 40) (274 118 271) (271 25 20) (300 300) (497 497) (274 497) (300 300 274) (271 271) (25 271) (274) (118) (271 25) (300 271 118) (271 497) (271 118) (497) (425 274 24) (425 274) (425 300) (425) (425) (271) (300) (300) (300))")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 62 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 568 419) (om-make-point 40 32) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 423 868) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 3" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 328 831) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 268 884) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 316 756) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "dihf.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 599 789) (om-make-point 413 136) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:relative "out-files" "om-ckn")) :device nil :host nil :name "dihf" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "dihf.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 274 356) (om-make-point 1158 406) 0 nil 1 (quote :om-audio) nil nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 166 864) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 224 786) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 420 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 227 680) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voices->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 188 725) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS 2" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 191 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "save-temp-sounds" (om-load-patch-abs1 "save-temp-sounds" (quote ((let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 143 242) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 73 338) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 350)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 347 146) nil nil "l" "save-temp-sounds"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 299 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 43 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 294 320.0) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "voice->samples" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 21 206) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 668 624) (om-make-point 40 32) 0.2 "0.2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL 2" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 584 661) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT 3" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 18 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1143 733) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 279 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 763 789) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 635 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 653 850) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 290 692) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 237 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 159 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 690 746) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 811 718) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 90 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 335 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1313 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "acorde" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 537 588) (om-make-point 40 32) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 452 625) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 412 550) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (22 0 4 2 nil 0) (22 0 5 0 nil 0) (9 0 5 1 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (21 0 8 0 nil 0) (12 0 9 0 nil 0) (11 0 10 0 nil 0) (16 0 10 1 nil 0) (15 0 11 0 nil 0) (14 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (13 0 14 0 nil 0) (16 0 14 1 nil 0) (18 0 15 0 nil 0) (7 0 15 1 nil 0) (6 0 15 2 nil 0) (8 0 16 0 nil 0) (18 0 16 1 nil 0) (8 0 18 0 nil 0) (17 0 18 1 nil 0) (2 1 23 0 nil 0) (2 0 24 0 nil 0))) 1 "acorde" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 1038 769) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 1011 824) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 40 32) 127 "127" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 40 32) 0.7 "0.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 40 32) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 1161 824) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 140 58) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 689 528) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 579) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 331 481) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 339 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 408 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 570 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 416 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 101 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 77 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 76 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 8 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 186 924) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((34 0 1 0 nil 0) (0 0 1 1 nil 0) (59 0 2 0 nil 0) (8 0 3 0 nil 0) (10 0 5 0 nil 2) (13 0 6 0 nil 0) (9 0 7 1 nil 2) (7 0 8 0 nil 2) (6 0 8 2 nil 2) (5 0 9 0 nil 2) (11 0 10 1 nil 2) (60 0 11 0 nil 2) (9 0 12 0 nil 2) (12 0 13 0 nil 0) (31 0 13 1 nil 0) (4 0 14 0 nil 0) (16 0 15 0 nil 0) (4 0 16 0 nil 0) (15 0 17 0 nil 0) (19 0 18 0 nil 0) (54 0 19 0 nil 1) (51 0 19 1 nil 1) (50 0 19 2 nil 1) (47 0 19 3 nil 1) (27 0 21 0 nil 0) (20 0 21 1 nil 0) (20 0 21 2 nil 0) (39 0 26 0 ((om-make-point 653 306.0) (om-make-point 655 473.0) (om-make-point 1098 347.0) (om-make-point 1189 638)) 5) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (23 0 26 3 nil 0) (22 0 26 4 nil 0) (3 0 27 0 nil 0) (26 0 27 1 nil 0) (51 0 28 0 nil 0) (28 0 30 0 nil 0) (29 0 30 1 nil 0) (30 0 31 0 nil 0) (1 0 31 1 nil 0) (18 0 31 2 nil 0) (53 0 33 0 nil 0) (32 0 33 1 nil 0) (32 0 33 2 nil 0) (36 0 34 0 nil 0) (42 0 35 0 nil 0) (43 0 35 1 nil 0) (38 0 36 0 nil 0) (42 0 36 1 nil 0) (35 0 36 2 nil 4) (37 0 38 0 nil 0) (43 0 38 1 nil 0) (47 0 39 0 nil 0) (50 0 40 0 nil 0) (46 0 41 0 nil 0) (41 0 42 0 nil 7) (40 0 42 1 nil 6) (39 0 42 2 ((om-make-point 655 307.0) (om-make-point 655 349.0) (om-make-point 628 384.0) (om-make-point 582 392)) 0) (44 0 43 0 nil 0) (51 0 44 0 nil 0) (46 0 44 1 nil 0) (51 0 46 0 nil 0) (45 0 46 1 nil 0) (48 0 47 0 nil 0) (52 0 47 1 ((om-make-point 218 216.0) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 606 179)) 3) (15 0 48 0 nil 0) (15 0 49 0 nil 0) (49 0 50 0 nil 0) (52 0 50 1 ((om-make-point 218 216.0) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 456 177)) 3) (17 0 51 0 nil 0) (52 0 51 1 nil 3) (14 0 52 0 nil 0) (54 0 53 0 nil 0) (55 0 54 0 nil 0) (59 0 55 0 nil 0) (57 0 56 0 nil 0) (58 0 57 0 nil 0) (21 0 57 1 nil 0) (33 0 57 2 nil 0) (2 0 58 0 nil 0) (60 0 59 0 nil 0) (4 0 60 0 nil 0) (56 1 61 0 nil 0) (56 0 62 0 nil 0))) 1 "voice->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 339 425.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 274 426.0) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 0 0 0 nil 0) (1 0 2 0 nil 0) (0 0 2 1 nil 0) (3 0 4 0 nil 0) (2 0 5 0 nil 0) (4 0 6 0 nil 0) (5 1 7 0 nil 0) (5 0 8 0 nil 0))) 1 "voices->samples" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-SAMPLES-FOLDER" (quote ircam-samples-folder) (quote ((om-load-inputfun (quote input-funbox) "Name of the composer" "X" nil))) (om-make-point 1109 78) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 929 33) (om-make-point 508 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 5)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 938 607) (om-make-point 539 164) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4722 7946 8310) (7950 8308) (7116 8310) (6990 7842 8286) (6926 7770 8052 8256) (8104) (8050 8260) (4104 8230) (8222) (7894) (3788) (3910) (3654 7108) (7812) (6068 7798 8082) (6844 7898) (6828 7200 7828) (6694 7238 7810 8130 8302) (3724 6702 7238 7864 8106) (4020 6828 7176 7400 8040) (4992 6918 7784 8104) (5758 6880 7794 8134) (4294 5164 6932 7798 8242) (5108 6284 7006 7638 7878 8062 8244 8398) (5158 6144 6844 7146 7718 8104) (4982 6244 6866 7748 8184 8356) (4748 5926 6696 7542 7884 8292) (4670 5862 6662 7468 7838 8276) (4702 5884 6570 7504 8080) (4590 5862 6580 7486 7762 8078) (4622 5836 6592 6950 7406 7736 8064 8278) (4642 5876 6564 7120 7496 8024 8240) (4696 5870 6582 7110 7470 7806 8024) (4740 5942 6630 7112 7552 7974) (4850 5960 6690 7170 7612 7948 8358) (4758 6014 6698 7178 7604 7882 8112 8354) (4844 6040 6710 7224 7618 7896) (4836 6044 6724 7256 7608 7914 8226) (4812 6016 6750 7236 7618 7922 8258) (4840 6018 6768 7220 7650 7936) (4904 6032 6756 7226 7660 7954) (4946 6046 6754 7234 7626 7938) (4928 6064 6750 7224 7636 7942) (4822 6054 6760 7254 7632 7946 8198) (4808 6058 6742 7272 7642 7946 8232) (4884 6056 6752 7246 7656 7956 8200) (4918 6060 6752 7246 7638 7960 8198) (4844 6054 6774 7232 7644 7964 8224) (4814 6046 6764 7220 7632 7960 8224) (4848 6062 6738 7236 7582 7962) (4860 6050 6738 7244 7968 8212) (4808 6020 6712 7244 7598 7974) (4812 6014 6712 7214 7614 7956 8194 8362) (4830 6016 6718 7212 7600 7918 8182) (4830 6018 6720 7218 7586 7908 8190) (4760 5990 6676 7188 7564 8178 8346) (4794 5994 6666 7198 7554 8186) (4806 5984 6672 7174 7554 7902 8190) (4772 5944 6632 7150 7562 7874 8144 8334) (4688 5892 6590 7006 7450 7762 8056 8344) (4766 5838 6602 7052 7706 7996 8312) (4704 5810 6580 7078 8008 8248) (4582 5808 6560 7036 7988 8220) (4752 5806 6962 7396 7642 7994 8220) (4716 5840 6970 7400 7628 7978 8208 8398) (4574 5842 6402 7034 7410 7692 7974 8238) (4714 5830 7044 7632 7976 8224) (4748 5804 6516 6948 7690 7980 8218 8388) (4584 5806 6512 7978 8266 8368) (4754 5802 7054 7776 7978 8206 8394) (4752 5764 6534 7126 7818 8010 8214) (4370 5666 6760 7670 8060 8196) (4498 6740 7442 8000 8192) (4320 5556 6188 6756 7154 7444 7928 8260) (4430 5626 6732 7444 7666 7960 8116 8356) (4282 5584 6732 7712 7986) (4284 5532 6738 7724 7934 8130) (4368 6118 6708 7112 7696 7944 8300) (4274 5584 6958 7704 7902 8302) (4402 6220 6726 7122 7720 8006 8250) (4240 5546 6720 7834 8108 8298) (4312 6218 6680 7152 7884 8112) (4282 5558 6578 7072 7774 8126 8384) (4434 6198 6628 7138 7716 8012 8146) (4392 5586 7046 7916 8152) (4332 5590 7062 7920 8138) (4402 5694 6774 7526 8012 8280) (4410 5678 6716 7338 7738 8038 8294) (4414 6804 8146 8270) (4216 5576 6758 7156 7900 8224) (4394 5490 6242 6920 7884 8100 8284) (4402 5508 6908 8114) (4532 6516 7306 8032 8302) (4548 6548 7220 7596 7888 8106 8332) (4672 6550 7430 7964) (4508 5750 6500 7020 7772 7968) (4386 5592 6794 7436 7952 8292) (4374 5554 6776 7508 7970 8332) (4376 5592 6256 6804 7560 8004) (5218 6272 7630 8028) (4152 5524 6138 6722 6950 7594 7874 8086) (5498 6228 6590 6978 7598 8058 8274) (4216 5468 6142 6706 7532 7872 8088) (4446 5344 6286 6960 7524 7866 8138) (4318 5424 6570 7368 7558 7986 8184) (5370 6458 7422 7660 8202) (4432 5290 5936 6438 7394 8020 8282) (4966 5946 7438 7938) (4070 5884 6468 7198 7746 8130) (4412 5048 6344 7102 7940 8232) (3778 5332 5874 6546 7136 8198) (4216 6100 7106) (4110 5882 7108 7560) (3890 5416 6124 7160) (4374 5922 7112 7804) (4628 5664 6518 7174 7708) (5536 6566 7202) (4038 5534 6568) (3972 5508 6600) (5490 6338 6614 7082) (5516 6618 7042) (3934 5482 6530) (4234 5430 6634) (4462 5510 6724) (4406 5500 6406) (4412 5478 6696) (4460 5540) (5538 6450) (3926 5478 6662) (5428 6628) (5406 6182) (3770 5490) (3892 5540) (3992 5424) (5526) (5668 6550 7060 7320 7758) (5464 6408 7204 7708 8070) (3934 5426 6338 7170 7442 7980 8128) (5482 6628 7188 7952 8114 8388) (4344 5578 6992 7388 8014) (4976 5888 6440 7140 7532 8068 8200 8396) (4964 6138 6868 7712 7990 8142 8302) (4848 5626 6368 7606 7906 8140) (4554 5730 6394 7902 8106 8330) (4360 5642 6368 7216 7554 7806 8072) (4378 5686 6318 7262 7516 8054 8332) (4414 5650 6366 7300 7588 8062 8310) (4434 5690 6310 7238 7566 8036) (4504 5628 6334 6796 7578 7794 8042) (4406 5632 6338 6848 7224 7556 7820 8032) (4458 5692 6244 7274 7582 8024 8202) (4534 5656 6378 7304 7586 7850 8066) (4492 5702 6374 6794 7254 7578 7834 8060 8272) (4462 5684 6374 7252 7594 7842 8066 8294) (4552 5696 6394 6786 7292 7588 7862 8080 8280) (4552 5728 6400 7300 7600 7872 8108 8314) (4642 5678 6424 7326 7604 7870 8098) (4554 5756 6450 7314 7646 7918 8128 8328) (4618 5738 6440 7338 7672 7924 8128 8346) (4632 5734 6450 7288 7660 7926 8158 8348) (4538 5780 6456 7332 7648 7932 8158 8348) (4604 5762 6448 6962 7314 7636 7932 8158 8366) (4686 5740 6468 7328 7666 7934 8172) (4550 5768 6460 7304 7642 7912 8158 8350) (4662 5726 6454 7312 7656 7896 8172) (4680 5728 6448 7340 7648 7852 8166 8380) (4546 5768 6454 6948 7344 7646 7922 8166 8342) (4624 5722 6442 6964 7342 7646 8152 8364) (4570 5742 6452 6948 7672 8166 8384) (4524 5792 6472 6960 7328 7682 7950 8180 8390) (4634 5748 6448 6980 7328 7654 7980 8160) (4624 5742 6458 6972 7290 7686 7932 8168) (4528 5726 6402 7324 7638 7922 8118 8398) (4612 5598 6390 6982 7902 8318) (4572 5664 6882 7820 8034) (5632 6828 7590 7760 8030 8252) (4462 5630 6398 6804 7688 8024) (4378 5642 6384 6794 7212 7668 7980 8250 8396) (4420 5662 7130 7974 8168 8390) (4416 5564 6304 6784 7472 7990 8122 8312) (4368 5650 6154 7390 8016 8306) (4390 6262 6618 7208 7850 8272) (4338 6186 6638 7102 7454 7636 7890 8288) (4428 6704 8242) (3986 5416 6522 6840 7412 7846 8046 8258) (4334 6184 6820 7816 8202) (4042 5338 6426 7142 7626 8100 8196) (4252 7432 8036 8248) (4190 5720 6456 6876 7386 8222) (4130 5606 6246 7418 8032 8252) (4098 5512 6530 7274 7980 8240) (4120 5596 7198 7972 8214 8366) (4174 6694 7146 7568 8040 8312) (4270 6192 7174 7942 8206) (4282 5522 6172 7058 7902 8140 8388) (4342 6904 7890 8090 8278) (4344 5666 6812 8028 8232) (4452 5612 6816 7170 7640 8080) (4404 5596 6298 7108 7452 7720 8038 8198 8388) (4348 5754 6128 6796 7162 7962 8282) (4312 6154 6656 7402 8020 8354) (4300 6154 6640 7496 8058 8318) (4368 5582 6218 6632 6970 7444 7946 8148) (4326 5492 6282 7138 7970 8298) (4386 5698 6246 6852 7152 7548 7802 7976 8270) (4366 5506 6746 7476 7946 8390) (4286 5488 6180 6720 7134 7858 8068) (4236 5576 6138 6766 7008 7434 7712 8158) (4372 5482 6202 7114 7606 7972) (4136 5468 6204 6658 7070 7464 7906) (5364 7064 7834 8116) (4060 5430 6182 7022 7596 7802 8028 8246 8354) (4440 5446 6994 7538 7912) (4124 5398 6162 6984 7332 7620 7782 7982 8228) (4312 5502 6982 7548 7988) (4320 5324 6144 7008 7610 7994) (4174 5540 6946 7548 8030) (4366 5144 5952 6928 7366 7942) (4166 5698 7054 7638 7974) (4140 5918 6600 7144 7722 8016 8218) (4206 6060 7118 7530 7916) (4060 5902 6422 6776 7242 7900 8112) (4204 5966 7006 7308 7874 8024) (4140 5968 6628 7070 7880) (4124 5844 7096 7884 8136) (4094 5542 6148 7106 7844 8126) (4062 6810 7836) (4138 6234 7042 7872) (4014 5576 7130 7866) (4034 5494 6228 6674 7114 7640 7894) (4060 7106 7618) (4070 5526 7212 7526) (4034 5416 6432) (4010 5360 6180) (3926 5410 7068) (4236 5506) (4788 5568) (4382 5622) (4360 5490 6268) (4122 5604) (5360 6208) (5448) (5440) (3754 5638) (3936 5472 6188) (3986 5598) (4200 5522) (4430) (4148 5294 5922) (4092 5498) (3992 5546) (5606) (5394) (5394) (5382) (5382) (5382))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000 116000 117000 118000 119000 120000 121000 122000 123000 124000 125000 126000 127000 128000 129000 130000 131000 132000 133000 134000 135000 136000 137000 138000 139000 140000 141000 142000 143000 144000 145000 146000 147000 148000 149000 150000 151000 152000 153000 154000 155000 156000 157000 158000 159000 160000 161000 162000 163000 164000 165000 166000 167000 168000 169000 170000 171000 172000 173000 174000 175000 176000 177000 178000 179000 180000 181000 182000 183000 184000 185000 186000 187000 188000 189000 190000 191000 192000 193000 194000 195000 196000 197000 198000 199000 200000 201000 202000 203000 204000 205000 206000 207000 208000 209000 210000 211000 212000 213000 214000 215000 216000 217000 218000 219000 220000 221000 222000 223000 224000 225000 226000 227000 228000 229000 230000 231000 232000 233000 234000 235000 236000 237000 238000 239000 240000 241000 242000 243000 244000 245000 246000 247000 248000 249000 250000 251000 252000 253000 254000 255000 256000 256005)) :ldur (quote ((5 5 5) (5 5) (5 5) (5 5 5) (5 5 5 5) (5) (5 5) (5 5) (5) (5) (5) (5) (5 5) (5) (5 5 5) (5 5) (5 5 5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5) (5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5) (5 5 5 5) (5 5 5 5) (5 5 5 5) (5 5 5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5) (5 5) (5 5 5) (5 5) (5 5) (5 5) (5 5) (5 5) (5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5 5) (5 5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5) (5 5 5 5 5 5) (5 5 5) (5 5 5 5) (5 5 5 5) (5 5 5 5 5 5 5) (5 5 5) (5 5 5 5) (5 5 5) (5 5 5) (5 5 5) (5 5) (5 5) (5 5) (5 5 5) (5 5) (5 5) (5) (5) (5 5) (5 5 5) (5 5) (5 5) (5) (5 5 5) (5 5) (5 5) (5) (5) (5) (5) (5) (5))) :lvel (quote ((1 1 1) (1 1) (1 1) (1 1 1) (1 1 1 1) (1) (1 1) (1 1) (1) (1) (1) (1) (1 1) (1) (1 1 1) (1 1) (1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1) (1 4 1 1) (1 1 4 1 1) (6 4 4 1 1 1 1 1) (15 6 4 4 1 1) (26 12 9 1 1 6) (34 17 15 1 1 4) (36 26 20 1 1 4) (34 34 20 1 4) (34 42 26 4 1 6) (23 39 28 6 4 4 6 1) (20 39 26 4 4 9 4) (20 45 28 6 4 1 6) (17 39 23 6 1 6) (17 39 20 6 1 4 1) (17 39 20 6 4 4 4 1) (17 39 23 6 4 4) (17 45 17 6 4 6 1) (15 50 12 6 4 4 1) (12 50 12 6 4 4) (9 47 12 6 4 4) (9 45 15 9 4 4) (9 45 15 6 4 6) (12 45 15 6 4 6 1) (12 45 15 6 4 6 1) (9 42 17 6 4 6 1) (12 42 15 6 4 6 1) (12 39 15 6 4 6 1) (15 39 15 6 4 6 1) (12 36 17 6 1 9) (12 36 23 6 9 1) (12 36 23 6 4 9) (12 39 20 6 4 6 4 1) (12 42 20 9 4 4 4) (15 42 20 9 4 4 6) (15 42 20 6 4 6 1) (15 39 17 6 4 9) (15 39 17 6 4 1 6) (15 39 17 4 4 1 4 4) (15 34 15 6 4 1 4 4) (12 31 12 6 1 4 6) (12 28 12 6 4 6) (15 34 12 6 4 4) (15 31 4 1 1 4 4) (15 36 6 1 1 4 4 4) (20 42 9 6 1 1 4 4) (15 36 6 1 4 4) (17 34 12 6 1 4 4 4) (20 42 12 4 4 4) (17 36 4 1 4 4 1) (17 31 9 4 1 4 4) (17 23 12 1 4 4) (17 12 1 4 4) (23 20 15 12 4 1 4 4) (23 31 9 1 1 4 4 1) (23 31 6 1 4) (23 20 6 1 4 4) (26 9 4 4 1 4 1) (26 20 4 1 4 1) (26 6 4 4 1 1 4) (23 15 4 1 4 1) (23 4 4 1 1 4) (23 9 4 1 1 4 1) (23 4 4 1 1 1 1) (20 6 1 1 1) (17 9 4 1 1) (15 12 4 1 4 4) (12 6 4 1 1 4 4) (12 4 4 4) (12 6 4 1 1 4) (12 6 4 1 1 4 4) (15 6 1 4) (17 4 1 4 1) (23 4 1 1 1 4 1) (23 6 1 4) (28 20 9 6 4 4) (26 26 9 4 6 1) (23 23 15 1 6 1) (23 23 9 15 1 6) (23 15 1 4) (17 26 23 15 6 4 4 4) (28 17 17 9 4 4 1) (15 28 15 17 1 4 4) (15 28 12 9 4 4 4) (15 31 15 4 4 1 4) (26 15 1 1 4) (12 17 15 15 1 4 4) (12 17 1 1) (12 15 12 4 1 1) (15 15 12 4 1 1) (12 12 6 6 4 1) (15 6 4) (12 6 1 1) (9 6 6 1) (6 4 1 1) (4 6 1 1 1) (6 4 1) (4 6 4) (4 4 4) (6 1 1 1) (4 1 1) (1 4 4) (1 4 1) (1 4 1) (1 4 1) (1 4 1) (1 1) (1 1) (1 4 1) (4 1) (4 1) (1 1) (1 1) (1 1) (1) (1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 4 1 1) (4 1 1 1 1 1 1 1) (9 6 4 1 1 1 1) (15 12 12 1 1 4) (17 20 17 1 4 1) (20 23 23 4 1 1 4) (23 26 23 4 4 4 1) (26 28 26 4 4 6 1) (26 26 20 4 4 6) (20 28 20 6 4 4 6) (23 31 23 6 4 4 4 4) (26 28 23 4 4 4 1) (23 31 26 4 4 4 4) (23 31 28 6 4 4 4 4 1) (26 31 26 4 4 4 4 1) (26 34 26 6 4 4 4 1 1) (26 34 26 1 4 4 4 1) (23 31 23 1 1 4 4) (26 36 26 4 1 4 4 1) (23 34 26 4 1 4 4 1) (20 31 26 4 1 4 4 1) (26 34 28 4 4 4 4 1) (20 31 28 6 4 4 4 4 1) (20 31 28 4 4 4 4) (23 34 31 4 4 4 6 4) (20 31 31 4 4 4 6) (20 31 31 4 4 1 6 4) (23 34 31 6 4 4 1 6 4) (20 28 31 6 4 4 4 4) (20 28 31 6 4 4 4) (26 31 31 6 4 4 4 4 4) (23 26 31 4 4 4 1 4) (23 26 28 4 4 1 1 4) (23 26 23 1 1 1 1 4) (20 26 12 4 1 1) (17 28 6 1 1) (28 6 1 1 1 1) (20 28 9 6 1 1) (20 31 12 9 4 1 1 1 4) (20 31 4 1 1 4) (23 31 17 9 1 1 1 4) (23 23 17 4 1 4) (26 15 9 4 1 4) (28 17 9 4 4 1 1 4) (26 9 4) (26 23 9 9 1 4 1 4) (28 9 6 4 4) (28 15 6 1 1 4 4) (28 1 1 4) (26 15 4 4 1 1) (26 12 6 1 1 1) (23 9 6 1 4 4) (20 12 1 1 1 1) (17 4 1 1 1 1) (15 4 1 1 1) (15 4 4 1 1 1 1) (15 4 1 1 1) (15 6 4 1 1) (15 6 4 1 1 1) (15 6 4 1 1 1 1 1 1) (15 9 6 4 4 4 1) (15 9 6 1 4 1) (17 9 6 1 4 1) (17 9 6 4 4 1 4 1) (17 6 4 4 4 1) (20 9 9 4 4 1 1 4 1) (17 12 6 1 4 1) (17 17 9 6 4 4 1) (20 20 12 6 6 1 4 1) (23 23 9 6 1 4) (20 26 12 6 9 1 4) (26 9 4 4) (20 28 12 9 1 4 4 1 1) (20 28 6 1 4) (17 28 12 6 4 4 4 4 1) (20 26 6 4 4) (20 26 12 6 4 4) (20 23 6 4 4) (20 20 12 6 4 4) (20 15 4 4 4) (20 15 4 4 1 4 1) (23 9 4 1 4) (26 6 4 1 4 4 1) (26 6 1 1 1 1) (26 6 1 1 1) (23 6 1 1 1) (20 4 4 1 1 1) (17 1 4) (17 1 1 1) (15 4 1 1) (12 4 1 1 1 1 1) (9 1 1) (6 4 1 1) (4 4 1) (4 4 1) (4 4 1) (4 4) (4 4) (1 4) (4 4 1) (1 4) (4 1) (1) (1) (1 1) (1 1 1) (1 1) (1 1) (1) (1 1 1) (1 1) (1 1) (1) (1) (1) (1) (1) (1))) :loffset (quote ((0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((274 274 328) (328 300) (24 24) (274 274 300) (425 274 328 24) (328) (300 271) (274 271) (328) (274) (300) (271) (425 20) (328) (300 300 271) (20 24) (271 300 271) (271 20 271 328 328) (300 20 274 24 328) (274 425 425 300 328) (300 20 271 271) (271 118 20 300) (274 497 20 20 328) (300 328 425 271 274 328 271 300) (271 20 425 271 300 300) (425 40 20 300 271 328) (425 20 425 425 300 300) (425 497 24 20 328 328) (274 40 425 271 328) (271 271 271 425 271 300) (497 271 271 425 425 328 328 271) (425 118 328 274 328 300 328) (425 274 425 300 425 274 300) (274 40 300 425 300 118) (425 271 20 328 271 271 328) (271 118 118 425 274 300 271 300) (497 20 328 425 328 274) (25 20 118 425 274 328 328) (25 425 271 300 425 271 271) (300 300 274 425 274 300) (300 274 274 300 20 118) (271 328 271 328 425 271) (425 425 20 20 271 274) (300 274 20 274 20 328 300) (425 497 24 425 328 271 271) (271 40 425 271 274 300 328) (497 328 20 271 20 271 328) (425 40 300 425 271 328 271) (300 300 20 20 328 328 328) (271 497 300 271 274 328) (118 118 328 328 118 328) (274 300 271 300 300 328) (274 425 271 300 300 274 300 300) (300 300 300 328 271 328 271) (274 20 300 425 300 300 328) (25 271 425 20 328 271 24) (271 40 20 328 271 300) (25 425 425 300 300 300 300) (25 274 20 328 425 328 328 300) (497 300 118 20 271 274 328 328) (300 328 300 425 300 300 300) (274 300 271 274 118 271) (425 274 328 425 300 271) (25 497 274 425 300 328 271) (497 40 300 425 274 271 300 328) (274 328 497 274 20 271 328 300) (300 118 328 271 300 271) (497 497 20 274 271 271 328 300) (271 118 300 300 24 300) (274 274 425 274 300 328 300) (25 274 118 24 300 118 271) (300 300 300 271 300 300) (271 24 20 274 300) (300 425 271 328 328 20 300 24) (271 118 300 271 271 271 300 300) (274 497 300 328 274) (271 25 425 20 274 328) (497 40 425 20 271 271 24) (274 497 274 328 271 300) (300 497 425 274 274 274 328) (274 300 274 271 300 328) (425 40 24 20 271 271) (425 274 274 425 274 328 300) (497 118 118 425 274 118 271) (497 274 274 328 328) (300 274 328 300 271) (274 118 271 24 118 300) (271 274 328 328 271 271 24) (274 20 300 24) (425 497 328 300 328 300) (274 271 20 425 24 328 24) (271 118 274 328) (300 274 425 271 300) (300 40 300 328 300 300 271) (271 271 300 274) (425 40 300 425 328 328) (300 118 118 274 118 271) (497 25 118 271 300 328) (271 25 300 328 271 271) (25 20 300 328) (497 328 497 328 271 271 24 271) (328 271 328 274 425 300 24) (271 271 271 118 425 274 328) (497 300 271 425 20 24 271) (271 271 271 425 271 271 300) (497 271 300 271 300) (274 300 425 425 271 118 328) (271 271 274 271) (274 328 300 20 300 271) (497 25 497 274 300 271) (425 271 24 274 24 271) (425 271 274) (497 300 425 425) (271 271 497 271) (425 40 300 271) (425 271 300 425 328) (25 118 20) (497 118 425) (300 300 425) (300 274 40 20) (425 271 274) (425 425 271) (274 497 425) (300 328 271) (425 425 118) (271 118 118) (271 274) (328 20) (300 118 328) (497 328) (497 497) (425 25) (425 25) (274 300) (25) (300 20 425 300 328) (328 40 425 20 271) (271 300 40 300 271 271 300) (118 274 271 118 328 300) (274 425 300 425 118) (25 300 497 20 300 328 271 328) (300 425 20 274 274 300 328) (300 497 300 274 274 271) (425 271 118 274 300 271) (497 328 328 328 271 274 328) (274 425 118 328 20 328 300) (271 274 328 20 425 328 24) (497 300 300 274 274 271) (300 118 328 328 20 20 300) (300 25 118 328 20 328 20 328) (497 328 300 300 20 274 300) (274 274 274 328 274 274 271) (300 497 497 300 20 20 271 328 328) (497 274 274 271 271 271 271 271) (300 25 40 274 300 425 274 300 24) (497 271 328 328 300 271 271 328) (300 425 40 328 20 24 328) (497 271 20 328 328 328 300 328) (425 118 497 118 274 300 328 24) (425 25 271 118 271 300 300 24) (425 118 40 271 274 24 328 24) (497 274 300 425 271 20 24 328 300) (274 328 20 271 300 300 300) (497 271 20 118 271 328 328 328) (271 25 40 20 274 274 271) (274 274 328 118 271 271 271 328) (425 497 40 274 300 425 300 328 300) (425 300 425 271 274 300 328 300) (497 118 328 118 328 328 328) (300 425 40 274 274 271 274 271 328) (274 118 118 425 300 328 328 300) (425 118 40 274 300 20 271 271) (497 118 20 425 20 271 328 328) (271 118 425 425 271 271) (425 425 118 20 118) (300 328 328 328 328 271) (425 271 118 118 20 328) (425 118 40 300 300 300 118 24 328) (497 271 274 300 271 328) (300 271 274 20 425 328 300 24) (274 271 271 328 271 24) (425 497 271 300 300 271) (497 40 425 24 24 300 328 328) (425 300 300) (271 271 20 118 425 300 274 24) (300 425 271 20 271) (497 25 271 328 271 328 300) (271 274 118 300) (271 328 118 328 20 271) (497 25 300 274 271 271) (300 328 271 271 300 328) (271 118 20 271 271 328) (497 24 300 271 274 300) (300 328 20 24 328) (271 274 274 20 271 271 300) (497 274 271 271 300) (425 25 425 328 300) (271 25 20 425 274 328) (274 425 328 300 271 328 118 300 300) (425 328 300 425 300 328 24) (425 274 20 300 271 328) (425 20 20 300 328 271) (497 425 271 425 274 274 328 271) (274 271 274 300 118 300) (274 425 274 20 425 24 300 118 328) (274 425 274 274 300 328) (271 497 497 118 425 328 328) (300 274 274 271 425 425 300 300) (271 425 328 20 271 328) (274 271 425 274 425 274 271) (425 328 271 271) (271 300 328 20 20 274 300 328 328) (425 25 300 24 300) (425 300 40 274 274 300 274 300 328) (274 118 271 271 271) (497 425 300 274 20 300) (300 425 300 20 300) (497 274 425 300 328 300) (425 328 300 425 300) (425 40 328 425 20 328 328) (425 300 274 328 274) (497 25 328 271 274 24 300) (300 328 271 274 24 328) (425 300 300 271 274) (271 425 425 328 300) (425 118 118 274 274 300) (300 118 20) (271 274 300 271) (271 328 271 300) (300 274 274 300 300 300 274) (425 425 274) (300 25 271 328) (497 425 40) (274 118 271) (271 25 20) (300 300) (497 497) (274 497) (300 300 274) (271 271) (25 271) (274) (118) (271 25) (300 271 118) (271 497) (271 118) (497) (425 274 24) (425 274) (425 300) (425) (425) (271) (300) (300) (300))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0) (0 0) (0 0 0) (0 0 0 0) (0) (0 0) (0 0) (0) (0) (0) (0) (0 0) (0) (0 0 0) (0 0) (0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0 0 0 0) (0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0 0) (0) (0) (0 0) (0 0 0) (0 0) (0 0) (0) (0 0 0) (0 0) (0 0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 10 nil 1000 0 (om-make-point 1268 640) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 100 242) (om-make-point 47 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 76 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 282 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 299 134) (om-make-point 46 32) 1500 "1500" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 229 188) (om-make-point 92 31.75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 151 425) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 106 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 614 475)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1363/4 807/2) nil (list (list (quote ?) (list (list (list 4 4) (list (list 1 (list 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 5)) (list 1 (list 2.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 3)) (list 1 (list 4.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1)) (list 1 (list 6.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6)))) (list (list 4 4) (list (list 1 (list 1.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 4)) (list 1 (list 3.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 2)) (list 1 (list 5.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)) (list 1 (list 7 7 7 7 7 215)))) (list (list 4 4) (list 3.0 (list 1 (list 18.0 -107))))))) nil "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 137 469) (om-make-point 769 207) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 4 1.0)) (1 (2.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 3)) (1 (4.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 1)) (1 (6.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6)))) ((4 4) ((1 (1.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 4)) (1 (3.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 2)) (1 (4.0 1.0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)) (1 (7 7 7 7 7 192 16.0 7.0)))) ((4 4) (3.0 (1 (16.0 2.0 -96 -8.0 -3.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4722 7946 8310)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (274 274 328))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7950 8308)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (328 300))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7116 8310)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (24 24))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6990 7842 8286)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (274 274 300))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6926 7770 8052 8256)) :ldur (quote (7 7 7 7)) :lvel (quote (1 1 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (425 274 328 24))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8104)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8050 8260)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (300 271))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4104 8230)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (274 271))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (8222)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7894)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (274))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3788)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3910)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (271))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3654 7108)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (425 20))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7812)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6068 7798 8082)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (300 300 271))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6844 7898)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (20 24))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6828 7200 7828)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (271 300 271))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6694 7238 7810 8130 8302)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (271 20 271 328 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3724 6702 7238 7864 8106)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 20 274 24 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4020 6828 7176 7400 8040)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 425 425 300 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4992 6918 7784 8104)) :ldur (quote (7 7 7 7)) :lvel (quote (1 1 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (300 20 271 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5758 6880 7794 8134)) :ldur (quote (7 7 7 7)) :lvel (quote (1 4 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (271 118 20 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4294 5164 6932 7798 8242)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 4 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 497 20 20 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5108 6284 7006 7638 7878 8062 8244 8398)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (6 4 4 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (300 328 425 271 274 328 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5158 6144 6844 7146 7718 8104)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 6 4 4 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 20 425 271 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4982 6244 6866 7748 8184 8356)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 12 9 1 1 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 40 20 300 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4748 5926 6696 7542 7884 8292)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (34 17 15 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 20 425 425 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4670 5862 6662 7468 7838 8276)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (36 26 20 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 497 24 20 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4702 5884 6570 7504 8080)) :ldur (quote (7 7 7 7 7)) :lvel (quote (34 34 20 1 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 40 425 271 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4590 5862 6580 7486 7762 8078)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (34 42 26 4 1 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 271 271 425 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4622 5836 6592 6950 7406 7736 8064 8278)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 39 28 6 4 4 6 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 271 271 425 425 328 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4642 5876 6564 7120 7496 8024 8240)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 39 26 4 4 9 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 118 328 274 328 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4696 5870 6582 7110 7470 7806 8024)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 45 28 6 4 1 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 274 425 300 425 274 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4740 5942 6630 7112 7552 7974)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 39 23 6 1 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 40 300 425 300 118))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4850 5960 6690 7170 7612 7948 8358)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (17 39 20 6 1 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 271 20 328 271 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4758 6014 6698 7178 7604 7882 8112 8354)) :ldur (quote (4 4 4 4 4 4 4 4)) :lvel (quote (17 39 20 6 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (271 118 118 425 274 300 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4844 6040 6710 7224 7618 7896)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 39 23 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 20 328 425 328 274))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4836 6044 6724 7256 7608 7914 8226)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (17 45 17 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 20 118 425 274 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4812 6016 6750 7236 7618 7922 8258)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 50 12 6 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 425 271 300 425 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4840 6018 6768 7220 7650 7936)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 50 12 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 300 274 425 274 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4904 6032 6756 7226 7660 7954)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (9 47 12 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 274 274 300 20 118))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4946 6046 6754 7234 7626 7938)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (9 45 15 9 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 328 271 328 425 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4928 6064 6750 7224 7636 7942)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (9 45 15 6 4 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 425 20 20 271 274))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4822 6054 6760 7254 7632 7946 8198)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 45 15 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 274 20 274 20 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4808 6058 6742 7272 7642 7946 8232)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 45 15 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 497 24 425 328 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4884 6056 6752 7246 7656 7956 8200)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (9 42 17 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 40 425 271 274 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4918 6060 6752 7246 7638 7960 8198)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 42 15 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 328 20 271 20 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4844 6054 6774 7232 7644 7964 8224)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 39 15 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 40 300 425 271 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4814 6046 6764 7220 7632 7960 8224)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 39 15 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 300 20 20 328 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4848 6062 6738 7236 7582 7962)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 36 17 6 1 9)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 497 300 271 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4860 6050 6738 7244 7968 8212)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 36 23 6 9 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (118 118 328 328 118 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4808 6020 6712 7244 7598 7974)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 36 23 6 4 9)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 300 271 300 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4812 6014 6712 7214 7614 7956 8194 8362)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (12 39 20 6 4 6 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (274 425 271 300 300 274 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4830 6016 6718 7212 7600 7918 8182)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 42 20 9 4 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 300 300 328 271 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4830 6018 6720 7218 7586 7908 8190)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 42 20 9 4 4 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 20 300 425 300 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4760 5990 6676 7188 7564 8178 8346)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 42 20 6 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 271 425 20 328 271 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4794 5994 6666 7198 7554 8186)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 39 17 6 4 9)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 40 20 328 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4806 5984 6672 7174 7554 7902 8190)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 39 17 6 4 1 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 425 425 300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4772 5944 6632 7150 7562 7874 8144 8334)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (15 39 17 4 4 1 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (25 274 20 328 425 328 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4688 5892 6590 7006 7450 7762 8056 8344)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (15 34 15 6 4 1 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 300 118 20 271 274 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4766 5838 6602 7052 7706 7996 8312)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 31 12 6 1 4 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 328 300 425 300 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4704 5810 6580 7078 8008 8248)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 28 12 6 4 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 300 271 274 118 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4582 5808 6560 7036 7988 8220)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 34 12 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 274 328 425 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4752 5806 6962 7396 7642 7994 8220)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 31 4 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 497 274 425 300 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4716 5840 6970 7400 7628 7978 8208 8398)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (15 36 6 1 1 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 40 300 425 274 271 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4574 5842 6402 7034 7410 7692 7974 8238)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (20 42 9 6 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (274 328 497 274 20 271 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4714 5830 7044 7632 7976 8224)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 36 6 1 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 118 328 271 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4748 5804 6516 6948 7690 7980 8218 8388)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (17 34 12 6 1 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 497 20 274 271 271 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4584 5806 6512 7978 8266 8368)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 42 12 4 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 118 300 300 24 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4754 5802 7054 7776 7978 8206 8394)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (17 36 4 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 274 425 274 300 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4752 5764 6534 7126 7818 8010 8214)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (17 31 9 4 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (25 274 118 24 300 118 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4370 5666 6760 7670 8060 8196)) :ldur (quote (3 3 3 3 3 3)) :lvel (quote (17 23 12 1 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 300 300 271 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4498 6740 7442 8000 8192)) :ldur (quote (7 7 7 7 7)) :lvel (quote (17 12 1 4 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (271 24 20 274 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4320 5556 6188 6756 7154 7444 7928 8260)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 20 15 12 4 1 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (300 425 271 328 328 20 300 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4430 5626 6732 7444 7666 7960 8116 8356)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 31 9 1 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (271 118 300 271 271 271 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4282 5584 6732 7712 7986)) :ldur (quote (7 7 7 7 7)) :lvel (quote (23 31 6 1 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 497 300 328 274))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4284 5532 6738 7724 7934 8130)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 20 6 1 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 25 425 20 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4368 6118 6708 7112 7696 7944 8300)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (26 9 4 4 1 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 40 425 20 271 271 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4274 5584 6958 7704 7902 8302)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 20 4 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 497 274 328 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4402 6220 6726 7122 7720 8006 8250)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (26 6 4 4 1 1 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 497 425 274 274 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4240 5546 6720 7834 8108 8298)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 15 4 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 300 274 271 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312 6218 6680 7152 7884 8112)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 4 4 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 40 24 20 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4282 5558 6578 7072 7774 8126 8384)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 9 4 1 1 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 274 274 425 274 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4434 6198 6628 7138 7716 8012 8146)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 4 4 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 118 118 425 274 118 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4392 5586 7046 7916 8152)) :ldur (quote (7 7 7 7 7)) :lvel (quote (20 6 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (497 274 274 328 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4332 5590 7062 7920 8138)) :ldur (quote (7 7 7 7 7)) :lvel (quote (17 9 4 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 274 328 300 271))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4402 5694 6774 7526 8012 8280)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 12 4 1 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 118 271 24 118 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4410 5678 6716 7338 7738 8038 8294)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 6 4 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 274 328 328 271 271 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4414 6804 8146 8270)) :ldur (quote (7 7 7 7)) :lvel (quote (12 4 4 4)) :loffset (quote (0 0 0 0)) :lchan (quote (274 20 300 24))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4216 5576 6758 7156 7900 8224)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 6 4 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 497 328 300 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4394 5490 6242 6920 7884 8100 8284)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 6 4 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 271 20 425 24 328 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4402 5508 6908 8114)) :ldur (quote (7 7 7 7)) :lvel (quote (15 6 1 4)) :loffset (quote (0 0 0 0)) :lchan (quote (271 118 274 328))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4532 6516 7306 8032 8302)) :ldur (quote (7 7 7 7 7)) :lvel (quote (17 4 1 4 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 274 425 271 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4548 6548 7220 7596 7888 8106 8332)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 4 1 1 1 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 40 300 328 300 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4672 6550 7430 7964)) :ldur (quote (7 7 7 7)) :lvel (quote (23 6 1 4)) :loffset (quote (0 0 0 0)) :lchan (quote (271 271 300 274))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4508 5750 6500 7020 7772 7968)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (28 20 9 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 40 300 425 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4386 5592 6794 7436 7952 8292)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 26 9 4 6 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 118 118 274 118 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4374 5554 6776 7508 7970 8332)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 23 15 1 6 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 25 118 271 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4376 5592 6256 6804 7560 8004)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 23 9 15 1 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 25 300 328 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5218 6272 7630 8028)) :ldur (quote (7 7 7 7)) :lvel (quote (23 15 1 4)) :loffset (quote (0 0 0 0)) :lchan (quote (25 20 300 328))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4152 5524 6138 6722 6950 7594 7874 8086)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (17 26 23 15 6 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 328 497 328 271 271 24 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5498 6228 6590 6978 7598 8058 8274)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (28 17 17 9 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (328 271 328 274 425 300 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4216 5468 6142 6706 7532 7872 8088)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 28 15 17 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 271 271 118 425 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4446 5344 6286 6960 7524 7866 8138)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 28 12 9 4 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 300 271 425 20 24 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4318 5424 6570 7368 7558 7986 8184)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 31 15 4 4 1 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 271 271 425 271 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5370 6458 7422 7660 8202)) :ldur (quote (7 7 7 7 7)) :lvel (quote (26 15 1 1 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (497 271 300 271 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4432 5290 5936 6438 7394 8020 8282)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 17 15 15 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 300 425 425 271 118 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4966 5946 7438 7938)) :ldur (quote (1 1 1 1)) :lvel (quote (12 17 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (271 271 274 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4070 5884 6468 7198 7746 8130)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 15 12 4 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 328 300 20 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4412 5048 6344 7102 7940 8232)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 15 12 4 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 25 497 274 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3778 5332 5874 6546 7136 8198)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (12 12 6 6 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 271 24 274 24 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4216 6100 7106)) :ldur (quote (7 7 7)) :lvel (quote (15 6 4)) :loffset (quote (0 0 0)) :lchan (quote (425 271 274))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4110 5882 7108 7560)) :ldur (quote (7 7 7 7)) :lvel (quote (12 6 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (497 300 425 425))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3890 5416 6124 7160)) :ldur (quote (7 7 7 7)) :lvel (quote (9 6 6 1)) :loffset (quote (0 0 0 0)) :lchan (quote (271 271 497 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4374 5922 7112 7804)) :ldur (quote (7 7 7 7)) :lvel (quote (6 4 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (425 40 300 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4628 5664 6518 7174 7708)) :ldur (quote (7 7 7 7 7)) :lvel (quote (4 6 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 271 300 425 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5536 6566 7202)) :ldur (quote (7 7 7)) :lvel (quote (6 4 1)) :loffset (quote (0 0 0)) :lchan (quote (25 118 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4038 5534 6568)) :ldur (quote (7 7 7)) :lvel (quote (4 6 4)) :loffset (quote (0 0 0)) :lchan (quote (497 118 425))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3972 5508 6600)) :ldur (quote (7 7 7)) :lvel (quote (4 4 4)) :loffset (quote (0 0 0)) :lchan (quote (300 300 425))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5490 6338 6614 7082)) :ldur (quote (7 7 7 7)) :lvel (quote (6 1 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (300 274 40 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5516 6618 7042)) :ldur (quote (7 7 7)) :lvel (quote (4 1 1)) :loffset (quote (0 0 0)) :lchan (quote (425 271 274))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3934 5482 6530)) :ldur (quote (7 7 7)) :lvel (quote (1 4 4)) :loffset (quote (0 0 0)) :lchan (quote (425 425 271))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4234 5430 6634)) :ldur (quote (7 7 7)) :lvel (quote (1 4 1)) :loffset (quote (0 0 0)) :lchan (quote (274 497 425))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4462 5510 6724)) :ldur (quote (7 7 7)) :lvel (quote (1 4 1)) :loffset (quote (0 0 0)) :lchan (quote (300 328 271))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4406 5500 6406)) :ldur (quote (7 7 7)) :lvel (quote (1 4 1)) :loffset (quote (0 0 0)) :lchan (quote (425 425 118))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4412 5478 6696)) :ldur (quote (7 7 7)) :lvel (quote (1 4 1)) :loffset (quote (0 0 0)) :lchan (quote (271 118 118))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4460 5540)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (271 274))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5538 6450)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (328 20))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3926 5478 6662)) :ldur (quote (7 7 7)) :lvel (quote (1 4 1)) :loffset (quote (0 0 0)) :lchan (quote (300 118 328))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5428 6628)) :ldur (quote (7 7)) :lvel (quote (4 1)) :loffset (quote (0 0)) :lchan (quote (497 328))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5406 6182)) :ldur (quote (7 7)) :lvel (quote (4 1)) :loffset (quote (0 0)) :lchan (quote (497 497))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3770 5490)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (425 25))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3892 5540)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (425 25))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3992 5424)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (274 300))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5526)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5668 6550 7060 7320 7758)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 20 425 300 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5464 6408 7204 7708 8070)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (328 40 425 20 271))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3934 5426 6338 7170 7442 7980 8128)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (1 1 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 300 40 300 271 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5482 6628 7188 7952 8114 8388)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (1 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (118 274 271 118 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4344 5578 6992 7388 8014)) :ldur (quote (7 7 7 7 7)) :lvel (quote (1 1 4 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 425 300 425 118))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4976 5888 6440 7140 7532 8068 8200 8396)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (4 1 1 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (25 300 497 20 300 328 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4964 6138 6868 7712 7990 8142 8302)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (9 6 4 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 425 20 274 274 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4848 5626 6368 7606 7906 8140)) :ldur (quote (6 6 6 6 6 6)) :lvel (quote (15 12 12 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 497 300 274 274 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4554 5730 6394 7902 8106 8330)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 20 17 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 271 118 274 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4360 5642 6368 7216 7554 7806 8072)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 23 23 4 1 1 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 328 328 328 271 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4378 5686 6318 7262 7516 8054 8332)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 26 23 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 425 118 328 20 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4414 5650 6366 7300 7588 8062 8310)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (26 28 26 4 4 6 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 274 328 20 425 328 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4434 5690 6310 7238 7566 8036)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 26 20 4 4 6)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 300 300 274 274 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4504 5628 6334 6796 7578 7794 8042)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 28 20 6 4 4 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 118 328 328 20 20 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4406 5632 6338 6848 7224 7556 7820 8032)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 31 23 6 4 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (300 25 118 328 20 328 20 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4458 5692 6244 7274 7582 8024 8202)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (26 28 23 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 328 300 300 20 274 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4534 5656 6378 7304 7586 7850 8066)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 31 26 4 4 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 274 274 328 274 274 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4492 5702 6374 6794 7254 7578 7834 8060 8272)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (23 31 28 6 4 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (300 497 497 300 20 20 271 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4462 5684 6374 7252 7594 7842 8066 8294)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (26 31 26 4 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 274 274 271 271 271 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4552 5696 6394 6786 7292 7588 7862 8080 8280)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (26 34 26 6 4 4 4 1 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (300 25 40 274 300 425 274 300 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4552 5728 6400 7300 7600 7872 8108 8314)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (26 34 26 1 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 271 328 328 300 271 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4642 5678 6424 7326 7604 7870 8098)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (23 31 23 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 425 40 328 20 24 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4554 5756 6450 7314 7646 7918 8128 8328)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (26 36 26 4 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 271 20 328 328 328 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4618 5738 6440 7338 7672 7924 8128 8346)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 34 26 4 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (425 118 497 118 274 300 328 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4632 5734 6450 7288 7660 7926 8158 8348)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (20 31 26 4 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (425 25 271 118 271 300 300 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4538 5780 6456 7332 7648 7932 8158 8348)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (26 34 28 4 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (425 118 40 271 274 24 328 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4604 5762 6448 6962 7314 7636 7932 8158 8366)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (20 31 28 6 4 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (497 274 300 425 271 20 24 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4686 5740 6468 7328 7666 7934 8172)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 31 28 4 4 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 328 20 271 300 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4550 5768 6460 7304 7642 7912 8158 8350)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 34 31 4 4 4 6 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 271 20 118 271 328 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4662 5726 6454 7312 7656 7896 8172)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 31 31 4 4 4 6)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 25 40 20 274 274 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4680 5728 6448 7340 7648 7852 8166 8380)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (20 31 31 4 4 1 6 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (274 274 328 118 271 271 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4546 5768 6454 6948 7344 7646 7922 8166 8342)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (23 34 31 6 4 4 1 6 4)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (425 497 40 274 300 425 300 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4624 5722 6442 6964 7342 7646 8152 8364)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (20 28 31 6 4 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (425 300 425 271 274 300 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4570 5742 6452 6948 7672 8166 8384)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 28 31 6 4 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 118 328 118 328 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4524 5792 6472 6960 7328 7682 7950 8180 8390)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (26 31 31 6 4 4 4 4 4)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (300 425 40 274 274 271 274 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4634 5748 6448 6980 7328 7654 7980 8160)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 26 31 4 4 4 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (274 118 118 425 300 328 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4624 5742 6458 6972 7290 7686 7932 8168)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 26 28 4 4 1 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (425 118 40 274 300 20 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4528 5726 6402 7324 7638 7922 8118 8398)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 26 23 1 1 1 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 118 20 425 20 271 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4612 5598 6390 6982 7902 8318)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 26 12 4 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 118 425 425 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4572 5664 6882 7820 8034)) :ldur (quote (7 7 7 7 7)) :lvel (quote (17 28 6 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 425 118 20 118))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5632 6828 7590 7760 8030 8252)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (28 6 1 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 328 328 328 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4462 5630 6398 6804 7688 8024)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 28 9 6 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 271 118 118 20 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4378 5642 6384 6794 7212 7668 7980 8250 8396)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (20 31 12 9 4 1 1 1 4)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (425 118 40 300 300 300 118 24 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4420 5662 7130 7974 8168 8390)) :ldur (quote (4 4 4 4 4 4)) :lvel (quote (20 31 4 1 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 271 274 300 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4416 5564 6304 6784 7472 7990 8122 8312)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (23 31 17 9 1 1 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (300 271 274 20 425 328 300 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4368 5650 6154 7390 8016 8306)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 23 17 4 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 271 271 328 271 24))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4390 6262 6618 7208 7850 8272)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 15 9 4 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 497 271 300 300 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4338 6186 6638 7102 7454 7636 7890 8288)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (28 17 9 4 4 1 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 40 425 24 24 300 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4428 6704 8242)) :ldur (quote (7 7 7)) :lvel (quote (26 9 4)) :loffset (quote (0 0 0)) :lchan (quote (425 300 300))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3986 5416 6522 6840 7412 7846 8046 8258)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (26 23 9 9 1 4 1 4)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (271 271 20 118 425 300 274 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4334 6184 6820 7816 8202)) :ldur (quote (7 7 7 7 7)) :lvel (quote (28 9 6 4 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 425 271 20 271))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4042 5338 6426 7142 7626 8100 8196)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (28 15 6 1 1 4 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 25 271 328 271 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4252 7432 8036 8248)) :ldur (quote (7 7 7 7)) :lvel (quote (28 1 1 4)) :loffset (quote (0 0 0 0)) :lchan (quote (271 274 118 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4190 5720 6456 6876 7386 8222)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 15 4 4 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 328 118 328 20 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4130 5606 6246 7418 8032 8252)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 12 6 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 25 300 274 271 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4098 5512 6530 7274 7980 8240)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 9 6 1 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 328 271 271 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4120 5596 7198 7972 8214 8366)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 12 1 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 118 20 271 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4174 6694 7146 7568 8040 8312)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 4 1 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 24 300 271 274 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4270 6192 7174 7942 8206)) :ldur (quote (7 7 7 7 7)) :lvel (quote (15 4 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 328 20 24 328))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4282 5522 6172 7058 7902 8140 8388)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 4 4 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 274 274 20 271 271 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4342 6904 7890 8090 8278)) :ldur (quote (7 7 7 7 7)) :lvel (quote (15 4 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (497 274 271 271 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4344 5666 6812 8028 8232)) :ldur (quote (7 7 7 7 7)) :lvel (quote (15 6 4 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 25 425 328 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4452 5612 6816 7170 7640 8080)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 6 4 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 25 20 425 274 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4404 5596 6298 7108 7452 7720 8038 8198 8388)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (15 6 4 1 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (274 425 328 300 271 328 118 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4348 5754 6128 6796 7162 7962 8282)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (15 9 6 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 328 300 425 300 328 24))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312 6154 6656 7402 8020 8354)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (15 9 6 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 274 20 300 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4300 6154 6640 7496 8058 8318)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 9 6 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 20 20 300 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4368 5582 6218 6632 6970 7444 7946 8148)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (17 9 6 4 4 1 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (497 425 271 425 274 274 328 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4326 5492 6282 7138 7970 8298)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 6 4 4 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 271 274 300 118 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4386 5698 6246 6852 7152 7548 7802 7976 8270)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (20 9 9 4 4 1 1 4 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (274 425 274 20 425 24 300 118 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4366 5506 6746 7476 7946 8390)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (17 12 6 1 4 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (274 425 274 274 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4286 5488 6180 6720 7134 7858 8068)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (17 17 9 6 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (271 497 497 118 425 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4236 5576 6138 6766 7008 7434 7712 8158)) :ldur (quote (7 7 7 7 7 7 7 7)) :lvel (quote (20 20 12 6 6 1 4 1)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (300 274 274 271 425 425 300 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4372 5482 6202 7114 7606 7972)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (23 23 9 6 1 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (271 425 328 20 271 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4136 5468 6204 6658 7070 7464 7906)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 26 12 6 9 1 4)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (274 271 425 274 425 274 271))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5364 7064 7834 8116)) :ldur (quote (7 7 7 7)) :lvel (quote (26 9 4 4)) :loffset (quote (0 0 0 0)) :lchan (quote (425 328 271 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4060 5430 6182 7022 7596 7802 8028 8246 8354)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (20 28 12 9 1 4 4 1 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (271 300 328 20 20 274 300 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4440 5446 6994 7538 7912)) :ldur (quote (7 7 7 7 7)) :lvel (quote (20 28 6 1 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 25 300 24 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4124 5398 6162 6984 7332 7620 7782 7982 8228)) :ldur (quote (7 7 7 7 7 7 7 7 7)) :lvel (quote (17 28 12 6 4 4 4 4 1)) :loffset (quote (0 0 0 0 0 0 0 0 0)) :lchan (quote (425 300 40 274 274 300 274 300 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4312 5502 6982 7548 7988)) :ldur (quote (2 2 2 2 2)) :lvel (quote (20 26 6 4 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (274 118 271 271 271))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4320 5324 6144 7008 7610 7994)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 26 12 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 425 300 274 20 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4174 5540 6946 7548 8030)) :ldur (quote (7 7 7 7 7)) :lvel (quote (20 23 6 4 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (300 425 300 20 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4366 5144 5952 6928 7366 7942)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 20 12 6 4 4)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 274 425 300 328 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4166 5698 7054 7638 7974)) :ldur (quote (7 7 7 7 7)) :lvel (quote (20 15 4 4 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 328 300 425 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4140 5918 6600 7144 7722 8016 8218)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (20 15 4 4 1 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (425 40 328 425 20 328 328))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4206 6060 7118 7530 7916)) :ldur (quote (7 7 7 7 7)) :lvel (quote (23 9 4 1 4)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 300 274 328 274))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4060 5902 6422 6776 7242 7900 8112)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (26 6 4 1 4 4 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (497 25 328 271 274 24 300))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4204 5966 7006 7308 7874 8024)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (26 6 1 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (300 328 271 274 24 328))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4140 5968 6628 7070 7880)) :ldur (quote (7 7 7 7 7)) :lvel (quote (26 6 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (425 300 300 271 274))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4124 5844 7096 7884 8136)) :ldur (quote (7 7 7 7 7)) :lvel (quote (23 6 1 1 1)) :loffset (quote (0 0 0 0 0)) :lchan (quote (271 425 425 328 300))))) (load-port-info thechord (quote (0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4094 5542 6148 7106 7844 8126)) :ldur (quote (7 7 7 7 7 7)) :lvel (quote (20 4 4 1 1 1)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (425 118 118 274 274 300))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4062 6810 7836)) :ldur (quote (7 7 7)) :lvel (quote (17 1 4)) :loffset (quote (0 0 0)) :lchan (quote (300 118 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4138 6234 7042 7872)) :ldur (quote (7 7 7 7)) :lvel (quote (17 1 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (271 274 300 271))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4014 5576 7130 7866)) :ldur (quote (7 7 7 7)) :lvel (quote (15 4 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (271 328 271 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4034 5494 6228 6674 7114 7640 7894)) :ldur (quote (7 7 7 7 7 7 7)) :lvel (quote (12 4 1 1 1 1 1)) :loffset (quote (0 0 0 0 0 0 0)) :lchan (quote (300 274 274 300 300 300 274))))) (load-port-info thechord (quote (0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4060 7106 7618)) :ldur (quote (7 7 7)) :lvel (quote (9 1 1)) :loffset (quote (0 0 0)) :lchan (quote (425 425 274))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4070 5526 7212 7526)) :ldur (quote (7 7 7 7)) :lvel (quote (6 4 1 1)) :loffset (quote (0 0 0 0)) :lchan (quote (300 25 271 328))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4034 5416 6432)) :ldur (quote (7 7 7)) :lvel (quote (4 4 1)) :loffset (quote (0 0 0)) :lchan (quote (497 425 40))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4010 5360 6180)) :ldur (quote (7 7 7)) :lvel (quote (4 4 1)) :loffset (quote (0 0 0)) :lchan (quote (274 118 271))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3926 5410 7068)) :ldur (quote (7 7 7)) :lvel (quote (4 4 1)) :loffset (quote (0 0 0)) :lchan (quote (271 25 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4236 5506)) :ldur (quote (7 7)) :lvel (quote (4 4)) :loffset (quote (0 0)) :lchan (quote (300 300))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4788 5568)) :ldur (quote (7 7)) :lvel (quote (4 4)) :loffset (quote (0 0)) :lchan (quote (497 497))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4382 5622)) :ldur (quote (7 7)) :lvel (quote (1 4)) :loffset (quote (0 0)) :lchan (quote (274 497))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4360 5490 6268)) :ldur (quote (7 7 7)) :lvel (quote (4 4 1)) :loffset (quote (0 0 0)) :lchan (quote (300 300 274))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4122 5604)) :ldur (quote (7 7)) :lvel (quote (1 4)) :loffset (quote (0 0)) :lchan (quote (271 271))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5360 6208)) :ldur (quote (7 7)) :lvel (quote (4 1)) :loffset (quote (0 0)) :lchan (quote (25 271))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5448)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (274))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5440)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3754 5638)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (271 25))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3936 5472 6188)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (300 271 118))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3986 5598)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (271 497))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4200 5522)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (271 118))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4430)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4148 5294 5922)) :ldur (quote (7 7 7)) :lvel (quote (1 1 1)) :loffset (quote (0 0 0)) :lchan (quote (425 274 24))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4092 5498)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (425 274))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3992 5546)) :ldur (quote (7 7)) :lvel (quote (1 1)) :loffset (quote (0 0)) :lchan (quote (425 300))))) (load-port-info thechord (quote (0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5606)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5394)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5394)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (271))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5382)) :ldur (quote (7)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5382)) :ldur (quote (192)) :lvel (quote (1)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -9 -9) (om-make-point 1920 1026) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 1 2 0 nil 0) (20 0 4 0 nil 0) (8 0 6 0 nil 0) (9 0 7 0 nil 0) (7 0 8 0 nil 0) (12 0 9 0 nil 0) (6 0 10 0 nil 0) (12 0 11 0 nil 0) (15 0 12 0 nil 0) (20 0 13 0 nil 0) (20 0 14 0 nil 0) (14 0 15 0 nil 0) (17 0 16 0 nil 0) (0 0 18 1 nil 0) (1 0 18 4 nil 0) (2 0 18 6 nil 0) (19 0 20 1 nil 0) (18 0 20 2 nil 0) (5 0 20 3 nil 0))) nil 6.19))
