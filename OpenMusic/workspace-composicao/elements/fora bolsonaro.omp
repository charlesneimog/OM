; OM File Header - Saved 2021/07/16 17:11:33
; (6.19 :patc (om-make-point 429.73047 250) (om-make-point -8 0) (om-make-point 1579 1016) "" 183 0 "2021/07/11 19:05:39" "2021/07/12 14:59:35")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../out-files/Fora Bolsonaro.sdif\"") (list (quote :sound) "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/Sound-000001.wav\""))
(in-package :om)(load-lib-for (quote ("OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "fora bolsonaro" (quote ((let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 335 670) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 346 529) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 404 383) (om-make-point 49 34) 8700 "8700" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 482 382) (om-make-point 41 34) 271 "271" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 444 434) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 818 601) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 945 641) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((8752) (8722) (8724) (8742) (8800) (8782) (8666) (8478) (8488) (8738) (8724) (8710) (8578) (8504) (8664) (8756) (8782) (8802) (8504))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 18043)) :ldur (quote ((40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (40) (43) (43) (43) (43) (43) (43) (43))) :lvel (quote ((30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (30) (31) (31) (31) (30) (30) (31) (30))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271) (271))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 189 607) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 435 594) nil (list nil) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 679 576) nil nil "x" (list (let ((box (om-load-boxcall (quote lispfun) "PRINT 3" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 18 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 499 466) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 1023 783) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 279 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 745 770) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 635 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 653 850) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 290 692) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 237 335) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 159 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 725 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 832 733) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 90 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO 2" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 1167 899) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 335 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1313 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "acorde" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 362 592) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (20 0 2 2 nil 0) (20 0 3 0 nil 0) (7 0 3 1 nil 0) (17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (10 0 7 0 nil 0) (9 0 8 0 nil 0) (14 0 8 1 nil 0) (13 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (11 0 12 0 nil 0) (14 0 12 1 nil 0) (16 0 13 0 nil 0) (5 0 13 1 nil 0) (4 0 13 2 nil 0) (6 0 14 0 nil 0) (16 0 14 1 nil 0) (6 0 16 0 nil 0) (15 0 16 1 nil 0) (0 1 21 0 nil 0) (0 0 22 0 nil 0))) 1 "acorde" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 997 875) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 970 930) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 43 32) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 39 32) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1271 751) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 1))) (om-make-point 1161 784) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 689 528) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 579) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 331 481) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 339 523) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 408 475) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 570 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 416 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 71 544) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 101 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 77 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 76 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 8 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 176 920) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((61 0 0 0 nil 0) (43 0 1 0 nil 0) (7 0 2 0 nil 0) (9 0 4 0 nil 2) (12 0 5 0 nil 0) (8 0 6 1 nil 2) (6 0 7 0 nil 2) (5 0 7 2 nil 2) (4 0 8 0 nil 2) (10 0 9 1 nil 2) (62 0 10 0 nil 2) (8 0 11 0 nil 2) (11 0 12 0 nil 0) (32 0 12 1 nil 0) (3 0 13 0 nil 0) (16 0 14 0 nil 0) (28 0 15 0 nil 0) (3 0 16 0 nil 0) (14 0 17 0 nil 0) (19 0 18 0 nil 0) (56 0 19 0 nil 1) (52 0 19 1 nil 1) (51 0 19 2 nil 1) (48 0 19 3 nil 1) (15 0 21 0 nil 0) (20 0 21 1 nil 0) (20 0 21 2 nil 0) (40 0 26 0 ((om-make-point 655 307.0) (om-make-point 655 473.0) (om-make-point 1098 347.0) (om-make-point 1189 638)) 5) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (23 0 26 3 nil 0) (22 0 26 4 nil 0) (2 0 28 0 nil 0) (26 0 28 1 nil 0) (27 0 28 2 nil 0) (52 0 29 0 nil 0) (29 0 31 0 nil 0) (30 0 31 1 nil 0) (31 0 32 0 nil 0) (35 0 32 1 nil 0) (18 0 32 2 nil 0) (54 0 34 0 nil 0) (33 0 34 1 nil 0) (33 0 34 2 nil 0) (37 0 35 0 nil 0) (1 0 36 0 nil 0) (44 0 36 1 nil 0) (39 0 37 0 nil 0) (1 0 37 1 nil 0) (36 0 37 2 nil 4) (38 0 39 0 nil 0) (44 0 39 1 nil 0) (48 0 40 0 nil 0) (51 0 41 0 nil 0) (47 0 42 0 nil 0) (42 0 43 0 nil 7) (41 0 43 1 nil 6) (40 0 43 2 ((om-make-point 655 307.0) (om-make-point 655 349.0) (om-make-point 628 384.0) (om-make-point 582 392)) 0) (45 0 44 0 nil 0) (52 0 45 0 nil 0) (47 0 45 1 nil 0) (52 0 47 0 nil 0) (46 0 47 1 nil 0) (49 0 48 0 nil 0) (53 0 48 1 ((om-make-point 218 216.0) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 606 179)) 3) (14 0 49 0 nil 0) (14 0 50 0 nil 0) (50 0 51 0 nil 0) (53 0 51 1 ((om-make-point 218 216.0) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 456 177)) 3) (17 0 52 0 nil 0) (53 0 52 1 nil 3) (13 0 53 0 nil 0) (55 0 54 0 nil 0) (56 0 55 0 nil 0) (57 0 56 0 nil 0) (61 0 57 0 nil 0) (59 0 58 0 nil 0) (60 0 59 0 nil 0) (21 0 59 1 nil 0) (34 0 59 2 nil 0) (0 0 60 0 nil 0) (62 0 61 0 nil 0) (3 0 62 0 nil 0) (58 1 63 0 nil 0) (58 0 64 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 115 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 234 427) nil nil nil (list (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 800 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 279 616) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 745 770) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 635 757) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 4" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 653 850) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC 2" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 290 692) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 264 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS 2" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 159 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE 2" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 725 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 832 733) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 90 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO 2" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 1167 899) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 335 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1313 343) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 362 592) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (20 0 2 2 nil 0) (20 0 3 0 nil 0) (7 0 3 1 nil 0) (17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (10 0 7 0 nil 0) (9 0 8 0 nil 0) (14 0 8 1 nil 0) (13 0 9 0 nil 0) (12 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (11 0 12 0 nil 0) (14 0 12 1 nil 0) (16 0 13 0 nil 0) (5 0 13 1 nil 0) (4 0 13 2 nil 0) (6 0 14 0 nil 0) (16 0 14 1 nil 0) (6 0 16 0 nil 0) (15 0 16 1 nil 0) (0 1 21 0 nil 0) (0 0 22 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 997 875) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 970 930) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 43 32) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 39 32) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1271 751) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 1))) (om-make-point 1161 784) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 662 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 564) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 342 505) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 350 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 408 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 570 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 416 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 186 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 134 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 153 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 77 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 76 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 8 385) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 176 920) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 2 0 nil 2) (10 0 3 0 nil 0) (6 0 4 1 nil 2) (4 0 5 0 nil 2) (3 0 5 2 nil 2) (2 0 6 0 nil 2) (8 0 7 1 nil 2) (60 0 8 0 nil 2) (6 0 9 0 nil 2) (9 0 10 0 nil 0) (30 0 10 1 nil 0) (0 0 11 0 nil 0) (14 0 12 0 nil 0) (26 0 13 0 nil 0) (0 0 14 0 nil 0) (12 0 15 0 nil 0) (17 0 16 0 nil 0) (54 0 17 0 nil 1) (50 0 17 1 nil 1) (49 0 17 2 nil 1) (46 0 17 3 nil 1) (13 0 19 0 nil 0) (18 0 19 1 nil 0) (18 0 19 2 nil 0) (38 0 24 0 ((om-make-point 655 307.0) (om-make-point 655 473.0) (om-make-point 1098 347.0) (om-make-point 1189 638)) 5) (23 0 24 1 nil 0) (22 0 24 2 nil 0) (21 0 24 3 nil 0) (20 0 24 4 nil 0) (5 0 26 0 nil 2) (24 0 26 1 nil 0) (25 0 26 2 nil 0) (50 0 27 0 nil 0) (27 0 29 0 nil 0) (28 0 29 1 nil 0) (29 0 30 0 nil 0) (33 0 30 1 nil 0) (16 0 30 2 nil 0) (52 0 32 0 nil 0) (31 0 32 1 nil 0) (31 0 32 2 nil 0) (35 0 33 0 nil 0) (41 0 34 0 nil 0) (42 0 34 1 nil 0) (37 0 35 0 nil 0) (41 0 35 1 nil 0) (34 0 35 2 nil 4) (36 0 37 0 nil 0) (42 0 37 1 nil 0) (46 0 38 0 nil 0) (49 0 39 0 nil 0) (45 0 40 0 nil 0) (40 0 41 0 nil 7) (39 0 41 1 nil 6) (38 0 41 2 ((om-make-point 655 307.0) (om-make-point 655 349.0) (om-make-point 628 384.0) (om-make-point 582 392)) 0) (43 0 42 0 nil 0) (50 0 43 0 nil 0) (45 0 43 1 nil 0) (50 0 45 0 nil 0) (44 0 45 1 nil 0) (47 0 46 0 nil 0) (51 0 46 1 ((om-make-point 218 216.0) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 606 179)) 3) (12 0 47 0 nil 0) (12 0 48 0 nil 0) (48 0 49 0 nil 0) (51 0 49 1 ((om-make-point 218 216.0) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 456 177)) 3) (15 0 50 0 nil 0) (51 0 50 1 nil 3) (11 0 51 0 nil 0) (53 0 52 0 nil 0) (54 0 53 0 nil 0) (55 0 54 0 nil 0) (59 0 55 0 nil 0) (57 0 56 0 nil 0) (58 0 57 0 nil 0) (19 0 57 1 nil 0) (32 0 57 2 nil 0) (59 0 58 0 nil 0) (60 0 59 0 nil 0) (0 0 60 0 nil 0) (56 1 61 0 nil 0) (56 0 62 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 483 214) (om-make-point 27 34) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 441 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 646 322) (om-make-point 712 226) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (15/4 (((4 4) (-4)) ((4 4) (-4)) ((4 4) (-4)) ((3 4) ((1 (-16 1 1 1 1 1 -4)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6662)) :ldur (quote (10)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6736)) :ldur (quote (10)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6694)) :ldur (quote (10)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6858)) :ldur (quote (10)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6956)) :ldur (quote (10)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote gg) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 401/100 nil 1000 0 (om-make-point 1261 480) (om-make-point 114 243) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Sound-000001.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 172 719) (om-make-point 506 200) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "Sound-000001" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Sound-000001.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 1218 618) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-SAMPLES-FOLDER" (quote ircam-samples-folder) (quote ((om-load-inputfun (quote input-funbox) "Name of the composer" "X" nil))) (om-make-point 681 122) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 637 45) (om-make-point 246 68) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 123 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-index" (om-load-patch-abs1 "all-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 267 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 84 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 86 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 92 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 50 215) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (1 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 753)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 905/3 379/2) nil (list (list 272 282 292 302 312 322 332 342 352 362 372 382 392 402 412 422 432 442 452 462 472 482 492 502 512 522 532 542 552 562 572 582 592 602 612 622 632 642 652 662 672 682 692 702 712 722 732 742 752 762 772 782 792 802 812 822 832 842 852 862 872 882 892 902 912 922 932 942 952 962 972 982 992 1002 1012 1022 1032 1042 1052 1062 1072 1082 1092 1102 1112 1122 1132 1142 1152 1162 1172 1182 1192 1202 1212 1222 1232 1242 1252 1262 1272 1282 1292 1302 1312 1322 1332 1342 1352 1362 1372 1382 1392 1402 1412 1422 1432 1442 1452 1462 1472 1482 1492 1502 1512 1522 1532 1542 1552 1562 1572 1582 1592 1602 1612 1622 1632 1642 1652 1662 1672 1682 1692 1702 1712 1722 1732 1742 1752 1762 1772 1782 1792 1802 1812 1822 1832 1842 1852 1862 1872 1882 1892 1902 1912 1922 1932 1942 1952 1962 1972 1982 1992 2002 2012 2022 2032 2042 2052 2062 2072 2082 2092 2102 2112 2122 2132 2142 2152 2162 2172 2182 2192 2202 2212 2222 2232 2242 2252 2262 2272 2282 2292 2302 2312 2322 2332 2342 2352 2362 2372 2382 2392 2402 2412 2422 2432 2442 2452 2462 2472 2482 2492 2502 2512 2522 2532 2542 2552 2562 2572 2582 2592 2602 2612 2622 2632 2642 2652 2662 2672 2682 2692 2702 2712 2722 2732 2742 2752 2762 2772 2782 2792 2802 2812 2822 2832 2842 2852 2862 2872 2882 2892 2902 2912 2922 2932 2942 2952 2962)) nil "all-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 235 267) nil nil "x" (list (let ((box (om-load-boxcall (quote lispfun) "EQUAL 2" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 618 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "channel" (om-load-patch-abs1 "channel" (quote ((let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 339 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 505 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1376/3 351) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1055/3 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 995/3 69) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 683/3 273) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 449 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 592 313) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 386 163) (om-make-point 162 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 261 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 211 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 3 2 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1187 529)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 986/3 188) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 435 394) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 477 234) (om-make-point 370 34) (list 1 20 25 28 40 49 63 118 271 274 300 328 425 497) "(1 20 25 28 40 49 63 118 271 274 300 328 425 497)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 567 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 21 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 459 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 359 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 0 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (1 1 6 0 nil 0) (1 0 7 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 245/3 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 482/3 154) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 299/3 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (5 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (3 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1178 625)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 4351/6 341) nil nil nil "channel"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 261 901) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 400 147) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 508 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 1024 9) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 102 866) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 212 99) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 208 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "index-match" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 398 224) nil nil "&" (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 277 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 301 56) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 231 102) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 280 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 141 294) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 82 384) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 75 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 181 462) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 83 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 125 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 260 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (6 0 0 1 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (4 1 8 0 nil 0) (4 0 9 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 254 230) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 14 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 294 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 194 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (5 0 4 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "index-match" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tempo" (om-load-patch-abs1 "tempo" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 129 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 77 227) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 110 485/2) nil (list (list 353 373 393 413 433 453 473 493 513 533 553 573 593 613 633 653 673 693 713 733 753 773 793 813 833 853 873 893 913 933 953 973 993 1013 1033 1053 1073 1093 1113 1133 1153 1173 1193 1213 1233 1253 1273 1293 1313 1333 1353 1373 1393 1413 1433 1453 1473 1493 1513 1533 1553 1573 1593 1613 1633 1653 1673 1693 1713 1733 1753 1773 1793 1813 1833 1853 1873 1893 1913 1933 1953 1973 1993 2013 2033 2053 2073 2093 2113 2133 2153 2173 2193 2213 2233 2253 2273 2293 2313 2333 2353 2373 2393 2413 2433 2453 2473 2493 2513 2533 2553 2573 2593 2613 2633 2653 2673 2693 2713)) nil "tempo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" 1) (om-load-inputfun (quote input-funbox) "LIST" "LIST" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 121 478) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "match-tempo-index" (om-load-patch-abs1 "match-tempo-index" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 40 55) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 296 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 364 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 188 380) (om-make-point 99 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 273 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 50 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 3 2 nil 0) (0 0 4 1 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 0 1231/3) nil (list nil) "l" "match-tempo-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 149 533) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-amp" (om-load-patch-abs1 "all-amp" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 69 195) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 267 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 84 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 165 124) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 146 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 375)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 926/3 517/2) nil (list (list 7.019699551165104D-4 0.0010565248085185886D0 3.008124476764351D-4 2.0798126934096217D-4 1.3190918252803385D-4 6.909732474014163D-4 9.132507839240134D-4 9.783150162547827D-4 9.388269972987473D-4 7.276074029505253D-4 0.0015086521161720157D0 0.001332091516815126D0 7.237246027216315D-4 1.2038720888085663D-4 9.071091189980507D-4 7.705130701651797D-5 0.0010638278909027577D0 3.3032658393494785D-4 0.0027056036051362753D0 2.4947006022557616D-4 1.9533139129634947D-4 2.6038801297545433D-4 0.0020692069083452225D0 8.85823043063283D-4 0.0013584120897576213D0 2.4382449919357896D-4 2.0144929294474423D-4 1.365414500469342D-4 4.169129897491075D-5 0.001908414182253182D0 9.91844804957509D-4 0.0011942624114453793D0 5.807105335406959D-4 6.676318298559636D-5 9.08338843146339D-5 1.4078349340707064D-4 3.528445085976273D-5 0.0015665438259020448D0 4.8260431503877044D-4 0.002423263620585203D0 2.2756270482204855D-4 1.990704913623631D-4 3.410493372939527D-4 6.716814823448658D-5 9.041072917170823D-5 0.0017970986664295197D0 1.8576761067379266D-4 0.0016726113390177489D0 8.643275941722095D-4 6.590386037714779D-4 4.8236773000098765D-4 1.7976447998080403D-4 3.611467545852065D-4 6.211132858879864D-4 5.971495993435383D-4 0.003767138347029686D0 4.384389612823725D-4 5.07354096043855D-4 5.717753083445132D-4 1.7523812130093575D-4 3.6499096313491464D-4 8.491082699038088D-4 2.6890228036791086D-4 0.0016798850847408176D0 3.2218429259955883D-4 0.0013903743820264936D0 0.006671598181128502D0 0.0011766079114750028D0 6.866129697300494D-4 1.2438444537110627D-4 9.55670780967921D-4 8.054666686803103D-4 0.001067491015419364D0 8.431244059465826D-4 4.4486974366009236D-4 5.7106521126115695D-5 4.975619376637042D-4 0.0017031739698722959D0 0.0012397381942719222D0 0.002400362864136696D0 0.0030729600694030524D0 0.002012050710618496D0 8.291869307868183D-4 8.398735080845654D-4 5.140749271959066D-4 0.002382306382060051D0 6.718090153299272D-4 8.454505586996675D-4 6.220891373232007D-4 6.381305865943432D-4 0.0013921302743256092D0 0.0D0 0.0016784889157861472D0 0.0025438524316996336D0 0.0012228479608893395D0 8.370746509172022D-4 0.001896027009934187D0 0.0010275628883391619D0 3.64738458301872D-4 0.004130644723773003D0 5.066560115665197D-4 0.0039298031479120255D0 0.0017239277949556709D0 0.01075331587344408D0 0.0037640337832272053D0 0.0013894210569560528D0 0.002255583181977272D0 5.247099325060844D-4 0.001079800073057413D0 0.001089163706637919D0 8.552645449526608D-4 6.231540464796126D-4 8.99501028470695D-4 0.00387689471244812D0 0.003570837900042534D0 0.0070511577650904656D0 0.0033406568691134453D0 0.002475699409842491D0 0.003129765158519149D0 0.003587741404771805D0 0.0019056282471865416D0 0.0019461631309241057D0 0.0012710461160168052D0 0.003105438081547618D0 0.006376719567924738D0 0.003913783933967352D0 9.718778310343623D-4 0.0012596488231793046D0 7.788356160745025D-4 0.0011563891312107444D0 0.002234413754194975D0 8.667580550536513D-4 0.0020829986315220595D0 0.0010090727591887117D0 9.270553709939122D-4 0.003056394634768367D0 3.902528842445463D-4 0.001528860884718597D0 7.430397672578692D-4 0.003491202834993601D0 3.826379543170333D-4 3.1840766314417124D-4 8.189163636416197D-4 8.830612059682608D-4 5.751979188062251D-4 0.0038822086062282324D0 1.7448997823521495D-4 0.0023840314242988825D0 7.733840029686689D-4 0.0010960445506498218D0 3.212334122508764D-4 2.6335037546232343D-4 7.833703421056271D-4 5.829603760503233D-4 5.414906772784889D-4 1.4695362187922D-4 3.0552837415598333D-4 2.6386132230982185D-4 4.15258837165311D-4 2.160946314688772D-4 5.29320037458092D-4 5.924520883127116D-5 1.360338064841926D-4 2.0028972357977182D-4 2.362816740060225D-4 1.077447523130104D-4 1.3025998487137258D-4 9.1845853603445D-5 1.8636583990883082D-4 8.210661326302216D-5 4.987510619685054D-4 3.869985812343657D-5 3.6777587956748903D-4 7.973420724738389D-5 6.376200472004712D-4 2.4752842728048563D-4 5.0320733862463385D-5 5.86054811719805D-4 6.243205280043185D-4 9.512158430879936D-5 1.9047905516345054D-4 3.732021723408252D-4 1.3033616414759308D-4 5.029496969655156D-4 1.0550739534664899D-4 0.001147995819337666D0 2.318906772416085D-4 0.001119786174967885D0 1.6774906544014812D-4 1.1586474283831194D-4 4.752534441649914D-4 0.002827645745128393D0 0.005009005777537823D0 0.0019568982534110546D0 4.877886385656893D-4 0.0022737025283277035D0 8.528330945409834D-4 2.701071498449892D-4 0.003598983632400632D0 7.844686624594033D-4 0.008717411197721959D0 5.285362713038921D-4 0.0020370392594486475D0 0.0017390255816280842D0 3.998831089120358D-4 8.84460227098316D-4 4.338722792454064D-4 0.003743127454072237D0 0.0011604942847043276D0 0.003572695190086961D0 6.183747318573296D-4 0.0029815302696079016D0 0.0012855813838541508D0 0.005421774461865425D0 0.002601684769615531D0 0.0019776395056396723D0 0.001123021706007421D0 7.596550858579576D-4 8.749790140427649D-4 0.0010608036536723376D0 0.0012247153790667653D0 0.006076762918382883D0 0.0052414205856621266D0 0.0029492806643247605D0 0.001010740757919848D0 0.004042642656713724D0 6.718510994687676D-4 7.777205319143832D-4 0.010175385512411595D0 0.006009458098560572D0 0.004276179242879152D0 0.0032516135834157467D0 0.002015369012951851D0 0.00412879791110754D0 0.0013600412057712675D0 0.003906605299562216D0 0.002143377671018243D0 0.0035330988466739655D0 0.0033235519658774138D0 0.0013435528380796314D0 0.003978752065449953D0 0.00216924911364913D0 0.0013981107622385025D0 0.0028535800520330668D0 0.009032603353261948D0 0.008907409384846688D0 0.002043113112449646D0 0.0022149705328047276D0 0.002794215688481927D0 0.003781960578635335D0 0.005037769675254822D0 0.007027757819741964D0 0.007745446637272835D0 0.0028642453253269196D0 0.0023541932459920645D0 0.003693755716085434D0 0.0026309629902243615D0 0.0026575836818665266D0 0.0026712901890277863D0 0.002169741550460458D0 0.005707601550966501D0 0.0D0 0.008791017346084118D0 0.0026631418149918318D0 3.163610235787928D-4 0.003559884149581194D0 0.0012611133279278875D0 4.841480986215174D-4 3.1856243731454015D-4 2.0561201381497085D-4 6.938663427717984D-4 2.597782004158944D-4 0.0D0 0.008237697184085846D0 0.0035455164033919573D0 9.561812039464712D-4 3.7152928416617215D-4 4.5215050340630114D-4 6.807661266066134D-4 0.008617968298494816D0 1.661434944253415D-4 0.006056156475096941D0 0.004599803127348423D0 0.002693437272682786D0 2.488461323082447D-4 0.0015090483939275146D0 4.340127343311906D-4 0.010974951088428498D0 0.0030360014643520117D0 0.0025305377785116434D0 0.0054189409129321575D0 5.656369612552226D-4 0.04628625139594078D0 9.555615833960474D-4 0.019574787467718125D0 0.0011009852169081569D0 0.012231491506099701D0 0.005418550688773394D0 0.001988067524507642D0 0.011996744200587273D0 0.0026626288890838623D0 0.0018312075408175588D0 0.004390000831335783D0 8.25472641736269D-4 0.014932803809642792D0 8.599582361057401D-4 0.006361664738506079D0 0.00277333683334291D0 0.0017818495398387313D0 9.117115987464786D-4 0.05255194753408432D0 5.178057472221553D-4 9.236007463186979D-4 0.00908123329281807D0 5.280404002405703D-4 0.04855520650744438D0 0.0015222786460071803D0 0.020693330094218254D0 9.250813745893538D-4 0.01047983206808567D0 5.926445592194796D-4 0.020148267969489098D0 3.2853116863407195D-4 0.0011470543686300517D0 0.019688736647367478D0 9.949543746188283D-4 0.0026582214049994946D0 0.0019955900497734547D0 0.04864586517214775D0 7.507450645789504D-4 0.0016903206706047059D0 3.853020607493818D-4 0.0017124528530985117D0 8.601929876022041D-4 9.157271706499159D-4 0.008019205182790757D0 0.01805301569402218D0 0.02668019011616707D0 5.274928407743573D-4 0.009204285219311715D0 0.0013552388409152627D0 0.07717736810445786D0 0.0017373943701386452D0 0.002047955757007003D0 0.001214579096995294D0 0.0015070991357788444D0 0.0016427442897111178D0 0.03172363340854645D0 0.007105990778654814D0 7.75556021835655D-4 0.019301950931549073D0 0.08037125319242478D0 0.014228485524654389D0 0.0011430629529058934D0 0.12206015735864639D0 0.0010200777323916555D0 0.0048982128500938416D0 0.0014679116429761053D0 0.001464693690650165D0 0.05320050194859505D0 0.0020602212753146887D0 0.004431215114891529D0 9.353336063213646D-4 0.010927719064056874D0 0.08453628420829773D0 0.013070146553218365D0 0.007442370057106018D0 0.16738615930080414D0 0.0010451477719470859D0 0.010999680496752262D0 0.002747541991993785D0 0.08112579584121704D0 0.003872751956805587D0 0.005980321206152439D0 7.059336639940739D-4 6.537958397530019D-4 0.0D0 0.0010137241333723069D0 0.006680375896394253D0 0.0013730546925216914D0 6.176133174449205D-4 0.001810941263101995D0 0.03826756030321121D0 0.009801536798477173D0 0.003248213091865182D0 0.2170180082321167D0 0.0017195899272337556D0 0.0014347601681947709D0 0.04883715137839317D0 0.009066935628652573D0 0.0047545828856527805D0 9.191179415211082D-4 0.0012952110264450312D0 0.001409777207300067D0 0.0028513974975794554D0 0.00113056565169245D0 0.0014853389002382756D0 0.00414753844961524D0 6.483375327661634D-4 0.002389994217082858D0 0.005845631472766399D0 5.214990815147758D-4 0.006103960797190666D0 0.015577912330627442D0 0.004915688652545214D0 0.0026770520489662886D0 0.21213705837726593D0 6.565978401340544D-4 5.722593050450087D-4 0.022468775510787964D0 4.102176462765783D-4 0.0010207557352259756D0 0.0014829037245362997D0 0.0012071201344951988D0 3.6447966704145074D-4 7.043520454317331D-4 0.0020222626626491547D0 7.32742715626955D-4 4.049257840961218D-4 0.0010101113002747298D0 0.0015679378993809224D0 0.002195626264438033D0 0.16310955584049225D0 9.764378191903234D-4 5.164939793758094D-4 0.024247275665402413D0 0.001510449219495058D0 0.0018377475207671524D0 0.004505885299295187D0 7.958992500789464D-4 0.004347790498286486D0 0.00251342193223536D0 0.007922512479126454D0 0.0036720959469676018D0 0.003163197310641408D0 0.012877724133431912D0 0.19963915646076203D0 0.0018627579556778074D0 0.003924604970961809D0 0.0036777372006326914D0 0.011268021538853646D0 0.003768958617001772D0 0.0013492099242284894D0 0.027815217152237892D0 0.0D0 0.002938151126727462D0 0.00538348825648427D0 0.07551004737615586D0 0.0015889372443780303D0 0.19727493822574616D0 0.0016998511273413897D0 0.001715772203169763D0 0.004222600255161524D0 0.009982658550143242D0 0.003418795997276902D0 0.002218751236796379D0 0.038568321615457535D0 0.001031273975968361D0 0.0036694123409688473D0 0.056192465126514435D0 0.0013085411628708244D0 0.19917842745780945D0 4.4880350469611585D-4 8.310165721923113D-4 0.0031132111325860024D0 0.0019691421184688807D0 0.0022307245526462794D0 6.981558981351554D-4 0.007842130959033966D0 0.08104956150054932D0 0.004019079729914665D0 0.0013914419105276466D0 0.09707706421613693D0 1.2196485477034003D-4 1.9592445460148156D-4 1.957534987013787D-4 7.667214376851916D-4 5.258991150185466D-4 0.0021028397604823113D0 0.03316591680049896D0 0.0020587239414453507D0 1.7212888633366674D-4 0.0425008088350296D0 1.1494250793475658D-4 1.3941930956207216D-4 2.2110043209977448D-4 3.7130567943677306D-4 0.030515801161527634D0 0.004441710188984871D0 6.030495569575578D-5 0.06829066574573517D0 1.0171528265345842D-4 3.692807877087034D-5 1.1663917393889278D-4 3.63790662959218D-4 0.021521497517824173D0 0.0029743595514446497D0 1.3188693264964968D-4 0.035106170922517777D0 1.5036528930068016D-4 2.185295452363789D-4 0.019777853041887284D0 0.0010459978366270662D0 8.185003389371559D-5 0.054934311658144D0 2.8210581513121724D-4 3.734736528713256D-4 0.00305083766579628D0 3.502487379591912D-5 0.02931246906518936D0 5.818671197630465D-4 0.05402344465255737D0 4.347006033640355D-4 9.124020289164037D-5 0.01052705105394125D0 4.0839414577931166D-4 0.11398079991340637D0 0.0017658158903941513D0 0.05953511968255043D0 3.20129853207618D-4 5.096807144582272D-4 0.00993325188755989D0 0.0012360779801383615D0 0.11678272485733032D0 0.0019090408459305764D0 0.08749057352542877D0 6.959163583815098D-4 4.368599547888152D-5 0.0031875879503786564D0 5.691811093129218D-4 0.07195015251636505D0 0.0018197919707745314D0 0.0018995594000443817D0 0.013455666601657868D0 0.08484578132629395D0 8.976420504041016D-4 5.798429265269078D-5 0.004265140276402235D0 0.0015212413854897023D0 0.08884932845830918D0 0.0030546735506504774D0 7.874169968999922D-4 8.775792230153457D-5 0.008252836763858796D0 8.359525236301124D-4 0.06237664446234703D0 3.5937310894951225D-4 3.4976861206814647D-4 0.0019042290514335037D0 0.07451194524765015D0 0.0020071431063115597D0 3.032315871678293D-4 2.816674823407084D-4 0.004097865894436836D0 9.968150407075882D-4 3.352555213496089D-4 3.767592424992472D-4 0.027035685256123543D0 0.0024894860107451678D0 3.517725854180753D-4 4.245526506565511D-4 0.0237567275762558D0 0.013751357793807984D0 0.0028839921578764916D0 0.0017662136815488339D0 0.0010738419368863106D0 0.003747411770746112D0 0.005296289920806885D0 0.002318379934877157D0 0.009416201151907444D0 6.606763345189393D-4 0.004767933394759893D0 0.0012492386158555746D0 0.0031783152371644974D0 0.0031753897201269865D0 0.009974345564842224D0 0.003531560767441988D0 6.564789218828082D-4 5.748105468228459D-4 0.015415055677294732D0 0.0014588115736842156D0 0.004750012885779142D0 0.0011619736906141043D0 0.004855732433497906D0 0.0031509934924542904D0 0.003122682450339198D0 0.034123990684747696D0 0.004013003781437874D0 0.010954884812235833D0 0.00406996626406908D0 0.01171764824539423D0 0.007350703701376915D0 0.009321440011262894D0 0.0D0 0.005352572072297335D0 0.0D0 0.002835287945345044D0 0.014764184132218361D0 0.014458638615906239D0 6.534418207593262D-4 0.017239296808838845D0 0.0033904050942510367D0 0.003962749615311623D0 0.00347954616881907D0 0.0011320181656628848D0 0.009223547764122486D0 0.0021014579106122256D0 0.0018510096706449986D0 5.255791475065053D-4 0.017905421555042267D0 0.008892549201846123D0 0.022634519264101982D0 0.01237280759960413D0 0.01045734528452158D0 0.0025854995474219323D0 0.01499628834426403D0 0.0D0 0.00432250089943409D0 0.0D0 0.0011406734120100737D0 7.130253943614662D-4 0.001376297208480537D0 0.008513808250427246D0 0.00825717207044363D0 0.002302022185176611D0 0.002489537000656128D0 0.006434611044824123D0 0.013050327077507973D0 0.001631743274629116D0 0.002951332600787282D0 0.0019421002361923457D0 0.0017019954975694418D0 0.0012734269257634879D0 0.01823013834655285D0 0.014745466411113739D0 0.006399952806532383D0 0.009176001884043217D0 0.03070061281323433D0 0.0034949583932757378D0 0.008099300786852837D0 0.005189655348658562D0 4.2328922427259386D-4 0.0020040266681462527D0 0.0088223647326231D0 0.009554591029882431D0 0.0030222004279494286D0 0.0030987230129539967D0 0.005679141730070114D0 0.006542510353028774D0 0.0033356475178152323D0 0.0038512281607836485D0 0.002032069256529212D0 9.608817636035383D-4 0.0012557487934827805D0 0.009775384329259396D0 0.007112470455467701D0 0.005251784343272448D0 0.007798917591571808D0 0.011733624152839184D0 0.0025676055811345578D0 0.0023963116109371186D0 5.429394659586251D-4 0.0033951732330024243D0 0.003839945187792182D0 0.006230665370821953D0 0.0023707589134573937D0 0.005236465949565172D0 8.742992067709565D-4 3.834564950011554D-7 0.011349203996360302D0 0.006052709184587002D0 8.831162704154849D-4 0.0012377423699945212D0 0.0027386501897126437D0 0.0011219697771593929D0 0.0029070822056382895D0 0.002685423707589507D0 0.002452475018799305D0 0.002433776156976819D0 6.556737353093922D-4 5.72832184843719D-4 0.002066426444798708D0 0.0013704599114134908D0 0.003912836778908968D0 0.0015959852607920766D0 0.001458452781662345D0 0.0062498413026332855D0 8.201126474887133D-4 4.6432905946858227D-4 0.006901801098138094D0 5.372444866225123D-4 4.7775296843610704D-4 7.755284896120429D-4 4.4050122960470617D-4 7.390336832031608D-4 5.125045427121222D-4 0.0037941986229270697D0 0.0027569043450057507D0 0.012187940068542958D0 3.069646772928536D-4 2.1766888676211238D-4 5.310099222697318D-4 0.0010385385248810053D0 0.001560330973006785D0 0.028289366513490677D0 0.004457642324268818D0 7.383707561530173D-4 3.9880210533738137D-4 3.6467687459662557D-4 5.165956099517643D-4 0.0012581690680235625D0 0.052238136529922485D0 0.0018788108136504889D0 0.012029719538986683D0 4.744976758956909D-4 0.00405303156003356D0 0.013396192342042923D0 0.0010975338518619538D0 4.3330626795068383D-4 6.980511825531721D-4 0.001546998042613268D0 0.0019308794289827347D0 0.07447312027215958D0 0.0017286187503486872D0 0.03463601693511009D0 0.0013630571775138379D0 0.005487287882715464D0 7.471757708117366D-4 1.3482352369464934D-4 1.8191048002336174D-4 5.492024865816347D-5 7.58045818656683D-4 0.06975776702165604D0 0.0026614158414304257D0 0.014883052557706833D0 2.9244800680316985D-4 1.732307719066739D-4 1.4887664292473346D-4 8.937784878071398D-5 0.06995327770709992D0 0.0010650519980117679D0 0.013467221520841122D0 3.886471677105874D-4 3.1372864032164216D-4 2.3319711908698082D-4 1.235522940987721D-4 0.05463506281375885D0 0.0021813097409904003D0 0.01639748550951481D0 8.111103670671582D-4 8.768389816395938D-4 1.0468869004398585D-4 3.242738021072D-4 0.06397823244333267D0 0.0010524123208597303D0 0.01255813892930746D0 6.570378900505602D-4 7.46890262234956D-4 0.0010412555420771242D0 0.0012874954845756293D0 2.27396929403767D-4 0.06370265781879425D0 0.007370305713266134D0 0.0168056171387434D0 0.0014547450700774789D0 0.0025216289795935154D0 0.0012814243091270328D0 0.0024235507007688284D0 0.002465256955474615D0 0.0013208359014242888D0 5.77859056647867D-4 0.06128475442528725D0 0.005899915471673012D0 0.03419988602399826D0 0.0010123588144779206D0 0.002895598066970706D0 0.001379205845296383D0 0.002912848489359021D0 0.004263503476977348D0 3.754094068426639D-4 0.001864090794697404D0 6.740151438862085D-4 0.034529466181993485D0 0.01532250177115202D0 0.021711722016334534D0 7.330756052397192D-4 0.001751223229803145D0 0.0018589511746540666D0 0.002126730279996991D0 0.001334570231847465D0 8.494657231494784D-4 0.0013407280202955008D0 0.0020385528914630413D0 0.02381676435470581D0 0.016315236687660218D0 0.025346318259835243D0 0.006174679379910231D0 0.006552091334015131D0 0.0031401615124195814D0 9.622012730687857D-4 5.034441710449755D-4 0.0036980463191866875D0 2.052629424724728D-4 0.024118714034557343D0 0.005028567276895046D0 0.006648426875472069D0 4.1689054341986776D-4 0.0020323668140918017D0 0.0019658738747239113D0 0.001605690224096179D0 2.7671982039123577D-8 0.002745924284681678D0 0.002174720400944352D0 0.030898626893758774D0 0.006420578341931105D0 5.988204502500594D-4 0.0049803839065134525D0 5.935569643042982D-4 4.058402846567333D-4 0.001174799632281065D0 0.00884800311177969D0 0.028206050395965576D0 0.0027990660164505244D0 1.2484684702940285D-4 0.0011479038512334228D0 9.512976394034922D-4 0.004631530959159136D0 0.025600438937544823D0 3.5120832035318017D-4 3.251619928050786D-4 1.0398770245956257D-4 0.0015374378999695182D0 4.963798564858735D-4 0.017751505598425865D0 2.7737847995013D-4 9.703522664494813D-5 0.001156346290372312D0 1.4103393186815083D-4 0.010894366540014744D0 4.922793596051633D-4 0.0015798897948116064D0 4.4333626283332706D-4 0.005258698016405106D0 0.00260631600394845D0 0.0010590829188004137D0 0.0027926182374358178D0 0.0015860960120335222D0 7.079260540194809D-4 0.0023852477315813303D0 6.092640105634928D-4 3.614201268646866D-4 0.0016278444090858102D0 3.069527738261968D-4 2.0704806956928224D-4 0.0010459296172484756D0 4.2828600271604955D-4 5.695055449450592D-8 0.0018538193544372917D0 4.4761429307982326D-4 0.00201701233163476D0 1.581112010171637D-4 0.0021206005476415158D0 2.871526521630585D-4 0.002151224762201309D0 4.2637813021428883D-4 0.002807971788570285D0 7.750551449134946D-4 0.00196853862144053D0 4.203525895718485D-4 8.14346014522016D-4 3.8716034032404423D-4 4.6689267037436366D-4 2.476325025781989D-4 0.0013607221189886332D0 4.762001917697489D-4 0.00151872169226408D0 9.489516378380358D-5 8.084043656708673D-5 3.6251929122954607D-4 7.562419050373137D-4 4.578781081363559D-4 0.0012248464627191425D0 2.9245298355817795D-4 0.00214219419285655D0 3.345520526636392D-4 0.00103280961047858D0 5.238845478743315D-4 0.0031788749620318413D0 3.383171570021659D-4 0.0029055543709546328D0 6.869063945487142D-4 0.003130922093987465D0 0.0010669685434550047D0 0.0023870610166341067D0 1.4623129391111434D-4 0.00190109689719975D0 8.052630582824349D-4 2.284873917233199D-4 3.8458287599496544D-4 7.971126615302637D-5 4.13953181123361D-4 5.330184358172119D-4 2.9909840668551624D-4)) "&" "all-amp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1437 79.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1514 79.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1223 212.0) (om-make-point 354 55.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 1345 146.0) (om-make-point 41 34) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1289 150.0) (om-make-point 34 34) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 28 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 57 478) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 465 569) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 376 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 87 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 434 424) (om-make-point 41 34) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 533 429) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 590 435) (om-make-point 41 34) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8) (om-load-inputfun (quote input-funbox) "list of forbidden subdivisions" "FORBID" nil) (om-load-inputfun (quote input-funbox) "grace-notes?" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "precision (0.0-1.0)" "PRECIS" 0.5))) (om-make-point 255 482) (om-make-point 381 67.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 373 358) (om-make-point 56 34) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 336 412) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 58 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 120 356) (om-make-point 22.5 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 218 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 252 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 50 174) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (0 0 1 0 nil 0) (12 0 1 2 nil 0) (8 0 2 0 nil 0) (15 0 4 0 nil 0) (3 0 4 1 nil 0) (13 0 8 0 nil 0) (10 0 8 1 nil 0) (9 0 8 2 nil 0) (5 0 8 3 nil 0) (6 0 8 5 nil 0) (7 0 8 6 nil 0) (4 0 11 0 nil 0) (11 0 12 0 nil 0) (1 0 13 0 nil 0) (14 0 13 1 nil 0) (4 0 14 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 950 733)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 829/2 2149/4) nil (list (list 7/4 (list (list (list 4 4) (list -4)) (list (list 3 4) (list -1 (list 1 (list -9 2 -14)) -1))))) "&" "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 1064 733) (om-make-point 495 179) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) (-4)) ((3 4) (-1 (1 (-8 -1.0 2 -14)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (11684)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "notes" (om-load-patch-abs1 "notes" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 1523 286) nil nil nil "notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "note-of-the-index" (om-load-patch-abs1 "note-of-the-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 157 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 89 280) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1075 592)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1522/3 346) nil (list (list 11684 11682)) nil "note-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "amp-of-the-index" (om-load-patch-abs1 "amp-of-the-index" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 66 252) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2905/3 163) nil (list (list 0.003978752065449953D0 0.003693755716085434D0)) "&" "amp-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 791 463) (om-make-point 524 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((11684) (11682))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000) (1000))) :lvel (quote ((31) (31))) :loffset (quote ((0) (0))) :lchan (quote ((1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 791 255) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1330 699) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 106 808) (om-make-point 86 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 76 640) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-PULSES" (quote n-pulses) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (list (quote ?) (list (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 886 795) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 31 715) (om-make-point 132 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 775 878) (om-make-point 130 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 837 792) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 145 959) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 45 959) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 1 nil 0) (24 0 1 0 nil 0) (7 1 2 1 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (28 0 7 0 nil 0) (8 0 9 0 nil 0) (6 0 9 1 nil 0) (9 0 10 0 nil 0) (3 0 10 1 nil 0) (6 0 11 0 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (12 0 14 1 nil 0) (9 0 15 0 nil 0) (15 0 16 0 nil 0) (15 0 17 0 nil 0) (25 0 18 0 nil 0) (20 0 18 1 nil 0) (19 0 18 2 nil 0) (16 0 18 3 nil 0) (17 0 18 4 nil 0) (14 0 21 0 nil 0) (21 0 22 1 nil 0) (26 0 22 2 nil 0) (27 0 22 3 nil 0) (10 0 24 0 nil 0) (10 0 25 0 nil 0) (24 0 26 1 nil 0) (18 0 26 4 nil 0) (1 0 26 6 nil 0) (31 0 28 0 nil 0) (22 0 28 2 nil 0) (14 0 29 1 nil 0) (22 0 30 0 nil 0) (29 0 31 0 nil 0) (32 0 31 1 nil 0) (0 0 31 2 nil 0) (30 0 32 0 nil 0) (33 0 32 1 nil 0) (2 0 34 0 nil 0) (7 0 35 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1436 258) (om-make-point 362 55.0) nil nil (list (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 97 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 855 93) (om-make-point 424 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "&" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO 2" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 1126 859) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 659 652) (om-make-point 48 32) 0.0 "0.00" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CHORDS" (quote chords) (quote ((om-load-inputfun (quote input-funbox) "CHORD-SEGMENT" "CHORD-SEGMENT" nil))) (om-make-point 895 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 4" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 1521 766) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LMIDIC 2" (quote lmidic) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 333 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 1596 675) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MIX-LIST" (quote sound-mix-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 1045 543) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1231 275) (om-make-point 281 60) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "PRINT 2" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 281 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 233 683) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 59 553) (om-make-point 40 32) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 68 642) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 309 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 506 368) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 360 423) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 166 575) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 498 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 334 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 362 592) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 415 396) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 321 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 254 465) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 171 377) (om-make-point 28 32) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 225 419) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 344 312) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 166 310) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 211) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 227 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 558 49) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 295 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 132 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 288 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 188 773) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((19 0 0 0 nil 0) (3 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (21 0 3 2 nil 0) (21 0 4 0 nil 0) (8 0 4 1 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (11 0 8 0 nil 0) (10 0 9 0 nil 0) (15 0 9 1 nil 0) (14 0 10 0 nil 0) (13 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (12 0 13 0 nil 0) (15 0 13 1 nil 0) (17 0 14 0 nil 0) (6 0 14 1 nil 0) (5 0 14 2 nil 0) (7 0 15 0 nil 0) (17 0 15 1 nil 0) (7 0 17 0 nil 0) (16 0 17 1 nil 0) (1 1 22 0 nil 0) (1 0 23 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 889 837) (om-make-point 37 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE 2" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 862 892) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1497 885) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 5" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1304 753) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-STEREO-PAN" (quote sound-stereo-pan) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a left channel pan value" "LEFT" -100) (om-load-inputfun (quote input-funbox) "a right channel pan value" "RIGHT" 100))) (om-make-point 1273 911) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1467 580) (om-make-point 43 32) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 1395 561) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1305 565) (om-make-point 39 32) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1237 595) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 1119 638) (om-make-point 423 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1232 727) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 1))) (om-make-point 1122 760) (om-make-point 152 51) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 907 431) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 975 465) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 899 498) (om-make-point 121 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 3" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 860 652) (om-make-point 181 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 588 695) (om-make-point 186 52) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "samples menores" (om-load-patch-abs1 "samples menores" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 183 530) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 540 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 401 299) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 560 212) (om-make-point 48 32) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 540 252) (om-make-point 40 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 447 181) (om-make-point 68 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ" (quote sound-seq) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S1" nil) (om-load-inputfun (quote input-funbox) "a sound" "S2" nil) (om-load-inputfun (quote input-funbox) "cross-fading duration (ms)" "CROSSFADE" 0))) (om-make-point 246 331) (om-make-point 213 47) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 86 395) (om-make-point 157 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 93 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>" (quote om>) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 37 218) (om-make-point 74 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 213 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (11 0 5 0 nil 0) (8 0 5 1 nil 0) (10 0 6 0 nil 0) (1 0 6 1 nil 0) (2 0 6 2 nil 0) (9 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 7 2 nil 0) (10 0 8 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 344 705) nil nil nil "samples menores"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 189 636) (om-make-point 47 32) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 156 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 426 643) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-SOUND-TRANSPOSE" (quote ckn-sound-transpose) (quote ((om-load-inputfun (quote input-funbox) "Pathname of a sound-file" "SOUND" nil) (om-load-inputfun (quote input-funbox) "Tranposition in cents" "CENTS" nil))) (om-make-point 662 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF 2" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 418 564) (om-make-point 192 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 296 505) (om-make-point 38 32) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 350 547) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 4" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 633 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 570 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 509 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "VELOCITY" 60))) (om-make-point 483 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 375 482) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 308 432) (om-make-point 97 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 407 334) (om-make-point 28 32) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 375 375) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 570 179) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LVEL" (quote lvel) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 572 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LCHAN" (quote lchan) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 414 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 420 177) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 2))) (om-make-point 342 191) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 231 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 134 472) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 1.0))) (om-make-point 153 389) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 95 311) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MS->SEC" (quote ms->sec) (quote ((om-load-inputfun (quote input-funbox) "milliseconds" "N" 0))) (om-make-point 93 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 131 848) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 56 778) (om-make-point 145 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PLUSP" (quote plusp) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 26 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 22 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 2 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 29 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 176 920) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 110 916) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((58 0 0 0 nil 0) (4 0 1 0 nil 0) (21 0 2 0 nil 0) (58 0 4 0 nil 0) (7 0 5 0 nil 0) (48 0 5 1 nil 3) (1 0 6 0 nil 0) (9 0 8 0 nil 0) (51 0 9 0 nil 1) (47 0 9 1 nil 1) (46 0 9 2 nil 1) (43 0 9 3 nil 1) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (10 0 11 2 nil 0) (5 0 12 0 nil 0) (5 0 13 0 nil 0) (2 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (35 0 19 0 ((om-make-point 647 308) (om-make-point 788 328) (om-make-point 1150 332) (om-make-point 1189 638)) 2) (18 0 19 1 nil 0) (17 0 19 2 nil 0) (16 0 19 3 nil 0) (15 0 19 4 nil 0) (25 0 21 0 nil 0) (19 0 21 1 nil 0) (20 0 21 2 nil 0) (47 0 22 0 nil 0) (22 0 24 0 nil 0) (23 0 24 1 nil 0) (24 0 25 0 nil 0) (26 0 25 1 nil 0) (8 0 25 2 nil 0) (27 0 26 0 nil 0) (3 0 26 1 nil 0) (51 0 26 2 nil 1) (51 0 27 0 ((om-make-point 119 369) (om-make-point 119 537) (om-make-point 318 581) (om-make-point 382 705)) 1) (30 0 27 1 nil 0) (49 0 29 0 nil 0) (28 0 29 1 nil 0) (28 0 29 2 nil 0) (32 0 30 0 nil 0) (38 0 31 0 nil 0) (39 0 31 1 nil 0) (34 0 32 0 nil 0) (38 0 32 1 nil 0) (31 0 32 2 nil 4) (33 0 34 0 nil 0) (39 0 34 1 nil 0) (43 0 35 0 nil 0) (46 0 36 0 nil 0) (42 0 37 0 nil 0) (37 0 38 0 nil 7) (36 0 38 1 nil 6) (35 0 38 2 ((om-make-point 647 308) (om-make-point 647 350) (om-make-point 629 378) (om-make-point 573 392)) 5) (40 0 39 0 nil 0) (47 0 40 0 nil 0) (42 0 40 1 nil 0) (47 0 42 0 nil 0) (41 0 42 1 nil 0) (44 0 43 0 nil 0) (48 0 43 1 ((om-make-point 255 185) (om-make-point 292 216) (om-make-point 315 143) (om-make-point 581 173) (om-make-point 604 179)) 3) (1 0 44 0 nil 0) (1 0 45 0 nil 0) (45 0 46 0 nil 0) (48 0 46 1 ((om-make-point 255 185) (om-make-point 296 241) (om-make-point 330 153) (om-make-point 454 172) (om-make-point 454 177)) 3) (6 0 47 0 nil 0) (48 0 47 1 nil 3) (0 0 48 0 nil 0) (50 0 49 0 nil 0) (51 0 50 0 nil 0) (52 0 51 0 nil 0) (56 0 52 0 nil 0) (54 0 53 0 nil 0) (55 0 54 0 nil 0) (11 0 54 1 nil 0) (29 0 54 2 nil 0) (56 0 55 0 nil 0) (57 0 56 0 nil 0) (58 0 57 0 nil 0) (53 1 59 0 nil 0) (53 0 60 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 973 142) (om-make-point 34 34) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1029 138) (om-make-point 41 34) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 870 195) (om-make-point 354 55.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1198 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1121 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 517 71) (om-make-point 34 34) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcall (quote abstraction) "channel" (om-load-patch-abs1 "channel" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 1907/3 189) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1055/3 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 995/3 69) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 683/3 273) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 396 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 596 228) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 386 163) (om-make-point 162 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 321 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-INSTRUMENTS" (quote ircam-instruments) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "NOTE" 6000) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "NUMBER-OF-THE-INSTRUMENT" 20))) (om-make-point 162 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (0 0 3 2 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 986/3 188) nil nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 684 410) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 435 394) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 428 54) (om-make-point 792 34) (list 1 2 3 8 9 10 13 14 16 17 18 19 20 23 24 25 26 27 28 2940 41 44 46 49 61 63 118 271 274 300 328 425 419 497) "(1 2 3 8 9 10 13 14 16 17 18 19 20 23 24 25 26 27 28 2940 41 44 46 49 61 63 118 271 274 300 328 425 419 497)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 567 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 21 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 459 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 359 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (4 0 1 1 nil 0) (1 0 2 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0) (6 0 5 0 nil 0) (2 1 7 0 nil 0) (2 0 8 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 245/3 266) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 482/3 154) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPROX-M" (quote approx-m) (quote ((om-load-inputfun (quote input-funbox) "pitch list (midicents)" "SELF" 6000) (om-load-inputfun (quote input-funbox) "tone division" "APPROX" 2))) (om-make-point 299/3 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (4 0 2 1 nil 0) (5 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 2282/3 398)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 4231/6 321) nil nil nil "channel"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 413 829) (om-make-point 27 34) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM<" (quote om<) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 351 915) (om-make-point 130 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMOR 2" (quote omor) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "other things" "REST" nil))) (om-make-point 246 728) (om-make-point 132 31.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N-PULSES" (quote n-pulses) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" (list (quote ?) (list (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) 1 1)) (list (list 4 4) (list 1 (list 1 (list 1 2 1 1)) -1 1))))))) (om-make-point 462 832) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 170 647) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 189 814) (om-make-point 86 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 934 633) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 814 445) (om-make-point 524 185) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5882) (6440) (6634) (6320) (6866) (6462) (6732) (6414) (6478) (7334) (7360) (6548) (6568) (6014) (6516) (7568) (6916) (6836) (6566) (6894) (6992) (6464))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((30) (31) (31) (30) (31) (31) (31) (32) (31) (31) (31) (31) (31) (30) (30) (30) (30) (30) (30) (30) (30) (30))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((20) (26) (425) (20) (44) (9) (9) (20) (16) (8) (26) (61) (300) (300) (300) (300) (300) (300) (300) (300) (300) (300))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 791 255) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "amp-of-the-index" (om-load-patch-abs1 "amp-of-the-index" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 66 252) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (6 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 1 nil 0))) 6.19 nil "" (om-make-point 1126 244) (om-make-point 657 656)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1633/3 200) nil (list (list 9.071091189980507D-4 0.0027056036051362753D0 0.0013584120897576213D0 0.0011942624114453793D0 0.002423263620585203D0 0.0016726113390177489D0 0.003767138347029686D0 0.006671598181128502D0 0.0030729600694030524D0 0.0039298031479120255D0 0.003105438081547618D0 0.001528860884718597D0 0.0023840314242988825D0 5.414906772784889D-4 5.29320037458092D-4 1.3025998487137258D-4 4.987510619685054D-4 3.6777587956748903D-4 2.4752842728048563D-4 6.243205280043185D-4 3.732021723408252D-4 0.001147995819337666D0)) nil "amp-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "note-of-the-index" (om-load-patch-abs1 "note-of-the-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 147 486) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 157 426) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 89 280) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 3" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 127 336) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 205 205) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 183 248) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE 2" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 141 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 4 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (1 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 330 603)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1315/3 306) nil (list (list 5882 6440 6634 6320 6866 6462 6732 6414 6478 7334 7360 6548 6568 6014 6516 7568 6916 6836 6566 6894 6992 6464)) nil "note-of-the-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "notes" (om-load-patch-abs1 "notes" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote nil) (om-make-point 1099 323) nil nil nil "notes"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 413 147) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->LIST" (quote sdif->list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SDIF-FILE" nil))) (om-make-point 43 113) nil (list (list (list 353 (list 0.0D0 55.3382453918457D0 7.019699551165104D-4 -0.3223642110824585D0)) (list 373 (list 0.0D0 123.77254486083985D0 0.0010565248085185886D0 2.5375795364379883D0)) (list 393 (list 0.0D0 87.2294692993164D0 3.008124476764351D-4 -0.32290080189704895D0)) (list 413 (list 0.0D0 151.73809814453125D0 2.0798126934096217D-4 -2.6692028045654297D0)) (list 433 (list 0.0D0 169.74588012695313D0 1.3190918252803385D-4 0.9287561774253845D0)) (list 453 (list 0.0D0 107.35735321044922D0 6.909732474014163D-4 -1.0476537942886353D0)) (list 473 (list 0.0D0 122.75224304199219D0 9.132507839240134D-4 2.7483272552490235D0)) (list 493 (list 0.0D0 124.73492431640625D0 9.783150162547827D-4 0.535895049571991D0)) (list 513 (list 0.0D0 120.2357406616211D0 9.388269972987473D-4 -2.6654906272888184D0)) (list 533 (list 0.0D0 173.7391815185547D0 7.276074029505253D-4 3.0174899101257324D0)) (list 553 (list 0.0D0 107.33589172363281D0 0.0015086521161720157D0 0.7578415870666504D0)) (list 573 (list 0.0D0 146.4302978515625D0 0.001332091516815126D0 -1.146741509437561D0)) (list 593 (list 0.0D0 142.71044921875D0 7.237246027216315D-4 0.15221187472343445D0) (list 1.0D0 6271.63818359375D0 1.2038720888085663D-4 -0.8822067975997925D0) (list 2.0D0 244.48927307128906D0 9.071091189980507D-4 -2.555365562438965D0) (list 3.0D0 4493.8505859375D0 7.705130701651797D-5 -2.3325092792510987D0)) (list 613 (list 0.0D0 138.7163848876953D0 0.0010638278909027577D0 0.4926435351371765D0) (list 1.0D0 6383.7109375D0 3.3032658393494785D-4 -1.5153815746307373D0) (list 2.0D0 337.1541442871094D0 0.0027056036051362753D0 -0.47394850850105286D0) (list 3.0D0 4466.861328125D0 2.4947006022557616D-4 -1.4690577983856202D0) (list 4.0D0 2123.80810546875D0 1.9533139129634947D-4 2.7222297191619873D0) (list 5.0D0 860.6818237304688D0 2.6038801297545433D-4 -0.12554007768630982D0)) (list 633 (list 0.0D0 141.57159423828125D0 0.0020692069083452225D0 -1.0994553565979004D0) (list 1.0D0 6362.5302734375D0 8.85823043063283D-4 2.2401628494262696D0) (list 2.0D0 377.1204833984375D0 0.0013584120897576213D0 1.1898890733718872D0) (list 3.0D0 4447.576171875D0 2.4382449919357896D-4 3.0863633155822754D0) (list 4.0D0 2189.441650390625D0 2.0144929294474423D-4 -1.169248342514038D0) (list 5.0D0 902.12353515625D0 1.365414500469342D-4 2.9507975578308106D0) (list 6.0D0 4824.701171875D0 4.169129897491075D-5 -1.1506593227386475D0)) (list 653 (list 0.0D0 96.59721374511719D0 0.001908414182253182D0 2.539872884750366D0) (list 1.0D0 6400.6416015625D0 9.91844804957509D-4 -0.49595171213150025D0) (list 2.0D0 314.5866394042969D0 0.0011942624114453793D0 -1.6214815378189087D0) (list 3.0D0 4477.181640625D0 5.807105335406959D-4 -2.753725528717041D0) (list 4.0D0 2180.2255859375D0 6.676318298559636D-5 -2.573214054107666D0) (list 5.0D0 852.8760986328125D0 9.08338843146339D-5 -2.078141212463379D0) (list 6.0D0 4946.8125D0 1.4078349340707064D-4 0.13890902698040009D0) (list 7.0D0 3190.8583984375D0 3.528445085976273D-5 -0.7807484269142151D0)) (list 673 (list 0.0D0 160.67672729492188D0 0.0015665438259020448D0 0.7348690629005432D0) (list 1.0D0 6400.36083984375D0 4.8260431503877044D-4 2.700801372528076D0) (list 2.0D0 431.420166015625D0 0.002423263620585203D0 0.8119126558303833D0) (list 3.0D0 4680.80322265625D0 2.2756270482204855D-4 -2.8432869911193848D0) (list 4.0D0 2130.705078125D0 1.990704913623631D-4 2.974132776260376D0) (list 5.0D0 776.919677734375D0 3.410493372939527D-4 -0.8706426024436951D0) (list 6.0D0 4944.91064453125D0 6.716814823448658D-5 -0.8875600695610046D0) (list 7.0D0 3266.04345703125D0 9.041072917170823D-5 -0.3184191882610321D0)) (list 693 (list 0.0D0 148.86508178710938D0 0.0017970986664295197D0 -0.2893587648868561D0) (list 1.0D0 6734.44970703125D0 1.8576761067379266D-4 -0.6138021349906921D0) (list 2.0D0 341.7589111328125D0 0.0016726113390177489D0 -0.4051419198513031D0) (list 3.0D0 4528.9794921875D0 8.643275941722095D-4 -0.2687332332134247D0) (list 4.0D0 2012.1136474609375D0 6.590386037714779D-4 -2.5208990573883057D0) (list 5.0D0 797.8308715820313D0 4.8236773000098765D-4 -0.26350584626197815D0) (list 6.0D0 4874.22314453125D0 1.7976447998080403D-4 0.5270349383354187D0) (list 7.0D0 3097.078857421875D0 3.611467545852065D-4 2.4881162643432617D0) (list 8.0D0 6480.4541015625D0 6.211132858879864D-4 -1.0119266510009766D0)) (list 713 (list 1.0D0 6785.8193359375D0 5.971495993435383D-4 0.6349343061447144D0) (list 2.0D0 399.44891357421875D0 0.003767138347029686D0 -0.4758590757846832D0) (list 3.0D0 4633.13037109375D0 4.384389612823725D-4 -0.9809638857841492D0) (list 4.0D0 2224.37158203125D0 5.07354096043855D-4 -1.4594764709472657D0) (list 5.0D0 837.2478637695313D0 5.717753083445132D-4 -1.6857950687408448D0) (list 6.0D0 4995.78076171875D0 1.7523812130093575D-4 2.026873826980591D0) (list 7.0D0 3322.1953125D0 3.6499096313491464D-4 -0.13208523392677307D0) (list 8.0D0 6462.4453125D0 8.491082699038088D-4 0.3568480610847473D0) (list 9.0D0 3156.3310546875D0 2.6890228036791086D-4 -1.605941653251648D0) (list 10.0D0 6313.779296875D0 0.0016798850847408176D0 -1.2794861793518067D0) (list 11.0D0 6124.4453125D0 3.2218429259955883D-4 1.354982852935791D0)) (list 733 (list 1.0D0 6909.7578125D0 0.0013903743820264936D0 -1.8965460062026978D0) (list 2.0D0 332.2933044433594D0 0.006671598181128502D0 1.0388344526290894D0) (list 3.0D0 4599.556640625D0 0.0011766079114750028D0 0.6794713139533997D0) (list 4.0D0 2143.478515625D0 6.866129697300494D-4 -2.444276809692383D0) (list 5.0D0 897.8027954101563D0 1.2438444537110627D-4 2.382786989212036D0) (list 6.0D0 4854.962890625D0 9.55670780967921D-4 -1.0883610248565674D0) (list 7.0D0 3718.41650390625D0 8.054666686803103D-4 -1.448310136795044D0) (list 8.0D0 6479.63525390625D0 0.001067491015419364D0 -0.14897273480892182D0) (list 9.0D0 3003.418701171875D0 8.431244059465826D-4 2.6298208236694336D0) (list 11.0D0 6290.1923828125D0 4.4486974366009236D-4 0.8951305747032166D0) (list 12.0D0 1500.58935546875D0 5.7106521126115695D-5 -0.21033471822738648D0) (list 13.0D0 606.8513793945313D0 4.975619376637042D-4 1.5394291877746582D0) (list 14.0D0 6631.45751953125D0 0.0017031739698722959D0 2.5282111167907715D0) (list 229.0D0 7944.04443359375D0 0.0012397381942719222D0 0.9430487751960754D0)) (list 753 (list 1.0D0 6770.15869140625D0 0.002400362864136696D0 2.2304930686950684D0) (list 2.0D0 344.9319152832031D0 0.0030729600694030524D0 -0.7037762999534607D0) (list 3.0D0 4987.24267578125D0 0.002012050710618496D0 2.393115520477295D0) (list 4.0D0 1904.0244140625D0 8.291869307868183D-4 1.3439995050430298D0) (list 5.0D0 832.3436279296875D0 8.398735080845654D-4 3.0422019958496094D0) (list 7.0D0 3570.280517578125D0 5.140749271959066D-4 1.5605584383010865D0) (list 8.0D0 6578.4609375D0 0.002382306382060051D0 -2.3833367824554444D0) (list 9.0D0 2919.03271484375D0 6.718090153299272D-4 -2.389726161956787D0) (list 12.0D0 1259.6502685546875D0 8.454505586996675D-4 -2.034336566925049D0) (list 13.0D0 563.5287475585938D0 6.220891373232007D-4 2.2369422912597657D0) (list 15.0D0 7371.5322265625D0 6.381305865943432D-4 1.240458607673645D0) (list 17.0D0 6276.13720703125D0 0.0013921302743256092D0 2.4784302711486817D0) (list 18.0D0 5810.64794921875D0 0.0D0 -1.3078718185424805D0) (list 19.0D0 4521.9453125D0 0.0016784889157861472D0 0.25169554352760315D0) (list 23.0D0 5541.5D0 0.0025438524316996336D0 -2.145857810974121D0) (list 24.0D0 3844.12060546875D0 0.0012228479608893395D0 1.5739471912384034D0) (list 25.0D0 6934.60791015625D0 8.370746509172022D-4 0.3409208357334137D0) (list 26.0D0 5295.26171875D0 0.001896027009934187D0 -2.522533416748047D0) (list 27.0D0 4027.0029296875D0 0.0010275628883391619D0 -0.6004908680915833D0) (list 28.0D0 1647.867431640625D0 3.64738458301872D-4 2.415858030319214D0) (list 229.0D0 7810.71337890625D0 0.004130644723773003D0 -0.7215728759765625D0)) (list 773 (list 1.0D0 6478.564453125D0 5.066560115665197D-4 0.7157391905784607D0) (list 2.0D0 565.5084228515625D0 0.0039298031479120255D0 -2.1480538845062256D0) (list 3.0D0 4665.0654296875D0 0.0017239277949556709D0 1.2527927160263062D0) (list 4.0D0 1892.0665283203125D0 0.01075331587344408D0 3.0200300216674805D0) (list 5.0D0 804.4926147460938D0 0.0037640337832272053D0 3.030715227127075D0) (list 9.0D0 3009.067138671875D0 0.0013894210569560528D0 -1.299247145652771D0) (list 12.0D0 1314.408447265625D0 0.002255583181977272D0 2.311094284057617D0) (list 15.0D0 7704.8251953125D0 5.247099325060844D-4 0.08664392679929733D0) (list 17.0D0 6274.45458984375D0 0.001079800073057413D0 -1.678301215171814D0) (list 19.0D0 3944.143798828125D0 0.001089163706637919D0 2.363933563232422D0) (list 25.0D0 7116.8076171875D0 8.552645449526608D-4 1.3526575565338135D0) (list 26.0D0 5433.18896484375D0 6.231540464796126D-4 -0.9999327063560486D0) (list 27.0D0 4126.58154296875D0 8.99501028470695D-4 0.8962618112564087D0) (list 29.0D0 1023.7821044921875D0 0.00387689471244812D0 -0.005348789505660534D0) (list 30.0D0 3645.150390625D0 0.003570837900042534D0 0.8334749937057495D0) (list 31.0D0 143.71884155273438D0 0.0070511577650904656D0 1.4717081785202027D0) (list 32.0D0 4957.93115234375D0 0.0033406568691134453D0 1.069486141204834D0) (list 33.0D0 3288.71826171875D0 0.002475699409842491D0 -0.6364373564720154D0) (list 34.0D0 2812.629638671875D0 0.003129765158519149D0 1.9795273542404175D0) (list 35.0D0 381.24407958984375D0 0.003587741404771805D0 -0.406180202960968D0) (list 228.0D0 7983.27099609375D0 0.0019056282471865416D0 1.0529671907424927D0) (list 229.0D0 7996.0263671875D0 0.0019461631309241057D0 -2.187671422958374D0)) (list 793 (list 1.0D0 6778.68408203125D0 0.0012710461160168052D0 0.8480848073959351D0) (list 2.0D0 573.6046142578125D0 0.003105438081547618D0 -1.8648407459259034D0) (list 3.0D0 4841.9814453125D0 0.006376719567924738D0 -1.8966480493545533D0) (list 9.0D0 2916.870849609375D0 0.003913783933967352D0 1.3801417350769043D0) (list 12.0D0 1203.529296875D0 9.718778310343623D-4 2.4434192180633545D0) (list 15.0D0 7627.0380859375D0 0.0012596488231793046D0 0.6357269883155823D0) (list 19.0D0 3788.111572265625D0 7.788356160745025D-4 0.031767118722200394D0) (list 25.0D0 7285.427734375D0 0.0011563891312107444D0 -0.5255362391471863D0) (list 26.0D0 5315.93359375D0 0.002234413754194975D0 0.6543137431144714D0) (list 29.0D0 896.9596557617188D0 8.667580550536513D-4 0.7651314735412598D0) (list 30.0D0 3619.401123046875D0 0.0020829986315220595D0 1.7008532285690308D0) (list 31.0D0 148.2151641845703D0 0.0010090727591887117D0 -1.0329365730285645D0) (list 33.0D0 3203.912841796875D0 9.270553709939122D-4 2.1868534088134766D0) (list 37.0D0 5115.4501953125D0 0.003056394634768367D0 -2.9966399669647217D0)) (list 813 (list 1.0D0 6652.71728515625D0 3.902528842445463D-4 -3.005174398422241D0) (list 2.0D0 358.91021728515625D0 0.001528860884718597D0 1.6312755346298218D0) (list 3.0D0 4692.72216796875D0 7.430397672578692D-4 -1.7531579732894898D0) (list 9.0D0 2968.841796875D0 0.003491202834993601D0 -1.5845613479614258D0) (list 12.0D0 1413.9990234375D0 3.826379543170333D-4 0.005319356918334961D0) (list 15.0D0 7919.5986328125D0 3.1840766314417124D-4 3.092863082885742D0) (list 25.0D0 7352.05908203125D0 8.189163636416197D-4 -1.1113301515579224D0) (list 29.0D0 1160.558837890625D0 8.830612059682608D-4 3.1379523277282715D0) (list 30.0D0 3461.519775390625D0 5.751979188062251D-4 0.09445739537477493D0) (list 38.0D0 5064.748046875D0 0.0038822086062282324D0 1.731394648551941D0)) (list 833 (list 1.0D0 6721.38232421875D0 1.7448997823521495D-4 -2.2698605060577393D0) (list 2.0D0 363.3446044921875D0 0.0023840314242988825D0 1.2581636905670166D0) (list 3.0D0 4943.97705078125D0 7.733840029686689D-4 0.6775393486022949D0) (list 9.0D0 2886.004150390625D0 0.0010960445506498218D0 1.3360075950622559D0) (list 15.0D0 7584.0390625D0 3.212334122508764D-4 -0.6361196637153626D0) (list 25.0D0 7250.8037109375D0 2.6335037546232343D-4 -1.1652281284332276D0) (list 29.0D0 1075.2862548828125D0 7.833703421056271D-4 1.100618600845337D0) (list 30.0D0 3612.27490234375D0 5.829603760503233D-4 0.6041183471679688D0)) (list 853 (list 2.0D0 263.7710266113281D0 5.414906772784889D-4 2.7536427974700928D0) (list 3.0D0 4418.9521484375D0 1.4695362187922D-4 1.8072518110275269D0) (list 9.0D0 2790.407958984375D0 3.0552837415598333D-4 -2.326906204223633D0) (list 25.0D0 7345.6923828125D0 2.6386132230982185D-4 1.1537784337997437D0) (list 29.0D0 1028.0982666015625D0 4.15258837165311D-4 -2.543792486190796D0) (list 30.0D0 3548.76953125D0 2.160946314688772D-4 -2.6124610900878907D0)) (list 873 (list 2.0D0 352.4878234863281D0 5.29320037458092D-4 -0.5643215179443359D0) (list 3.0D0 4339.52880859375D0 5.924520883127116D-5 -1.658568024635315D0) (list 9.0D0 2852.1259765625D0 1.360338064841926D-4 1.2355787754058838D0) (list 25.0D0 7356.51025390625D0 2.0028972357977182D-4 -1.1506931781768799D0) (list 29.0D0 1005.3829956054688D0 2.362816740060225D-4 0.04703095555305481D0) (list 30.0D0 3728.643798828125D0 1.077447523130104D-4 2.215160846710205D0)) (list 893 (list 2.0D0 647.2857666015625D0 1.3025998487137258D-4 -0.273571252822876D0) (list 25.0D0 7517.0361328125D0 9.1845853603445D-5 2.5952255725860596D0) (list 29.0D0 849.1534423828125D0 1.8636583990883082D-4 2.330984115600586D0) (list 30.0D0 3738.900390625D0 8.210661326302216D-5 -1.6343176364898682D0)) (list 913 (list 2.0D0 444.0614318847656D0 4.987510619685054D-4 0.7992596626281738D0) (list 25.0D0 7436.1181640625D0 3.869985812343657D-5 -1.0214715003967286D0)) (list 933 (list 2.0D0 424.0922546386719D0 3.6777587956748903D-4 3.028369188308716D0) (list 39.0D0 669.3628540039063D0 7.973420724738389D-5 -2.0485751628875733D0) (list 40.0D0 7378.83251953125D0 6.376200472004712D-4 -0.6835628747940064D0)) (list 953 (list 2.0D0 362.83074951171875D0 2.4752842728048563D-4 -2.883695363998413D0) (list 39.0D0 657.1884155273438D0 5.0320733862463385D-5 -0.630132794380188D0) (list 40.0D0 7385.81884765625D0 5.86054811719805D-4 -1.2922033071517945D0)) (list 973 (list 2.0D0 438.5863952636719D0 6.243205280043185D-4 -2.8902862071990967D0) (list 39.0D0 689.7744750976563D0 9.512158430879936D-5 1.4437288045883179D0) (list 40.0D0 7462.232421875D0 1.9047905516345054D-4 1.6089401245117188D0)) (list 993 (list 2.0D0 464.1116027832031D0 3.732021723408252D-4 2.607264518737793D0) (list 39.0D0 680.4669799804688D0 1.3033616414759308D-4 1.5505332946777344D0) (list 40.0D0 7539.6748046875D0 5.029496969655156D-4 -2.282050132751465D0) (list 41.0D0 6939.98486328125D0 1.0550739534664899D-4 -3.088610887527466D0)) (list 1013 (list 2.0D0 341.8761291503906D0 0.001147995819337666D0 3.127249002456665D0) (list 39.0D0 745.5817260742188D0 2.318906772416085D-4 -1.046981930732727D0) (list 40.0D0 7485.4560546875D0 0.001119786174967885D0 2.609187602996826D0) (list 41.0D0 6606.85888671875D0 1.6774906544014812D-4 -2.49554181098938D0) (list 42.0D0 5050.2158203125D0 1.1586474283831194D-4 -1.6246974468231202D0) (list 43.0D0 7137.5537109375D0 4.752534441649914D-4 1.6429603099822998D0)) (list 1033 (list 39.0D0 722.303955078125D0 0.002827645745128393D0 0.3726373314857483D0) (list 40.0D0 7397.908203125D0 0.005009005777537823D0 -2.79541277885437D0) (list 41.0D0 6720.30419921875D0 0.0019568982534110546D0 1.9931676387786866D0) (list 42.0D0 4888.3271484375D0 4.877886385656893D-4 -1.4988945722579956D0) (list 43.0D0 6930.4912109375D0 0.0022737025283277035D0 -0.9986543655395508D0) (list 44.0D0 4185.51806640625D0 8.528330945409834D-4 0.1948266327381134D0) (list 45.0D0 2863.28125D0 2.701071498449892D-4 0.11502932757139206D0) (list 46.0D0 7989.38818359375D0 0.003598983632400632D0 0.3357602655887604D0) (list 47.0D0 1590.9075927734375D0 7.844686624594033D-4 0.5919379591941834D0) (list 48.0D0 384.269287109375D0 0.008717411197721959D0 -2.169431209564209D0)) (list 1053 (list 39.0D0 865.5983276367188D0 5.285362713038921D-4 -0.5645955204963684D0) (list 40.0D0 7999.52978515625D0 0.0020370392594486475D0 0.2574891448020935D0) (list 41.0D0 6728.361328125D0 0.0017390255816280842D0 -2.7104380130767823D0) (list 42.0D0 5090.8447265625D0 3.998831089120358D-4 -0.5964994430541992D0) (list 44.0D0 4238.66552734375D0 8.84460227098316D-4 1.4739248752593995D0) (list 45.0D0 2968.173095703125D0 4.338722792454064D-4 -1.3204506635665894D0) (list 46.0D0 8185.75830078125D0 0.003743127454072237D0 -1.6000159978866578D0) (list 47.0D0 1694.2777099609375D0 0.0011604942847043276D0 2.5935864448547364D0) (list 48.0D0 375.5982360839844D0 0.003572695190086961D0 -2.161942720413208D0) (list 49.0D0 4339.48291015625D0 6.183747318573296D-4 1.459524154663086D0) (list 50.0D0 7410.45361328125D0 0.0029815302696079016D0 -2.2818620204925537D0)) (list 1073 (list 39.0D0 643.0831298828125D0 0.0012855813838541508D0 -0.4796668589115143D0) (list 40.0D0 7722.48291015625D0 0.005421774461865425D0 -0.6553769111633301D0) (list 41.0D0 6910.328125D0 0.002601684769615531D0 -1.7554771900177002D0) (list 42.0D0 5101.9326171875D0 0.0019776395056396723D0 1.1082046031951905D0) (list 44.0D0 4096.39208984375D0 0.001123021706007421D0 0.3180399537086487D0) (list 45.0D0 3034.580810546875D0 7.596550858579576D-4 -1.0236626863479615D0) (list 47.0D0 1781.850341796875D0 8.749790140427649D-4 -2.2889645099639893D0) (list 48.0D0 460.2162780761719D0 0.0010608036536723376D0 2.674028158187866D0) (list 49.0D0 4443.42138671875D0 0.0012247153790667653D0 -0.6743987202644348D0) (list 50.0D0 7348.03466796875D0 0.006076762918382883D0 -0.11880748718976975D0) (list 51.0D0 8125.08740234375D0 0.0052414205856621266D0 -1.9378923177719117D0) (list 52.0D0 7932.76171875D0 0.0029492806643247605D0 1.3926724195480347D0) (list 53.0D0 2799.08935546875D0 0.001010740757919848D0 -2.5493597984313965D0) (list 54.0D0 7547.6884765625D0 0.004042642656713724D0 1.8321242332458496D0) (list 55.0D0 810.1058959960938D0 6.718510994687676D-4 1.736507773399353D0) (list 56.0D0 254.95895385742188D0 7.777205319143832D-4 -0.18306130170822144D0)) (list 1093 (list 39.0D0 377.79736328125D0 0.010175385512411595D0 -2.061283826828003D0) (list 40.0D0 7479.14599609375D0 0.006009458098560572D0 -0.2384636551141739D0) (list 42.0D0 5020.59228515625D0 0.004276179242879152D0 2.6145856380462647D0) (list 44.0D0 4198.330078125D0 0.0032516135834157467D0 1.2219510078430176D0) (list 45.0D0 2944.861572265625D0 0.002015369012951851D0 2.0144166946411133D0) (list 47.0D0 1689.979248046875D0 0.00412879791110754D0 -2.944028377532959D0) (list 49.0D0 4679.97900390625D0 0.0013600412057712675D0 -0.04172033071517944D0) (list 51.0D0 8062.33251953125D0 0.003906605299562216D0 0.7707639336585999D0) (list 53.0D0 2795.641845703125D0 0.002143377671018243D0 -0.7288802266120911D0) (list 55.0D0 710.3506469726563D0 0.0035330988466739655D0 -1.8550580739974976D0) (list 57.0D0 6749.70166015625D0 0.0033235519658774138D0 1.5164300203323365D0) (list 59.0D0 3781.863037109375D0 0.0013435528380796314D0 -2.687288999557495D0) (list 60.0D0 6975.6640625D0 0.003978752065449953D0 0.22380807995796204D0) (list 61.0D0 4479.3564453125D0 0.00216924911364913D0 1.9581636190414429D0) (list 62.0D0 1281.115234375D0 0.0013981107622385025D0 -0.8428916335105896D0) (list 63.0D0 7894.44140625D0 0.0028535800520330668D0 -2.4740898609161377D0)) (list 1113 (list 39.0D0 370.6202087402344D0 0.009032603353261948D0 2.4940595626831055D0) (list 40.0D0 7386.03466796875D0 0.008907409384846688D0 1.2649457454681397D0) (list 42.0D0 5000.9296875D0 0.002043113112449646D0 -2.73775315284729D0) (list 44.0D0 4144.53955078125D0 0.0022149705328047276D0 1.9904872179031372D0) (list 45.0D0 2917.940185546875D0 0.002794215688481927D0 -2.71404767036438D0) (list 47.0D0 1731.202392578125D0 0.003781960578635335D0 -1.857901692390442D0) (list 49.0D0 4635.56103515625D0 0.005037769675254822D0 -2.242003917694092D0) (list 51.0D0 7644.13720703125D0 0.007027757819741964D0 2.0526211261749268D0) (list 55.0D0 795.8869018554688D0 0.007745446637272835D0 1.2336907386779786D0) (list 57.0D0 6516.5986328125D0 0.0028642453253269196D0 -1.5545446872711182D0) (list 59.0D0 3679.060791015625D0 0.0023541932459920645D0 0.07914447039365769D0) (list 60.0D0 6965.568359375D0 0.003693755716085434D0 -2.7535037994384766D0) (list 61.0D0 4406.2626953125D0 0.0026309629902243615D0 1.1975799798965454D0) (list 62.0D0 1269.6856689453125D0 0.0026575836818665266D0 -2.8527207374572754D0) (list 64.0D0 6718.03857421875D0 0.0026712901890277863D0 0.8846566677093506D0) (list 66.0D0 1533.858642578125D0 0.002169741550460458D0 -1.1901626586914063D0) (list 67.0D0 8092.4267578125D0 0.005707601550966501D0 1.1904469728469849D0) (list 69.0D0 7400.00439453125D0 0.0D0 1.3981084823608399D0) (list 70.0D0 575.3751220703125D0 0.008791017346084118D0 0.9977527856826782D0) (list 71.0D0 164.0874786376953D0 0.0026631418149918318D0 2.9070885181427D0) (list 72.0D0 2406.635009765625D0 3.163610235787928D-4 -1.3724849224090577D0) (list 73.0D0 7914.060546875D0 0.003559884149581194D0 -1.3095422983169556D0)) (list 1133 (list 40.0D0 7232.0302734375D0 0.0012611133279278875D0 1.6964576244354248D0) (list 42.0D0 4938.90673828125D0 4.841480986215174D-4 2.693415880203247D0) (list 44.0D0 4050.069580078125D0 3.1856243731454015D-4 1.5485700368881226D0) (list 45.0D0 2980.79638671875D0 2.0561201381497085D-4 -0.4328141212463379D0) (list 47.0D0 1745.33642578125D0 6.938663427717984D-4 -2.9605278968811035D0) (list 49.0D0 4710.75830078125D0 2.597782004158944D-4 -1.761268973350525D0) (list 51.0D0 7972.18798828125D0 0.0D0 0.19384098052978516D0) (list 55.0D0 825.5057983398438D0 0.008237697184085846D0 2.037985324859619D0) (list 57.0D0 6651.89990234375D0 0.0035455164033919573D0 -0.6844384670257568D0) (list 59.0D0 3665.0771484375D0 9.561812039464712D-4 0.24295170605182648D0) (list 62.0D0 1446.7091064453125D0 3.7152928416617215D-4 -0.9416760802268982D0) (list 64.0D0 6165.015625D0 4.5215050340630114D-4 2.1812517642974854D0) (list 66.0D0 1289.915283203125D0 6.807661266066134D-4 0.8565118908882141D0) (list 71.0D0 139.26153564453125D0 0.008617968298494816D0 -1.00980544090271D0) (list 72.0D0 2142.569091796875D0 1.661434944253415D-4 1.4967830181121827D0) (list 75.0D0 536.4248657226563D0 0.006056156475096941D0 -0.48305362462997437D0) (list 76.0D0 312.8471374511719D0 0.004599803127348423D0 2.5670487880706787D0)) (list 1153 (list 40.0D0 6938.3291015625D0 0.002693437272682786D0 -1.6789134740829468D0) (list 42.0D0 5025.65625D0 2.488461323082447D-4 -2.1018500328063965D0) (list 44.0D0 4514.56396484375D0 0.0015090483939275146D0 0.5247671008110046D0) (list 45.0D0 2925.0654296875D0 4.340127343311906D-4 -0.3410951495170593D0) (list 55.0D0 721.3617553710938D0 0.010974951088428498D0 -0.8306062817573547D0) (list 57.0D0 6620.40771484375D0 0.0030360014643520117D0 2.5062923431396485D0) (list 59.0D0 3760.8134765625D0 0.0025305377785116434D0 2.9120466709136963D0) (list 62.0D0 1034.7281494140625D0 0.0054189409129321575D0 -2.4518377780914307D0) (list 66.0D0 1532.46826171875D0 5.656369612552226D-4 -0.18347464501857758D0) (list 71.0D0 112.36168670654297D0 0.04628625139594078D0 -2.609452247619629D0) (list 72.0D0 2463.25634765625D0 9.555615833960474D-4 2.0458872318267823D0) (list 75.0D0 299.5762939453125D0 0.019574787467718125D0 2.388277292251587D0) (list 78.0D0 7188.8720703125D0 0.0011009852169081569D0 1.8772486448287964D0) (list 80.0D0 601.1219482421875D0 0.012231491506099701D0 -0.9371287822723389D0) (list 81.0D0 947.1185302734375D0 0.005418550688773394D0 -2.285244941711426D0)) (list 1173 (list 44.0D0 4658.2763671875D0 0.001988067524507642D0 -0.5189711451530457D0) (list 55.0D0 661.3492431640625D0 0.011996744200587273D0 -0.4967960715293884D0) (list 57.0D0 6547.08203125D0 0.0026626288890838623D0 2.7268733978271485D0) (list 59.0D0 3729.8037109375D0 0.0018312075408175588D0 -1.2363932132720948D0) (list 62.0D0 1149.3515625D0 0.004390000831335783D0 1.476547360420227D0) (list 66.0D0 1644.941162109375D0 8.25472641736269D-4 1.824752926826477D0) (list 71.0D0 124.3060302734375D0 0.014932803809642792D0 1.1734809875488282D0) (list 72.0D0 2495.824462890625D0 8.599582361057401D-4 -2.858103036880493D0) (list 75.0D0 414.94488525390625D0 0.006361664738506079D0 1.4256062507629395D0) (list 78.0D0 7031.318359375D0 0.00277333683334291D0 -2.2801737785339356D0) (list 83.0D0 937.424560546875D0 0.0017818495398387313D0 -2.666594982147217D0)) (list 1193 (list 44.0D0 4672.578125D0 9.117115987464786D-4 -2.194042444229126D0) (list 55.0D0 709.307861328125D0 0.05255194753408432D0 -1.0954002141952515D0) (list 57.0D0 6380.7197265625D0 5.178057472221553D-4 -3.0555319786071778D0) (list 59.0D0 3817.21728515625D0 9.236007463186979D-4 -2.6351191997528076D0) (list 62.0D0 1111.65185546875D0 0.00908123329281807D0 1.5172367095947266D0) (list 66.0D0 1512.3634033203125D0 5.280404002405703D-4 0.03713437169790268D0) (list 71.0D0 113.7962417602539D0 0.04855520650744438D0 2.745103359222412D0) (list 72.0D0 2551.5126953125D0 0.0015222786460071803D0 2.4969301223754883D0) (list 75.0D0 426.29840087890625D0 0.020693330094218254D0 -2.5394184589385987D0) (list 78.0D0 6750.14306640625D0 9.250813745893538D-4 -2.4363598823547364D0) (list 83.0D0 884.0901489257813D0 0.01047983206808567D0 1.2978878021240235D0) (list 85.0D0 4209.3681640625D0 5.926445592194796D-4 2.690661907196045D0) (list 87.0D0 320.1325988769531D0 0.020148267969489098D0 -1.6238118410110474D0) (list 88.0D0 6535.630859375D0 3.2853116863407195D-4 1.3245869874954224D0)) (list 1213 (list 44.0D0 4609.3740234375D0 0.0011470543686300517D0 2.207744598388672D0) (list 55.0D0 589.6105346679688D0 0.019688736647367478D0 1.2244466543197632D0) (list 59.0D0 3509.045654296875D0 9.949543746188283D-4 1.13885498046875D0) (list 62.0D0 1199.3643798828125D0 0.0026582214049994946D0 -2.4482181072235108D0) (list 66.0D0 1268.322021484375D0 0.0019955900497734547D0 -0.9579858779907227D0) (list 71.0D0 127.21454620361328D0 0.04864586517214775D0 0.006905778776854277D0) (list 72.0D0 2635.529052734375D0 7.507450645789504D-4 -1.3815042972564698D0) (list 78.0D0 6884.09326171875D0 0.0016903206706047059D0 0.3598299026489258D0) (list 85.0D0 4073.946533203125D0 3.853020607493818D-4 2.929755449295044D0) (list 88.0D0 6480.59423828125D0 0.0017124528530985117D0 -1.1970634460449219D0) (list 89.0D0 7149.87646484375D0 8.601929876022041D-4 -2.8172876834869385D0) (list 90.0D0 4259.8505859375D0 9.157271706499159D-4 1.6435461044311524D0) (list 91.0D0 380.33056640625D0 0.008019205182790757D0 -1.2791906595230103D0) (list 92.0D0 725.2920532226563D0 0.01805301569402218D0 0.7833048701286316D0)) (list 1233 (list 55.0D0 634.3150024414063D0 0.02668019011616707D0 0.5517107844352722D0) (list 59.0D0 3418.05126953125D0 5.274928407743573D-4 1.7175428867340088D0) (list 62.0D0 1178.763671875D0 0.009204285219311715D0 2.9596521854400635D0) (list 66.0D0 1488.4482421875D0 0.0013552388409152627D0 -1.6929386854171753D0) (list 71.0D0 138.75315856933594D0 0.07717736810445786D0 3.0940029621124268D0) (list 72.0D0 2629.69482421875D0 0.0017373943701386452D0 1.5867689847946167D0) (list 78.0D0 6653.8505859375D0 0.002047955757007003D0 1.1488656997680664D0) (list 85.0D0 4089.003173828125D0 0.001214579096995294D0 2.9243178367614746D0) (list 89.0D0 6995.4853515625D0 0.0015070991357788444D0 1.2829011678695679D0) (list 90.0D0 4666.0263671875D0 0.0016427442897111178D0 -1.489181637763977D0) (list 91.0D0 340.3714599609375D0 0.03172363340854645D0 -0.16376741230487824D0) (list 94.0D0 1029.5328369140625D0 0.007105990778654814D0 -0.7524135708808899D0) (list 95.0D0 7290.09521484375D0 7.75556021835655D-4 1.6850483417510987D0) (list 96.0D0 831.7958984375D0 0.019301950931549073D0 2.367488384246826D0)) (list 1253 (list 55.0D0 704.6362915039063D0 0.08037125319242478D0 -0.9852340221405029D0) (list 62.0D0 1198.2462158203125D0 0.014228485524654389D0 0.38201937079429627D0) (list 66.0D0 1564.8946533203125D0 0.0011430629529058934D0 0.7086786031723023D0) (list 71.0D0 132.7742462158203D0 0.12206015735864639D0 0.9006819725036621D0) (list 72.0D0 2562.658203125D0 0.0010200777323916555D0 -2.5706076622009278D0) (list 78.0D0 6721.8837890625D0 0.0048982128500938416D0 -1.5883692502975464D0) (list 85.0D0 4306.96875D0 0.0014679116429761053D0 -2.1089353561401367D0) (list 90.0D0 4498.32958984375D0 0.001464693690650165D0 -0.10347431898117066D0) (list 91.0D0 355.118896484375D0 0.05320050194859505D0 -0.5835068225860596D0) (list 95.0D0 7426.3525390625D0 0.0020602212753146887D0 -1.1538658142089844D0) (list 97.0D0 7578.4716796875D0 0.004431215114891529D0 2.12835693359375D0) (list 98.0D0 3443.446044921875D0 9.353336063213646D-4 -2.7698068618774414D0) (list 99.0D0 1050.4146728515625D0 0.010927719064056874D0 -0.4687320291996002D0)) (list 1273 (list 55.0D0 683.333740234375D0 0.08453628420829773D0 2.2099857330322266D0) (list 62.0D0 1244.0118408203125D0 0.013070146553218365D0 -1.5519890785217286D0) (list 66.0D0 1686.69580078125D0 0.007442370057106018D0 0.27287930250167847D0) (list 71.0D0 132.7008819580078D0 0.16738615930080414D0 -1.0393692255020142D0) (list 72.0D0 2604.61328125D0 0.0010451477719470859D0 1.32918119430542D0) (list 78.0D0 6774.20361328125D0 0.010999680496752262D0 -0.3169296681880951D0) (list 85.0D0 4208.3544921875D0 0.002747541991993785D0 -1.1984773874282837D0) (list 91.0D0 386.16632080078125D0 0.08112579584121704D0 0.845456600189209D0) (list 95.0D0 7333.703125D0 0.003872751956805587D0 2.680194616317749D0) (list 97.0D0 7651.1494140625D0 0.005980321206152439D0 2.269369125366211D0) (list 98.0D0 3506.275634765625D0 7.059336639940739D-4 1.9544181823730469D0) (list 101.0D0 3118.218017578125D0 6.537958397530019D-4 1.889567255973816D0) (list 102.0D0 860.4154663085938D0 0.0D0 1.7712788581848145D0) (list 103.0D0 2577.24951171875D0 0.0010137241333723069D0 -0.4113992154598236D0) (list 104.0D0 1440.9183349609375D0 0.006680375896394253D0 1.1679874658584595D0) (list 105.0D0 1982.0589599609375D0 0.0013730546925216914D0 -2.371976137161255D0) (list 106.0D0 4679.01513671875D0 6.176133174449205D-4 3.0114026069641114D0) (list 107.0D0 7871.6005859375D0 0.001810941263101995D0 -1.7557294368743897D0)) (list 1293 (list 55.0D0 587.4297485351563D0 0.03826756030321121D0 2.917954683303833D0) (list 62.0D0 1556.860595703125D0 0.009801536798477173D0 -3.0401599407196045D0) (list 66.0D0 1725.5606689453125D0 0.003248213091865182D0 2.041116952896118D0) (list 71.0D0 137.02944946289063D0 0.2170180082321167D0 -3.1042962074279785D0) (list 78.0D0 6719.9638671875D0 0.0017195899272337556D0 -1.3769748210906983D0) (list 85.0D0 4105.17333984375D0 0.0014347601681947709D0 2.4975171089172364D0) (list 91.0D0 375.0616455078125D0 0.04883715137839317D0 -0.10664799809455872D0) (list 95.0D0 7349.75537109375D0 0.009066935628652573D0 -2.8548665046691895D0) (list 97.0D0 7515.744140625D0 0.0047545828856527805D0 0.285990834236145D0) (list 98.0D0 3433.391357421875D0 9.191179415211082D-4 0.23466525971889496D0) (list 101.0D0 2994.954345703125D0 0.0012952110264450312D0 -0.9676260948181152D0) (list 103.0D0 2590.16552734375D0 0.001409777207300067D0 -0.4715348780155182D0) (list 105.0D0 1890.1524658203125D0 0.0028513974975794554D0 1.4004545211791993D0) (list 106.0D0 4685.75927734375D0 0.00113056565169245D0 -1.5664877891540528D0) (list 107.0D0 7938.068359375D0 0.0014853389002382756D0 0.587229311466217D0) (list 108.0D0 1166.181884765625D0 0.00414753844961524D0 1.8007501363754273D0) (list 111.0D0 2780.137451171875D0 6.483375327661634D-4 -2.6936678886413574D0) (list 112.0D0 6575.08544921875D0 0.002389994217082858D0 0.16385246813297272D0) (list 114.0D0 7211.0927734375D0 0.005845631472766399D0 -2.602743625640869D0) (list 115.0D0 6874.11083984375D0 5.214990815147758D-4 1.803356409072876D0) (list 116.0D0 945.5736083984375D0 0.006103960797190666D0 2.9658637046813965D0) (list 117.0D0 767.787353515625D0 0.015577912330627442D0 -1.614885926246643D0)) (list 1313 (list 55.0D0 685.5887451171875D0 0.004915688652545214D0 1.9996845722198487D0) (list 62.0D0 1574.719970703125D0 0.0026770520489662886D0 2.336143970489502D0) (list 71.0D0 136.25523376464844D0 0.21213705837726593D0 0.8909299969673157D0) (list 78.0D0 6588.9638671875D0 6.565978401340544D-4 -2.050645112991333D0) (list 85.0D0 3976.5263671875D0 5.722593050450087D-4 2.9376351833343506D0) (list 91.0D0 459.6903076171875D0 0.022468775510787964D0 2.8912203311920166D0) (list 97.0D0 7286.46337890625D0 4.102176462765783D-4 -1.6053024530410767D0) (list 98.0D0 3339.10205078125D0 0.0010207557352259756D0 0.8703643679618836D0) (list 101.0D0 2946.933349609375D0 0.0014829037245362997D0 0.03621288388967514D0) (list 103.0D0 2356.62548828125D0 0.0012071201344951988D0 -0.4008004367351532D0) (list 106.0D0 4459.4599609375D0 3.6447966704145074D-4 -1.463923692703247D0) (list 107.0D0 7627.04150390625D0 7.043520454317331D-4 -2.2614660263061524D0) (list 108.0D0 1287.6839599609375D0 0.0020222626626491547D0 2.7934131622314453D0) (list 118.0D0 3146.7587890625D0 7.32742715626955D-4 -2.936640977859497D0) (list 120.0D0 7030.61962890625D0 4.049257840961218D-4 -3.026332378387451D0) (list 121.0D0 1831.30224609375D0 0.0010101113002747298D0 2.070531129837036D0) (list 122.0D0 1097.982421875D0 0.0015679378993809224D0 -1.5904016494750977D0)) (list 1333 (list 62.0D0 1492.095458984375D0 0.002195626264438033D0 -1.7656102180480957D0) (list 71.0D0 133.79393005371094D0 0.16310955584049225D0 -1.391255259513855D0) (list 78.0D0 6601.5166015625D0 9.764378191903234D-4 1.1120672225952149D0) (list 85.0D0 3854.546875D0 5.164939793758094D-4 -2.482724189758301D0) (list 91.0D0 471.930908203125D0 0.024247275665402413D0 -3.049165964126587D0) (list 97.0D0 8167.29052734375D0 0.001510449219495058D0 3.068810224533081D0) (list 98.0D0 3194.3720703125D0 0.0018377475207671524D0 -1.3048666715621949D0) (list 101.0D0 2942.5830078125D0 0.004505885299295187D0 -0.0271318256855011D0) (list 103.0D0 2485.8515625D0 7.958992500789464D-4 -0.8481956720352173D0) (list 106.0D0 4390.35302734375D0 0.004347790498286486D0 2.3352887630462647D0) (list 107.0D0 7401.3681640625D0 0.00251342193223536D0 2.1115970611572266D0) (list 121.0D0 1727.8486328125D0 0.007922512479126454D0 2.132869243621826D0) (list 122.0D0 1163.2891845703125D0 0.0036720959469676018D0 3.102254629135132D0) (list 125.0D0 7621.38232421875D0 0.003163197310641408D0 0.628570020198822D0)) (list 1353 (list 62.0D0 1515.1683349609375D0 0.012877724133431912D0 2.7809321880340576D0) (list 71.0D0 141.7981719970703D0 0.19963915646076203D0 2.78549861907959D0) (list 98.0D0 2923.757568359375D0 0.0018627579556778074D0 1.4140452146530152D0) (list 106.0D0 4611.12939453125D0 0.003924604970961809D0 -0.36058735847473145D0) (list 107.0D0 7707.22509765625D0 0.0036777372006326914D0 0.45621800422668457D0) (list 121.0D0 1680.259033203125D0 0.011268021538853646D0 0.020694097504019737D0) (list 122.0D0 1085.687255859375D0 0.003768958617001772D0 1.7629770040512085D0) (list 126.0D0 2655.566162109375D0 0.0013492099242284894D0 -1.471360206604004D0) (list 127.0D0 719.9998168945313D0 0.027815217152237892D0 0.8068196177482605D0) (list 129.0D0 7502.91455078125D0 0.0D0 -1.7631521224975586D0) (list 130.0D0 4320.30859375D0 0.002938151126727462D0 -2.3020763397216797D0) (list 131.0D0 1839.14794921875D0 0.00538348825648427D0 -2.218520164489746D0) (list 132.0D0 430.3872985839844D0 0.07551004737615586D0 -0.801353931427002D0) (list 225.0D0 8041.0390625D0 0.0015889372443780303D0 -0.6813843250274658D0)) (list 1373 (list 71.0D0 129.50201416015625D0 0.19727493822574616D0 0.5157566070556641D0) (list 98.0D0 2916.0107421875D0 0.0016998511273413897D0 2.507136344909668D0) (list 106.0D0 4715.74072265625D0 0.001715772203169763D0 -1.5405117273330689D0) (list 107.0D0 7565.6748046875D0 0.004222600255161524D0 -0.10129508376121521D0) (list 121.0D0 1580.6180419921875D0 0.009982658550143242D0 2.539367914199829D0) (list 122.0D0 1200.1229248046875D0 0.003418795997276902D0 -1.8326267004013062D0) (list 126.0D0 2517.066650390625D0 0.002218751236796379D0 -1.1157423257827759D0) (list 127.0D0 630.5196533203125D0 0.038568321615457535D0 2.4940743446350098D0) (list 130.0D0 4065.362060546875D0 0.001031273975968361D0 3.1084933280944824D0) (list 131.0D0 1797.25537109375D0 0.0036694123409688473D0 -1.02239191532135D0) (list 132.0D0 378.3087158203125D0 0.056192465126514435D0 -1.0421098470687867D0) (list 225.0D0 8006.13134765625D0 0.0013085411628708244D0 -3.104184627532959D0)) (list 1393 (list 71.0D0 138.58229064941406D0 0.19917842745780945D0 -1.7995237112045288D0) (list 98.0D0 2864.39013671875D0 4.4880350469611585D-4 -0.705294132232666D0) (list 106.0D0 4663.033203125D0 8.310165721923113D-4 -0.2542426288127899D0) (list 107.0D0 7637.03076171875D0 0.0031132111325860024D0 -0.9865262508392334D0) (list 121.0D0 1684.95361328125D0 0.0019691421184688807D0 2.1875123977661133D0) (list 122.0D0 1143.343994140625D0 0.0022307245526462794D0 2.0902020931243897D0) (list 126.0D0 2811.04052734375D0 6.981558981351554D-4 -0.3349921405315399D0) (list 127.0D0 767.07470703125D0 0.007842130959033966D0 -1.5157380104064942D0) (list 132.0D0 402.1671447753906D0 0.08104956150054932D0 -2.560591459274292D0) (list 133.0D0 7604.29052734375D0 0.004019079729914665D0 -0.48772627115249634D0) (list 225.0D0 7210.814453125D0 0.0013914419105276466D0 1.234788417816162D0)) (list 1413 (list 71.0D0 136.27175903320313D0 0.09707706421613693D0 1.580226182937622D0) (list 98.0D0 2574.089111328125D0 1.2196485477034003D-4 -2.9137563705444336D0) (list 106.0D0 4532.71435546875D0 1.9592445460148156D-4 -2.071861505508423D0) (list 107.0D0 7598.67578125D0 1.957534987013787D-4 -0.43872004747390747D0) (list 121.0D0 1681.74267578125D0 7.667214376851916D-4 -2.664669990539551D0) (list 122.0D0 1271.3067626953125D0 5.258991150185466D-4 -0.037870824337005615D0) (list 127.0D0 792.7252807617188D0 0.0021028397604823113D0 1.3243404626846314D0) (list 132.0D0 358.8692321777344D0 0.03316591680049896D0 1.7424439191818238D0) (list 134.0D0 688.8978271484375D0 0.0020587239414453507D0 0.6928890347480774D0) (list 225.0D0 7580.70654296875D0 1.7212888633366674D-4 -0.48674798011779785D0)) (list 1433 (list 71.0D0 103.72635650634766D0 0.0425008088350296D0 -3.0164501667022705D0) (list 98.0D0 2440.9482421875D0 1.1494250793475658D-4 -2.7241790294647217D0) (list 106.0D0 4499.6630859375D0 1.3941930956207216D-4 -2.777613878250122D0) (list 107.0D0 7760.14794921875D0 2.2110043209977448D-4 -2.7982077598571778D0) (list 121.0D0 1645.8236083984375D0 3.7130567943677306D-4 0.6367844939231873D0) (list 132.0D0 378.2718200683594D0 0.030515801161527634D0 -2.6559715270996094D0) (list 136.0D0 662.9368286132813D0 0.004441710188984871D0 -1.4343907833099366D0) (list 137.0D0 4693.80126953125D0 6.030495569575578D-5 1.7649301290512085D0)) (list 1453 (list 71.0D0 135.76951599121094D0 0.06829066574573517D0 -0.35914525389671326D0) (list 98.0D0 2073.863037109375D0 1.0171528265345842D-4 1.2706202268600464D0) (list 106.0D0 4266.13818359375D0 3.692807877087034D-5 1.9897503852844239D0) (list 107.0D0 7536.91650390625D0 1.1663917393889278D-4 -2.6705846786499024D0) (list 121.0D0 1500.930908203125D0 3.63790662959218D-4 3.0697927474975586D0) (list 132.0D0 361.2210388183594D0 0.021521497517824173D0 0.2005152702331543D0) (list 136.0D0 715.3551635742188D0 0.0029743595514446497D0 -0.4125892221927643D0) (list 137.0D0 4637.365234375D0 1.3188693264964968D-4 -2.4588818550109864D0)) (list 1473 (list 71.0D0 115.89491271972656D0 0.035106170922517777D0 1.8443728685379029D0) (list 107.0D0 7641.4560546875D0 1.5036528930068016D-4 -0.13551639020442963D0) (list 121.0D0 1622.77685546875D0 2.185295452363789D-4 -1.746302843093872D0) (list 132.0D0 304.91815185546875D0 0.019777853041887284D0 -2.437577724456787D0) (list 136.0D0 719.6837158203125D0 0.0010459978366270662D0 1.582700490951538D0) (list 137.0D0 4685.15087890625D0 8.185003389371559D-5 -1.9297271966934204D0)) (list 1493 (list 71.0D0 125.97669219970703D0 0.054934311658144D0 -2.488260507583618D0) (list 107.0D0 7502.86669921875D0 2.8210581513121724D-4 1.4452738761901856D0) (list 121.0D0 1794.9501953125D0 3.734736528713256D-4 -1.9249032735824585D0) (list 132.0D0 804.6991577148438D0 0.00305083766579628D0 0.44456949830055237D0) (list 137.0D0 4749.4736328125D0 3.502487379591912D-5 -0.5133023858070374D0) (list 138.0D0 405.09710693359375D0 0.02931246906518936D0 -0.8783654570579529D0) (list 139.0D0 1074.7254638671875D0 5.818671197630465D-4 -2.494478464126587D0)) (list 1513 (list 71.0D0 133.87046813964844D0 0.05402344465255737D0 -0.2208641618490219D0) (list 107.0D0 7272.62744140625D0 4.347006033640355D-4 -2.808790922164917D0) (list 121.0D0 1810.1512451171875D0 9.124020289164037D-5 -2.799922466278076D0) (list 132.0D0 716.23486328125D0 0.01052705105394125D0 1.272323727607727D0) (list 137.0D0 4747.70166015625D0 4.0839414577931166D-4 -0.3844468593597412D0) (list 138.0D0 378.9762878417969D0 0.11398079991340637D0 0.36931145191192627D0) (list 139.0D0 1143.1273193359375D0 0.0017658158903941513D0 -2.791407346725464D0)) (list 1533 (list 71.0D0 104.02684783935547D0 0.05953511968255043D0 1.3764656782150269D0) (list 107.0D0 7080.1435546875D0 3.20129853207618D-4 -2.6403448581695557D0) (list 121.0D0 1252.5548095703125D0 5.096807144582272D-4 -0.031146764755249024D0) (list 132.0D0 720.2979125976563D0 0.00993325188755989D0 2.0047402381896973D0) (list 137.0D0 4749.2041015625D0 0.0012360779801383615D0 0.6460666060447693D0) (list 138.0D0 394.6126708984375D0 0.11678272485733032D0 1.0257823467254639D0) (list 139.0D0 1013.53759765625D0 0.0019090408459305764D0 0.3751750588417053D0)) (list 1553 (list 71.0D0 126.81935119628906D0 0.08749057352542877D0 -2.5369081497192383D0) (list 107.0D0 7193.69873046875D0 6.959163583815098D-4 -2.063812732696533D0) (list 121.0D0 1742.978271484375D0 4.368599547888152D-5 -1.345510482788086D0) (list 132.0D0 1035.094970703125D0 0.0031875879503786564D0 0.926182746887207D0) (list 137.0D0 4117.6689453125D0 5.691811093129218D-4 -2.3724122047424317D0) (list 138.0D0 360.8554992675781D0 0.07195015251636505D0 0.7083397507667542D0) (list 141.0D0 836.462890625D0 0.0018197919707745314D0 -1.5656166076660157D0) (list 142.0D0 4734.1787109375D0 0.0018995594000443817D0 -1.6956219673156739D0) (list 144.0D0 537.6498413085938D0 0.013455666601657868D0 1.3320932388305664D0)) (list 1573 (list 71.0D0 123.51201629638672D0 0.08484578132629395D0 0.033656928688287735D0) (list 107.0D0 6867.345703125D0 8.976420504041016D-4 0.5096765756607056D0) (list 121.0D0 1529.9359130859375D0 5.798429265269078D-5 2.5770907402038574D0) (list 132.0D0 1110.6461181640625D0 0.004265140276402235D0 -1.7366307973861695D0) (list 137.0D0 4522.1796875D0 0.0015212413854897023D0 0.8364400863647461D0) (list 138.0D0 350.3241271972656D0 0.08884932845830918D0 0.9479769468307495D0) (list 142.0D0 4708.37451171875D0 0.0030546735506504774D0 -1.3086069822311402D0) (list 145.0D0 3759.675048828125D0 7.874169968999922D-4 1.306108832359314D0) (list 146.0D0 5740.52880859375D0 8.775792230153457D-5 -2.739954948425293D0) (list 147.0D0 666.42822265625D0 0.008252836763858796D0 1.5765817165374756D0) (list 148.0D0 7344.69580078125D0 8.359525236301124D-4 -0.5216016173362732D0)) (list 1593 (list 71.0D0 118.63341522216797D0 0.06237664446234703D0 2.345635414123535D0) (list 107.0D0 6827.51806640625D0 3.5937310894951225D-4 -1.8741501569747925D0) (list 121.0D0 1324.7542724609375D0 3.4976861206814647D-4 -1.483178973197937D0) (list 132.0D0 1071.8050537109375D0 0.0019042290514335037D0 0.3860376477241516D0) (list 138.0D0 369.14404296875D0 0.07451194524765015D0 1.0419059991836548D0) (list 142.0D0 4533.212890625D0 0.0020071431063115597D0 -1.9086122512817383D0) (list 145.0D0 3787.584228515625D0 3.032315871678293D-4 1.8603883981704712D0) (list 146.0D0 5723.97802734375D0 2.816674823407084D-4 -0.23770862817764282D0) (list 147.0D0 712.3453369140625D0 0.004097865894436836D0 2.6282482147216797D0) (list 148.0D0 7447.45654296875D0 9.968150407075882D-4 -2.010737419128418D0) (list 149.0D0 4214.189453125D0 3.352555213496089D-4 -2.5680789947509766D0) (list 150.0D0 7144.2578125D0 3.767592424992472D-4 1.5300590991973877D0)) (list 1613 (list 71.0D0 128.30662536621094D0 0.027035685256123543D0 -1.0750819444656372D0) (list 107.0D0 6995.51318359375D0 0.0024894860107451678D0 3.1045594215393067D0) (list 121.0D0 1685.2073974609375D0 3.517725854180753D-4 0.23482556641101837D0) (list 132.0D0 1025.8082275390625D0 4.245526506565511D-4 0.63581383228302D0) (list 138.0D0 369.6163330078125D0 0.0237567275762558D0 1.1204863786697388D0) (list 142.0D0 4505.70947265625D0 0.013751357793807984D0 2.9897749423980713D0) (list 145.0D0 3715.281982421875D0 0.0028839921578764916D0 -0.24938353896141052D0) (list 146.0D0 5695.90771484375D0 0.0017662136815488339D0 0.6862739324569702D0) (list 147.0D0 686.714111328125D0 0.0010738419368863106D0 0.7866142988204956D0) (list 148.0D0 7740.1943359375D0 0.003747411770746112D0 2.0809967517852783D0) (list 149.0D0 4037.1103515625D0 0.005296289920806885D0 -0.2759734094142914D0) (list 150.0D0 7207.0634765625D0 0.002318379934877157D0 2.919708728790283D0) (list 151.0D0 4277.5166015625D0 0.009416201151907444D0 -1.746228814125061D0) (list 152.0D0 5360.24609375D0 6.606763345189393D-4 1.0442460775375367D0) (list 153.0D0 4710.138671875D0 0.004767933394759893D0 0.35295167565345764D0) (list 154.0D0 5872.87744140625D0 0.0012492386158555746D0 -0.9451907277107239D0) (list 155.0D0 7531.857421875D0 0.0031783152371644974D0 -1.8314034938812256D0) (list 156.0D0 4983.287109375D0 0.0031753897201269865D0 -0.585235059261322D0)) (list 1633 (list 71.0D0 129.515380859375D0 0.009974345564842224D0 -2.849008083343506D0) (list 107.0D0 6582.3505859375D0 0.003531560767441988D0 2.596670627593994D0) (list 121.0D0 1643.74462890625D0 6.564789218828082D-4 -0.6386982798576355D0) (list 132.0D0 1063.37939453125D0 5.748105468228459D-4 -1.089354395866394D0) (list 138.0D0 375.7173767089844D0 0.015415055677294732D0 1.2749133110046387D0) (list 145.0D0 3225.447998046875D0 0.0014588115736842156D0 -1.269730567932129D0) (list 146.0D0 5734.890625D0 0.004750012885779142D0 -0.5809295177459717D0) (list 147.0D0 788.2454223632813D0 0.0011619736906141043D0 2.493436574935913D0) (list 148.0D0 7942.26416015625D0 0.004855732433497906D0 -3.0181238651275635D0) (list 149.0D0 3799.87451171875D0 0.0031509934924542904D0 1.0848709344863892D0) (list 150.0D0 7144.4990234375D0 0.003122682450339198D0 -0.779228925704956D0) (list 151.0D0 4252.560546875D0 0.034123990684747696D0 -0.6519439816474915D0) (list 152.0D0 5273.38427734375D0 0.004013003781437874D0 2.5962941646575928D0) (list 153.0D0 4774.35009765625D0 0.010954884812235833D0 0.5851978659629822D0) (list 154.0D0 6258.7646484375D0 0.00406996626406908D0 -1.6714630126953125D0) (list 157.0D0 7303.404296875D0 0.01171764824539423D0 0.5818747282028198D0) (list 160.0D0 7654.908203125D0 0.007350703701376915D0 1.5161250829696656D0) (list 161.0D0 4607.78759765625D0 0.009321440011262894D0 -2.0699803829193116D0) (list 163.0D0 7642.53173828125D0 0.0D0 1.4122076034545899D0) (list 164.0D0 6808.78076171875D0 0.005352572072297335D0 -2.6840662956237793D0) (list 165.0D0 6591.2080078125D0 0.0D0 2.682028293609619D0) (list 166.0D0 4962.54052734375D0 0.002835287945345044D0 2.4893150329589844D0) (list 167.0D0 7410.240234375D0 0.014764184132218361D0 -1.1964517831802369D0) (list 168.0D0 4050.383056640625D0 0.014458638615906239D0 2.174448013305664D0) (list 169.0D0 1277.3863525390625D0 6.534418207593262D-4 -0.02888249047100544D0) (list 170.0D0 4443.5146484375D0 0.017239296808838845D0 1.5529727935791016D0) (list 171.0D0 3613.018798828125D0 0.0033904050942510367D0 -1.0571874380111695D0)) (list 1653 (list 71.0D0 138.3116912841797D0 0.003962749615311623D0 1.3602558374404908D0) (list 107.0D0 6659.2529296875D0 0.00347954616881907D0 -2.7767531871795655D0) (list 121.0D0 1593.8809814453125D0 0.0011320181656628848D0 2.8677823543548584D0) (list 138.0D0 362.41339111328125D0 0.009223547764122486D0 1.442380666732788D0) (list 145.0D0 3072.23388671875D0 0.0021014579106122256D0 -1.4655029773712159D0) (list 146.0D0 5659.33984375D0 0.0018510096706449986D0 -1.239477515220642D0) (list 147.0D0 675.4304809570313D0 5.255791475065053D-4 0.4837871789932251D0) (list 148.0D0 7526.349609375D0 0.017905421555042267D0 -0.81844562292099D0) (list 149.0D0 3965.68359375D0 0.008892549201846123D0 -1.9857250452041626D0) (list 151.0D0 4326.7841796875D0 0.022634519264101982D0 -0.8811676502227783D0) (list 152.0D0 5305.353515625D0 0.01237280759960413D0 -2.1573898792266846D0) (list 153.0D0 4794.70947265625D0 0.01045734528452158D0 3.1136634349823D0) (list 154.0D0 6211.8271484375D0 0.0025854995474219323D0 -1.0132791996002198D0) (list 157.0D0 7238.0185546875D0 0.01499628834426403D0 3.0781209468841553D0) (list 161.0D0 4388.66650390625D0 0.0D0 -1.2250089645385743D0) (list 164.0D0 6839.3388671875D0 0.00432250089943409D0 2.1393864154815674D0) (list 168.0D0 4266.45068359375D0 0.0D0 -0.7145071029663086D0) (list 169.0D0 1277.67431640625D0 0.0011406734120100737D0 -2.7376322746276856D0) (list 171.0D0 3578.35009765625D0 7.130253943614662D-4 1.1756802797317505D0) (list 172.0D0 5978.80224609375D0 0.001376297208480537D0 2.362208604812622D0) (list 173.0D0 7959.5634765625D0 0.008513808250427246D0 -2.3610613346099854D0) (list 174.0D0 7958.4853515625D0 0.00825717207044363D0 0.628864586353302D0) (list 175.0D0 6366.03564453125D0 0.002302022185176611D0 -2.0406863689422608D0) (list 176.0D0 6853.33984375D0 0.002489537000656128D0 -0.6034809947013855D0) (list 177.0D0 5143.1806640625D0 0.006434611044824123D0 2.084348440170288D0) (list 222.0D0 8205.4033203125D0 0.013050327077507973D0 -1.6206947565078736D0)) (list 1673 (list 71.0D0 102.17082214355469D0 0.001631743274629116D0 -0.7210617661476135D0) (list 138.0D0 329.2572326660156D0 0.002951332600787282D0 2.7546167373657227D0) (list 145.0D0 3015.56298828125D0 0.0019421002361923457D0 2.674705982208252D0) (list 146.0D0 5693.31005859375D0 0.0017019954975694418D0 2.2498185634613037D0) (list 147.0D0 689.244384765625D0 0.0012734269257634879D0 1.9263542890548706D0) (list 148.0D0 7441.0478515625D0 0.01823013834655285D0 -2.4870762825012207D0) (list 149.0D0 3998.901611328125D0 0.014745466411113739D0 -0.4319373369216919D0) (list 151.0D0 4171.6923828125D0 0.006399952806532383D0 1.1717348098754883D0) (list 152.0D0 5040.02392578125D0 0.009176001884043217D0 -0.1056680679321289D0) (list 153.0D0 4666.740234375D0 0.03070061281323433D0 -1.4328593015670777D0) (list 154.0D0 6426.4033203125D0 0.0034949583932757378D0 -2.274113655090332D0) (list 157.0D0 7235.95751953125D0 0.008099300786852837D0 1.3063843250274659D0) (list 164.0D0 6855.7216796875D0 0.005189655348658562D0 -0.7272337079048157D0) (list 169.0D0 1242.8477783203125D0 4.2328922427259386D-4 1.5977745056152344D0) (list 171.0D0 3548.971435546875D0 0.0020040266681462527D0 0.5511578321456909D0) (list 173.0D0 7727.2626953125D0 0.0088223647326231D0 -3.0902798175811768D0) (list 180.0D0 3811.625732421875D0 0.009554591029882431D0 1.3900551795959473D0) (list 183.0D0 6643.69580078125D0 0.0030222004279494286D0 -0.1614316701889038D0) (list 184.0D0 7028.25244140625D0 0.0030987230129539967D0 -1.8019468784332276D0) (list 185.0D0 6179.203125D0 0.005679141730070114D0 -2.3924574851989746D0) (list 186.0D0 8024.435546875D0 0.006542510353028774D0 1.3314235210418702D0) (list 187.0D0 5291.92041015625D0 0.0033356475178152323D0 1.0666167736053467D0)) (list 1693 (list 138.0D0 352.044921875D0 0.0038512281607836485D0 -2.811209201812744D0) (list 145.0D0 2987.843017578125D0 0.002032069256529212D0 -1.4342074394226075D0) (list 146.0D0 5708.2119140625D0 9.608817636035383D-4 -0.5224751234054565D0) (list 147.0D0 730.8213500976563D0 0.0012557487934827805D0 -1.8465499877929688D0) (list 148.0D0 7487.60498046875D0 0.009775384329259396D0 2.3025033473968506D0) (list 149.0D0 3883.676513671875D0 0.007112470455467701D0 2.4115006923675537D0) (list 151.0D0 4273.734375D0 0.005251784343272448D0 -2.924283266067505D0) (list 152.0D0 5215.7255859375D0 0.007798917591571808D0 0.7294892072677612D0) (list 153.0D0 4554.56640625D0 0.011733624152839184D0 -1.3942406177520752D0) (list 154.0D0 6350.017578125D0 0.0025676055811345578D0 -2.9105985164642334D0) (list 164.0D0 6848.68701171875D0 0.0023963116109371186D0 1.2812087535858155D0) (list 169.0D0 1152.869384765625D0 5.429394659586251D-4 -1.2580406665802002D0) (list 171.0D0 3595.978271484375D0 0.0033951732330024243D0 -0.8764376044273377D0) (list 188.0D0 7189.2744140625D0 0.003839945187792182D0 -0.712600588798523D0) (list 189.0D0 4927.162109375D0 0.006230665370821953D0 -2.1344332695007324D0) (list 190.0D0 166.3199462890625D0 0.0023707589134573937D0 1.102372407913208D0) (list 191.0D0 7820.55712890625D0 0.005236465949565172D0 0.8007607460021973D0) (list 192.0D0 5611.81787109375D0 8.742992067709565D-4 -1.6229294538497925D0) (list 193.0D0 4389.18212890625D0 3.834564950011554D-7 -1.9526523351669312D0) (list 224.0D0 8152.60888671875D0 0.011349203996360302D0 1.200772762298584D0)) (list 1713 (list 138.0D0 420.53363037109375D0 0.006052709184587002D0 0.1426520198583603D0) (list 145.0D0 3025.1953125D0 8.831162704154849D-4 3.077274799346924D0) (list 146.0D0 5768.30029296875D0 0.0012377423699945212D0 -3.1002416610717774D0) (list 147.0D0 780.0365600585938D0 0.0027386501897126437D0 -1.392211675643921D0) (list 148.0D0 7809.95361328125D0 0.0011219697771593929D0 -3.0720479488372803D0) (list 149.0D0 3879.067138671875D0 0.0029070822056382895D0 3.00675368309021D0) (list 151.0D0 4540.5498046875D0 0.002685423707589507D0 -0.1118219718337059D0) (list 152.0D0 5137.89111328125D0 0.002452475018799305D0 2.81380558013916D0) (list 153.0D0 4756.6796875D0 0.002433776156976819D0 -0.1953517347574234D0) (list 154.0D0 6329.40771484375D0 6.556737353093922D-4 -2.883608818054199D0) (list 169.0D0 1094.818115234375D0 5.72832184843719D-4 1.0496504306793213D0) (list 171.0D0 3673.218017578125D0 0.002066426444798708D0 -1.065513253211975D0) (list 188.0D0 7298.7890625D0 0.0013704599114134908D0 -0.4325126111507416D0) (list 190.0D0 89.12211608886719D0 0.003912836778908968D0 -0.7688696980476379D0) (list 191.0D0 8090.90576171875D0 0.0015959852607920766D0 1.4384229183197022D0) (list 194.0D0 7482.69677734375D0 0.001458452781662345D0 1.7626780271530152D0)) (list 1733 (list 138.0D0 463.3306579589844D0 0.0062498413026332855D0 -1.857694149017334D0) (list 145.0D0 2992.650390625D0 8.201126474887133D-4 -3.1087024211883545D0) (list 146.0D0 5593.3115234375D0 4.6432905946858227D-4 -1.5817885398864746D0) (list 147.0D0 768.2495727539063D0 0.006901801098138094D0 -0.23091712594032288D0) (list 148.0D0 7978.40673828125D0 5.372444866225123D-4 0.9858497381210327D0) (list 149.0D0 3933.218994140625D0 4.7775296843610704D-4 -2.0613698959350586D0) (list 151.0D0 4511.06494140625D0 7.755284896120429D-4 -2.7320525646209717D0) (list 152.0D0 4828.80908203125D0 4.4050122960470617D-4 -1.323002815246582D0) (list 169.0D0 1316.31884765625D0 7.390336832031608D-4 -0.9267452359199524D0) (list 188.0D0 7604.1640625D0 5.125045427121222D-4 2.4421181678771973D0) (list 190.0D0 285.8839111328125D0 0.0037941986229270697D0 -0.7110670208930969D0) (list 195.0D0 107.00044250488281D0 0.0027569043450057507D0 2.4825875759124756D0)) (list 1753 (list 138.0D0 465.9343566894531D0 0.012187940068542958D0 2.6921944618225098D0) (list 145.0D0 3044.1728515625D0 3.069646772928536D-4 0.1722692996263504D0) (list 146.0D0 6251.34814453125D0 2.1766888676211238D-4 -3.1187384128570557D0) (list 149.0D0 3798.9052734375D0 5.310099222697318D-4 -0.701736569404602D0) (list 152.0D0 4659.6962890625D0 0.0010385385248810053D0 0.2775558829307556D0) (list 169.0D0 1153.468017578125D0 0.001560330973006785D0 0.5310075283050537D0) (list 190.0D0 102.84964752197266D0 0.028289366513490677D0 1.1876206398010254D0) (list 196.0D0 723.164306640625D0 0.004457642324268818D0 2.0383174419403076D0)) (list 1773 (list 145.0D0 3053.518798828125D0 7.383707561530173D-4 2.7702362537384033D0) (list 146.0D0 6157.0D0 3.9880210533738137D-4 -0.36313900351524353D0) (list 149.0D0 3884.83447265625D0 3.6467687459662557D-4 -1.811352014541626D0) (list 152.0D0 4308.283203125D0 5.165956099517643D-4 1.7990552186965943D0) (list 169.0D0 1312.0938720703125D0 0.0012581690680235625D0 -2.2138381004333496D0) (list 190.0D0 122.55892181396485D0 0.052238136529922485D0 -2.2014365196228028D0) (list 196.0D0 832.2725830078125D0 0.0018788108136504889D0 0.3401193916797638D0) (list 197.0D0 477.00079345703125D0 0.012029719538986683D0 1.729378342628479D0) (list 198.0D0 4738.75634765625D0 4.744976758956909D-4 2.040722370147705D0) (list 199.0D0 633.9761962890625D0 0.00405303156003356D0 -0.03803981840610504D0) (list 200.0D0 325.3357849121094D0 0.013396192342042923D0 -1.198263168334961D0)) (list 1793 (list 145.0D0 3071.86328125D0 0.0010975338518619538D0 -1.373012661933899D0) (list 146.0D0 6231.29296875D0 4.3330626795068383D-4 -1.5632703304290772D0) (list 149.0D0 3810.75732421875D0 6.980511825531721D-4 -0.5831326246261597D0) (list 152.0D0 4512.6015625D0 0.001546998042613268D0 1.719346523284912D0) (list 169.0D0 1176.1480712890625D0 0.0019308794289827347D0 -2.889955759048462D0) (list 190.0D0 124.13648986816406D0 0.07447312027215958D0 1.536758542060852D0) (list 196.0D0 948.935791015625D0 0.0017286187503486872D0 2.8152201175689698D0) (list 197.0D0 379.31976318359375D0 0.03463601693511009D0 -0.26722684502601624D0) (list 198.0D0 4505.767578125D0 0.0013630571775138379D0 -0.849101722240448D0) (list 201.0D0 690.8460693359375D0 0.005487287882715464D0 -1.0824785232543946D0)) (list 1813 (list 145.0D0 3039.071533203125D0 7.471757708117366D-4 2.967618703842163D0) (list 146.0D0 6197.75146484375D0 1.3482352369464934D-4 -1.3305233716964722D0) (list 149.0D0 3901.970458984375D0 1.8191048002336174D-4 3.130922555923462D0) (list 152.0D0 5706.828125D0 5.492024865816347D-5 2.1205248832702637D0) (list 169.0D0 1073.890380859375D0 7.58045818656683D-4 -2.2668039798736573D0) (list 190.0D0 126.35911560058594D0 0.06975776702165604D0 -1.7601438760757447D0) (list 196.0D0 711.990234375D0 0.0026614158414304257D0 -0.2971748113632202D0) (list 197.0D0 323.42889404296875D0 0.014883052557706833D0 2.3376872539520264D0) (list 198.0D0 4455.09375D0 2.9244800680316985D-4 -0.36750519275665283D0)) (list 1833 (list 145.0D0 3027.12744140625D0 1.732307719066739D-4 -2.4850685596466065D0) (list 146.0D0 6275.77197265625D0 1.4887664292473346D-4 -1.3095005750656128D0) (list 149.0D0 3883.829833984375D0 8.937784878071398D-5 -1.5124199390411377D0) (list 190.0D0 133.3695068359375D0 0.06995327770709992D0 1.1511281728744507D0) (list 196.0D0 616.1616821289063D0 0.0010650519980117679D0 1.4071298837661744D0) (list 197.0D0 358.1475524902344D0 0.013467221520841122D0 0.48005127906799317D0) (list 198.0D0 4540.66357421875D0 3.886471677105874D-4 -2.051405906677246D0)) (list 1853 (list 145.0D0 3098.975830078125D0 3.1372864032164216D-4 2.634982109069824D0) (list 146.0D0 6331.6083984375D0 2.3319711908698082D-4 2.1274545192718506D0) (list 149.0D0 3850.701416015625D0 1.235522940987721D-4 2.8034210205078125D0) (list 190.0D0 122.63609313964844D0 0.05463506281375885D0 -2.35493803024292D0) (list 196.0D0 740.1110229492188D0 0.0021813097409904003D0 -1.422134280204773D0) (list 197.0D0 425.1642150878906D0 0.01639748550951481D0 -2.3690884113311768D0) (list 198.0D0 4469.1005859375D0 8.111103670671582D-4 0.07361582666635513D0)) (list 1873 (list 145.0D0 3110.2529296875D0 8.768389816395938D-4 2.2013015747070313D0) (list 146.0D0 6355.40283203125D0 1.0468869004398585D-4 0.9226064085960388D0) (list 149.0D0 3840.944091796875D0 3.242738021072D-4 -1.9158973693847657D0) (list 190.0D0 121.02133178710938D0 0.06397823244333267D0 0.1406855434179306D0) (list 196.0D0 849.8296508789063D0 0.0010524123208597303D0 -1.4105901718139649D0) (list 197.0D0 368.1776123046875D0 0.01255813892930746D0 -0.3884159326553345D0) (list 198.0D0 4580.57666015625D0 6.570378900505602D-4 0.6504946351051331D0) (list 203.0D0 1644.2657470703125D0 7.46890262234956D-4 0.9892973899841309D0) (list 204.0D0 1131.8604736328125D0 0.0010412555420771242D0 2.6861932277679444D0)) (list 1893 (list 145.0D0 3096.606689453125D0 0.0012874954845756293D0 -2.2129344940185547D0) (list 149.0D0 3883.01123046875D0 2.27396929403767D-4 2.4553287029266358D0) (list 190.0D0 109.53077697753906D0 0.06370265781879425D0 2.2211334705352783D0) (list 196.0D0 705.4055786132813D0 0.007370305713266134D0 -2.9819061756134033D0) (list 197.0D0 381.9535217285156D0 0.0168056171387434D0 2.6527421474456787D0) (list 198.0D0 4402.44873046875D0 0.0014547450700774789D0 -2.5069594383239746D0) (list 203.0D0 1525.9132080078125D0 0.0025216289795935154D0 1.5858606100082398D0) (list 204.0D0 1172.1971435546875D0 0.0012814243091270328D0 0.048538077622652054D0) (list 205.0D0 7362.623046875D0 0.0024235507007688284D0 -0.6466357111930847D0) (list 206.0D0 7633.3046875D0 0.002465256955474615D0 -0.43067169189453125D0)) (list 1913 (list 145.0D0 3155.333740234375D0 0.0013208359014242888D0 -2.061619758605957D0) (list 149.0D0 3720.598876953125D0 5.77859056647867D-4 2.1563949584960938D0) (list 190.0D0 123.43844604492188D0 0.06128475442528725D0 -1.890234112739563D0) (list 196.0D0 729.9033813476563D0 0.005899915471673012D0 2.958606243133545D0) (list 197.0D0 321.1119689941406D0 0.03419988602399826D0 2.9112422466278076D0) (list 198.0D0 4718.0419921875D0 0.0010123588144779206D0 0.3320678472518921D0) (list 203.0D0 1466.419921875D0 0.002895598066970706D0 1.2286875247955323D0) (list 204.0D0 1214.4456787109375D0 0.001379205845296383D0 1.2871215343475342D0) (list 205.0D0 7522.125D0 0.002912848489359021D0 -0.9642517566680908D0) (list 206.0D0 8076.41162109375D0 0.004263503476977348D0 -1.3229985237121582D0) (list 208.0D0 4439.2216796875D0 3.754094068426639D-4 2.5770301818847657D0)) (list 1933 (list 145.0D0 3107.263427734375D0 0.001864090794697404D0 -0.977778434753418D0) (list 149.0D0 3783.479248046875D0 6.740151438862085D-4 0.8829233646392822D0) (list 190.0D0 133.87767028808594D0 0.034529466181993485D0 -0.3031601905822754D0) (list 196.0D0 753.4974365234375D0 0.01532250177115202D0 1.4213014841079712D0) (list 197.0D0 446.492919921875D0 0.021711722016334534D0 0.07407063990831375D0) (list 198.0D0 5104.46728515625D0 7.330756052397192D-4 3.068309783935547D0) (list 203.0D0 1509.7431640625D0 0.001751223229803145D0 1.7346282005310059D0) (list 204.0D0 1146.3447265625D0 0.0018589511746540666D0 2.7641894817352295D0) (list 205.0D0 7664.80908203125D0 0.002126730279996991D0 2.907411575317383D0) (list 206.0D0 8073.33447265625D0 0.001334570231847465D0 1.0357720851898194D0) (list 208.0D0 4410.2783203125D0 8.494657231494784D-4 1.356372594833374D0) (list 210.0D0 4589.5361328125D0 0.0013407280202955008D0 -1.6307674646377564D0)) (list 1953 (list 145.0D0 3021.720458984375D0 0.0020385528914630413D0 0.3927065134048462D0) (list 190.0D0 104.16128540039063D0 0.02381676435470581D0 1.2919262647628785D0) (list 196.0D0 750.621826171875D0 0.016315236687660218D0 -0.19950808584690094D0) (list 197.0D0 468.5173645019531D0 0.025346318259835243D0 0.35712310671806336D0) (list 198.0D0 4985.40283203125D0 0.006174679379910231D0 -1.4331750869750977D0) (list 203.0D0 1569.1119384765625D0 0.006552091334015131D0 -2.520852565765381D0) (list 204.0D0 1122.51318359375D0 0.0031401615124195814D0 1.2538951635360718D0) (list 205.0D0 7535.73828125D0 9.622012730687857D-4 -1.8997149467468262D0) (list 206.0D0 7705.28173828125D0 5.034441710449755D-4 0.8623579144477844D0) (list 208.0D0 4694.677734375D0 0.0036980463191866875D0 0.21280831098556519D0)) (list 1973 (list 145.0D0 3290.5810546875D0 2.052629424724728D-4 -0.26606643199920655D0) (list 190.0D0 132.75445556640625D0 0.024118714034557343D0 -2.3868422508239746D0) (list 196.0D0 740.3180541992188D0 0.005028567276895046D0 0.7784873247146607D0) (list 197.0D0 459.9047546386719D0 0.006648426875472069D0 0.6331430077552795D0) (list 198.0D0 4639.04150390625D0 4.1689054341986776D-4 -1.4212908744812012D0) (list 203.0D0 1759.987060546875D0 0.0020323668140918017D0 1.033748984336853D0) (list 204.0D0 1512.6480712890625D0 0.0019658738747239113D0 -2.732726573944092D0) (list 205.0D0 7547.88623046875D0 0.001605690224096179D0 -1.6814292669296265D0) (list 208.0D0 4533.06396484375D0 2.7671982039123577D-8 -2.00426983833313D0) (list 215.0D0 6963.5546875D0 0.002745924284681678D0 -0.6565115451812744D0) (list 219.0D0 8042.27490234375D0 0.002174720400944352D0 -2.6438474655151367D0)) (list 1993 (list 190.0D0 118.8709716796875D0 0.030898626893758774D0 2.145482301712036D0) (list 196.0D0 714.2177734375D0 0.006420578341931105D0 -0.5468979477882385D0) (list 198.0D0 4938.14697265625D0 5.988204502500594D-4 0.5178734660148621D0) (list 203.0D0 1732.614501953125D0 0.0049803839065134525D0 0.1731848567724228D0) (list 204.0D0 1495.37353515625D0 5.935569643042982D-4 0.5996302962303162D0) (list 205.0D0 7941.52392578125D0 4.058402846567333D-4 -1.3075367212295533D0) (list 215.0D0 6793.32470703125D0 0.001174799632281065D0 2.843780517578125D0) (list 216.0D0 352.0765686035156D0 0.00884800311177969D0 2.5418434143066407D0)) (list 2013 (list 190.0D0 141.87091064453125D0 0.028206050395965576D0 -0.23668572306632996D0) (list 196.0D0 768.8035278320313D0 0.0027990660164505244D0 0.7268250584602356D0) (list 198.0D0 4836.291015625D0 1.2484684702940285D-4 -0.5628550052642822D0) (list 203.0D0 1819.9560546875D0 0.0011479038512334228D0 0.24061505496501923D0) (list 215.0D0 7023.50537109375D0 9.512976394034922D-4 2.543912887573242D0) (list 216.0D0 480.0825500488281D0 0.004631530959159136D0 1.4022173881530762D0)) (list 2033 (list 190.0D0 140.1495361328125D0 0.025600438937544823D0 -1.5046449899673462D0) (list 196.0D0 1275.8612060546875D0 3.5120832035318017D-4 -2.437229871749878D0) (list 203.0D0 1871.0631103515625D0 3.251619928050786D-4 1.9680707454681397D0) (list 215.0D0 7434.93798828125D0 1.0398770245956257D-4 -2.5185530185699463D0) (list 216.0D0 479.60498046875D0 0.0015374378999695182D0 1.276633858680725D0) (list 217.0D0 693.451416015625D0 4.963798564858735D-4 -2.2518391609191895D0)) (list 2053 (list 190.0D0 131.5810546875D0 0.017751505598425865D0 2.8566362857818604D0) (list 196.0D0 1470.0313720703125D0 2.7737847995013D-4 -1.8542526960372925D0) (list 203.0D0 1935.3037109375D0 9.703522664494813D-5 1.7367788553237915D0) (list 216.0D0 442.2547912597656D0 0.001156346290372312D0 -1.3073804378509522D0) (list 217.0D0 973.431884765625D0 1.4103393186815083D-4 2.1074612140655518D0)) (list 2073 (list 190.0D0 142.50332641601563D0 0.010894366540014744D0 1.2428433895111084D0) (list 203.0D0 2021.0640869140625D0 4.922793596051633D-4 -0.5658754706382752D0) (list 216.0D0 413.6711730957031D0 0.0015798897948116064D0 1.5535938739776612D0) (list 217.0D0 774.7101440429688D0 4.4333626283332706D-4 1.9907344579696656D0)) (list 2093 (list 190.0D0 143.21810913085938D0 0.005258698016405106D0 -0.08379915356636048D0) (list 216.0D0 315.4424133300781D0 0.00260631600394845D0 1.1365190744400025D0) (list 217.0D0 733.2162475585938D0 0.0010590829188004137D0 -1.5602803230285645D0)) (list 2113 (list 190.0D0 161.41937255859375D0 0.0027926182374358178D0 -1.7554916143417359D0) (list 216.0D0 405.8264465332031D0 0.0015860960120335222D0 2.6185848712921143D0) (list 217.0D0 747.1810302734375D0 7.079260540194809D-4 -2.846548080444336D0)) (list 2133 (list 190.0D0 143.5016326904297D0 0.0023852477315813303D0 2.004556655883789D0) (list 216.0D0 323.5660400390625D0 6.092640105634928D-4 2.804082155227661D0) (list 217.0D0 650.6473999023438D0 3.614201268646866D-4 2.8290467262268067D0)) (list 2153 (list 190.0D0 86.33882904052735D0 0.0016278444090858102D0 0.07241275906562805D0) (list 216.0D0 487.04156494140625D0 3.069527738261968D-4 -2.9347493648529053D0) (list 217.0D0 630.8385620117188D0 2.0704806956928224D-4 0.09435530006885529D0)) (list 2173 (list 190.0D0 169.63194274902344D0 0.0010459296172484756D0 2.019266128540039D0) (list 216.0D0 583.1926879882813D0 4.2828600271604955D-4 3.0446178913116455D0) (list 217.0D0 588.5505981445313D0 5.695055449450592D-8 3.073768138885498D0)) (list 2193 (list 190.0D0 147.22862243652344D0 0.0018538193544372917D0 -2.1022891998291016D0) (list 216.0D0 509.6473693847656D0 4.4761429307982326D-4 -1.1907161474227906D0)) (list 2213 (list 190.0D0 131.03839111328125D0 0.00201701233163476D0 2.0382866859436035D0) (list 216.0D0 526.0756225585938D0 1.581112010171637D-4 -1.7044055461883545D0)) (list 2233 (list 190.0D0 90.16720581054688D0 0.0021206005476415158D0 -0.22630563378334046D0) (list 216.0D0 329.8308410644531D0 2.871526521630585D-4 1.8377960920333863D0)) (list 2253 (list 190.0D0 141.3263702392578D0 0.002151224762201309D0 -1.2056325674057007D0) (list 216.0D0 446.30792236328125D0 4.2637813021428883D-4 -2.1585021018981934D0)) (list 2273 (list 190.0D0 129.37884521484375D0 0.002807971788570285D0 2.3584320545196533D0) (list 216.0D0 429.43121337890625D0 7.750551449134946D-4 2.867833375930786D0)) (list 2293 (list 190.0D0 87.918212890625D0 0.00196853862144053D0 0.33360975980758667D0) (list 216.0D0 441.3312072753906D0 4.203525895718485D-4 1.8826186656951905D0)) (list 2313 (list 190.0D0 153.31600952148438D0 8.14346014522016D-4 -1.824697732925415D0) (list 216.0D0 415.7112121582031D0 3.8716034032404423D-4 2.6048903465270996D0)) (list 2333 (list 190.0D0 140.97581481933594D0 4.6689267037436366D-4 1.8166539669036866D0) (list 216.0D0 392.00640869140625D0 2.476325025781989D-4 0.2103649377822876D0)) (list 2353 (list 190.0D0 126.7367172241211D0 0.0013607221189886332D0 0.5912409424781799D0) (list 216.0D0 401.20550537109375D0 4.762001917697489D-4 -2.130918264389038D0)) (list 2373 (list 190.0D0 111.2902603149414D0 0.00151872169226408D0 -2.9660756587982178D0) (list 216.0D0 488.32275390625D0 9.489516378380358D-5 -1.2284868955612183D0)) (list 2393 (list 190.0D0 218.7222442626953D0 8.084043656708673D-5 -2.6601524353027344D0)) (list 2413 (list 190.0D0 321.2618408203125D0 3.6251929122954607D-4 -0.9912019371986389D0) (list 218.0D0 121.59990692138672D0 7.562419050373137D-4 -1.2865638732910157D0)) (list 2433 (list 190.0D0 352.65509033203125D0 4.578781081363559D-4 -1.0306053161621094D0) (list 218.0D0 160.4203643798828D0 0.0012248464627191425D0 -2.8405919075012207D0)) (list 2453 (list 190.0D0 383.798583984375D0 2.9245298355817795D-4 -0.10430837422609329D0) (list 218.0D0 127.08722686767578D0 0.00214219419285655D0 2.132537841796875D0)) (list 2473 (list 190.0D0 408.10894775390625D0 3.345520526636392D-4 -1.9508047103881836D0) (list 218.0D0 178.61328125D0 0.00103280961047858D0 1.0031712055206299D0)) (list 2493 (list 190.0D0 441.1202697753906D0 5.238845478743315D-4 2.2555880546569824D0) (list 218.0D0 131.82640075683594D0 0.0031788749620318413D0 -0.7633535265922546D0)) (list 2513 (list 190.0D0 346.3578796386719D0 3.383171570021659D-4 -1.7487707138061524D0) (list 218.0D0 138.1929931640625D0 0.0029055543709546328D0 -2.31592059135437D0)) (list 2533 (list 190.0D0 349.6711730957031D0 6.869063945487142D-4 -1.7259995937347412D0) (list 218.0D0 136.61178588867188D0 0.003130922093987465D0 2.245288610458374D0)) (list 2553 (list 190.0D0 419.2622985839844D0 0.0010669685434550047D0 0.7281984686851502D0) (list 218.0D0 174.26075744628906D0 0.0023870610166341067D0 0.5976187586784363D0)) (list 2573 (list 190.0D0 762.7889404296875D0 1.4623129391111434D-4 0.3085969090461731D0) (list 218.0D0 133.0657196044922D0 0.00190109689719975D0 -1.2959691286087037D0)) (list 2593 (list 218.0D0 148.0018768310547D0 8.052630582824349D-4 2.771611213684082D0)) (list 2613 (list 218.0D0 129.4970245361328D0 2.284873917233199D-4 -0.39696910977363587D0)) (list 2633 (list 218.0D0 309.6356506347656D0 3.8458287599496544D-4 -2.3756043910980225D0)) (list 2653 (list 218.0D0 727.0430908203125D0 7.971126615302637D-5 2.140411615371704D0)) (list 2673 (list 218.0D0 1041.2154541015625D0 4.13953181123361D-4 -0.7810541987419128D0)) (list 2693 (list 218.0D0 1006.0223388671875D0 5.330184358172119D-4 -0.8987970352172852D0)) (list 2713 (list 218.0D0 1036.2227783203125D0 2.9909840668551624D-4 -2.974276542663574D0)))) "x" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Fora Bolsonaro.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 84 1) (om-make-point 169 83) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "out-files")) :device nil :host nil :name "Fora Bolsonaro" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (player)) (list (quote :spat-sdif-player))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 668 667) (om-make-point 495 179) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) (-3 (1 (-8 -1.0 2 2 2 2 2 2 2 2)))) ((3 4) ((1 (1 2 1 1 2 1 1 1 2 1 1 2)) (1 (1 -16 -2.0)) -1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5882)) :ldur (quote (20)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6440)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (26))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6634)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6320)) :ldur (quote (20)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6866)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (44))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6462)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6732)) :ldur (quote (20)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (9))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6414)) :ldur (quote (20)) :lvel (quote (32)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6478)) :ldur (quote (16)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7334)) :ldur (quote (31)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (8))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7360)) :ldur (quote (16)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (26))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6548)) :ldur (quote (16)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (61))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6568)) :ldur (quote (31)) :lvel (quote (31)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6014)) :ldur (quote (16)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6516)) :ldur (quote (16)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7568)) :ldur (quote (16)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6916)) :ldur (quote (31)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6836)) :ldur (quote (16)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6566)) :ldur (quote (16)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6894)) :ldur (quote (31)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6992)) :ldur (quote (13)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 240) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tree" (om-load-patch-abs1 "tree" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 361 583) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 376 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 87 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 330 438) (om-make-point 41 34) 512 "512" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 429 443) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 486 449) (om-make-point 41 34) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMQUANTIFY" (quote omquantify) (quote ((om-load-inputfun (quote input-funbox) "durations (list)" "SELF" (list 100)) (om-load-inputfun (quote input-funbox) "tempi (number or list)" "TEMPI" 60) (om-load-inputfun (quote input-funbox) "list of time signature(s)" "MEASURES" (list 4 4)) (om-load-inputfun (quote input-funbox) "maximum subdivision" "MAX/" 8) (om-load-inputfun (quote input-funbox) "list of forbidden subdivisions" "FORBID" nil) (om-load-inputfun (quote input-funbox) "grace-notes?" "OFFSET" 0) (om-load-inputfun (quote input-funbox) "precision (0.0-1.0)" "PRECIS" 0.5))) (om-make-point 151 496) (om-make-point 381 67.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 269 372) (om-make-point 56 34) (list 4 4) "(4 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 232 426) (om-make-point 41 34) 240 "240" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 58 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil))) (om-make-point 52 360) (om-make-point 22.5 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 114 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 148 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 50 174) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (13 0 2 0 nil 0) (1 0 2 1 nil 0) (11 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 6 2 nil 0) (3 0 6 3 nil 0) (4 0 6 5 nil 0) (5 0 6 6 nil 0) (2 0 9 0 nil 0) (9 0 10 0 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (2 0 12 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 717 718)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 711/2 2373/4) nil (list (list 7/4 (list (list (list 4 4) (list -3 (list 1 (list -9 2 2 2 2 2 2 2 2)))) (list (list 3 4) (list (list 1 (list 1 2 1 1 2 1 1 1 2 1 1 2)) (list 1 (list 1 -18)) -1))))) nil "tree"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 865 187.0) (om-make-point 34 34) 30 "30" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 921 183.0) (om-make-point 41 34) 110 "110" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 799 249.0) (om-make-point 354 55.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1090 116.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 1013 116.0) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-amp" (om-load-patch-abs1 "all-amp" (quote ((let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 69 195) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 267 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 84 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 165 124) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 146 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 5 0 nil 0) (4 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 545)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 827/3 473/2) nil (list (list 7.019699551165104D-4 0.0010565248085185886D0 3.008124476764351D-4 2.0798126934096217D-4 1.3190918252803385D-4 6.909732474014163D-4 9.132507839240134D-4 9.783150162547827D-4 9.388269972987473D-4 7.276074029505253D-4 0.0015086521161720157D0 0.001332091516815126D0 7.237246027216315D-4 1.2038720888085663D-4 9.071091189980507D-4 7.705130701651797D-5 0.0010638278909027577D0 3.3032658393494785D-4 0.0027056036051362753D0 2.4947006022557616D-4 1.9533139129634947D-4 2.6038801297545433D-4 0.0020692069083452225D0 8.85823043063283D-4 0.0013584120897576213D0 2.4382449919357896D-4 2.0144929294474423D-4 1.365414500469342D-4 4.169129897491075D-5 0.001908414182253182D0 9.91844804957509D-4 0.0011942624114453793D0 5.807105335406959D-4 6.676318298559636D-5 9.08338843146339D-5 1.4078349340707064D-4 3.528445085976273D-5 0.0015665438259020448D0 4.8260431503877044D-4 0.002423263620585203D0 2.2756270482204855D-4 1.990704913623631D-4 3.410493372939527D-4 6.716814823448658D-5 9.041072917170823D-5 0.0017970986664295197D0 1.8576761067379266D-4 0.0016726113390177489D0 8.643275941722095D-4 6.590386037714779D-4 4.8236773000098765D-4 1.7976447998080403D-4 3.611467545852065D-4 6.211132858879864D-4 5.971495993435383D-4 0.003767138347029686D0 4.384389612823725D-4 5.07354096043855D-4 5.717753083445132D-4 1.7523812130093575D-4 3.6499096313491464D-4 8.491082699038088D-4 2.6890228036791086D-4 0.0016798850847408176D0 3.2218429259955883D-4 0.0013903743820264936D0 0.006671598181128502D0 0.0011766079114750028D0 6.866129697300494D-4 1.2438444537110627D-4 9.55670780967921D-4 8.054666686803103D-4 0.001067491015419364D0 8.431244059465826D-4 4.4486974366009236D-4 5.7106521126115695D-5 4.975619376637042D-4 0.0017031739698722959D0 0.0012397381942719222D0 0.002400362864136696D0 0.0030729600694030524D0 0.002012050710618496D0 8.291869307868183D-4 8.398735080845654D-4 5.140749271959066D-4 0.002382306382060051D0 6.718090153299272D-4 8.454505586996675D-4 6.220891373232007D-4 6.381305865943432D-4 0.0013921302743256092D0 0.0D0 0.0016784889157861472D0 0.0025438524316996336D0 0.0012228479608893395D0 8.370746509172022D-4 0.001896027009934187D0 0.0010275628883391619D0 3.64738458301872D-4 0.004130644723773003D0 5.066560115665197D-4 0.0039298031479120255D0 0.0017239277949556709D0 0.01075331587344408D0 0.0037640337832272053D0 0.0013894210569560528D0 0.002255583181977272D0 5.247099325060844D-4 0.001079800073057413D0 0.001089163706637919D0 8.552645449526608D-4 6.231540464796126D-4 8.99501028470695D-4 0.00387689471244812D0 0.003570837900042534D0 0.0070511577650904656D0 0.0033406568691134453D0 0.002475699409842491D0 0.003129765158519149D0 0.003587741404771805D0 0.0019056282471865416D0 0.0019461631309241057D0 0.0012710461160168052D0 0.003105438081547618D0 0.006376719567924738D0 0.003913783933967352D0 9.718778310343623D-4 0.0012596488231793046D0 7.788356160745025D-4 0.0011563891312107444D0 0.002234413754194975D0 8.667580550536513D-4 0.0020829986315220595D0 0.0010090727591887117D0 9.270553709939122D-4 0.003056394634768367D0 3.902528842445463D-4 0.001528860884718597D0 7.430397672578692D-4 0.003491202834993601D0 3.826379543170333D-4 3.1840766314417124D-4 8.189163636416197D-4 8.830612059682608D-4 5.751979188062251D-4 0.0038822086062282324D0 1.7448997823521495D-4 0.0023840314242988825D0 7.733840029686689D-4 0.0010960445506498218D0 3.212334122508764D-4 2.6335037546232343D-4 7.833703421056271D-4 5.829603760503233D-4 5.414906772784889D-4 1.4695362187922D-4 3.0552837415598333D-4 2.6386132230982185D-4 4.15258837165311D-4 2.160946314688772D-4 5.29320037458092D-4 5.924520883127116D-5 1.360338064841926D-4 2.0028972357977182D-4 2.362816740060225D-4 1.077447523130104D-4 1.3025998487137258D-4 9.1845853603445D-5 1.8636583990883082D-4 8.210661326302216D-5 4.987510619685054D-4 3.869985812343657D-5 3.6777587956748903D-4 7.973420724738389D-5 6.376200472004712D-4 2.4752842728048563D-4 5.0320733862463385D-5 5.86054811719805D-4 6.243205280043185D-4 9.512158430879936D-5 1.9047905516345054D-4 3.732021723408252D-4 1.3033616414759308D-4 5.029496969655156D-4 1.0550739534664899D-4 0.001147995819337666D0 2.318906772416085D-4 0.001119786174967885D0 1.6774906544014812D-4 1.1586474283831194D-4 4.752534441649914D-4 0.002827645745128393D0 0.005009005777537823D0 0.0019568982534110546D0 4.877886385656893D-4 0.0022737025283277035D0 8.528330945409834D-4 2.701071498449892D-4 0.003598983632400632D0 7.844686624594033D-4 0.008717411197721959D0 5.285362713038921D-4 0.0020370392594486475D0 0.0017390255816280842D0 3.998831089120358D-4 8.84460227098316D-4 4.338722792454064D-4 0.003743127454072237D0 0.0011604942847043276D0 0.003572695190086961D0 6.183747318573296D-4 0.0029815302696079016D0 0.0012855813838541508D0 0.005421774461865425D0 0.002601684769615531D0 0.0019776395056396723D0 0.001123021706007421D0 7.596550858579576D-4 8.749790140427649D-4 0.0010608036536723376D0 0.0012247153790667653D0 0.006076762918382883D0 0.0052414205856621266D0 0.0029492806643247605D0 0.001010740757919848D0 0.004042642656713724D0 6.718510994687676D-4 7.777205319143832D-4 0.010175385512411595D0 0.006009458098560572D0 0.004276179242879152D0 0.0032516135834157467D0 0.002015369012951851D0 0.00412879791110754D0 0.0013600412057712675D0 0.003906605299562216D0 0.002143377671018243D0 0.0035330988466739655D0 0.0033235519658774138D0 0.0013435528380796314D0 0.003978752065449953D0 0.00216924911364913D0 0.0013981107622385025D0 0.0028535800520330668D0 0.009032603353261948D0 0.008907409384846688D0 0.002043113112449646D0 0.0022149705328047276D0 0.002794215688481927D0 0.003781960578635335D0 0.005037769675254822D0 0.007027757819741964D0 0.007745446637272835D0 0.0028642453253269196D0 0.0023541932459920645D0 0.003693755716085434D0 0.0026309629902243615D0 0.0026575836818665266D0 0.0026712901890277863D0 0.002169741550460458D0 0.005707601550966501D0 0.0D0 0.008791017346084118D0 0.0026631418149918318D0 3.163610235787928D-4 0.003559884149581194D0 0.0012611133279278875D0 4.841480986215174D-4 3.1856243731454015D-4 2.0561201381497085D-4 6.938663427717984D-4 2.597782004158944D-4 0.0D0 0.008237697184085846D0 0.0035455164033919573D0 9.561812039464712D-4 3.7152928416617215D-4 4.5215050340630114D-4 6.807661266066134D-4 0.008617968298494816D0 1.661434944253415D-4 0.006056156475096941D0 0.004599803127348423D0 0.002693437272682786D0 2.488461323082447D-4 0.0015090483939275146D0 4.340127343311906D-4 0.010974951088428498D0 0.0030360014643520117D0 0.0025305377785116434D0 0.0054189409129321575D0 5.656369612552226D-4 0.04628625139594078D0 9.555615833960474D-4 0.019574787467718125D0 0.0011009852169081569D0 0.012231491506099701D0 0.005418550688773394D0 0.001988067524507642D0 0.011996744200587273D0 0.0026626288890838623D0 0.0018312075408175588D0 0.004390000831335783D0 8.25472641736269D-4 0.014932803809642792D0 8.599582361057401D-4 0.006361664738506079D0 0.00277333683334291D0 0.0017818495398387313D0 9.117115987464786D-4 0.05255194753408432D0 5.178057472221553D-4 9.236007463186979D-4 0.00908123329281807D0 5.280404002405703D-4 0.04855520650744438D0 0.0015222786460071803D0 0.020693330094218254D0 9.250813745893538D-4 0.01047983206808567D0 5.926445592194796D-4 0.020148267969489098D0 3.2853116863407195D-4 0.0011470543686300517D0 0.019688736647367478D0 9.949543746188283D-4 0.0026582214049994946D0 0.0019955900497734547D0 0.04864586517214775D0 7.507450645789504D-4 0.0016903206706047059D0 3.853020607493818D-4 0.0017124528530985117D0 8.601929876022041D-4 9.157271706499159D-4 0.008019205182790757D0 0.01805301569402218D0 0.02668019011616707D0 5.274928407743573D-4 0.009204285219311715D0 0.0013552388409152627D0 0.07717736810445786D0 0.0017373943701386452D0 0.002047955757007003D0 0.001214579096995294D0 0.0015070991357788444D0 0.0016427442897111178D0 0.03172363340854645D0 0.007105990778654814D0 7.75556021835655D-4 0.019301950931549073D0 0.08037125319242478D0 0.014228485524654389D0 0.0011430629529058934D0 0.12206015735864639D0 0.0010200777323916555D0 0.0048982128500938416D0 0.0014679116429761053D0 0.001464693690650165D0 0.05320050194859505D0 0.0020602212753146887D0 0.004431215114891529D0 9.353336063213646D-4 0.010927719064056874D0 0.08453628420829773D0 0.013070146553218365D0 0.007442370057106018D0 0.16738615930080414D0 0.0010451477719470859D0 0.010999680496752262D0 0.002747541991993785D0 0.08112579584121704D0 0.003872751956805587D0 0.005980321206152439D0 7.059336639940739D-4 6.537958397530019D-4 0.0D0 0.0010137241333723069D0 0.006680375896394253D0 0.0013730546925216914D0 6.176133174449205D-4 0.001810941263101995D0 0.03826756030321121D0 0.009801536798477173D0 0.003248213091865182D0 0.2170180082321167D0 0.0017195899272337556D0 0.0014347601681947709D0 0.04883715137839317D0 0.009066935628652573D0 0.0047545828856527805D0 9.191179415211082D-4 0.0012952110264450312D0 0.001409777207300067D0 0.0028513974975794554D0 0.00113056565169245D0 0.0014853389002382756D0 0.00414753844961524D0 6.483375327661634D-4 0.002389994217082858D0 0.005845631472766399D0 5.214990815147758D-4 0.006103960797190666D0 0.015577912330627442D0 0.004915688652545214D0 0.0026770520489662886D0 0.21213705837726593D0 6.565978401340544D-4 5.722593050450087D-4 0.022468775510787964D0 4.102176462765783D-4 0.0010207557352259756D0 0.0014829037245362997D0 0.0012071201344951988D0 3.6447966704145074D-4 7.043520454317331D-4 0.0020222626626491547D0 7.32742715626955D-4 4.049257840961218D-4 0.0010101113002747298D0 0.0015679378993809224D0 0.002195626264438033D0 0.16310955584049225D0 9.764378191903234D-4 5.164939793758094D-4 0.024247275665402413D0 0.001510449219495058D0 0.0018377475207671524D0 0.004505885299295187D0 7.958992500789464D-4 0.004347790498286486D0 0.00251342193223536D0 0.007922512479126454D0 0.0036720959469676018D0 0.003163197310641408D0 0.012877724133431912D0 0.19963915646076203D0 0.0018627579556778074D0 0.003924604970961809D0 0.0036777372006326914D0 0.011268021538853646D0 0.003768958617001772D0 0.0013492099242284894D0 0.027815217152237892D0 0.0D0 0.002938151126727462D0 0.00538348825648427D0 0.07551004737615586D0 0.0015889372443780303D0 0.19727493822574616D0 0.0016998511273413897D0 0.001715772203169763D0 0.004222600255161524D0 0.009982658550143242D0 0.003418795997276902D0 0.002218751236796379D0 0.038568321615457535D0 0.001031273975968361D0 0.0036694123409688473D0 0.056192465126514435D0 0.0013085411628708244D0 0.19917842745780945D0 4.4880350469611585D-4 8.310165721923113D-4 0.0031132111325860024D0 0.0019691421184688807D0 0.0022307245526462794D0 6.981558981351554D-4 0.007842130959033966D0 0.08104956150054932D0 0.004019079729914665D0 0.0013914419105276466D0 0.09707706421613693D0 1.2196485477034003D-4 1.9592445460148156D-4 1.957534987013787D-4 7.667214376851916D-4 5.258991150185466D-4 0.0021028397604823113D0 0.03316591680049896D0 0.0020587239414453507D0 1.7212888633366674D-4 0.0425008088350296D0 1.1494250793475658D-4 1.3941930956207216D-4 2.2110043209977448D-4 3.7130567943677306D-4 0.030515801161527634D0 0.004441710188984871D0 6.030495569575578D-5 0.06829066574573517D0 1.0171528265345842D-4 3.692807877087034D-5 1.1663917393889278D-4 3.63790662959218D-4 0.021521497517824173D0 0.0029743595514446497D0 1.3188693264964968D-4 0.035106170922517777D0 1.5036528930068016D-4 2.185295452363789D-4 0.019777853041887284D0 0.0010459978366270662D0 8.185003389371559D-5 0.054934311658144D0 2.8210581513121724D-4 3.734736528713256D-4 0.00305083766579628D0 3.502487379591912D-5 0.02931246906518936D0 5.818671197630465D-4 0.05402344465255737D0 4.347006033640355D-4 9.124020289164037D-5 0.01052705105394125D0 4.0839414577931166D-4 0.11398079991340637D0 0.0017658158903941513D0 0.05953511968255043D0 3.20129853207618D-4 5.096807144582272D-4 0.00993325188755989D0 0.0012360779801383615D0 0.11678272485733032D0 0.0019090408459305764D0 0.08749057352542877D0 6.959163583815098D-4 4.368599547888152D-5 0.0031875879503786564D0 5.691811093129218D-4 0.07195015251636505D0 0.0018197919707745314D0 0.0018995594000443817D0 0.013455666601657868D0 0.08484578132629395D0 8.976420504041016D-4 5.798429265269078D-5 0.004265140276402235D0 0.0015212413854897023D0 0.08884932845830918D0 0.0030546735506504774D0 7.874169968999922D-4 8.775792230153457D-5 0.008252836763858796D0 8.359525236301124D-4 0.06237664446234703D0 3.5937310894951225D-4 3.4976861206814647D-4 0.0019042290514335037D0 0.07451194524765015D0 0.0020071431063115597D0 3.032315871678293D-4 2.816674823407084D-4 0.004097865894436836D0 9.968150407075882D-4 3.352555213496089D-4 3.767592424992472D-4 0.027035685256123543D0 0.0024894860107451678D0 3.517725854180753D-4 4.245526506565511D-4 0.0237567275762558D0 0.013751357793807984D0 0.0028839921578764916D0 0.0017662136815488339D0 0.0010738419368863106D0 0.003747411770746112D0 0.005296289920806885D0 0.002318379934877157D0 0.009416201151907444D0 6.606763345189393D-4 0.004767933394759893D0 0.0012492386158555746D0 0.0031783152371644974D0 0.0031753897201269865D0 0.009974345564842224D0 0.003531560767441988D0 6.564789218828082D-4 5.748105468228459D-4 0.015415055677294732D0 0.0014588115736842156D0 0.004750012885779142D0 0.0011619736906141043D0 0.004855732433497906D0 0.0031509934924542904D0 0.003122682450339198D0 0.034123990684747696D0 0.004013003781437874D0 0.010954884812235833D0 0.00406996626406908D0 0.01171764824539423D0 0.007350703701376915D0 0.009321440011262894D0 0.0D0 0.005352572072297335D0 0.0D0 0.002835287945345044D0 0.014764184132218361D0 0.014458638615906239D0 6.534418207593262D-4 0.017239296808838845D0 0.0033904050942510367D0 0.003962749615311623D0 0.00347954616881907D0 0.0011320181656628848D0 0.009223547764122486D0 0.0021014579106122256D0 0.0018510096706449986D0 5.255791475065053D-4 0.017905421555042267D0 0.008892549201846123D0 0.022634519264101982D0 0.01237280759960413D0 0.01045734528452158D0 0.0025854995474219323D0 0.01499628834426403D0 0.0D0 0.00432250089943409D0 0.0D0 0.0011406734120100737D0 7.130253943614662D-4 0.001376297208480537D0 0.008513808250427246D0 0.00825717207044363D0 0.002302022185176611D0 0.002489537000656128D0 0.006434611044824123D0 0.013050327077507973D0 0.001631743274629116D0 0.002951332600787282D0 0.0019421002361923457D0 0.0017019954975694418D0 0.0012734269257634879D0 0.01823013834655285D0 0.014745466411113739D0 0.006399952806532383D0 0.009176001884043217D0 0.03070061281323433D0 0.0034949583932757378D0 0.008099300786852837D0 0.005189655348658562D0 4.2328922427259386D-4 0.0020040266681462527D0 0.0088223647326231D0 0.009554591029882431D0 0.0030222004279494286D0 0.0030987230129539967D0 0.005679141730070114D0 0.006542510353028774D0 0.0033356475178152323D0 0.0038512281607836485D0 0.002032069256529212D0 9.608817636035383D-4 0.0012557487934827805D0 0.009775384329259396D0 0.007112470455467701D0 0.005251784343272448D0 0.007798917591571808D0 0.011733624152839184D0 0.0025676055811345578D0 0.0023963116109371186D0 5.429394659586251D-4 0.0033951732330024243D0 0.003839945187792182D0 0.006230665370821953D0 0.0023707589134573937D0 0.005236465949565172D0 8.742992067709565D-4 3.834564950011554D-7 0.011349203996360302D0 0.006052709184587002D0 8.831162704154849D-4 0.0012377423699945212D0 0.0027386501897126437D0 0.0011219697771593929D0 0.0029070822056382895D0 0.002685423707589507D0 0.002452475018799305D0 0.002433776156976819D0 6.556737353093922D-4 5.72832184843719D-4 0.002066426444798708D0 0.0013704599114134908D0 0.003912836778908968D0 0.0015959852607920766D0 0.001458452781662345D0 0.0062498413026332855D0 8.201126474887133D-4 4.6432905946858227D-4 0.006901801098138094D0 5.372444866225123D-4 4.7775296843610704D-4 7.755284896120429D-4 4.4050122960470617D-4 7.390336832031608D-4 5.125045427121222D-4 0.0037941986229270697D0 0.0027569043450057507D0 0.012187940068542958D0 3.069646772928536D-4 2.1766888676211238D-4 5.310099222697318D-4 0.0010385385248810053D0 0.001560330973006785D0 0.028289366513490677D0 0.004457642324268818D0 7.383707561530173D-4 3.9880210533738137D-4 3.6467687459662557D-4 5.165956099517643D-4 0.0012581690680235625D0 0.052238136529922485D0 0.0018788108136504889D0 0.012029719538986683D0 4.744976758956909D-4 0.00405303156003356D0 0.013396192342042923D0 0.0010975338518619538D0 4.3330626795068383D-4 6.980511825531721D-4 0.001546998042613268D0 0.0019308794289827347D0 0.07447312027215958D0 0.0017286187503486872D0 0.03463601693511009D0 0.0013630571775138379D0 0.005487287882715464D0 7.471757708117366D-4 1.3482352369464934D-4 1.8191048002336174D-4 5.492024865816347D-5 7.58045818656683D-4 0.06975776702165604D0 0.0026614158414304257D0 0.014883052557706833D0 2.9244800680316985D-4 1.732307719066739D-4 1.4887664292473346D-4 8.937784878071398D-5 0.06995327770709992D0 0.0010650519980117679D0 0.013467221520841122D0 3.886471677105874D-4 3.1372864032164216D-4 2.3319711908698082D-4 1.235522940987721D-4 0.05463506281375885D0 0.0021813097409904003D0 0.01639748550951481D0 8.111103670671582D-4 8.768389816395938D-4 1.0468869004398585D-4 3.242738021072D-4 0.06397823244333267D0 0.0010524123208597303D0 0.01255813892930746D0 6.570378900505602D-4 7.46890262234956D-4 0.0010412555420771242D0 0.0012874954845756293D0 2.27396929403767D-4 0.06370265781879425D0 0.007370305713266134D0 0.0168056171387434D0 0.0014547450700774789D0 0.0025216289795935154D0 0.0012814243091270328D0 0.0024235507007688284D0 0.002465256955474615D0 0.0013208359014242888D0 5.77859056647867D-4 0.06128475442528725D0 0.005899915471673012D0 0.03419988602399826D0 0.0010123588144779206D0 0.002895598066970706D0 0.001379205845296383D0 0.002912848489359021D0 0.004263503476977348D0 3.754094068426639D-4 0.001864090794697404D0 6.740151438862085D-4 0.034529466181993485D0 0.01532250177115202D0 0.021711722016334534D0 7.330756052397192D-4 0.001751223229803145D0 0.0018589511746540666D0 0.002126730279996991D0 0.001334570231847465D0 8.494657231494784D-4 0.0013407280202955008D0 0.0020385528914630413D0 0.02381676435470581D0 0.016315236687660218D0 0.025346318259835243D0 0.006174679379910231D0 0.006552091334015131D0 0.0031401615124195814D0 9.622012730687857D-4 5.034441710449755D-4 0.0036980463191866875D0 2.052629424724728D-4 0.024118714034557343D0 0.005028567276895046D0 0.006648426875472069D0 4.1689054341986776D-4 0.0020323668140918017D0 0.0019658738747239113D0 0.001605690224096179D0 2.7671982039123577D-8 0.002745924284681678D0 0.002174720400944352D0 0.030898626893758774D0 0.006420578341931105D0 5.988204502500594D-4 0.0049803839065134525D0 5.935569643042982D-4 4.058402846567333D-4 0.001174799632281065D0 0.00884800311177969D0 0.028206050395965576D0 0.0027990660164505244D0 1.2484684702940285D-4 0.0011479038512334228D0 9.512976394034922D-4 0.004631530959159136D0 0.025600438937544823D0 3.5120832035318017D-4 3.251619928050786D-4 1.0398770245956257D-4 0.0015374378999695182D0 4.963798564858735D-4 0.017751505598425865D0 2.7737847995013D-4 9.703522664494813D-5 0.001156346290372312D0 1.4103393186815083D-4 0.010894366540014744D0 4.922793596051633D-4 0.0015798897948116064D0 4.4333626283332706D-4 0.005258698016405106D0 0.00260631600394845D0 0.0010590829188004137D0 0.0027926182374358178D0 0.0015860960120335222D0 7.079260540194809D-4 0.0023852477315813303D0 6.092640105634928D-4 3.614201268646866D-4 0.0016278444090858102D0 3.069527738261968D-4 2.0704806956928224D-4 0.0010459296172484756D0 4.2828600271604955D-4 5.695055449450592D-8 0.0018538193544372917D0 4.4761429307982326D-4 0.00201701233163476D0 1.581112010171637D-4 0.0021206005476415158D0 2.871526521630585D-4 0.002151224762201309D0 4.2637813021428883D-4 0.002807971788570285D0 7.750551449134946D-4 0.00196853862144053D0 4.203525895718485D-4 8.14346014522016D-4 3.8716034032404423D-4 4.6689267037436366D-4 2.476325025781989D-4 0.0013607221189886332D0 4.762001917697489D-4 0.00151872169226408D0 9.489516378380358D-5 8.084043656708673D-5 3.6251929122954607D-4 7.562419050373137D-4 4.578781081363559D-4 0.0012248464627191425D0 2.9245298355817795D-4 0.00214219419285655D0 3.345520526636392D-4 0.00103280961047858D0 5.238845478743315D-4 0.0031788749620318413D0 3.383171570021659D-4 0.0029055543709546328D0 6.869063945487142D-4 0.003130922093987465D0 0.0010669685434550047D0 0.0023870610166341067D0 1.4623129391111434D-4 0.00190109689719975D0 8.052630582824349D-4 2.284873917233199D-4 3.8458287599496544D-4 7.971126615302637D-5 4.13953181123361D-4 5.330184358172119D-4 2.9909840668551624D-4)) nil "all-amp"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 268 553) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1645 912) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "match-tempo-index" (om-load-patch-abs1 "match-tempo-index" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 40 55) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 296 454) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 364 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 188 380) (om-make-point 99 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 273 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 50 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 3 2 nil 0) (0 0 4 1 nil 0) (2 0 5 0 nil 0) (0 0 5 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 489 491)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 241/3 1291/3) nil (list nil) "l" "match-tempo-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" 1) (om-load-inputfun (quote input-funbox) "LIST" "LIST" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 240 498) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tempo" (om-load-patch-abs1 "tempo" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 129 375) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 77 227) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 99 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 573 456)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 84 519/2) nil (list (list 353 373 393 413 433 453 473 493 513 533 553 573 593 613 633 653 673 693 713 733 753 773 793 813 833 853 873 893 913 933 953 973 993 1013 1033 1053 1073 1093 1113 1133 1153 1173 1193 1213 1233 1253 1273 1293 1313 1333 1353 1373 1393 1413 1433 1453 1473 1493 1513 1533 1553 1573 1593 1613 1633 1653 1673 1693 1713 1733 1753 1773 1793 1813 1833 1853 1873 1893 1913 1933 1953 1973 1993 2013 2033 2053 2073 2093 2113 2133 2153 2173 2193 2213 2233 2253 2273 2293 2313 2333 2353 2373 2393 2413 2433 2453 2473 2493 2513 2533 2553 2573 2593 2613 2633 2653 2673 2693 2713)) nil "tempo"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 417 68) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-index" (om-load-patch-abs1 "all-index" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 267 427) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 84 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 86 388) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 92 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 50 215) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 101 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 165 124) (om-make-point 27 34) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 146 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (5 0 3 0 nil 0) (4 0 5 0 nil 0) (7 0 5 1 nil 0) (1 0 7 0 nil 0) (6 0 7 1 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 500 506)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 524/3 475/2) nil nil nil "all-index"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "index-match" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 365 202) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 277 172) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 301 56) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 231 102) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 280 322) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 141 294) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 82 384) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 75 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 181 462) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 75 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 83 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 125 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 260 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 160 555) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (6 0 0 1 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (6 0 5 0 nil 0) (7 0 6 0 nil 0) (4 1 8 0 nil 0) (4 0 9 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 254 230) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 14 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 294 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 194 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 1 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (5 0 4 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "index-match" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 175 161) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CDR" (quote cdr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 179 77) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((10 0 0 0 nil 0) (4 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (2 0 3 1 nil 0) (15 0 4 0 nil 0) (23 0 5 1 nil 0) (3 0 6 0 nil 0) (15 0 6 2 nil 0) (10 0 8 1 nil 0) (19 0 8 4 nil 0) (0 0 8 6 nil 0) (30 0 9 0 nil 0) (30 0 10 0 nil 0) (14 0 13 0 nil 0) (16 0 15 1 nil 0) (8 0 15 2 nil 0) (7 0 15 3 nil 0) (23 0 16 0 nil 0) (9 0 19 0 nil 0) (17 0 19 1 nil 0) (18 0 19 2 nil 0) (21 0 19 3 nil 0) (20 0 19 4 nil 0) (22 0 20 0 nil 0) (22 0 21 0 nil 0) (31 0 22 0 nil 0) (26 0 23 1 nil 0) (15 0 24 0 nil 0) (25 0 26 0 nil 0) (27 0 26 1 nil 0) (30 0 26 2 nil 0) (13 0 27 0 nil 0) (31 0 29 0 nil 0) (31 0 30 0 nil 0) (12 0 30 1 nil 0) (32 0 31 0 nil 0) (13 0 31 1 nil 0))) 6.19 nil "" (om-make-point -9 -9) (om-make-point 1920 1026)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 412 114) (om-make-point 159 61.0) (list (list (list 773 (list 30.0D0 3645.150390625D0 0.003570837900042534D0 0.8334749937057495D0)) (list 793 (list 30.0D0 3619.401123046875D0 0.0020829986315220595D0 1.7008532285690308D0)) (list 813 (list 30.0D0 3461.519775390625D0 5.751979188062251D-4 0.09445739537477493D0)) (list 833 (list 30.0D0 3612.27490234375D0 5.829603760503233D-4 0.6041183471679688D0)) (list 853 (list 30.0D0 3548.76953125D0 2.160946314688772D-4 -2.6124610900878907D0)) (list 873 (list 30.0D0 3728.643798828125D0 1.077447523130104D-4 2.215160846710205D0)) (list 893 (list 30.0D0 3738.900390625D0 8.210661326302216D-5 -1.6343176364898682D0)))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Fora Bolsonaro.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 145 14) (om-make-point 169 83) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "OM - Workspace" "out-files")) :device nil :host nil :name "Fora Bolsonaro" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (player)) (list (quote :spat-sdif-player))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF->LIST" (quote sdif->list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SDIF-FILE" nil))) (om-make-point 185 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (8 0 1 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (14 0 5 0 nil 0) (14 2 6 0 nil 0) (1 0 7 0 nil 0) (9 0 8 0 nil 0) (14 0 9 0 nil 0) (20 0 10 0 nil 0) (20 0 13 0 nil 0) (12 0 13 1 nil 0) (13 0 14 0 nil 0) (0 0 15 0 nil 0) (17 0 16 0 nil 0) (30 0 18 0 nil 0) (30 0 19 0 nil 0) (30 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 24 1 nil 0) (23 0 24 2 nil 0) (26 0 24 3 nil 0) (25 0 24 4 nil 0) (30 0 28 0 nil 0) (27 0 28 1 nil 0) (29 0 30 0 nil 0))) nil 6.19))
