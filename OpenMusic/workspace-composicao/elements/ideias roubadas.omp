; OM File Header - Saved 2021/07/23 13:08:32
; (6.19 :patc (om-make-point 52.0 70) (om-make-point -9 -9) (om-make-point 1920 1026) "" 183 0 nil "2021/07/23 13:08:32")
; End File Header
; External resources 
; (list (list (quote :text) "#P\"C:../../../Composition/Ideias Roubadas II/channel.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/velocity.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/notas.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/ritmo.txt\"" "#P\"C:../../../Composition/Ideias Roubadas II/pan.txt\"") (list (quote :sound) "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/temp-sound1175339.wav\"" "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/Sound-000001.wav\"" "#P\"C:../../../Ircam Instrumentos/03 Clarinet in Bb/multiphonics/BbCl-mul-C6-D#4-G5-mf.aif\"" "#P\"C:../../../../../DOCUMENTS/OM/OUT-FILES/om-ckn/temp-sound5527239.wav\""))
(in-package :om)(load-lib-for (quote ("omlily" "OM-CKN")))(setf *om-current-persistent* (om-load-patch1 "ideias roubadas" (quote ((let ((box (om-load-boxcall (quote genfun) "VOICE->SAMPLES" (quote voice->samples) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil))) (om-make-point 1382 466) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM->LILY 2" (quote om->lily) (quote ((om-load-inputfun (quote input-funbox) "self" "SELF" 1))) (om-make-point 327 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPORT-MUSICXML 2" (quote export-musicxml) (quote ((om-load-inputfun (quote input-funbox) "a VOICE or POLY object" "SELF" nil))) (om-make-point 622 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 528 532) (om-make-point 246 113) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ideias-roubadas-II.musicxml" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ideias-roubadas-II.musicxml\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 231 551) (om-make-point 27 34) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EXPORT-MUSICXML" (quote export-musicxml) (quote ((om-load-inputfun (quote input-funbox) "a VOICE or POLY object" "SELF" nil) (om-load-inputfun (quote input-funbox) "list of voice keys" "KEYS" (list (list (quote g) 2))) (om-load-inputfun (quote input-funbox) "tone subdivision approximation" "APPROX" 2) (om-load-inputfun (quote input-funbox) "a target pathname" "PATH" nil))) (om-make-point 162 599) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 452 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "eco-2" (om-load-patch-abs1 "eco-2" (quote ((let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 241 672) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 600 761) (om-make-point 41 34) 0.7 "0.7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 563 755) (om-make-point 41 34) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 527 809) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 650 57) (om-make-point 27 34) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 464 21) (om-make-point 220 34) (list "F4" "Eb4" "G3" "Bb3" "F4") "(\"F4\" \"Eb4\" \"G3\" \"Bb3\" \"F4\")" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "SYMB" (list "C3")) (om-load-inputfunmenu1 (quote input-funmenu) "octave of middle C" "MIDDLE-C" (list "C3") (list (list "middle-C = 3" 3) (list "middle-C = 4" 4))))) (om-make-point 538 96) (om-make-point 119 46.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 542 659) (om-make-point 49 34) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 161 449) (om-make-point 170 34) (list (list -99 100) (list -95 100)) "((-99 100) (-95 100))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "VOICE->SAMPLES 2" (quote voice->samples) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" 1) (om-load-inputfun (quote input-funbox) "panoramic information - see the object sound-stereo-pan" "PAN" 1))) (om-make-point 82 511) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 82 511)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 463 705) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "temp-sound1175339.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 358 565) (om-make-point 248 83) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "temp-sound1175339" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "temp-sound1175339.wav") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (outport inport player zoom grillestep mode winsize winpos show-spectrum deltapict obj-mode cmnpref notechancolor? show-stems scale)) (list nil nil (quote :om-audio) 1 nil 0 (om-make-point 370 280) (om-make-point 400 20) nil (om-make-point 0 0) 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 393 489) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 313 759) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 93 293) (om-make-point 410 117) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3/4 (((6 8) ((6 (1 1 1 1 1 4.0 1.0))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (196)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (196)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (196)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (196)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (196)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 92) nil)) :legato 100 :ties (quote (nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 28 122) (om-make-point 227 34) (list (quote ?) (list (list (list 6 8) (list 1 1 1 1 1 5.0)))) "(? (((6 8) (1 1 1 1 1 5.0))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 306 147) (om-make-point 156 88) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (6300) (5500) (5800) (6500))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((328) (328) (328) (328) (328))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 336 50) (om-make-point 142 34) (list 6150 6175 5830) "(6150 6175 5830) " nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 420 111) (om-make-point 56 34) (list 328) "(328)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 325 263) (om-make-point 34 34) 92 "92" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((11 0 0 0 nil 0) (10 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (5 0 6 0 nil 0) (4 0 6 1 nil 0) (14 0 9 0 nil 0) (8 0 9 1 nil 0) (11 0 10 0 nil 0) (7 0 10 1 nil 0) (12 0 11 0 nil 0) (9 0 12 0 nil 0) (3 0 13 0 nil 0) (15 0 14 1 nil 0) (16 0 14 2 nil 0) (19 0 14 3 nil 0) (6 0 16 1 nil 0) (18 0 16 6 nil 0))) 6.19 nil "" (om-make-point 241 39) (om-make-point 765 917)) (quote nil) (om-make-point 8943/7 594) nil (list nil) "x" "eco-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 624 683) (om-make-point 63 34) "eco2" "\"eco2\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "cl-multi" (om-load-patch-abs1 "cl-multi" (quote ((let ((box (om-load-boxcall (quote genfun) "SOUND-VOL" (quote sound-vol) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "a gain value" "GAIN" 1.0))) (om-make-point 4408/7 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 4674/7 127) (om-make-point 49 34) 0.03 "0.03" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-FADE" (quote sound-fade) (quote ((om-load-inputfun (quote input-funbox) "a om-sound-data" "S" nil) (om-load-inputfun (quote input-funbox) "fade in duration" "IN" 100) (om-load-inputfun (quote input-funbox) "fade out duration" "OUT" 100))) (om-make-point 4968/7 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 5360/7 187) (om-make-point 41 34) 1.0 "1.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 5745/7 224) (om-make-point 41 34) 4.0 "4.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-MONO-TO-STEREO" (quote sound-mono-to-stereo) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 3995/7 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND 2" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 3505/7 148) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 619 418) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 258 325) (om-make-point 41 34) 4.5 "4.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 200 311) (om-make-point 41 34) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-DUR" (quote sound-dur) (quote ((om-load-inputfun (quote input-funbox) "a sound object or file pathname" "SOUND" nil))) (om-make-point 116 329) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 215 506) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 269 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Sound-000001.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 115 552) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "Sound-000001" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Sound-000001.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 114 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-CUT" (quote sound-cut) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil) (om-load-inputfun (quote input-funbox) "begin time" "BEG" 0) (om-load-inputfun (quote input-funbox) "end time" "END" 1000))) (om-make-point 170 366) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 154 50) (om-make-point 170 34) (list 6000 6300 7100 7900) "(6000 6300 7100 7900)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CL-MULTI" (quote cl-multi) (quote ((om-load-inputfun (quote input-funbox) "" "NOTES" nil))) (om-make-point 127 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BbCl-mul-C6-D#4-G5-mf.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 133 240) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Ircam Instrumentos" "03 Clarinet in Bb" "multiphonics")) :device nil :host nil :name "BbCl-mul-C6-D#4-G5-mf" :type "aif") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "BbCl-mul-C6-D#4-G5-mf.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (1 0 0 1 nil 0) (0 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 2 2 nil 0) (2 0 5 0 nil 0) (13 0 6 0 nil 0) (5 0 7 0 nil 0) (18 0 10 0 nil 0) (14 0 11 0 nil 0) (15 0 12 0 nil 0) (11 0 13 0 nil 0) (12 0 14 0 nil 0) (18 0 15 0 nil 0) (9 0 15 1 nil 0) (8 0 15 2 nil 0) (16 0 17 0 nil 0) (17 0 18 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1438 652)) (quote nil) (om-make-point 16787/11 5648/11) nil nil nil "cl-multi"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "viol-eco" (om-load-patch-abs1 "viol-eco" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 115 584) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE 2" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 93 293) (om-make-point 410 117) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((2 4) ((2 (-2 -1 -2 2 2))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7650)) :ldur (quote (290)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7625)) :ldur (quote (290)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 92) nil)) :legato 100 :ties (quote (nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 50 180) (om-make-point 220 34) (list (quote ?) (list (list (list 2 4) (list -2 -1 -2 2 2)))) "(? (((2 4) (-2 -1 -2 2 2))))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 306 147) (om-make-point 156 88) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7650) (7625))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000) (1000))) :lvel (quote ((100) (100))) :loffset (quote ((0) (0))) :lchan (quote ((328) (328))) :legato 0)))) (load-port-info newobj (quote ((0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 336 50) (om-make-point 99 34) (list 7650 7625) "(7650 7625)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 420 111) (om-make-point 56 34) (list 328) "(328)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 325 263) (om-make-point 34 34) 92 "92" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "VOICE->SAMPLES" (quote voice->samples) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil))) (om-make-point 91 419) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 91 419)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 1 2 nil 0) (6 0 1 3 nil 0) (4 0 3 1 nil 0) (5 0 3 6 nil 0) (1 0 7 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 545 752)) (quote nil) (om-make-point 11239/7 512) nil nil nil "viol-eco"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "VOICE->SAMPLES 2" (quote voice->samples) (quote ((om-load-inputfun (quote input-funbox) "a voice" "VOICE" nil) (om-load-inputfun (quote input-funbox) "panoramic information - see the object sound-stereo-pan" "PAN" nil))) (om-make-point 9 478) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 9 478)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 865 563) (om-make-point 70 34) (list 87 88) "(87 88)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 813 599) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 813 497) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHECK-SAMPLES-IN-VOICE 2" (quote check-samples-in-voice) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "VOICE" nil))) (om-make-point 1511 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 1161 368) (om-make-point 91 34) (list 55 56 57) "(55 56 57)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything" "NOTELIST" 5) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" 57))) (om-make-point 1129 398) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "durations" (om-load-patch-abs1 "durations" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 737 744) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 693 624) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 862 869)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 250 404) nil nil nil "durations"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 537 694) (om-make-point 34 34) 26 "26" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "put-samples" (om-load-patch-abs1 "put-samples" (quote ((let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 885 488) (om-make-point 196 103) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 3 (om-make-point 1103 339) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 1205 468) (om-make-point 63 34) ".wav" "\".wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "STRING+" (quote string+) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" ".wav"))) (om-make-point 1077 512) (om-make-point 169 43.0) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 692 608) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 683 760) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 414 591) (om-make-point 80 50) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-LIST" (quote sound-seq-list) (quote ((om-load-inputfun (quote input-funbox) "Sdif-File." "SOUND" nil))) (om-make-point 349 500) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "som" 2 (om-make-point 460 336) "" "som" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 373 434) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 166 602) (om-make-point 27 34) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SILENCE" (quote sound-silence) (quote ((om-load-inputfun (quote input-funbox) "duration (float or interger)" "DUR" 2) (om-load-inputfun (quote input-funbox) "number of channels" "CHANNELS" 2))) (om-make-point 113 643) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 61 558) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LAST" (quote last) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 56 492) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 45 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 64 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 187 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 273 284) (om-make-point 33 45) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 55 240) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "note-number" 1 (om-make-point 450 66) "" "note-number" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-POSITION" (quote ckn-position) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "MY-NUMBER" nil))) (om-make-point 250 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil))) (om-make-point 226 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "CKN" "CKN" nil))) (om-make-point 41 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "voice" 0 (om-make-point 5 45) "" "voice" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 3 0 nil 0) (1 0 3 1 nil 0) (2 0 3 2 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 0 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (12 0 11 0 nil 0) (10 0 11 1 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (15 0 14 1 nil 0) (18 0 15 0 nil 0) (17 0 16 0 nil 0) (20 0 17 0 nil 0) (22 0 18 0 nil 0) (16 0 18 1 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (22 0 21 0 nil 0) (23 0 22 0 nil 0))) 6.19 nil "" (om-make-point 135 78) (om-make-point 1346 896)) (quote ((om-load-inputfun (quote input-funbox) "" "voice" nil) (om-load-inputfun (quote input-funbox) "" "note-number" nil) (om-load-inputfun (quote input-funbox) "" "som" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 450 731) (om-make-point 253 61.0) (list (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device :unspecific :host "C" :name "eco2" :type "wav")) nil "put-samples"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 964 439) (om-make-point 63 34) (list 6565) "(6565)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 815 355) (om-make-point 132 83) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6555) (5669) (6565) (5659) (6551) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6150) (5900) (6400) (4800) (7700) (4900) (6400) (6500) (7500) (5400) (5600) (6300) (6550) (6700) (5100) (6000) (6700) (7000) (7700) (7514) (7750) (5400) (7314 6290 6549 5531) (4100) (4900) (6200) (5300) (5686) (6002) (6198) (7775) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (6700) (6100) (5000) (5200) (6550) (7902 6550 6969 7200) (6230) (5700) (6300) (6600) (6200) (5500 6633 7507 7889 6771 7205) (6550) (6100) (5000) (5200) (4800 5502 6550 6969) (6200) (5600) (6400) (6700) (6400) (5400) (4500) (4800 5502 6550 6969) (4900 6200 6755 6969) (5000 5502 6550 7425) (6100 6550 6969) (6220 6755 6969) (7028 6550 7425) (6250) (6700) (5500) (6450) (6650) (6300) (6500) (6700) (4900) (6500) (6400) (6500) (6700) (6925) (6300) (6700) (6450) (6650) (6500) (6475) (6294) (5478) (5796) (6565) (5478) (6655) (5569) (6565) (5659) (6675) (5469) (6565) (5659) (6050))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 115000)) :ldur (quote ((1500) (500) (500) (500) (2000) (500) (500) (500) (500) (500 500 500 500) (500) (286) (286) (444) (1333) (400) (400) (400) (1200) (400) (400) (320) (160) (462) (1231) (800) (400) (200) (600) (500) (1000) (1500) (750 750 750 750) (250) (500) (250) (250) (250) (1000) (1750) (1500) (632) (632) (632) (632) (632 632 632 632) (211) (316) (316) (500) (500) (500) (500) (500) (286 286 286 286) (286) (143) (444) (444) (667) (1000 1000 1000 1000 1000 1000) (400) (400) (400) (400) (400 400 400 400) (400) (229) (229) (114) (533) (178) (178) (250 250 250 250) (375 375 375 375) (800 800 800 800) (938 938 938) (625 625 625) (625 625 625) (400) (267) (267) (267) (333) (400) (320) (320) (320) (267) (267) (333) (333) (1750) (400) (267) (267) (267) (333) (2000) (1000) (1500) (1750) (8000) (1500) (1500) (500) (500) (500) (1500) (500) (500) (500) (3000))) :lvel (quote ((60) (40) (40) (40) (80) (50) (60) (20) (30) (90 90 90 90) (40) (50) (60) (80) (100) (50) (60) (20) (100) (40) (30) (50) (60) (70) (80) (110) (20) (20) (10) (40) (67) (50) (90 90 90 90) (90) (70) (50) (20) (40) (50) (50) (60) (20) (30) (40) (50) (110 110 110 110) (40) (50) (10) (50) (60) (20) (30) (50) (80 80 80 80) (40) (50) (60) (70) (30) (40 90 90 90 90 90) (50) (60) (20) (30) (40 30 50 10) (40) (50) (60) (70) (120) (60) (70) (50 60 70 75) (90 90 90 75) (50 50 50 80) (50 50 50) (60 60 60) (60 60 60) (60) (70) (100) (60) (70) (40) (40) (40) (40) (40) (40) (40) (40) (30) (50) (60) (70) (80) (90) (30) (30) (30) (30) (30) (40) (40) (40) (40) (40) (40) (60) (40) (40) (40))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((40) (497) (20) (118) (328) (25) (40) (40) (118) (300 300 300 300) (20) (40) (20) (300) (328) (25) (20) (20) (328) (118) (300) (25) (20) (20) (25) (328) (16) (20) (328) (425) (328) (497) (328 328 328 328) (497) (497) (497) (25) (25) (40) (20) (300) (497) (40) (40) (25) (274 274 274 274) (20) (118) (20) (20) (40) (118) (118) (40) (300 300 300 300) (20) (25) (20) (20) (25) (497 300 300 328 271 274) (40) (40) (25) (25) (497 274 300 20) (20) (25) (20) (20) (274) (25) (497) (497 274 300 20) (497 274 300 20) (497 274 300 20) (274 300 20) (274 300 20) (274 300 20) (118) (20) (118) (20) (20) (40) (40) (20) (25) (20) (40) (20) (20) (118) (20) (20) (118) (20) (20) (63) (63) (63) (63) (63) (497) (20) (118) (20) (497) (425) (118) (20) (497) (425))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 106 286) (om-make-point 1678 477) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CKN-POSITION" (quote ckn-position) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil) (om-load-inputfun (quote input-funbox) "Number of the instrument (technique)" "MY-NUMBER" nil))) (om-make-point 904 479) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "chords" (om-load-patch-abs1 "chords" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 237 272) (om-make-point 28 32) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 731 383) (om-make-point 56 34) (list 328) "(328)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 633 650) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 657 576) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 217 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.19 "(lambda (x) $$  (case x$    (16  (x-append (om-random -100 -85) (om-random 0 10)))$    (20  (x-append (om-random -100 -85) (om-random 0 10)))$    (25  (x-append (om-random -100 -85) (om-random 0 10)))$    (40  (x-append (om-random -75 -65) (om-random 20 30)))$    (63  (x-append (om-random -50 -40) (om-random 40 50)))$    (118 (x-append (om-random -50 -40) (om-random 40 50)))$    (271 (x-append (om-random -50 -40) (om-random 40 50)))$    (274 (x-append (om-random -50 -40) (om-random 40 50)))$    (300 (x-append (om-random -0 -10) (om-random 85 100)))$    (328 (x-append (om-random -90 -100) (om-random 90 100)))$    (425 (x-append (om-random -65 -75) (om-random 75 85)))$    (497 (x-append (om-random -75 -85) (om-random 65 75)))$$  ))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 178 179) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 31 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 24 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 289 270) (om-make-point 91 34) (list -100 100) "(-100 100)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EQUAL" (quote equal) (quote ((om-load-inputfun (quote input-funbox) "X" "X" 1) (om-load-inputfun (quote input-funbox) "Y" "Y" 1))) (om-make-point 77 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 213 427) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 154 339) (om-make-point 163 53.5) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 285 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 157 487) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 3 0 nil 0) (2 0 5 0 nil 0) (7 0 6 0 nil 0) (5 0 7 0 nil 0) (1 0 7 1 nil 0) (4 0 7 2 nil 0) (6 1 9 0 nil 0) (6 0 10 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 118 2977/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 2971/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 897 343) (om-make-point 338 130) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "channel" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 925 258) (om-make-point 632 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/channel.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 644 172) (om-make-point 640 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/velocity.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 497 95) (om-make-point 618 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/notas.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 597 226) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "velocity" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 353 193) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "notas" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" 1) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" 1))) (om-make-point 189 302) (om-make-point 78 60) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 59 50) (om-make-point 627 32) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ritmo.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 85 162) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "ritmo" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 508 429) (om-make-point 222 89) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6555) (5669) (6565) (5659) (6551) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6150) (5900) (6400) (4800) (7700) (4900) (6400) (6500) (7500) (5400) (5600) (6300) (6550) (6700) (5100) (6000) (6700) (7000) (7700) (7514) (7750) (5400) (7314 6290 6549 5531) (4100) (4900) (6200) (5300) (5686) (6002) (6198) (7775) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (6700) (6100) (5000) (5200) (6550) (7902 6550 6969 7200) (6230) (5700) (6300) (6600) (6200) (5500 6633 7507 7889 6771 7205) (6550) (6100) (5000) (5200) (4800 5502 6550 6969) (6200) (5600) (6400) (6700) (6400) (5400) (4500) (4800 5502 6550 6969) (4900 6200 6755 6969) (5000 5502 6550 7425) (6100 6550 6969) (6220 6755 6969) (7028 6550 7425) (6250) (6700) (5500) (6450) (6650) (6300) (6500) (6700) (4900) (6500) (6400) (6500) (6700) (6925) (6300) (6700) (6450) (6650) (6500) (6475) (6294) (5478) (5796) (6565) (5478) (6655) (5569) (6565) (5659) (6675) (5469) (6565) (5659) (6050) (6050) (6050))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((60) (40) (40) (40) (80) (50) (60) (20) (30) (90 90 90 90) (40) (50) (60) (80) (100) (50) (60) (20) (100) (40) (30) (50) (60) (70) (80) (110) (20) (20) (10) (40) (67) (50) (90 90 90 90) (90) (70) (50) (20) (40) (50) (50) (60) (20) (30) (40) (50) (110 110 110 110) (40) (50) (10) (50) (60) (20) (30) (50) (80 80 80 80) (40) (50) (60) (70) (30) (40 90 90 90 90 90) (50) (60) (20) (30) (40 30 50 10) (40) (50) (60) (70) (120) (60) (70) (50 60 70 75) (90 90 90 75) (50 50 50 80) (50 50 50) (60 60 60) (60 60 60) (60) (70) (100) (60) (70) (40) (40) (40) (40) (40) (40) (40) (40) (30) (50) (60) (70) (80) (90) (30) (30) (30) (30) (30) (40) (40) (40) (40) (40) (40) (60) (40) (40) (40) (40) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 820 255) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (15 6 3 0 nil 0) (15 0 4 0 nil 0) (14 1 5 0 nil 0) (7 0 6 0 nil 0) (8 0 10 0 nil 0) (9 0 11 0 nil 0) (14 1 12 0 nil 0) (0 0 12 1 nil 0) (13 0 14 0 nil 0) (11 1 15 1 nil 0) (10 1 15 4 nil 0) (6 1 15 6 nil 0))) 6.19 nil "" (om-make-point -9 -9) (om-make-point 1920 926)) (quote nil) (om-make-point 3311/10 374/15) (om-make-point 247 69) (list (list (list (list 3 4) (list 3 1 1 1)) (list (list 5 8) (list 4 1.0)) (list (list 4 4) (list 1 1 1 1 1 1 (list 2 (list -1 2 2 -2)))) (list (list 2 4) (list (list 2 (list 2 -1 6)))) (list (list 5 32) (list 4.0 1.0)) (list (list 4 4) (list (list 4 (list 1 1 1 3 1 1 (list 2 (list -2 2 1)))))) (list (list 2 4) (list (list 2 (list 3 -1 8 -1)))) (list (list 4 4) (list (list 4 (list 4 2 -1 1 2.0 -2 -8)))) (list (list 2 4) (list (list 1 (list -2 3)) (list 1 (list 1.0 -2 3)))) (list (list 1 4) (list 1)) (list (list 3 8) (list 3)) (list (list 2 4) (list 3 1 2.0 2)) (list (list 2 4) (list -1 1 1 1 4)) (list (list 13 16) (list 7 6)) (list (list 4 4) (list (list 4 (list 3 3 3 3 3 1 (list 3 (list 1 1)))))) (list (list 4 4) (list 1 -1 1 1 1 1 (list 2 (list -1 2 2 -1 1)))) (list (list 3 32) (list -3)) (list (list 2 4) (list (list 2 (list -1 2 2 -1 3)))) (list (list 5 16) (list 4 1.0)) (list (list 4 4) (list (list 4 (list 1 -2 1 1 1 1 1 (list 2 (list -1 2 2 -1 1)))))) (list (list 2 4) (list (list 2 (list -1 (list 4 (list 3 1 -4 1)))))) (list (list 7 32) (list 2 3 -2)) (list (list 4 20) (list 4)) (list (list 15 16) (list (list 15 (list -2 3 2 -3 2)))) (list (list 6 16) (list -6)) (list (list 4 4) (list (list 2 (list 1 (list 4 (list 1 -1 -3 1)))) (list 2 (list (list 2 (list (list 4 (list 1.0 -1 -1 1 -1)) -1 1)))))) (list (list 4 4) (list (list 2 (list 1 (list 4 (list 1 -1 1 -1 1)))) (list 2 (list (list 2 (list (list 4 (list 1.0 1 -1 1 -1)) 1 1)))))) (list (list 4 8) (list -1 7)) (list (list 4 16) (list 4.0)) (list (list 4 4) (list (list 2 (list 1 (list 4 (list 1 -1 -3 1)))) (list 2 (list (list 2 (list (list 4 (list 1.0 -1 -1 1 -1)) -1 1)))))) (list (list 4 8) (list 4)) (list (list 2 8) (list 2)) (list (list 3 8) (list 3)) (list (list 7 16) (list 7)) (list (list 8 4) (list 8)) (list (list 2 4) (list -1 3)) (list (list 3 4) (list 3 1 1 1)) (list (list 3 4) (list 3 1 1 1)) (list (list 7 4) (list 7.0)) (list (list 3 4) (list 3))) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6555) (5669) (6565) (5659) (6551) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6150) (5900) (6400) (4800) (7700) (4900) (6400) (6500) (7500) (5400) (5600) (6300) (6550) (6700) (5100) (6000) (6700) (7000) (7700) (7514) (7750) (5400) (7314 6290 6549 5531) (4100) (4900) (6200) (5300) (5686) (6002) (6198) (7775) (5000) (6100) (6550) (5200) (4800 5502 6550 6969) (6200) (5700) (6400) (6700) (6100) (5000) (5200) (6550) (7902 6550 6969 7200) (6230) (5700) (6300) (6600) (6200) (5500 6633 7507 7889 6771 7205) (6550) (6100) (5000) (5200) (4800 5502 6550 6969) (6200) (5600) (6400) (6700) (6400) (5400) (4500) (4800 5502 6550 6969) (4900 6200 6755 6969) (5000 5502 6550 7425) (6100 6550 6969) (6220 6755 6969) (7028 6550 7425) (6250) (6700) (5500) (6450) (6650) (6300) (6500) (6700) (4900) (6500) (6400) (6500) (6700) (6925) (6300) (6700) (6450) (6650) (6500) (6475) (6294) (5478) (5796) (6565) (5478) (6655) (5569) (6565) (5659) (6675) (5469) (6565) (5659) (6050) (6050) (6050))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 100000 101000 102000 103000 104000 105000 106000 107000 108000 109000 110000 111000 112000 113000 114000 115000)) :ldur (quotelvel (quote ((60) (40) (40) (40) (80) (50) (60) (20) (30) (90 90 90 90) (40) (50) (60) (100) (100) (50) (60) (20) (120) (100) (88) (50) (60) (70) (80) (60) (20) (20) (10) (40) (67) (50) (90 90 90 90) (90) (70) (50) (20) (40) (50) (50) (60) (20) (30) (40) (50) (110 110 110 110) (40) (50) (10) (50) (60) (20) (30) (50) (90 90 90 90) (40) (50) (60) (70) (30) (90 90 90 90 90 90) (50) (60) (20) (30) (40 30 50 10) (40) (50) (60) (70) (120) (60) (70) (50 60 90 75) (90 90 90 75) (50 50 90 80) (50 90 50) (60 90 60) (60 90 60) (60) (70) (100) (60) (70) (40) (40) (40) (40) (40) (40) (40) (40) (30) (50) (60) (70) (80) (90) (30) (30) (30) (30) (30) (40) (40) (40) (40) (40) (40) (60) (40) (40) (40) (40) (50))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((40) (497) (20) (118) (328) (25) (40) (40) (118) (300 300 300 300) (20) (40) (20) (300) (328) (25) (20) (20) (328) (118) (300) (25) (20) (20) (25) (300) (16) (20) (328) (425) (328) (497) (328 328 328 328) (497) (497) (497) (25) (25) (40) (20) (300) (497) (40) (40) (25) (274 274 274 274) (20) (118) (20) (20) (40) (118) (118) (40) (300 300 300 300) (20) (25) (20) (20) (25) (497 300 300 328 271 274) (40) (40) (25) (25) (497 274 300 20) (20) (25) (20) (20) (274) (25) (497) (497 274 300 20) (497 274 300 20) (497 274 300 20) (274 300 20) (274 300 20) (274 300 20) (118) (20) (118) (20) (20) (40) (40) (20) (25) (20) (40) (20) (20) (118) (20) (20) (118) (20) (20) (63) (63) (63) (63) (63) (497) (20) (118) (20) (497) (425) (118) (20) (497) (425) (425) (425))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0 0 0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (list (list -67 23) (list -80 74) (list -100 0) (list -50 46) (list -94 94) (list -98 9) (list -66 26) (list -75 24) (list -43 48) (list -100 100) (list -93 2) (list -71 25) (list -93 1) (list -5 100) (list -94 99) (list -94 3) (list -98 10) (list -93 9) (list -93 93) (list -46 47) (list -10 88) (list -86 7) (list -96 0) (list -99 8) (list -86 4) (list -2 92) (list -87 0) (list -95 10) (list -93 96) (list -72 80) (list -93 100) (list -83 71) (list -100 100) (list -84 68) (list -83 66) (list -76 68) (list -97 8) (list -100 0) (list -70 28) (list -95 0) (list -5 96) (list -79 65) (list -69 20) (list -66 25) (list -91 0) (list -100 100) (list -96 0) (list -47 41) (list -94 10) (list -93 1) (list -65 27) (list -45 50) (list -47 42) (list -68 30) (list -100 100) (list -89 0) (list -92 4) (list -86 2) (list -94 1) (list -97 8) (list -100 100) (list -72 21) (list -74 24) (list -99 2) (list -96 1) (list -100 100) (list -100 1) (list -94 10) (list -96 8) (list -95 3) (list -47 41) (list -86 10) (list -78 68) (list -100 100) (list -100 100) (list -100 100) (list -100 100) (list -100 100) (list -100 100) (list -41 43) (list -92 1) (list -49 42) (list -97 4) (list -92 10) (list -66 24) (list -73 21) (list -87 7) (list -94 8) (list -99 4) (list -69 21) (list -98 4) (list -99 9) (list -43 49) (list -98 10) (list -89 7) (list -42 45) (list -98 1) (list -88 9) (list -50 44) (list -50 40) (list -41 45) (list -49 43) (list -46 47) (list -78 68) (list -93 9) (list -49 45) (list -100 0) (list -75 66) (list -67 81) (list -43 44) (list -89 10) (list -76 67) (list -73 83) (list -65 75) (list -65 79))) nil "chords"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pan path" (om-load-patch-abs1 "pan path" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 347) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 5" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 581 171) (om-make-point 236 91) (load-textfile (om-make-pathname :directory (quote (:absolute "Users" "neimog" "OneDrive - design.ufjf.br" "Documentos" "Composition" "Ideias Roubadas II")) :device nil :host nil :name "pan" :type "txt") (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 980 50) (om-make-point 283 68) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/pan.txt" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/pan.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1482 732)) (quote nil) (om-make-point 279/2 803/2) nil (list (list (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -80 80) (list -10 90) (list -90 30) (list -80 50) (list -80 80) (list -80 50) (list -90 30) (list -10 90) (list 0 80) (list -60 55) (list -80 80) (list -30 90) (list -80 50) (list -50 50) (list -33 50) (list -50 33) (list -50 50) (list -80 80) (list -75 75) (list -50 20) (list -70 70) (list -40 20) (list -45 15) (list -40 40) (list -60 30) (list -30 60) (list -10 100) (list -100 100) (list -30 80) (list -80 30) (list -60 60) (list -10 80) (list -80 30) (list -90 10) (list -60 60) (list -80 80) (list -40 60) (list -60 40) (list -60 45) (list -80 50) (list -100 100) (list -40 30) (list -20 80) (list -40 60) (list -50 90) (list -75 75) (list -50 50) (list -30 35) (list -70 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -80 80) (list -35 35) (list -100 100) (list -50 30) (list -50 30) (list -30 80) (list -100 100) (list -40 50) (list -50 40) (list -20 60) (list -20 60) (list -20 60) (list -80 80) (list -30 30) (list -40 40) (list -20 60) (list -100 100) (list -60 20) (list -80 20) (list -100 100) (list -20 80) (list -50 50) (list -30 80) (list -75 75) (list -30 50) (list -80 80) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -80 80) (list -80 80) (list -90 30) (list -80 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50) (list -50 50))) nil "pan path"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "temp-sound5527239.wav" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 56 793) (om-make-point 80 50) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "USERS" "NEIMOG" "DOCUMENTS" "OM" "OUT-FILES" "om-ckn")) :device nil :host nil :name "temp-sound5527239" :type "wav") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "temp-sound5527239.wav") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 169 741) (om-make-point 211 108) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ideias-roubadas-II.wav" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Composition/Ideias Roubadas II/ideias-roubadas-II.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-SOUND" (quote save-sound) (quote ((om-load-inputfun (quote input-funbox) "a sound or om-sound-data buffer" "SELF" nil) (om-load-inputfun (quote input-funbox) "output file pathname" "FILENAME" nil))) (om-make-point 106 878) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-SEQ-MULTI" (quote sound-seq-multi) (quote ((om-load-inputfun (quote input-funbox) "a list of sounds." "SOUNDS" nil))) (om-make-point 16 571) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 124 366) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SAVE-TEMP-SOUNDS" (quote save-temp-sounds) (quote ((om-load-inputfun (quote input-funbox) "SOUNDS" "SOUNDS" nil))) (om-make-point 49 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 54 256) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 267 293) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOUND-STEREO-TO-MONO" (quote sound-stereo-to-mono) (quote ((om-load-inputfun (quote input-funbox) "a sound" "S" nil))) (om-make-point 384 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SOUND" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 198 105) (om-make-point 139 70) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 314 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 214 389) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (0 1 5 0 nil 0) (0 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0))) 6.19 nil "" (om-make-point 200 200) (om-make-point 1580 652)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2091/2 1075/2) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 2 (om-make-point 386 477) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE-TO-REST" (quote choose-to-rest) (quote ((om-load-inputfun (quote input-funbox) "Sound class" "LIST" nil))) (om-make-point 355 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 250 480) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 791 63) (om-make-point 35 32) 92 "92" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 971 608) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 1433 28) (om-make-point 246 68) "C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/" "\"C:/Users/neimog/OneDrive - design.ufjf.br/Documentos/Ircam Instrumentos/\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IRCAM-SAMPLES-FOLDER" (quote ircam-samples-folder) (quote ((om-load-inputfun (quote input-funbox) "Name of the composer" "X" nil))) (om-make-point 1482 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 35 112) (om-make-point 1318 231) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4227/160 (((3 4) (3 1 1 1)) ((5 8) (4 1.0)) ((4 4) (1 1 1 1 1 1 (2 (-1 2 2 -2)))) ((2 4) ((2 (2 -1 6)))) ((5 32) (4.0 1.0)) ((4 4) ((4 (1 1 1 3 1 1 (2 (-2 2 1)))))) ((2 4) ((2 (3 -1 8 -1)))) ((4 4) ((4 (4 2 -1 1 2.0 -2 -8)))) ((2 4) ((1 (-2 3)) (1 (1.0 -2 3)))) ((1 4) (1)) ((3 8) (3)) ((2 4) (3 1 2.0 2)) ((2 4) (-1 1 1 1 4)) ((13 16) (7 6)) ((4 4) ((4 (3 3 3 3 3 1 (3 (1 1)))))) ((4 4) (1 -1 1 1 1 1 (2 (-1 2 2 -1 1)))) ((3 32) (-3)) ((2 4) ((2 (-1 2 2 -1 3)))) ((5 16) (4 1.0)) ((4 4) ((4 (1 -2 1 1 1 1 1 (2 (-1 2 2 -1 1)))))) ((2 4) ((2 (-1 (4 (3 1 -4 1)))))) ((7 32) (2 3 -2)) ((4 20) (4)) ((15 16) ((15 (-2 3 2 -3 2)))) ((6 16) (-6)) ((4 4) ((2 (1 (4 (1 -1 -3 1)))) (2 ((2 ((4 (1.0 -1 -1 1 -1)) -1 1)))))) ((4 4) ((2 (1 (4 (1 -1 1 -1 1)))) (2 ((2 ((4 (1.0 1 -1 1 -1)) 1 1)))))) ((4 8) (-1 7)) ((4 16) (4.0)) ((4 4) ((2 (1 (4 (1 -1 -3 1)))) (2 ((2 ((4 (1.0 -1 -1 1 -1)) -1 1)))))) ((4 8) (4)) ((2 8) (2)) ((3 8) (3)) ((7 16) (7)) ((8 4) (8)) ((2 4) (-1 3)) ((3 4) (3 1 1 1)) ((3 4) (3 1 1 1)) ((7 4) (7.0)) ((3 4) (3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6555)) :ldur (quote (978)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5669)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6551)) :ldur (quote (1304)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (326 326 326 326)) :lvel (quote (90 90 90 90)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6150)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (186)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (186)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (290)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (870)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (261)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (261)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7500)) :ldur (quote (783)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (261)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (261)) :lvel (quote (88)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (209)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (104)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (301)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (803)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (522)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (261)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (16))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (130)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7700)) :ldur (quote (391)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7514)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7750)) :ldur (quote (652)) :lvel (quote (67)) :loffset (quote (0)) :lchan (quote (328))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (978)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7314 6290 6549 5531)) :ldur (quote (489 489 489 489)) :lvel (quote (90 90 90 90)) :loffset (quote (0 0 0 0)) :lchan (quote (328 328 328 328))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4100)) :ldur (quote (163)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (326)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (163)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (163)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5686)) :ldur (quote (163)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6002)) :ldur (quote (652)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6198)) :ldur (quote (1141)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7775)) :ldur (quote (978)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (300))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (412)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (412)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (412)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (412)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (412 412 412 412)) :lvel (quote (110 110 110 110)) :loffset (quote (0 0 0 0)) :lchan (quote (274 274 274 274))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (137)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (206)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (206)) :lvel (quote (10)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (326)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (326)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (326)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7902 6550 6969 7200)) :ldur (quote (186 186 186 186)) :lvel (quote (90 90 90 90)) :loffset (quote (0 0 0 0)) :lchan (quote (300 300 300 300))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6230)) :ldur (quote (186)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (93)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (290)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6600)) :ldur (quote (290)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (435)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500 6633 7507 7889 6771 7205)) :ldur (quote (652 652 652 652 652 652)) :lvel (quote (90 90 90 90 90 90)) :loffset (quote (0 0 0 0 0 0)) :lchan (quote (497 300 300 328 271 274))))) (load-port-info thechord (quote (0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6550)) :ldur (quote (261)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (261)) :lvel (quote (20)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200)) :ldur (quote (261)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (261 261 261 261)) :lvel (quote (40 30 50 10)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (261)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (149)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (149)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (75)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (348)) :lvel (quote (120)) :loffset (quote (0)) :lchan (quote (274))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (116)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4500)) :ldur (quote (116)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5502 6550 6969)) :ldur (quote (163 163 163 163)) :lvel (quote (50 60 90 75)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900 6200 6755 6969)) :ldur (quote (245 245 245 245)) :lvel (quote (90 90 90 75)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000 5502 6550 7425)) :ldur (quote (522 522 522 522)) :lvel (quote (50 50 90 80)) :loffset (quote (0 0 0 0)) :lchan (quote (497 274 300 20))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6100 6550 6969)) :ldur (quote (611 611 611)) :lvel (quote (50 90 50)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6220 6755 6969)) :ldur (quote (408 408 408)) :lvel (quote (60 90 60)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7028 6550 7425)) :ldur (quote (408 408 408)) :lvel (quote (60 90 60)) :loffset (quote (0 0 0)) :lchan (quote (274 300 20))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6250)) :ldur (quote (261)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (174)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (174)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (174)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (217)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (261)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (209)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (25))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (174)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (174)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (40))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (217)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (217)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6925)) :ldur (quote (1141)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6300)) :ldur (quote (261)) :lvel (quote (50)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (174)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6450)) :ldur (quote (174)) :lvel (quote (70)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6650)) :ldur (quote (174)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (217)) :lvel (quote (90)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6475)) :ldur (quote (1304)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6294)) :ldur (quote (652)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5478)) :ldur (quote (978)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5796)) :ldur (quote (1141)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (5217)) :lvel (quote (30)) :loffset (quote (0)) :lchan (quote (63))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5478)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6655)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5569)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6675)) :ldur (quote (978)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5469)) :ldur (quote (326)) :lvel (quote (60)) :loffset (quote (0)) :lchan (quote (118))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6565)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (20))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5659)) :ldur (quote (326)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (497))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6050)) :ldur (quote (1957)) :lvel (quote (40)) :loffset (quote (0)) :lchan (quote (425))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 92) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.19 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 0) (om-make-point 958 1016) 0 1000 nil 159/100 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggff) 48 4)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((38 0 1 0 nil 0) (38 0 2 0 nil 0) (38 0 5 0 nil 0) (4 0 5 2 nil 0) (3 0 5 3 nil 0) (38 0 6 0 nil 0) (38 0 11 0 nil 0) (24 2 11 1 nil 0) (14 0 13 0 nil 0) (12 0 13 1 nil 0) (22 1 14 0 nil 0) (38 0 15 0 nil 0) (22 1 17 0 nil 0) (16 0 17 1 nil 0) (38 0 18 0 nil 0) (38 0 20 0 nil 0) (19 0 20 1 nil 0) (7 0 20 2 nil 0) (8 0 20 3 nil 0) (38 2 22 1 nil 0) (22 1 23 0 nil 0) (21 0 23 1 nil 0) (29 0 26 0 nil 0) (26 0 28 0 nil 0) (27 0 28 1 nil 0) (11 0 29 0 nil 0) (32 0 31 0 nil 0) (38 0 32 0 nil 0) (18 0 33 0 nil 0) (30 0 35 0 nil 0) (36 0 37 0 nil 0) (24 0 38 1 nil 0) (24 1 38 2 nil 0) (34 0 38 3 nil 0))) nil 6.19))
