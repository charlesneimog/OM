; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 404 508) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-random-permutations" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 306 31) (quote "Q-Random-Permutations-No-Dups") nil (om-make-point 72 57) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 113 167) (om-make-point 70 30) (list 1 2 3 4) "(1 2 3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 195 168) (om-make-point 34 30) 20 "20" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 108 299) (om-make-point 170 102) (load-buffer-textfile (quote ("(1 2 3 4)" "(2 1 4 3)" "(3 1 4 2)" "(1 3 2 4)" "(2 3 4 1)" "(3 1 2 4)" "(2 3 1 4)" "(4 1 3 2)" "(3 2 4 1)" "(1 4 2 3)" "(4 3 2 1)" "(4 2 3 1)" "(4 1 2 3)" "(1 2 4 3)" "(1 3 4 2)" "(2 4 3 1)" "(2 1 3 4)" "(4 3 1 2)" "(2 4 1 3)" "(1 4 3 2)" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 312 44) (quote "Generate random permutations from a list$with no duplicate lists.") "" (om-make-point 70 92) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 79 27) (quote "original list") "" (om-make-point 111 138) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 28) (quote "no. permutations needed") "" (om-make-point 194 137) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-RANDOM-PERMUTATIONS-NO-DUPS" (quote cnmat:q-random-permutations-no-dups) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "number of permutations to generate" "NO-TIMES" 5))) (om-make-point 82 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 3 1 nil 0) (1 0 7 0 nil 0) (2 0 7 1 nil 0))) nil 6.120003))
