; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 1342 725) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "r-substitute-children" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 311 72) (quote "Generate all \"children\" substitutions for a desired duration or set of durations. Remove any undesired combinations using the disalllowed durations parameter.") "" (om-make-point 101 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 41) (quote "R-SUBSTITUTE-CHILDREN") "" (om-make-point 101 17) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 775 151) (om-make-point 539 531) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5 7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 1 -4 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 3 1 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 1 3 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -3 1 1 1 1 -5 -7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 7 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -16 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 3 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 1 1 1 -5 -7 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 5 7 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -12 1 1 1 -4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 3 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 1 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -15 1 1 1 1) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 3 4 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 1 1 1 -4 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 3 1 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 1 3 -5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -10 1 1 1 1 -5) :from-file t))) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 429 23) (om-make-point 1011 851))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-SUBSTITUTE-CHILDREN" (quote cnmat::r-substitute-children) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "CHILDREN-DESIRED" nil) (om-load-inputfun (quote input-funbox) "" "REMOVE-VALUES" nil))) (om-make-point 278 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "PRF $(A PRF)") "" (om-make-point 102 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 204 41) (quote "PARAMETERS") "" (om-make-point 100 120) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 544 218) (om-make-point 41 30) (list 2) "(2 )" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 210 85) (quote "Desired \"children\" substitutions:$provide a list of durations for substitution") "" (om-make-point 312 147) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 214 70) (quote "List of Disallowed Durations:$remove any combination that contains any one of these numbers") "" (om-make-point 539 144) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 316 212) (om-make-point 48 30) (list 3 4) "(3 4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 104 201) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 5 7) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 7 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 5 7 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 3 4 5) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 1 nil 0) (10 0 3 0 nil 0) (9 0 3 1 nil 0) (6 0 3 2 nil 0))) nil 6.120003))
