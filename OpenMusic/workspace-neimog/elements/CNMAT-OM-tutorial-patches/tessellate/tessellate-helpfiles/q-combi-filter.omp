; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 373 23) (om-make-point 714 820) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-combi-filter" (quote ((let ((box (om-load-boxcomment "comment 20" (om-make-point 452 120) (quote "$Filter results from q-combi-from-elements. Specify lists for allowable number of elements (elems), list sums (sums), and overlaps (olaps), i.e. shared attacks not counting the first one. Optional argument \"exclude\": specify a list of elements that, when found in a list, will exclude that list from the output.$$$") "" (om-make-point 80 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 300 661) (om-make-point 361 103) (load-buffer-textfile (quote ("((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 416 442) (om-make-point 37 30) (list 4) "(4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 465 442) (om-make-point 62 30) (list 10 12) "(10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 537 441) (om-make-point 33 30) nil "nil" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 19" (om-make-point 372 54) (quote "Q-Combi-filter:$Arguments for elems, sums and olaps must be lists. Optional argument exclude must also be a list.") "" (om-make-point 84 176) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 18" (om-make-point 45 28) (quote "elems") "" (om-make-point 412 408) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 17" (om-make-point 45 28) (quote "sums") "" (om-make-point 465 408) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 16" (om-make-point 45 28) (quote "olaps") "" (om-make-point 533 407) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FROM-ELEMENTS 2" (quote cnmat:q-combi-from-elements) (quote ((om-load-inputfun (quote input-funbox) "a list of elements" "ELEMENTS-LIST" (list 1 2 3 4 5 6 8 10 12)) (om-load-inputfun (quote input-funbox) "ordered variable number" "ORDERED" 1) (om-load-inputfun (quote input-funbox) "mode: 0 or 1" "MODE" 0))) (om-make-point 205 357) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 131 435) (om-make-point 256 90) (load-buffer-textfile (quote ("((1) (elems 1 sum 1 olaps 0))" "((2) (elems 1 sum 2 olaps 0))" "((3) (elems 1 sum 3 olaps 0))" "((4) (elems 1 sum 4 olaps 0))" "((5) (elems 1 sum 5 olaps 0))" "((6) (elems 1 sum 6 olaps 0))" "((8) (elems 1 sum 8 olaps 0))" "((10) (elems 1 sum 10 olaps 0))" "((12) (elems 1 sum 12 olaps 0))" "((1 2) (2 1) (elems 2 sum 3 olaps 0))" "((1 3) (3 1) (elems 2 sum 4 olaps 0))" "((1 4) (4 1) (elems 2 sum 5 olaps 0))" "((2 3) (3 2) (elems 2 sum 5 olaps 0))" "((1 5) (5 1) (elems 2 sum 6 olaps 0))" "((2 4) (4 2) (elems 2 sum 6 olaps 0))" "((2 6) (6 2) (elems 2 sum 8 olaps 0))" "((3 5) (5 3) (elems 2 sum 8 olaps 0))" "((2 8) (8 2) (elems 2 sum 10 olaps 0))" "((4 6) (6 4) (elems 2 sum 10 olaps 0))" "((2 10) (10 2) (elems 2 sum 12 olaps 0))" "((4 8) (8 4) (elems 2 sum 12 olaps 0))" "((1 2 3) (2 3 1) (3 1 2) (elems 3 sum 6 olaps 2))" "((1 2 5) (2 5 1) (5 1 2) (elems 3 sum 8 olaps 0))" "((1 3 4) (3 4 1) (4 1 3) (elems 3 sum 8 olaps 2))" "((1 3 6) (3 6 1) (6 1 3) (elems 3 sum 10 olaps 0))" "((1 4 5) (4 5 1) (5 1 4) (elems 3 sum 10 olaps 2))" "((2 3 5) (3 5 2) (5 2 3) (elems 3 sum 10 olaps 2))" "((1 3 8) (3 8 1) (8 1 3) (elems 3 sum 12 olaps 0))" "((1 5 6) (5 6 1) (6 1 5) (elems 3 sum 12 olaps 2))" "((2 4 6) (4 6 2) (6 2 4) (elems 3 sum 12 olaps 2))" "((3 4 5) (4 5 3) (5 3 4) (elems 3 sum 12 olaps 0))" "((1 2 3 4) (2 3 4 1) (3 4 1 2) (4 1 2 3) (elems 4 sum 10 olaps 6))" "((1 2 3 6) (2 3 6 1) (3 6 1 2) (6 1 2 3) (elems 4 sum 12 olaps 6))" "((1 2 4 5) (2 4 5 1) (4 5 1 2) (5 1 2 4) (elems 4 sum 12 olaps 2))" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 15" (om-make-point 68 25) (quote "mode") "" (om-make-point 331 269) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 339 302) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 14" (om-make-point 259 35) (quote "Q-COMBI-FILTER") "" (om-make-point 79 32) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 13" (om-make-point 68 25) (quote "ordered") "" (om-make-point 257 270) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 12" (om-make-point 68 25) (quote "elements") "" (om-make-point 84 273) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 262 304) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 87 306) (om-make-point 138 30) (list 1 2 3 4 5 6 8 10 12) "(1 2 3 4 5 6 8 10 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-COMBI-FILTER 2" (quote cnmat:q-combi-filter) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MAIN-LIST" (list (list 1 2 3) (list 3 4 5))) (om-load-inputfun (quote input-funbox) "a list of elements" "ELEMS" nil) (om-load-inputfun (quote input-funbox) "a list of possible sums" "SUMS" nil) (om-load-inputfun (quote input-funbox) "a list of overlaps" "OLAPS" nil) (om-load-inputfun (quote input-funbox) "excluded elements" "EXCLUDE" nil))) (om-make-point 404 576) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 586 441) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 11" (om-make-point 61 26) (quote "exclude") "" (om-make-point 582 407) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((18 0 1 1 nil 0) (17 0 9 0 nil 0) (16 0 9 1 nil 0) (12 0 9 2 nil 0) (9 0 10 1 nil 0) (10 1 18 0 nil 0) (2 0 18 1 nil 0) (3 0 18 2 nil 0) (4 0 18 3 nil 0) (19 0 18 4 nil 0))) nil 6.120003))
