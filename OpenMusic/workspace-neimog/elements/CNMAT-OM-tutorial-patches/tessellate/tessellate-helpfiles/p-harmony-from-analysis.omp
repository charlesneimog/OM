; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 1358 823) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("RepMus" "CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "p-harmony-from-analysis" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 308 48) (quote "Returns a chord object notating partials from a partial-tracking analysis.") nil (om-make-point 86 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 153 27) (quote "Load sdif file here") "" (om-make-point 85 91) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 199 47) (quote "<---Listing of midipitch/velocity pairs") "" (om-make-point 910 469) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 664 464) (om-make-point 235 291) (load-buffer-textfile (quote ("(4610 100)" "(5806 71)" "(5312 52)" "(6038 48)" "(8674 46)" "(6770 46)" "(6198 46)" "(7208 45)" "(6508 45)" "(8900 44)" "(8832 44)" "" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch-velocity-pairs" (om-load-patch-abs1 "pitch-velocity-pairs" (quote ((let ((box (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 86 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.120003 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (pitches velocities) $$$(mapcar 'list pitches velocities)$$$$)") (quote ((om-load-inputfun (quote input-funbox) "" "PITCHES" nil) (om-load-inputfun (quote input-funbox) "" "VELOCITIES" nil))) (om-make-point 67 196) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "velocity" 1 (om-make-point 55 45) "" "velocity" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "pitch" 0 (om-make-point 5 45) "" "pitch" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 8 373) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 4 0 nil 0))) 6.120003 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 651 379) nil (list (list (list 4610 100) (list 5806 71) (list 5312 52) (list 6038 48) (list 8674 46) (list 6770 46) (list 6198 46) (list 7208 45) (list 6508 45) (list 8900 44) (list 8832 44))) nil "pitch-velocity-pairs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 193 27) (quote "no. of pitches desired") "" (om-make-point 151 398) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 380 96) (quote "p-harmony-from-analysis flattens all attacks into one event and returns n-pitches based on the greater amplitudes (velocities).  (Given equal velocity, the object will return the higher pitch).") "" (om-make-point 223 443) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 258 56) (quote "as->om returns a chordseq of all pitches and attacks") "" (om-make-point 501 283) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 153 432) (om-make-point 34 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD 2" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 107 571) (om-make-point 233 177) (let ((thechord (make-instance (quote chord) :lmidic (quote (8832 8900 6508 7208 6198 6770 8674 6038 5312 5806 4610)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (44 44 45 45 46 46 46 48 52 71 100)) :loffset (quote (0 0 0 0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 4 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 797 383) (om-make-point 400 23) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "P-HARMONY-FROM-ANALYSIS" (quote cnmat:p-harmony-from-analysis) (quote ((om-load-inputfun (quote input-funbox) "a chor-seq" "MYCHORDSEQ" (list nil)) (om-load-inputfun (quote input-funbox) "an optional argument specifying the numnber of pitches to return based on highest partial amplitude" "NUMPITCHES" 0))) (om-make-point 68 469) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 219 35) (quote "P-HARMONY-FROM-ANALYSIS") "" (om-make-point 85 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 231 120) (quote "<---RESULTS: CHORD$To hear microtones:$1) Set chord object \"approx\" to 1/4 or other microtonal level.$2) Apply \"auto microtone bend\" in the applicationPrefences/Midi section.$") "" (om-make-point 345 610) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Cb-ord-A#1-ff-3c.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 87 115) (om-make-point 389 93) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 893 267) (om-make-point 30 32))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "micro-$tonal $approx.") "" (om-make-point 994 70) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 104 70) (quote "polyphony-$no. of notes by partial volume") "" (om-make-point 1050 72) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "midic$values for low and hi pitch") "" (om-make-point 872 76) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 71) (quote "delta:$window of time for events") "" (om-make-point 796 68) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 70) (quote "amplitudes of sdif scaled to min. max midi velocities") "" (om-make-point 696 73) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1008 144) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 938 146) (om-make-point 62 30) 127000 "127000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 872 149) (om-make-point 48 30) 4000 "4000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 730 148) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 691 149) (om-make-point 34 30) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 392 39) (quote "***REQUIRES REPMUS LIBRARY to filter sdif files***") "" (om-make-point 307 15) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 182 44) (quote "<= filtering, approximation parameters") "" (om-make-point 1122 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1052 148) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 803 150) (om-make-point 41 30) 125 "125" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 171 34) (quote "from 'REPMUS' library =>") "" (om-make-point 494 224) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 96 219) (om-make-point 362 125) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4610 5806 5312 6038 8674 6770 6198 7208 6508 8900 8832 8786) (8860 12928 12796 12778 12716 12700 12684 12492 12482 12442 12316 12302) (12542 12520 12510 12476 12430 11442 10808 9558) (12534 11522 11372 11034 10462) (12740 12716 12438 12422 12388 12378 12150 12094 12042 11920 11800 11774) (12582 12528 12412 12372 12360 11832 11414 11338) (12674 12514 12446 12432 12394 12364 12190 11908 11728 11378 11072) (12350 11990 11954 11920 11426) (12784 12144 12124 12088 12076 12018 12000 11920 11906 11882 11828 11808) (12816 12794 12770 12762 12718 12702 12656 12102 12064 11974 11958 11782) (12162 12024 11930 11690 11602 11518 11352) (12446 12414 12388 12380 12188 12146 12058 12018 12008 11978 11922 11586) (12666 12650 12538 12366 12350 12090 11942 11930 11892 11874 11836 11776) (12450 12426 12408 12374 12316 12306 12194 12134 11918 11824 11488 11462) (12468 11602 11570 11528 11424 11254 11198 10108) (12756 12550 12516 12500 12478 12384 12000 11978 11768 11706 11686 11300) (12740 12720 12712 12674 12640 12614 12594 12556 12346 12138 12114 12006) (12780 12328 12298 12042 12034 11976 11946 11874 11792 11752 11694 11678) (12816 12794 12764 12658 12572 12544 12516 12490 12464 12398 12366 12338) (12846 12828 12774 12664 12642 12538 12520 12490 12450 12416 12350 12336) (12690 12672 12534 12492 12474 12436 12406 12366 12132 12108 11968 11934) (13394 12926 12800 12758 12696 12640 12550 12522 12440 12416 12356 12320) (12866 12666 12646 12314 11942 11740 11716 11578 11562 11532 11482 11418) (12940 12920 12872 12790 12772 12748 12720 12696 12650 12292 12120 12028) (5016 6040 8804 8726 8560 8480 7918 7790 7656 7478 12818 12804) (5586) (5582) (4080) (4084) (4090) (4088) (4108) (5820 4090))) :lonset (quote (0 120 240 400 520 650 770 900 1050 1170 1300 1420 1540 1680 1800 1920 2040 2220 2370 2490 2620 2740 2870 2990 3120 3250 3400 3630 3770 4100 4350 4530 4920 5950)) :ldur (quote ((5950 4860 5680 120 3840 4010 4980 4020 3970 3490 3690 130) (60 500 1570 460 40 540 60 740 2290 260 690 160) (680 1950 1570 1600 160 450 3030 3070) (400 550 2760 2910 2900) (170 310 2770 880 870 870 1450 340 220 260 60 1040) (470 290 430 130 1010 640 210 2060) (120 1320 780 450 410 210 500 2460 360 690 1370) (100 970 2310 160 1150) (670 220 1290 2160 570 2270 890 440 190 280 410 2010) (540 550 530 520 70 510 230 1170 900 510 210 2120) (360 1490 190 190 420 1640 1010) (700 530 980 460 1900 420 20 430 40 220 250 450) (310 320 940 410 1640 640 220 1720 1390 970 260 140) (1620 160 760 180 980 910 190 480 450 300 430 1390) (390 650 420 1490 370 1230 1460 1460) (1290 530 870 290 1330 920 1370 1240 160 70 1020 220) (1180 390 380 1150 1090 300 180 460 200 1170 580 320) (1020 180 170 1000 710 290 360 230 670 430 170 250) (960 930 900 280 180 870 910 270 610 930 430 880) (200 300 720 670 300 820 260 810 60 440 730 120) (570 260 350 700 420 680 290 620 260 620 360 130) (130 540 490 230 560 280 470 230 130 140 120 480) (450 40 340 420 430 240 430 380 420 420 390 460) (310 230 330 260 320 300 300 300 270 300 220 240) (140 150 150 90 140 190 120 170 190 220 160 150) (80) (780) (90) (110) (170) (130) (160) (100 270))) :lvel (quote ((100 71 52 48 46 46 46 45 45 44 44 44) (41 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (40 40 40 40 40 40 40 40 40 40 40 40) (44 43 41 41 41 41 41 41 41 41 40 40) (42) (40) (41) (40) (40) (40) (40) (40 40))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0))) :lchan (quote ((1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1 1 1 1 1 1 1 1 1 1 1 1) (1) (1) (1) (1) (1) (1) (1) (1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0) (0) (0) (0) (0) (0) (0) (0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.120003 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 2 0 (om-make-point 400 23) (om-make-point 715 415) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 -4) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 16)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AS->OM" (quote as->om) (quote ((om-load-inputfun (quote input-funbox) "Analyse" "ANALYSE" nil) (om-load-inputfun (quote input-funbox) "vel min" "VMIN" 40) (om-load-inputfun (quote input-funbox) "vel max" "VMAX" 100) (om-load-inputfun (quote input-funbox) "delta" "DELTA" 500) (om-load-inputfun (quote input-funbox) "midic min" "MMIN" 4000) (om-load-inputfun (quote input-funbox) "midic max" "MMAX" 8000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 8) (om-load-inputfun (quote input-funbox) "poly. density" "NPOLY" 10))) (om-make-point 656 205) (om-make-point 375 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 1 nil 0) (9 1 4 0 ((om-make-point 171 746) (om-make-point 606 755) (om-make-point 607 328) (om-make-point 689 328) (om-make-point 689 379)) 0) (9 2 4 1 ((om-make-point 204 746) (om-make-point 628 765) (om-make-point 634 328) (om-make-point 727 328) (om-make-point 727 379)) 0) (10 0 9 0 nil 0) (30 0 10 0 ((om-make-point 842 270) (om-make-point 844 308) (om-make-point 117 309) (om-make-point 118 469)) 0) (8 0 10 1 nil 0) (30 0 29 0 nil 0) (13 0 30 0 nil 0) (23 0 30 1 nil 0) (22 0 30 2 nil 0) (27 0 30 3 nil 0) (21 0 30 4 nil 0) (20 0 30 5 nil 0) (19 0 30 6 nil 0) (26 0 30 7 nil 0))) nil 6.120003))
