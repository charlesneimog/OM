; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 442 23) (om-make-point 691 823) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "q-permutations+canon" (quote ((let ((box (om-load-boxcomment "comment 6" (om-make-point 310 29) (quote "Permutations+Canon-Growth") "" (om-make-point 103 11) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 440 167) (quote "Provided with a group of lists, iteratively builds output lists with no rhythmic overlaps, except for the onset.$$Builds according to this process: take the first list and check it against the second list.  If there are no attack overlaps add both lists to the output list. Then check the third list agains this output list. If there are no outputs, combine the third list to the output list and continue. Etc...$$Does this process on each rotation of the original lists provided.$$") "" (om-make-point 104 42) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 2" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 171 255) (om-make-point 153 107) (load-buffer-textfile (quote ("(4 1 2 3 5)" "(2 1 3 4 5)" "(1 5 4 3 2)" "(4 2 3 1 5)" "(1 5 3 4 2)" "(3 2 5 1 4)" "(4 5 3 2 1)" "(4 2 5 1 3)" "(5 3 1 4 2)" "(4 3 1 5 2)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 113 461) (om-make-point 292 109) (load-buffer-textfile (quote ("((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0))" "((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 2 3 1 5) (elems 5 sum 15 olaps 0))" "((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0))" "((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0))" "((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0))" "((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))" "" "" "" "" "")) (quote textfile) "supersede" "list") nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 159 28) (quote "starting lists") "" (om-make-point 168 224) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 179 29) (quote "<--function output") "" (om-make-point 417 467) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 153 672) (om-make-point 190 156) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 1 5 4 3 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 5 3 2 1) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 202 59) (quote "<--checking elements for onset overlaps in a given list") "" (om-make-point 389 734) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 49) (quote "(lists of lists from the original input$that do not have onset overlaps)") "" (om-make-point 419 497) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "Q-PERMUTATIONS+CANON" (quote cnmat:q-permutations+canon) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MYLIST" (list 1 2 3 4 5)))) (om-make-point 163 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "POP-UP-MENU" (quote pop-up-menu) (quote ((om-load-inputfun (quote input-funbox) "list of choices" "items" (list "yes" "no")) (om-load-inputfun (quote input-funbox) "a function or box in lambda mode" "action" nil))) (om-make-point 114 583) (om-make-point 339 60) (let ((rep (om-make-dialog-item (quote pop-up-menu) (om-make-point 1 1) (om-make-point 319 24) "untitled" :range (quote (((4 1 2 3 5) (1 5 3 4 2) (elems 5 sum 15 olaps 0)) ((2 1 3 4 5) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((1 5 4 3 2) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 2 3 1 5) (elems 5 sum 15 olaps 0)) ((1 5 3 4 2) (3 2 5 1 4) (elems 5 sum 15 olaps 0)) ((3 2 5 1 4) (4 5 3 2 1) (elems 5 sum 15 olaps 0)) ((4 5 3 2 1) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 2 5 1 3) (5 3 1 4 2) (elems 5 sum 15 olaps 0)) ((5 3 1 4 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0)) ((4 3 1 5 2) (2 1 3 4 5) (elems 5 sum 15 olaps 0))))))) (om-set-selected-item-index rep (quote 2)) rep) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 392 652) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 3 1 nil 0) (11 0 6 1 nil 0) (2 1 9 0 nil 0) (3 1 10 0 nil 0) (10 1 11 0 nil 0))) nil 6.120003))
