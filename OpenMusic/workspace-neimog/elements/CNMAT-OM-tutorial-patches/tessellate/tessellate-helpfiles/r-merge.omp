; OM File Header - Saved 2020/09/18 16:20:29
; (6.120003 :patc (om-make-point 24 24) (om-make-point 50 50) (om-make-point 1249 823) "" 183 0 nil "2020/09/18 16:20:26")
; End File Header
(in-package :om)(load-lib-for (quote ("CNMAT-OM")))(setf *om-current-persistent* (om-load-patch1 "r-merge" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 670 433) (om-make-point 48 30) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "MYVOICES" nil) (om-load-inputfun (quote input-funbox) "" "ME" nil))) (om-make-point 923 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE 3" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil) (om-load-inputfun (quote input-funbox) "" "MYVOICES" nil))) (om-make-point 638 481) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "R-MERGE 3" (quote cnmat::r-merge) (quote ((om-load-inputfun (quote input-funbox) "" "RHYTHM" nil))) (om-make-point 207 491) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a third argument \"1\" when you would like to specify several lists of rhythmic frames to merge.  ") "" (om-make-point 838 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with three arguments") "" (om-make-point 837 298) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 239 36) (quote "R-MERGE with two arguments") "" (om-make-point 452 300) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 837 565) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 2 2 1 5) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 1 3 8) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 1022 441) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 896 441) (om-make-point 110 30) (list (list 0) (list 0 3) (list 7 5)) "((0) (0 3) (7 5))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 444 567) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 7 2 1 2 3) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 70 24) (quote "R-MERGE") "" (om-make-point 62 45) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 294 99) (quote "R-merge collapes the attacks of all rhythmic frames within a polyrhythmic frame into one rhythmic frame.  An optional additional list specifies only those rhythmic frames within the polyrhythmic frame to be compressed. The output in both cases is a polyrhythmic frame.") "" (om-make-point 62 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 79 568) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 1 1 1 1 1 1 1 1 1 1 1 2) :from-file t))) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 297 88) (quote "Provide a second argument when you would like to specify which rhythmic frames to merge.  Voices begin with 0, e.g. the first two voices would be specified in the list (0 1).") "" (om-make-point 450 332) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "PRF" (quote cnmat:prf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "voices" nil))) (om-make-point 63 178) (om-make-point 326 272) (if (find-class (quote cnmat:prf) nil) (make-instance (quote cnmat:prf) :voices (list (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 2 3 4 6) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -9 3 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 4 6 2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -7 3 3 -2) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 4 6 2 3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list -4 3 3 -2 -3) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 6 2 3 4) :from-file t)) (if (find-class (quote cnmat::rhythmic-frame) nil) (make-instance (quote cnmat::rhythmic-frame) :pulses (list 3 3 -2 -3 -4) :from-file t))) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 1 0 nil 0) (9 0 1 1 nil 0) (8 0 1 2 nil 0) (15 0 2 0 nil 0) (0 0 2 1 nil 0) (15 0 3 0 nil 0) (1 0 7 1 nil 0) (2 0 10 1 nil 0) (3 0 13 1 nil 0))) nil 6.120003))
