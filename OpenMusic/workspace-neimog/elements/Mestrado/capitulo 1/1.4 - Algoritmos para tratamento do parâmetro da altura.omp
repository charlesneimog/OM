; OM File Header - Saved 2020/09/11 12:26:56
; (6.17 :patc (om-make-point 280 10) (om-make-point -8 -8) (om-make-point 1366 725) "" 183 0 "2020/02/04 20:36:56" "2020/08/14 21:10:26")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "1.4 - Algoritmos para tratamento do par‚metro da altura" (quote ((let ((box (om-load-boxcall (quote abstraction) "modulation notes fund" (om-load-patch-abs1 "modulation notes fund" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 155 61) (quote "Fundamentais em semitons (2), quartos de tom (4), sextos (6) de tom, etc.") "" (om-make-point 306 204) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 137 65) (quote "AproximaÁ„o em cents para as notas serem consideradas iguais") "" (om-make-point 145 177) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 549 228) (quote "OM > (6000 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" -800 cents)$OM > (6000 7746.1953 \"will be equal if the second list have has the fundamental with the difference of\" -1750 cents)$OM > (6000 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -1400 cents)$OM > (6552 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" -250 cents)$OM > (6552 7746.1953 \"will be equal if the second list have has the fundamental with the difference of\" -1200 cents)$OM > (6552 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -850 cents)$OM > (7104 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" 300 cents)$OM > (7104 7746.1953 \"will be equal if the second list have has the fundamental with the difference of\" -650 cents)$OM > (7104 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -300 cents)$OM > (6456 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" -350 cents)$OM > (6456 7746.1953 \"will be equal if the second list have has the fundamental with the difference of\" -1300 cents)$OM > (6456 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -950 cents)$OM > (7008 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" 200 cents)$OM > (7008 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -400 cents)$OM > (7200 6800.0 \"will be equal if the second list have has the fundamental with the difference of\" 400 cents)$OM > (7200 7746.1953 \"will be equal if the second list have has the fundamental with the difference of\" -550 cents)$OM > (7200 7405.0244 \"will be equal if the second list have has the fundamental with the difference of\" -200 cents)$OM => end") "" (om-make-point 45 387) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 337 268) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 179 227) (om-make-point 23 25) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "First notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "Second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "Aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 4))) (om-make-point 145 309) (om-make-point 264 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 63) (quote "Nota de referÍncia") "" (om-make-point 501 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 43) (quote "Primeira diagonal Otonal do Diamante.") "" (om-make-point 485 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 153 98) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 78) (quote "Passando notas em quartos de tom com 7 cents de aproximaÁ„o.") "" (om-make-point 538 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 299 6) (om-make-point 102 28) (list 11 19 97 1997) "(11 19 97 1997)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 298 33) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 338 137) (quote "Resultado da avaliaÁ„o dessas configuraÁıes. $$Por exemplo as notas 6552 do MOS e 6800 da Tonalidade Diamante ser„o iguais se a fundamental  da segunda ·rea de afinaÁ„o for abaixada menos 250 cents. Ou seja, ser 6550.") "" (om-make-point 640 391) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 14 62) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 444 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 327 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 450 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 518 198) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 489 198) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 461 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 107 177) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 74 177) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 44 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 452 17) (om-make-point 44 28) 6800 "6800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 102 64) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 56 41) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 33 98) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((22 0 5 0 nil 4) (19 0 5 1 nil 3) (4 0 5 2 nil 1) (3 0 5 3 nil 2) (10 0 11 0 nil 0) (15 0 14 0 nil 0) (23 0 14 1 nil 0) (11 1 15 0 nil 0) (14 0 16 0 nil 0) (16 0 19 0 nil 0) (18 0 19 1 nil 0) (17 0 19 2 nil 0) (26 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (13 0 26 0 nil 0) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (8 0 26 3 nil 0))) 6.16 nil "" (om-make-point 86 0) (om-make-point 1055 716)) (quote nil) (om-make-point 142 519) nil nil nil "modulation notes fund"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulation notes fund" (om-load-patch-abs1 "modulation notes fund" (quote ((let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 264 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulation notes" (om-load-patch-abs1 "modulation notes" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 174 63) (quote "Nota de referÍncia") "" (om-make-point 501 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-CHECK" (quote mos-check) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "INTERVAL" 19/16) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 50) (om-load-inputfun (quote input-funbox) "interval number of the MOS" "NUMBER_OF_INTERVAL" 2))) (om-make-point 774 320) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 43) (quote "Primeira diagonal Otonal do Diamante.") "" (om-make-point 485 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 153 98) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 256 51) (quote "Passando notas em quartos de tom com 7 cents de aproximaÁ„o.") "" (om-make-point 120 223) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 78) (quote "Passando notas em quartos de tom com 7 cents de aproximaÁ„o.") "" (om-make-point 538 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 299 6) (om-make-point 102 28) (list 11 19 97 1997) "(11 19 97 1997)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 298 33) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 304 134) (quote "Notas que aparecem na estrutura de MOS e na estrutura da Tonalidade-Diamante. Observe que h· um filtro para instrumentos ac˙sticos.$$A primeira nota (6552) se refere ao MOS e a segunda (7746) ‡ Tonalidade-Diamante.") "" (om-make-point 331 388) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 14 62) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 174 439) (om-make-point 150 47) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 122 23) "((6552 7746.1953))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 264 303) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 444 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 327 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES" (quote modulation-notes) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 2))) (om-make-point 203 358) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 450 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 518 198) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 489 198) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 461 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 107 177) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 74 177) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 44 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 452 17) (om-make-point 44 28) 6800 "6800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 102 64) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 56 41) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 33 98) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 0 nil 0) (14 0 10 0 nil 0) (13 0 12 0 nil 0) (22 0 12 1 nil 0) (7 1 13 0 nil 0) (21 0 14 0 nil 0) (18 0 14 1 nil 0) (11 0 14 2 nil 0) (12 0 15 0 nil 0) (15 0 18 0 nil 0) (17 0 18 1 nil 0) (16 0 18 2 nil 0) (25 0 21 0 nil 0) (20 0 21 1 nil 0) (19 0 21 2 nil 0) (9 0 25 0 nil 0) (24 0 25 1 nil 0) (23 0 25 2 nil 0) (3 0 25 3 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 226 420) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 224 238) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 201) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 4))) (om-make-point 128 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 157 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 319 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 423 197) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 388 167) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 376 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 105 140) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 72 140) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 42 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 271 57) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 11))) (om-make-point 181 14) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 68 34) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 22 33) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 27 73) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (13 0 0 1 nil 0) (12 0 4 0 nil 0) (9 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (14 0 5 0 nil 0) (0 0 6 0 nil 0) (6 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (17 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (16 0 17 1 nil 0) (15 0 17 2 nil 0))) 6.16 nil "" (om-make-point 218 149) (om-make-point 755 447)) (quote nil) (om-make-point 25 392) nil nil nil "modulation notes fund"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "cps ratio " (om-load-patch-abs1 "cps ratio " (quote ((let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 318 322) (om-make-point 229 43) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 201 19) "(35 65 91 85 119 221)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 318 322) (om-make-point 279 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 251 16) "((5 7) (5 13) (7 13) (5 17) (7 17) (13 17))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 198 70) (quote "Este objeto faz a decomposiÁ„o de n˙meros primos, ele ser· muito usado na decomposiÁ„o de sieves.") "" (om-make-point 553 255) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PRIME-DECOMPOSITION" (quote prime-decomposition) (quote ((om-load-inputfun (quote input-funbox) "Number or numbers list." "HARMONIC" (list 9 18 172)))) (om-make-point 432 233) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 405 183) (om-make-point 173 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 145 17) "(35 65 91 85 119 221)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 190 61) (quote "Transforma os vÈrtices de qualquer CPS em identities segundo a teoria de Partch.") "" (om-make-point 517 100) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->IDENTITY" (quote cps->identity) (quote ((om-load-inputfun (quote input-funbox) "Combination products set of a Hexany, Eikosany or others." "CPS" 1))) (om-make-point 440 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 190 61) (quote "Transforma os vÈrtices de qualquer CPS em razıes.") "" (om-make-point 14 136) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 74 205) (om-make-point 286 44) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 258 20) "(35/32 65/64 91/64 85/64 119/64 221/128)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->RATIO" (quote cps->ratio) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HEXANY" 1))) (om-make-point 189 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 284 89) (om-make-point 77 28) (list 5 7 13 17) "(5 7 13 17)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 298 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 3 0 nil 0) (6 0 4 0 nil 0) (11 0 6 0 nil 0) (9 0 8 0 nil 0) (11 0 9 0 nil 0) (10 0 11 0 nil 0))) 6.16 nil "" (om-make-point 287 147) (om-make-point 765 480)) (quote nil) (om-make-point 432 444) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch 2" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 246 46) (quote "O objeto trabalha com lista, listas de lista e razıes.") "" (om-make-point 614 58) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 545 256) (om-make-point 146 135) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7103) (4098 6000 6884))) :lonset (quote (0 1000 2000)) :ldur (quote ((1000) (1000 1000 1000))) :lvel (quote ((100) (100 100 100))) :loffset (quote ((0) (0 0 0))) :lchan (quote ((1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 634 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 504 117) (om-make-point 135 28) (list (list 121/64) (list 1/3 1 5/3)) "((121/64) (1/3 1 5/3))" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 601 144) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 4" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 577 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 3)))) (om-make-point 705 256) (om-make-point 110 89) (let ((thechord (make-instance (quote chord) :lmidic (quote (6702 6498 6969)) :ldur (quote (1000 1000 1000)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (3 3 3))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 648 260) (om-make-point 400 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 664 140) (om-make-point 88 28) (list 3/2 4/3 7/4) "(3/2 4/3 7/4)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 753 140) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 3" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 729 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "NOTE" (quote note) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitch (midicents)" "midic" 6000) (om-load-inputfun (quote input-funbox) "velocity (0-127)" "vel" 80) (om-load-inputfun (quote input-funbox) "duration (ms)" "dur" 1000) (om-load-inputfun (quote input-funbox) "MIDI channel (1-16)" "chan" 1))) (om-make-point 833 248) (om-make-point 82 101) (if (find-class (quote note) nil) (let ((newobj (make-instance (quote note) :midic 6551.318 :vel 80 :dur 1000 :chan 1 :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 300 20) 0 0 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 813 140) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 236 70) (quote "Aqui temos a nota de referÍncia da AfinaÁ„o Justa. Esta nota deve ser colocada sem parÍnteses.") "" (om-make-point 229 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 176 60) (quote "Este objeto transforma razıes em midicents.") "" (om-make-point 198 199) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 865 140) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 841 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 404 240) (om-make-point 35 28) (list 3) "(3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 135 31) (om-make-point 32 28) 17 "17" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 58 270) (om-make-point 454 200) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 7902 8786 9369 9804 10151 10441 10688 10905) (4098 6000 6884 7467 7902 8249 8539 8786 9003) (3214 5116 6000 6583 7018 7365 7654 7902 8119) (2631 4533 5417 6000 6435 6782 7072 7319 7536) (2196 4098 4982 5565 6000 6347 6637 6884 7101) (1849 3751 4635 5218 5653 6000 6289 6537 6754) (1559 3461 4346 4928 5363 5711 6000 6248 6464) (1312 3214 4098 4681 5116 5463 5752 6000 6217) (1095 2997 3881 4464 4899 5246 5536 5783 6000))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0))) :lchan (quote ((3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3) (3 3 3 3 3 3 3 3 3))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 183 123) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "Limit-n for the diamond." "LIMITE" 11))) (om-make-point 125 70) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 147 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 1 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 5 1 nil 0) (6 0 8 0 nil 0) (7 0 8 1 nil 0) (14 0 9 1 nil 0) (10 0 14 0 nil 0) (13 0 14 1 nil 0) (20 0 17 1 nil 0) (15 0 17 6 nil 0) (16 0 19 0 nil 0) (19 1 20 0 nil 0) (18 0 20 1 nil 0))) 6.16 nil "" (om-make-point 165 118) (om-make-point 979 537)) (quote nil) (om-make-point 246 442) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "rt-octave" (om-load-patch-abs1 "rt-octave" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 369 42) (quote "Outros n˙meros que n„o a sÈrie geomÈtria de 2 com fator 2 ir„o desconfigurar as alturas originais. $ ") "" (om-make-point 87 359) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:bold)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 159 66) (quote "2: uma oitava;$4: duas oitavas;$8: trÍs oitavas;$16: quatro oitavas;") "" (om-make-point 400 182) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 155 61) (quote "Reduz tudo para duas oitavas") "" (om-make-point 598 193) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 569 262) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 540 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 770 318) (om-make-point 310 164) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7681) (6122) (7084) (8046) (6486))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 675 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 555 146) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE 2" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" 3/2) (om-load-inputfun (quote input-funbox) "2 for one octave; 4 for 2 octaves; 8 for 3; etc..." "OCTAVE" 2))) (om-make-point 530 181) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 843 40) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 819 70) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 775 143) (om-make-point 290 145) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7681) (8522) (11884) (15246) (16086))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 675 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 553 21) (om-make-point 87 28) (list 2 3 7 11 12) "(2 3 7 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 499 21) (om-make-point 43 28) 13/8 "13/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERVAL-SOB" (quote interval-sob) (quote ((om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "List of sobreposition" "SIEVE" (list 2 3 7 11 12)))) (om-make-point 498 52) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 209 63) (quote "Compare com as razıes da figura 4.$") "" (om-make-point 257 276) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 194 62) (quote "Reduz razıes para uma ˙nica oitava.") "" (om-make-point 181 210) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 38 273) (om-make-point 218 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 190 16) "((1 3/2 5/4) (4/3 1 5/3) (8/5 6/5 1))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 42 134) (om-make-point 218 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 190 16) "((1 3 5) (1/3 1 5/3) (1/5 3/5 1))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" 3/2))) (om-make-point 123 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 134 10) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "Limit-n for the diamond." "LIMITE" 11))) (om-make-point 119 38) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 1 nil 0) (13 1 7 0 nil 0) (6 0 7 1 nil 0) (13 1 9 0 nil 0) (8 0 9 1 nil 0) (9 0 10 1 nil 0) (12 0 13 0 nil 0) (11 0 13 1 nil 0) (18 0 16 0 nil 0) (20 1 17 0 nil 0) (17 0 18 0 nil 0) (19 0 20 0 nil 0))) 6.16 nil "" (om-make-point 40 65) (om-make-point 1149 604)) (quote nil) (om-make-point 86 216) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 229 91) (quote "Alturas reduzidas ao ‚mbito de uma oitava + uma segunda (6000 È C4 e 8600 È D6).") "" (om-make-point 34 390) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 91) (quote "Alturas reduzidas ao ‚mbito de uma oitava (6000 È C4 e 7200 È C5).") "" (om-make-point 822 367) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 179 63) (quote "Alturas 'originais'.") "" (om-make-point 810 94) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 167 63) (quote "Este objeto reduz um conjunto de altura ‡ um determinado range.") "" (om-make-point 796 274) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 105 31) (quote "Nota mais aguda$") "" (om-make-point 755 207) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 105 31) (quote "Nota mais grave$") "" (om-make-point 632 205) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 533 362) (om-make-point 288 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6481) (6122) (7084) (6846) (6486))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 734 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 785 237) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 665 235) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 2" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "List of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "The lowest note." "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "The highest note." "AGUDA" 7902))) (om-make-point 605 269) (om-make-point 192 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 23 282) (om-make-point 288 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6481) (6122) (8284) (8046) (7686))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 734 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 526 229) (om-make-point 44 28) 8600 "8600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 472 229) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "List of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "The lowest note." "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "The highest note." "AGUDA" 7902))) (om-make-point 432 259) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 509 52) (om-make-point 295 139) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5281) (6122) (9484) (12846) (13686))) :lonset (quote (0 1000 2000 3000 4000 5000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0))) :lchan (quote ((9) (9) (9) (9) (9))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote ggff) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 234 34) (quote "Converte razıes para midicents.") "" (om-make-point 204 162) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 189 108) (om-make-point 44 28) 3600 "3600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 165 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 253 72) (quote "Objeto que faz sobreposiÁıes selecionadas no segundo inlet.") "" (om-make-point 169 66) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 89 25) (om-make-point 43 28) 13/8 "13/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 133 26) (om-make-point 87 28) (list 2 3 7 11 12) "(2 3 7 11 12)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERVAL-SOB" (quote interval-sob) (quote ((om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "List of sobreposition" "SIEVE" (list 2 3 7 11 12)))) (om-make-point 103 61) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 6 1 nil 0) (14 1 9 0 ((om-make-point 573 189) (om-make-point 573 229) (om-make-point 638 253) (om-make-point 653 269)) 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (13 0 10 1 ((om-make-point 467 331) (om-make-point 410 358) (om-make-point 338 274) (om-make-point 87 282)) 0) (14 1 13 0 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0) (17 0 14 1 ((om-make-point 185 210) (om-make-point 461 206) (om-make-point 468 52) (om-make-point 574 38) (om-make-point 575 52)) 0) (21 1 17 0 nil 0) (16 0 17 1 nil 0) (19 0 21 0 nil 0) (20 0 21 1 nil 0))) 6.16 nil "" (om-make-point 148 120) (om-make-point 1074 532)) (quote nil) (om-make-point 354 265) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 5" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 908 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 5" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 976 99) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 593 386) (om-make-point 44 28) 7100 "7100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 3" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 543 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 517 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 11))) (om-make-point 490 175) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 762 203) (om-make-point 44 28) 7100 "7100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 711 167) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 2" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 712 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 584 47) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 640 50) (om-make-point 44 28) 1200 "1200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM>=" (quote om>=) (quote ((om-load-inputfun (quote input-funbox) "a number" "NUM1" 0) (om-load-inputfun (quote input-funbox) "a number" "NUM2" 1))) (om-make-point 598 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "choose" (om-load-patch-abs1 "choose" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 224 71) (quote "Este objeto ir· selecionar os elementos 1, 7 e 9.") "" (om-make-point 697 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 761 130) (om-make-point 349 94) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6498) (6996) (6294) (6792) (6090) (6588) (7086) (6384) (6882) (6180) (6678) (7200))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 7000)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 621 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 775 290) (om-make-point 214 96) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6588) (6384))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000) (1000) (1000))) :lvel (quote ((100) (100) (100))) :loffset (quote ((0) (0) (0))) :lchan (quote ((1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 621 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 609 171) (om-make-point 55 28) (list 1 7 9) "(1 7 9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 3" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 651 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 626 27) (om-make-point 37 28) 4/3 "4/3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 669 22) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 716 26) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 767 26) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "Fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "High note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "Number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 607 56) (om-make-point 206 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 225 70) (quote "Este objeto ir· selecionar o elemento 1 da lista de listas da Tonalidade-Diamente") "" (om-make-point 116 252) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 189 33) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 224 71) (quote "Este objeto ir· selecionar os elementos 1 e o elemento 3.") "" (om-make-point 446 242) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 299 313) (om-make-point 190 45) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 162 21) "((1 1/3 1/5) (5 5/3 1))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 408 207) (om-make-point 45 28) (list 1 3) "(1 3)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 350 237) (om-make-point 93 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 24 327) (om-make-point 88 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 60 16) "(3 1 3/5)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 75 195) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 82 145) (om-make-point 227 44) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 199 20) "((1 1/3 1/5) (3 1 3/5) (5 5/3 1))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 5))) (om-make-point 167 63) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 24 247) (om-make-point 93 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 1 nil 0) (4 0 2 1 nil 0) (9 0 4 0 nil 0) (3 0 4 1 nil 0) (5 0 9 0 nil 0) (6 0 9 1 nil 0) (7 0 9 2 nil 0) (8 0 9 3 nil 0) (15 0 13 0 nil 0) (18 0 15 0 nil 0) (14 0 15 1 nil 0) (20 0 16 0 nil 0) (19 0 18 0 nil 0) (11 0 19 0 nil 0) (18 0 20 0 nil 0) (17 0 20 1 nil 0))) 6.16 nil "" (om-make-point 27 146) (om-make-point 1182 440)) (quote nil) (om-make-point 387 37) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulation notes 2" (om-load-patch-abs1 "modulation notes" (quote ((let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 264 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulation notes" (om-load-patch-abs1 "modulation notes" (quote ((let ((box (om-load-boxcomment "comment 3" (om-make-point 109 49) (quote "Primeira estrutura de afinaÁ„o") "" (om-make-point 40 337) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 138 50) (quote "Segunda estrutura de afinaÁ„o") "" (om-make-point 157 311) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 50) (quote "Dist‚ncia em cents para serem consideradas iguais.") "" (om-make-point 302 250) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 174 63) (quote "Nota de referÍncia") "" (om-make-point 501 13) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 255 43) (quote "Primeira diagonal Otonal do Diamante.") "" (om-make-point 485 133) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 153 98) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 202 78) (quote "Passando notas em quartos de tom com 7 cents de aproximaÁ„o.") "" (om-make-point 538 246) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 299 6) (om-make-point 102 28) (list 11 19 97 1997) "(11 19 97 1997)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 298 33) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 304 134) (quote "Notas que aparecem na estrutura de MOS e na estrutura da Tonalidade-Diamante. Observe que h· um filtro para instrumentos ac˙sticos.$$A primeira nota (6552) se refere ao MOS e a segunda (7746) ‡ Tonalidade-Diamante.") "" (om-make-point 331 388) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 14 62) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 110 467) (om-make-point 150 47) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 122 23) "((6552 7746.1953))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 304 303) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 444 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 327 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES" (quote modulation-notes) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 2))) (om-make-point 51 386) (om-make-point 272 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 450 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 518 198) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 489 198) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 461 232) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 107 177) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 74 177) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 44 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 452 17) (om-make-point 44 28) 6800 "6800" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 102 64) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 56 41) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 33 98) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 8 0 nil 0) (15 0 11 0 nil 0) (14 0 13 0 nil 0) (23 0 13 1 nil 0) (8 1 14 0 nil 0) (22 0 15 0 nil 0) (19 0 15 1 nil 0) (12 0 15 2 nil 0) (13 0 16 0 nil 0) (16 0 19 0 nil 0) (18 0 19 1 nil 0) (17 0 19 2 nil 0) (26 0 22 0 nil 0) (21 0 22 1 nil 0) (20 0 22 2 nil 0) (10 0 26 0 nil 0) (25 0 26 1 nil 0) (24 0 26 2 nil 0) (5 0 26 3 nil 0))) 6.16 nil "" (om-make-point 92 96) (om-make-point 1107 551)) (quote nil) (om-make-point 225 420) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 224 238) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 201) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 4))) (om-make-point 128 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 157 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 319 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 423 197) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 388 167) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 376 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 105 140) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 72 140) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 42 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 271 57) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 11))) (om-make-point 181 14) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 68 34) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 22 33) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 27 73) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (13 0 0 1 nil 0) (12 0 4 0 nil 0) (9 0 4 1 nil 0) (3 0 4 2 nil 0) (2 0 4 3 nil 0) (14 0 5 0 nil 0) (0 0 6 0 nil 0) (6 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (17 0 12 0 nil 0) (11 0 12 1 nil 0) (10 0 12 2 nil 0) (16 0 17 1 nil 0) (15 0 17 2 nil 0))) 6.16 nil "" (om-make-point 375 13) (om-make-point 729 629)) (quote nil) (om-make-point 177 266) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "filter-acoustic-instrument" (om-load-patch-abs1 "filter-acoustic-instrument" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 301 104) (quote "Para o 3∫ inlet.$$2: Para temperamento em semitons.$4: Para temperamentos em quartos de tom.$6: Para temperamentos em sextos de tom.$8: Para temperamentos em oitavos de tom.") "" (om-make-point 612 28) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 108 40) (quote "AproximaÁ„o em cents.") "" (om-make-point 437 158) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 108 40) (quote "Temperamento utilizado") "" (om-make-point 567 156) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 241 87) (quote "Das 6 notas da 5™ diagonal Otonal Limite-11 4 notas podem ser tocadas com digitaÁıes em quartos de tom.") "" (om-make-point 674 368) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 250 66) (quote "Este objeto seleciona as notas que podem ser usadas com digitaÁıes em quartos de tom com 10 cents de aproximaÁ„o.") "" (om-make-point 591 232) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 143 80) (quote "Seleciona o 5™ diagonal Otonal da Tonalidade Diamante limite-11") "" (om-make-point 251 197) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 441 362) (om-make-point 234 102) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6996) (6498) (6000) (6347))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 707 260) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 237 153) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 213 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" 3/2))) (om-make-point 206 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 253 342) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 216 373) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 296 22) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "Limit-n for the diamond." "LIMITE" 11))) (om-make-point 274 50) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 584 196) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 467 197) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "List of notes (THIS OBJECT DON'T READ LISTS OF LIST.)" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of a tempered note." "APPROX" 10) (om-load-inputfun (quote input-funbox) "Tempered scale used to compare the note list." "TEMPERAMENT" 2))) (om-make-point 416 227) (om-make-point 174 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 382 310) (om-make-point 261 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 233 16) "(6996.09 6498.045 6000.0 6347.4077)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 6 1 nil 0) (13 1 8 0 nil 0) (7 0 8 1 nil 0) (8 0 9 0 nil 0) (9 0 11 0 nil 0) (10 0 11 1 nil 0) (12 0 13 0 nil 0) (11 0 16 0 ((om-make-point 236 445) (om-make-point 349 425) (om-make-point 401 220) (om-make-point 460 222) (om-make-point 460 227)) 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0) (16 0 17 0 nil 0))) 6.16 nil "" (om-make-point 24 64) (om-make-point 1093 616)) (quote nil) (om-make-point 227 142) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "modulation notes" (om-load-patch-abs1 "modulation notes" (quote ((let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 66 423) (om-make-point 337 44) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 309 20) "((6000 6000) (6498 6498) (6996 6996) (7200 6000))" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 157 112) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 207 268) (om-make-point 32 40) 10 "10$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES" (quote modulation-notes) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 2))) (om-make-point 146 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 319 176) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 423 197) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 388 167) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 376 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 105 140) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 72 140) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproxima√ß√£o de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 42 170) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 271 57) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "RATIO->MC" (quote ratio->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 240 110) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 240 110)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 11))) (om-make-point 181 14) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 68 34) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 22 33) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS" (quote mos) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "RATIO" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11))) (om-make-point 27 73) (om-make-point 60 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (13 0 1 0 nil 0) (10 0 3 0 nil 0) (7 0 3 1 nil 0) (2 0 3 2 nil 0) (12 0 4 0 nil 0) (4 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (16 0 10 0 nil 0) (9 0 10 1 nil 0) (8 0 10 2 nil 0) (1 0 12 0 nil 0) (11 0 12 1 nil 0) (15 0 16 1 nil 0) (14 0 16 2 nil 0))) 6.16 nil "" (om-make-point 327 48) (om-make-point 529 610)) (quote nil) (om-make-point 55 40) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 9 2 nil 0) (11 1 10 0 nil 0) (10 0 14 0 nil 0) (13 0 14 1 nil 0) (12 0 14 2 nil 0) (15 0 17 0 nil 0) (16 0 17 1 nil 0))) nil 6.16))
