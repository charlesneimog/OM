; OM File Header - Saved 2020/09/15 1:52:23
; (6.17 :patc (om-make-point 280 10) (om-make-point 3 13) (om-make-point 825 642) "" 183 0 "2019/10/30 21:15:41" "2020/08/31 10:37:29")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../../in-files/Violino - Arco passando nas cordas.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "3.2.1 - densificação por bpf" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 588 23) (om-make-point 102 28) (list 11 19 97 1997) "(11 19 97 1997)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 546 53) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 628 233) (om-make-point 44 28) 8400 "8400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 3" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 588 263) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 535 212) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 495 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 487 130) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 427 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" 3/2))) (om-make-point 438 51) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 658 109) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 634 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Choose-chord" (om-load-patch-abs1 "Choose-chord" (quote ((let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 213 270) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 480 247) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 168 81) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "List or list of lists of anything." "NOTELIST" (list 1 2 3 4 5 6 7 8 9 10)) (om-load-inputfun (quote input-funbox) "What element(s) do you want?" "CHORD-N" (list 1 7 9)))) (om-make-point 100 204) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 289 275) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP 2" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 193 250) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 368 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (3 0 4 0 nil 0) (2 0 4 1 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (5 0 7 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 605 380)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 457/2 2233/4) nil (list (list 6000 6169 6605 6946 7200 7369 7805 8146 8400 8569 9005 9346)) nil "Choose-chord"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 121 29) (quote "Fundamental") "" (om-make-point 572 460) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 61 30) (quote "string$") "" (om-make-point 745 496) nil (om-make-color 0 0 0) (om-make-font "Verdana" 27/2 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 523 423) (om-make-point 33 28) (quote c5) "C5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "N->MC" (quote n->mc) (quote ((om-load-inputfun (quote input-funbox) "note name or list of note names" "SYMB" (list "C3")) (om-load-inputfunmenu1 (quote input-funmenu) "octave of middle C" "MIDDLE-C" 4 (list (list "middle-C = 3" 3) (list "middle-C = 4" 4))))) (om-make-point 533 454) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 601 500) (om-make-point 146 28) (quote violino) "violino - passando o arco" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Violino - Arco passando nas cordas.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 395 452) (om-make-point 114 75) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Violino - Arco passando nas cordas" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 1061 480) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "TRANSPOSIÇÃO PARA MAX/MSP-COLL" (om-load-patch-abs1 "TRANSPOSIÇÃO PARA MAX/MSP-COLL" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "tempo e sinoides + conversao" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "tempo" nil) (om-load-inputfun (quote input-funbox) "" "Tempo sem repetições" nil) (om-load-inputfun (quote input-funbox) "" "amplitude" (append (list 5.1E-7 7.5E-7 9.0E-7 9.7E-7 9.8E-7 9.8E-7 8.2E-7 8.2E-7 8.5E-7 8.2E-7 7.4E-7 8.9E-7 1.11E-6 1.36E-6 1.6E-6 1.81E-6 1.81E-6 1.65E-6 1.47E-6 1.32E-6 1.12E-6 8.9E-7 7.1E-7 6.2E-7 6.1E-7 6.3E-7 6.0E-7 5.8E-7 6.7E-7 8.2E-7 8.4E-7 1.6E-7 3.6E-7 6.5E-7 1.04E-6 1.43E-6 1.56E-6 1.1E-6 9.2E-7 9.3E-7 1.23E-6 1.67E-6 1.86E-6 2.04E-6 2.23E-6 2.35E-6 2.39E-6 2.39E-6 2.45E-6 2.49E-6 2.49E-6 2.43E-6 2.36E-6 2.33E-6 2.32E-6 2.29E-6 2.2E-6 2.07E-6 1.97E-6 1.92E-6 1.92E-6 1.97E-6 2.02E-6 2.14E-6 2.29E-6 2.46E-6 2.62E-6 2.73E-6 2.78E-6 2.79E-6 2.8E-6 2.8E-6 2.78E-6 2.68E-6 2.61E-6 2.59E-6 2.62E-6 2.67E-6 2.63E-6 2.63E-6 2.69E-6 2.79E-6 2.89E-6 2.89E-6 2.81E-6 2.72E-6 2.62E-6 2.52E-6 2.49E-6 2.51E-6 2.54E-6 2.55E-6 2.47E-6 2.26E-6 1.98E-6 1.65E-6 1.34E-6 1.11E-6 9.6E-7 9.1E-7 9.2E-7 9.6E-7 1.01E-6 1.06E-6 1.17E-6 1.3E-6 1.45E-6 1.61E-6 1.76E-6 1.84E-6 1.87E-6 1.84E-6 1.79E-6 1.78E-6 1.84E-6 1.96E-6 2.15E-6 2.32E-6 2.44E-6 2.5E-6 2.51E-6 2.48E-6 2.43E-6 2.37E-6 2.34E-6 2.32E-6 2.31E-6 2.33E-6 2.37E-6 2.45E-6 2.53E-6 2.61E-6 2.68E-6 2.72E-6 2.75E-6 2.75E-6 2.74E-6 2.75E-6 2.78E-6 2.76E-6 2.71E-6 2.64E-6 2.55E-6 2.5E-6 2.5E-6 2.54E-6 2.63E-6 2.71E-6 2.8E-6 2.86E-6 2.91E-6 2.94E-6 2.95E-6 2.95E-6 2.93E-6 2.91E-6 2.88E-6 2.85E-6 2.83E-6 2.84E-6 2.88E-6 2.93E-6 2.99E-6 2.99E-6 2.92E-6 2.8E-6 2.65E-6 2.52E-6 2.39E-6 2.29E-6 2.22E-6 2.19E-6 2.19E-6 2.18E-6 2.16E-6 2.14E-6 2.12E-6 2.13E-6 2.17E-6 2.23E-6 2.3E-6 2.37E-6 2.4E-6 2.42E-6 2.42E-6 2.39E-6 2.34E-6 2.28E-6 2.25E-6 2.18E-6 2.08E-6 1.97E-6 1.88E-6 1.87E-6 1.94E-6 2.03E-6 2.15E-6 2.26E-6 2.34E-6 2.41E-6 2.44E-6 2.46E-6 2.49E-6 2.53E-6 2.58E-6 2.6E-6 2.57E-6 2.51E-6 2.45E-6 2.41E-6 2.38E-6 2.36E-6 2.35E-6 2.4E-6 2.45E-6 2.54E-6 2.63E-6 2.71E-6 2.73E-6 2.68E-6 2.59E-6 2.49E-6 2.41E-6 2.33E-6 2.3E-6 2.28E-6 2.25E-6 2.21E-6 2.12E-6 2.0E-6 1.81E-6 1.55E-6 1.24E-6 9.8E-7 7.7E-7 6.2E-7 5.1E-7 4.3E-7 3.5E-7 2.9E-7 2.5E-7 2.4E-7 2.5E-7 2.7E-7 2.9E-7 3.1E-7 3.2E-7 3.3E-7 3.3E-7 3.2E-7 2.8E-7 2.3E-7 1.7E-7 1.3E-7 1.1E-7 1.0E-7 1.0E-7 9.0E-8 9.0E-8 8.0E-8 8.0E-8 7.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 5.9E-7 1.15E-6 1.86E-6 2.69E-6 3.6E-6 4.58E-6 5.31E-6 5.72E-6 5.98E-6 6.17E-6 6.29E-6 6.2E-6 6.06E-6 5.9E-6 5.86E-6 6.11E-6 6.75E-6 7.38E-6 7.91E-6 8.25E-6 8.35E-6 8.07E-6 7.26E-6 5.96E-6 4.66E-6 4.23E-6 4.69E-6 5.48E-6 6.25E-6 6.77E-6 6.85E-6 6.81E-6 6.92E-6 7.17E-6 7.5E-6 7.76E-6 7.87E-6 7.93E-6 7.97E-6 8.01E-6 8.06E-6 8.16E-6 8.34E-6 8.6E-6 8.96E-6 9.41E-6 9.82E-6 1.009E-5 1.015E-5 1.001E-5 9.75E-6 9.49E-6 9.24E-6 9.02E-6 8.84E-6 8.74E-6 8.74E-6 8.71E-6 8.6E-6 8.45E-6 8.32E-6 8.32E-6 8.42E-6 8.56E-6 8.7E-6 8.79E-6 8.84E-6 8.98E-6 9.13E-6 9.19E-6 9.02E-6 8.44E-6 7.64E-6 6.73E-6 5.83E-6 5.01E-6 4.43E-6 4.12E-6 4.07E-6 4.25E-6 4.6E-6 5.02E-6 5.37E-6 5.63E-6 5.83E-6 6.02E-6 6.24E-6 6.45E-6 6.59E-6 6.66E-6 6.68E-6 6.69E-6 6.69E-6 6.69E-6 6.68E-6 6.69E-6 6.69E-6 6.67E-6 6.62E-6 6.52E-6 6.39E-6 6.21E-6 6.01E-6 5.77E-6 5.49E-6 5.17E-6 4.85E-6 4.64E-6 4.54E-6 4.53E-6 4.56E-6 4.59E-6 4.63E-6 4.69E-6 4.81E-6 4.98E-6 5.22E-6 5.47E-6 5.66E-6 5.8E-6 5.89E-6 5.92E-6 5.9E-6 5.83E-6 5.72E-6 5.6E-6 5.5E-6 5.45E-6 5.45E-6 5.45E-6 5.39E-6 5.18E-6 4.89E-6 4.58E-6 4.3E-6 4.08E-6 4.02E-6 4.12E-6 4.35E-6 4.64E-6 4.98E-6 5.34E-6 5.67E-6 5.93E-6 6.06E-6 5.99E-6 5.58E-6 4.99E-6 4.4E-6 3.91E-6 3.63E-6 3.67E-6 3.87E-6 4.06E-6 4.18E-6 4.21E-6 4.18E-6 4.19E-6 4.3E-6 4.51E-6 4.74E-6 4.87E-6 4.84E-6 4.69E-6 4.47E-6 4.23E-6 4.0E-6 3.8E-6 3.61E-6 3.43E-6 3.27E-6 3.2E-6 3.23E-6 3.34E-6 3.53E-6 3.77E-6 4.01E-6 4.17E-6 4.23E-6 4.19E-6 4.05E-6 3.79E-6 3.52E-6 3.31E-6 3.2E-6 3.25E-6 3.49E-6 3.75E-6 3.9E-6 3.85E-6 3.54E-6 3.06E-6 2.66E-6 2.42E-6 2.36E-6 2.46E-6 2.57E-6 2.48E-6 2.28E-6 2.05E-6 1.84E-6 1.59E-6 1.46E-6 1.31E-6 1.12E-6 8.9E-7 7.8E-7 7.5E-7 7.9E-7 8.5E-7 8.8E-7 8.3E-7 7.0E-7 5.8E-7 4.7E-7 4.2E-7 4.0E-7 3.9E-7 3.5E-7 2.8E-7 1.8E-7 1.0E-7 6.0E-8 6.0E-8 7.0E-8 9.0E-8 1.0E-7 1.0E-7 1.0E-7 9.0E-8 9.0E-8 8.0E-8 8.0E-8 7.0E-8 6.0E-8 5.0E-8 5.0E-8 4.0E-8 3.0E-8 3.0E-8 1.06E-6 1.68E-6 1.88E-6 2.46E-6 3.59E-6 4.72E-6 5.04E-6 4.9E-6 4.62E-6 4.27E-6 3.66E-6 3.06E-6 2.87E-6 2.99E-6 3.24E-6 3.37E-6 2.92E-6 2.46E-6 2.32E-6 2.55E-6 2.95E-6 3.04E-6 2.99E-6 2.93E-6 2.91E-6 2.87E-6 2.96E-6 3.06E-6 3.14E-6 3.2E-6 3.26E-6 3.3E-6 3.28E-6 3.21E-6 3.12E-6 3.03E-6 2.94E-6 2.9E-6 2.87E-6 2.85E-6 2.89E-6 3.06E-6 3.3E-6 3.52E-6 3.66E-6 3.69E-6 3.59E-6 3.51E-6 3.46E-6 3.46E-6 3.54E-6 3.56E-6 3.53E-6 3.45E-6 3.32E-6 3.17E-6 3.02E-6 2.94E-6 2.87E-6 2.78E-6 2.64E-6 2.38E-6 2.05E-6 1.66E-6 1.26E-6 9.3E-7 7.7E-7 6.6E-7 6.6E-7 8.2E-7 1.14E-6 1.55E-6 1.94E-6 2.23E-6 2.37E-6 2.34E-6 2.17E-6 1.9E-6 1.65E-6 1.5E-6 1.48E-6 1.58E-6 1.78E-6 2.04E-6 2.3E-6 2.53E-6 2.59E-6 2.57E-6 2.54E-6 2.51E-6 2.48E-6 2.34E-6 2.14E-6 1.91E-6 1.67E-6 1.47E-6 1.44E-6 1.51E-6 1.63E-6 1.77E-6 1.85E-6 1.79E-6 1.6E-6 1.37E-6 1.15E-6 9.8E-7 9.8E-7 1.02E-6 1.06E-6 1.07E-6 1.1E-6 1.23E-6 1.43E-6 1.66E-6 1.87E-6 2.03E-6 2.13E-6 2.25E-6 2.35E-6 2.38E-6 2.34E-6 2.19E-6 2.08E-6 2.03E-6 2.07E-6 2.16E-6 2.33E-6 2.48E-6 2.57E-6 2.61E-6 2.59E-6 2.46E-6 2.28E-6 2.09E-6 1.94E-6 1.89E-6 1.93E-6 1.98E-6 2.03E-6 2.08E-6 2.12E-6 2.14E-6 2.09E-6 1.99E-6 1.87E-6 1.74E-6 1.62E-6 1.58E-6 1.66E-6 1.79E-6 1.92E-6 2.11E-6 2.3E-6 2.43E-6 2.44E-6 2.28E-6 2.02E-6 1.78E-6 1.55E-6 1.34E-6 1.18E-6 1.06E-6 1.04E-6 1.11E-6 1.22E-6 1.35E-6 1.36E-6 1.33E-6 1.3E-6 1.32E-6 1.41E-6 1.58E-6 1.79E-6 2.0E-6 2.12E-6 2.1E-6 1.98E-6 1.79E-6 1.6E-6 1.45E-6 1.36E-6 1.41E-6 1.51E-6 1.6E-6 1.67E-6 1.73E-6 1.69E-6 1.62E-6 1.5E-6 1.4E-6 1.38E-6 1.51E-6 1.75E-6 2.01E-6 2.21E-6 2.29E-6 2.35E-6 2.43E-6 2.49E-6 2.46E-6 2.26E-6 1.85E-6 1.43E-6 1.06E-6 7.9E-7 6.3E-7 5.5E-7 4.2E-7 3.1E-7 2.2E-7 1.9E-7 1.6E-7 1.3E-7 1.4E-7 1.7E-7 1.8E-7 2.0E-7 2.1E-7 2.2E-7 2.3E-7 2.2E-7 1.9E-7 1.6E-7 1.2E-7 1.0E-7 8.0E-8 6.0E-8 5.0E-8 2.0E-8 9.7E-7 1.46E-6 1.98E-6 2.52E-6 2.95E-6 3.03E-6 2.76E-6 2.48E-6 2.35E-6 2.41E-6 2.59E-6 2.83E-6 2.83E-6 2.62E-6 2.69E-6 3.91E-6 3.43E-6 3.01E-6 2.68E-6 2.37E-6 1.92E-6 1.76E-6 2.31E-6 3.29E-6 4.5E-6 5.83E-6 6.95E-6 7.67E-6 7.94E-6 7.75E-6 7.18E-6 6.42E-6 5.77E-6 5.31E-6 5.14E-6 5.31E-6 5.79E-6 6.25E-6 6.55E-6 6.64E-6 6.52E-6 6.34E-6 6.31E-6 6.38E-6 6.54E-6 6.72E-6 6.89E-6 7.06E-6 7.19E-6 7.22E-6 7.12E-6 6.97E-6 6.84E-6 6.72E-6 6.62E-6 6.51E-6 6.37E-6 6.23E-6 6.09E-6 6.0E-6 5.97E-6 6.03E-6 6.1E-6 6.12E-6 6.07E-6 5.92E-6 5.71E-6 5.54E-6 5.46E-6 5.49E-6 5.63E-6 5.8E-6 5.91E-6 6.0E-6 6.11E-6 6.29E-6 6.56E-6 6.87E-6 7.18E-6 7.44E-6 7.64E-6 7.75E-6 7.84E-6 7.92E-6 7.97E-6 8.01E-6 8.04E-6 8.05E-6 8.06E-6 8.06E-6 8.08E-6 8.13E-6 8.18E-6 8.23E-6 8.28E-6 8.34E-6 8.4E-6 8.49E-6 8.57E-6 8.63E-6 8.67E-6 8.67E-6 8.69E-6 8.75E-6 8.91E-6 9.15E-6 9.45E-6 9.75E-6 1.003E-5 1.03E-5 1.053E-5 1.069E-5 1.075E-5 1.07E-5 1.059E-5 1.043E-5 1.025E-5 1.007E-5 9.91E-6 9.76E-6 9.66E-6 9.61E-6 9.55E-6 9.51E-6 9.5E-6 9.55E-6 9.69E-6 9.87E-6 1.003E-5 1.012E-5 1.008E-5 9.84E-6 9.59E-6 9.4E-6 9.28E-6 9.22E-6 9.16E-6 9.12E-6 9.11E-6 9.1E-6 9.07E-6 8.99E-6 8.89E-6 8.78E-6 8.66E-6 8.58E-6 8.59E-6 8.63E-6 8.67E-6 8.7E-6 8.74E-6 8.84E-6 8.95E-6 9.07E-6 9.2E-6 9.35E-6 9.43E-6 9.35E-6 9.16E-6 8.9E-6 8.63E-6 8.41E-6 8.29E-6 8.25E-6 8.26E-6 8.27E-6 8.28E-6 8.34E-6 8.44E-6 8.56E-6 8.69E-6 8.79E-6 8.85E-6 8.82E-6 8.72E-6 8.6E-6 8.48E-6 8.4E-6 8.4E-6 8.48E-6 8.67E-6 8.96E-6 9.26E-6 9.54E-6 9.75E-6 9.86E-6 9.83E-6 9.77E-6 9.71E-6 9.7E-6 9.78E-6 9.97E-6 1.02E-5 1.034E-5 1.036E-5 1.025E-5 1.003E-5 9.71E-6 9.2E-6 8.44E-6 7.36E-6 6.06E-6 4.86E-6 3.89E-6 3.19E-6 2.75E-6 2.54E-6 2.37E-6 2.21E-6 2.04E-6 1.87E-6 1.74E-6 1.62E-6 1.5E-6 1.39E-6 1.27E-6 1.16E-6 1.06E-6 9.5E-7 8.5E-7 7.3E-7 6.1E-7 5.0E-7 4.0E-7 3.2E-7 2.7E-7 2.3E-7 2.2E-7 2.1E-7 1.9E-7 1.8E-7 1.6E-7 1.3E-7 1.1E-7 1.0E-7 8.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 9.13E-6 1.617E-5 2.469E-5 3.224E-5 3.727E-5 3.918E-5 3.896E-5 3.798E-5 3.721E-5 3.758E-5 4.001E-5 4.305E-5 4.417E-5 4.299E-5 3.989E-5 3.599E-5 3.399E-5 3.441E-5 3.638E-5 3.915E-5 4.198E-5 4.389E-5 4.439E-5 4.349E-5 4.144E-5 3.881E-5 3.685E-5 3.626E-5 3.723E-5 3.962E-5 4.293E-5 4.577E-5 4.741E-5 4.793E-5 4.752E-5 4.646E-5 4.518E-5 4.394E-5 4.289E-5 4.206E-5 4.138E-5 4.064E-5 3.976E-5 3.888E-5 3.809E-5 3.744E-5 3.711E-5 3.723E-5 3.758E-5 3.787E-5 3.774E-5 3.676E-5 3.519E-5 3.323E-5 3.107E-5 2.892E-5 2.725E-5 2.59E-5 2.478E-5 2.382E-5 2.296E-5 2.244E-5 2.221E-5 2.237E-5 2.289E-5 2.364E-5 2.442E-5 2.502E-5 2.542E-5 2.559E-5 2.554E-5 2.521E-5 2.488E-5 2.445E-5 2.403E-5 2.38E-5 2.39E-5 2.441E-5 2.517E-5 2.6E-5 2.671E-5 2.708E-5 2.706E-5 2.687E-5 2.669E-5 2.668E-5 2.741E-5 2.86E-5 3.005E-5 3.154E-5 3.288E-5 3.37E-5 3.405E-5 3.412E-5 3.414E-5 3.436E-5 3.497E-5 3.592E-5 3.709E-5 3.842E-5 3.989E-5 4.136E-5 4.278E-5 4.403E-5 4.498E-5 4.553E-5 4.528E-5 4.455E-5 4.362E-5 4.27E-5 4.196E-5 4.162E-5 4.157E-5 4.171E-5 4.194E-5 4.218E-5 4.247E-5 4.259E-5 4.255E-5 4.228E-5 4.17E-5 4.089E-5 3.992E-5 3.91E-5 3.859E-5 3.852E-5 3.911E-5 4.03E-5 4.194E-5 4.379E-5 4.555E-5 4.655E-5 4.673E-5 4.626E-5 4.534E-5 4.421E-5 4.314E-5 4.264E-5 4.273E-5 4.34E-5 4.459E-5 4.598E-5 4.743E-5 4.877E-5 4.982E-5 5.042E-5 5.014E-5 4.931E-5 4.818E-5 4.702E-5 4.61E-5 4.572E-5 4.584E-5 4.644E-5 4.746E-5 4.879E-5 5.004E-5 5.061E-5 5.062E-5 5.016E-5 4.935E-5 4.839E-5 4.744E-5 4.675E-5 4.644E-5 4.659E-5 4.735E-5 4.816E-5 4.864E-5 4.867E-5 4.828E-5 4.774E-5 4.758E-5 4.768E-5 4.796E-5 4.834E-5 4.84E-5 4.824E-5 4.796E-5 4.76E-5 4.719E-5 4.672E-5 4.639E-5 4.65E-5 4.704E-5 4.785E-5 4.868E-5 4.894E-5 4.866E-5 4.787E-5 4.668E-5 4.528E-5 4.401E-5 4.281E-5 4.17E-5 4.078E-5 4.011E-5 3.969E-5 3.894E-5 3.737E-5 3.45E-5 2.982E-5 2.446E-5 1.986E-5 1.653E-5 1.455E-5 1.321E-5 1.161E-5 9.81E-6 7.96E-6 6.23E-6 4.78E-6 3.59E-6 2.64E-6 2.04E-6 1.9E-6 2.26E-6 2.73E-6 3.11E-6 3.29E-6 3.21E-6 2.9E-6 2.49E-6 2.07E-6 1.68E-6 1.36E-6 1.13E-6 9.9E-7 8.8E-7 7.7E-7 6.6E-7 5.3E-7 4.0E-7 3.0E-7 2.3E-7 1.8E-7 1.5E-7 1.3E-7 1.2E-7 1.0E-7 8.0E-8 6.0E-8 4.0E-8 1.42E-5 2.554E-5 3.787E-5 4.869E-5 5.648E-5 6.058E-5 6.188E-5 6.235E-5 6.166E-5 5.976E-5 5.684E-5 5.45E-5 5.384E-5 5.504E-5 5.787E-5 6.173E-5 6.58E-5 6.904E-5 7.119E-5 7.209E-5 7.174E-5 6.968E-5 6.631E-5 6.184E-5 5.668E-5 5.14E-5 4.702E-5 4.363E-5 4.125E-5 3.985E-5 3.933E-5 3.948E-5 3.973E-5 3.973E-5 3.926E-5 3.822E-5 3.691E-5 3.57E-5 3.486E-5 3.459E-5 3.497E-5 3.585E-5 3.685E-5 3.799E-5 3.933E-5 4.095E-5 4.286E-5 4.484E-5 4.658E-5 4.792E-5 4.885E-5 4.938E-5 4.98E-5 5.007E-5 5.018E-5 5.014E-5 4.969E-5 4.867E-5 4.739E-5 4.625E-5 4.578E-5 4.683E-5 4.86E-5 5.055E-5 5.22E-5 5.308E-5 5.285E-5 5.219E-5 5.139E-5 5.071E-5 5.049E-5 5.139E-5 5.325E-5 5.562E-5 5.813E-5 6.036E-5 6.157E-5 6.171E-5 6.107E-5 5.994E-5 5.86E-5 5.751E-5 5.658E-5 5.593E-5 5.556E-5 5.545E-5 5.56E-5 5.575E-5 5.574E-5 5.553E-5 5.515E-5 5.474E-5 5.454E-5 5.449E-5 5.454E-5 5.463E-5 5.461E-5 5.452E-5 5.436E-5 5.406E-5 5.36E-5 5.287E-5 5.217E-5 5.172E-5 5.163E-5 5.193E-5 5.23E-5 5.253E-5 5.258E-5 5.248E-5 5.226E-5 5.187E-5 5.141E-5 5.101E-5 5.079E-5 5.084E-5 5.117E-5 5.138E-5 5.134E-5 5.104E-5 5.062E-5 5.054E-5 5.082E-5 5.141E-5 5.214E-5 5.282E-5 5.319E-5 5.321E-5 5.3E-5 5.26E-5 5.205E-5 5.142E-5 5.109E-5 5.119E-5 5.166E-5 5.236E-5 5.29E-5 5.319E-5 5.328E-5 5.319E-5 5.292E-5 5.224E-5 5.129E-5 5.025E-5 4.935E-5 4.888E-5 4.93E-5 5.043E-5 5.186E-5 5.328E-5 5.44E-5 5.495E-5 5.5E-5 5.477E-5 5.445E-5 5.421E-5 5.419E-5 5.41E-5 5.4E-5 5.39E-5 5.379E-5 5.384E-5 5.407E-5 5.437E-5 5.463E-5 5.473E-5 5.465E-5 5.45E-5 5.445E-5 5.461E-5 5.504E-5 5.564E-5 5.61E-5 5.63E-5 5.621E-5 5.587E-5 5.509E-5 5.419E-5 5.329E-5 5.253E-5 5.205E-5 5.19E-5 5.216E-5 5.274E-5 5.351E-5 5.426E-5 5.472E-5 5.47E-5 5.441E-5 5.395E-5 5.341E-5 5.306E-5 5.286E-5 5.266E-5 5.226E-5 5.142E-5 4.937E-5 4.577E-5 4.056E-5 3.39E-5 2.619E-5 1.846E-5 1.235E-5 8.11E-6 5.67E-6 4.71E-6 4.57E-6 4.64E-6 4.84E-6 5.01E-6 5.01E-6 4.64E-6 3.99E-6 3.21E-6 2.45E-6 1.84E-6 1.52E-6 1.43E-6 1.48E-6 1.58E-6 1.63E-6 1.59E-6 1.48E-6 1.34E-6 1.19E-6 1.05E-6 9.4E-7 8.4E-7 7.4E-7 6.2E-7 5.0E-7 4.0E-7 3.1E-7 2.4E-7 1.7E-7 1.2E-7 7.0E-8 5.0E-8 4.0E-8 3.0E-8 4.0E-8 3.0E-8 2.0E-8 2.349E-5 3.96E-5 5.39E-5 6.405E-5 6.929E-5 7.036E-5 6.91E-5 6.735E-5 6.556E-5 6.406E-5 6.303E-5 6.16E-5 5.999E-5 5.915E-5 5.958E-5 6.135E-5 6.315E-5 6.338E-5 6.157E-5 5.775E-5 5.245E-5 4.721E-5 4.341E-5 4.131E-5 4.091E-5 4.193E-5 4.356E-5 4.463E-5 4.488E-5 4.428E-5 4.31E-5 4.238E-5 4.274E-5 4.406E-5 4.599E-5 4.798E-5 4.901E-5 4.904E-5 4.84E-5 4.746E-5 4.663E-5 4.609E-5 4.57E-5 4.539E-5 4.509E-5 4.483E-5 4.458E-5 4.434E-5 4.424E-5 4.435E-5 4.473E-5 4.567E-5 4.695E-5 4.852E-5 5.025E-5 5.196E-5 5.325E-5 5.408E-5 5.452E-5 5.471E-5 5.486E-5 5.519E-5 5.586E-5 5.678E-5 5.783E-5 5.886E-5 5.955E-5 5.98E-5 5.968E-5 5.923E-5 5.854E-5 5.782E-5 5.717E-5 5.668E-5 5.639E-5 5.631E-5 5.664E-5 5.739E-5 5.834E-5 5.927E-5 5.998E-5 6.0E-5 5.974E-5 5.955E-5 5.969E-5 6.042E-5 6.192E-5 6.359E-5 6.505E-5 6.601E-5 6.623E-5 6.575E-5 6.529E-5 6.519E-5 6.567E-5 6.682E-5 6.864E-5 7.076E-5 7.292E-5 7.493E-5 7.666E-5 7.801E-5 7.908E-5 7.998E-5 8.072E-5 8.13E-5 8.182E-5 8.225E-5 8.271E-5 8.323E-5 8.38E-5 8.444E-5 8.509E-5 8.576E-5 8.646E-5 8.717E-5 8.755E-5 8.75E-5 8.697E-5 8.604E-5 8.488E-5 8.375E-5 8.317E-5 8.323E-5 8.392E-5 8.52E-5 8.676E-5 8.821E-5 8.938E-5 9.013E-5 9.039E-5 9.016E-5 8.956E-5 8.883E-5 8.814E-5 8.767E-5 8.787E-5 8.857E-5 8.963E-5 9.092E-5 9.23E-5 9.349E-5 9.421E-5 9.447E-5 9.428E-5 9.369E-5 9.265E-5 9.138E-5 9.026E-5 8.959E-5 8.955E-5 9.031E-5 9.144E-5 9.265E-5 9.367E-5 9.425E-5 9.413E-5 9.361E-5 9.29E-5 9.219E-5 9.17E-5 9.162E-5 9.196E-5 9.255E-5 9.335E-5 9.438E-5 9.557E-5 9.669E-5 9.752E-5 9.794E-5 9.785E-5 9.727E-5 9.651E-5 9.576E-5 9.507E-5 9.447E-5 9.42E-5 9.418E-5 9.438E-5 9.477E-5 9.528E-5 9.593E-5 9.66E-5 9.708E-5 9.725E-5 9.704E-5 9.626E-5 9.521E-5 9.407E-5 9.297E-5 9.205E-5 9.14E-5 9.092E-5 9.059E-5 9.041E-5 9.038E-5 9.07E-5 9.097E-5 9.007E-5 8.668E-5 7.954E-5 6.739E-5 5.399E-5 4.244E-5 3.394E-5 2.881E-5 2.614E-5 2.406E-5 2.196E-5 1.966E-5 1.716E-5 1.464E-5 1.228E-5 1.011E-5 8.19E-6 6.56E-6 5.43E-6 4.64E-6 4.08E-6 3.75E-6 3.62E-6 3.55E-6 3.44E-6 3.27E-6 3.04E-6 2.76E-6 2.5E-6 2.29E-6 2.13E-6 2.03E-6 1.96E-6 1.9E-6 1.79E-6 1.61E-6 1.38E-6 1.12E-6 8.8E-7 7.0E-7 5.5E-7 4.3E-7 3.3E-7 2.4E-7 1.6E-7 1.027E-5 2.291E-5 3.798E-5 5.374E-5 6.831E-5 7.969E-5 8.657E-5 9.128E-5 9.411E-5 9.525E-5 9.472E-5 9.185E-5 8.746E-5 8.196E-5 7.563E-5 6.869E-5 6.216E-5 5.726E-5 5.449E-5 5.407E-5 5.596E-5 6.026E-5 6.523E-5 7.035E-5 7.541E-5 8.048E-5 8.571E-5 9.071E-5 9.509E-5 9.852E-5 1.0068E-4 1.0062E-4 9.929E-5 9.741E-5 9.569E-5 9.485E-5 9.563E-5 9.72E-5 9.89E-5 1.0032E-4 1.0124E-4 1.0208E-4 1.0344E-4 1.0538E-4 1.0777E-4 1.1025E-4 1.1199E-4 1.1266E-4 1.1255E-4 1.1197E-4 1.1131E-4 1.1086E-4 1.1028E-4 1.0927E-4 1.0773E-4 1.057E-4 1.0335E-4 1.0126E-4 9.966E-5 9.878E-5 9.882E-5 9.974E-5 1.0081E-4 1.0169E-4 1.0217E-4 1.0215E-4 1.0169E-4 1.0119E-4 1.0107E-4 1.0162E-4 1.0303E-4 1.0564E-4 1.086E-4 1.115E-4 1.1406E-4 1.1613E-4 1.176E-4 1.1891E-4 1.2013E-4 1.2131E-4 1.2248E-4 1.2337E-4 1.2404E-4 1.2442E-4 1.2445E-4 1.241E-4 1.2326E-4 1.2215E-4 1.2117E-4 1.2054E-4 1.2043E-4 1.2101E-4 1.2167E-4 1.2221E-4 1.2244E-4 1.2224E-4 1.2151E-4 1.2056E-4 1.1964E-4 1.1898E-4 1.1879E-4 1.1939E-4 1.2065E-4 1.2237E-4 1.2431E-4 1.2617E-4 1.2735E-4 1.2783E-4 1.2778E-4 1.2743E-4 1.2702E-4 1.2684E-4 1.2687E-4 1.2689E-4 1.2675E-4 1.2632E-4 1.2547E-4 1.2473E-4 1.2435E-4 1.2443E-4 1.2498E-4 1.256E-4 1.2576E-4 1.2538E-4 1.2446E-4 1.2312E-4 1.2172E-4 1.2062E-4 1.2003E-4 1.2E-4 1.205E-4 1.2153E-4 1.2268E-4 1.2374E-4 1.2448E-4 1.2464E-4 1.2429E-4 1.2384E-4 1.2346E-4 1.2315E-4 1.2283E-4 1.2247E-4 1.2238E-4 1.2275E-4 1.2368E-4 1.2517E-4 1.2694E-4 1.2839E-4 1.2918E-4 1.2913E-4 1.2826E-4 1.2684E-4 1.2585E-4 1.2565E-4 1.263E-4 1.2762E-4 1.288E-4 1.2919E-4 1.2897E-4 1.2833E-4 1.2754E-4 1.2687E-4 1.2647E-4 1.2628E-4 1.2625E-4 1.2631E-4 1.264E-4 1.2649E-4 1.2662E-4 1.2686E-4 1.2725E-4 1.2798E-4 1.2885E-4 1.2965E-4 1.3016E-4 1.3022E-4 1.2978E-4 1.2916E-4 1.2855E-4 1.2809E-4 1.2787E-4 1.2792E-4 1.2822E-4 1.2869E-4 1.2938E-4 1.3036E-4 1.3157E-4 1.3271E-4 1.3351E-4 1.3378E-4 1.3344E-4 1.3244E-4 1.3099E-4 1.2934E-4 1.2753E-4 1.255E-4 1.2281E-4 1.1858E-4 1.1224E-4 1.0342E-4 9.2E-5 7.825E-5 6.457E-5 5.224E-5 4.181E-5 3.339E-5 2.67E-5 2.095E-5 1.604E-5 1.212E-5 9.35E-6 7.73E-6 6.69E-6 5.85E-6 5.01E-6 4.09E-6 3.35E-6 2.96E-6 2.79E-6 2.72E-6 2.65E-6 2.43E-6 2.09E-6 1.7E-6 1.33E-6 1.01E-6 7.9E-7 6.7E-7 5.9E-7 5.3E-7 5.0E-7 4.8E-7 4.5E-7 4.2E-7 3.8E-7 3.3E-7 2.7E-7 2.2E-7 1.7E-7 1.4E-7 1.1E-7 8.0E-8 5.0E-8 3.309E-5 5.601E-5 7.532E-5 8.826E-5 9.445E-5 9.593E-5 9.659E-5 9.773E-5 9.947E-5 1.021E-4 1.0598E-4 1.1082E-4 1.1493E-4 1.1784E-4 1.1943E-4 1.1992E-4 1.1969E-4 1.1931E-4 1.1888E-4 1.184E-4 1.1781E-4 1.1698E-4 1.1614E-4 1.1545E-4 1.1497E-4 1.1468E-4 1.1444E-4 1.1408E-4 1.1352E-4 1.1279E-4 1.1203E-4 1.1179E-4 1.122E-4 1.1307E-4 1.1413E-4 1.1503E-4 1.1543E-4 1.1543E-4 1.1514E-4 1.146E-4 1.1388E-4 1.131E-4 1.1237E-4 1.1177E-4 1.1137E-4 1.112E-4 1.1129E-4 1.1159E-4 1.1208E-4 1.1272E-4 1.1347E-4 1.1403E-4 1.1429E-4 1.1425E-4 1.1397E-4 1.1357E-4 1.1329E-4 1.1323E-4 1.1336E-4 1.1361E-4 1.1383E-4 1.1388E-4 1.1379E-4 1.137E-4 1.1367E-4 1.1374E-4 1.1385E-4 1.1376E-4 1.1337E-4 1.1268E-4 1.1182E-4 1.1118E-4 1.1091E-4 1.1092E-4 1.1111E-4 1.114E-4 1.1176E-4 1.1225E-4 1.1282E-4 1.1338E-4 1.1379E-4 1.1378E-4 1.1354E-4 1.1331E-4 1.1329E-4 1.1362E-4 1.1446E-4 1.1538E-4 1.1608E-4 1.1636E-4 1.1608E-4 1.1533E-4 1.1466E-4 1.1432E-4 1.1444E-4 1.1504E-4) (list 1.1607E-4 1.1722E-4 1.1829E-4 1.1914E-4 1.197E-4 1.1991E-4 1.2E-4 1.2006E-4 1.2009E-4 1.2012E-4 1.201E-4 1.2015E-4 1.2032E-4 1.2063E-4 1.2107E-4 1.2165E-4 1.2231E-4 1.2305E-4 1.2384E-4 1.2464E-4 1.2528E-4 1.2546E-4 1.2519E-4 1.2458E-4 1.2381E-4 1.2337E-4 1.2341E-4 1.2386E-4 1.2459E-4 1.2546E-4 1.263E-4 1.2694E-4 1.2736E-4 1.2758E-4 1.2766E-4 1.2775E-4 1.2798E-4 1.2831E-4 1.2872E-4 1.2918E-4 1.2971E-4 1.3033E-4 1.3096E-4 1.3158E-4 1.3214E-4 1.3245E-4 1.3244E-4 1.3204E-4 1.3128E-4 1.3025E-4 1.2908E-4 1.2801E-4 1.2717E-4 1.2672E-4 1.2679E-4 1.2755E-4 1.2853E-4 1.2939E-4 1.2993E-4 1.3004E-4 1.2982E-4 1.2953E-4 1.2929E-4 1.2913E-4 1.2905E-4 1.291E-4 1.2928E-4 1.2957E-4 1.2994E-4 1.3032E-4 1.3074E-4 1.3113E-4 1.3143E-4 1.3157E-4 1.3144E-4 1.3086E-4 1.2999E-4 1.2903E-4 1.2816E-4 1.2758E-4 1.2743E-4 1.2767E-4 1.2811E-4 1.2866E-4 1.2924E-4 1.2978E-4 1.3017E-4 1.3027E-4 1.2999E-4 1.2924E-4 1.2811E-4 1.2697E-4 1.2606E-4 1.2547E-4 1.2518E-4 1.2508E-4 1.2504E-4 1.251E-4 1.253E-4 1.2569E-4 1.2611E-4 1.2597E-4 1.243E-4 1.2001E-4 1.1202E-4 9.862E-5 8.183E-5 6.428E-5 4.753E-5 3.29E-5 2.22E-5 1.566E-5 1.183E-5 1.012E-5 9.8E-6 8.8E-6 6.66E-6 4.95E-6 4.04E-6 3.86E-6 4.17E-6 3.85E-6 3.05E-6 2.21E-6 1.79E-6 1.67E-6 1.7E-6 1.77E-6 1.85E-6 1.99E-6 2.19E-6 2.29E-6 2.28E-6 2.16E-6 1.98E-6 1.76E-6 1.5E-6 1.24E-6 1.0E-6 8.0E-7 6.7E-7 5.6E-7 4.7E-7 3.8E-7 3.0E-7 2.1E-7 1.4E-7 9.1E-7 1.16E-6 1.31E-6 1.43E-6 1.55E-6 1.64E-6 1.57E-6 1.44E-6 1.34E-6 1.28E-6 1.23E-6 1.11E-6 9.1E-7 7.4E-7 6.3E-7 6.1E-7 7.0E-7 8.4E-7 9.6E-7 1.02E-6 9.9E-7 9.1E-7 8.2E-7 7.8E-7 7.7E-7 7.8E-7 8.5E-7 9.3E-7 9.9E-7 1.01E-6 9.7E-7 8.5E-7 7.4E-7 6.3E-7 5.4E-7 5.3E-7 5.9E-7 6.7E-7 7.3E-7 7.3E-7 6.8E-7 6.9E-7 7.3E-7 8.1E-7 9.1E-7 9.7E-7 9.4E-7 9.0E-7 8.7E-7 8.6E-7 9.0E-7 9.0E-7 8.5E-7 8.0E-7 7.4E-7 6.8E-7 6.6E-7 6.1E-7 6.0E-7 6.3E-7 6.5E-7 6.9E-7 7.3E-7 7.9E-7 8.4E-7 8.7E-7 8.1E-7 7.7E-7 7.3E-7 7.2E-7 7.6E-7 8.2E-7 8.9E-7 9.6E-7 1.02E-6 1.04E-6 1.05E-6 1.02E-6 1.0E-6 1.01E-6 1.03E-6 1.06E-6 1.11E-6 1.11E-6 1.08E-6 1.02E-6 9.3E-7 8.6E-7 8.5E-7 8.8E-7 9.2E-7 9.8E-7 9.8E-7 9.7E-7 9.3E-7 8.6E-7 8.0E-7 8.0E-7 8.2E-7 8.6E-7 9.1E-7 9.0E-7 9.2E-7 9.3E-7 9.4E-7 9.8E-7 1.01E-6 1.03E-6 1.03E-6 1.0E-6 9.5E-7 9.4E-7 9.5E-7 9.9E-7 1.03E-6 1.03E-6 1.03E-6 1.0E-6 9.7E-7 9.5E-7 9.2E-7 9.1E-7 9.4E-7 9.7E-7 1.0E-6 1.01E-6 9.6E-7 9.2E-7 8.8E-7 8.7E-7 9.1E-7 9.5E-7 9.9E-7 1.01E-6 1.02E-6 1.01E-6 1.02E-6 1.0E-6 9.7E-7 9.5E-7 9.1E-7 9.0E-7 8.8E-7 8.6E-7 8.5E-7 8.9E-7 9.4E-7 1.03E-6 1.11E-6 1.17E-6 1.23E-6 1.24E-6 1.21E-6 1.15E-6 1.09E-6 1.03E-6 1.05E-6 1.03E-6 1.01E-6 9.7E-7 9.1E-7 9.0E-7 8.8E-7 8.6E-7 8.4E-7 8.2E-7 8.2E-7 8.7E-7 9.5E-7 1.05E-6 1.19E-6 1.28E-6 1.31E-6 1.25E-6 1.16E-6 1.09E-6 1.07E-6 1.06E-6 1.06E-6 1.07E-6 1.07E-6 1.14E-6 1.19E-6 1.24E-6 1.28E-6 1.3E-6 1.32E-6 1.35E-6 1.38E-6 1.41E-6 1.46E-6 1.45E-6 1.45E-6 1.42E-6 1.38E-6 1.34E-6 1.29E-6 1.2E-6 1.09E-6 9.6E-7 7.9E-7 6.5E-7 5.5E-7 5.0E-7 4.9E-7 4.8E-7 4.8E-7 4.9E-7 5.0E-7 4.9E-7 4.6E-7 4.2E-7 4.1E-7 4.1E-7 3.9E-7 3.4E-7 2.6E-7 2.1E-7 2.0E-7 2.1E-7 2.3E-7 2.2E-7 1.9E-7 1.6E-7 1.4E-7 1.3E-7 1.2E-7 1.0E-7 7.0E-8 5.0E-8 4.0E-8 7.0E-8 7.0E-8 5.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 3.0E-8 2.0E-8 4.92E-6 6.75E-6 8.31E-6 9.19E-6 8.94E-6 8.33E-6 7.46E-6 6.58E-6 6.1E-6 6.53E-6 7.27E-6 8.13E-6 8.96E-6 9.7E-6 1.044E-5 1.108E-5 1.145E-5 1.147E-5 1.121E-5 1.077E-5 1.034E-5 1.009E-5 1.01E-5 1.043E-5 1.098E-5 1.151E-5 1.195E-5 1.216E-5 1.2E-5 1.146E-5 1.08E-5 1.017E-5 9.64E-6 9.3E-6 9.22E-6 9.24E-6 9.27E-6 9.3E-6 9.34E-6 9.35E-6 9.38E-6 9.4E-6 9.38E-6 9.33E-6 9.17E-6 9.08E-6 9.09E-6 9.17E-6 9.24E-6 9.25E-6 9.21E-6 9.21E-6 9.26E-6 9.35E-6 9.48E-6 9.49E-6 9.39E-6 9.21E-6 9.04E-6 9.0E-6 9.1E-6 9.3E-6 9.53E-6 9.75E-6 9.83E-6 9.88E-6 9.86E-6 9.76E-6 9.61E-6 9.46E-6 9.42E-6 9.45E-6 9.53E-6 9.63E-6 9.77E-6 9.93E-6 1.009E-5 1.024E-5 1.034E-5 1.041E-5 1.043E-5 1.038E-5 1.026E-5 1.004E-5 9.74E-6 9.52E-6 9.41E-6 9.43E-6 9.57E-6 9.67E-6 9.75E-6 9.76E-6 9.71E-6 9.62E-6 9.41E-6 9.18E-6 8.95E-6 8.77E-6 8.62E-6 8.49E-6 8.3E-6 8.08E-6 7.82E-6 7.5E-6 7.25E-6 7.04E-6 6.92E-6 6.9E-6 6.93E-6 7.02E-6 7.07E-6 7.08E-6 7.07E-6 7.06E-6 7.16E-6 7.44E-6 7.83E-6 8.24E-6 8.58E-6 8.71E-6 8.64E-6 8.39E-6 8.04E-6 7.67E-6 7.41E-6 7.39E-6 7.55E-6 7.84E-6 8.16E-6 8.25E-6 8.03E-6 7.61E-6 7.1E-6 6.67E-6 6.41E-6 6.29E-6 6.21E-6 6.21E-6 6.31E-6 6.48E-6 6.64E-6 6.71E-6 6.67E-6 6.49E-6 6.28E-6 6.1E-6 5.95E-6 5.82E-6 5.65E-6 5.55E-6 5.64E-6 5.86E-6 6.16E-6 6.5E-6 6.88E-6 7.09E-6 7.09E-6 6.92E-6 6.64E-6 6.43E-6 6.28E-6 6.14E-6 5.97E-6 5.79E-6 5.59E-6 5.45E-6 5.34E-6 5.3E-6 5.37E-6 5.59E-6 6.01E-6 6.54E-6 7.07E-6 7.54E-6 7.79E-6 7.87E-6 7.91E-6 7.96E-6 8.01E-6 8.03E-6 7.96E-6 7.89E-6 7.91E-6 8.06E-6 8.3E-6 8.48E-6 8.53E-6 8.48E-6 8.4E-6 8.4E-6 8.54E-6 8.65E-6 8.63E-6 8.41E-6 7.97E-6 7.32E-6 6.38E-6 5.12E-6 3.56E-6 2.12E-6 1.23E-6 8.2E-7 8.4E-7 1.16E-6 1.61E-6 2.03E-6 2.36E-6 2.54E-6 2.57E-6 2.44E-6 2.24E-6 2.0E-6 1.75E-6 1.49E-6 1.24E-6 1.03E-6 8.5E-7 7.1E-7 5.9E-7 4.9E-7 4.4E-7 4.1E-7 3.9E-7 3.6E-7 3.1E-7 2.5E-7 2.0E-7 1.7E-7 1.4E-7 1.2E-7 1.1E-7 1.0E-7 1.0E-7 9.0E-8 8.0E-8 7.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.521E-5 2.37E-5 1.991E-5 1.547E-5 1.211E-5 9.88E-6 9.26E-6 9.88E-6 1.048E-5 8.99E-6 6.7E-6 4.52E-6 3.07E-6 2.66E-6 2.24E-6 2.52E-6 3.03E-6 3.52E-6 4.0E-6 3.77E-6 3.49E-6 3.42E-6 3.75E-6 4.62E-6 5.27E-6 5.78E-6 5.69E-6 5.02E-6 4.18E-6 3.28E-6 2.38E-6 1.99E-6 2.22E-6 2.89E-6 3.56E-6 4.45E-6 5.44E-6 6.4E-6 7.26E-6 7.82E-6 7.94E-6 7.67E-6 6.97E-6 5.76E-6 5.11E-6 4.31E-6 5.09E-6 7.28E-6 9.25E-6 1.019E-5 1.027E-5 9.73E-6 8.88E-6 8.06E-6 7.15E-6 6.41E-6 5.6E-6 4.62E-6 3.48E-6 2.09E-6 1.6E-6 1.99E-6 3.04E-6 4.32E-6 4.69E-6 4.85E-6 5.18E-6 6.0E-6 7.57E-6 9.43E-6 1.064E-5 1.084E-5 1.002E-5 8.4E-6 6.19E-6 4.16E-6 3.01E-6 3.02E-6 4.15E-6 6.53E-6 8.17E-6 9.18E-6 9.66E-6 9.67E-6 9.23E-6 8.49E-6 7.51E-6 6.29E-6 4.85E-6 3.35E-6 2.54E-6 1.7E-6 1.26E-6 2.18E-6 2.7E-6 2.97E-6 3.14E-6 3.28E-6 3.42E-6 3.74E-6 4.35E-6 5.27E-6 6.6E-6 8.48E-6 1.017E-5 1.14E-5 1.212E-5 1.238E-5 1.238E-5 1.239E-5 1.263E-5 1.294E-5 1.317E-5 1.318E-5 1.266E-5 1.218E-5 1.148E-5 1.05E-5 9.27E-6 7.48E-6 6.05E-6 5.0E-6 4.47E-6 4.64E-6 5.45E-6 6.2E-6 6.84E-6 7.28E-6 7.47E-6 7.33E-6 6.84E-6 6.35E-6 5.99E-6 5.77E-6 5.87E-6 6.03E-6 6.39E-6 6.84E-6 7.13E-6 7.19E-6 7.05E-6 7.01E-6 7.33E-6 8.26E-6 1.011E-5 1.183E-5 1.276E-5 1.276E-5 1.204E-5 1.109E-5 1.039E-5 9.47E-6 8.22E-6 6.71E-6 5.5E-6 5.02E-6 5.36E-6 6.36E-6 7.68E-6 8.58E-6 9.18E-6 9.7E-6 1.018E-5 1.058E-5 1.124E-5 1.193E-5 1.278E-5 1.371E-5 1.458E-5 1.53E-5 1.523E-5 1.423E-5 1.221E-5 9.34E-6 7.14E-6 5.85E-6 5.53E-6 6.44E-6 8.72E-6 1.133E-5 1.377E-5 1.562E-5 1.661E-5 1.654E-5 1.483E-5 1.156E-5 8.26E-6 6.18E-6 6.26E-6 8.57E-6 1.129E-5 1.288E-5 1.295E-5 1.161E-5 9.1E-6 7.11E-6 6.19E-6 6.75E-6 8.77E-6 9.82E-6 1.087E-5 9.0E-6 6.14E-6 5.26E-6 4.39E-6 3.51E-6 2.83E-6 2.24E-6 1.65E-6 1.42E-6 1.2E-6 1.09E-6 1.04E-6 9.4E-7 8.7E-7 8.4E-7 8.2E-7 8.1E-7 7.9E-7 8.1E-7 7.3E-7 5.9E-7 4.3E-7 2.9E-7 2.4E-7 2.1E-7 2.2E-7 2.4E-7 2.5E-7 2.2E-7 1.8E-7 1.3E-7 1.0E-7 6.0E-8 1.0E-8 1.06E-6 1.22E-6 1.27E-6 1.44E-6 1.78E-6 2.14E-6 2.39E-6 2.44E-6 2.4E-6 2.37E-6 2.35E-6 2.34E-6 2.34E-6 2.28E-6 2.06E-6 1.79E-6 1.55E-6 1.37E-6 1.23E-6 1.31E-6 1.52E-6 1.76E-6 1.88E-6 1.7E-6 1.38E-6 1.13E-6 1.02E-6 1.07E-6 1.35E-6 1.54E-6 1.62E-6 1.57E-6 1.45E-6 1.37E-6 1.34E-6 1.35E-6 1.42E-6 1.56E-6 1.78E-6 1.97E-6 2.11E-6 2.19E-6 2.23E-6 2.29E-6 2.38E-6 2.48E-6 2.57E-6 2.62E-6 2.59E-6 2.55E-6 2.53E-6 2.54E-6 2.61E-6 2.74E-6 2.81E-6 2.8E-6 2.72E-6 2.59E-6 2.43E-6 2.32E-6 2.25E-6 2.23E-6 2.26E-6 2.31E-6 2.38E-6 2.44E-6 2.5E-6 2.54E-6 2.52E-6 2.45E-6 2.35E-6 2.26E-6 2.15E-6 2.01E-6 1.85E-6 1.67E-6 1.52E-6 1.43E-6 1.39E-6 1.4E-6 1.44E-6 1.52E-6 1.65E-6 1.83E-6 2.01E-6 2.15E-6 2.24E-6 2.28E-6 2.28E-6 2.28E-6 2.26E-6 2.22E-6 2.16E-6 2.08E-6 2.0E-6 1.93E-6 1.88E-6 1.82E-6 1.77E-6 1.73E-6 1.7E-6 1.69E-6 1.67E-6 1.65E-6 1.63E-6 1.61E-6 1.59E-6 1.56E-6 1.51E-6 1.47E-6 1.45E-6 1.45E-6 1.46E-6 1.49E-6 1.54E-6 1.6E-6 1.66E-6 1.7E-6 1.69E-6 1.63E-6 1.56E-6 1.5E-6 1.46E-6 1.44E-6 1.45E-6 1.48E-6 1.52E-6 1.55E-6 1.54E-6 1.46E-6 1.33E-6 1.16E-6 9.8E-7 8.6E-7 7.9E-7 7.5E-7 7.6E-7 8.1E-7 8.7E-7 9.5E-7 1.04E-6 1.14E-6 1.24E-6 1.33E-6 1.39E-6 1.44E-6 1.48E-6 1.5E-6 1.48E-6 1.44E-6 1.38E-6 1.32E-6 1.27E-6 1.25E-6 1.25E-6 1.26E-6 1.28E-6 1.3E-6 1.3E-6 1.3E-6 1.31E-6 1.33E-6 1.36E-6 1.39E-6 1.39E-6 1.37E-6 1.36E-6 1.36E-6 1.41E-6 1.48E-6 1.53E-6 1.55E-6 1.52E-6 1.47E-6 1.45E-6 1.46E-6 1.5E-6 1.56E-6 1.63E-6 1.71E-6 1.79E-6 1.84E-6 1.84E-6 1.78E-6 1.66E-6 1.55E-6 1.45E-6 1.39E-6 1.38E-6 1.38E-6 1.35E-6 1.28E-6 1.14E-6 9.1E-7 6.8E-7 5.2E-7 4.1E-7 3.1E-7 2.4E-7 1.6E-7 1.0E-7 7.0E-8 6.0E-8 7.0E-8 8.0E-8 6.0E-8 2.0E-8 1.09E-6 1.42E-6 1.75E-6 2.08E-6 2.02E-6 1.78E-6 1.5E-6 1.27E-6 1.04E-6 8.1E-7 6.5E-7 5.8E-7 5.9E-7 7.0E-7 1.12E-6 1.3E-6 1.25E-6 1.46E-6 1.51E-6 1.6E-6 1.74E-6 1.89E-6 1.93E-6 1.71E-6 1.34E-6 9.6E-7 6.7E-7 4.6E-7 4.4E-7 4.0E-7 2.3E-7 3.18E-6 4.13E-6 4.98E-6 5.31E-6 4.83E-6 3.86E-6 2.93E-6 2.68E-6 3.0E-6 3.58E-6 4.06E-6 3.39E-6 1.131E-5 1.045E-5 9.66E-6 9.91E-6 9.44E-6 8.87E-6 8.7E-6 9.26E-6 9.77E-6 1.075E-5 1.168E-5 1.211E-5 1.172E-5 1.085E-5 1.075E-5 1.09E-5 1.082E-5 1.013E-5 9.69E-6 9.46E-6 9.59E-6 1.01E-5 1.09E-5 1.137E-5 1.161E-5 1.151E-5 1.119E-5 1.091E-5 1.106E-5 1.146E-5 1.185E-5 1.209E-5 1.216E-5 1.222E-5 1.23E-5 1.245E-5 1.269E-5 1.301E-5 1.33E-5 1.347E-5 1.35E-5 1.338E-5 1.312E-5 1.294E-5 1.277E-5 1.276E-5 1.29E-5 1.302E-5 1.311E-5 1.3E-5 1.283E-5 1.273E-5 1.279E-5 1.301E-5 1.311E-5 1.297E-5 1.256E-5 1.196E-5 1.136E-5 1.089E-5 1.07E-5 1.083E-5 1.131E-5 1.193E-5 1.25E-5 1.291E-5 1.315E-5 1.328E-5 1.317E-5 1.282E-5 1.216E-5 1.128E-5 1.038E-5 9.56E-6 9.1E-6 8.99E-6 9.22E-6 9.73E-6 1.038E-5 1.082E-5 1.104E-5 1.105E-5 1.091E-5 1.081E-5 1.077E-5 1.076E-5 1.078E-5 1.082E-5 1.096E-5 1.114E-5 1.14E-5 1.168E-5 1.193E-5 1.21E-5 1.222E-5 1.229E-5 1.238E-5 1.254E-5 1.272E-5 1.282E-5 1.287E-5 1.282E-5 1.263E-5 1.252E-5 1.248E-5 1.258E-5 1.275E-5 1.287E-5 1.276E-5 1.241E-5 1.191E-5 1.136E-5 1.084E-5 1.062E-5 1.061E-5 1.063E-5 1.06E-5 1.05E-5 1.04E-5 1.038E-5 1.044E-5 1.055E-5 1.064E-5 1.065E-5 1.073E-5 1.082E-5 1.09E-5 1.093E-5 1.071E-5 1.042E-5 1.022E-5 1.011E-5 1.004E-5 1.019E-5 1.048E-5 1.076E-5 1.101E-5 1.123E-5 1.156E-5 1.184E-5 1.193E-5 1.179E-5 1.146E-5 1.099E-5 1.037E-5 9.6E-6 8.78E-6 8.08E-6 7.67E-6 7.65E-6 7.77E-6 8.06E-6 8.66E-6 9.36E-6 1.03E-5 1.132E-5 1.222E-5 1.281E-5 1.3E-5 1.296E-5 1.277E-5 1.247E-5 1.21E-5 1.174E-5 1.141E-5 1.102E-5 1.057E-5 1.009E-5 9.45E-6 8.86E-6 8.54E-6 8.59E-6 9.09E-6 1.023E-5 1.133E-5 1.223E-5 1.279E-5 1.294E-5 1.281E-5 1.234E-5 1.164E-5 1.074E-5 9.67E-6 8.95E-6 8.72E-6 8.87E-6 9.35E-6 1.008E-5 1.037E-5 1.017E-5 9.47E-6 8.53E-6 7.68E-6 7.25E-6 6.95E-6 6.53E-6 5.58E-6 3.81E-6 2.04E-6 8.2E-7 8.2E-7 1.6E-6 2.29E-6 2.16E-6 2.09E-6 1.96E-6 1.79E-6 1.57E-6 1.36E-6 1.19E-6 1.05E-6 9.3E-7 8.2E-7 8.0E-7 8.4E-7 8.9E-7 9.0E-7 8.3E-7 6.9E-7 5.4E-7 4.4E-7 3.9E-7 3.8E-7 3.6E-7 3.0E-7 2.2E-7 1.2E-7 4.84E-6 4.95E-6 5.76E-6 6.57E-6 7.65E-6 9.64E-6 1.187E-5 1.236E-5 1.22E-5 1.191E-5 1.152E-5 1.102E-5 1.04E-5 9.61E-6 8.8E-6 8.06E-6 7.55E-6 7.46E-6 8.47E-6 1.02E-5 1.209E-5 1.37E-5 1.474E-5 1.529E-5 1.552E-5 1.559E-5 1.565E-5 1.583E-5 1.562E-5 1.496E-5 1.438E-5 1.424E-5 1.48E-5 1.606E-5 1.709E-5 1.798E-5 1.871E-5 1.921E-5 1.975E-5 2.021E-5 2.044E-5 2.04E-5 2.011E-5 1.927E-5 1.827E-5 1.711E-5 1.587E-5 1.476E-5 1.393E-5 1.343E-5 1.311E-5 1.288E-5 1.267E-5 1.263E-5 1.265E-5 1.281E-5 1.309E-5 1.342E-5 1.379E-5 1.399E-5 1.414E-5 1.425E-5 1.431E-5 1.448E-5 1.481E-5 1.531E-5 1.586E-5 1.629E-5 1.611E-5 1.56E-5 1.5E-5 1.453E-5 1.442E-5 1.493E-5 1.57E-5 1.655E-5 1.735E-5 1.804E-5 1.864E-5 1.906E-5 1.948E-5 1.99E-5 2.017E-5 2.015E-5 1.988E-5 1.956E-5 1.935E-5 1.938E-5 1.978E-5 2.027E-5 2.055E-5 2.049E-5 2.006E-5 1.917E-5 1.826E-5 1.744E-5 1.684E-5 1.66E-5 1.662E-5 1.7E-5 1.756E-5 1.824E-5 1.902E-5 1.945E-5 1.966E-5 1.977E-5 1.986E-5 2.0E-5 2.039E-5 2.091E-5 2.147E-5 2.188E-5 2.191E-5 2.186E-5 2.183E-5 2.196E-5 2.224E-5 2.255E-5 2.283E-5 2.273E-5 2.23E-5 2.156E-5 2.055E-5 1.964E-5 1.901E-5 1.875E-5 1.886E-5 1.923E-5 1.983E-5 2.058E-5 2.129E-5 2.187E-5 2.228E-5 2.233E-5 2.235E-5 2.23E-5 2.222E-5 2.222E-5 2.21E-5 2.211E-5 2.225E-5 2.262E-5 2.332E-5 2.407E-5 2.47E-5 2.498E-5 2.482E-5 2.424E-5 2.356E-5 2.302E-5 2.287E-5 2.313E-5 2.365E-5 2.433E-5 2.441E-5 2.424E-5 2.395E-5 2.363E-5 2.359E-5 2.36E-5 2.37E-5 2.384E-5 2.394E-5 2.404E-5 2.402E-5 2.402E-5 2.417E-5 2.459E-5 2.508E-5 2.568E-5 2.618E-5 2.657E-5 2.688E-5 2.653E-5 2.595E-5 2.522E-5 2.443E-5 2.372E-5 2.297E-5 2.219E-5 2.168E-5 2.153E-5 2.174E-5 2.235E-5 2.262E-5 2.274E-5 2.272E-5 2.247E-5 2.192E-5 2.107E-5 2.005E-5 1.902E-5 1.812E-5 1.696E-5 1.531E-5 1.309E-5 1.048E-5 7.81E-6 5.61E-6 4.14E-6 3.34E-6 3.17E-6 3.47E-6 3.5E-6 3.5E-6 3.5E-6 3.49E-6 3.4E-6 3.21E-6 3.02E-6 2.87E-6 2.74E-6 2.62E-6 2.49E-6 2.33E-6 2.14E-6 1.93E-6 1.7E-6 1.46E-6 1.28E-6 1.16E-6 1.07E-6 1.01E-6 9.3E-7 8.3E-7 7.3E-7 6.5E-7 5.8E-7 5.2E-7 4.7E-7 4.3E-7 3.9E-7 3.4E-7 2.8E-7 2.3E-7 1.7E-7 1.3E-7 9.0E-8 6.0E-8 7.8E-7 7.4E-7 6.9E-7 6.4E-7 6.0E-7 5.7E-7 5.7E-7 5.6E-7 5.5E-7 5.5E-7 5.8E-7 6.3E-7 6.5E-7 6.4E-7 6.4E-7 6.6E-7 7.0E-7 7.5E-7 7.5E-7 7.2E-7 6.8E-7 6.5E-7 6.0E-7 5.8E-7 5.8E-7 6.1E-7 6.3E-7 6.7E-7 7.1E-7 7.6E-7 8.2E-7 8.7E-7 9.2E-7 9.5E-7 9.7E-7 9.6E-7 9.2E-7 8.6E-7 7.8E-7 6.8E-7 5.8E-7 5.1E-7 5.1E-7 5.6E-7 6.4E-7 7.0E-7 7.0E-7 6.4E-7 5.6E-7 4.9E-7 4.4E-7 4.1E-7 3.9E-7 3.7E-7 3.7E-7 3.8E-7 4.1E-7 5.0E-7 6.1E-7 7.4E-7 8.5E-7 9.3E-7 9.5E-7 9.3E-7 8.9E-7 8.3E-7 7.7E-7 7.0E-7 6.2E-7 5.4E-7 4.6E-7 4.0E-7 4.3E-7 5.2E-7 6.4E-7 7.7E-7 8.8E-7 9.1E-7 8.9E-7 8.3E-7 7.4E-7 6.5E-7 5.9E-7 5.6E-7 5.5E-7 5.6E-7 5.9E-7 6.5E-7 7.1E-7 7.5E-7 7.8E-7 7.7E-7 7.2E-7 6.5E-7 6.0E-7 5.7E-7 5.7E-7 6.2E-7 7.0E-7 7.8E-7 8.5E-7 9.1E-7 9.4E-7 9.7E-7 1.0E-6 1.02E-6 1.03E-6 1.02E-6 9.8E-7 9.2E-7 8.6E-7 8.0E-7 7.7E-7 7.6E-7 7.7E-7 8.0E-7 8.4E-7 8.7E-7 8.8E-7 8.6E-7 8.1E-7 7.5E-7 6.9E-7 6.3E-7 5.9E-7 5.9E-7 6.1E-7 6.6E-7 7.3E-7 8.0E-7 8.7E-7 9.1E-7 9.1E-7 8.9E-7 8.6E-7 8.2E-7 7.9E-7 7.7E-7 7.7E-7 7.5E-7 7.2E-7 6.5E-7 5.3E-7 4.2E-7 3.5E-7 3.4E-7 3.5E-7 3.9E-7 4.1E-7 4.4E-7 4.9E-7 5.4E-7 6.1E-7 6.7E-7 7.3E-7 7.7E-7 7.9E-7 7.8E-7 7.3E-7 6.8E-7 6.3E-7 5.8E-7 5.4E-7 5.1E-7 4.8E-7 4.4E-7 3.9E-7 3.4E-7 3.1E-7 3.1E-7 3.5E-7 4.5E-7 5.6E-7 6.3E-7 6.7E-7 6.8E-7 6.5E-7 5.8E-7 4.7E-7 3.6E-7 2.5E-7 1.6E-7 2.5E-7 4.4E-7 5.7E-7 6.1E-7 5.7E-7 5.2E-7 5.4E-7 6.0E-7 6.9E-7 7.9E-7 8.7E-7 9.0E-7 8.6E-7 7.5E-7 5.8E-7 4.1E-7 3.4E-7 2.9E-7 2.5E-7 2.1E-7 2.8E-7 3.3E-7 3.5E-7 3.3E-7 3.0E-7 2.5E-7 2.0E-7 1.5E-7 1.1E-7 8.0E-8 6.0E-8 6.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 3.0E-8 4.0E-8 4.0E-8 5.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 1.0E-6 1.13E-6 1.25E-6 1.14E-6 9.6E-7 8.2E-7 8.1E-7 8.8E-7 9.3E-7 9.8E-7 1.02E-6 1.04E-6 1.11E-6 1.16E-6 1.16E-6 1.1E-6 9.8E-7 9.1E-7 8.7E-7 8.6E-7 8.5E-7 8.1E-7 7.7E-7 7.7E-7 8.0E-7 8.5E-7 9.1E-7 9.5E-7 9.9E-7 1.05E-6 1.09E-6 1.1E-6 1.04E-6 9.6E-7 8.8E-7 8.2E-7 7.7E-7 7.6E-7 7.6E-7 7.6E-7 7.5E-7 7.3E-7 6.9E-7 6.4E-7 6.0E-7 5.4E-7 4.7E-7 4.0E-7 3.8E-7 3.8E-7 3.9E-7 4.0E-7 4.1E-7 4.1E-7 4.0E-7 3.8E-7 3.8E-7 3.9E-7 3.9E-7 3.8E-7 3.8E-7 3.9E-7 4.0E-7 3.8E-7 3.5E-7 2.9E-7 2.4E-7 2.5E-7 3.0E-7 3.5E-7 3.9E-7 4.2E-7 4.5E-7 4.9E-7 5.0E-7 4.6E-7 3.8E-7 3.1E-7 2.7E-7 2.6E-7 2.6E-7 2.9E-7 3.2E-7 3.4E-7 3.8E-7 4.4E-7 5.0E-7 5.5E-7 5.6E-7 5.7E-7 5.9E-7 6.3E-7 7.0E-7 7.7E-7 8.3E-7 8.7E-7 8.6E-7 7.9E-7 7.0E-7 5.9E-7 4.9E-7 4.1E-7 3.5E-7 3.2E-7 3.0E-7 3.0E-7 3.0E-7 3.1E-7 3.2E-7 3.5E-7 3.8E-7 4.2E-7 4.4E-7 4.4E-7 4.4E-7 4.3E-7 4.6E-7 5.3E-7 6.2E-7 7.1E-7 8.1E-7 8.9E-7 9.2E-7 9.1E-7 8.6E-7 8.0E-7 7.2E-7 6.6E-7 6.5E-7 6.7E-7 7.1E-7 7.5E-7 7.7E-7 7.8E-7 7.8E-7 7.7E-7 7.6E-7 7.6E-7 7.4E-7 6.8E-7 6.0E-7 5.1E-7 4.3E-7 4.0E-7 4.3E-7 5.0E-7 6.1E-7 6.8E-7 7.2E-7 7.4E-7 7.4E-7 7.5E-7 7.4E-7 7.2E-7 7.2E-7 7.2E-7 7.2E-7 7.2E-7 7.2E-7 7.5E-7 7.8E-7 8.0E-7 7.7E-7 6.9E-7 6.1E-7 5.5E-7 5.2E-7 5.5E-7 6.1E-7 6.9E-7 7.7E-7 8.4E-7 8.5E-7 8.4E-7 8.2E-7 8.0E-7 7.9E-7 7.8E-7 7.7E-7 7.6E-7 7.4E-7 7.2E-7 7.1E-7 7.1E-7 7.3E-7 7.6E-7 7.8E-7 7.9E-7 8.0E-7 8.3E-7 8.9E-7 9.7E-7 1.03E-6 1.05E-6 1.03E-6 9.7E-7 8.7E-7 7.2E-7 5.4E-7 3.9E-7 2.7E-7 1.9E-7 1.5E-7 1.1E-7 8.0E-8 8.0E-8 8.0E-8 1.0E-8 1.371E-5 1.232E-5 1.133E-5 1.008E-5 8.98E-6 8.55E-6 9.4E-6 8.83E-6 8.07E-6 7.41E-6 6.98E-6 6.76E-6 6.36E-6 6.01E-6 8.19E-6 1.182E-5 1.267E-5 1.33E-5 1.336E-5 1.318E-5 1.294E-5 1.273E-5 1.275E-5 1.27E-5 1.247E-5 1.217E-5 1.206E-5 1.174E-5 1.2E-5) (list 1.231E-5 1.25E-5 1.268E-5 1.264E-5 1.288E-5 1.316E-5 1.334E-5 1.338E-5 1.373E-5 1.388E-5 1.391E-5 1.373E-5 1.312E-5 1.298E-5 1.244E-5 1.169E-5 1.115E-5 1.137E-5 1.19E-5 1.247E-5 1.267E-5 1.261E-5 1.281E-5 1.277E-5 1.286E-5 1.274E-5 1.237E-5 1.19E-5 1.115E-5 1.055E-5 1.03E-5 1.033E-5 1.034E-5 1.065E-5 1.069E-5 1.095E-5 1.147E-5 1.192E-5 1.267E-5 1.285E-5 1.281E-5 1.265E-5 1.233E-5 1.167E-5 1.151E-5 1.153E-5 1.181E-5 1.263E-5 1.287E-5 1.315E-5 1.321E-5 1.309E-5 1.303E-5 1.301E-5 1.278E-5 1.263E-5 1.249E-5 1.202E-5 1.18E-5 1.105E-5 1.052E-5 1.024E-5 9.85E-6 9.85E-6 9.8E-6 9.78E-6 9.8E-6 9.85E-6 9.94E-6 1.019E-5 1.05E-5 1.088E-5 1.141E-5 1.162E-5 1.207E-5 1.229E-5 1.233E-5 1.25E-5 1.24E-5 1.26E-5 1.273E-5 1.283E-5 1.31E-5 1.288E-5 1.261E-5 1.223E-5 1.187E-5 1.165E-5 1.127E-5 1.084E-5 1.047E-5 1.015E-5 9.78E-6 9.62E-6 9.62E-6 9.74E-6 9.92E-6 1.007E-5 1.041E-5 1.04E-5 1.046E-5 1.035E-5 9.64E-6 9.69E-6 9.81E-6 1.002E-5 1.016E-5 9.97E-6 9.91E-6 1.005E-5 1.03E-5 1.066E-5 1.116E-5 1.148E-5 1.177E-5 1.165E-5 1.132E-5 1.112E-5 1.022E-5 9.85E-6 9.58E-6 9.48E-6 9.73E-6 9.18E-6 9.02E-6 9.23E-6 9.62E-6 9.97E-6 1.039E-5 1.06E-5 1.09E-5 1.118E-5 1.122E-5 1.165E-5 1.187E-5 1.217E-5 1.24E-5 1.232E-5 1.234E-5 1.199E-5 1.171E-5 1.143E-5 1.092E-5 1.036E-5 1.026E-5 1.027E-5 1.043E-5 1.088E-5 1.106E-5 1.172E-5 1.209E-5 1.211E-5 1.194E-5 1.139E-5 1.111E-5 1.119E-5 1.146E-5 1.166E-5 1.199E-5 1.178E-5 1.156E-5 1.146E-5 1.143E-5 1.16E-5 1.17E-5 1.17E-5 1.17E-5 1.175E-5 1.087E-5 9.39E-6 7.6E-6 5.83E-6 4.35E-6 3.04E-6 1.98E-6 1.23E-6 1.21E-6 2.12E-6 1.84E-6 5.8E-7 1.852E-5 1.312E-5 1.054E-5 7.97E-6 6.86E-6 5.99E-6 1.6E-6 3.64E-6 5.67E-6 7.02E-6 7.68E-6 8.3E-6 9.07E-6 9.82E-6 6.05E-6 3.41E-6 2.9E-6 3.61E-6 3.88E-6 4.08E-6 3.75E-6 1.68E-6 1.5E-6 1.34E-6 1.25E-6 1.26E-6 1.39E-6 1.51E-6 1.63E-6 1.8E-6 1.96E-6 1.98E-6 2.0E-6 1.52E-6 1.04E-6 8.0E-7 8.1E-7 1.01E-6 5.9E-7 3.0E-7 4.2E-7 8.1E-7 1.21E-6 1.08E-6 9.1E-7 9.4E-7 1.22E-6 1.18E-6 1.03E-6 8.3E-7 6.1E-7 3.9E-7 6.3E-7 8.6E-7 1.12E-6 1.37E-6 1.56E-6 1.49E-6 1.41E-6 1.19E-6 9.7E-7 1.07E-6 8.7E-7 8.7E-7 9.4E-7 1.06E-6 1.31E-6 1.57E-6 1.66E-6 1.74E-6 1.81E-6 1.77E-6 1.73E-6 1.58E-6 1.41E-6 1.22E-6 9.5E-7 9.7E-7 9.0E-7 1.03E-6 1.3E-6 1.38E-6 1.47E-6 1.46E-6 1.52E-6 1.67E-6 1.79E-6 1.72E-6 1.74E-6 1.62E-6 1.36E-6 1.16E-6 8.5E-7 6.7E-7 5.3E-7 5.9E-7 1.12E-6 1.06E-6 1.06E-6 1.23E-6 1.43E-6 1.42E-6 1.64E-6 1.66E-6 1.72E-6 1.79E-6 1.66E-6 1.6E-6 1.47E-6 1.37E-6 1.25E-6 9.7E-7 9.1E-7 6.9E-7 4.9E-7 4.8E-7 7.6E-7 7.4E-7 1.01E-6 1.15E-6 1.13E-6 1.08E-6 1.06E-6 1.05E-6 1.01E-6 9.8E-7 1.02E-6 1.1E-6 1.25E-6 1.49E-6 1.74E-6 1.85E-6 1.98E-6 1.92E-6 1.9E-6 1.84E-6 1.57E-6 1.57E-6 1.32E-6 1.21E-6 1.17E-6 9.7E-7 1.19E-6 1.22E-6 1.21E-6 1.17E-6 1.08E-6 1.09E-6 1.05E-6 1.1E-6 1.17E-6 1.14E-6 1.19E-6 1.23E-6 1.16E-6 1.14E-6 1.33E-6 1.29E-6 1.32E-6 1.36E-6 1.32E-6 1.15E-6 1.09E-6 1.23E-6 1.36E-6 1.44E-6 1.53E-6 1.48E-6 1.51E-6 1.35E-6 1.1E-6 1.02E-6 1.0E-6 8.9E-7 8.0E-7 7.0E-7 5.3E-7 6.2E-7 4.9E-7 5.4E-7 6.9E-7 6.8E-7 6.7E-7 9.4E-7 1.22E-6 1.38E-6 1.41E-6 1.68E-6 1.63E-6 1.49E-6 1.41E-6 1.45E-6 1.28E-6 1.48E-6 1.51E-6 1.51E-6 1.77E-6 1.76E-6 1.76E-6 1.6E-6 1.5E-6 1.69E-6 1.8E-6 1.67E-6 1.73E-6 1.79E-6 1.54E-6 1.81E-6 1.69E-6 2.09E-6 1.91E-6 1.4E-5 1.127E-5 8.66E-6 6.77E-6 5.67E-6 5.15E-6 4.71E-6 3.77E-6 2.61E-6 1.57E-6 9.4E-7 9.5E-7 1.43E-6 1.74E-6 1.91E-6 1.87E-6 1.5E-6 1.65E-6 1.82E-6 2.11E-6 2.54E-6 3.02E-6 3.05E-6 3.21E-6 3.17E-6 3.03E-6 3.22E-6 3.33E-6 3.39E-6 3.45E-6 3.47E-6 3.28E-6 3.45E-6 3.4E-6 3.54E-6 3.78E-6 3.72E-6 3.92E-6 3.89E-6 3.91E-6 4.06E-6 4.21E-6 4.31E-6 4.58E-6 4.7E-6 4.75E-6 5.05E-6 4.99E-6 5.04E-6 5.03E-6 4.93E-6 4.86E-6 4.94E-6 4.86E-6 4.88E-6 4.94E-6 4.75E-6 5.01E-6 5.06E-6 5.27E-6 5.57E-6 5.56E-6 5.69E-6 5.67E-6 5.69E-6 5.8E-6 5.99E-6 6.0E-6 6.19E-6 6.18E-6 6.11E-6 6.35E-6 6.14E-6 6.17E-6 6.1E-6 5.97E-6 5.99E-6 6.07E-6 5.95E-6 5.93E-6 5.91E-6 5.54E-6 5.66E-6 5.49E-6 5.41E-6 5.39E-6 5.17E-6 5.15E-6 5.29E-6 5.45E-6 5.67E-6 6.03E-6 6.02E-6 6.19E-6 6.17E-6 6.02E-6 6.02E-6 5.7E-6 5.62E-6 5.52E-6 5.47E-6 5.69E-6 5.68E-6 5.85E-6 5.95E-6 6.0E-6 6.14E-6 6.3E-6 6.46E-6 6.67E-6 6.81E-6 6.74E-6 6.9E-6 6.86E-6 6.97E-6 7.13E-6 7.02E-6 7.23E-6 7.12E-6 7.12E-6 7.14E-6 6.89E-6 6.76E-6 6.45E-6 6.2E-6 6.01E-6 5.78E-6 5.7E-6 5.63E-6 5.62E-6 5.64E-6 5.67E-6 5.52E-6 5.56E-6 5.49E-6 5.42E-6 5.63E-6 5.45E-6 5.47E-6 5.37E-6 5.27E-6 5.52E-6 5.64E-6 6.11E-6 6.42E-6 6.58E-6 6.78E-6 6.96E-6 7.06E-6 7.22E-6 7.34E-6 7.27E-6 7.51E-6 7.4E-6 7.39E-6 7.37E-6 7.05E-6 7.06E-6 6.8E-6 6.64E-6 6.54E-6 6.28E-6 6.18E-6 6.01E-6 5.89E-6 5.92E-6 6.11E-6 6.28E-6 6.72E-6 6.98E-6 7.16E-6 7.49E-6 7.19E-6 7.13E-6 6.85E-6 6.49E-6 6.35E-6 6.1E-6 5.98E-6 6.02E-6 6.14E-6 6.22E-6 6.68E-6 6.65E-6 6.72E-6 6.79E-6 6.55E-6 6.52E-6 6.4E-6 6.21E-6 6.13E-6 6.25E-6 5.97E-6 5.87E-6 5.64E-6 5.44E-6 5.48E-6 4.85E-6 4.23E-6 3.4E-6 2.48E-6 1.69E-6 1.42E-6 7.3E-7 2.2E-7 1.9E-6 2.1E-6 1.94E-6 1.6E-6 1.22E-6 9.4E-7 8.7E-7 1.07E-6 1.41E-6 1.76E-6 2.07E-6 2.43E-6 2.78E-6 3.05E-6 3.18E-6 3.17E-6 3.07E-6 2.91E-6 2.69E-6 2.4E-6 2.07E-6 1.69E-6 1.31E-6 1.04E-6 8.8E-7 8.4E-7 9.1E-7 1.13E-6 1.38E-6 1.62E-6 1.81E-6 1.93E-6 1.95E-6 1.9E-6 1.8E-6 1.66E-6 1.52E-6 1.35E-6 1.15E-6 9.4E-7 7.5E-7 6.2E-7 5.8E-7 6.2E-7 7.1E-7 8.3E-7 9.2E-7 9.4E-7 9.1E-7 8.9E-7 9.0E-7 9.7E-7 1.08E-6 1.17E-6 1.22E-6 1.24E-6 1.24E-6 1.3E-6 1.42E-6 1.57E-6 1.73E-6 1.85E-6 1.89E-6 1.88E-6 1.84E-6 1.76E-6 1.62E-6 1.38E-6 1.1E-6 8.4E-7 6.7E-7 6.7E-7 8.5E-7 1.12E-6 1.37E-6 1.56E-6 1.64E-6 1.62E-6 1.49E-6 1.33E-6 1.17E-6 1.07E-6 1.08E-6 1.18E-6 1.35E-6 1.56E-6 1.77E-6 1.95E-6 2.1E-6 2.21E-6 2.31E-6 2.42E-6 2.53E-6 2.66E-6 2.77E-6 2.87E-6 2.95E-6 2.96E-6 2.9E-6 2.78E-6 2.6E-6 2.38E-6 2.13E-6 1.93E-6 1.8E-6 1.74E-6 1.77E-6 1.84E-6 1.88E-6 1.88E-6 1.85E-6 1.82E-6 1.84E-6 1.9E-6 1.97E-6 2.01E-6 2.03E-6 2.03E-6 2.05E-6 2.11E-6 2.18E-6 2.29E-6 2.42E-6 2.57E-6 2.71E-6 2.82E-6 2.87E-6 2.84E-6 2.79E-6 2.76E-6 2.74E-6 2.75E-6 2.75E-6 2.78E-6 2.84E-6 2.94E-6 3.1E-6 3.3E-6 3.46E-6 3.54E-6 3.53E-6 3.4E-6 3.14E-6 2.79E-6 2.4E-6 2.03E-6 1.74E-6 1.6E-6 1.64E-6 1.76E-6 1.93E-6 2.11E-6 2.23E-6 2.31E-6 2.39E-6 2.48E-6 2.57E-6 2.65E-6 2.69E-6 2.72E-6 2.74E-6 2.76E-6 2.76E-6 2.74E-6 2.7E-6 2.65E-6 2.61E-6 2.54E-6 2.45E-6 2.34E-6 2.23E-6 2.11E-6 2.02E-6 1.95E-6 1.91E-6 1.92E-6 1.95E-6 2.01E-6 2.04E-6 2.05E-6 2.04E-6 1.97E-6 1.86E-6 1.74E-6 1.63E-6 1.53E-6 1.44E-6 1.3E-6 1.17E-6 1.08E-6 1.07E-6 1.14E-6 1.32E-6 1.47E-6 1.56E-6 1.57E-6 1.47E-6 1.28E-6 1.05E-6 8.2E-7 6.2E-7 4.7E-7 3.6E-7 2.5E-7 2.6E-7 3.3E-7 3.4E-7 3.8E-7 3.7E-7 3.2E-7 2.5E-7 1.9E-7 2.0E-7 2.1E-7 2.3E-7 2.5E-7 2.4E-7 2.1E-7 1.6E-7 1.3E-7 1.2E-7 1.2E-7 1.3E-7 1.4E-7 1.3E-7 1.2E-7 1.0E-7 8.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 1.0E-8 8.9E-7 9.6E-7 8.9E-7 7.3E-7 4.6E-7 1.99E-6 2.05E-6 1.81E-6 1.47E-6 1.15E-6 9.1E-7 9.6E-7 1.21E-6 1.54E-6 1.78E-6 1.76E-6 1.5E-6 5.6E-7 9.75E-6 1.016E-5 9.15E-6 7.68E-6 6.81E-6 7.66E-6 7.88E-6 7.67E-6 7.31E-6 6.88E-6 6.19E-6 5.52E-6 4.92E-6 4.74E-6 5.06E-6 5.67E-6 6.2E-6 6.33E-6 6.13E-6 5.81E-6 5.71E-6 5.94E-6 6.77E-6 7.72E-6 8.5E-6 8.94E-6 8.86E-6 8.7E-6 8.62E-6 8.62E-6 8.55E-6 8.42E-6 8.0E-6 7.67E-6 7.53E-6 7.4E-6 7.53E-6 7.72E-6 8.03E-6 8.36E-6 8.5E-6 7.96E-6 7.32E-6 6.65E-6 6.02E-6 5.5E-6 5.38E-6 5.77E-6 6.45E-6 7.2E-6 7.76E-6 8.21E-6 8.41E-6 8.52E-6 8.51E-6 8.24E-6 7.79E-6 6.99E-6 6.16E-6 5.42E-6 4.77E-6 4.4E-6 4.1E-6 3.87E-6 3.75E-6 3.74E-6 4.26E-6 5.22E-6 6.19E-6 6.95E-6 7.39E-6 7.31E-6 6.92E-6 6.41E-6 5.85E-6 5.3E-6 5.19E-6 5.35E-6 5.75E-6 6.28E-6 6.7E-6 7.12E-6 7.41E-6 7.63E-6 7.81E-6 7.91E-6 7.79E-6 7.39E-6 6.72E-6 5.91E-6 5.14E-6 4.67E-6 4.5E-6 4.62E-6 4.92E-6 5.26E-6 5.25E-6 5.12E-6 4.78E-6 4.39E-6 4.26E-6 3.96E-6 3.89E-6 3.95E-6 4.11E-6 4.36E-6 4.82E-6 5.39E-6 6.18E-6 7.1E-6 7.96E-6 8.7E-6 9.12E-6 9.41E-6 9.61E-6 9.7E-6 9.81E-6 9.77E-6 9.76E-6 9.84E-6 1.0E-5 1.035E-5 1.054E-5 1.069E-5 1.08E-5 1.081E-5 1.067E-5 1.023E-5 9.61E-6 8.87E-6 8.06E-6 7.05E-6 6.32E-6 5.8E-6 5.47E-6 5.31E-6 5.04E-6 5.0E-6 5.1E-6 5.4E-6 6.01E-6 6.7E-6 7.55E-6 8.3E-6 8.83E-6 9.12E-6 9.31E-6 9.19E-6 9.02E-6 8.81E-6 8.5E-6 8.36E-6 7.73E-6 7.14E-6 6.65E-6 6.18E-6 5.91E-6 5.52E-6 5.3E-6 5.29E-6 5.43E-6 5.73E-6 6.27E-6 6.85E-6 7.45E-6 8.08E-6 8.52E-6 8.94E-6 9.09E-6 9.03E-6 8.89E-6 8.56E-6 8.31E-6 7.97E-6 7.58E-6 7.22E-6 7.01E-6 7.03E-6 7.31E-6 7.67E-6 7.88E-6 7.95E-6 7.74E-6 7.55E-6 7.46E-6 7.51E-6 7.73E-6 7.85E-6 7.56E-6 6.88E-6 5.97E-6 5.07E-6 4.51E-6 4.1E-6 3.81E-6 3.61E-6 3.39E-6 3.1E-6 2.89E-6 2.79E-6 2.8E-6 2.85E-6 2.72E-6 2.48E-6 2.21E-6 1.93E-6 1.7E-6 1.45E-6 1.25E-6 1.1E-6 1.01E-6 9.4E-7 8.9E-7 8.3E-7 7.6E-7 6.7E-7 5.6E-7 4.7E-7 3.9E-7 3.1E-7 2.4E-7 1.8E-7 1.5E-7 1.4E-7 1.4E-7 1.5E-7 1.5E-7 1.5E-7 1.4E-7 1.2E-7 1.0E-7 8.0E-8 6.0E-8 5.0E-8 3.0E-8 2.0E-8 1.0E-8 8.2E-7 7.8E-7 6.8E-7 5.5E-7 5.9E-7 7.2E-7 8.9E-7 1.07E-6 1.24E-6 1.25E-6 1.15E-6 1.05E-6 9.6E-7 8.2E-7 7.9E-7 7.9E-7 7.8E-7 7.4E-7 6.8E-7 5.5E-7 4.9E-7 4.9E-7 5.9E-7 8.3E-7 1.05E-6 1.11E-6 1.06E-6 9.6E-7 8.7E-7 8.6E-7 8.8E-7 8.8E-7 8.5E-7 7.9E-7 7.1E-7 6.2E-7 5.6E-7 5.2E-7 5.5E-7 6.4E-7 7.7E-7 8.7E-7 9.0E-7 8.3E-7 6.7E-7 5.5E-7 4.8E-7 4.6E-7 4.8E-7 4.9E-7 4.7E-7 4.4E-7 4.3E-7 4.6E-7 5.3E-7 6.1E-7 7.1E-7 7.9E-7 8.6E-7 8.7E-7 8.6E-7 8.2E-7 7.7E-7 7.2E-7 6.7E-7 6.3E-7 5.9E-7 5.8E-7 6.0E-7 6.6E-7 7.3E-7 8.0E-7 8.5E-7 8.8E-7 8.8E-7 8.6E-7 8.1E-7 7.4E-7 6.5E-7 5.8E-7 5.4E-7 5.2E-7 5.2E-7 5.3E-7 5.7E-7 6.4E-7 7.2E-7 8.0E-7 8.7E-7 9.2E-7 9.6E-7 9.9E-7 1.01E-6 1.03E-6 1.05E-6 1.06E-6 1.07E-6 1.07E-6 1.06E-6 1.04E-6 1.03E-6 1.04E-6 1.07E-6 1.1E-6 1.11E-6 1.07E-6 9.7E-7 8.3E-7 7.0E-7 6.2E-7 5.9E-7 5.7E-7 5.5E-7 5.1E-7 4.7E-7 4.6E-7 4.6E-7 4.6E-7 4.5E-7 4.2E-7 4.0E-7 3.9E-7 3.9E-7 4.0E-7 4.1E-7 4.5E-7 5.3E-7 6.3E-7 7.5E-7 8.5E-7 9.2E-7 9.6E-7 9.8E-7 1.0E-6 1.02E-6 1.05E-6 1.09E-6 1.11E-6 1.1E-6 1.02E-6 8.6E-7 6.8E-7 5.2E-7 4.3E-7 3.4E-7 2.6E-7 2.3E-7 2.6E-7 3.8E-7 5.7E-7 7.4E-7 8.8E-7 9.7E-7 1.02E-6 1.07E-6 1.12E-6 1.15E-6 1.15E-6 1.12E-6 1.07E-6 1.0E-6 9.2E-7 8.2E-7 7.1E-7 5.4E-7 4.2E-7 3.9E-7 4.5E-7 5.8E-7 7.7E-7 9.1E-7 9.9E-7 1.03E-6 1.04E-6 1.0E-6 9.1E-7 7.8E-7 6.1E-7 4.1E-7 3.1E-7 3.2E-7 4.2E-7 5.6E-7 6.4E-7 6.0E-7 5.5E-7 5.2E-7 5.1E-7 5.4E-7 6.4E-7 6.9E-7 6.8E-7 6.3E-7 5.1E-7 3.2E-7 2.3E-7 2.0E-7 2.3E-7 2.8E-7 2.9E-7 2.7E-7 2.3E-7 1.7E-7 1.2E-7 9.0E-8 8.0E-8 8.0E-8 8.0E-8 8.0E-8 8.0E-8 7.0E-8 5.0E-8 4.0E-8 4.0E-8 4.0E-8 5.0E-8 5.0E-8 5.0E-8 4.0E-8 4.0E-8 2.0E-8 2.0E-8 2.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 1.0E-8 1.0E-8 1.0E-8 9.3E-7 9.0E-7 8.4E-7 7.9E-7 7.6E-7 7.9E-7 8.5E-7 9.1E-7 9.2E-7 8.4E-7 7.5E-7 6.9E-7 6.8E-7 7.1E-7 7.9E-7 8.6E-7 9.3E-7 9.7E-7 9.8E-7 9.5E-7 8.8E-7 7.6E-7 6.3E-7 5.1E-7 4.8E-7 5.1E-7 6.0E-7 7.2E-7 8.3E-7 8.5E-7 8.2E-7 7.7E-7 7.5E-7 7.6E-7 8.0E-7 8.5E-7 9.0E-7 9.5E-7 1.0E-6 1.04E-6 1.06E-6 1.06E-6 1.04E-6 1.01E-6 1.0E-6 1.0E-6 1.01E-6 1.04E-6 1.07E-6 1.1E-6 1.1E-6 1.09E-6 1.08E-6 1.07E-6 1.08E-6 1.08E-6 1.07E-6 1.03E-6 9.9E-7 9.4E-7 8.9E-7 8.4E-7 7.9E-7 7.4E-7 7.2E-7 7.2E-7 7.6E-7 8.1E-7 8.6E-7 9.0E-7 9.4E-7 9.7E-7 1.0E-6 1.03E-6 1.06E-6 1.09E-6 1.11E-6 1.1E-6 1.05E-6 9.9E-7 9.3E-7 8.9E-7 8.7E-7 8.6E-7 8.5E-7 8.3E-7 8.1E-7 7.8E-7 7.6E-7 7.4E-7 7.2E-7 7.1E-7 6.8E-7 6.5E-7 6.0E-7 5.4E-7 4.9E-7 4.5E-7 4.1E-7 3.9E-7 3.9E-7 4.2E-7 4.7E-7 5.1E-7 5.6E-7 6.0E-7 6.3E-7 6.4E-7 6.3E-7 5.8E-7 5.3E-7 4.9E-7 4.7E-7 4.7E-7 4.9E-7 5.2E-7 5.6E-7 6.0E-7 6.5E-7 7.0E-7 7.4E-7 7.7E-7 7.9E-7 8.0E-7 8.0E-7 7.9E-7 7.7E-7 7.4E-7 6.9E-7 6.2E-7 5.5E-7 5.0E-7 4.7E-7 4.6E-7 4.9E-7 5.1E-7 5.2E-7 5.1E-7 5.0E-7 4.9E-7 4.9E-7 4.8E-7 4.7E-7 4.5E-7 4.4E-7 4.4E-7 4.5E-7 4.6E-7 4.7E-7 4.8E-7 4.9E-7 5.1E-7 5.2E-7 5.2E-7 5.3E-7 5.7E-7 6.0E-7 6.3E-7 6.5E-7 6.6E-7 6.6E-7 6.4E-7 6.1E-7 5.6E-7 5.4E-7 5.5E-7 5.9E-7 6.5E-7 7.1E-7 7.5E-7 7.7E-7 7.7E-7 7.6E-7 7.4E-7 7.1E-7 7.0E-7 7.0E-7 7.0E-7 6.9E-7 6.5E-7 5.9E-7 5.3E-7 4.9E-7 4.6E-7 4.4E-7 3.9E-7 3.1E-7 2.2E-7 1.4E-7 9.0E-8 4.0E-8 1.0E-8 1.44E-6 1.5E-6 1.86E-6 2.28E-6 2.66E-6 2.88E-6 2.92E-6 2.79E-6 2.55E-6 2.21E-6 2.08E-6 2.2E-6 2.55E-6 3.05E-6 3.39E-6 3.47E-6 3.35E-6 3.09E-6 2.84E-6 2.75E-6 2.8E-6 2.93E-6 3.07E-6 3.14E-6 3.13E-6 3.04E-6 2.93E-6 2.87E-6 2.94E-6 3.23E-6 3.61E-6 3.9E-6 3.99E-6 3.82E-6 3.4E-6 2.87E-6 2.28E-6 1.73E-6 1.3E-6 1.1E-6 1.04E-6 1.08E-6 1.22E-6 1.49E-6 1.87E-6 2.22E-6 2.51E-6 2.71E-6 2.79E-6 2.81E-6 2.84E-6 2.92E-6 3.04E-6 3.15E-6 3.11E-6 2.76E-6 2.2E-6 1.63E-6 1.3E-6 1.31E-6 1.71E-6 2.25E-6 2.78E-6 3.2E-6 3.37E-6 3.29E-6 2.97E-6 2.44E-6 1.84E-6 1.29E-6 8.5E-7 5.7E-7 4.8E-7 6.3E-7 1.03E-6 1.51E-6 2.0E-6 2.41E-6 2.66E-6 2.65E-6 2.53E-6 2.34E-6 2.17E-6 2.08E-6 2.1E-6 2.26E-6 2.45E-6 2.62E-6 2.73E-6 2.7E-6 2.65E-6 2.58E-6 2.49E-6 2.41E-6 2.3E-6 2.17E-6 1.99E-6 1.76E-6 1.48E-6 1.28E-6 1.18E-6 1.07E-6 9.3E-7 7.7E-7 6.9E-7 6.9E-7 6.7E-7 6.3E-7 6.1E-7 5.7E-7 6.2E-7 7.0E-7 7.3E-7 6.3E-7 5.2E-7 5.8E-7 9.2E-7 1.43E-6 1.88E-6 2.11E-6 2.26E-6 2.36E-6 2.44E-6 2.5E-6 2.54E-6 2.59E-6 2.62E-6 2.62E-6 2.53E-6 2.29E-6 1.98E-6 1.7E-6 1.45E-6 1.25E-6 9.9E-7 9.6E-7 1.09E-6 1.39E-6 1.87E-6 2.45E-6 2.94E-6 3.29E-6 3.46E-6 3.44E-6 3.32E-6 3.22E-6 3.15E-6 3.09E-6 3.01E-6 2.94E-6 2.84E-6 2.74E-6 2.6E-6 2.38E-6 2.01E-6 1.73E-6 1.65E-6 1.77E-6 2.07E-6 2.61E-6 2.99E-6 3.21E-6 3.28E-6 3.25E-6 3.17E-6 2.96E-6 2.61E-6 2.14E-6 1.66E-6 1.58E-6 1.77E-6 2.18E-6 2.59E-6 2.72E-6 2.37E-6 1.93E-6 1.6E-6 1.46E-6 1.54E-6 1.75E-6 1.82E-6 1.76E-6 1.59E-6 1.38E-6 1.2E-6 1.03E-6 8.8E-7 7.9E-7 7.7E-7 7.6E-7 6.9E-7 5.8E-7 4.5E-7 3.4E-7 3.0E-7 3.0E-7 3.3E-7 3.6E-7 3.9E-7 3.9E-7 3.7E-7 3.5E-7 3.2E-7 3.0E-7 2.6E-7 2.2E-7 1.8E-7 1.5E-7 1.3E-7 1.4E-7 1.4E-7 1.4E-7 1.4E-7 1.2E-7 1.0E-7 8.0E-8 6.0E-8 4.0E-8 2.0E-8 0.0 5.21E-6 5.33E-6 5.44E-6 5.3E-6 4.86E-6 4.23E-6 3.83E-6 3.59E-6 3.57E-6 3.72E-6 3.87E-6 3.53E-6 3.37E-6 3.29E-6 3.23E-6 3.08E-6 3.09E-6 3.3E-6 3.57E-6 3.82E-6 4.03E-6 4.11E-6 4.34E-6 4.48E-6 4.53E-6 4.67E-6 4.69E-6 4.74E-6 4.94E-6 5.12E-6 4.93E-6 4.72E-6 4.53E-6 4.51E-6 4.68E-6 4.92E-6 5.26E-6 5.56E-6 5.77E-6 5.89E-6 5.99E-6 5.98E-6 5.96E-6 5.88E-6 5.83E-6 5.96E-6 5.88E-6 5.86E-6 5.82E-6 5.82E-6 5.98E-6 6.2E-6 6.37E-6 6.44E-6 6.38E-6 6.11E-6 5.85E-6 5.63E-6 5.55E-6 5.59E-6 5.59E-6 5.62E-6 5.79E-6 5.85E-6 5.83E-6 5.87E-6 5.67E-6 5.64E-6 5.6E-6 5.58E-6 5.75E-6 5.68E-6 5.59E-6 5.48E-6 5.38E-6 5.33E-6 5.3E-6 5.22E-6 5.18E-6 5.21E-6 5.33E-6 5.61E-6 5.74E-6 6.0E-6 6.3E-6 6.39E-6 6.84E-6 7.03E-6 7.12E-6 7.06E-6 6.76E-6 6.44E-6 6.14E-6 5.93E-6 5.87E-6 5.97E-6 5.9E-6 5.78E-6 5.55E-6 5.3E-6 5.24E-6 5.11E-6 5.19E-6 5.21E-6 5.21E-6 5.37E-6 5.5E-6 5.68E-6 5.83E-6 5.97E-6 6.11E-6 5.86E-6 5.69E-6 5.43E-6 5.13E-6 4.91E-6 4.77E-6 4.57E-6 4.46E-6 4.41E-6 4.34E-6 4.52E-6 4.73E-6 5.05E-6 5.33E-6 5.31E-6 5.53E-6 5.47E-6 5.55E-6 5.73E-6 5.81E-6 5.63E-6 5.3E-6 4.82E-6 4.43E-6 4.39E-6 4.31E-6 4.73E-6 5.09E-6 5.33E-6 5.56E-6 5.4E-6 5.4E-6 5.34E-6 5.27E-6 5.3E-6 5.24E-6 5.4E-6 5.56E-6 5.63E-6 5.52E-6 5.27E-6 4.86E-6 4.57E-6 4.36E-6 4.11E-6 4.51E-6 4.84E-6 5.23E-6 5.58E-6 5.74E-6 5.82E-6 5.98E-6 6.03E-6 5.99E-6 5.97E-6 5.62E-6 5.86E-6 6.25E-6 6.64E-6 6.99E-6 7.27E-6 7.36E-6 7.47E-6 7.39E-6 6.84E-6 6.22E-6 5.26E-6 4.41E-6 3.43E-6 2.14E-6 2.61E-6 3.09E-6 2.76E-6 1.92E-6 1.18E-6 8.5E-7 6.8E-7 7.1E-7 7.6E-7 6.3E-7 1.0E-6 1.07E-6 1.0E-6 8.8E-7 7.6E-7 6.4E-7 3.7E-7 2.4E-7 2.4E-7 2.6E-7 1.7E-7 1.3E-7 2.2E-7 3.2E-7 2.8E-7 2.6E-7 2.3E-7 1.9E-7 1.5E-7 1.1E-7 9.0E-8 9.0E-8 8.0E-8 7.0E-8 6.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 1.16E-6 1.37E-6 1.65E-6 1.89E-6 2.03E-6 2.04E-6 1.93E-6 1.75E-6 1.59E-6 1.49E-6 1.47E-6 1.51E-6 1.64E-6 1.79E-6 1.92E-6 2.0E-6 2.03E-6 1.95E-6 1.81E-6 1.63E-6 1.46E-6 1.31E-6 1.2E-6 1.12E-6 1.07E-6 1.06E-6 1.05E-6 1.03E-6 1.01E-6 1.01E-6 1.05E-6 1.11E-6 1.21E-6 1.28E-6 1.33E-6 1.36E-6 1.37E-6 1.32E-6 1.22E-6 1.1E-6 9.7E-7 8.6E-7 8.0E-7 7.9E-7 8.1E-7 8.6E-7 9.4E-7 1.03E-6 1.11E-6 1.15E-6 1.18E-6 1.19E-6 1.21E-6 1.25E-6 1.27E-6 1.29E-6 1.29E-6 1.3E-6 1.32E-6 1.33E-6 1.34E-6 1.36E-6 1.36E-6 1.37E-6 1.38E-6 1.4E-6 1.45E-6 1.52E-6 1.57E-6 1.6E-6 1.61E-6 1.59E-6 1.55E-6 1.52E-6 1.5E-6 1.49E-6 1.5E-6 1.53E-6 1.57E-6 1.62E-6 1.67E-6 1.73E-6 1.79E-6 1.82E-6 1.85E-6 1.87E-6 1.88E-6 1.89E-6 1.87E-6 1.83E-6 1.78E-6 1.72E-6 1.66E-6 1.62E-6 1.61E-6 1.61E-6 1.63E-6) (list 1.63E-6 1.6E-6 1.55E-6 1.49E-6 1.43E-6 1.39E-6 1.38E-6 1.4E-6 1.42E-6 1.45E-6 1.45E-6 1.45E-6 1.44E-6 1.44E-6 1.46E-6 1.5E-6 1.55E-6 1.58E-6 1.58E-6 1.56E-6 1.52E-6 1.48E-6 1.45E-6 1.43E-6 1.43E-6 1.48E-6 1.54E-6 1.62E-6 1.69E-6 1.75E-6 1.8E-6 1.84E-6 1.86E-6 1.85E-6 1.81E-6 1.75E-6 1.7E-6 1.66E-6 1.62E-6 1.6E-6 1.61E-6 1.62E-6 1.64E-6 1.65E-6 1.68E-6 1.73E-6 1.78E-6 1.8E-6 1.8E-6 1.77E-6 1.74E-6 1.71E-6 1.69E-6 1.69E-6 1.68E-6 1.71E-6 1.73E-6 1.75E-6 1.79E-6 1.83E-6 1.92E-6 2.0E-6 2.06E-6 2.1E-6 2.11E-6 2.09E-6 2.08E-6 2.06E-6 2.04E-6 2.03E-6 2.04E-6 2.07E-6 2.08E-6 2.07E-6 2.03E-6 1.99E-6 1.95E-6 1.85E-6 1.66E-6 1.37E-6 9.9E-7 6.9E-7 4.9E-7 3.7E-7 2.9E-7 2.2E-7 1.9E-7 1.7E-7 1.6E-7 1.4E-7 1.6E-7 1.5E-7 1.2E-7 9.0E-8 5.0E-8 4.0E-8 5.0E-8 6.0E-8 6.0E-8 6.0E-8 4.0E-8 3.0E-8 3.0E-8 1.0E-8 1.57E-6 1.89E-6 2.07E-6 2.04E-6 1.92E-6 1.72E-6 1.46E-6 1.18E-6 9.8E-7 8.4E-7 7.1E-7 5.5E-7 3.5E-7 2.3E-7 2.7E-7 4.2E-7 6.1E-7 7.2E-7 7.4E-7 7.3E-7 7.2E-7 7.0E-7 6.8E-7 7.0E-7 7.7E-7 8.5E-7 9.1E-7 9.2E-7 8.6E-7 8.0E-7 8.1E-7 8.9E-7 1.04E-6 1.26E-6 1.43E-6 1.51E-6 1.5E-6 1.4E-6 1.26E-6 1.15E-6 1.07E-6 1.0E-6 9.3E-7 8.7E-7 8.5E-7 8.7E-7 9.1E-7 9.4E-7 9.4E-7 9.1E-7 8.6E-7 8.0E-7 7.3E-7 6.3E-7 5.6E-7 5.6E-7 6.4E-7 8.1E-7 1.05E-6 1.25E-6 1.39E-6 1.46E-6 1.47E-6 1.41E-6 1.34E-6 1.29E-6 1.27E-6 1.3E-6 1.34E-6 1.35E-6 1.3E-6 1.21E-6 1.09E-6 1.01E-6 9.9E-7 1.02E-6 1.1E-6 1.2E-6 1.31E-6 1.36E-6 1.35E-6 1.29E-6 1.18E-6 1.07E-6 1.01E-6 9.8E-7 9.8E-7 9.8E-7 9.4E-7 8.9E-7 8.4E-7 7.8E-7 7.2E-7 6.8E-7 6.7E-7 6.8E-7 7.2E-7 7.8E-7 8.5E-7 8.8E-7 8.7E-7 8.4E-7 8.1E-7 7.8E-7 8.0E-7 8.4E-7 8.9E-7 9.3E-7 9.2E-7 9.0E-7 8.8E-7 9.0E-7 9.5E-7 1.01E-6 1.06E-6 1.1E-6 1.12E-6 1.13E-6 1.14E-6 1.16E-6 1.17E-6 1.15E-6 1.13E-6 1.09E-6 1.04E-6 1.0E-6 9.5E-7 9.0E-7 8.6E-7 8.4E-7 8.6E-7 9.2E-7 9.9E-7 1.09E-6 1.19E-6 1.26E-6 1.29E-6 1.27E-6 1.18E-6 1.07E-6 9.7E-7 9.0E-7 8.7E-7 9.0E-7 9.4E-7 9.4E-7 9.2E-7 8.9E-7 8.6E-7 8.2E-7 7.8E-7 7.6E-7 7.4E-7 7.2E-7 7.0E-7 6.3E-7 5.3E-7 4.1E-7 3.0E-7 1.9E-7 1.2E-7 6.0E-8 1.21E-6 1.29E-6 1.32E-6 1.36E-6 1.39E-6 1.43E-6 1.45E-6 1.44E-6 1.42E-6 1.41E-6 1.4E-6 1.41E-6 1.41E-6 1.36E-6 1.28E-6 1.18E-6 1.12E-6 1.18E-6 1.34E-6 1.53E-6 1.69E-6 1.77E-6 1.77E-6 1.72E-6 1.65E-6 1.58E-6 1.53E-6 1.52E-6 1.55E-6 1.63E-6 1.75E-6 1.9E-6 2.05E-6 2.18E-6 2.26E-6 2.29E-6 2.26E-6 2.17E-6 2.03E-6 1.87E-6 1.71E-6 1.57E-6 1.51E-6 1.51E-6 1.53E-6 1.56E-6 1.57E-6 1.55E-6 1.51E-6 1.5E-6 1.54E-6 1.63E-6 1.8E-6 1.96E-6 2.1E-6 2.22E-6 2.32E-6 2.41E-6 2.51E-6 2.61E-6 2.71E-6 2.8E-6 2.87E-6 2.91E-6 2.94E-6 2.95E-6 2.96E-6 2.95E-6 2.94E-6 2.95E-6 2.96E-6 2.97E-6 2.97E-6 2.96E-6 2.94E-6 2.94E-6 2.96E-6 2.99E-6 3.02E-6 3.03E-6 3.01E-6 2.96E-6 2.9E-6 2.84E-6 2.79E-6 2.75E-6 2.7E-6 2.64E-6 2.6E-6 2.61E-6 2.68E-6 2.83E-6 3.04E-6 3.24E-6 3.39E-6 3.48E-6 3.49E-6 3.43E-6 3.32E-6 3.15E-6 2.95E-6 2.73E-6 2.56E-6 2.52E-6 2.57E-6 2.7E-6 2.87E-6 3.01E-6 3.07E-6 3.07E-6 3.02E-6 2.95E-6 2.9E-6 2.89E-6 2.89E-6 2.91E-6 2.92E-6 2.89E-6 2.79E-6 2.63E-6 2.45E-6 2.29E-6 2.21E-6 2.25E-6 2.37E-6 2.57E-6 2.8E-6 3.02E-6 3.18E-6 3.27E-6 3.28E-6 3.2E-6 2.98E-6 2.69E-6 2.43E-6 2.28E-6 2.28E-6 2.47E-6 2.71E-6 2.88E-6 2.93E-6 2.84E-6 2.61E-6 2.35E-6 2.12E-6 1.9E-6 1.66E-6 1.37E-6 1.08E-6 8.5E-7 7.0E-7 6.3E-7 5.9E-7 5.6E-7 5.2E-7 4.7E-7 4.0E-7 3.3E-7 2.8E-7 2.4E-7 2.0E-7 1.6E-7 1.3E-7 1.1E-7 9.0E-8 9.0E-8 8.0E-8 8.0E-8 8.0E-8 7.0E-8 7.0E-8 6.0E-8 6.0E-8 6.0E-8 6.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 1.9E-6 1.61E-6 1.33E-6 4.27E-6 5.87E-6 4.38E-6 6.0E-7 7.5E-7 9.1E-7 1.04E-6 8.9E-7 7.4E-7 6.5E-7 6.1E-7 5.7E-7 5.4E-7 4.4E-7 1.21E-6 1.87E-6 1.21E-6 4.2E-7 2.3E-7 3.2E-7 4.1E-7 3.1E-7 2.1E-7 1.0E-7 7.0E-8 1.0E-7 1.1E-7 8.0E-8 5.0E-8 2.0E-8 4.9E-7 4.5E-7 3.9E-7 3.3E-7 3.0E-7 2.9E-7 2.9E-7 2.9E-7 2.7E-7 2.6E-7 3.0E-7 3.5E-7 3.9E-7 4.0E-7 3.6E-7 3.0E-7 2.4E-7 1.9E-7 1.4E-7 1.3E-7 1.1E-7 8.0E-8 5.0E-8 5.0E-8 5.0E-8 7.0E-8 8.0E-8 8.0E-8 6.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 1.9E-7 1.8E-7 1.6E-7 1.5E-7 1.3E-7 1.2E-7 1.1E-7 1.0E-7 9.0E-8 9.0E-8 8.0E-8 8.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 6.0E-8 6.0E-8 5.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 1.0E-8 0.0 1.2E-7 1.2E-7 1.1E-7 1.1E-7 1.0E-7 1.0E-7 9.0E-8 8.0E-8 7.0E-8 6.0E-8 6.0E-8 6.0E-8 6.0E-8 5.0E-8 5.0E-8 4.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 7.9E-7 8.4E-7 8.9E-7 8.8E-7 8.0E-7 6.8E-7 5.6E-7 4.2E-7 3.0E-7 2.3E-7 2.0E-7 1.9E-7 1.8E-7 1.6E-7 1.5E-7 1.2E-7 1.0E-7 8.0E-8 8.0E-8 8.0E-8 9.0E-8 8.0E-8 7.0E-8 6.0E-8 4.0E-8 3.0E-8 0.0 1.5E-7 1.6E-7 1.6E-7 1.6E-7 1.5E-7 1.4E-7 1.3E-7 1.3E-7 1.3E-7 1.2E-7 1.1E-7 1.0E-7 9.0E-8 1.0E-7 1.0E-7 1.0E-7 1.0E-7 1.0E-7 9.0E-8 8.0E-8 7.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 1.0E-8 8.0E-8 8.0E-8 7.0E-8 6.0E-8 6.0E-8 5.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 9.0E-8 9.0E-8 8.0E-8 7.0E-8 7.0E-8 6.0E-8 5.0E-8 5.0E-8 5.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 1.3E-7 1.4E-7 1.4E-7 1.4E-7 1.5E-7 1.7E-7 1.8E-7 1.8E-7 1.9E-7 1.8E-7 1.7E-7 1.6E-7 1.4E-7 1.2E-7 1.0E-7 9.0E-8 8.0E-8 7.0E-8 5.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.999 5.4E-7 5.5E-7 6.9E-7 5.4E-7 3.4E-7 2.0E-7 1.5E-7 1.3E-7 1.1E-7 9.0E-8 8.0E-8 7.0E-8 8.0E-8 1.0E-7 1.0E-7 9.0E-8 9.0E-8 8.0E-8 7.0E-8 6.0E-8 5.0E-8 4.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 5.0E-8 4.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 6.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 7.0E-8 6.0E-8 5.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 5.0E-8 5.0E-8 5.0E-8 6.0E-8 5.0E-8 4.0E-8 0.0 2.0E-8 2.0E-8 1.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 0.0 4.0E-7 4.8E-7 3.6E-7 3.0E-8 2.0E-8 3.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 2.0E-8 2.0E-8 3.0E-8 3.0E-8 0.0 2.0E-8 3.0E-8 3.0E-8 3.0E-8 4.0E-8 4.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 3.0E-8 3.0E-8 3.0E-8 3.0E-8 2.0E-8 2.0E-8 1.0E-8 1.0E-8 1.0E-8 1.0E-8 1.0E-8 2.0E-8 2.0E-8 1.0E-8 1.0E-8 6.0E-8 5.0E-8 4.0E-8 5.0E-8 6.0E-8 7.0E-8 6.0E-8 5.0E-8 3.0E-8 2.0E-8 4.0E-8 4.0E-8 4.0E-8 4.0E-8 1.0E-8 3.0E-8 4.0E-8 3.0E-8 1.0E-8 1.0E-7 4.0E-8 3.0E-8 3.0E-8 2.0E-8 3.0E-8 3.0E-8 2.0E-8))) (om-load-inputfun (quote input-funbox) "" "alturas" nil))) (om-make-point 47 556) nil nil "&" (list (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 783 458) (om-make-point 32 28) (quote de) "de" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 608 439) (om-make-point 152 28) (quote conversao_para_max/msp) "conversao_para_max/msp" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 3" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 702 491) (om-make-point 159 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 329 327) (om-make-point 32 28) 40 "40" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 297 362) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 241 222) (om-make-point 28 28) (quote >) ">" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 300 216) (om-make-point 54 28) (quote second) "second" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 177 270) (om-make-point 189 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.17 "(lambda (lista1)$  (remove-duplicates lista1 :key #'car))") (quote ((om-load-inputfun (quote input-funbox) "" "LISTA1" nil))) (om-make-point 16 275) nil (list (list (list 174.4125 "0.00141074911434548") (list 108.98807 "0.0016290489904115392") (list 130.81278 "0.0016812610162068368") (list 87.20625 "0.0025436749063021073") (list 22324.8 "0.006430201781857083") (list 871.90455 "0.006716850999238027") (list 697.6501 "0.007015719280547123") (list 16744.036 "0.008150959298800383") (list 217.97614 "0.00869341580972709") (list 1046.5022 "0.008771066715619362") (list 1743.8091 "0.009295448160212373") (list 348.82504 "0.009615123686645782") (list 13950.473 "0.010429185671073559") (list 523.2511 "0.011078806898726533") (list 6975.2363 "0.011172127840763772") (list 261.62555 "0.011551071152430242") (list 2093.0044 "0.012041603961134911") (list 2790.6 "0.012331075736881312") (list 5581.2 "0.012346497123116154") (list 3487.6182 "0.012660357805917538") (list 1395.3 "0.013359447636167995") (list 11162.4 "0.015440259557953246") (list 435.95227 "0.01558145706425556") (list 4186.009 "0.01605072309225116") (list 8372.018 "0.01717337998237339"))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 1934/3 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "END" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" 1))) (om-make-point 2207/3 183) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 2399/3 153) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 2243/3 309) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 2228/3 101) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" ","))) (om-make-point 459 354) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "alturas" 3 (om-make-point 289 106) "" "alturas" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "amplitude" 2 (om-make-point 123 121) "" "amplitude" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 457 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "Tempo sem repetições" 1 (om-make-point 52 45) "" "Tempo sem repetições" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 0 (om-make-point 13 45) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 409 539) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "tempo" nil) (om-load-inputfun (quote input-funbox) "" "tempo sem repetições" nil) (om-load-inputfun (quote input-funbox) "" "amplitude" nil) (om-load-inputfun (quote input-funbox) "" "alturas" nil))) (om-make-point 21 203) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 72 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "alturas" 3 (om-make-point 14 98) "" "alturas" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 139 265) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "amplitude" 2 (om-make-point 144 168) "" "amplitude" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 52 407) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 540 346) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 357 365) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 336 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo sem repetições" 1 (om-make-point 405 93) "" "tempo sem repetições" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 346 213) (om-make-point 37 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "tempo" 0 (om-make-point 284 47) "" "tempo" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 303 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 389 520) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 285 497) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (0 0 4 0 nil 0) (2 0 4 1 nil 0) (6 1 5 1 nil 0) (7 0 6 0 nil 0) (9 0 7 0 nil 0) (4 0 7 1 nil 0) (11 0 9 0 nil 0) (8 0 9 1 nil 0) (10 0 11 0 nil 0) (5 0 12 0 nil 0) (6 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 425 424) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 320 508) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 405 588) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 2 0 nil 0) (12 0 2 1 nil 0) (0 0 2 2 nil 0) (9 0 2 3 nil 0) (7 0 4 0 nil 0) (3 0 4 1 nil 0) (8 0 7 0 nil 0) (5 0 7 1 nil 0) (6 0 7 2 nil 0) (21 0 8 0 nil 0) (18 0 9 0 nil 0) (13 0 10 0 nil 0) (9 0 10 1 nil 0) (11 0 10 2 nil 0) (10 0 12 0 nil 0) (17 0 14 0 nil 0) (4 0 14 1 nil 0) (18 0 17 0 nil 0) (2 0 20 0 nil 0) (22 0 20 1 nil 0) (19 0 21 0 nil 0) (17 0 21 1 nil 0) (16 0 21 2 nil 3) (15 0 21 3 nil 0) (14 0 22 0 nil 0) (22 1 23 0 nil 0) (20 0 24 0 nil 0))) 1 "tempo e sinoides + conversao" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "name" 3 (om-make-point 701 556) "" "name" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fundamental do timbre" 2 (om-make-point 645 347) "" "fundamental do timbre" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "area de afinação" 1 (om-make-point 556 384) "" "area de afinação" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "SDIF" 0 (om-make-point 323 13) "" "SDIF" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 400 645) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 7" (om-make-point 208 113) (quote "compress and expand the timbre.$$1 = normal, without difference.$$e.g.$$0.888 = compress.$1.333 = expanded.") "" (om-make-point 509 188) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 85 45) (quote "SDIF") "" (om-make-point 367 23) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "tempo lista" (om-load-patch-abs1 "tempo lista" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 558/7 305) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 3" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 537/7 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 3" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 376/7 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 3 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 129/2 361) nil nil "&" "tempo lista"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Amplitude" (om-load-patch-abs1 "Amplitude " (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 971/7 406) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 1230/7 283) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 803/7 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 719/7 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (1 0 4 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1046/3 1061/3) nil nil "&" "Amplitude "))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Time | ordem | 10 milissegundos" (om-load-patch-abs1 "Time | ordem | 10 milissegundos" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 1160/7 431) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 1419/7 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 1727/7 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1762/7 214) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 1839/7 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (1 0 5 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 557/4 1445/4) nil nil "&" "Time | ordem | 10 milissegundos"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Correção SDIF" (om-load-patch-abs1 "Correção SDIF" (quote ((let ((box (om-load-boxcall (quote genfun) "SORT-LIST 2" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 355 38) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 308 123) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 201 40) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 226 172) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 225 97) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 102 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 300 265) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 168 271) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 3 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 488 276) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 187 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 512 429) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 379 367) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 339 410) (om-make-point 46 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 224 381) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 462 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 371 236) (om-make-point 43 28) (quote third) "third" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 332 228) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 352 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (6 0 2 0 nil 0) (13 0 3 0 nil 0) (6 0 4 1 nil 0) (10 0 5 0 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (13 0 9 0 nil 0) (13 0 10 0 nil 0) (8 0 10 1 nil 0) (4 0 13 0 nil 0) (12 0 13 1 nil 0) (11 0 13 2 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 387/7 204) nil (list (list (list 37 5073.4233 0.0D0) (list 75 5547.566 0.0D0) (list 137 4071.499 0.0D0) (list 137 4832.776 0.0D0) (list 75 4646.7783 0.0D0) (list 137 5538.6294 0.0D0) (list 87 4575.676 0.0D0) (list 100 4605.955 0.0D0) (list 125 4543.7485 0.0D0) (list 162 4533.435 0.0D0) (list 150 5072.499 0.0D0) (list 162 3988.0823 0.0D0) (list 162 4906.807 0.0D0) (list 187 5469.593 6.083725384087302D-5) (list 0 4018.2158 8.923240966396406D-5) (list 187 4037.7779 9.156173473456875D-5) (list 0 5054.5596 9.350720938527957D-5) (list 0 858.2598 1.0848930105566979D-4) (list 175 5472.1826 1.1518896644702181D-4) (list 0 641.07117 1.4005968114361167D-4) (list 0 439.31018 1.402716152369976D-4) (list 162 5470.459 1.455781311960891D-4) (list 162 5510.6216 1.4744632062502206D-4) (list 150 5469.0 1.5331640315707773D-4) (list 12 5147.1865 1.6716487880330533D-4) (list 100 5139.6245 1.6725936438888312D-4) (list 137 5470.663 1.737030252115801D-4) (list 0 736.6867 1.7682803445495665D-4) (list 87 5148.06 1.7733502318151295D-4) (list 187 3969.6656 1.816147705540061D-4) (list 125 5538.6294 1.8618155445437879D-4) (list 175 755.826 1.9299527048133314D-4) (list 187 670.1141 1.9302543660160154D-4) (list 187 840.864 1.962747483048588D-4) (list 0 520.6059 2.0231149392202497D-4) (list 112 5131.955 2.0255203708074987D-4) (list 150 5514.6416 2.0508907618932426D-4) (list 187 502.0506 2.120716671925038D-4) (list 12 4017.8118 2.1403911523520947D-4) (list 125 5513.1836 2.1733126777689904D-4) (list 175 411.0522 2.208530204370618D-4) (list 25 5140.4307 2.2172724129632116D-4) (list 0 369.52225 2.2537345648743212D-4) (list 175 4034.1255 2.2698077373206616D-4) (list 137 5514.176 2.27788244956173D-4) (list 12 851.8209 2.3046958085615188D-4) (list 75 5150.679 2.3827086261007935D-4) (list 37 5122.0415 2.4675860186107457D-4) (list 50 5145.463 2.4827002198435366D-4) (list 62 5148.4907 2.517990942578763D-4) (list 112 5568.626 2.5606813142076135D-4) (list 112 5517.1587 2.599372819531709D-4) (list 125 5476.129 2.627409412525594D-4) (list 12 645.8338 2.7996787684969604D-4) (list 100 5110.881 2.8238468803465367D-4) (list 25 4047.947 2.857367508113384D-4) (list 162 416.99997 3.039380826521665D-4) (list 50 859.6393 3.0926952604204416D-4) (list 37 856.25226 3.124511567875743D-4) (list 87 488.55454 3.159790358040482D-4) (list 187 367.99176 3.1820908770896495D-4) (list 100 496.1666 3.205732209607959D-4) (list 187 4499.365 3.262310056015849D-4) (list 112 5098.26 3.270027518738061D-4) (list 25 849.6542 3.276833158452064D-4) (list 175 490.5392 3.307014994788915D-4) (list 62 858.33417 3.3407783485017717D-4) (list 175 664.82825 3.4631104790605605D-4) (list 112 4066.4224 3.4957894240505994D-4) (list 12 433.45865 3.4996424801647663D-4) (list 100 4064.0833 3.516024153213948D-4) (list 0 241.58733 3.517308214213699D-4) (list 87 5110.347 3.652042360045016D-4) (list 100 5574.5396 3.65449144737795D-4) (list 125 5114.203 3.6793583421967924D-4) (list 75 491.66916 3.7115751183591783D-4) (list 50 644.3619 3.720240492839366D-4) (list 112 3924.3858 3.7265641731210053D-4) (list 25 646.0374 3.7497375160455704D-4) (list 37 644.4085 3.793392679654062D-4) (list 75 856.09485 3.817376564256847D-4) (list 112 5477.575 3.8770781247876585D-4) (list 87 856.7789 3.931608225684613D-4) (list 112 643.9196 3.97159019485116D-4) (list 100 855.4055 4.0505584911443293D-4) (list 187 5102.044 4.086917033419013D-4) (list 12 522.65845 4.1310559026896954D-4) (list 100 641.3478 4.1620314004831016D-4) (list 162 745.8913 4.163249395787716D-4) (list 12 736.4348 4.215887747704983D-4) (list 25 4021.3394 4.2210426181554795D-4) (list 100 413.27664 4.2239174945279956D-4) (list 162 4030.362 4.248436016496271D-4) (list 125 4071.499 4.3040470336563885D-4) (list 62 644.4737 4.363253538031131D-4) (list 150 423.16107 4.453239671420306D-4) (list 175 3972.8277 4.4860917842015624D-4) (list 62 736.0228 4.54996305052191D-4) (list 87 403.1602 4.5579904690384865D-4) (list 12 379.23868 4.576450155582279D-4) (list 175 843.82886 4.63282223790884D-4) (list 62 500.87482 4.650744085665792D-4) (list 162 483.8076 4.6878954162821174D-4) (list 137 5090.7344 4.7359350719489157D-4) (list 75 736.8831 4.7361099859699607D-4) (list 75 405.35388 4.781590832863003D-4) (list 100 5473.7398 4.8061058623716235D-4) (list 112 498.63745 4.836788575630635D-4) (list 112 850.5253 4.852913843933493D-4) (list 162 658.86536 4.920895444229245D-4) (list 25 510.76996 4.925529356114566D-4) (list 37 505.71423 5.144544993527234D-4) (list 75 642.10096 5.18607150297612D-4) (list 187 283.99896 5.189969087950885D-4) (list 50 503.4683 5.195558769628406D-4) (list 37 4074.3374 5.222732434049249D-4) (list 87 637.6663 5.242057959549129D-4) (list 125 3969.3377 5.324258236214519D-4) (list 75 4044.5806 5.328747793100774D-4) (list 125 5086.361 5.367737030610442D-4) (list 87 5472.5137 5.370484432205558D-4) (list 125 647.3288 5.380766815505922D-4) (list 175 361.5603 5.434412159956992D-4) (list 112 422.42807 5.494874785654247D-4) (list 125 4448.648 5.525561282411218D-4) (list 75 5475.0923 5.601377924904227D-4) (list 137 424.48547 5.808656569570303D-4) (list 62 407.8522 5.828050780110061D-4) (list 87 5580.562 5.907745799049735D-4) (list 175 4497.008 5.926221492700279D-4) (list 100 5521.3413 6.016095285303891D-4) (list 112 3988.1687 6.114218849688768D-4) (list 175 5108.712 6.1831931816414D-4) (list 25 381.00308 6.228076526895165D-4) (list 125 847.6358 6.230767467059195D-4) (list 100 3956.2613 6.243131938390434D-4) (list 25 428.91525 6.246636621654034D-4) (list 137 3968.898 6.252946914173663D-4) (list 125 423.7992 6.269877194426954D-4) (list 50 738.87305 6.405974272638559D-4) (list 37 377.21567 6.445868639275432D-4) (list 150 655.4676 6.495722918771207D-4) (list 150 480.80594 6.522262119688094D-4) (list 150 4499.6265 6.540424656122923D-4) (list 150 5110.6807 6.541889742948115D-4) (list 162 271.25455 6.727299187332392D-4) (list 25 737.52424 6.789427134208381D-4) (list 150 3988.0823 6.816848181188107D-4) (list 137 652.67206 6.896943086758256D-4) (list 125 480.01828 6.939333397895098D-4) (list 162 3974.6199 7.076446199789643D-4) (list 150 4024.8164 7.105542463250458D-4) (list 175 244.39783 7.185927242971957D-4) (list 137 4480.285 7.204135763458908D-4) (list 162 5108.828 7.236591191031039D-4) (list 162 4493.1895 7.268412155099213D-4) (list 162 845.2229 7.316502160392702D-4) (list 150 742.8053 7.377268630079925D-4) (list 50 372.0671 7.446882664225996D-4) (list 150 3972.1262 7.451883284375072D-4) (list 100 3989.5103 7.53137341234833D-4) (list 137 846.82007 7.540853694081306D-4) (list 137 480.77564 7.631697808392346D-4) (list 50 410.745 7.704996387474239D-4) (list 62 216.75019 7.748855277895927D-4) (list 87 747.79346 7.767352508381009D-4) (list 37 739.28437 7.80696514993906D-4) (list 37 4027.047 7.922408985905349D-4) (list 75 5583.475 7.965866243466735D-4) (list 37 418.2908 8.0427888315171D-4) (list 12 239.27693 8.054065983742476D-4) (list 162 353.66846 8.227569633163512D-4) (list 150 846.1217 8.313684375025332D-4) (list 187 5068.1167 8.488880121149123D-4) (list 175 290.78772 8.645622292533517D-4) (list 112 4455.215 8.733466384001076D-4) (list 62 5582.0156 9.247565176337957D-4) (list 50 231.0806 9.555564029142261D-4) (list 187 202.64734 9.650653810240328D-4) (list 0 75.81248 9.704057592898607D-4) (list 137 744.15766 9.804010624065996D-4) (list 150 270.1597 9.990710532292724D-4) (list 100 746.1942 0.0010191675974056125D0) (list 75 217.7388 0.0010314366081729532D0) (list 0 5501.9727 0.0010726175969466567D0) (list 125 746.3398 0.0010967180132865906D0) (list 112 746.7999 0.0011107397731393576D0) (list 25 235.242 0.001114154583774507D0) (list 62 5547.566 0.001114986022002995D0) (list 137 5072.499 0.0011262156767770648D0) (list 37 230.51978 0.0011398002970963717D0) (list 50 5579.541 0.0011548425536602736D0) (list 87 5520.734 0.0011600775178521872D0) (list 87 3952.481 0.0011602735612541438D0) (list 137 4020.222 0.001239647390320897D0) (list 162 294.62915 0.0012463218299672008D0) (list 75 5085.349 0.0013027709210291505D0) (list 50 4030.1653 0.001331246574409306D0) (list 62 355.19354 0.0013577707577496767D0) (list 150 343.81015 0.0014243741752579809D0) (list 187 4577.7754 0.001428050803951919D0) (list 162 158.15357 0.0014330019475892187D0) (list 187 58.509564 0.001448761555366218D0) (list 62 4472.1235 0.0014918660745024682D0) (list 75 3954.1797 0.00150724733248353D0) (list 100 4463.472 0.0015217929612845183D0) (list 75 354.36707 0.0015434824163094163D0) (list 87 353.54773 0.0015628545079380274D0) (list 0 4876.7256 0.0015665184473618865D0) (list 75 5514.0073 0.001581190968863666D0) (list 100 352.86377 0.0016511899884790183D0) (list 62 4026.6477 0.0016830608947202564D0) (list 50 5550.8384 0.0016933127772063017D0) (list 137 270.51755 0.001693845959380269D0) (list 175 5060.4 0.00170719507150352D0) (list 187 4826.274 0.001726233633235097D0) (list 50 5483.55 0.0017718883464112878D0) (list 150 295.07108 0.001790160546079278D0) (list 175 208.01709 0.001806901884265244D0) (list 112 350.37546 0.001829679706133902D0) (list 100 275.70575 0.0018852668581530452D0) (list 50 4464.3525 0.0018957785796374083D0) (list 125 4019.2349 0.0019009209936484695D0) (list 175 38.42094 0.0019112430745735765D0) (list 125 4506.7793 0.0019133922178298235D0) (list 150 128.2282 0.00195141916628927D0) (list 87 4471.8355 0.0019530821591615677D0) (list 62 5506.9346 0.001957227010279894D0) (list 112 275.444 0.001996931154280901D0) (list 150 202.12538 0.00200302223674953D0) (list 75 4021.9898 0.0020038725342601538D0) (list 137 341.82037 0.00205008452758193D0) (list 125 345.27783 0.002062101848423481D0) (list 125 275.1964 0.00212250929325819D0) (list 162 40.516766 0.002172837033867836D0) (list 162 207.97898 0.0022553519811481238D0) (list 150 4533.435 0.0022747989278286696D0) (list 175 65.364785 0.002299226587638259D0) (list 75 4477.8423 0.0023176311515271664D0) (list 137 295.3144 0.00235683168284595D0) (list 37 5551.1426 0.002373614814132452D0) (list 87 4019.3347 0.0024108360521495343D0) (list 112 4019.3994 0.0024159380700439215D0) (list 25 5546.93 0.0025067701935768128D0) (list 100 4018.9846 0.0026000116486102343D0) (list 12 76.40676 0.0026431328151375056D0) (list 12 5499.5273 0.0027220584452152253D0) (list 162 126.94285 0.0027539192233234644D0) (list 37 4463.867 0.002835335908457637D0) (list 187 4674.9707 0.002861911663785577D0) (list 87 247.80281 0.002868205774575472D0) (list 50 78.74696 0.0028869009111076594D0) (list 50 5503.4595 0.002901232335716486D0) (list 75 4507.73 0.0029201237484812737D0) (list 187 103.8253 0.0029203498270362616D0) (list 0 4993.5186 0.0030166127253323794D0) (list 25 5073.4233 0.0030678315088152886D0) (list 62 4492.0444 0.0030986072961241007D0) (list 175 4570.014 0.003113561077043414D0) (list 112 4505.594 0.0031150956638157368D0) (list 0 4701.1504 0.0034150201827287674D0) (list 137 4528.793 0.0036866446025669575D0) (list 62 80.497475 0.003690180368721485D0) (list 12 5035.62 0.003813730552792549D0) (list 187 4714.326 0.003816383657976985D0) (list 37 78.64602 0.003819399978965521D0) (list 187 4771.852 0.003869252745062113D0) (list 175 4616.5606 0.003907995764166117D0) (list 37 5500.678 0.004038307350128889D0) (list 25 80.34833 0.004054139368236065D0) (list 25 5498.8027 0.004105673637241125D0) (list 150 4693.0537 0.004248389508575201D0) (list 162 71.466576 0.004399531986564398D0) (list 162 4640.3477 0.004508925136178732D0) (list 162 4751.1865 0.004698729142546654D0) (list 175 98.00838 0.005074063781648874D0) (list 175 4670.2505 0.005245907232165337D0) (list 125 4745.7876 0.005268155597150326D0) (list 150 4637.221 0.0055804625153541565D0) (list 162 4567.4375 0.0058880578726530075D0) (list 137 5039.885 0.005976794753223658D0) (list 125 64.57058 0.0060194688849151135D0) (list 162 4613.525 0.0061958422884345055D0) (list 150 5039.486 0.006207937374711037D0) (list 187 5007.6465 0.006259973626583815D0) (list 150 4753.0337 0.006368928123265505D0) (list 162 4668.0566 0.006509111728519201D0) (list 137 4672.8145 0.006736799143254757D0) (list 175 4835.0156 0.007190233562141657D0) (list 175 4716.385 0.00754753639921546D0) (list 162 93.46073 0.007562017533928156D0) (list 112 87.97677 0.007677569054067135D0) (list 0 4820.402 0.0079934261739254D0) (list 175 4779.8667 0.008278684690594674D0) (list 100 88.852875 0.008471752516925335D0) (list 75 97.470986 0.008967431262135506D0) (list 150 4567.7285 0.009069799445569516D0) (list 125 86.79302 0.009086866863071919D0) (list 137 4728.6675 0.009519987739622593D0) (list 87 91.12034 0.009576566517353058D0) (list 125 4670.317 0.009613050147891045D0) (list 0 4577.905 0.009787844493985176D0) (list 150 4613.554 0.010057466104626656D0) (list 150 88.360916 0.010196330025792122D0) (list 162 4719.672 0.010428272187709809D0) (list 150 4722.28 0.010672621428966523D0) (list 137 85.45475 0.011004747822880745D0) (list 137 4567.3228 0.011256965808570385D0) (list 12 4712.2075 0.012991564348340035D0) (list 100 5058.141 0.013002014718949795D0) (list 112 4543.7485 0.013331521302461625D0) (list 125 4728.47 0.01396678015589714D0) (list 162 4781.2466 0.0143253393471241D0) (list 62 4549.173 0.014407087117433548D0) (list 125 4569.513 0.015293239615857602D0) (list 175 5007.5845 0.01549501996487379D0) (list 137 4613.382 0.016696279868483544D0) (list 12 4875.082 0.019107339903712273D0) (list 125 5015.3726 0.01970258168876171D0) (list 112 4664.3345 0.020622385665774346D0) (list 75 4531.917 0.021480148658156395D0) (list 150 4779.182 0.02204711176455021D0) (list 112 5031.498 0.022411087527871132D0) (list 87 4538.9087 0.02267199382185936D0) (list 187 4930.268 0.023444177582859993D0) (list 175 4964.2764 0.023474618792533875D0) (list 125 4602.151 0.024664293974637985D0) (list 162 4963.116 0.025512101128697396D0) (list 62 4532.428 0.026005996391177178D0) (list 162 4861.568 0.02695429138839245D0) (list 87 5053.7305 0.0271097831428051D0) (list 162 4873.561 0.027227746322751045D0) (list 150 4880.148 0.028548885136842728D0) (list 162 5003.242 0.030205998569726944D0) (list 150 4956.7617 0.03151651844382286D0) (list 112 4728.1616 0.03252115100622177D0) (list 125 4859.2944 0.033093128353357315D0) (list 175 4908.3994 0.03310779482126236D0) (list 137 4858.6865 0.033531367778778076D0) (list 137 4778.7793 0.0342273935675621D0) (list 25 4727.2354 0.034371864050626755D0) (list 112 4628.69 0.03462633490562439D0) (list 12 4585.827 0.035690080374479294D0) (list 50 4668.2886 0.03688059747219086D0) (list 62 4671.2485 0.039071694016456604D0) (list 50 4538.8765 0.03974338248372078D0) (list 12 4973.795 0.04013298824429512D0) (list 100 4660.8403 0.04013744369149208D0) (list 150 4832.674 0.042033057659864426D0) (list 175 4933.544 0.043388765305280685D0) (list 137 4886.3945 0.04375788941979408D0) (list 62 4605.644 0.044967517256736755D0) (list 75 4669.908 0.04504595696926117D0) (list 162 4905.8384 0.04645102843642235D0) (list 112 4597.6416 0.047295063734054565D0) (list 62 4626.0073 0.047758135944604874D0) (list 125 4777.8223 0.04913937672972679D0) (list 75 4608.7857 0.05010010302066803D0) (list 12 4814.94 0.0501440055668354D0) (list 150 4995.108 0.05385737866163254D0) (list 50 4647.661 0.054360147565603256D0) (list 62 4646.7783 0.054864492267370224D0) (list 37 4641.772 0.05545419454574585D0) (list 100 4628.865 0.056288477033376694D0) (list 137 4831.2173 0.056686241179704666D0) (list 112 4917.4097 0.058438342064619064D0) (list 100 4731.381 0.059656642377376556D0) (list 150 4906.807 0.06046796217560768D0) (list 62 4758.329 0.06198383867740631D0) (list 87 4605.955 0.06223359704017639D0) (list 75 4630.3643 0.06342818588018418D0) (list 162 4934.2363 0.06587497144937515D0) (list 125 4832.776 0.06710106134414673D0) (list 50 4755.5327 0.06727026402950287D0) (list 25 4566.892 0.06763322651386261D0) (list 50 4601.884 0.06831549853086472D0) (list 137 4905.975 0.06898447871208191D0) (list 100 4593.13 0.06953370571136475D0) (list 25 4874.512 0.06987802684307099D0) (list 112 4779.32 0.06991122663021088D0) (list 25 4603.0903 0.0699949786067009D0) (list 62 4570.3657 0.07045847177505493D0) (list 112 4829.5815 0.07152528315782547D0) (list 87 4630.6797 0.07159917801618576D0) (list 37 4754.3384 0.07162930816411972D0) (list 50 4567.3906 0.07666102051734925D0) (list 87 4734.56 0.07942905277013779D0) (list 75 4575.676 0.08250116556882858D0) (list 75 4733.6196 0.0825018584728241D0) (list 37 4565.7144 0.08367864787578583D0) (list 125 4891.965 0.08383123576641083D0) (list 112 4807.4717 0.08493851125240326D0) (list 37 4602.096 0.08527585119009018D0) (list 137 4992.0454 0.08658161014318466D0) (list 87 4579.221 0.08659915626049042D0) (list 112 4882.9434 0.09863772243261337D0) (list 150 4934.639 0.09875986725091934D0) (list 125 4991.194 0.13276910781860352D0) (list 62 4836.257 0.13355205953121185D0) (list 137 4936.6963 0.14038197696208954D0) (list 37 4903.8955 0.14143970608711243D0) (list 25 4811.511 0.1442306488752365D0) (list 37 4866.597 0.1450912058353424D0) (list 100 4877.457 0.14717397093772888D0) (list 100 4808.9556 0.15135233104228974D0) (list 75 4782.439 0.15858937799930573D0) (list 50 4785.3384 0.16325795650482178D0) (list 100 4935.204 0.17065079510211945D0) (list 25 4979.499 0.1724545806646347D0) (list 125 4941.219 0.17671602964401245D0) (list 112 4942.435 0.18618333339691162D0) (list 50 4899.655 0.20364263653755188D0) (list 87 4808.72 0.21945957839488983D0) (list 112 4990.544 0.22021234035491943D0) (list 50 4865.803 0.22213250398635864D0) (list 87 4871.499 0.2249893844127655D0) (list 75 4904.2095 0.23504586517810822D0) (list 62 4899.8115 0.23952633142471314D0) (list 37 4810.4565 0.24435186386108399D0) (list 75 4808.627 0.2565159797668457D0) (list 87 4929.2666 0.27419525384902954D0) (list 37 4943.9898 0.2835361361503601D0) (list 100 4987.4736 0.3451738655567169D0) (list 75 4931.733 0.3952142000198364D0) (list 37 4985.7637 0.4206669330596924D0) (list 50 4940.238 0.44821542501449585D0) (list 62 4937.2754 0.4837762117385864D0) (list 87 4984.4917 0.5183560848236084D0) (list 50 4986.9204 0.6813600659370422D0) (list 75 4984.289 0.6951508522033691D0) (list 62 4985.5933 0.7796170115470886D0)) (list (list 37 5073.4233 0.0D0) (list 75 5547.566 0.0D0) (list 137 4071.499 0.0D0) (list 137 4832.776 0.0D0) (list 75 4646.7783 0.0D0) (list 137 5538.6294 0.0D0) (list 87 4575.676 0.0D0) (list 100 4605.955 0.0D0) (list 125 4543.7485 0.0D0) (list 162 4533.435 0.0D0) (list 150 5072.499 0.0D0) (list 162 3988.0823 0.0D0) (list 162 4906.807 0.0D0) (list 187 5469.593 6.083725384087302D-5) (list 0 4018.2158 8.923240966396406D-5) (list 187 4037.7779 9.156173473456875D-5) (list 0 5054.5596 9.350720938527957D-5) (list 0 858.2598 1.0848930105566979D-4) (list 175 5472.1826 1.1518896644702181D-4) (list 0 641.07117 1.4005968114361167D-4) (list 0 439.31018 1.402716152369976D-4) (list 162 5470.459 1.455781311960891D-4) (list 162 5510.6216 1.4744632062502206D-4) (list 150 5469.0 1.5331640315707773D-4) (list 12 5147.1865 1.6716487880330533D-4) (list 100 5139.6245 1.6725936438888312D-4) (list 137 5470.663 1.737030252115801D-4) (list 0 736.6867 1.7682803445495665D-4) (list 87 5148.06 1.7733502318151295D-4) (list 187 3969.6656 1.816147705540061D-4) (list 125 5538.6294 1.8618155445437879D-4) (list 175 755.826 1.9299527048133314D-4) (list 187 670.1141 1.9302543660160154D-4) (list 187 840.864 1.962747483048588D-4) (list 0 520.6059 2.0231149392202497D-4) (list 112 5131.955 2.0255203708074987D-4) (list 150 5514.6416 2.0508907618932426D-4) (list 187 502.0506 2.120716671925038D-4) (list 12 4017.8118 2.1403911523520947D-4) (list 125 5513.1836 2.1733126777689904D-4) (list 175 411.0522 2.208530204370618D-4) (list 25 5140.4307 2.2172724129632116D-4) (list 0 369.52225 2.2537345648743212D-4) (list 175 4034.1255 2.2698077373206616D-4) (list 137 5514.176 2.27788244956173D-4) (list 12 851.8209 2.3046958085615188D-4) (list 75 5150.679 2.3827086261007935D-4) (list 37 5122.0415 2.4675860186107457D-4) (list 50 5145.463 2.4827002198435366D-4) (list 62 5148.4907 2.517990942578763D-4) (list 112 5568.626 2.5606813142076135D-4) (list 112 5517.1587 2.599372819531709D-4) (list 125 5476.129 2.627409412525594D-4) (list 12 645.8338 2.7996787684969604D-4) (list 100 5110.881 2.8238468803465367D-4) (list 25 4047.947 2.857367508113384D-4) (list 162 416.99997 3.039380826521665D-4) (list 50 859.6393 3.0926952604204416D-4) (list 37 856.25226 3.124511567875743D-4) (list 87 488.55454 3.159790358040482D-4) (list 187 367.99176 3.1820908770896495D-4) (list 100 496.1666 3.205732209607959D-4) (list 187 4499.365 3.262310056015849D-4) (list 112 5098.26 3.270027518738061D-4) (list 25 849.6542 3.276833158452064D-4) (list 175 490.5392 3.307014994788915D-4) (list 62 858.33417 3.3407783485017717D-4) (list 175 664.82825 3.4631104790605605D-4) (list 112 4066.4224 3.4957894240505994D-4) (list 12 433.45865 3.4996424801647663D-4) (list 100 4064.0833 3.516024153213948D-4) (list 0 241.58733 3.517308214213699D-4) (list 87 5110.347 3.652042360045016D-4) (list 100 5574.5396 3.65449144737795D-4) (list 125 5114.203 3.6793583421967924D-4) (list 75 491.66916 3.7115751183591783D-4) (list 50 644.3619 3.720240492839366D-4) (list 112 3924.3858 3.7265641731210053D-4) (list 25 646.0374 3.7497375160455704D-4) (list 37 644.4085 3.793392679654062D-4) (list 75 856.09485 3.817376564256847D-4) (list 112 5477.575 3.8770781247876585D-4) (list 87 856.7789 3.931608225684613D-4) (list 112 643.9196 3.97159019485116D-4) (list 100 855.4055 4.0505584911443293D-4) (list 187 5102.044 4.086917033419013D-4) (list 12 522.65845 4.1310559026896954D-4) (list 100 641.3478 4.1620314004831016D-4) (list 162 745.8913 4.163249395787716D-4) (list 12 736.4348 4.215887747704983D-4) (list 25 4021.3394 4.2210426181554795D-4) (list 100 413.27664 4.2239174945279956D-4) (list 162 4030.362 4.248436016496271D-4) (list 125 4071.499 4.3040470336563885D-4) (list 62 644.4737 4.363253538031131D-4) (list 150 423.16107 4.453239671420306D-4) (list 175 3972.8277 4.4860917842015624D-4) (list 62 736.0228 4.54996305052191D-4) (list 87 403.1602 4.5579904690384865D-4) (list 12 379.23868 4.576450155582279D-4) (list 175 843.82886 4.63282223790884D-4) (list 62 500.87482 4.650744085665792D-4) (list 162 483.8076 4.6878954162821174D-4) (list 137 5090.7344 4.7359350719489157D-4) (list 75 736.8831 4.7361099859699607D-4) (list 75 405.35388 4.781590832863003D-4) (list 100 5473.7398 4.8061058623716235D-4) (list 112 498.63745 4.836788575630635D-4) (list 112 850.5253 4.852913843933493D-4) (list 162 658.86536 4.920895444229245D-4) (list 25 510.76996 4.925529356114566D-4) (list 37 505.71423 5.144544993527234D-4) (list 75 642.10096 5.18607150297612D-4) (list 187 283.99896 5.189969087950885D-4) (list 50 503.4683 5.195558769628406D-4) (list 37 4074.3374 5.222732434049249D-4) (list 87 637.6663 5.242057959549129D-4) (list 125 3969.3377 5.324258236214519D-4) (list 75 4044.5806 5.328747793100774D-4) (list 125 5086.361 5.367737030610442D-4) (list 87 5472.5137 5.370484432205558D-4) (list 125 647.3288 5.380766815505922D-4) (list 175 361.5603 5.434412159956992D-4) (list 112 422.42807 5.494874785654247D-4) (list 125 4448.648 5.525561282411218D-4) (list 75 5475.0923 5.601377924904227D-4) (list 137 424.48547 5.808656569570303D-4) (list 62 407.8522 5.828050780110061D-4) (list 87 5580.562 5.907745799049735D-4) (list 175 4497.008 5.926221492700279D-4) (list 100 5521.3413 6.016095285303891D-4) (list 112 3988.1687 6.114218849688768D-4) (list 175 5108.712 6.1831931816414D-4) (list 25 381.00308 6.228076526895165D-4) (list 125 847.6358 6.230767467059195D-4) (list 100 3956.2613 6.243131938390434D-4) (list 25 428.91525 6.246636621654034D-4) (list 137 3968.898 6.252946914173663D-4) (list 125 423.7992 6.269877194426954D-4) (list 50 738.87305 6.405974272638559D-4) (list 37 377.21567 6.445868639275432D-4) (list 150 655.4676 6.495722918771207D-4) (list 150 480.80594 6.522262119688094D-4) (list 150 4499.6265 6.540424656122923D-4) (list 150 5110.6807 6.541889742948115D-4) (list 162 271.25455 6.727299187332392D-4) (list 25 737.52424 6.789427134208381D-4) (list 150 3988.0823 6.816848181188107D-4) (list 137 652.67206 6.896943086758256D-4) (list 125 480.01828 6.939333397895098D-4) (list 162 3974.6199 7.076446199789643D-4) (list 150 4024.8164 7.105542463250458D-4) (list 175 244.39783 7.185927242971957D-4) (list 137 4480.285 7.204135763458908D-4) (list 162 5108.828 7.236591191031039D-4) (list 162 4493.1895 7.268412155099213D-4) (list 162 845.2229 7.316502160392702D-4) (list 150 742.8053 7.377268630079925D-4) (list 50 372.0671 7.446882664225996D-4) (list 150 3972.1262 7.451883284375072D-4) (list 100 3989.5103 7.53137341234833D-4) (list 137 846.82007 7.540853694081306D-4) (list 137 480.77564 7.631697808392346D-4) (list 50 410.745 7.704996387474239D-4) (list 62 216.75019 7.748855277895927D-4) (list 87 747.79346 7.767352508381009D-4) (list 37 739.28437 7.80696514993906D-4) (list 37 4027.047 7.922408985905349D-4) (list 75 5583.475 7.965866243466735D-4) (list 37 418.2908 8.0427888315171D-4) (list 12 239.27693 8.054065983742476D-4) (list 162 353.66846 8.227569633163512D-4) (list 150 846.1217 8.313684375025332D-4) (list 187 5068.1167 8.488880121149123D-4) (list 175 290.78772 8.645622292533517D-4) (list 112 4455.215 8.733466384001076D-4) (list 62 5582.0156 9.247565176337957D-4) (list 50 231.0806 9.555564029142261D-4) (list 187 202.64734 9.650653810240328D-4) (list 0 75.81248 9.704057592898607D-4) (list 137 744.15766 9.804010624065996D-4) (list 150 270.1597 9.990710532292724D-4) (list 100 746.1942 0.0010191675974056125D0) (list 75 217.7388 0.0010314366081729532D0) (list 0 5501.9727 0.0010726175969466567D0) (list 125 746.3398 0.0010967180132865906D0) (list 112 746.7999 0.0011107397731393576D0) (list 25 235.242 0.001114154583774507D0) (list 62 5547.566 0.001114986022002995D0) (list 137 5072.499 0.0011262156767770648D0) (list 37 230.51978 0.0011398002970963717D0) (list 50 5579.541 0.0011548425536602736D0) (list 87 5520.734 0.0011600775178521872D0) (list 87 3952.481 0.0011602735612541438D0) (list 137 4020.222 0.001239647390320897D0) (list 162 294.62915 0.0012463218299672008D0) (list 75 5085.349 0.0013027709210291505D0) (list 50 4030.1653 0.001331246574409306D0) (list 62 355.19354 0.0013577707577496767D0) (list 150 343.81015 0.0014243741752579809D0) (list 187 4577.7754 0.001428050803951919D0) (list 162 158.15357 0.0014330019475892187D0) (list 187 58.509564 0.001448761555366218D0) (list 62 4472.1235 0.0014918660745024682D0) (list 75 3954.1797 0.00150724733248353D0) (list 100 4463.472 0.0015217929612845183D0) (list 75 354.36707 0.0015434824163094163D0) (list 87 353.54773 0.0015628545079380274D0) (list 0 4876.7256 0.0015665184473618865D0) (list 75 5514.0073 0.001581190968863666D0) (list 100 352.86377 0.0016511899884790183D0) (list 62 4026.6477 0.0016830608947202564D0) (list 50 5550.8384 0.0016933127772063017D0) (list 137 270.51755 0.001693845959380269D0) (list 175 5060.4 0.00170719507150352D0) (list 187 4826.274 0.001726233633235097D0) (list 50 5483.55 0.0017718883464112878D0) (list 150 295.07108 0.001790160546079278D0) (list 175 208.01709 0.001806901884265244D0) (list 112 350.37546 0.001829679706133902D0) (list 100 275.70575 0.0018852668581530452D0) (list 50 4464.3525 0.0018957785796374083D0) (list 125 4019.2349 0.0019009209936484695D0) (list 175 38.42094 0.0019112430745735765D0) (list 125 4506.7793 0.0019133922178298235D0) (list 150 128.2282 0.00195141916628927D0) (list 87 4471.8355 0.0019530821591615677D0) (list 62 5506.9346 0.001957227010279894D0) (list 112 275.444 0.001996931154280901D0) (list 150 202.12538 0.00200302223674953D0) (list 75 4021.9898 0.0020038725342601538D0) (list 137 341.82037 0.00205008452758193D0) (list 125 345.27783 0.002062101848423481D0) (list 125 275.1964 0.00212250929325819D0) (list 162 40.516766 0.002172837033867836D0) (list 162 207.97898 0.0022553519811481238D0) (list 150 4533.435 0.0022747989278286696D0) (list 175 65.364785 0.002299226587638259D0) (list 75 4477.8423 0.0023176311515271664D0) (list 137 295.3144 0.00235683168284595D0) (list 37 5551.1426 0.002373614814132452D0) (list 87 4019.3347 0.0024108360521495343D0) (list 112 4019.3994 0.0024159380700439215D0) (list 25 5546.93 0.0025067701935768128D0) (list 100 4018.9846 0.0026000116486102343D0) (list 12 76.40676 0.0026431328151375056D0) (list 12 5499.5273 0.0027220584452152253D0) (list 162 126.94285 0.0027539192233234644D0) (list 37 4463.867 0.002835335908457637D0) (list 187 4674.9707 0.002861911663785577D0) (list 87 247.80281 0.002868205774575472D0) (list 50 78.74696 0.0028869009111076594D0) (list 50 5503.4595 0.002901232335716486D0) (list 75 4507.73 0.0029201237484812737D0) (list 187 103.8253 0.0029203498270362616D0) (list 0 4993.5186 0.0030166127253323794D0) (list 25 5073.4233 0.0030678315088152886D0) (list 62 4492.0444 0.0030986072961241007D0) (list 175 4570.014 0.003113561077043414D0) (list 112 4505.594 0.0031150956638157368D0) (list 0 4701.1504 0.0034150201827287674D0) (list 137 4528.793 0.0036866446025669575D0) (list 62 80.497475 0.003690180368721485D0) (list 12 5035.62 0.003813730552792549D0) (list 187 4714.326 0.003816383657976985D0) (list 37 78.64602 0.003819399978965521D0) (list 187 4771.852 0.003869252745062113D0) (list 175 4616.5606 0.003907995764166117D0) (list 37 5500.678 0.004038307350128889D0) (list 25 80.34833 0.004054139368236065D0) (list 25 5498.8027 0.004105673637241125D0) (list 150 4693.0537 0.004248389508575201D0) (list 162 71.466576 0.004399531986564398D0) (list 162 4640.3477 0.004508925136178732D0) (list 162 4751.1865 0.004698729142546654D0) (list 175 98.00838 0.005074063781648874D0) (list 175 4670.2505 0.005245907232165337D0) (list 125 4745.7876 0.005268155597150326D0) (list 150 4637.221 0.0055804625153541565D0) (list 162 4567.4375 0.0058880578726530075D0) (list 137 5039.885 0.005976794753223658D0) (list 125 64.57058 0.0060194688849151135D0) (list 162 4613.525 0.0061958422884345055D0) (list 150 5039.486 0.006207937374711037D0) (list 187 5007.6465 0.006259973626583815D0) (list 150 4753.0337 0.006368928123265505D0) (list 162 4668.0566 0.006509111728519201D0) (list 137 4672.8145 0.006736799143254757D0) (list 175 4835.0156 0.007190233562141657D0) (list 175 4716.385 0.00754753639921546D0) (list 162 93.46073 0.007562017533928156D0) (list 112 87.97677 0.007677569054067135D0) (list 0 4820.402 0.0079934261739254D0) (list 175 4779.8667 0.008278684690594674D0) (list 100 88.852875 0.008471752516925335D0) (list 75 97.470986 0.008967431262135506D0) (list 150 4567.7285 0.009069799445569516D0) (list 125 86.79302 0.009086866863071919D0) (list 137 4728.6675 0.009519987739622593D0) (list 87 91.12034 0.009576566517353058D0) (list 125 4670.317 0.009613050147891045D0) (list 0 4577.905 0.009787844493985176D0) (list 150 4613.554 0.010057466104626656D0) (list 150 88.360916 0.010196330025792122D0) (list 162 4719.672 0.010428272187709809D0) (list 150 4722.28 0.010672621428966523D0) (list 137 85.45475 0.011004747822880745D0) (list 137 4567.3228 0.011256965808570385D0) (list 12 4712.2075 0.012991564348340035D0) (list 100 5058.141 0.013002014718949795D0) (list 112 4543.7485 0.013331521302461625D0) (list 125 4728.47 0.01396678015589714D0) (list 162 4781.2466 0.0143253393471241D0) (list 62 4549.173 0.014407087117433548D0) (list 125 4569.513 0.015293239615857602D0) (list 175 5007.5845 0.01549501996487379D0) (list 137 4613.382 0.016696279868483544D0) (list 12 4875.082 0.019107339903712273D0) (list 125 5015.3726 0.01970258168876171D0) (list 112 4664.3345 0.020622385665774346D0) (list 75 4531.917 0.021480148658156395D0) (list 150 4779.182 0.02204711176455021D0) (list 112 5031.498 0.022411087527871132D0) (list 87 4538.9087 0.02267199382185936D0) (list 187 4930.268 0.023444177582859993D0) (list 175 4964.2764 0.023474618792533875D0) (list 125 4602.151 0.024664293974637985D0) (list 162 4963.116 0.025512101128697396D0) (list 62 4532.428 0.026005996391177178D0) (list 162 4861.568 0.02695429138839245D0) (list 87 5053.7305 0.0271097831428051D0) (list 162 4873.561 0.027227746322751045D0) (list 150 4880.148 0.028548885136842728D0) (list 162 5003.242 0.030205998569726944D0) (list 150 4956.7617 0.03151651844382286D0) (list 112 4728.1616 0.03252115100622177D0) (list 125 4859.2944 0.033093128353357315D0) (list 175 4908.3994 0.03310779482126236D0) (list 137 4858.6865 0.033531367778778076D0) (list 137 4778.7793 0.0342273935675621D0) (list 25 4727.2354 0.034371864050626755D0) (list 112 4628.69 0.03462633490562439D0) (list 12 4585.827 0.035690080374479294D0) (list 50 4668.2886 0.03688059747219086D0) (list 62 4671.2485 0.039071694016456604D0) (list 50 4538.8765 0.03974338248372078D0) (list 12 4973.795 0.04013298824429512D0) (list 100 4660.8403 0.04013744369149208D0) (list 150 4832.674 0.042033057659864426D0) (list 175 4933.544 0.043388765305280685D0) (list 137 4886.3945 0.04375788941979408D0) (list 62 4605.644 0.044967517256736755D0) (list 75 4669.908 0.04504595696926117D0) (list 162 4905.8384 0.04645102843642235D0) (list 112 4597.6416 0.047295063734054565D0) (list 62 4626.0073 0.047758135944604874D0) (list 125 4777.8223 0.04913937672972679D0) (list 75 4608.7857 0.05010010302066803D0) (list 12 4814.94 0.0501440055668354D0) (list 150 4995.108 0.05385737866163254D0) (list 50 4647.661 0.054360147565603256D0) (list 62 4646.7783 0.054864492267370224D0) (list 37 4641.772 0.05545419454574585D0) (list 100 4628.865 0.056288477033376694D0) (list 137 4831.2173 0.056686241179704666D0) (list 112 4917.4097 0.058438342064619064D0) (list 100 4731.381 0.059656642377376556D0) (list 150 4906.807 0.06046796217560768D0) (list 62 4758.329 0.06198383867740631D0) (list 87 4605.955 0.06223359704017639D0) (list 75 4630.3643 0.06342818588018418D0) (list 162 4934.2363 0.06587497144937515D0) (list 125 4832.776 0.06710106134414673D0) (list 50 4755.5327 0.06727026402950287D0) (list 25 4566.892 0.06763322651386261D0) (list 50 4601.884 0.06831549853086472D0) (list 137 4905.975 0.06898447871208191D0) (list 100 4593.13 0.06953370571136475D0) (list 25 4874.512 0.06987802684307099D0) (list 112 4779.32 0.06991122663021088D0) (list 25 4603.0903 0.0699949786067009D0) (list 62 4570.3657 0.07045847177505493D0) (list 112 4829.5815 0.07152528315782547D0) (list 87 4630.6797 0.07159917801618576D0) (list 37 4754.3384 0.07162930816411972D0) (list 50 4567.3906 0.07666102051734925D0) (list 87 4734.56 0.07942905277013779D0) (list 75 4575.676 0.08250116556882858D0) (list 75 4733.6196 0.0825018584728241D0) (list 37 4565.7144 0.08367864787578583D0) (list 125 4891.965 0.08383123576641083D0) (list 112 4807.4717 0.08493851125240326D0) (list 37 4602.096 0.08527585119009018D0) (list 137 4992.0454 0.08658161014318466D0) (list 87 4579.221 0.08659915626049042D0) (list 112 4882.9434 0.09863772243261337D0) (list 150 4934.639 0.09875986725091934D0) (list 125 4991.194 0.13276910781860352D0) (list 62 4836.257 0.13355205953121185D0) (list 137 4936.6963 0.14038197696208954D0) (list 37 4903.8955 0.14143970608711243D0) (list 25 4811.511 0.1442306488752365D0) (list 37 4866.597 0.1450912058353424D0) (list 100 4877.457 0.14717397093772888D0) (list 100 4808.9556 0.15135233104228974D0) (list 75 4782.439 0.15858937799930573D0) (list 50 4785.3384 0.16325795650482178D0) (list 100 4935.204 0.17065079510211945D0) (list 25 4979.499 0.1724545806646347D0) (list 125 4941.219 0.17671602964401245D0) (list 112 4942.435 0.18618333339691162D0) (list 50 4899.655 0.20364263653755188D0) (list 87 4808.72 0.21945957839488983D0) (list 112 4990.544 0.22021234035491943D0) (list 50 4865.803 0.22213250398635864D0) (list 87 4871.499 0.2249893844127655D0) (list 75 4904.2095 0.23504586517810822D0) (list 62 4899.8115 0.23952633142471314D0) (list 37 4810.4565 0.24435186386108399D0) (list 75 4808.627 0.2565159797668457D0) (list 87 4929.2666 0.27419525384902954D0) (list 37 4943.9898 0.2835361361503601D0) (list 100 4987.4736 0.3451738655567169D0) (list 75 4931.733 0.3952142000198364D0) (list 37 4985.7637 0.4206669330596924D0) (list 50 4940.238 0.44821542501449585D0) (list 62 4937.2754 0.4837762117385864D0) (list 87 4984.4917 0.5183560848236084D0) (list 50 4986.9204 0.6813600659370422D0) (list 75 4984.289 0.6951508522033691D0) (list 62 4985.5933 0.7796170115470886D0) (list 175 162 122.480835 4977.179 0.0030108510982245207D0 0.026687487959861756D0)) (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 6)) nil "Correção SDIF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CATANZARO - Extraindo Parciais de SDIF" (om-load-patch-abs1 "CATANZARO - Extraindo Parciais de SDIF" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 242 202) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 195 444) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 163 502) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 48 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 209 366) nil nil "&" (list (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 874 379) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 767 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 957.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/07/28 16:52:06" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 862 40) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 970 94) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT 2" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 875 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 624 193) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 494 377) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 454 178) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 169 275) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 2" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 45.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/07/28 16:52:06" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 108 257) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil))) (om-make-point 158 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 164 404) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 264 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 252 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 21 462) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 0.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/07/28 16:52:06" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 8 160) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 198) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 19 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 12 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 484 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 384 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 7) (5 1 0 1 nil 6) (19 0 1 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 4 2 nil 0) (7 1 5 0 nil 0) (5 0 6 0 nil 4) (7 2 6 1 nil 3) (7 0 6 2 nil 2) (4 0 6 3 nil 5) (19 0 7 0 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (13 0 11 1 nil 0) (11 0 12 0 nil 0) (7 0 12 1 nil 1) (6 0 12 2 nil 0) (19 0 13 0 nil 0) (17 0 14 0 nil 0) (15 0 17 0 nil 0) (16 0 17 1 nil 0) (18 0 17 2 nil 0) (20 0 18 0 nil 0) (20 0 19 0 nil 0) (0 1 21 0 nil 8) (12 0 22 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "elegante map car" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 92 203) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 352 443) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 340 473) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 312 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 222 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 355 218) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 250 402) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 292 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 454 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 203 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 1 nil 0) (8 0 5 0 nil 0) (3 0 6 0 nil 0) (1 0 9 0 nil 0) (6 0 10 0 nil 0))) 1 "elegante map car" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 151 306) (om-make-point 106 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 192 270) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 229 269) (om-make-point 40 28) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 42 136) (om-make-point 346 54) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 108 102) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 143 102) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 206 48) (om-make-point 55 28) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 1 0 0 nil 0) (4 0 1 1 nil 0) (1 0 2 0 nil 0) (6 0 4 0 nil 0) (9 0 5 0 nil 0) (9 1 5 1 nil 0) (5 0 6 0 nil 0) (7 0 6 1 nil 0) (8 0 6 2 nil 0) (3 0 9 0 nil 0) (10 0 9 1 nil 0) (11 0 9 2 nil 0) (11 0 9 3 nil 0) (12 0 9 4 nil 0))) 6.17 nil "" (om-make-point 238 36) (om-make-point 500 603)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 686/3 809/9) nil (list (list (list (list 0.0D0 5501.97314453125D0 0.0010726175969466567D0 0.0D0)) (list (list 0.0D0 5499.52783203125D0 0.0027220584452152253D0 0.01249433122575283D0)) (list (list 0.0D0 5498.802734375D0 0.004105673637241125D0 0.02498866245150566D0)) (list (list 0.0D0 5500.67822265625D0 0.004038307350128889D0 0.03748299181461334D0)) (list (list 0.0D0 5503.45947265625D0 0.002901232335716486D0 0.04997732490301132D0)) (list (list 0.0D0 5506.9345703125D0 0.001957227010279894D0 0.062471654266119D0)) (list (list 0.0D0 5514.00732421875D0 0.001581190968863666D0 0.07496598362922669D0)) (list (list 0.0D0 5520.73388671875D0 0.0011600775178521872D0 0.08746031671762467D0)) (list (list 0.0D0 5521.34130859375D0 6.016095285303891D-4 0.09995464980602265D0)) (list (list 0.0D0 5517.15869140625D0 2.599372819531709D-4 0.11244898289442063D0)) (list (list 0.0D0 5513.18359375D0 2.1733126777689904D-4 0.124943308532238D0)) (list (list 0.0D0 5514.17578125D0 2.27788244956173D-4 0.137437641620636D0)) (list (list 0.0D0 5514.6416015625D0 2.0508907618932426D-4 0.14993196725845337D0)) (list (list 0.0D0 5510.62158203125D0 1.4744632062502206D-4 0.16242629289627075D0)) (list (list 1.0D0 5054.5595703125D0 9.350720938527957D-5 0.0D0)) (list (list 1.0D0 5035.6201171875D0 0.003813730552792549D0 0.01249433122575283D0)) (list (list 1.0D0 5073.42333984375D0 0.0030678315088152886D0 0.02498866245150566D0)) (list (list 1.0D0 5073.42333984375D0 0.0D0 0.03748299181461334D0)) (list (list 2.0D0 4993.5185546875D0 0.0030166127253323794D0 0.0D0)) (list (list 2.0D0 4973.794921875D0 0.04013298824429512D0 0.01249433122575283D0)) (list (list 2.0D0 4979.4990234375D0 0.1724545806646347D0 0.02498866245150566D0)) (list (list 2.0D0 4985.763671875D0 0.4206669330596924D0 0.03748299181461334D0)) (list (list 2.0D0 4986.92041015625D0 0.6813600659370422D0 0.04997732490301132D0)) (list (list 2.0D0 4985.59326171875D0 0.7796170115470886D0 0.062471654266119D0)) (list (list 2.0D0 4984.2890625D0 0.6951508522033691D0 0.07496598362922669D0)) (list (list 2.0D0 4984.49169921875D0 0.5183560848236084D0 0.08746031671762467D0)) (list (list 2.0D0 4987.4736328125D0 0.3451738655567169D0 0.09995464980602265D0)) (list (list 2.0D0 4990.5439453125D0 0.22021234035491943D0 0.11244898289442063D0)) (list (list 2.0D0 4991.19384765625D0 0.13276910781860352D0 0.124943308532238D0)) (list (list 2.0D0 4992.04541015625D0 0.08658161014318466D0 0.137437641620636D0)) (list (list 2.0D0 4995.10791015625D0 0.05385737866163254D0 0.14993196725845337D0)) (list (list 2.0D0 5003.2421875D0 0.030205998569726944D0 0.16242629289627075D0)) (list (list 2.0D0 5007.58447265625D0 0.01549501996487379D0 0.17492063343524933D0)) (list (list 2.0D0 5007.64697265625D0 0.006259973626583815D0 0.1874149590730667D0)) (list (list 3.0D0 4876.7255859375D0 0.0015665184473618865D0 0.0D0)) (list (list 3.0D0 4875.08203125D0 0.019107339903712273D0 0.01249433122575283D0)) (list (list 3.0D0 4874.51220703125D0 0.06987802684307099D0 0.02498866245150566D0)) (list (list 3.0D0 4903.8955078125D0 0.14143970608711243D0 0.03748299181461334D0)) (list (list 3.0D0 4899.65478515625D0 0.20364263653755188D0 0.04997732490301132D0)) (list (list 3.0D0 4899.8115234375D0 0.23952633142471314D0 0.062471654266119D0)) (list (list 3.0D0 4904.20947265625D0 0.23504586517810822D0 0.07496598362922669D0)) (list (list 3.0D0 4871.4990234375D0 0.2249893844127655D0 0.08746031671762467D0)) (list (list 3.0D0 4877.45703125D0 0.14717397093772888D0 0.09995464980602265D0)) (list (list 3.0D0 4882.943359375D0 0.09863772243261337D0 0.11244898289442063D0)) (list (list 3.0D0 4859.29443359375D0 0.033093128353357315D0 0.124943308532238D0)) (list (list 3.0D0 4858.6865234375D0 0.033531367778778076D0 0.137437641620636D0)) (list (list 3.0D0 4880.14794921875D0 0.028548885136842728D0 0.14993196725845337D0)) (list (list 3.0D0 4905.83837890625D0 0.04645102843642235D0 0.16242629289627075D0)) (list (list 3.0D0 4933.5439453125D0 0.043388765305280685D0 0.17492063343524933D0)) (list (list 3.0D0 4930.26806640625D0 0.023444177582859993D0 0.1874149590730667D0)) (list (list 4.0D0 4820.40185546875D0 0.0079934261739254D0 0.0D0)) (list (list 4.0D0 4814.93994140625D0 0.0501440055668354D0 0.01249433122575283D0)) (list (list 4.0D0 4811.51123046875D0 0.1442306488752365D0 0.02498866245150566D0)) (list (list 4.0D0 4810.45654296875D0 0.24435186386108399D0 0.03748299181461334D0)) (list (list 4.0D0 4785.33837890625D0 0.16325795650482178D0 0.04997732490301132D0)) (list (list 4.0D0 4782.43896484375D0 0.15858937799930573D0 0.07496598362922669D0)) (list (list 4.0D0 4808.72021484375D0 0.21945957839488983D0 0.08746031671762467D0)) (list (list 4.0D0 4808.95556640625D0 0.15135233104228974D0 0.09995464980602265D0)) (list (list 4.0D0 4829.58154296875D0 0.07152528315782547D0 0.11244898289442063D0)) (list (list 4.0D0 4831.21728515625D0 0.056686241179704666D0 0.137437641620636D0)) (list (list 4.0D0 4832.673828125D0 0.042033057659864426D0 0.14993196725845337D0)) (list (list 4.0D0 4861.56787109375D0 0.02695429138839245D0 0.16242629289627075D0)) (list (list 4.0D0 4835.015625D0 0.007190233562141657D0 0.17492063343524933D0)) (list (list 4.0D0 4826.27392578125D0 0.001726233633235097D0 0.1874149590730667D0)) (list (list 5.0D0 4701.150390625D0 0.0034150201827287674D0 0.0D0)) (list (list 5.0D0 4712.20751953125D0 0.012991564348340035D0 0.01249433122575283D0)) (list (list 5.0D0 4727.2353515625D0 0.034371864050626755D0 0.02498866245150566D0)) (list (list 5.0D0 4754.33837890625D0 0.07162930816411972D0 0.03748299181461334D0)) (list (list 5.0D0 4755.53271484375D0 0.06727026402950287D0 0.04997732490301132D0)) (list (list 5.0D0 4758.3291015625D0 0.06198383867740631D0 0.062471654266119D0)) (list (list 5.0D0 4733.61962890625D0 0.0825018584728241D0 0.07496598362922669D0)) (list (list 5.0D0 4734.56005859375D0 0.07942905277013779D0 0.08746031671762467D0)) (list (list 5.0D0 4731.380859375D0 0.059656642377376556D0 0.09995464980602265D0)) (list (list 5.0D0 4728.16162109375D0 0.03252115100622177D0 0.11244898289442063D0)) (list (list 5.0D0 4728.47021484375D0 0.01396678015589714D0 0.124943308532238D0)) (list (list 5.0D0 4728.66748046875D0 0.009519987739622593D0 0.137437641620636D0)) (list (list 5.0D0 4722.27978515625D0 0.010672621428966523D0 0.14993196725845337D0)) (list (list 5.0D0 4719.671875D0 0.010428272187709809D0 0.16242629289627075D0)) (list (list 5.0D0 4716.384765625D0 0.00754753639921546D0 0.17492063343524933D0)) (list (list 5.0D0 4714.326171875D0 0.003816383657976985D0 0.1874149590730667D0)) (list (list 6.0D0 4577.90478515625D0 0.009787844493985176D0 0.0D0)) (list (list 6.0D0 4585.8271484375D0 0.035690080374479294D0 0.01249433122575283D0)) (list (list 6.0D0 4566.89208984375D0 0.06763322651386261D0 0.02498866245150566D0)) (list (list 6.0D0 4565.71435546875D0 0.08367864787578583D0 0.03748299181461334D0)) (list (list 6.0D0 4538.87646484375D0 0.03974338248372078D0 0.04997732490301132D0)) (list (list 6.0D0 4549.1728515625D0 0.014407087117433548D0 0.062471654266119D0)) (list (list 6.0D0 4531.9169921875D0 0.021480148658156395D0 0.07496598362922669D0)) (list (list 6.0D0 4579.22119140625D0 0.08659915626049042D0 0.08746031671762467D0)) (list (list 6.0D0 4593.1298828125D0 0.06953370571136475D0 0.09995464980602265D0)) (list (list 6.0D0 4597.6416015625D0 0.047295063734054565D0 0.11244898289442063D0)) (list (list 6.0D0 4569.51318359375D0 0.015293239615857602D0 0.124943308532238D0)) (list (list 6.0D0 4567.32275390625D0 0.011256965808570385D0 0.137437641620636D0)) (list (list 6.0D0 4567.728515625D0 0.009069799445569516D0 0.14993196725845337D0)) (list (list 6.0D0 4567.4375D0 0.0058880578726530075D0 0.16242629289627075D0)) (list (list 6.0D0 4570.01416015625D0 0.003113561077043414D0 0.17492063343524933D0)) (list (list 6.0D0 4577.775390625D0 0.001428050803951919D0 0.1874149590730667D0)) (list (list 7.0D0 4018.215576171875D0 8.923240966396406D-5 0.0D0)) (list (list 7.0D0 4017.81201171875D0 2.1403911523520947D-4 0.01249433122575283D0)) (list (list 7.0D0 4047.947021484375D0 2.857367508113384D-4 0.02498866245150566D0)) (list (list 7.0D0 4074.337646484375D0 5.222732434049249D-4 0.03748299181461334D0)) (list (list 7.0D0 4030.16552734375D0 0.001331246574409306D0 0.04997732490301132D0)) (list (list 7.0D0 4026.64794921875D0 0.0016830608947202564D0 0.062471654266119D0)) (list (list 7.0D0 4021.989990234375D0 0.0020038725342601538D0 0.07496598362922669D0)) (list (list 7.0D0 4019.3349609375D0 0.0024108360521495343D0 0.08746031671762467D0)) (list (list 7.0D0 4018.984619140625D0 0.0026000116486102343D0 0.09995464980602265D0)) (list (list 7.0D0 4019.3994140625D0 0.0024159380700439215D0 0.11244898289442063D0)) (list (list 7.0D0 4019.23486328125D0 0.0019009209936484695D0 0.124943308532238D0)) (list (list 7.0D0 4020.221923828125D0 0.001239647390320897D0 0.137437641620636D0)) (list (list 7.0D0 4024.81640625D0 7.105542463250458D-4 0.14993196725845337D0)) (list (list 7.0D0 4030.362060546875D0 4.248436016496271D-4 0.16242629289627075D0)) (list (list 7.0D0 4034.12548828125D0 2.2698077373206616D-4 0.17492063343524933D0)) (list (list 7.0D0 4037.77783203125D0 9.156173473456875D-5 0.1874149590730667D0)) (list (list 8.0D0 858.2598266601563D0 1.0848930105566979D-4 0.0D0)) (list (list 8.0D0 851.8209228515625D0 2.3046958085615188D-4 0.01249433122575283D0)) (list (list 8.0D0 849.6541748046875D0 3.276833158452064D-4 0.02498866245150566D0)) (list (list 8.0D0 856.2522583007813D0 3.124511567875743D-4 0.03748299181461334D0)) (list (list 8.0D0 859.6393432617188D0 3.0926952604204416D-4 0.04997732490301132D0)) (list (list 8.0D0 858.3341674804688D0 3.3407783485017717D-4 0.062471654266119D0)) (list (list 8.0D0 856.0948486328125D0 3.817376564256847D-4 0.07496598362922669D0)) (list (list 8.0D0 856.7788696289063D0 3.931608225684613D-4 0.08746031671762467D0)) (list (list 8.0D0 855.405517578125D0 4.0505584911443293D-4 0.09995464980602265D0)) (list (list 8.0D0 850.5253295898438D0 4.852913843933493D-4 0.11244898289442063D0)) (list (list 8.0D0 847.6358032226563D0 6.230767467059195D-4 0.124943308532238D0)) (list (list 8.0D0 846.8201293945313D0 7.540853694081306D-4 0.137437641620636D0)) (list (list 8.0D0 846.1217041015625D0 8.313684375025332D-4 0.14993196725845337D0)) (list (list 8.0D0 845.222900390625D0 7.316502160392702D-4 0.16242629289627075D0)) (list (list 8.0D0 843.828857421875D0 4.63282223790884D-4 0.17492063343524933D0)) (list (list 8.0D0 840.864013671875D0 1.962747483048588D-4 0.1874149590730667D0)) (list (list 9.0D0 736.6867065429688D0 1.7682803445495665D-4 0.0D0)) (list (list 9.0D0 736.434814453125D0 4.215887747704983D-4 0.01249433122575283D0)) (list (list 9.0D0 737.5242309570313D0 6.789427134208381D-4 0.02498866245150566D0)) (list (list 9.0D0 739.2843627929688D0 7.80696514993906D-4 0.03748299181461334D0)) (list (list 9.0D0 738.873046875D0 6.405974272638559D-4 0.04997732490301132D0)) (list (list 9.0D0 736.0228271484375D0 4.54996305052191D-4 0.062471654266119D0)) (list (list 9.0D0 736.8831176757813D0 4.7361099859699607D-4 0.07496598362922669D0)) (list (list 9.0D0 747.79345703125D0 7.767352508381009D-4 0.08746031671762467D0)) (list (list 9.0D0 746.1942138671875D0 0.0010191675974056125D0 0.09995464980602265D0)) (list (list 9.0D0 746.7999267578125D0 0.0011107397731393576D0 0.11244898289442063D0)) (list (list 9.0D0 746.3397827148438D0 0.0010967180132865906D0 0.124943308532238D0)) (list (list 9.0D0 744.1576538085938D0 9.804010624065996D-4 0.137437641620636D0)) (list (list 9.0D0 742.8052978515625D0 7.377268630079925D-4 0.14993196725845337D0)) (list (list 9.0D0 745.8912963867188D0 4.163249395787716D-4 0.16242629289627075D0)) (list (list 9.0D0 755.8259887695313D0 1.9299527048133314D-4 0.17492063343524933D0)) (list (list 10.0D0 641.0711669921875D0 1.4005968114361167D-4 0.0D0)) (list (list 10.0D0 645.8338012695313D0 2.7996787684969604D-4 0.01249433122575283D0)) (list (list 10.0D0 646.0374145507813D0 3.7497375160455704D-4 0.02498866245150566D0)) (list (list 10.0D0 644.4085083007813D0 3.793392679654062D-4 0.03748299181461334D0)) (list (list 10.0D0 644.3618774414063D0 3.720240492839366D-4 0.04997732490301132D0)) (list (list 10.0D0 644.4736938476563D0 4.363253538031131D-4 0.062471654266119D0)) (list (list 10.0D0 642.1009521484375D0 5.18607150297612D-4 0.07496598362922669D0)) (list (list 10.0D0 637.6663208007813D0 5.242057959549129D-4 0.08746031671762467D0)) (list (list 10.0D0 641.3477783203125D0 4.1620314004831016D-4 0.09995464980602265D0)) (list (list 10.0D0 643.9196166992188D0 3.97159019485116D-4 0.11244898289442063D0)) (list (list 10.0D0 647.3287963867188D0 5.380766815505922D-4 0.124943308532238D0)) (list (list 10.0D0 652.6720581054688D0 6.896943086758256D-4 0.137437641620636D0)) (list (list 10.0D0 655.4675903320313D0 6.495722918771207D-4 0.14993196725845337D0)) (list (list 10.0D0 658.8653564453125D0 4.920895444229245D-4 0.16242629289627075D0)) (list (list 10.0D0 664.8282470703125D0 3.4631104790605605D-4 0.17492063343524933D0)) (list (list 10.0D0 670.1140747070313D0 1.9302543660160154D-4 0.1874149590730667D0)) (list (list 11.0D0 520.6058959960938D0 2.0231149392202497D-4 0.0D0)) (list (list 11.0D0 522.658447265625D0 4.1310559026896954D-4 0.01249433122575283D0)) (list (list 11.0D0 510.7699890136719D0 4.925529356114566D-4 0.02498866245150566D0)) (list (list 11.0D0 505.7142333984375D0 5.144544993527234D-4 0.03748299181461334D0)) (list (list 11.0D0 503.4682922363281D0 5.195558769628406D-4 0.04997732490301132D0)) (list (list 11.0D0 500.8747863769531D0 4.650744085665792D-4 0.062471654266119D0)) (list (list 11.0D0 491.66912841796875D0 3.7115751183591783D-4 0.07496598362922669D0)) (list (list 11.0D0 488.5545349121094D0 3.159790358040482D-4 0.08746031671762467D0)) (list (list 11.0D0 496.1665954589844D0 3.205732209607959D-4 0.09995464980602265D0)) (list (list 11.0D0 498.637451171875D0 4.836788575630635D-4 0.11244898289442063D0)) (list (list 11.0D0 480.0182800292969D0 6.939333397895098D-4 0.124943308532238D0)) (list (list 11.0D0 480.775634765625D0 7.631697808392346D-4 0.137437641620636D0)) (list (list 11.0D0 480.80596923828125D0 6.522262119688094D-4 0.14993196725845337D0)) (list (list 11.0D0 483.8076171875D0 4.6878954162821174D-4 0.16242629289627075D0)) (list (list 11.0D0 490.5392150878906D0 3.307014994788915D-4 0.17492063343524933D0)) (list (list 11.0D0 502.0506286621094D0 2.120716671925038D-4 0.1874149590730667D0)) (list (list 12.0D0 439.3101806640625D0 1.402716152369976D-4 0.0D0)) (list (list 12.0D0 433.4586486816406D0 3.4996424801647663D-4 0.01249433122575283D0)) (list (list 12.0D0 428.9152526855469D0 6.246636621654034D-4 0.02498866245150566D0)) (list (list 12.0D0 418.2908020019531D0 8.0427888315171D-4 0.03748299181461334D0)) (list (list 12.0D0 410.7449951171875D0 7.704996387474239D-4 0.04997732490301132D0)) (list (list 12.0D0 407.8522033691406D0 5.828050780110061D-4 0.062471654266119D0)) (list (list 12.0D0 405.3538818359375D0 4.781590832863003D-4 0.07496598362922669D0)) (list (list 12.0D0 403.1601867675781D0 4.5579904690384865D-4 0.08746031671762467D0)) (list (list 12.0D0 413.2766418457031D0 4.2239174945279956D-4 0.09995464980602265D0)) (list (list 12.0D0 422.4281005859375D0 5.494874785654247D-4 0.11244898289442063D0)) (list (list 12.0D0 423.7991943359375D0 6.269877194426954D-4 0.124943308532238D0)) (list (list 12.0D0 424.4854736328125D0 5.808656569570303D-4 0.137437641620636D0)) (list (list 12.0D0 423.16107177734375D0 4.453239671420306D-4 0.14993196725845337D0)) (list (list 12.0D0 416.9999694824219D0 3.039380826521665D-4 0.16242629289627075D0)) (list (list 12.0D0 411.05218505859375D0 2.208530204370618D-4 0.17492063343524933D0)) (list (list 13.0D0 369.5222473144531D0 2.2537345648743212D-4 0.0D0)) (list (list 13.0D0 379.2386779785156D0 4.576450155582279D-4 0.01249433122575283D0)) (list (list 13.0D0 381.0030822753906D0 6.228076526895165D-4 0.02498866245150566D0)) (list (list 13.0D0 377.2156677246094D0 6.445868639275432D-4 0.03748299181461334D0)) (list (list 13.0D0 372.067138671875D0 7.446882664225996D-4 0.04997732490301132D0)) (list (list 13.0D0 355.19354248046875D0 0.0013577707577496767D0 0.062471654266119D0)) (list (list 13.0D0 354.3670654296875D0 0.0015434824163094163D0 0.07496598362922669D0)) (list (list 13.0D0 353.5477294921875D0 0.0015628545079380274D0 0.08746031671762467D0)) (list (list 13.0D0 352.86376953125D0 0.0016511899884790183D0 0.09995464980602265D0)) (list (list 13.0D0 350.3754577636719D0 0.001829679706133902D0 0.11244898289442063D0)) (list (list 13.0D0 345.27783203125D0 0.002062101848423481D0 0.124943308532238D0)) (list (list 13.0D0 341.82037353515625D0 0.00205008452758193D0 0.137437641620636D0)) (list (list 13.0D0 343.8101501464844D0 0.0014243741752579809D0 0.14993196725845337D0)) (list (list 13.0D0 353.66845703125D0 8.227569633163512D-4 0.16242629289627075D0)) (list (list 13.0D0 361.560302734375D0 5.434412159956992D-4 0.17492063343524933D0)) (list (list 13.0D0 367.99176025390625D0 3.1820908770896495D-4 0.1874149590730667D0)) (list (list 14.0D0 241.58734130859375D0 3.517308214213699D-4 0.0D0)) (list (list 14.0D0 239.2769317626953D0 8.054065983742476D-4 0.01249433122575283D0)) (list (list 14.0D0 235.2420196533203D0 0.001114154583774507D0 0.02498866245150566D0)) (list (list 14.0D0 230.51979064941406D0 0.0011398002970963717D0 0.03748299181461334D0)) (list (list 14.0D0 231.0806121826172D0 9.555564029142261D-4 0.04997732490301132D0)) (list (list 14.0D0 216.75018310546875D0 7.748855277895927D-4 0.062471654266119D0)) (list (list 14.0D0 217.7388153076172D0 0.0010314366081729532D0 0.07496598362922669D0)) (list (list 14.0D0 247.8028106689453D0 0.002868205774575472D0 0.08746031671762467D0)) (list (list 14.0D0 275.70574951171875D0 0.0018852668581530452D0 0.09995464980602265D0)) (list (list 14.0D0 275.4440002441406D0 0.001996931154280901D0 0.11244898289442063D0)) (list (list 14.0D0 275.1964111328125D0 0.00212250929325819D0 0.124943308532238D0)) (list (list 14.0D0 270.5175476074219D0 0.001693845959380269D0 0.137437641620636D0)) (list (list 14.0D0 270.1596984863281D0 9.990710532292724D-4 0.14993196725845337D0)) (list (list 14.0D0 271.2545471191406D0 6.727299187332392D-4 0.16242629289627075D0)) (list (list 14.0D0 290.7877197265625D0 8.645622292533517D-4 0.17492063343524933D0)) (list (list 14.0D0 283.99896240234375D0 5.189969087950885D-4 0.1874149590730667D0)) (list (list 15.0D0 75.8124771118164D0 9.704057592898607D-4 0.0D0)) (list (list 15.0D0 76.40676879882813D0 0.0026431328151375056D0 0.01249433122575283D0)) (list (list 15.0D0 80.34832763671875D0 0.004054139368236065D0 0.02498866245150566D0)) (list (list 15.0D0 78.6460189819336D0 0.003819399978965521D0 0.03748299181461334D0)) (list (list 15.0D0 78.74696350097656D0 0.0028869009111076594D0 0.04997732490301132D0)) (list (list 15.0D0 80.49748229980469D0 0.003690180368721485D0 0.062471654266119D0)) (list (list 15.0D0 97.47099304199219D0 0.008967431262135506D0 0.07496598362922669D0)) (list (list 15.0D0 91.1203384399414D0 0.009576566517353058D0 0.08746031671762467D0)) (list (list 15.0D0 88.85287475585938D0 0.008471752516925335D0 0.09995464980602265D0)) (list (list 15.0D0 87.97676849365235D0 0.007677569054067135D0 0.11244898289442063D0)) (list (list 15.0D0 86.79302215576172D0 0.009086866863071919D0 0.124943308532238D0)) (list (list 15.0D0 85.45475006103516D0 0.011004747822880745D0 0.137437641620636D0)) (list (list 15.0D0 88.36091613769531D0 0.010196330025792122D0 0.14993196725845337D0)) (list (list 15.0D0 93.46073150634766D0 0.007562017533928156D0 0.16242629289627075D0)) (list (list 15.0D0 98.00837707519531D0 0.005074063781648874D0 0.17492063343524933D0)) (list (list 15.0D0 103.82530212402344D0 0.0029203498270362616D0 0.1874149590730667D0)) (list (list 16.0D0 5147.1865234375D0 1.6716487880330533D-4 0.01249433122575283D0)) (list (list 16.0D0 5140.4306640625D0 2.2172724129632116D-4 0.02498866245150566D0)) (list (list 16.0D0 5122.04150390625D0 2.4675860186107457D-4 0.03748299181461334D0)) (list (list 16.0D0 5145.462890625D0 2.4827002198435366D-4 0.04997732490301132D0)) (list (list 16.0D0 5148.4912109375D0 2.517990942578763D-4 0.062471654266119D0)) (list (list 16.0D0 5150.67919921875D0 2.3827086261007935D-4 0.07496598362922669D0)) (list (list 16.0D0 5148.06005859375D0 1.7733502318151295D-4 0.08746031671762467D0)) (list (list 16.0D0 5139.625D0 1.6725936438888312D-4 0.09995464980602265D0)) (list (list 16.0D0 5131.955078125D0 2.0255203708074987D-4 0.11244898289442063D0)) (list (list 16.0D0 5114.203125D0 3.6793583421967924D-4 0.124943308532238D0)) (list (list 16.0D0 5090.734375D0 4.7359350719489157D-4 0.137437641620636D0)) (list (list 16.0D0 5110.6806640625D0 6.541889742948115D-4 0.14993196725845337D0)) (list (list 16.0D0 5108.828125D0 7.236591191031039D-4 0.16242629289627075D0)) (list (list 16.0D0 5108.7119140625D0 6.1831931816414D-4 0.17492063343524933D0)) (list (list 16.0D0 5102.0439453125D0 4.086917033419013D-4 0.1874149590730667D0)) (list (list 17.0D0 5546.93017578125D0 0.0025067701935768128D0 0.02498866245150566D0)) (list (list 17.0D0 5551.142578125D0 0.002373614814132452D0 0.03748299181461334D0)) (list (list 17.0D0 5550.83837890625D0 0.0016933127772063017D0 0.04997732490301132D0)) (list (list 17.0D0 5547.56591796875D0 0.001114986022002995D0 0.062471654266119D0)) (list (list 17.0D0 5547.56591796875D0 0.0D0 0.07496598362922669D0)) (list (list 18.0D0 4603.09033203125D0 0.0699949786067009D0 0.02498866245150566D0)) (list (list 18.0D0 4602.09619140625D0 0.08527585119009018D0 0.03748299181461334D0)) (list (list 18.0D0 4601.8837890625D0 0.06831549853086472D0 0.04997732490301132D0)) (list (list 18.0D0 4626.00732421875D0 0.047758135944604874D0 0.062471654266119D0)) (list (list 18.0D0 4630.3642578125D0 0.06342818588018418D0 0.07496598362922669D0)) (list (list 18.0D0 4630.6796875D0 0.07159917801618576D0 0.08746031671762467D0)) (list (list 18.0D0 4628.865234375D0 0.056288477033376694D0 0.09995464980602265D0)) (list (list 18.0D0 4628.68994140625D0 0.03462633490562439D0 0.11244898289442063D0)) (list (list 18.0D0 4602.15087890625D0 0.024664293974637985D0 0.124943308532238D0)) (list (list 18.0D0 4613.3818359375D0 0.016696279868483544D0 0.137437641620636D0)) (list (list 18.0D0 4613.55419921875D0 0.010057466104626656D0 0.14993196725845337D0)) (list (list 18.0D0 4613.52490234375D0 0.0061958422884345055D0 0.16242629289627075D0)) (list (list 18.0D0 4616.560546875D0 0.003907995764166117D0 0.17492063343524933D0)) (list (list 19.0D0 4021.33935546875D0 4.2210426181554795D-4 0.02498866245150566D0)) (list (list 19.0D0 4027.047119140625D0 7.922408985905349D-4 0.03748299181461334D0)) (list (list 19.0D0 4044.58056640625D0 5.328747793100774D-4 0.07496598362922669D0)) (list (list 19.0D0 4064.083251953125D0 3.516024153213948D-4 0.09995464980602265D0)) (list (list 19.0D0 4066.422607421875D0 3.4957894240505994D-4 0.11244898289442063D0)) (list (list 19.0D0 4071.4990234375D0 4.3040470336563885D-4 0.124943308532238D0)) (list (list 19.0D0 4071.4990234375D0 0.0D0 0.137437641620636D0)) (list (list 20.0D0 4943.98974609375D0 0.2835361361503601D0 0.03748299181461334D0)) (list (list 20.0D0 4940.23779296875D0 0.44821542501449585D0 0.04997732490301132D0)) (list (list 20.0D0 4937.275390625D0 0.4837762117385864D0 0.062471654266119D0)) (list (list 20.0D0 4931.73291015625D0 0.3952142000198364D0 0.07496598362922669D0)) (list (list 20.0D0 4929.2666015625D0 0.27419525384902954D0 0.08746031671762467D0)) (list (list 20.0D0 4935.2041015625D0 0.17065079510211945D0 0.09995464980602265D0)) (list (list 20.0D0 4942.43505859375D0 0.18618333339691162D0 0.11244898289442063D0)) (list (list 20.0D0 4941.21923828125D0 0.17671602964401245D0 0.124943308532238D0)) (list (list 20.0D0 4936.6962890625D0 0.14038197696208954D0 0.137437641620636D0)) (list (list 20.0D0 4934.63916015625D0 0.09875986725091934D0 0.14993196725845337D0)) (list (list 20.0D0 4934.23681640625D0 0.06587497144937515D0 0.16242629289627075D0)) (list (list 21.0D0 4866.59716796875D0 0.1450912058353424D0 0.03748299181461334D0)) (list (list 21.0D0 4865.80322265625D0 0.22213250398635864D0 0.04997732490301132D0)) (list (list 21.0D0 4836.2568359375D0 0.13355205953121185D0 0.062471654266119D0)) (list (list 21.0D0 4808.626953125D0 0.2565159797668457D0 0.07496598362922669D0)) (list (list 21.0D0 4807.47216796875D0 0.08493851125240326D0 0.11244898289442063D0)) (list (list 21.0D0 4832.77587890625D0 0.06710106134414673D0 0.124943308532238D0)) (list (list 21.0D0 4832.77587890625D0 0.0D0 0.137437641620636D0)) (list (list 22.0D0 4641.77197265625D0 0.05545419454574585D0 0.03748299181461334D0)) (list (list 22.0D0 4647.6611328125D0 0.054360147565603256D0 0.04997732490301132D0)) (list (list 22.0D0 4646.7783203125D0 0.054864492267370224D0 0.062471654266119D0)) (list (list 22.0D0 4646.7783203125D0 0.0D0 0.07496598362922669D0)) (list (list 23.0D0 4463.8671875D0 0.002835335908457637D0 0.03748299181461334D0)) (list (list 23.0D0 4464.3525390625D0 0.0018957785796374083D0 0.04997732490301132D0)) (list (list 23.0D0 4492.04443359375D0 0.0030986072961241007D0 0.062471654266119D0)) (list (list 23.0D0 4507.72998046875D0 0.0029201237484812737D0 0.07496598362922669D0)) (list (list 23.0D0 4471.83544921875D0 0.0019530821591615677D0 0.08746031671762467D0)) (list (list 23.0D0 4463.47216796875D0 0.0015217929612845183D0 0.09995464980602265D0)) (list (list 23.0D0 4455.21484375D0 8.733466384001076D-4 0.11244898289442063D0)) (list (list 23.0D0 4448.64794921875D0 5.525561282411218D-4 0.124943308532238D0)) (list (list 23.0D0 4480.28515625D0 7.204135763458908D-4 0.137437641620636D0)) (list (list 23.0D0 4499.62646484375D0 6.540424656122923D-4 0.14993196725845337D0)) (list (list 23.0D0 4493.189453125D0 7.268412155099213D-4 0.16242629289627075D0)) (list (list 23.0D0 4497.0078125D0 5.926221492700279D-4 0.17492063343524933D0)) (list (list 23.0D0 4499.365234375D0 3.262310056015849D-4 0.1874149590730667D0)) (list (list 24.0D0 5579.541015625D0 0.0011548425536602736D0 0.04997732490301132D0)) (list (list 24.0D0 5582.015625D0 9.247565176337957D-4 0.062471654266119D0)) (list (list 24.0D0 5583.47509765625D0 7.965866243466735D-4 0.07496598362922669D0)) (list (list 24.0D0 5580.56201171875D0 5.907745799049735D-4 0.08746031671762467D0)) (list (list 24.0D0 5574.53955078125D0 3.65449144737795D-4 0.09995464980602265D0)) (list (list 24.0D0 5568.6259765625D0 2.5606813142076135D-4 0.11244898289442063D0)) (list (list 24.0D0 5538.6298828125D0 1.8618155445437879D-4 0.124943308532238D0)) (list (list 24.0D0 5538.6298828125D0 0.0D0 0.137437641620636D0)) (list (list 25.0D0 5483.5498046875D0 0.0017718883464112878D0 0.04997732490301132D0)) (list (list 25.0D0 5475.09228515625D0 5.601377924904227D-4 0.07496598362922669D0)) (list (list 25.0D0 5472.513671875D0 5.370484432205558D-4 0.08746031671762467D0)) (list (list 25.0D0 5473.73974609375D0 4.8061058623716235D-4 0.09995464980602265D0)) (list (list 25.0D0 5477.5751953125D0 3.8770781247876585D-4 0.11244898289442063D0)) (list (list 25.0D0 5476.12890625D0 2.627409412525594D-4 0.124943308532238D0)) (list (list 25.0D0 5470.6630859375D0 1.737030252115801D-4 0.137437641620636D0)) (list (list 25.0D0 5469.0D0 1.5331640315707773D-4 0.14993196725845337D0)) (list (list 25.0D0 5470.458984375D0 1.455781311960891D-4 0.16242629289627075D0)) (list (list 25.0D0 5472.1826171875D0 1.1518896644702181D-4 0.17492063343524933D0)) (list (list 25.0D0 5469.5927734375D0 6.083725384087302D-5 0.1874149590730667D0)) (list (list 26.0D0 4668.28857421875D0 0.03688059747219086D0 0.04997732490301132D0)) (list (list 26.0D0 4671.24853515625D0 0.039071694016456604D0 0.062471654266119D0)) (list (list 26.0D0 4669.908203125D0 0.04504595696926117D0 0.07496598362922669D0)) (list (list 26.0D0 4660.84033203125D0 0.04013744369149208D0 0.09995464980602265D0)) (list (list 26.0D0 4664.33447265625D0 0.020622385665774346D0 0.11244898289442063D0)) (list (list 26.0D0 4670.31689453125D0 0.009613050147891045D0 0.124943308532238D0)) (list (list 26.0D0 4672.814453125D0 0.006736799143254757D0 0.137437641620636D0)) (list (list 26.0D0 4693.0537109375D0 0.004248389508575201D0 0.14993196725845337D0)) (list (list 26.0D0 4668.056640625D0 0.006509111728519201D0 0.16242629289627075D0)) (list (list 26.0D0 4670.25048828125D0 0.005245907232165337D0 0.17492063343524933D0)) (list (list 26.0D0 4674.970703125D0 0.002861911663785577D0 0.1874149590730667D0)) (list (list 27.0D0 4567.390625D0 0.07666102051734925D0 0.04997732490301132D0)) (list (list 27.0D0 4570.36572265625D0 0.07045847177505493D0 0.062471654266119D0)) (list (list 27.0D0 4575.67578125D0 0.08250116556882858D0 0.07496598362922669D0)) (list (list 27.0D0 4575.67578125D0 0.0D0 0.08746031671762467D0)) (list (list 28.0D0 4605.64404296875D0 0.044967517256736755D0 0.062471654266119D0)) (list (list 28.0D0 4608.78564453125D0 0.05010010302066803D0 0.07496598362922669D0)) (list (list 28.0D0 4605.955078125D0 0.06223359704017639D0 0.08746031671762467D0)) (list (list 28.0D0 4605.955078125D0 0.0D0 0.09995464980602265D0)) (list (list 29.0D0 4532.42822265625D0 0.026005996391177178D0 0.062471654266119D0)) (list (list 29.0D0 4538.90869140625D0 0.02267199382185936D0 0.08746031671762467D0)) (list (list 29.0D0 4543.74853515625D0 0.013331521302461625D0 0.11244898289442063D0)) (list (list 29.0D0 4543.74853515625D0 0.0D0 0.124943308532238D0)) (list (list 30.0D0 4472.12353515625D0 0.0014918660745024682D0 0.062471654266119D0)) (list (list 30.0D0 4477.84228515625D0 0.0023176311515271664D0 0.07496598362922669D0)) (list (list 30.0D0 4505.59423828125D0 0.0031150956638157368D0 0.11244898289442063D0)) (list (list 30.0D0 4506.779296875D0 0.0019133922178298235D0 0.124943308532238D0)) (list (list 30.0D0 4528.79296875D0 0.0036866446025669575D0 0.137437641620636D0)) (list (list 30.0D0 4533.43505859375D0 0.0022747989278286696D0 0.14993196725845337D0)) (list (list 30.0D0 4533.43505859375D0 0.0D0 0.16242629289627075D0)) (list (list 31.0D0 5085.34912109375D0 0.0013027709210291505D0 0.07496598362922669D0)) (list (list 31.0D0 5110.34716796875D0 3.652042360045016D-4 0.08746031671762467D0)) (list (list 31.0D0 5110.880859375D0 2.8238468803465367D-4 0.09995464980602265D0)) (list (list 31.0D0 5098.259765625D0 3.270027518738061D-4 0.11244898289442063D0)) (list (list 31.0D0 5086.36083984375D0 5.367737030610442D-4 0.124943308532238D0)) (list (list 31.0D0 5072.4990234375D0 0.0011262156767770648D0 0.137437641620636D0)) (list (list 31.0D0 5072.4990234375D0 0.0D0 0.14993196725845337D0)) (list (list 32.0D0 3954.1796875D0 0.00150724733248353D0 0.07496598362922669D0)) (list (list 32.0D0 3952.481201171875D0 0.0011602735612541438D0 0.08746031671762467D0)) (list (list 32.0D0 3956.26123046875D0 6.243131938390434D-4 0.09995464980602265D0)) (list (list 32.0D0 3924.385986328125D0 3.7265641731210053D-4 0.11244898289442063D0)) (list (list 32.0D0 3969.337646484375D0 5.324258236214519D-4 0.124943308532238D0)) (list (list 32.0D0 3968.897705078125D0 6.252946914173663D-4 0.137437641620636D0)) (list (list 32.0D0 3972.126220703125D0 7.451883284375072D-4 0.14993196725845337D0)) (list (list 32.0D0 3974.619873046875D0 7.076446199789643D-4 0.16242629289627075D0)) (list (list 32.0D0 3972.827392578125D0 4.4860917842015624D-4 0.17492063343524933D0)) (list (list 32.0D0 3969.66552734375D0 1.816147705540061D-4 0.1874149590730667D0)) (list (list 33.0D0 5053.73046875D0 0.0271097831428051D0 0.08746031671762467D0)) (list (list 33.0D0 5058.14111328125D0 0.013002014718949795D0 0.09995464980602265D0)) (list (list 33.0D0 5031.498046875D0 0.022411087527871132D0 0.11244898289442063D0)) (list (list 33.0D0 5015.37255859375D0 0.01970258168876171D0 0.124943308532238D0)) (list (list 33.0D0 5039.884765625D0 0.005976794753223658D0 0.137437641620636D0)) (list (list 33.0D0 5039.48583984375D0 0.006207937374711037D0 0.14993196725845337D0)) (list (list 33.0D0 5060.39990234375D0 0.00170719507150352D0 0.17492063343524933D0)) (list (list 33.0D0 5068.11669921875D0 8.488880121149123D-4 0.1874149590730667D0)) (list (list 34.0D0 3989.51025390625D0 7.53137341234833D-4 0.09995464980602265D0)) (list (list 34.0D0 3988.168701171875D0 6.114218849688768D-4 0.11244898289442063D0)) (list (list 34.0D0 3988.08251953125D0 6.816848181188107D-4 0.14993196725845337D0)) (list (list 34.0D0 3988.08251953125D0 0.0D0 0.16242629289627075D0)) (list (list 35.0D0 4917.40966796875D0 0.058438342064619064D0 0.11244898289442063D0)) (list (list 35.0D0 4891.96484375D0 0.08383123576641083D0 0.124943308532238D0)) (list (list 35.0D0 4905.97509765625D0 0.06898447871208191D0 0.137437641620636D0)) (list (list 35.0D0 4906.80712890625D0 0.06046796217560768D0 0.14993196725845337D0)) (list (list 35.0D0 4906.80712890625D0 0.0D0 0.16242629289627075D0)) (list (list 36.0D0 4779.31982421875D0 0.06991122663021088D0 0.11244898289442063D0)) (list (list 36.0D0 4777.822265625D0 0.04913937672972679D0 0.124943308532238D0)) (list (list 36.0D0 4778.779296875D0 0.0342273935675621D0 0.137437641620636D0)) (list (list 36.0D0 4779.18212890625D0 0.02204711176455021D0 0.14993196725845337D0)) (list (list 36.0D0 4781.24658203125D0 0.0143253393471241D0 0.16242629289627075D0)) (list (list 36.0D0 4779.86669921875D0 0.008278684690594674D0 0.17492063343524933D0)) (list (list 36.0D0 4771.8525390625D0 0.003869252745062113D0 0.1874149590730667D0)) (list (list 37.0D0 4745.78759765625D0 0.005268155597150326D0 0.124943308532238D0)) (list (list 37.0D0 4753.03369140625D0 0.006368928123265505D0 0.14993196725845337D0)) (list (list 37.0D0 4751.1865234375D0 0.004698729142546654D0 0.16242629289627075D0)) (list (list 38.0D0 64.5705795288086D0 0.0060194688849151135D0 0.124943308532238D0)) (list (list 38.0D0 71.4665756225586D0 0.004399531986564398D0 0.16242629289627075D0)) (list (list 38.0D0 65.36478424072266D0 0.002299226587638259D0 0.17492063343524933D0)) (list (list 38.0D0 58.50956344604492D0 0.001448761555366218D0 0.1874149590730667D0)) (list (list 39.0D0 4886.39453125D0 0.04375788941979408D0 0.137437641620636D0)) (list (list 39.0D0 4908.3994140625D0 0.03310779482126236D0 0.17492063343524933D0)) (list (list 40.0D0 295.31439208984375D0 0.00235683168284595D0 0.137437641620636D0)) (list (list 40.0D0 295.0710754394531D0 0.001790160546079278D0 0.14993196725845337D0)) (list (list 40.0D0 294.629150390625D0 0.0012463218299672008D0 0.16242629289627075D0)) (list (list 41.0D0 4956.76171875D0 0.03151651844382286D0 0.14993196725845337D0)) (list (list 41.0D0 4963.1162109375D0 0.025512101128697396D0 0.16242629289627075D0)) (list (list 41.0D0 4964.2763671875D0 0.023474618792533875D0 0.17492063343524933D0)) (list (list 42.0D0 4637.22119140625D0 0.0055804625153541565D0 0.14993196725845337D0)) (list (list 42.0D0 4640.34765625D0 0.004508925136178732D0 0.16242629289627075D0)) (list (list 43.0D0 202.12538146972656D0 0.00200302223674953D0 0.14993196725845337D0)) (list (list 43.0D0 207.97897338867188D0 0.0022553519811481238D0 0.16242629289627075D0)) (list (list 43.0D0 208.01708984375D0 0.001806901884265244D0 0.17492063343524933D0)) (list (list 43.0D0 202.6473388671875D0 9.650653810240328D-4 0.1874149590730667D0)) (list (list 44.0D0 128.2281951904297D0 0.00195141916628927D0 0.14993196725845337D0)) (list (list 44.0D0 126.94285583496094D0 0.0027539192233234644D0 0.16242629289627075D0)) (list (list 44.0D0 122.48082733154297D0 0.0030108510982245207D0 0.17492063343524933D0) (list 45.0D0 4977.1796875D0 0.026687487959861756D0 0.16242629289627075D0)) (list (list 46.0D0 4873.56103515625D0 0.027227746322751045D0 0.16242629289627075D0)) (list (list 47.0D0 158.153564453125D0 0.0014330019475892187D0 0.16242629289627075D0)) (list (list 48.0D0 40.51676559448242D0 0.002172837033867836D0 0.16242629289627075D0)) (list (list 48.0D0 38.42094039916992D0 0.0019112430745735765D0 0.17492063343524933D0)) (list (list 49.0D0 244.3978271484375D0 7.185927242971957D-4 0.17492063343524933D0))) (list 0.0D0 0.01249433122575283D0 0.02498866245150566D0 0.03748299181461334D0 0.04997732490301132D0 0.062471654266119D0 0.07496598362922669D0 0.08746031671762467D0 0.09995464980602265D0 0.11244898289442063D0 0.124943308532238D0 0.137437641620636D0 0.14993196725845337D0 0.16242629289627075D0 0.17492063343524933D0 0.1874149590730667D0)) nil "CATANZARO - Extraindo Parciais de SDIF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 97 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Ordem e approx para MAX-MSP" (om-load-patch-abs1 "Ordem e approx para MAX-MSP" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 297 275) (om-make-point 26 28) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 257 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 116 448) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 129 337) (om-make-point 44 28) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 94 373) (om-make-point 62 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 326 414) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 395 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 239 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 35 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 286 483) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 266 116) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 288 17) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (8 0 4 0 nil 0) (3 0 4 1 nil 0) (2 0 5 0 nil 0) (1 0 5 1 nil 0) (6 0 5 2 nil 0) (10 0 6 0 nil 0) (10 0 7 0 nil 0) (10 0 8 0 nil 0) (5 0 9 0 nil 0) (11 0 10 0 nil 0))) 6.17 nil "" (om-make-point 200 200) (om-make-point 500 380)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 20 55) (om-make-point 187 66) (list nil) "l" "Ordem e approx para MAX-MSP"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sem substituição" (om-load-patch-abs1 "sem substituição" (quote ((let ((box (om-load-boxin "input 3" 2 (om-make-point 662 109) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 561 382) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 94 295) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 461 285) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 522 131) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 513 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 593 225) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 582 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 402 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 379 107) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 390 377) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 803/7 98) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1202/7 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 1 0 nil 0) (13 0 2 0 nil 0) (6 0 3 0 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 6 1 nil 0) (9 0 7 0 nil 0) (9 0 8 0 nil 0) (13 0 9 0 nil 0) (3 0 10 0 nil 0) (11 0 12 0 nil 0) (12 0 13 0 nil 0))) 6.17 nil "" (om-make-point -8 -8) (om-make-point 1366 705)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 941/2 695/2) nil (list (list 5070.901 5549.055 4071.5425 4830.7334 4644.668 5536.249 4575.4346 4607.2593 4543.83 4533.3433 5070.901 3987.7515 4909.4976 5472.6597 4020.13 4038.7495 5053.3574 857.91626 5472.6597 641.2278 439.49197 5472.6597 5510.7256 5466.341 5147.6314 5141.688 5472.6597 736.5773 5147.6314 3969.3667 5536.249 755.53754 670.0042 841.2319 520.8388 5129.822 5517.0947 501.93607 4020.13 5510.7256 411.00906 5141.688 369.56723 4034.0867 5517.0947 851.99024 5153.5815 5123.8994 5147.6314 5147.6314 5568.32 5517.0947 5478.9854 645.6878 5112.074 4048.0918 417.22824 859.90076 855.93634 488.77487 367.8634 496.17078 4496.831 5100.2764 850.0239 490.4718 857.91626 664.608 4066.841 433.44138 4062.146 241.58042 5112.074 5574.757 5112.074 491.60635 644.1977 3923.7744 645.6878 644.1977 855.93634 5478.9854 856.9257 644.1977 854.9481 5100.2764 522.647 641.2278 745.9972 736.5773 4020.13 413.39 4029.429 4071.5425 644.1977 423.05255 3973.9549 735.7268 403.01593 379.08032 844.1524 500.77765 483.71933 5088.5064 736.5773 405.3506 5472.6597 498.46893 851.00654 658.49396 510.70972 505.42728 641.969 283.98938 503.67862 4076.2486 637.53455 3969.3667 4043.4185 5088.5064 5472.6597 647.18146 361.54373 422.5641 4450.3193 5472.6597 424.52127 407.69873 5581.2 4496.831 5523.4727 3987.7515 5106.172 380.8361 848.06226 3955.6336 428.95813 3969.3667 424.03113 739.13446 377.33264 655.45807 480.9333 4502.0293 5112.074 271.16486 737.42865 3987.7515 652.4362 479.8234 3973.9549 4024.777 244.38744 4481.2734 5106.172 4491.639 845.1282 742.5579 372.1378 3973.9549 3987.7515 847.0831 480.9333 410.53452 216.72069 747.72284 739.13446 4024.777 5581.2 418.19336 239.35802 353.69446 846.1051 5070.901 290.6273 4455.463 5581.2 231.2046 202.6753 75.8298 744.2756 270.2267 745.9972 217.72447 5504.3623 745.9972 746.8595 235.24602 5549.055 5070.901 230.40471 5581.2 5523.4727 3951.067 4020.13 294.6843 5082.631 4029.429 355.33264 343.62546 4575.4346 158.09995 58.54036 4470.9316 3955.6336 4465.769 354.5126 353.69446 4875.5855 5517.0947 352.87817 4024.777 5549.055 270.53906 5059.198 4825.1553 5485.319 295.02493 208.13268 350.44064 275.58618 4465.769 4020.13 38.399784 4507.233 128.2688 4470.9316 5504.3623 275.58618 202.20755 4020.13 341.6463 345.217 275.26798 40.495594 207.89237 4533.3433 65.33087 4476.099 295.36597 5549.055 4020.13 4020.13 5549.055 4020.13 76.445496 5498.008 126.94206 4465.769 4676.974 247.79898 78.77648 5504.3623 4507.233 103.82618 4995.3145 5070.901 4491.639 4570.152 4507.233 4698.6367 4528.109 80.52471 5035.8735 4714.9487 78.685524 4769.7334 4617.9165 5498.008 80.338875 5498.008 4693.2114 71.491165 4639.305 4753.232 97.99885 4671.5737 4747.7437 4639.305 4564.8755 5041.695 64.580475 4612.585 5041.695 5006.8696 4753.232 4666.181 4671.5737 4836.3164 4714.9487 93.465355 88.015946 4819.585 4780.767 88.83316 97.434426 4570.152 86.80421 4731.318 91.11982 4671.5737 4575.4346 4612.585 88.32152 4720.3994 4720.3994 85.411576 4564.8755 4709.505 5059.198 4543.83 4725.855 4780.767 4549.0815 4570.152 5006.8696 4612.585 4875.5855 5012.6567 4666.181 4533.3433 4780.767 5030.06 4538.583 4932.237 4966.5435 4601.94 4960.8086 4533.3433 4864.3335 5053.3574 4875.5855 4881.2207 5001.0884 4955.0815 4725.855 4858.717 4909.4976 4858.717 4780.767 4725.855 4628.598 4586.018 4666.181 4671.5737 4538.583 4972.2837 4660.793 4830.7334 4932.237 4886.864 4607.2593 4671.5737 4903.829 4596.6265 4628.598 4775.247 4607.2593 4814.0195 4995.3145 4650.0366 4644.668 4639.305 4628.598 4830.7334 4915.1724 4731.318 4909.4976 4758.726 4607.2593 4628.598 4932.237 4830.7334 4753.232 4564.8755 4601.94 4903.829 4591.32 4875.5855 4780.767 4601.94 4570.152 4830.7334 4628.598 4753.232 4564.8755 4736.787 4575.4346 4731.318 4564.8755 4892.5117 4808.462 4601.94 4989.547 4580.7236 4881.2207 4932.237 4989.547 4836.3164 4937.9375 4903.829 4814.0195 4864.3335 4875.5855 4808.462 4780.767 4786.2935 4937.9375 4978.0317 4943.646 4943.646 4898.1675 4808.462 4989.547 4864.3335 4869.9556 4903.829 4898.1675 4808.462 4808.462 4926.542 4943.646 4989.547 4932.237 4983.786 4937.9375 4937.9375 4983.786 4989.547 4983.786 4983.786) (list 5073.4233 5547.566 4071.499 4832.776 4646.7783 5538.6294 4575.676 4605.955 4543.7485 4533.435 5072.499 3988.0823 4906.807 5469.593 4018.2158 4037.7779 5054.5596 858.2598 5472.1826 641.07117 439.31018 5470.459 5510.6216 5469.0 5147.1865 5139.6245 5470.663 736.6867 5148.06 3969.6656 5538.6294 755.826 670.1141 840.864 520.6059 5131.955 5514.6416 502.0506 4017.8118 5513.1836 411.0522 5140.4307 369.52225 4034.1255 5514.176 851.8209 5150.679 5122.0415 5145.463 5148.4907 5568.626 5517.1587 5476.129 645.8338 5110.881 4047.947 416.99997 859.6393 856.25226 488.55454 367.99176 496.1666 4499.365 5098.26 849.6542 490.5392 858.33417 664.82825 4066.4224 433.45865 4064.0833 241.58733 5110.347 5574.5396 5114.203 491.66916 644.3619 3924.3858 646.0374 644.4085 856.09485 5477.575 856.7789 643.9196 855.4055 5102.044 522.65845 641.3478 745.8913 736.4348 4021.3394 413.27664 4030.362 4071.499 644.4737 423.16107 3972.8277 736.0228 403.1602 379.23868 843.82886 500.87482 483.8076 5090.7344 736.8831 405.35388 5473.7398 498.63745 850.5253 658.86536 510.76996 505.71423 642.10096 283.99896 503.4683 4074.3374 637.6663 3969.3377 4044.5806 5086.361 5472.5137 647.3288 361.5603 422.42807 4448.648 5475.0923 424.48547 407.8522 5580.562 4497.008 5521.3413 3988.1687 5108.712 381.00308 847.6358 3956.2613 428.91525 3968.898 423.7992 738.87305 377.21567 655.4676 480.80594 4499.6265 5110.6807 271.25455 737.52424 3988.0823 652.67206 480.01828 3974.6199 4024.8164 244.39783 4480.285 5108.828 4493.1895 845.2229 742.8053 372.0671 3972.1262 3989.5103 846.82007 480.77564 410.745 216.75019 747.79346 739.28437 4027.047 5583.475 418.2908 239.27693 353.66846 846.1217 5068.1167 290.78772 4455.215 5582.0156 231.0806 202.64734 75.81248 744.15766 270.1597 746.1942 217.7388 5501.9727 746.3398 746.7999 235.242 5547.566 5072.499 230.51978 5579.541 5520.734 3952.481 4020.222 294.62915 5085.349 4030.1653 355.19354 343.81015 4577.7754 158.15357 58.509564 4472.1235 3954.1797 4463.472 354.36707 353.54773 4876.7256 5514.0073 352.86377 4026.6477 5550.8384 270.51755 5060.4 4826.274 5483.55 295.07108 208.01709 350.37546 275.70575 4464.3525 4019.2349 38.42094 4506.7793 128.2282 4471.8355 5506.9346 275.444 202.12538 4021.9898 341.82037 345.27783 275.1964 40.516766 207.97898 4533.435 65.364785 4477.8423 295.3144 5551.1426 4019.3347 4019.3994 5546.93 4018.9846 76.40676 5499.5273 126.94285 4463.867 4674.9707 247.80281 78.74696 5503.4595 4507.73 103.8253 4993.5186 5073.4233 4492.0444 4570.014 4505.594 4701.1504 4528.793 80.497475 5035.62 4714.326 78.64602 4771.852 4616.5606 5500.678 80.34833 5498.8027 4693.0537 71.466576 4640.3477 4751.1865 98.00838 4670.2505 4745.7876 4637.221 4567.4375 5039.885 64.57058 4613.525 5039.486 5007.6465 4753.0337 4668.0566 4672.8145 4835.0156 4716.385 93.46073 87.97677 4820.402 4779.8667 88.852875 97.470986 4567.7285 86.79302 4728.6675 91.12034 4670.317 4577.905 4613.554 88.360916 4719.672 4722.28 85.45475 4567.3228 4712.2075 5058.141 4543.7485 4728.47 4781.2466 4549.173 4569.513 5007.5845 4613.382 4875.082 5015.3726 4664.3345 4531.917 4779.182 5031.498 4538.9087 4930.268 4964.2764 4602.151 4963.116 4532.428 4861.568 5053.7305 4873.561 4880.148 5003.242 4956.7617 4728.1616 4859.2944 4908.3994 4858.6865 4778.7793 4727.2354 4628.69 4585.827 4668.2886 4671.2485 4538.8765 4973.795 4660.8403 4832.674 4933.544 4886.3945 4605.644 4669.908 4905.8384 4597.6416 4626.0073 4777.8223 4608.7857 4814.94 4995.108 4647.661 4646.7783 4641.772 4628.865 4831.2173 4917.4097 4731.381 4906.807 4758.329 4605.955 4630.3643 4934.2363 4832.776 4755.5327 4566.892 4601.884 4905.975 4593.13 4874.512 4779.32 4603.0903 4570.3657 4829.5815 4630.6797 4754.3384 4567.3906 4734.56 4575.676 4733.6196 4565.7144 4891.965 4807.4717 4602.096 4992.0454 4579.221 4882.9434 4934.639 4991.194 4836.257 4936.6963 4903.8955 4811.511 4866.597 4877.457 4808.9556 4782.439 4785.3384 4935.204 4979.499 4941.219 4942.435 4899.655 4808.72 4990.544 4865.803 4871.499 4904.2095 4899.8115 4810.4565 4808.627 4929.2666 4943.9898 4987.4736 4931.733 4985.7637 4940.238 4937.2754 4984.4917 4986.9204 4984.289 4985.5933) (list 11132 11288 10752 11048 10980 11284 10954 10966 10942 10938 11132 10716 11076 11264 10730 10738 11126 8056 11264 7552 6898 11264 11276 11262 11158 11156 11264 7792 11158 10708 11284 7836 7628 8022 7192 11152 11278 7128 10730 11276 6782 11156 6598 10736 11278 8044 11160 11150 11158 11158 11294 11278 11266 7564 11146 10742 6808 8060 8052 7082 6590 7108 10924 11142 8040 7088 8056 7614 10750 6874 10748 5862 11146 11296 11146 7092 7560 10688 7564 7560 8052 11266 8054 7560 8050 11142 7198 7552 7814 7792 10730 6792 10734 10752 7560 6832 10710 7790 6748 6642 8028 7124 7064 11138 7792 6758 11264 7116 8042 7598 7158 7140 7554 6142 7134 10754 7542 10708 10740 11138 11264 7568 6560 6830 10906 11264 6838 6768 11298 10924 11280 10716 11144 6650 8036 10702 6856 10708 6836 7798 6634 7590 7054 10926 11146 6062 7794 10716 7582 7050 10710 10732 5882 10918 11144 10922 8030 7806 6610 10710 10716 8034 7054 6780 5674 7818 7798 10732 11298 6812 5846 6522 8032 11132 6182 10908 11298 5786 5558 3856 7810 6056 7814 5682 11274 7814 7816 5816 11288 11132 5780 11298 11280 10700 10730 6206 11136 10734 6530 6472 10954 5128 3408 10914 10702 10912 6526 6522 11064 11278 6518 10732 11288 6058 11128 11046 11268 6208 5604 6506 6090 10912 10730 2678 10928 4766 10914 11274 6090 5554 10730 6462 6480 6088 2770 5602 10938 3598 10916 6210 11288 10730 10730 11288 10730 3870 11272 4748 10912 10992 5906 3922 11274 10928 4400 11106 11132 10922 10952 10928 11000 10936 3960 11120 11006 3920 11026 10970 11272 3956 11272 10998 3754 10978 11020 4300 10990 11018 10978 10950 11122 3578 10968 11122 11110 11020 10988 10990 11050 11006 4218 4114 11044 11030 4130 4290 10952 4090 11012 4174 10990 10954 10968 4120 11008 11008 4062 10950 11004 11128 10942 11010 11030 10944 10952 11110 10968 11064 11112 10988 10938 11030 11118 10940 11084 11096 10964 11094 10938 11060 11126 11064 11066 11108 11092 11010 11058 11076 11058 11030 11010 10974 10958 10988 10990 10940 11098 10986 11048 11084 11068 10966 10990 11074 10962 10974 11028 10966 11042 11106 10982 10980 10978 10974 11048 11078 11012 11076 11022 10966 10974 11084 11048 11020 10950 10964 11074 10960 11064 11030 10964 10952 11048 10974 11020 10950 11014 10954 11012 10950 11070 11040 10964 11104 10956 11066 11084 11104 11050 11086 11074 11042 11060 11064 11040 11030 11032 11086 11100 11088 11088 11072 11040 11104 11060 11062 11074 11072 11040 11040 11082 11088 11104 11084 11102 11086 11086 11102 11104 11102 11102)) nil "sem substituição"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "valiadação" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil) (om-load-inputfun (quote input-funbox) "" "input 7" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 326 569) (om-make-point 170 58) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "PRINT" (quote print) (quote ((om-load-inputfun (quote input-funbox) "SOMETHING" "SOMETHING" nil))) (om-make-point 170 522) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 3 (om-make-point 123 114) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 7" 2 (om-make-point 444 53) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 308 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 1 (om-make-point 338 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 484 303) (om-make-point 37 28) (quote .txt) ".txt" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 0 (om-make-point 575 276) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 336 491) (om-make-point 49 28) (quote finish) "Finish" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 412 380) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction 4" 6.17 "(lambda (lista)$$(defun numlist-to-string (lst)$  (when lst$    (concatenate 'string $                 (write-to-string (car lst)) (numlist-to-string (cdr lst)))))$(numlist-to-string lista))$$;; Código de \"https://gist.github.com/tompurl/5174818\"") (quote ((om-load-inputfun (quote input-funbox) "" "LISTA" nil))) (om-make-point 280 348) nil (list "cool342.txt") nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 427 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OM->COLL MAX" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 105 323) nil nil nil (list (let ((box (om-load-boxin "input 2" 1 (om-make-point 411 162) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 405 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 387 427) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "float" (om-load-patch-abs1 "float" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 341 129) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 305 301) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 204 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 73 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 130 221) (om-make-point 34 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 40 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 291 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 228 345) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 324 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 47 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 14 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 272 413) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 172 413) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (7 0 3 0 nil 0) (0 0 4 0 nil 0) (6 0 4 1 nil 0) (4 0 5 0 nil 0) (8 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 8 0 nil 0) (5 1 10 0 nil 0) (5 0 11 0 nil 0))) 1 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 131 293) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 224 234) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.17 "(lambda (x) (loop for y in x collect (format nil \"~f\" y)))") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 223 117) nil (list "((0 , (179.6902 0.020364004551337328D0) (363.9098 0.11057293913593008D0) (487.2109 0.029814305907878466D0) (555.393 0.19031400925165154D0) (655.7856 0.020601934699381316D0) (731.5767 0.03181439960380298D0) (848.0889 0.009844905489994985D0) (919.9928 0.01911975571979127D0) (1037.1967 0.00536962602177742D0) (1093.8582 0.011368881391983979D0) (1277.1629 0.012018960885280619D0) (1358.2984 0.002336725020411278D0) (1474.0508 0.006629935346665326D0) (1525.4716 0.0026442108396247718D0) (1592.365 0.0032211320959118105D0) (1651.9104 0.007070859275039379D0) (1765.658 0.0036187410933105615D0) (1838.836 0.0058030627461403625D0) (1953.6516 0.002855829462277876D0) (2021.243 0.0034096795524982838D0) ;) (10 , (181.3786 0.03283482831458592D0) (365.4809 0.18261333204573452D0) (484.5304 0.034086866188906294D0) (554.6313 0.3656278266048654D0) (656.619 0.027114668557445127D0) (732.4404 0.05923647154137544D0) (848.9144 0.012898074563639225D0) (920.1159 0.03884094530793331D0) (1035.7932 0.008080010434864452D0) (1094.7984 0.023792651430302812D0) (1277.6145 0.022735734953985877D0) (1338.8246 0.003907199317428533D0) (1474.8886 0.012475524869639637D0) (1517.0473 0.004351283738055868D0) (1596.2963 0.004914829263309857D0) (1654.5324 0.015055470596107698D0) (1773.5578 0.005157109629139251D0) (1838.7178 0.011311069385614633D0) (1958.2302 0.004391156104446969D0) (2018.2216 0.006183425531374384D0) ;) (20 , (182.6223 0.042513052662158116D0) (366.8435 0.2403751637307616D0) (482.7254 0.0309972723886202D0) (554.0527 0.5525649557601348D0) (657.1041 0.02777400408332803D0) (733.7418 0.08566805503656303D0) (849.457 0.012893811425001432D0) (920.7309 0.061880818441124946D0) (1034.8717 0.009725289726391433D0) (1096.4783 0.03819308499733108D0) (1133.656 0.005625759985495942D0) (1278.6885 0.03178694670050487D0) (1335.9628 0.004772588948163634D0) (1475.8108 0.017993744343868128D0) (1513.8134 0.005168107244677798D0) (1656.9495 0.023042527078271907D0) (1781.2732 0.005974027426985438D0) (1840.1513 0.01580491861561787D0) (1963.0036 0.0052275288797082546D0) (2015.7227 0.008423417470924545D0) ;) (30 , (183.6858 0.047915955838918015D0) (368.0601 0.27590896064157505D0) (402.1495 0.023189454709008104D0) (481.7057 0.023442582572336293D0) (553.7948 0.7180450649410023D0) (657.7182 0.02352486221650149D0) (735.4109 0.1054085452102572D0) (850.4439 0.01042537615644612D0) (921.684 0.0842390424175285D0) (1034.2946 0.009966808817464078D0) (1098.7879 0.0522002114371211D0) (1280.4295 0.03637442364371391D0) (1476.9356 0.021962493492288987D0) (1511.7881 0.004982183648419585D0) (1659.4019 0.02892163245697544D0) (1694.5984 0.005742535793585897D0) (1786.8324 0.005754089006139895D0) (1843.0308 0.01789306054856609D0) (1966.3732 0.005112310880173163D0) (2014.904 0.009358143739390368D0) ;) (40 , (184.7253 0.04889898218600307D0) (369.166 0.28798958862087193D0) (402.9366 0.01517089267070039D0) (481.4684 0.014568688544842902D0) (553.9381 0.8385240040677597D0) (585.1289 0.058365462100251835D0) (658.7821 0.016424553529379355D0) (737.2914 0.11550355493279369D0) (852.2202 0.006688684388770346D0) (922.8431 0.10243454550594744D0) (1034.0177 0.008815276840555222D0) (1101.6187 0.06417192957991987D0) (1282.8163 0.035500225930486254D0) (1478.342 0.023795384540236515D0) (1661.9866 0.03161986371957737D0) (1693.509 0.005154974320225059D0) (1788.7005 0.004497152261981361D0) (1847.0164 0.01730459035354825D0) (2016.4252 0.008785706792091503D0) (2214.262 0.00485027102702597D0) ;) (50 , (185.7889 0.04664632263450061D0) (370.1694 0.2820613000848313D0) (405.3594 0.008418438466901459D0) (482.0947 0.007756654040327372D0) (554.5068 0.8999999761581421D0) (585.2826 0.04054130723549122D0) (660.4555 0.009625015149660393D0) (739.1416 0.11573402512244943D0) (854.7459 0.0034722547348193284D0) (924.0968 0.1135097993166685D0) (1034.095 0.006628518574275924D0) (1104.8615 0.07318852549546462D0) (1285.7622 0.029958241862377614D0) (1480.0707 0.023538566230578768D0) (1664.6592 0.031096469961905904D0) (1823.0654 0.005243285397375305D0) (1851.5368 0.014881081514427002D0) (2020.4728 0.007076344192883267D0) (2217.3582 0.004536542487693187D0) (2953.8482 0.004214224365078732D0) ;) (60 , (186.5654 0.04360219803919444D0) (371.0021 0.26540077478776314D0) (410.4362 0.005378513971340948D0) (482.8701 0.0054154462144873D0) (555.4773 0.8953388420090653D0) (585.4364 0.022717145959995824D0) (660.1568 0.006098901061575601D0) (740.5036 0.1084434127045213D0) (925.3239 0.11316427780658231D0) (1036.9588 0.004168177659739475D0) (1107.8358 0.07692403501679886D0) (1289.3106 0.02320372500465882D0) (1481.9319 0.02171018192919119D0) (1667.2442 0.02797342708437802D0) (1855.4505 0.01253047020910041D0) (2037.4868 0.007931814547094907D0) (2220.3072 0.003610804870749944D0) (2590.994 0.003142653216137411D0) (2957.0789 0.003894201552634361D0) (3145.1787 0.003118464979532982D0) ;) (70 , (187.077 0.04080131381725303D0) (371.9708 0.2422817504489856D0) (410.1488 0.006440212855813962D0) (482.9537 0.0053234660601234746D0) (556.5703 0.8530767481458392D0) (585.7228 0.021820493579697526D0) (656.3768 0.004839720026011383D0) (741.4123 0.09781579058768007D0) (788.5097 0.0029542321044491627D0) (926.3994 0.10460475018653368D0) (1041.8633 0.0028024464723091095D0) (1110.2797 0.0743309184356972D0) (1293.5111 0.017695410115686553D0) (1483.2796 0.018833836947993444D0) (1669.2579 0.02328337838447021D0) (1857.9948 0.010162711256656543D0) (2041.1832 0.009473021969981394D0) (2594.4068 0.0027831178397922348D0) (2779.2383 0.0027359519270035828D0) (2960.1114 0.0030953526779180915D0) ;) (80 , (187.5888 0.03792147925941593D0) (373.4355 0.21284244251065032D0) (409.1315 0.004553731804586623D0) (483.4123 0.006581079671030641D0) (557.8397 0.7760733951452256D0) (585.8867 0.014405159247902689D0) (650.9678 0.005261140362231484D0) (742.0175 0.08421892125792277D0) (787.1862 0.004240380163036918D0) (853.6741 0.0031471607640392125D0) (927.2353 0.08898417428769516D0) (1045.0573 0.00234662292781876D0) (1112.4706 0.0655556225777863D0) (1297.4989 0.013478336881209566D0) (1483.9368 0.015049425273197265D0) (1670.7555 0.01756798180328111D0) (1697.3305 0.0023027072575705003D0) (1859.4396 0.007629593810944666D0) (2041.7896 0.009941005609919543D0) (2597.1345 0.002333458483919952D0) ;) (90 , (188.262 0.03467245048481118D0) (375.5451 0.17867030276530588D0) (485.1737 0.0081155264398493D0) (559.3331 0.6685105651466621D0) (647.4943 0.0059856436784315745D0) (742.5121 0.06821796227319005D0) (789.1204 0.0055315499638797176D0) (853.8231 0.0036958371241671757D0) (927.6652 0.06813854609056602D0) (1045.1559 0.0024315948134833515D0) (1114.7689 0.051876298377112766D0) (1300.9472 0.010170648814786909D0) (1483.5999 0.010767308723503669D0) (1671.4124 0.011569564102420925D0) (1692.3436 0.0039478326914624325D0) (1832.3704 0.0019575854835100744D0) (1863.0708 0.005064145961212497D0) (2043.9852 0.00867062288375918D0) (2599.0252 0.0018433519324367362D0) (2782.2845 0.0015432762548598545D0) ;) (100 , (189.1555 0.030796280894457358D0) (378.2373 0.14276996568192937D0) (488.9607 0.008681822971671626D0) (509.9354 0.010338899617902664D0) (561.0891 0.5360231401761526D0) (651.1153 0.004887129546722194D0) (743.1298 0.0505929504740601D0) (791.2618 0.006492343348472414D0) (855.6546 0.0037484142313495878D0) (927.4404 0.0446098501555336D0) (1043.0628 0.0025078016220012934D0) (1117.611 0.03569916171569192D0) (1304.0567 0.006980488215108766D0) (1481.8576 0.0066642862006014245D0) (1519.4948 0.00196954657906532D0) (1670.6482 0.006235304936920085D0) (1687.3794 0.005565175336328333D0) (1848.1608 0.00282777768950446D0) (1874.982 0.0028723755687803466D0) (2047.1412 0.0060565667059097805D0) ;) (110 , (189.6827 0.02629255165368127D0) (379.9197 0.1077763800230628D0) (480.288 0.006969369864064939D0) (511.3117 0.009153370980155057D0) (562.5419 0.39120467537765896D0) (654.7362 0.003788614613670964D0) (743.8432 0.03480494114079203D0) (792.5738 0.006005388207368188D0) (855.5402 0.0028566551114965113D0) (924.2483 0.025196061711482993D0) (1041.164 0.0021410608468619783D0) (1120.5596 0.0225909121811736D0) (1309.1105 0.004305953165215854D0) (1325.696 0.0012444712383418689D0) (1480.5071 0.0040354479367736155D0) (1510.8455 0.00262010674391451D0) (1691.3322 0.004215004604925911D0) (1843.131 0.001850099497921027D0) (1880.996 0.0019493821469997203D0) (2051.7505 0.0035286072305673144D0) ;) (120 , (189.6621 0.02170110432872335D0) (379.931 0.07526066302900043D0) (477.5477 0.004770304589665488D0) (512.489 0.007824702387478514D0) (562.9668 0.2628201719609787D0) (651.7034 0.002140531427013601D0) (744.3181 0.022794910309954678D0) (793.7716 0.004946465171060836D0) (853.355 0.001807815359677757D0) (920.7036 0.012846062135346556D0) (1040.347 0.001573918231603864D0) (1121.7338 0.013393957721399439D0) (1292.6935 0.0027889489373149803D0) (1319.1646 0.0015263061049621773D0) (1481.0094 0.002450875632603223D0) (1508.7272 0.0010909643906882017D0) (1696.3312 0.0027190919616101716D0) (1827.8424 9.383691361664973D-4) (1883.318 0.0012009297947371898D0) (2059.409 0.001760002897573768D0) ;) (130 , (189.2018 0.017265608812179524D0) (325.6662 0.0019270593006632756D0) (378.1703 0.048566406086376884D0) (477.9152 0.0028047829180274536D0) (516.0799 0.007183719192626199D0) (562.3049 0.16432287315355168D0) (662.2269 9.639650632860368D-4) (716.3655 0.0020089480235630348D0) (744.7101 0.014691242561893553D0) (794.2303 0.003724119416279214D0) (850.5838 9.560611615133371D-4) (918.9879 0.005912939000908626D0) (1039.0473 0.0010485659944529322D0) (1120.5462 0.0076948593649674565D0) (1281.6859 0.0019512452667991315D0) (1316.9832 0.0013195169025203068D0) (1482.5484 0.0015985856706341199D0) (1693.8405 0.0016757600994349819D0) (1883.142 6.68794933396064D-4) (2065.5262 7.259004901468444D-4) ;) (140 , (188.482 0.013166869194347352D0) (374.8261 0.029204219783592157D0) (410.6743 0.0057826402819993175D0) (481.2416 0.0015366431477030257D0) (520.7221 0.006852228109863846D0) (560.6698 0.10068993668684358D0) (596.2725 0.005342890052320405D0) (681.5217 5.445105187897761D-4) (716.901 0.001990513154321978D0) (745.0133 0.010249171768363016D0) (793.7905 0.0026443337120416505D0) (920.06 0.0028022378563143653D0) (958.3721 9.407839130506018D-4) (1036.284 6.905398787022541D-4) (1117.4121 0.004815266278140916D0) (1283.5116 0.0015121816535280167D0) (1317.826 7.430878036856572D-4) (1483.5946 0.001176834780901219D0) (1690.0413 9.858372883892763D-4) (1844.6668 4.6330253579091995D-4) ;) (150 , (187.7544 0.009527659594172074D0) (370.3558 0.01692076897689304D0) (406.7363 0.0048479449987516655D0) (489.7463 0.0011835911611458512D0) (521.3834 0.005335999580873005D0) (558.3452 0.06870563541659117D0) (585.1013 0.0051752071334617905D0) (681.5702 4.792402568836223D-4) (722.5648 0.0031874404792036604D0) (745.0652 0.00884736897893235D0) (792.6924 0.0019181099148913078D0) (923.6795 0.001922577262143674D0) (959.005 4.607904626506241D-4) (1031.6454 5.155415101022093D-4) (1113.7166 0.003796616279149267D0) (1287.4624 0.0013687309115185628D0) (1315.1193 4.7931605046686D-4) (1481.9804 8.888401998215022D-4) (1667.6138 4.0878330985846226D-4) (1689.1448 5.217956159536059D-4) ;) (160 , (187.3851 0.006660500127477861D0) (320.3804 9.319167983751526D-4) (362.8654 0.00969408333787163D0) (402.7983 0.003913248914162163D0) (490.8237 0.0010275735091431495D0) (522.0449 0.003819768914970568D0) (555.6836 0.0560465112771596D0) (588.2075 0.0035997185733800848D0) (664.6923 4.546798971579671D-4) (722.5648 6.107761808296225D-4) (743.7591 0.01031370222479613D0) (785.4204 0.001543936560543603D0) (922.9287 0.0019012679796895039D0) (948.3937 6.993631866899464D-4) (1028.0178 3.915546938251714D-4) (1112.8192 0.003182026079442504D0) (1288.946 0.001341047755995783D0) (1481.2588 7.355872439770595D-4) (1671.2236 3.0529425046705146D-4) (1848.7714 3.4204358733632117D-4) ;) (170 , (187.9991 0.004439296181810309D0) (322.5828 9.85846637377517D-4) (355.586 0.006100576400268348D0) (401.1645 0.00256625069514076D0) (491.5946 0.00101499050553443D0) (522.7063 0.00230353824906813D0) (554.0073 0.04621180303018543D0) (583.6516 0.004393876125797134D0) (656.8638 4.8207580501704895D-4) (741.956 0.013022580649434549D0) (781.731 0.001158210794983749D0) (922.491 0.0023164735091980643D0) (942.88 0.0010631953580305819D0) (1025.6798 3.1315077290291663D-4) (1112.0888 0.002737977184970484D0) (1258.3587 3.9040600367357375D-4) (1289.1929 0.0012938455157099668D0) (1481.2725 6.430164338918797D-4) (1669.1259 2.604435812269831D-4) (1849.658 3.5898495570591427D-4) ;) (180 , (189.4603 0.002889088354387453D0) (314.7196 7.793630800726323D-4) (351.3358 0.004458305880271198D0) (397.0822 0.0016815449862444229D0) (489.2243 0.0010019220223220647D0) (523.0318 9.184456408835598D-4) (553.231 0.03716815381381138D0) (581.2942 0.004961286789903809D0) (654.1427 4.7020729783463065D-4) (740.676 0.01578338709435752D0) (781.674 7.776379914067473D-4) (809.8574 4.457412961117198D-4) (852.5143 2.819211120802433D-4) (923.7702 0.0029492116977638673D0) (954.2902 8.449643295517532D-4) (1110.7002 0.00247532938047369D0) (1254.3251 2.9802093795119195D-4) (1288.7232 0.0012015884977372397D0) (1480.6763 5.657837742499754D-4) (1850.586 3.7210596019864647D-4) ;) (190 , (171.9262 6.293994989622182D-4) (191.1261 0.001966000908496519D0) (306.8564 5.728791888753105D-4) (352.2355 0.003670840333636895D0) (396.6887 0.0011937206563477545D0) (484.0226 9.389732143638262D-4) (518.1487 6.161858393181713D-4) (552.8585 0.02797335870320689D0) (581.0678 0.005322230390991994D0) (653.4557 3.9972958269987857D-4) (740.2075 0.0176560471355976D0) (785.1394 4.5886026386058525D-4) (812.0423 3.1376800646227D-4) (833.2656 4.538086048431707D-4) (926.5485 0.0036019644674694686D0) (1108.5961 0.0023953893873942325D0) (1288.0906 0.001060643151019338D0) (1478.7774 4.824559415567675D-4) (1668.779 3.032016463955729D-4) (1852.747 3.621977689040998D-4) ;) (200 , (44.9574 4.4054449405186725D-4) (72.4264 4.170091841083254D-4) (169.6411 3.718535709053893D-4) (191.887 0.0015550558464862545D0) (299.0868 3.679896006762339D-4) (359.6724 0.003154959155801766D0) (479.2004 8.615534414001314D-4) (504.3107 6.305095577588352D-4) (551.9771 0.018693159783681076D0) (574.0238 0.007830496089048298D0) (652.465 3.168025210990065D-4) (740.1695 0.017926249991048738D0) (822.1557 3.24066150734188D-4) (834.3606 4.283914103452486D-4) (929.1167 0.004091844239209358D0) (967.3177 3.235756961332283D-4) (1106.4342 0.0024870391218022336D0) (1287.8809 8.881180572583899D-4) (1475.4472 3.928557057066061D-4) (1857.2084 3.241708927917284D-4) ;) (210 , (45.1081 4.212691173787213D-4) (71.53 3.493567332199351D-4) (164.2936 3.2189284486064537D-4) (191.2654 0.0014500090119292247D0) (301.5396 3.372666550162105D-4) (366.5199 0.0034470135350250387D0) (479.4178 7.37161346482856D-4) (506.4694 4.977911537465958D-4) (546.436 0.012897261468776227D0) (566.9799 0.010338766060927795D0) (651.1968 2.6740203317459087D-4) (740.0239 0.016371926739002292D0) (832.2692 3.3436429500610605D-4) (929.7452 0.0041018546015896785D0) (962.219 3.92995439691562D-4) (1106.2169 0.002552592891776789D0) (1287.5247 7.435430994129829D-4) (1467.3643 2.82723923056176D-4) (1665.1264 3.4193787699071297D-4) (1858.6332 2.8567436357723297D-4) ;) (220 , (47.1828 4.095949355947363D-4) (72.4268 2.902399753738584D-4) (158.9461 2.719321188159014D-4) (190.1462 0.0013461707344377772D0) (318.451 3.782768934439439D-4) (370.2797 0.003715663924200309D0) (450.7016 2.3810090167977052D-4) (481.3577 6.543392606642303D-4) (516.6882 5.229156915233379D-4) (545.2432 0.010771046181888379D0) (565.4635 0.010564370502875148D0) (587.6757 0.0016374653080310248D0) (739.6041 0.014223399958120865D0) (834.662 2.7864990109479666D-4) (929.7348 0.003902911604307365D0) (963.9453 3.412165357694499D-4) (1106.5326 0.002498177773506241D0) (1286.1945 6.361139423167418D-4) (1664.4695 3.869330548775887D-4) (1839.7994 2.5073312103372883D-4) ;) (230 , (49.2339 4.0862294132088927D-4) (73.8908 2.3382419031440683D-4) (157.0975 2.333437190973185D-4) (188.4627 0.001191198032206444D0) (334.6536 3.989665049239692D-4) (345.1741 2.6653751887626906D-4) (372.0513 0.0037802363175235324D0) (451.041 2.213766468674475D-4) (484.168 6.073655363624135D-4) (522.9425 3.2525908163371075D-4) (548.747 0.011986399694807752D0) (565.5773 0.0061006282203745965D0) (589.9391 0.0013609408002884507D0) (738.8899 0.011996077767434601D0) (887.1448 2.343023576736787D-4) (929.3877 0.00359814260107664D0) (968.0282 2.4871003336766917D-4) (1106.601 0.002296760766821469D0) (1283.9187 5.535402056928835D-4) (1666.1585 4.159966219033622D-4) ;) (240 , (50.1323 4.138914968654897D-4) (186.0926 9.915139940490739D-4) (339.1235 2.191191500158723D-4) (344.4336 4.96687672630991D-4) (373.0494 0.0035613134639148866D0) (453.4694 2.0162388748225707D-4) (486.4039 5.665472526968094D-4) (553.6295 0.01531545580875352D0) (594.7701 9.86042765795111D-4) (659.1342 2.1936491154425164D-4) (738.0218 0.010032998585752956D0) (771.9132 2.876145123618995D-4) (890.8739 2.619669821661953D-4) (929.0281 0.0032325418682748D0) (1106.0833 0.001943035252440034D0) (1280.3518 4.8246595832988264D-4) (1315.2039 1.9898652120491298D-4) (1484.5989 2.3822081914858033D-4) (1644.8632 2.1535309374391714D-4) (1669.4528 4.2448046145018327D-4) ;) (250 , (49.488 4.1429400419849876D-4) (77.1034 1.8525215630509862D-4) (182.8821 8.062189169145908D-4) (350.3859 9.298481343914192D-4) (374.6283 0.0030740578196172073D0) (456.0469 1.7785159738143347D-4) (486.1191 4.813465505450249D-4) (553.3762 0.018662753668554685D0) (599.6011 6.111447313017713D-4) (658.9677 2.28273645911994D-4) (737.294 0.008525177201216119D0) (763.0963 7.622965688175876D-4) (894.6031 2.896315899640901D-4) (929.0027 0.0028018008578925965D0) (1105.0591 0.0014538187246373399D0) (1274.881 4.086930921219388D-4) (1315.7984 2.10176659122732D-4) (1480.8344 3.041580812818477D-4) (1646.4784 2.2339569443501742D-4) (1671.5369 4.2856276394400447D-4) ;) (260 , (49.1052 4.1670467420562595D-4) (78.2875 1.8548379418338565D-4) (179.5645 7.025457158440806D-4) (356.3383 0.0013630079951454607D0) (378.0944 0.0025947501508939344D0) (485.2808 3.900336134383975D-4) (552.4887 0.01853521637365775D0) (604.432 2.3624723103633116D-4) (656.2402 2.228688121691624D-4) (737.5954 0.007313439876948278D0) (763.0963 1.349667031705845D-4) (840.7871 1.292578436690873D-4) (898.3323 3.172961476781193D-4) (929.26 0.0023044493747506807D0) (1106.059 9.22929615979297D-4) (1271.3474 3.6612788322505874D-4) (1325.3975 1.439969910800788D-4) (1478.9683 3.684933108069493D-4) (1647.4113 2.1678861419366605D-4) (1671.1337 4.234385500999928D-4) ;) (270 , (49.0135 4.0738733896789617D-4) (79.4926 1.6804080251080943D-4) (177.338 5.995784301642361D-4) (328.1629 1.4948681714279218D-4) (356.5167 0.00138225088408447D0) (379.3511 0.0023317938297851946D0) (480.5015 3.0304802248523074D-4) (552.1713 0.016750508408419473D0) (591.1814 0.0013424935102487313D0) (653.213 2.0003789840569727D-4) (675.8852 1.0766398469071696D-4) (738.8814 0.006089727300085854D0) (843.7578 1.3285433266682547D-4) (899.0476 2.6551021532020475D-4) (929.1939 0.001799606814445383D0) (1106.2969 3.020254435071524D-4) (1270.2216 3.218874691924069D-4) (1478.3485 4.01223450853023D-4) (1668.5525 4.137744675662615D-4) (1830.808 1.0228429304840428D-4) ;) (280 , (48.891 3.865661738676257D-4) (80.0296 1.334838868571104D-4) (176.0021 4.937748617876032D-4) (331.551 1.9738605789120187D-4) (355.724 7.777331507513408D-4) (378.1938 0.002279202565563447D0) (476.117 2.3818048494217013D-4) (496.5503 2.4038272259539363D-4) (552.3489 0.014188542656136066D0) (581.2365 0.0019382023597474536D0) (651.2993 1.6909655370252067D-4) (740.7437 0.00485740403793973D0) (845.9371 1.3060363052634665D-4) (898.9372 1.2867027645277655D-4) (928.1174 0.0013123318043863479D0) (1270.4751 2.8065489179076165D-4) (1318.8604 1.6072196376114176D-4) (1478.5881 4.070884718473849D-4) (1665.6515 3.9316983171149613D-4) (1835.06 8.449811838159332D-5) ;) (290 , (48.8648 3.5544426013442735D-4) (79.9525 7.582992012558857D-5) (175.5615 3.917031090134936D-4) (334.9392 2.452851483880148D-4) (375.2202 0.0024220345381083366D0) (420.5525 7.29419007956606D-5) (474.5466 1.9512762614080256D-4) (501.7075 2.450233266334076D-4) (552.6829 0.011509687839448018D0) (579.8121 0.0016078829723256195D0) (651.0003 1.3988959656960427D-4) (742.7471 0.0036703170574093613D0) (846.9216 1.201813116570449D-4) (925.9109 8.833580866740875D-4) (983.9818 1.1449241057597958D-4) (1277.4224 2.5700534054984195D-4) (1295.415 2.6031034144993027D-4) (1479.4273 3.8948028689151856D-4) (1663.6735 3.547661245945341D-4) (2024.6028 7.758517597317193D-5) ;) (300 , (49.4431 3.161985430694088D-4) (176.1947 3.087625247689161D-4) (337.9624 2.9000060788565095D-4) (371.7876 0.002727352994733669D0) (406.8899 8.055388875785305D-5) (476.8085 1.5909445516001982D-4) (503.4159 2.564361708068193D-4) (552.6021 0.009204800031581502D0) (578.3878 0.0012775635849037854D0) (652.088 1.2282461287245968D-4) (744.4183 0.002627542127819372D0) (773.6904 1.059157489316251D-4) (846.6165 1.0316018473152268D-4) (922.9955 5.670482916880274D-4) (941.4699 2.969245019660115D-4) (1272.8338 2.1489986814970193D-4) (1301.089 2.7283573191861586D-4) (1480.6878 3.509971467637537D-4) (1663.334 2.9189427884306334D-4) (2040.7532 6.569038310863742D-5) ;) (310 , (50.7574 2.655818018587341D-4) (179.0224 2.642065322992726D-4) (314.5226 1.0389174306136321D-4) (370.9102 0.0027034350774463733D0) (406.0718 8.205785715722192D-5) (499.5396 2.1371439974614997D-4) (504.3191 2.0545084573475212D-4) (551.948 0.007634840463145389D0) (576.9635 9.472431290261521D-4) (659.0518 1.1885902248005144D-4) (745.3084 0.0019197944690153204D0) (788.5983 7.399849506577568D-5) (843.6363 8.072869814333366D-5) (922.4871 4.241191564439211D-4) (943.3441 1.9622863645237223D-4) (1276.7384 2.056541194505015D-4) (1298.552 2.6184928508209273D-4) (1481.434 2.842300450617646D-4) (1664.0973 2.3052880551650905D-4) (2040.7532 8.843036857073624D-7) ;) (320 , (51.7334 2.059730368118649D-4) (183.2188 2.518423784884966D-4) (308.9948 1.4497558494662925D-5) (370.4085 0.0024192864697934486D0) (405.2537 8.356182555659079D-5) (504.6803 1.6041775436163573D-4) (505.2224 1.5446567091428168D-4) (551.9374 0.006447974652965402D0) (588.5363 3.90750781004196D-4) (662.3795 1.0710212719206833D-4) (745.401 0.001401563890435285D0) (796.0291 6.176794831373346D-5) (842.9334 2.0492964485739833D-5) (924.022 3.704648120914661D-4) (943.7861 5.818311216205256D-5) (1277.6592 7.021997625860312D-5) (1292.1458 2.6366751304332645D-4) (1481.0762 2.052467372879098D-4) (1665.6287 1.7617475617271957D-4) ;) (330 , (52.0263 1.4638759415173204D-4) (186.5389 2.453506080003221D-4) (370.2386 0.0019709968742554138D0) (405.6084 8.759729128878789D-5) (506.1257 1.0348048774650033D-4) (506.5321 1.1036616783742675D-4) (552.7409 0.005436328114621892D0) (596.0986 4.512918248629246D-5) (663.4002 8.550060538226491D-5) (744.7705 0.0010028720798627897D0) (798.5152 2.8632784220405506D-5) (926.5476 3.5525307332490353D-4) (1287.4075 2.48429680582799D-4) (1479.3615 1.2924637446387052D-4) (1666.6165 1.2572479423441158D-4) ;) (340 , (51.8406 7.929120772820544D-5) (188.0542 2.2570487783586663D-4) (370.3743 0.0014485040919364099D0) (406.6812 6.965570638709592D-5) (506.7893 4.89452641926467D-5) (510.401 9.477056128316019D-5) (554.1362 0.004447507798853105D0) (663.3293 4.772828051668133D-5) (743.7337 6.833253312553366D-4) (928.9035 3.341719729622959D-4) (1477.3975 5.844808920019106D-5) (1666.8013 6.77253406508385D-5) ;) (350 , (187.9455 1.8002502011732913D-4) (370.7912 9.41543585123652D-4) (514.2698 7.917500481275919D-5) (555.5538 0.0033722539498867686D0) (742.813 4.249790964158537D-4) (929.8388 2.6792467500649385D-4) ;) (360 , (186.7841 1.2113353949861142D-4) (371.0612 5.681956796591201D-4) (518.1386 6.357944834235819D-5) (556.3706 0.002243730634380304D0) (741.6599 2.5431750643061955D-4) (930.1442 1.7204415613786167D-4) ;) (370 , (371.0422 3.086965810125749D-4) (556.7027 0.0013016102511148539D0) (739.6356 1.3888970558263166D-4) ;))") nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 99 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 94 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 294 405) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 194 405) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 2 0 nil 0) (0 1 4 0 nil 0) (0 0 5 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 205 474) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 57) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 192 334) (om-make-point 34 28) ";" "\";\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 85 288) (om-make-point 33 28) "," "\",\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 118 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 207 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 263 109) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 253 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST 2" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 50 290) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-N" (quote last-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 216 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (7 0 3 0 nil 0) (11 0 7 0 nil 0) (6 0 7 1 nil 0) (2 0 7 2 nil 0) (5 0 7 3 nil 0) (4 0 8 0 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (4 0 11 0 nil 0) (4 0 12 0 nil 0) (10 0 12 1 nil 0))) 6.17 nil "" (om-make-point 196 65) (om-make-point 500 591)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 4847/12 272) nil nil nil "float"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 363 203) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 65 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 440 512) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 340 512) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 0 1 0 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 3 1 nil 0) (5 0 4 0 nil 0) (2 1 6 0 nil 0) (2 0 7 0 nil 0))) 1 "om->coll max" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-DATA" (quote save-data) (quote ((om-load-inputfun (quote input-funbox) "data (list, BPF, or TextFile)" "SELF" nil) (om-load-inputfun (quote input-funbox) "a file location" "PATH" "data.txt"))) (om-make-point 183 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 321 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 144 569) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((12 0 0 0 nil 0) (2 0 3 0 nil 0) (6 0 8 0 nil 0) (10 0 8 1 nil 0) (5 0 8 2 nil 0) (8 0 9 0 nil 0) (4 0 10 0 nil 0) (1 0 11 0 nil 0) (3 0 11 1 nil 0) (11 0 12 0 nil 0) (9 0 12 1 nil 0) (7 0 13 0 nil 0) (0 0 14 0 nil 0))) 1 "valiadação" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 666 500) (om-make-point 20 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 157 44) (quote "Fundamental of the timbre$") "" (om-make-point 797 359) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 173 48) (quote "Transposition of all partials.") "" (om-make-point 692 503) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 229 67) (quote "SDIF has a problem that causes one of the lists to have more than 3 parameters (amplitude, time, frequency).") "" (om-make-point 143 215) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 1025/2 635/2) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 6) (10 0 0 1 nil 4) (9 0 0 2 nil 3) (15 0 0 3 nil 2) (16 0 5 0 nil 0) (11 0 8 0 nil 0) (11 0 9 0 nil 7) (11 0 10 0 nil 7) (13 0 11 0 nil 7) (4 0 12 0 nil 0) (14 0 13 0 nil 7) (12 0 13 1 nil 7) (11 0 15 0 nil 1) (21 0 15 1 nil 0) (1 0 16 0 nil 9) (3 0 16 1 nil 3) (17 0 16 2 nil 2) (0 0 16 3 ((om-make-point 125 612) (om-make-point 294 612) (om-make-point 309 518) (om-make-point 463 574) (om-make-point 462 569)) 1) (3 0 17 0 nil 0) (2 0 17 1 nil 0))) 6.17 nil "" (om-make-point 65 0) (om-make-point 1069 636)) (quote ((om-load-inputfun (quote input-funbox) "" "SDIF" nil) (om-load-inputfun (quote input-funbox) "" "area de afinação" nil) (om-load-inputfun (quote input-funbox) "" "fundamental do timbre" nil) (om-load-inputfun (quote input-funbox) "" "name" nil))) (om-make-point 423 539) (om-make-point 259 66) (list (quote finish)) nil "TRANSPOSIÇÃO PARA MAX/MSP-COLL"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 374 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 152 83) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 291 22) (om-make-point 32 28) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 251 16) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 243 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 25 148) (om-make-point 255 92) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300 400 500)) (quote (11 8 3 11 5 6)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 597 301) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 267 525) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 210 354) (om-make-point 48 28) (list 127) "(127)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "densidade" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 6" nil))) (om-make-point 44 294) (om-make-point 133 58) nil nil (list (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 205 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 6" 5 (om-make-point 377 66) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 4 (om-make-point 295 56) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 176 264) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "meio 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 220 182) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 127 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 15 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 210 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 143 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 212 96) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 171 567) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 51 565) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (5 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "meio" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 5" 3 (om-make-point 230 53) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 2 (om-make-point 187 51) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "grave" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 51 171) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 277 340) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 15 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 288 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 143 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 305 84) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 171 567) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 51 565) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (5 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "grave" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "meio" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 116 173) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 127 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 15 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 210 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 143 434) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 212 96) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 171 567) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 51 565) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 0 1 nil 0) (5 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0) (3 1 6 0 nil 0) (3 0 7 0 nil 0))) 1 "meio" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 160 541) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 83 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 50 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 106 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 1 (om-make-point 105 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 0 (om-make-point 55 48) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 203 629) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 116 633) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((10 0 0 0 nil 0) (4 0 3 0 nil 0) (1 0 4 0 nil 0) (6 0 4 1 nil 0) (5 0 7 0 nil 0) (14 0 7 1 nil 0) (2 0 8 0 nil 0) (13 0 8 1 nil 0) (0 0 9 0 nil 0) (11 0 10 0 nil 0) (12 0 10 1 nil 0) (3 0 10 2 nil 0) (7 0 11 0 nil 0) (8 0 12 0 nil 0) (9 1 15 0 nil 0) (9 0 16 0 nil 0))) 1 "densidade" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 9)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 32 382) (om-make-point 352 143) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6169 6946 6000 6605 7200 8146 7369 7805 8569 9005 8400 9346) (6605 6000 6946 6169 7805 7369 8146 7200 8569 9005 9346 8400) (6605 6946 6000 7369 7200 7805 9346 8569 9005) (6000 6946 6605 6169 7369 7805 7200 8146 9346 9005 8400 8569) (6946 6169 6605 6000 7369 8146 7805 7200 9005 9346 8569 8400) (6605 6946 6000 6169 7805 8146 7200 7369 8400 9346 9005 8569))) :lonset (quote (0 1000 2000 3000 4000 5000 6000)) :ldur (quote ((1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000))) :lvel (quote ((127 127 127 127 127 127 127 127 127 127 127 127) (127 127 127 127 127 127 127 127 127 127 127 127) (127 127 127 127 127 127 127 127 127) (127 127 127 127 127 127 127 127 127 127 127 127) (127 127 127 127 127 127 127 127 127 127 127 127) (127 127 127 127 127 127 127 127 127 127 127 127))) :loffset (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0))) :lchan (quote ((9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 229/50 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggf) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sieve" (om-load-patch-abs1 "Sieve" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 185 126) (om-make-point 74 28) (list 19 16 64) "(19 16 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 106 125) (om-make-point 74 28) (list 11 16 64) "(11 16 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 98 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 6" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 86 163) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 3 37) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 5" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 162 165) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 19 24) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 35 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 43 540) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 3 1 nil 0) (0 0 4 1 nil 0) (2 0 5 0 nil 0) (5 0 6 0 nil 0))) 6.17 nil "" (om-make-point 163 43) (om-make-point 678 676)) (quote nil) (om-make-point 377 0) nil (list (list 16 27 35 38 49 54 60)) nil "Sieve"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (8 0 3 0 nil 0) (2 0 3 1 nil 0) (8 0 5 0 nil 0) (4 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 7 1 nil 0) (10 0 8 0 nil 0) (1 1 10 0 nil 0) (9 0 10 1 nil 0) (28 1 11 0 nil 0) (25 0 11 1 nil 0) (14 0 15 0 nil 0) (17 0 18 0 nil 0) (11 0 18 1 nil 0) (15 0 18 2 nil 0) (16 0 18 3 nil 0) (29 0 19 0 nil 0) (23 0 20 0 nil 0) (19 0 23 0 nil 0) (22 0 23 1 nil 0) (21 0 23 2 nil 0) (20 0 24 2 nil 0) (24 2 27 0 nil 0) (24 2 27 1 nil 0) (24 2 27 2 nil 0) (7 0 27 3 nil 0) (5 0 27 4 nil 0) (3 0 27 5 nil 0) (27 0 28 1 nil 0) (26 0 28 4 nil 0))) nil 6.17))
