; OM File Header - Saved 2020/09/15 1:52:17
; (6.17 :patc (om-make-point 519.88086 190) (om-make-point -8 -8) (om-make-point 1366 705) "" 183 0 "2020/08/24 20:22:01" "2020/08/24 23:42:46")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../../in-files/Vc+SP-nonvib-D4-mf-1c.sdif\""))
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "3.2.2.1. - 1 mudança de timbres" (quote ((let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 52 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "oitavador" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 61 568) nil nil nil (list (let ((box (om-load-boxin "input" 0 (om-make-point 43 87) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 138 58) (om-make-point 398 28) (list -6000 -4800 -3600 -2400 -1200 0 1200 2400 3600 4800 6000 7200 8400) "(-6000 -4800 -3600 -2400 -1200 0 1200 2400 3600 4800 6000 7200 8400)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 318 293) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 212 235) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 225 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 134 163) (om-make-point 78 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 304 369) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 156 323) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 1 2 0 nil 0) (5 0 3 0 nil 0) (1 0 4 0 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (2 0 6 0 nil 0) (3 0 7 0 nil 0))) 1 "oitavador" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Primeira diagonal OTONAL do diamante.") "" (om-make-point 79 405) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 45 411) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 23 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 80 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 150 39) (om-make-point 74 28) (list 19 16 64) "(19 16 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 108 69) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 19 16 64) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 72 38) (om-make-point 74 28) (list 11 16 64) "(11 16 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 30 68) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 11 16 64) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" 3/2))) (om-make-point 42 333) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 20 255) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEND-MAX 2" (quote send-max) (quote ((om-load-inputfun (quote input-funbox) "list" "MAXLIST" 6000))) (om-make-point 325 400) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 86 38) (quote "transposição$cents") "" (om-make-point 294 254) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 757/2 2597/10) (om-make-point 26 40) 0 "0$" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OM->MAX | Sinóides" (om-load-patch-abs1 "OM->MAX | Sinóides" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 232 350) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1586/9 1035/2) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 2281/18 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 794/9 397/2) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 50 2183/18) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OM->MAX" (om-load-patch-abs1 "OM->MAX" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 318 106) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 284 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 402 283) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1271/9 2720/9) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 36 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 144 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1019/9 3737/9) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP 2" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 803/9 1712/9) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 97 278) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 386 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 257 206) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 67 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 0 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 55 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 294 290) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 194 290) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((4 0 0 0 nil 0) (3 0 0 1 nil 0) (2 1 1 0 nil 0) (0 0 2 0 nil 0) (5 0 3 0 nil 0) (6 0 4 0 nil 0) (1 0 7 0 nil 0) (2 1 7 1 nil 0) (2 0 8 0 nil 0))) 2 "omloop 2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 965/9 2990/9) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (0 0 1 1 nil 0) (8 1 2 0 nil 0) (6 0 4 0 nil 0) (9 0 7 0 nil 0) (4 0 8 0 nil 0) (1 0 8 1 nil 0) (8 0 9 0 nil 0) (3 0 9 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1532/9 2539/10) nil (list (list 1690.256 0.017 1617.66 0.062 1535.713 0.018 1466.363 0.049 1153.146 0.371 928.029 0.299 768.744 0.42 539.829 0.849 384.372 1.0 1309.403 0.074 843.178 0.036 2005.426 0.004 1235.912 0.1 1079.659 0.146 2306.292 0.001 2078.547 0.001 612.271 0.107 458.685 0.001 308.265 0.022 998.09 0.06 2156.824 0.0 2382.114 0.0 1384.062 0.017 696.845 0.027 1847.501 0.009)) nil "OM->MAX"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "transpositor" (om-load-patch-abs1 "transpositor" (quote ((let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 175 163) (om-make-point 30 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 115 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 96 312) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 23 156) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 113 226) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 249 88) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 0 1 nil 0) (6 0 1 0 nil 0) (4 0 2 0 nil 0) (6 0 3 0 nil 0) (0 0 4 0 nil 0) (3 0 4 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 515/9 561/2) nil (list (list 9230 9154 9064 8984 8568 8192 7866 7254 6666 8788 8026 9526 8688 8454 9768 9588 7472 6972 6284 8318 9652 9824 8884 7696 9384)) nil "transpositor"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 0 0 nil 0) (5 0 1 0 nil 0) (6 0 5 0 nil 10) (2 0 5 1 nil 0) (4 0 6 0 nil 0) (3 0 6 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 541/2 3097/10) (om-make-point 244 66) (list (list 1819.9627 0.099 1323.0878 0.0192 1213.277 0.0788 1213.277 0.1006 909.9812 0.0143 909.9812 0.0074 661.5439 0.0524 661.5439 0.2167 404.4151 0.0051 303.3192 0.0223 2426.5537 0.0025 1819.9627 0.0059 1819.9627 0.0075 1819.9627 0.0997 1617.6604 0.0201 1323.0878 0.0712 1213.277 0.0253 1213.277 0.0499 606.6384 0.0081 2426.5537 0.0022 2426.5537 0.001 1819.9627 0.023 1617.6604 0.0443 1617.6604 0.0061 1617.6604 0.0099 1323.0878 0.0202 1323.0878 0.0068 1213.277 0.0549 909.9812 0.0369 661.5439 0.0217 606.6384 0.0083 606.6384 0.006 454.9907 0.0034 2646.1756 0.0056 2646.1756 0.0187 2426.5537 0.001 2426.5537 0.0 1819.9627 0.0028 1819.9627 0.0165 1617.6604 0.0189 1617.6604 0.0107 1617.6604 0.0121 1213.277 0.0181 909.9812 0.0062 909.9812 0.0193 808.8302 0.017 808.8302 0.0166 808.8302 0.0296 808.8302 0.013 808.8302 0.0091 808.8302 0.0104 661.5439 0.0053 454.9907 0.005 2646.1756 0.0019 1819.9627 0.0027 1819.9627 0.0367 1617.6604 3.0E-4 1617.6604 0.0351 1323.0878 0.0065 1323.0878 0.0034 1323.0878 0.0218 1213.277 0.0206 909.9812 0.0345 909.9812 0.0151 909.9812 0.0867 808.8302 0.0563 808.8302 0.0049 661.5439 0.0031 661.5439 0.0025 661.5439 0.01 2426.5537 0.0098 2426.5537 0.0218 2426.5537 0.0011 2426.5537 0.0026 1819.9627 0.0032 1617.6604 0.0077 1617.6604 0.0066 1323.0878 0.0014 2426.5537 0.0039 1819.9627 0.015 1617.6604 0.0056 1617.6604 0.016 661.5439 0.0031 1617.6604 0.0076 1213.277 0.0394 1213.277 0.0524 909.9812 0.0692 909.9812 0.0593 1819.9627 0.0318 1617.6604 0.009 909.9812 0.0254 909.9812 0.04 661.5439 0.016 606.6384 0.0079 404.4151 0.004 227.4953 0.0046 202.2076 0.0047 1819.9627 0.0029 1617.6604 0.0161 1617.6604 0.0091 1323.0878 0.0142 1213.277 0.1674 808.8302 0.0342 606.6384 0.0102 303.3192 0.005 2646.1756 0.0034 1617.6604 0.0033 1323.0878 0.0369 1213.277 0.0972 808.8302 0.0257 606.6384 0.0227 606.6384 0.0082 404.4151 0.0077 303.3192 0.0053 303.3192 0.0055 1213.277 0.0075 909.9812 0.0187 909.9812 0.0283 808.8302 0.0194 808.8302 0.0085 661.5439 0.0047 661.5439 0.0064 661.5439 0.0152 454.9907 0.0098 606.6384 0.048 808.8302 0.0438 909.9812 0.0276 1617.6604 0.0155 1617.6604 0.0088 1617.6604 0.0053 1617.6604 0.0139 1617.6604 0.0095 1819.9627 0.005 1819.9627 0.0088 1819.9627 0.012 2426.5537 0.0058 2426.5537 0.0061 2426.5537 0.0052 454.9907 0.1109 1213.277 0.1995 1213.277 0.0031 1323.0878 0.0234 1617.6604 0.0092 1617.6604 0.0464 2426.5537 0.013 2426.5537 0.0552 2646.1756 0.0042 454.9907 0.0064 454.9907 0.1201 606.6384 0.0172 661.5439 0.0231 661.5439 0.1073 808.8302 0.038 808.8302 0.1585 808.8302 0.5404 909.9812 0.006 909.9812 0.0247 909.9812 0.0837 1617.6604 0.0088 1617.6604 0.0235 1617.6604 0.0623 1819.9627 0.0276 1819.9627 0.0073 1819.9627 0.0082 1819.9627 0.0071 2426.5537 0.0049 2426.5537 0.0058 2426.5537 0.03 2426.5537 0.007 454.9907 0.015 606.6384 0.0418 808.8302 0.0852 808.8302 0.0846 1213.277 0.1701 1213.277 0.0167 1323.0878 0.0113 1323.0878 0.0234 1617.6604 0.026 1819.9627 0.0134 1819.9627 0.0062 2426.5537 0.0194 2426.5537 0.0075 2426.5537 0.0098 2426.5537 0.0165 2426.5537 0.0131 454.9907 0.0284 606.6384 0.0552 808.8302 0.0625 1213.277 0.0573 1323.0878 0.0226 1323.0878 0.0188 1323.0878 0.0114 1323.0878 0.0445 1617.6604 0.0522 1819.9627 0.0497 1819.9627 0.0326 2426.5537 0.0168 2426.5537 0.0565 2646.1756 0.0822 2646.1756 0.0051 404.4151 0.0118 454.9907 0.0337 606.6384 0.0365 808.8302 0.1032 1213.277 0.4632 1323.0878 0.012 1323.0878 0.0136 1323.0878 0.3326 1617.6604 0.0511 1617.6604 0.0211 1617.6604 0.0128 1819.9627 0.0115 1819.9627 0.0072 2426.5537 0.027 2426.5537 0.0278 2426.5537 0.0153 2426.5537 0.0296 2646.1756 0.0148 606.6384 0.0417 661.5439 0.0805 808.8302 0.1367 808.8302 0.1657 808.8302 0.0623 909.9812 0.1464 1213.277 0.0395 1617.6604 0.0111 1819.9627 0.0094 1819.9627 0.0062 2426.5537 0.0069 2426.5537 0.0584 2646.1756 0.0043 404.4151 0.3389 909.9812 0.1433 1617.6604 0.0229 1617.6604 0.0223 1617.6604 0.0489 2426.5537 0.0115 1819.9627 0.011 1819.9627 0.0065 330.772 0.0096 1323.0878 0.0088 1323.0878 0.0131 1323.0878 0.003 2426.5537 0.0054 2646.1756 0.005 227.4953 0.0236 1819.9627 0.0061 1819.9627 0.1244 1213.277 0.0204 1617.6604 0.0053 1617.6604 0.0033 2426.5537 0.0139 2426.5537 0.0072 2646.1756 0.0195 1819.9627 0.0289 2646.1756 0.006 1323.0878 0.0937 808.8302 0.1304 1213.277 0.0763 1617.6604 0.0199 1819.9627 0.0072 1819.9627 0.0565 1323.0878 0.0382 909.9812 0.0272 1819.9627 0.0434 1213.277 0.3233 909.9812 0.0115 1617.6604 0.0167 1617.6604 0.0099 1819.9627 0.0921 661.5439 0.0385 661.5439 0.0666 909.9812 0.0069 2426.5537 0.1004 1213.277 0.0091 1617.6604 0.0684 909.9812 0.0068 1323.0878 0.0158 330.772 0.0191 1617.6604 0.019 661.5439 0.0635 909.9812 0.0129 1819.9627 0.0113 1819.9627 0.006 404.4151 0.0159 1617.6604 0.0013 404.4151 0.0773 808.8302 0.0159 1819.9627 0.0179 330.772 0.1655 1213.277 0.0407 661.5439 0.0088 1323.0878 0.0094 1323.0878 0.0104 2426.5537 0.0102 330.772 0.0186 606.6384 0.3938 661.5439 0.1636 808.8302 0.0096 1323.0878 0.026 1617.6604 0.0065 1819.9627 0.0222 1617.6604 0.0297 2426.5537 0.0018 404.4151 0.0056 454.9907 0.0076 2426.5537 0.0354 1323.0878 0.0092 1819.9627 0.4778 606.6384 0.0096 2426.5537 0.01 1323.0878 0.9 909.9812 0.0113 1819.9627 0.0064 2426.5537 0.0177 1617.6604 0.0079 2426.5537 0.0365 1819.9627 0.0104 2426.5537 0.0406 1617.6604 0.1142 1213.277 0.014 454.9907 0.0537 1213.277 0.019 1617.6604 0.0135 2426.5537 0.0307 1213.277 0.106 1617.6604 0.014 1819.9627 0.0112 1819.9627 0.0252 2426.5537 0.0139 661.5439 0.1308 808.8302 0.0809 909.9812 0.0468 909.9812 0.1832 1213.277 0.015 1323.0878 0.0106 1617.6604 0.0544 1819.9627 0.0162 1819.9627 0.0152 2426.5537 0.0231 2646.1756 0.0042 227.4953 0.0101 303.3192 0.1455 303.3192 0.067 606.6384 0.054 808.8302 0.1333 808.8302 0.3077 808.8302 0.0895 1213.277 0.0988 1323.0878 0.0082 1323.0878 0.0165) (list (list 1819.9627 0.098974) (list 1323.0878 0.019184) (list 1213.2769 0.07881) (list 1213.2769 0.100557) (list 909.9812 0.014349) (list 909.9812 0.007364) (list 661.5439 0.052448) (list 661.5439 0.216667) (list 404.4151 0.005111) (list 303.31918 0.022307) (list 2426.5537 0.002506) (list 1819.9627 0.005911) (list 1819.9627 0.007529) (list 1819.9627 0.099705) (list 1617.6604 0.020094) (list 1323.0878 0.071162) (list 1213.2769 0.025293) (list 1213.2769 0.049859) (list 606.63837 0.008078) (list 2426.5537 0.002174) (list 2426.5537 0.001024) (list 1819.9627 0.023038) (list 1617.6604 0.044281) (list 1617.6604 0.006114) (list 1617.6604 0.009934) (list 1323.0878 0.020152) (list 1323.0878 0.006844) (list 1213.2769 0.054949) (list 909.9812 0.036942) (list 661.5439 0.021715) (list 606.63837 0.008345) (list 606.63837 0.005955) (list 454.99066 0.003391) (list 2646.1756 0.005594) (list 2646.1756 0.018711) (list 2426.5537 0.001003) (list 2426.5537 0.0) (list 1819.9627 0.002808) (list 1819.9627 0.016532) (list 1617.6604 0.018854) (list 1617.6604 0.010733) (list 1617.6604 0.01207) (list 1213.2769 0.018059) (list 909.9812 0.006193) (list 909.9812 0.019297) (list 808.8302 0.017035) (list 808.8302 0.01662) (list 808.8302 0.029603) (list 808.8302 0.012998) (list 808.8302 0.009116) (list 808.8302 0.010397) (list 661.5439 0.005306) (list 454.99066 0.005019) (list 2646.1756 0.001857) (list 1819.9627 0.002742) (list 1819.9627 0.036706) (list 1617.6604 2.59E-4) (list 1617.6604 0.035122) (list 1323.0878 0.006474) (list 1323.0878 0.0034) (list 1323.0878 0.021768) (list 1213.2769 0.020608) (list 909.9812 0.03445) (list 909.9812 0.015085) (list 909.9812 0.086685) (list 808.8302 0.056288) (list 808.8302 0.00487) (list 661.5439 0.003114) (list 661.5439 0.002518) (list 661.5439 0.010001) (list 2426.5537 0.009845) (list 2426.5537 0.021808) (list 2426.5537 0.001143) (list 2426.5537 0.002572) (list 1819.9627 0.003164) (list 1617.6604 0.007696) (list 1617.6604 0.006641) (list 1323.0878 0.001422) (list 2426.5537 0.003918) (list 1819.9627 0.015019) (list 1617.6604 0.005552) (list 1617.6604 0.016033) (list 661.5439 0.003076) (list 1617.6604 0.00761) (list 1213.2769 0.039441) (list 1213.2769 0.052364) (list 909.9812 0.06921) (list 909.9812 0.059347) (list 1819.9627 0.031783) (list 1617.6604 0.00901) (list 909.9812 0.025369) (list 909.9812 0.03995) (list 661.5439 0.015984) (list 606.63837 0.007899) (list 404.4151 0.004002) (list 227.49533 0.004634) (list 202.20755 0.004749) (list 1819.9627 0.002903) (list 1617.6604 0.016123) (list 1617.6604 0.009061) (list 1323.0878 0.01417) (list 1213.2769 0.167435) (list 808.8302 0.034234) (list 606.63837 0.010246) (list 303.31918 0.004997) (list 2646.1756 0.003396) (list 1617.6604 0.003327) (list 1323.0878 0.036862) (list 1213.2769 0.097206) (list 808.8302 0.025665) (list 606.63837 0.022733) (list 606.63837 0.008201) (list 404.4151 0.007677) (list 303.31918 0.005348) (list 303.31918 0.005452) (list 1213.2769 0.007525) (list 909.9812 0.018728) (list 909.9812 0.028278) (list 808.8302 0.019415) (list 808.8302 0.008498) (list 661.5439 0.004656) (list 661.5439 0.006377) (list 661.5439 0.015192) (list 454.99066 0.009762) (list 606.63837 0.04796) (list 808.8302 0.043828) (list 909.9812 0.027639) (list 1617.6604 0.015511) (list 1617.6604 0.008848) (list 1617.6604 0.005324) (list 1617.6604 0.013934) (list 1617.6604 0.009544) (list 1819.9627 0.004973) (list 1819.9627 0.008842) (list 1819.9627 0.012048) (list 2426.5537 0.005791) (list 2426.5537 0.006057) (list 2426.5537 0.005152) (list 454.99066 0.110945) (list 1213.2769 0.199477) (list 1213.2769 0.003071) (list 1323.0878 0.023391) (list 1617.6604 0.009195) (list 1617.6604 0.04642) (list 2426.5537 0.013035) (list 2426.5537 0.055167) (list 2646.1756 0.004222) (list 454.99066 0.006379) (list 454.99066 0.120087) (list 606.63837 0.017246) (list 661.5439 0.023062) (list 661.5439 0.107281) (list 808.8302 0.037962) (list 808.8302 0.158459) (list 808.8302 0.540403) (list 909.9812 0.00597) (list 909.9812 0.02467) (list 909.9812 0.083677) (list 1617.6604 0.008838) (list 1617.6604 0.023498) (list 1617.6604 0.062266) (list 1819.9627 0.0276) (list 1819.9627 0.007283) (list 1819.9627 0.008191) (list 1819.9627 0.007105) (list 2426.5537 0.004908) (list 2426.5537 0.005771) (list 2426.5537 0.02995) (list 2426.5537 0.006958) (list 454.99066 0.015024) (list 606.63837 0.041775) (list 808.8302 0.085231) (list 808.8302 0.084616) (list 1213.2769 0.170135) (list 1213.2769 0.016749) (list 1323.0878 0.011301) (list 1323.0878 0.023353) (list 1617.6604 0.025953) (list 1819.9627 0.013404) (list 1819.9627 0.006198) (list 2426.5537 0.019373) (list 2426.5537 0.007488) (list 2426.5537 0.009846) (list 2426.5537 0.016523) (list 2426.5537 0.013102) (list 454.99066 0.02838) (list 606.63837 0.0552) (list 808.8302 0.06252) (list 1213.2769 0.057338) (list 1323.0878 0.022616) (list 1323.0878 0.018785) (list 1323.0878 0.011383) (list 1323.0878 0.044461) (list 1617.6604 0.052239) (list 1819.9627 0.049733) (list 1819.9627 0.032553) (list 2426.5537 0.016787) (list 2426.5537 0.056536) (list 2646.1756 0.082161) (list 2646.1756 0.005092) (list 404.4151 0.011827) (list 454.99066 0.033718) (list 606.63837 0.036539) (list 808.8302 0.103244) (list 1213.2769 0.463236) (list 1323.0878 0.012016) (list 1323.0878 0.013617) (list 1323.0878 0.332606) (list 1617.6604 0.051147) (list 1617.6604 0.021128) (list 1617.6604 0.01283) (list 1819.9627 0.0115) (list 1819.9627 0.007234) (list 2426.5537 0.027036) (list 2426.5537 0.027829) (list 2426.5537 0.015302) (list 2426.5537 0.029581) (list 2646.1756 0.014753) (list 606.63837 0.041723) (list 661.5439 0.080498) (list 808.8302 0.136664) (list 808.8302 0.16566) (list 808.8302 0.062297) (list 909.9812 0.146377) (list 1213.2769 0.039502) (list 1617.6604 0.011117) (list 1819.9627 0.009354) (list 1819.9627 0.006176) (list 2426.5537 0.006897) (list 2426.5537 0.058446) (list 2646.1756 0.004265) (list 404.4151 0.338875) (list 909.9812 0.14328) (list 1617.6604 0.022891) (list 1617.6604 0.022291) (list 1617.6604 0.048868) (list 2426.5537 0.011518) (list 1819.9627 0.011024) (list 1819.9627 0.006474) (list 330.77194 0.009552) (list 1323.0878 0.008816) (list 1323.0878 0.013054) (list 1323.0878 0.00303) (list 2426.5537 0.005389) (list 2646.1756 0.005007) (list 227.49533 0.023599) (list 1819.9627 0.00612) (list 1819.9627 0.124432) (list 1213.2769 0.020429) (list 1617.6604 0.005268) (list 1617.6604 0.003272) (list 2426.5537 0.013896) (list 2426.5537 0.007212) (list 2646.1756 0.019464) (list 1819.9627 0.028864) (list 2646.1756 0.005966) (list 1323.0878 0.093709) (list 808.8302 0.130377) (list 1213.2769 0.07631) (list 1617.6604 0.019922) (list 1819.9627 0.007201) (list 1819.9627 0.056452) (list 1323.0878 0.038229) (list 909.9812 0.027173) (list 1819.9627 0.043399) (list 1213.2769 0.323298) (list 909.9812 0.011511) (list 1617.6604 0.016702) (list 1617.6604 0.009948) (list 1819.9627 0.092069) (list 661.5439 0.038507) (list 661.5439 0.066579) (list 909.9812 0.006944) (list 2426.5537 0.100429) (list 1213.2769 0.009072) (list 1617.6604 0.068446) (list 909.9812 0.006807) (list 1323.0878 0.015843) (list 330.77194 0.019145) (list 1617.6604 0.018985) (list 661.5439 0.06352) (list 909.9812 0.012865) (list 1819.9627 0.011258) (list 1819.9627 0.006002) (list 404.4151 0.015946) (list 1617.6604 0.001281) (list 404.4151 0.077296) (list 808.8302 0.015931) (list 1819.9627 0.017872) (list 330.77194 0.165548) (list 1213.2769 0.040703) (list 661.5439 0.008755) (list 1323.0878 0.009412) (list 1323.0878 0.010394) (list 2426.5537 0.010206) (list 330.77194 0.01859) (list 606.63837 0.393778) (list 661.5439 0.163626) (list 808.8302 0.00964) (list 1323.0878 0.026041) (list 1617.6604 0.006514) (list 1819.9627 0.022196) (list 1617.6604 0.029681) (list 2426.5537 0.001834) (list 404.4151 0.005612) (list 454.99066 0.007556) (list 2426.5537 0.035375) (list 1323.0878 0.009238) (list 1819.9627 0.477761) (list 606.63837 0.009613) (list 2426.5537 0.009988) (list 1323.0878 0.9) (list 909.9812 0.011329) (list 1819.9627 0.006393) (list 2426.5537 0.01766) (list 1617.6604 0.007864) (list 2426.5537 0.036517) (list 1819.9627 0.010421) (list 2426.5537 0.040614) (list 1617.6604 0.114177) (list 1213.2769 0.013978) (list 454.99066 0.053691) (list 1213.2769 0.01896) (list 1617.6604 0.013541) (list 2426.5537 0.030714) (list 1213.2769 0.105951) (list 1617.6604 0.013979) (list 1819.9627 0.011222) (list 1819.9627 0.02521) (list 2426.5537 0.013916) (list 661.5439 0.130846) (list 808.8302 0.080929) (list 909.9812 0.046751) (list 909.9812 0.183219) (list 1213.2769 0.015005) (list 1323.0878 0.010566) (list 1617.6604 0.054366) (list 1819.9627 0.01623) (list 1819.9627 0.01517) (list 2426.5537 0.023063) (list 2646.1756 0.004155) (list 227.49533 0.010133) (list 303.31918 0.145479) (list 303.31918 0.06699) (list 606.63837 0.054015) (list 808.8302 0.133329) (list 808.8302 0.307702) (list 808.8302 0.089511) (list 1213.2769 0.098842) (list 1323.0878 0.008244) (list 1323.0878 0.016453))) nil "OM->MAX | Sinóides"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "subtituicao" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 208 244) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 376 430) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 292 59) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 38 71) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 228 326) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 150 159) nil nil nil (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 401 551) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 231 460) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 189 395) (om-make-point 89 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 442 304) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 233 285) (om-make-point 49 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 305 185) (om-make-point 107 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 "(lambda (lista)$  (apply 'min lista))") (quote ((om-load-inputfun (quote input-funbox) "" "LISTA" nil))) (om-make-point 204 157) nil (list 14) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" 1) (om-load-inputfun (quote input-funbox) "no documentation" "END" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" 1))) (om-make-point 489 235) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 465 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 182 44) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 42 249) (om-make-point 124 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 26 48) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 298 579) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 198 577) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 1 0 1 nil 0) (2 0 1 0 nil 0) (4 0 2 0 nil 0) (10 0 2 1 nil 0) (7 0 3 0 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (9 0 5 0 nil 0) (3 0 5 1 nil 0) (9 0 6 0 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (11 0 10 0 nil 0) (3 0 10 1 nil 0) (0 0 12 0 nil 0) (1 0 13 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 290 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 286 437) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 177 423) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 1 0 0 nil 0) (4 0 3 0 nil 0) (2 0 4 0 nil 0) (5 0 4 1 nil 0) (1 0 5 0 nil 0) (0 0 6 0 nil 0) (3 0 7 0 nil 0))) 1 "subtituicao" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "nota-mais-próxima" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 285 180) nil nil nil (list (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction 2" 6.16 "(lambda (lista-n)$$(loop for x in lista-n collect (loop for y in x collect (abs y))))") (quote ((om-load-inputfun (quote input-funbox) "" "LISTA-N" nil))) (om-make-point 348 383) nil (list (list (list 14036 12134 11250 10668 10232 9884 12836 10934 10050 9468 9032 8684 11636 9734 8850 8268 7832 7484 10436 8534 7650 7068 6632 6284 9236 7334 6450 5868 5432 5084 8036 6134 5250 4668 4232 3884 6836 4934 4050 3468 3032 2684 5636 3734 2850 2268 1832 1484 4436 2534 1650 1068 632 284 3236 1334 450 132 568 916 2036 134 750 1332 1768 2116 836 1066 1950 2532 2968 3316 364 2266 3150 3732 4168 4516) (list 13879.96 11977.96 11093.96 10511.96 10075.96 9727.96 12679.96 10777.96 9893.96 9311.96 8875.96 8527.96 11479.96 9577.96 8693.96 8111.96 7675.96 7327.96 10279.96 8377.96 7493.96 6911.96 6475.96 6127.96 9079.96 7177.96 6293.96 5711.96 5275.96 4927.96 7879.96 5977.96 5093.96 4511.96 4075.96 3727.96 6679.96 4777.96 3893.96 3311.96 2875.96 2527.96 5479.96 3577.96 2693.96 2111.96 1675.96 1327.96 4279.96 2377.96 1493.96 911.95997 475.95996 127.95996 3079.96 1177.96 293.95996 288.04004 724.04004 1072.04 1879.96 22.04004 906.04004 1488.04 1924.04 2272.04 679.95997 1222.04 2106.04 2688.04 3124.04 3472.04 520.04004 2422.04 3306.04 3888.04 4324.04 4672.04) (list 13782.2 11880.2 10996.2 10414.2 9978.2 9630.2 12582.2 10680.2 9796.2 9214.2 8778.2 8430.2 11382.2 9480.2 8596.2 8014.2 7578.2 7230.2 10182.2 8280.2 7396.2 6814.2 6378.2 6030.2 8982.2 7080.2 6196.2 5614.2 5178.2 4830.2 7782.2 5880.2 4996.2 4414.2 3978.2002 3630.2002 6582.2 4680.2 3796.2002 3214.2002 2778.2002 2430.2002 5382.2 3480.2002 2596.2002 2014.2002 1578.2002 1230.2002 4182.2 2280.2002 1396.2002 814.2002 378.2002 30.200196 2982.2002 1080.2002 196.2002 385.7998 821.7998 1169.7998 1782.2002 119.799805 1003.7998 1585.7998 2021.7998 2369.7998 582.2002 1319.7998 2203.7998 2785.7998 3221.7998 3569.7998 617.7998 2519.7998 3403.7998 3985.7998 4421.8 4769.8) (list 13695.72 11793.72 10909.72 10327.72 9891.72 9543.72 12495.72 10593.72 9709.72 9127.72 8691.72 8343.72 11295.72 9393.72 8509.72 7927.7197 7491.7197 7143.7197 10095.72 8193.72 7309.7197 6727.7197 6291.7197 5943.7197 8895.72 6993.7197 6109.7197 5527.7197 5091.7197 4743.7197 7695.7197 5793.7197 4909.7197 4327.7197 3891.7198 3543.7198 6495.7197 4593.7197 3709.7198 3127.7198 2691.7198 2343.7198 5295.7197 3393.7198 2509.7198 1927.7197 1491.7197 1143.7197 4095.7198 2193.7198 1309.7197 727.7197 291.71973 56.280274 2895.7198 993.7197 109.71973 472.28027 908.2803 1256.2803 1695.7197 206.28028 1090.2803 1672.2803 2108.2803 2456.2803 495.71973 1406.2803 2290.2803 2872.2803 3308.2803 3656.2803 704.2803 2606.2803 3490.2803 4072.2803 4508.2803 4856.2803) (list 13522.76 11620.76 10736.76 10154.76 9718.76 9370.76 12322.76 10420.76 9536.76 8954.76 8518.76 8170.76 11122.76 9220.76 8336.76 7754.76 7318.76 6970.76 9922.76 8020.76 7136.76 6554.76 6118.76 5770.76 8722.76 6820.76 5936.76 5354.76 4918.76 4570.76 7522.76 5620.76 4736.76 4154.76 3718.7598 3370.7598 6322.76 4420.76 3536.7598 2954.7598 2518.7598 2170.7598 5122.76 3220.7598 2336.7598 1754.7598 1318.7598 970.75977 3922.7598 2020.7598 1136.7598 554.75977 118.759766 229.24024 2722.7598 820.75977 63.240235 645.24024 1081.2402 1429.2402 1522.7598 379.24023 1263.2402 1845.2402 2281.2403 2629.2403 322.75977 1579.2402 2463.2403 3045.2403 3481.2403 3829.2403 877.24024 2779.2403 3663.2403 4245.24 4681.24 5029.24) (list 13488.92 11586.92 10702.92 10120.92 9684.92 9336.92 12288.92 10386.92 9502.92 8920.92 8484.92 8136.92 11088.92 9186.92 8302.92 7720.92 7284.92 6936.92 9888.92 7986.92 7102.92 6520.92 6084.92 5736.92 8688.92 6786.92 5902.92 5320.92 4884.92 4536.92 7488.92 5586.92 4702.92 4120.92 3684.92 3336.92 6288.92 4386.92 3502.92 2920.92 2484.92 2136.92 5088.92 3186.92 2302.92 1720.9199 1284.9199 936.9199 3888.92 1986.9199 1102.9199 520.9199 84.91992 263.08008 2688.92 786.9199 97.08008 679.0801 1115.0801 1463.0801 1488.9199 413.08008 1297.0801 1879.0801 2315.08 2663.08 288.91992 1613.0801 2497.08 3079.08 3515.08 3863.08 911.0801 2813.08 3697.08 4279.08 4715.08 5063.08) (list 13379.88 11477.88 10593.88 10011.88 9575.88 9227.88 12179.88 10277.88 9393.88 8811.88 8375.88 8027.88 10979.88 9077.88 8193.88 7611.88 7175.88 6827.88 9779.88 7877.88 6993.88 6411.88 5975.88 5627.88 8579.88 6677.88 5793.88 5211.88 4775.88 4427.88 7379.88 5477.88 4593.88 4011.88 3575.88 3227.88 6179.88 4277.88 3393.88 2811.88 2375.88 2027.8799 4979.88 3077.88 2193.88 1611.8799 1175.8799 827.8799 3779.88 1877.8799 993.8799 411.87988 24.120118 372.12012 2579.88 677.8799 206.12012 788.1201 1224.1201 1572.1201 1379.8799 522.1201 1406.1201 1988.1201 2424.12 2772.12 179.87989 1722.1201 2606.12 3188.12 3624.12 3972.12 1020.1201 2922.12 3806.12 4388.12 4824.12 5172.12) (list 13361.08 11459.08 10575.08 9993.08 9557.08 9209.08 12161.08 10259.08 9375.08 8793.08 8357.08 8009.08 10961.08 9059.08 8175.08 7593.08 7157.08 6809.08 9761.08 7859.08 6975.08 6393.08 5957.08 5609.08 8561.08 6659.08 5775.08 5193.08 4757.08 4409.08 7361.08 5459.08 4575.08 3993.08 3557.08 3209.08 6161.08 4259.08 3375.08 2793.08 2357.08 2009.0801 4961.08 3059.08 2175.08 1593.0801 1157.0801 809.0801 3761.08 1859.0801 975.0801 393.08008 42.91992 390.91992 2561.08 659.0801 224.91992 806.9199 1242.9199 1590.9199 1361.0801 540.9199 1424.9199 2006.9199 2442.92 2790.92 161.08008 1740.9199 2624.92 3206.92 3642.92 3990.92 1038.9199 2940.92 3824.92 4406.92 4842.92 5190.92) (list 13312.2 11410.2 10526.2 9944.2 9508.2 9160.2 12112.2 10210.2 9326.2 8744.2 8308.2 7960.2 10912.2 9010.2 8126.2 7544.2 7108.2 6760.2 9712.2 7810.2 6926.2 6344.2 5908.2 5560.2 8512.2 6610.2 5726.2 5144.2 4708.2 4360.2 7312.2 5410.2 4526.2 3944.2002 3508.2002 3160.2002 6112.2 4210.2 3326.2002 2744.2002 2308.2002 1960.2002 4912.2 3010.2002 2126.2002 1544.2002 1108.2002 760.2002 3712.2002 1810.2002 926.2002 344.2002 91.799805 439.7998 2512.2002 610.2002 273.7998 855.7998 1291.7998 1639.7998 1312.2002 589.7998 1473.7998 2055.7998 2491.7998 2839.7998 112.200196 1789.7998 2673.7998 3255.7998 3691.7998 4039.7998 1087.7998 2989.7998 3873.7998 4455.8 4891.8 5239.8) (list 13291.52 11389.52 10505.52 9923.52 9487.52 9139.52 12091.52 10189.52 9305.52 8723.52 8287.52 7939.5195 10891.52 8989.52 8105.5195 7523.5195 7087.5195 6739.5195 9691.52 7789.5195 6905.5195 6323.5195 5887.5195 5539.5195 8491.52 6589.5195 5705.5195 5123.5195 4687.5195 4339.5195 7291.5195 5389.5195 4505.5195 3923.5196 3487.5196 3139.5196 6091.5195 4189.5195 3305.5196 2723.5196 2287.5196 1939.5195 4891.5195 2989.5196 2105.5196 1523.5195 1087.5195 739.51954 3691.5196 1789.5195 905.51954 323.51953 112.48047 460.48047 2491.5196 589.51954 294.48047 876.48047 1312.4805 1660.4805 1291.5195 610.48047 1494.4805 2076.4805 2512.4805 2860.4805 91.51953 1810.4805 2694.4805 3276.4805 3712.4805 4060.4805 1108.4805 3010.4805 3894.4805 4476.4805 4912.4805 5260.4805) (list 13263.32 11361.32 10477.32 9895.32 9459.32 9111.32 12063.32 10161.32 9277.32 8695.32 8259.32 7911.3203 10863.32 8961.32 8077.3203 7495.3203 7059.3203 6711.3203 9663.32 7761.3203 6877.3203 6295.3203 5859.3203 5511.3203 8463.32 6561.3203 5677.3203 5095.3203 4659.3203 4311.3203 7263.3203 5361.3203 4477.3203 3895.3203 3459.3203 3111.3203 6063.3203 4161.3203 3277.3203 2695.3203 2259.3203 1911.3203 4863.3203 2961.3203 2077.3203 1495.3203 1059.3203 711.3203 3663.3203 1761.3203 877.3203 295.3203 140.67969 488.6797 2463.3203 561.3203 322.6797 904.6797 1340.6797 1688.6797 1263.3203 638.6797 1522.6797 2104.6797 2540.6797 2888.6797 63.320313 1838.6797 2722.6797 3304.6797 3740.6797 4088.6797 1136.6797 3038.6797 3922.6797 4504.6797 4940.6797 5288.6797) (list 13246.4 11344.4 10460.4 9878.4 9442.4 9094.4 12046.4 10144.4 9260.4 8678.4 8242.4 7894.4004 10846.4 8944.4 8060.4004 7478.4004 7042.4004 6694.4004 9646.4 7744.4004 6860.4004 6278.4004 5842.4004 5494.4004 8446.4 6544.4004 5660.4004 5078.4004 4642.4004 4294.4004 7246.4004 5344.4004 4460.4004 3878.4004 3442.4004 3094.4004 6046.4004 4144.4004 3260.4004 2678.4004 2242.4004 1894.4004 4846.4004 2944.4004 2060.4004 1478.4004 1042.4004 694.4004 3646.4004 1744.4004 860.4004 278.4004 157.59961 505.5996 2446.4004 544.4004 339.5996 921.5996 1357.5996 1705.5996 1246.4004 655.5996 1539.5996 2121.5996 2557.5996 2905.5996 46.40039 1855.5996 2739.5996 3321.5996 3757.5996 4105.5996 1153.5996 3055.5996 3939.5996 4521.5996 4957.5996 5305.5996) (list 13237.0 11335.0 10451.0 9869.0 9433.0 9085.0 12037.0 10135.0 9251.0 8669.0 8233.0 7885.0 10837.0 8935.0 8051.0 7469.0 7033.0 6685.0 9637.0 7735.0 6851.0 6269.0 5833.0 5485.0 8437.0 6535.0 5651.0 5069.0 4633.0 4285.0 7237.0 5335.0 4451.0 3869.0 3433.0 3085.0 6037.0 4135.0 3251.0 2669.0 2233.0 1885.0 4837.0 2935.0 2051.0 1469.0 1033.0 685.0 3637.0 1735.0 851.0 269.0 167.0 515.0 2437.0 535.0 349.0 931.0 1367.0 1715.0 1237.0 665.0 1549.0 2131.0 2567.0 2915.0 37.0 1865.0 2749.0 3331.0 3767.0 4115.0 1163.0 3065.0 3949.0 4531.0 4967.0 5315.0) (list 13146.76 11244.76 10360.76 9778.76 9342.76 8994.76 11946.76 10044.76 9160.76 8578.76 8142.76 7794.76 10746.76 8844.76 7960.76 7378.76 6942.76 6594.76 9546.76 7644.76 6760.76 6178.76 5742.76 5394.76 8346.76 6444.76 5560.76 4978.76 4542.76 4194.76 7146.76 5244.76 4360.76 3778.7598 3342.7598 2994.7598 5946.76 4044.7598 3160.7598 2578.7598 2142.7598 1794.7598 4746.76 2844.7598 1960.7598 1378.7598 942.75977 594.75977 3546.7598 1644.7598 760.75977 178.75977 257.24023 605.24024 2346.7598 444.75977 439.24023 1021.24024 1457.2402 1805.2402 1146.7598 755.24024 1639.2402 2221.2403 2657.2403 3005.2403 53.240235 1955.2402 2839.2403 3421.2403 3857.2403 4205.24 1253.2402 3155.2403 4039.2403 4621.24 5057.24 5405.24) (list 13129.84 11227.84 10343.84 9761.84 9325.84 8977.84 11929.84 10027.84 9143.84 8561.84 8125.84 7777.84 10729.84 8827.84 7943.84 7361.84 6925.84 6577.84 9529.84 7627.84 6743.84 6161.84 5725.84 5377.84 8329.84 6427.84 5543.84 4961.84 4525.84 4177.84 7129.84 5227.84 4343.84 3761.8399 3325.8399 2977.8399 5929.84 4027.8399 3143.8399 2561.8399 2125.8399 1777.8399 4729.84 2827.8399 1943.8399 1361.8399 925.83985 577.83985 3529.8399 1627.8399 743.83985 161.83985 274.16016 622.16016 2329.8399 427.83984 456.16016 1038.1602 1474.1602 1822.1602 1129.8399 772.16016 1656.1602 2238.1602 2674.1602 3022.1602 70.16016 1972.1602 2856.1602 3438.1602 3874.1602 4222.16 1270.1602 3172.1602 4056.1602 4638.16 5074.16 5422.16) (list 13105.4 11203.4 10319.4 9737.4 9301.4 8953.4 11905.4 10003.4 9119.4 8537.4 8101.4004 7753.4004 10705.4 8803.4 7919.4004 7337.4004 6901.4004 6553.4004 9505.4 7603.4004 6719.4004 6137.4004 5701.4004 5353.4004 8305.4 6403.4004 5519.4004 4937.4004 4501.4004 4153.4004 7105.4004 5203.4004 4319.4004 3737.4004 3301.4004 2953.4004 5905.4004 4003.4004 3119.4004 2537.4004 2101.4004 1753.4004 4705.4004 2803.4004 1919.4004 1337.4004 901.4004 553.4004 3505.4004 1603.4004 719.4004 137.40039 298.5996 646.5996 2305.4004 403.4004 480.5996 1062.5996 1498.5996 1846.5996 1105.4004 796.5996 1680.5996 2262.5996 2698.5996 3046.5996 94.59961 1996.5996 2880.5996 3462.5996 3898.5996 4246.5996 1294.5996 3196.5996 4080.5996 4662.5996 5098.5996 5446.5996) (list 12941.84 11039.84 10155.84 9573.84 9137.84 8789.84 11741.84 9839.84 8955.84 8373.84 7937.84 7589.84 10541.84 8639.84 7755.84 7173.84 6737.84 6389.84 9341.84 7439.84 6555.84 5973.84 5537.84 5189.84 8141.84 6239.84 5355.84 4773.84 4337.84 3989.8399 6941.84 5039.84 4155.84 3573.8399 3137.8399 2789.8399 5741.84 3839.8399 2955.8399 2373.8399 1937.8399 1589.8399 4541.84 2639.8399 1755.8399 1173.8399 737.83985 389.83984 3341.8399 1439.8399 555.83985 26.160157 462.16016 810.16016 2141.8399 239.83985 644.16016 1226.1602 1662.1602 2010.1602 941.83985 960.16016 1844.1602 2426.1602 2862.1602 3210.1602 258.16016 2160.1602 3044.1602 3626.1602 4062.1602 4410.16 1458.1602 3360.1602 4244.16 4826.16 5262.16 5610.16) (list 12911.76 11009.76 10125.76 9543.76 9107.76 8759.76 11711.76 9809.76 8925.76 8343.76 7907.76 7559.76 10511.76 8609.76 7725.76 7143.76 6707.76 6359.76 9311.76 7409.76 6525.76 5943.76 5507.76 5159.76 8111.76 6209.76 5325.76 4743.76 4307.76 3959.7598 6911.76 5009.76 4125.76 3543.7598 3107.7598 2759.7598 5711.76 3809.7598 2925.7598 2343.7598 1907.7598 1559.7598 4511.76 2609.7598 1725.7598 1143.7598 707.75977 359.75977 3311.7598 1409.7598 525.75977 56.240235 492.24023 840.24024 2111.7598 209.75977 674.24024 1256.2402 1692.2402 2040.2402 911.75977 990.24024 1874.2402 2456.2403 2892.2403 3240.2403 288.24023 2190.2403 3074.2403 3656.2403 4092.2403 4440.24 1488.2402 3390.2403 4274.24 4856.24 5292.24 5640.24) (list 12691.8 10789.8 9905.8 9323.8 8887.8 8539.8 11491.8 9589.8 8705.8 8123.8 7687.8 7339.8 10291.8 8389.8 7505.8 6923.8 6487.8 6139.8 9091.8 7189.8 6305.8 5723.8 5287.8 4939.8 7891.8 5989.8 5105.8 4523.8 4087.7998 3739.7998 6691.8 4789.8 3905.7998 3323.7998 2887.7998 2539.7998 5491.8 3589.7998 2705.7998 2123.7998 1687.7998 1339.7998 4291.8 2389.7998 1505.7998 923.7998 487.7998 139.7998 3091.7998 1189.7998 305.7998 276.2002 712.2002 1060.2002 1891.7998 10.200195 894.2002 1476.2002 1912.2002 2260.2002 691.7998 1210.2002 2094.2002 2676.2002 3112.2002 3460.2002 508.2002 2410.2002 3294.2002 3876.2002 4312.2 4660.2 1708.2002 3610.2002 4494.2 5076.2 5512.2 5860.2) (list 12661.721 10759.721 9875.721 9293.721 8857.721 8509.721 11461.721 9559.721 8675.721 8093.7207 7657.7207 7309.7207 10261.721 8359.721 7475.7207 6893.7207 6457.7207 6109.7207 9061.721 7159.7207 6275.7207 5693.7207 5257.7207 4909.7207 7861.7207 5959.7207 5075.7207 4493.7207 4057.7207 3709.7207 6661.7207 4759.7207 3875.7207 3293.7207 2857.7207 2509.7207 5461.7207 3559.7207 2675.7207 2093.7207 1657.7207 1309.7207 4261.7207 2359.7207 1475.7207 893.7207 457.7207 109.7207 3061.7207 1159.7207 275.7207 306.2793 742.2793 1090.2793 1861.7207 40.279297 924.2793 1506.2793 1942.2793 2290.2793 661.7207 1240.2793 2124.2793 2706.2793 3142.2793 3490.2793 538.2793 2440.2793 3324.2793 3906.2793 4342.2793 4690.2793 1738.2793 3640.2793 4524.2793 5106.2793 5542.2793 5890.2793) (list 12539.5205 10637.5205 9753.5205 9171.5205 8735.5205 8387.5205 11339.5205 9437.5205 8553.5205 7971.5205 7535.5205 7187.5205 10139.5205 8237.5205 7353.5205 6771.5205 6335.5205 5987.5205 8939.5205 7037.5205 6153.5205 5571.5205 5135.5205 4787.5205 7739.5205 5837.5205 4953.5205 4371.5205 3935.5205 3587.5205 6539.5205 4637.5205 3753.5205 3171.5205 2735.5205 2387.5205 5339.5205 3437.5205 2553.5205 1971.5205 1535.5205 1187.5205 4139.5205 2237.5205 1353.5205 771.5205 335.5205 12.479492 2939.5205 1037.5205 153.52051 428.4795 864.4795 1212.4795 1739.5205 162.47949 1046.4795 1628.4795 2064.4795 2412.4795 539.5205 1362.4795 2246.4795 2828.4795 3264.4795 3612.4795 660.4795 2562.4795 3446.4795 4028.4795 4464.4795 4812.4795 1860.4795 3762.4795 4646.4795 5228.4795 5664.4795 6012.4795) (list 12520.721 10618.721 9734.721 9152.721 8716.721 8368.721 11320.721 9418.721 8534.721 7952.7207 7516.7207 7168.7207 10120.721 8218.721 7334.7207 6752.7207 6316.7207 5968.7207 8920.721 7018.7207 6134.7207 5552.7207 5116.7207 4768.7207 7720.7207 5818.7207 4934.7207 4352.7207 3916.7207 3568.7207 6520.7207 4618.7207 3734.7207 3152.7207 2716.7207 2368.7207 5320.7207 3418.7207 2534.7207 1952.7207 1516.7207 1168.7207 4120.7207 2218.7207 1334.7207 752.7207 316.7207 31.279297 2920.7207 1018.7207 134.7207 447.2793 883.2793 1231.2793 1720.7207 181.2793 1065.2793 1647.2793 2083.2793 2431.2793 520.7207 1381.2793 2265.2793 2847.2793 3283.2793 3631.2793 679.2793 2581.2793 3465.2793 4047.2793 4483.2793 4831.2793 1879.2793 3781.2793 4665.2793 5247.2793 5683.2793 6031.2793) (list 12327.08 10425.08 9541.08 8959.08 8523.08 8175.08 11127.08 9225.08 8341.08 7759.08 7323.08 6975.08 9927.08 8025.08 7141.08 6559.08 6123.08 5775.08 8727.08 6825.08 5941.08 5359.08 4923.08 4575.08 7527.08 5625.08 4741.08 4159.08 3723.08 3375.08 6327.08 4425.08 3541.08 2959.08 2523.08 2175.08 5127.08 3225.08 2341.08 1759.0801 1323.0801 975.0801 3927.08 2025.0801 1141.0801 559.0801 123.08008 224.91992 2727.08 825.0801 58.91992 640.9199 1076.9199 1424.9199 1527.0801 374.91992 1258.9199 1840.9199 2276.92 2624.92 327.08008 1574.9199 2458.92 3040.92 3476.92 3824.92 872.9199 2774.92 3658.92 4240.92 4676.92 5024.92 2072.92 3974.92 4858.92 5440.92 5876.92 6224.92) (list 12105.24 10203.24 9319.24 8737.24 8301.24 7953.24 10905.24 9003.24 8119.24 7537.24 7101.24 6753.24 9705.24 7803.24 6919.24 6337.24 5901.24 5553.24 8505.24 6603.24 5719.24 5137.24 4701.24 4353.24 7305.24 5403.24 4519.24 3937.2403 3501.2403 3153.2403 6105.24 4203.24 3319.2403 2737.2403 2301.2403 1953.2402 4905.24 3003.2403 2119.2403 1537.2402 1101.2402 753.24024 3705.2403 1803.2402 919.24024 337.24023 98.759766 446.75977 2505.2403 603.24024 280.75977 862.75977 1298.7598 1646.7598 1305.2402 596.75977 1480.7598 2062.7598 2498.7598 2846.7598 105.240235 1796.7598 2680.7598 3262.7598 3698.7598 4046.7598 1094.7598 2996.7598 3880.7598 4462.76 4898.76 5246.76 2294.7598 4196.76 5080.76 5662.76 6098.76 6446.76) (list 11847.68 9945.68 9061.68 8479.68 8043.6797 7695.6797 10647.68 8745.68 7861.6797 7279.6797 6843.6797 6495.6797 9447.68 7545.6797 6661.6797 6079.6797 5643.6797 5295.6797 8247.68 6345.6797 5461.6797 4879.6797 4443.6797 4095.6797 7047.6797 5145.6797 4261.6797 3679.6797 3243.6797 2895.6797 5847.6797 3945.6797 3061.6797 2479.6797 2043.6797 1695.6797 4647.6797 2745.6797 1861.6797 1279.6797 843.6797 495.6797 3447.6797 1545.6797 661.6797 79.67969 356.3203 704.3203 2247.6797 345.6797 538.3203 1120.3203 1556.3203 1904.3203 1047.6797 854.3203 1738.3203 2320.3203 2756.3203 3104.3203 152.32032 2054.3203 2938.3203 3520.3203 3956.3203 4304.3203 1352.3203 3254.3203 4138.3203 4720.3203 5156.3203 5504.3203 2552.3203 4454.3203 5338.3203 5920.3203 6356.3203 6704.3203) (list 11785.641 9883.641 8999.641 8417.641 7981.6406 7633.6406 10585.641 8683.641 7799.6406 7217.6406 6781.6406 6433.6406 9385.641 7483.6406 6599.6406 6017.6406 5581.6406 5233.6406 8185.6406 6283.6406 5399.6406 4817.6406 4381.6406 4033.6407 6985.6406 5083.6406 4199.6406 3617.6407 3181.6407 2833.6407 5785.6406 3883.6407 2999.6407 2417.6407 1981.6406 1633.6406 4585.6406 2683.6407 1799.6406 1217.6406 781.6406 433.64063 3385.6407 1483.6406 599.6406 17.640625 418.35938 766.3594 2185.6407 283.64063 600.3594 1182.3594 1618.3594 1966.3594 985.6406 916.3594 1800.3594 2382.3594 2818.3594 3166.3594 214.35938 2116.3594 3000.3594 3582.3594 4018.3594 4366.3594 1414.3594 3316.3594 4200.3594 4782.3594 5218.3594 5566.3594 2614.3594 4516.3594 5400.3594 5982.3594 6418.3594 6766.3594) (list 11552.52 9650.52 8766.52 8184.5195 7748.5195 7400.5195 10352.52 8450.52 7566.5195 6984.5195 6548.5195 6200.5195 9152.52 7250.5195 6366.5195 5784.5195 5348.5195 5000.5195 7952.5195 6050.5195 5166.5195 4584.5195 4148.5195 3800.5196 6752.5195 4850.5195 3966.5196 3384.5196 2948.5196 2600.5196 5552.5195 3650.5196 2766.5196 2184.5196 1748.5195 1400.5195 4352.5195 2450.5196 1566.5195 984.51954 548.51954 200.51953 3152.5196 1250.5195 366.51953 215.48047 651.48047 999.48047 1952.5195 50.51953 833.48047 1415.4805 1851.4805 2199.4805 752.51954 1149.4805 2033.4805 2615.4805 3051.4805 3399.4805 447.48047 2349.4805 3233.4805 3815.4805 4251.4805 4599.4805 1647.4805 3549.4805 4433.4805 5015.4805 5451.4805 5799.4805 2847.4805 4749.4805 5633.4805 6215.4805 6651.4805 6999.4805) (list 11435.96 9533.96 8649.96 8067.96 7631.96 7283.96 10235.96 8333.96 7449.96 6867.96 6431.96 6083.96 9035.96 7133.96 6249.96 5667.96 5231.96 4883.96 7835.96 5933.96 5049.96 4467.96 4031.96 3683.96 6635.96 4733.96 3849.96 3267.96 2831.96 2483.96 5435.96 3533.96 2649.96 2067.96 1631.96 1283.96 4235.96 2333.96 1449.96 867.95997 431.95996 83.95996 3035.96 1133.96 249.95996 332.04004 768.04004 1116.04 1835.96 66.04004 950.04004 1532.04 1968.04 2316.04 635.95997 1266.04 2150.04 2732.04 3168.04 3516.04 564.04004 2466.04 3350.04 3932.04 4368.04 4716.04 1764.04 3666.04 4550.04 5132.04 5568.04 5916.04 2964.04 4866.04 5750.04 6332.04 6768.04 7116.04) (list 11187.8 9285.8 8401.8 7819.8 7383.8 7035.8 9987.8 8085.8 7201.8 6619.8 6183.8 5835.8 8787.8 6885.8 6001.8 5419.8 4983.8 4635.8 7587.8 5685.8 4801.8 4219.8 3783.7998 3435.7998 6387.8 4485.8 3601.7998 3019.7998 2583.7998 2235.7998 5187.8 3285.7998 2401.7998 1819.7998 1383.7998 1035.7998 3987.7998 2085.7998 1201.7998 619.7998 183.7998 164.2002 2787.7998 885.7998 1.7998047 580.2002 1016.2002 1364.2002 1587.7998 314.2002 1198.2002 1780.2002 2216.2002 2564.2002 387.7998 1514.2002 2398.2002 2980.2002 3416.2002 3764.2002 812.2002 2714.2002 3598.2002 4180.2 4616.2 4964.2 2012.2002 3914.2002 4798.2 5380.2 5816.2 6164.2 3212.2002 5114.2 5998.2 6580.2 7016.2 7364.2) (list 11110.72 9208.72 8324.72 7742.7197 7306.7197 6958.7197 9910.72 8008.7197 7124.7197 6542.7197 6106.7197 5758.7197 8710.72 6808.7197 5924.7197 5342.7197 4906.7197 4558.7197 7510.7197 5608.7197 4724.7197 4142.7197 3706.7198 3358.7198 6310.7197 4408.7197 3524.7198 2942.7198 2506.7198 2158.7198 5110.7197 3208.7198 2324.7198 1742.7197 1306.7197 958.7197 3910.7198 2008.7197 1124.7197 542.7197 106.71973 241.28028 2710.7198 808.7197 75.28027 657.2803 1093.2803 1441.2803 1510.7197 391.28027 1275.2803 1857.2803 2293.2803 2641.2803 310.71973 1591.2803 2475.2803 3057.2803 3493.2803 3841.2803 889.2803 2791.2803 3675.2803 4257.2803 4693.2803 5041.2803 2089.2803 3991.2803 4875.2803 5457.2803 5893.2803 6241.2803 3289.2803 5191.2803 6075.2803 6657.2803 7093.2803 7441.2803) (list 10855.04 8953.04 8069.04 7487.04 7051.04 6703.04 9655.04 7753.04 6869.04 6287.04 5851.04 5503.04 8455.04 6553.04 5669.04 5087.04 4651.04 4303.04 7255.04 5353.04 4469.04 3887.04 3451.04 3103.04 6055.04 4153.04 3269.04 2687.04 2251.04 1903.04 4855.04 2953.04 2069.04 1487.04 1051.04 703.04004 3655.04 1753.04 869.04004 287.04004 148.95996 496.95996 2455.04 553.04004 330.95996 912.95997 1348.96 1696.96 1255.04 646.95997 1530.96 2112.96 2548.96 2896.96 55.04004 1846.96 2730.96 3312.96 3748.96 4096.96 1144.96 3046.96 3930.96 4512.96 4948.96 5296.96 2344.96 4246.96 5130.96 5712.96 6148.96 6496.96 3544.96 5446.96 6330.96 6912.96 7348.96 7696.96) (list 10714.04 8812.04 7928.04 7346.04 6910.04 6562.04 9514.04 7612.04 6728.04 6146.04 5710.04 5362.04 8314.04 6412.04 5528.04 4946.04 4510.04 4162.04 7114.04 5212.04 4328.04 3746.04 3310.04 2962.04 5914.04 4012.04 3128.04 2546.04 2110.04 1762.04 4714.04 2812.04 1928.04 1346.04 910.04004 562.04004 3514.04 1612.04 728.04004 146.04004 289.95996 637.95997 2314.04 412.04004 471.95996 1053.96 1489.96 1837.96 1114.04 787.95997 1671.96 2253.96 2689.96 3037.96 85.95996 1987.96 2871.96 3453.96 3889.96 4237.96 1285.96 3187.96 4071.96 4653.96 5089.96 5437.96 2485.96 4387.96 5271.96 5853.96 6289.96 6637.96 3685.96 5587.96 6471.96 7053.96 7489.96 7837.96) (list 10542.96 8640.96 7756.96 7174.96 6738.96 6390.96 9342.96 7440.96 6556.96 5974.96 5538.96 5190.96 8142.96 6240.96 5356.96 4774.96 4338.96 3990.96 6942.96 5040.96 4156.96 3574.96 3138.96 2790.96 5742.96 3840.96 2956.96 2374.96 1938.96 1590.96 4542.96 2640.96 1756.96 1174.96 738.95997 390.95996 3342.96 1440.96 556.95997 25.04004 461.04004 809.04004 2142.96 240.95996 643.04004 1225.04 1661.04 2009.04 942.95997 959.04004 1843.04 2425.04 2861.04 3209.04 257.04004 2159.04 3043.04 3625.04 4061.04 4409.04 1457.04 3359.04 4243.04 4825.04 5261.04 5609.04 2657.04 4559.04 5443.04 6025.04 6461.04 6809.04 3857.04 5759.04 6643.04 7225.04 7661.04 8009.04) (list 10334.28 8432.28 7548.2803 6966.2803 6530.2803 6182.2803 9134.28 7232.2803 6348.2803 5766.2803 5330.2803 4982.2803 7934.2803 6032.2803 5148.2803 4566.2803 4130.2803 3782.2803 6734.2803 4832.2803 3948.2803 3366.2803 2930.2803 2582.2803 5534.2803 3632.2803 2748.2803 2166.2803 1730.2803 1382.2803 4334.2803 2432.2803 1548.2803 966.2803 530.2803 182.28028 3134.2803 1232.2803 348.28027 233.71973 669.7197 1017.7197 1934.2803 32.280274 851.7197 1433.7197 1869.7197 2217.7198 734.2803 1167.7197 2051.7198 2633.7198 3069.7198 3417.7198 465.71973 2367.7198 3251.7198 3833.7198 4269.7197 4617.7197 1665.7197 3567.7198 4451.7197 5033.7197 5469.7197 5817.7197 2865.7198 4767.7197 5651.7197 6233.7197 6669.7197 7017.7197 4065.7198 5967.7197 6851.7197 7433.7197 7869.7197 8217.72) (list 10069.2 8167.2 7283.2 6701.2 6265.2 5917.2 8869.2 6967.2 6083.2 5501.2 5065.2 4717.2 7669.2 5767.2 4883.2 4301.2 3865.2002 3517.2002 6469.2 4567.2 3683.2002 3101.2002 2665.2002 2317.2002 5269.2 3367.2002 2483.2002 1901.2002 1465.2002 1117.2002 4069.2002 2167.2002 1283.2002 701.2002 265.2002 82.799805 2869.2002 967.2002 83.200196 498.7998 934.7998 1282.7998 1669.2002 232.7998 1116.7998 1698.7998 2134.7998 2482.7998 469.2002 1432.7998 2316.7998 2898.7998 3334.7998 3682.7998 730.7998 2632.7998 3516.7998 4098.8 4534.8 4882.8 1930.7998 3832.7998 4716.8 5298.8 5734.8 6082.8 3130.7998 5032.8 5916.8 6498.8 6934.8 7282.8 4330.8 6232.8 7116.8 7698.8 8134.8 8482.8) (list 9166.8 7264.8 6380.8 5798.8 5362.8 5014.8 7966.8 6064.8 5180.8 4598.8 4162.8 3814.7998 6766.8 4864.8 3980.7998 3398.7998 2962.7998 2614.7998 5566.8 3664.7998 2780.7998 2198.7998 1762.7998 1414.7998 4366.8 2464.7998 1580.7998 998.7998 562.7998 214.7998 3166.7998 1264.7998 380.7998 201.2002 637.2002 985.2002 1966.7998 64.799805 819.2002 1401.2002 1837.2002 2185.2002 766.7998 1135.2002 2019.2002 2601.2002 3037.2002 3385.2002 433.2002 2335.2002 3219.2002 3801.2002 4237.2 4585.2 1633.2002 3535.2002 4419.2 5001.2 5437.2 5785.2 2833.2002 4735.2 5619.2 6201.2 6637.2 6985.2 4033.2002 5935.2 6819.2 7401.2 7837.2 8185.2 5233.2 7135.2 8019.2 8601.2 9037.2 9385.2) (list 8905.48 7003.48 6119.48 5537.48 5101.48 4753.48 7705.48 5803.48 4919.48 4337.48 3901.48 3553.48 6505.48 4603.48 3719.48 3137.48 2701.48 2353.48 5305.48 3403.48 2519.48 1937.48 1501.48 1153.48 4105.48 2203.48 1319.48 737.48 301.47998 46.52002 2905.48 1003.48 119.47998 462.52002 898.52 1246.52 1705.48 196.52002 1080.52 1662.52 2098.52 2446.52 505.47998 1396.52 2280.52 2862.52 3298.52 3646.52 694.52 2596.52 3480.52 4062.52 4498.52 4846.52 1894.52 3796.52 4680.52 5262.52 5698.52 6046.52 3094.52 4996.52 5880.52 6462.52 6898.52 7246.52 4294.52 6196.52 7080.52 7662.52 8098.52 8446.52 5494.52 7396.52 8280.52 8862.52 9298.52 9646.52) (list 8117.76 6215.76 5331.76 4749.76 4313.76 3965.7598 6917.76 5015.76 4131.76 3549.7598 3113.7598 2765.7598 5717.76 3815.7598 2931.7598 2349.7598 1913.7598 1565.7598 4517.76 2615.7598 1731.7598 1149.7598 713.75977 365.75977 3317.7598 1415.7598 531.75977 50.240235 486.24023 834.24024 2117.7598 215.75977 668.24024 1250.2402 1686.2402 2034.2402 917.75977 984.24024 1868.2402 2450.2403 2886.2403 3234.2403 282.24023 2184.2403 3068.2403 3650.2403 4086.2403 4434.24 1482.2402 3384.2403 4268.24 4850.24 5286.24 5634.24 2682.2403 4584.24 5468.24 6050.24 6486.24 6834.24 3882.2403 5784.24 6668.24 7250.24 7686.24 8034.24 5082.24 6984.24 7868.24 8450.24 8886.24 9234.24 6282.24 8184.24 9068.24 9650.24 10086.24 10434.24) (list 7397.7197 5495.7197 4611.7197 4029.7198 3593.7198 3245.7198 6197.7197 4295.7197 3411.7198 2829.7198 2393.7198 2045.7197 4997.7197 3095.7198 2211.7198 1629.7197 1193.7197 845.7197 3797.7198 1895.7197 1011.7197 429.71973 6.2802734 354.28027 2597.7198 695.7197 188.28028 770.2803 1206.2803 1554.2803 1397.7197 504.28027 1388.2803 1970.2803 2406.2803 2754.2803 197.71973 1704.2803 2588.2803 3170.2803 3606.2803 3954.2803 1002.2803 2904.2803 3788.2803 4370.2803 4806.2803 5154.2803 2202.2803 4104.2803 4988.2803 5570.2803 6006.2803 6354.2803 3402.2803 5304.2803 6188.2803 6770.2803 7206.2803 7554.2803 4602.2803 6504.2803 7388.2803 7970.2803 8406.28 8754.28 5802.2803 7704.2803 8588.28 9170.28 9606.28 9954.28 7002.2803 8904.28 9788.28 10370.28 10806.28 11154.28) (list 6698.36 4796.36 3912.3599 3330.3599 2894.3599 2546.3599 5498.36 3596.3599 2712.3599 2130.3599 1694.3599 1346.3599 4298.36 2396.3599 1512.3599 930.35987 494.35986 146.35987 3098.3599 1196.3599 312.35986 269.64014 705.64014 1053.6401 1898.3599 3.6401367 887.64014 1469.6401 1905.6401 2253.6402 698.35987 1203.6401 2087.6402 2669.6402 3105.6402 3453.6402 501.64014 2403.6402 3287.6402 3869.6402 4305.64 4653.64 1701.6401 3603.6402 4487.64 5069.64 5505.64 5853.64 2901.6402 4803.64 5687.64 6269.64 6705.64 7053.64 4101.64 6003.64 6887.64 7469.64 7905.64 8253.641 5301.64 7203.64 8087.64 8669.641 9105.641 9453.641 6501.64 8403.641 9287.641 9869.641 10305.641 10653.641 7701.64 9603.641 10487.641 11069.641 11505.641 11853.641) (list 9320.96 7418.96 6534.96 5952.96 5516.96 5168.96 8120.96 6218.96 5334.96 4752.96 4316.96 3968.96 6920.96 5018.96 4134.96 3552.96 3116.96 2768.96 5720.96 3818.96 2934.96 2352.96 1916.96 1568.96 4520.96 2618.96 1734.96 1152.96 716.95997 368.95996 3320.96 1418.96 534.95997 47.04004 483.04004 831.04004 2120.96 218.95996 665.04004 1247.04 1683.04 2031.04 920.95997 981.04004 1865.04 2447.04 2883.04 3231.04 279.04004 2181.04 3065.04 3647.04 4083.04 4431.04 1479.04 3381.04 4265.04 4847.04 5283.04 5631.04 2679.04 4581.04 5465.04 6047.04 6483.04 6831.04 3879.04 5781.04 6665.04 7247.04 7683.04 8031.04 5079.04 6981.04 7865.04 8447.04 8883.04 9231.04) (list 8550.16 6648.16 5764.16 5182.16 4746.16 4398.16 7350.16 5448.16 4564.16 3982.1602 3546.1602 3198.1602 6150.16 4248.16 3364.1602 2782.1602 2346.1602 1998.1602 4950.16 3048.1602 2164.1602 1582.1602 1146.1602 798.16016 3750.1602 1848.1602 964.16016 382.16016 53.839844 401.83984 2550.1602 648.16016 235.83985 817.83985 1253.8399 1601.8399 1350.1602 551.83985 1435.8399 2017.8399 2453.8399 2801.8399 150.16016 1751.8399 2635.8399 3217.8399 3653.8399 4001.8399 1049.8399 2951.8399 3835.8399 4417.84 4853.84 5201.84 2249.8399 4151.84 5035.84 5617.84 6053.84 6401.84 3449.8399 5351.84 6235.84 6817.84 7253.84 7601.84 4649.84 6551.84 7435.84 8017.84 8453.84 8801.84 5849.84 7751.84 8635.84 9217.84 9653.84 10001.84) (list 7813.2 5911.2 5027.2 4445.2 4009.2002 3661.2002 6613.2 4711.2 3827.2002 3245.2002 2809.2002 2461.2002 5413.2 3511.2002 2627.2002 2045.2002 1609.2002 1261.2002 4213.2 2311.2002 1427.2002 845.2002 409.2002 61.200196 3013.2002 1111.2002 227.2002 354.7998 790.7998 1138.7998 1813.2002 88.799805 972.7998 1554.7998 1990.7998 2338.7998 613.2002 1288.7998 2172.7998 2754.7998 3190.7998 3538.7998 586.7998 2488.7998 3372.7998 3954.7998 4390.8 4738.8 1786.7998 3688.7998 4572.8 5154.8 5590.8 5938.8 2986.7998 4888.8 5772.8 6354.8 6790.8 7138.8 4186.8 6088.8 6972.8 7554.8 7990.8 8338.8 5386.8 7288.8 8172.8 8754.8 9190.8 9538.8 6586.8 8488.8 9372.8 9954.8 10390.8 10738.8) (list 11246.08 9344.08 8460.08 7878.08 7442.08 7094.08 10046.08 8144.08 7260.08 6678.08 6242.08 5894.08 8846.08 6944.08 6060.08 5478.08 5042.08 4694.08 7646.08 5744.08 4860.08 4278.08 3842.08 3494.08 6446.08 4544.08 3660.08 3078.08 2642.08 2294.08 5246.08 3344.08 2460.08 1878.0801 1442.0801 1094.0801 4046.08 2144.08 1260.0801 678.0801 242.08008 105.91992 2846.08 944.0801 60.08008 521.9199 957.9199 1305.9199 1646.0801 255.91992 1139.9199 1721.9199 2157.92 2505.92 446.08008 1455.9199 2339.92 2921.92 3357.92 3705.92 753.9199 2655.92 3539.92 4121.92 4557.92 4905.92 1953.9199 3855.92 4739.92 5321.92 5757.92 6105.92 3153.92 5055.92 5939.92 6521.92 6957.92 7305.92) (list 10131.24 8229.24 7345.24 6763.24 6327.24 5979.24 8931.24 7029.24 6145.24 5563.24 5127.24 4779.24 7731.24 5829.24 4945.24 4363.24 3927.2403 3579.2403 6531.24 4629.24 3745.2403 3163.2403 2727.2403 2379.2403 5331.24 3429.2403 2545.2403 1963.2402 1527.2402 1179.2402 4131.24 2229.2403 1345.2402 763.24024 327.24023 20.759766 2931.2403 1029.2402 145.24024 436.75977 872.75977 1220.7598 1731.2402 170.75977 1054.7598 1636.7598 2072.7598 2420.7598 531.24024 1370.7598 2254.7598 2836.7598 3272.7598 3620.7598 668.75977 2570.7598 3454.7598 4036.7598 4472.76 4820.76 1868.7598 3770.7598 4654.76 5236.76 5672.76 6020.76 3068.7598 4970.76 5854.76 6436.76 6872.76 7220.76 4268.76 6170.76 7054.76 7636.76 8072.76 8420.76) (list 8202.36 6300.3604 5416.3604 4834.3604 4398.3604 4050.3604 7002.3604 5100.3604 4216.3604 3634.3604 3198.3604 2850.3604 5802.3604 3900.3604 3016.3604 2434.3604 1998.3604 1650.3604 4602.3604 2700.3604 1816.3604 1234.3604 798.36036 450.36035 3402.3604 1500.3604 616.36036 34.36035 401.63965 749.63965 2202.3604 300.36035 583.63965 1165.6397 1601.6397 1949.6397 1002.36036 899.63965 1783.6397 2365.6397 2801.6397 3149.6397 197.63965 2099.6397 2983.6397 3565.6397 4001.6397 4349.6397 1397.6397 3299.6397 4183.6397 4765.6397 5201.6397 5549.6397 2597.6397 4499.6397 5383.6397 5965.6397 6401.6397 6749.6397 3797.6397 5699.6397 6583.6397 7165.6397 7601.6397 7949.6397 4997.6397 6899.6397 7783.6397 8365.64 8801.64 9149.64 6197.6397 8099.6397 8983.64 9565.64 10001.64 10349.64) (list 8694.92 6792.9204 5908.9204 5326.9204 4890.9204 4542.9204 7494.9204 5592.9204 4708.9204 4126.9204 3690.9204 3342.9204 6294.9204 4392.9204 3508.9204 2926.9204 2490.9204 2142.9204 5094.9204 3192.9204 2308.9204 1726.9204 1290.9204 942.9204 3894.9204 1992.9204 1108.9204 526.9204 90.92041 257.0796 2694.9204 792.9204 91.07959 673.0796 1109.0796 1457.0796 1494.9204 407.0796 1291.0796 1873.0796 2309.0796 2657.0796 294.9204 1607.0796 2491.0796 3073.0796 3509.0796 3857.0796 905.0796 2807.0796 3691.0796 4273.0796 4709.0796 5057.0796 2105.0796 4007.0796 4891.0796 5473.0796 5909.0796 6257.0796 3305.0796 5207.0796 6091.0796 6673.0796 7109.0796 7457.0796 4505.0796 6407.0796 7291.0796 7873.0796 8309.08 8657.08 5705.0796 7607.0796 8491.08 9073.08 9509.08 9857.08) (list 5579.7607 3677.7608 2793.7608 2211.7608 1775.7608 1427.7608 4379.7607 2477.7608 1593.7608 1011.76075 575.76075 227.76074 3179.7608 1277.7608 393.76074 188.23926 624.23926 972.23926 1979.7608 77.76074 806.23926 1388.2393 1824.2393 2172.2393 779.76075 1122.2393 2006.2393 2588.2393 3024.2393 3372.2393 420.23926 2322.2393 3206.2393 3788.2393 4224.2393 4572.2393 1620.2393 3522.2393 4406.2393 4988.2393 5424.2393 5772.2393 2820.2393 4722.2393 5606.2393 6188.2393 6624.2393 6972.2393 4020.2393 5922.2393 6806.2393 7388.2393 7824.2393 8172.2393 5220.2393 7122.2393 8006.2393 8588.239 9024.239 9372.239 6420.2393 8322.239 9206.239 9788.239 10224.239 10572.239 7620.2393 9522.239 10406.239 10988.239 11424.239 11772.239 8820.239 10722.239 11606.239 12188.239 12624.239 12972.239) (list 5666.241 3764.2412 2880.2412 2298.2412 1862.2412 1514.2412 4466.241 2564.2412 1680.2412 1098.2412 662.2412 314.2412 3266.2412 1364.2412 480.2412 101.75879 537.7588 885.7588 2066.2412 164.24121 719.7588 1301.7588 1737.7588 2085.7588 866.2412 1035.7588 1919.7588 2501.7588 2937.7588 3285.7588 333.7588 2235.7588 3119.7588 3701.7588 4137.759 4485.759 1533.7588 3435.7588 4319.759 4901.759 5337.759 5685.759 2733.7588 4635.759 5519.759 6101.759 6537.759 6885.759 3933.7588 5835.759 6719.759 7301.759 7737.759 8085.759 5133.759 7035.759 7919.759 8501.759 8937.759 9285.759 6333.759 8235.759 9119.759 9701.759 10137.759 10485.759 7533.759 9435.759 10319.759 10901.759 11337.759 11685.759 8733.759 10635.759 11519.759 12101.759 12537.759 12885.759) (list 6322.3613 4420.3613 3536.3614 2954.3614 2518.3614 2170.3614 5122.3613 3220.3614 2336.3614 1754.3613 1318.3613 970.3613 3922.3614 2020.3613 1136.3613 554.3613 118.36133 229.63867 2722.3614 820.3613 63.63867 645.6387 1081.6387 1429.6387 1522.3613 379.63867 1263.6387 1845.6387 2281.6387 2629.6387 322.36133 1579.6387 2463.6387 3045.6387 3481.6387 3829.6387 877.6387 2779.6387 3663.6387 4245.6387 4681.6387 5029.6387 2077.6387 3979.6387 4863.6387 5445.6387 5881.6387 6229.6387 3277.6387 5179.6387 6063.6387 6645.6387 7081.6387 7429.6387 4477.6387 6379.6387 7263.6387 7845.6387 8281.639 8629.639 5677.6387 7579.6387 8463.639 9045.639 9481.639 9829.639 6877.6387 8779.639 9663.639 10245.639 10681.639 11029.639 8077.6387 9979.639 10863.639 11445.639 11881.639 12229.639) (list 6275.3613 4373.3613 3489.3614 2907.3614 2471.3614 2123.3614 5075.3613 3173.3614 2289.3614 1707.3613 1271.3613 923.3613 3875.3614 1973.3613 1089.3613 507.36133 71.36133 276.63867 2675.3614 773.3613 110.63867 692.6387 1128.6387 1476.6387 1475.3613 426.63867 1310.6387 1892.6387 2328.6387 2676.6387 275.36133 1626.6387 2510.6387 3092.6387 3528.6387 3876.6387 924.6387 2826.6387 3710.6387 4292.6387 4728.6387 5076.6387 2124.6387 4026.6387 4910.6387 5492.6387 5928.6387 6276.6387 3324.6387 5226.6387 6110.6387 6692.6387 7128.6387 7476.6387 4524.6387 6426.6387 7310.6387 7892.6387 8328.639 8676.639 5724.6387 7626.6387 8510.639 9092.639 9528.639 9876.639 6924.6387 8826.639 9710.639 10292.639 10728.639 11076.639 8124.6387 10026.639 10910.639 11492.639 11928.639 12276.639) (list 5688.802 3786.8018 2902.8018 2320.8018 1884.8018 1536.8018 4488.802 2586.8018 1702.8018 1120.8018 684.80176 336.80176 3288.8018 1386.8018 502.80176 79.19824 515.19825 863.19825 2088.8018 186.80176 697.19825 1279.1983 1715.1983 2063.1983 888.80176 1013.19825 1897.1983 2479.1983 2915.1983 3263.1983 311.19824 2213.1983 3097.1983 3679.1983 4115.198 4463.198 1511.1983 3413.1983 4297.198 4879.198 5315.198 5663.198 2711.1983 4613.198 5497.198 6079.198 6515.198 6863.198 3911.1983 5813.198 6697.198 7279.198 7715.198 8063.198 5111.198 7013.198 7897.198 8479.198 8915.198 9263.198 6311.198 8213.198 9097.198 9679.198 10115.198 10463.198 7511.198 9413.198 10297.198 10879.198 11315.198 11663.198 8711.198 10613.198 11497.198 12079.198 12515.198 12863.198) (list 5690.6816 3788.6817 2904.6817 2322.6817 1886.6817 1538.6817 4490.6816 2588.6817 1704.6817 1122.6817 686.68165 338.68164 3290.6817 1388.6817 504.68164 77.31836 513.31836 861.31836 2090.6817 188.68164 695.31836 1277.3184 1713.3184 2061.3184 890.68165 1011.31836 1895.3184 2477.3184 2913.3184 3261.3184 309.31836 2211.3184 3095.3184 3677.3184 4113.3184 4461.3184 1509.3184 3411.3184 4295.3184 4877.3184 5313.3184 5661.3184 2709.3184 4611.3184 5495.3184 6077.3184 6513.3184 6861.3184 3909.3184 5811.3184 6695.3184 7277.3184 7713.3184 8061.3184 5109.3184 7011.3184 7895.3184 8477.318 8913.318 9261.318 6309.3184 8211.318 9095.318 9677.318 10113.318 10461.318 7509.3184 9411.318 10295.318 10877.318 11313.318 11661.318 8709.318 10611.318 11495.318 12077.318 12513.318 12861.318) (list 5972.6816 4070.6817 3186.6817 2604.6817 2168.6817 1820.6817 4772.6816 2870.6817 1986.6817 1404.6817 968.68165 620.68165 3572.6817 1670.6817 786.68165 204.68164 231.31836 579.31836 2372.6817 470.68164 413.31836 995.31836 1431.3184 1779.3184 1172.6817 729.31836 1613.3184 2195.3184 2631.3184 2979.3184 27.31836 1929.3184 2813.3184 3395.3184 3831.3184 4179.3184 1227.3184 3129.3184 4013.3184 4595.3184 5031.3184 5379.3184 2427.3184 4329.3184 5213.3184 5795.3184 6231.3184 6579.3184 3627.3184 5529.3184 6413.3184 6995.3184 7431.3184 7779.3184 4827.3184 6729.3184 7613.3184 8195.318 8631.318 8979.318 6027.3184 7929.3184 8813.318 9395.318 9831.318 10179.318 7227.3184 9129.318 10013.318 10595.318 11031.318 11379.318 8427.318 10329.318 11213.318 11795.318 12231.318 12579.318) (list 5673.7617 3771.7617 2887.7617 2305.7617 1869.7617 1521.7617 4473.7617 2571.7617 1687.7617 1105.7617 669.7617 321.76172 3273.7617 1371.7617 487.76172 94.23828 530.2383 878.2383 2073.7617 171.76172 712.2383 1294.2383 1730.2383 2078.2383 873.7617 1028.2383 1912.2383 2494.2383 2930.2383 3278.2383 326.23828 2228.2383 3112.2383 3694.2383 4130.2383 4478.2383 1526.2383 3428.2383 4312.2383 4894.2383 5330.2383 5678.2383 2726.2383 4628.2383 5512.2383 6094.2383 6530.2383 6878.2383 3926.2383 5828.2383 6712.2383 7294.2383 7730.2383 8078.2383 5126.2383 7028.2383 7912.2383 8494.238 8930.238 9278.238 6326.2383 8228.238 9112.238 9694.238 10130.238 10478.238 7526.2383 9428.238 10312.238 10894.238 11330.238 11678.238 8726.238 10628.238 11512.238 12094.238 12530.238 12878.238) (list 5592.922 3690.9219 2806.9219 2224.9219 1788.9219 1440.9219 4392.922 2490.9219 1606.9219 1024.9219 588.9219 240.92188 3192.9219 1290.9219 406.92188 175.07813 611.0781 959.0781 1992.9219 90.921875 793.0781 1375.0781 1811.0781 2159.0782 792.9219 1109.0781 1993.0781 2575.0782 3011.0782 3359.0782 407.07813 2309.0782 3193.0782 3775.0782 4211.078 4559.078 1607.0781 3509.0782 4393.078 4975.078 5411.078 5759.078 2807.0782 4709.078 5593.078 6175.078 6611.078 6959.078 4007.0782 5909.078 6793.078 7375.078 7811.078 8159.078 5207.078 7109.078 7993.078 8575.078 9011.078 9359.078 6407.078 8309.078 9193.078 9775.078 10211.078 10559.078 7607.078 9509.078 10393.078 10975.078 11411.078 11759.078 8807.078 10709.078 11593.078 12175.078 12611.078 12959.078) (list 6173.842 4271.842 3387.8418 2805.8418 2369.8418 2021.8418 4973.842 3071.8418 2187.8418 1605.8418 1169.8418 821.8418 3773.8418 1871.8418 987.8418 405.8418 30.158204 378.1582 2573.8418 671.8418 212.1582 794.1582 1230.1582 1578.1582 1373.8418 528.1582 1412.1582 1994.1582 2430.1582 2778.1582 173.8418 1728.1582 2612.1582 3194.1582 3630.1582 3978.1582 1026.1582 2928.1582 3812.1582 4394.158 4830.158 5178.158 2226.1582 4128.158 5012.158 5594.158 6030.158 6378.158 3426.1582 5328.158 6212.158 6794.158 7230.158 7578.158 4626.158 6528.158 7412.158 7994.158 8430.158 8778.158 5826.158 7728.158 8612.158 9194.158 9630.158 9978.158 7026.158 8928.158 9812.158 10394.158 10830.158 11178.158 8226.158 10128.158 11012.158 11594.158 12030.158 12378.158) (list 6267.842 4365.842 3481.8418 2899.8418 2463.8418 2115.8418 5067.842 3165.8418 2281.8418 1699.8418 1263.8418 915.8418 3867.8418 1965.8418 1081.8418 499.8418 63.841797 284.1582 2667.8418 765.8418 118.1582 700.1582 1136.1582 1484.1582 1467.8418 434.1582 1318.1582 1900.1582 2336.1582 2684.1582 267.8418 1634.1582 2518.1582 3100.1582 3536.1582 3884.1582 932.1582 2834.1582 3718.1582 4300.158 4736.158 5084.158 2132.1582 4034.1582 4918.158 5500.158 5936.158 6284.158 3332.1582 5234.158 6118.158 6700.158 7136.158 7484.158 4532.158 6434.158 7318.158 7900.158 8336.158 8684.158 5732.158 7634.158 8518.158 9100.158 9536.158 9884.158 6932.158 8834.158 9718.158 10300.158 10736.158 11084.158 8132.158 10034.158 10918.158 11500.158 11936.158 12284.158) (list 6273.482 4371.482 3487.482 2905.482 2469.482 2121.482 5073.482 3171.482 2287.482 1705.4819 1269.4819 921.48194 3873.482 1971.4819 1087.4819 505.48193 69.48193 278.51807 2673.482 771.48194 112.51807 694.51807 1130.5181 1478.5181 1473.4819 428.51807 1312.5181 1894.5181 2330.518 2678.518 273.48193 1628.5181 2512.518 3094.518 3530.518 3878.518 926.51807 2828.518 3712.518 4294.518 4730.518 5078.518 2126.518 4028.518 4912.518 5494.518 5930.518 6278.518 3326.518 5228.518 6112.518 6694.518 7130.518 7478.518 4526.518 6428.518 7312.518 7894.518 8330.518 8678.518 5726.518 7628.518 8512.518 9094.518 9530.518 9878.518 6926.518 8828.518 9712.518 10294.518 10730.518 11078.518 8126.518 10028.518 10912.518 11494.518 11930.518 12278.518) (list 5519.6016 3617.6016 2733.6016 2151.6016 1715.6016 1367.6016 4319.6016 2417.6016 1533.6016 951.60157 515.60157 167.60157 3119.6016 1217.6016 333.60156 248.39844 684.39844 1032.3984 1919.6016 17.601563 866.39844 1448.3984 1884.3984 2232.3985 719.60157 1182.3984 2066.3985 2648.3985 3084.3985 3432.3985 480.39844 2382.3985 3266.3985 3848.3985 4284.3984 4632.3984 1680.3984 3582.3985 4466.3984 5048.3984 5484.3984 5832.3984 2880.3985 4782.3984 5666.3984 6248.3984 6684.3984 7032.3984 4080.3985 5982.3984 6866.3984 7448.3984 7884.3984 8232.398 5280.3984 7182.3984 8066.3984 8648.398 9084.398 9432.398 6480.3984 8382.398 9266.398 9848.398 10284.398 10632.398 7680.3984 9582.398 10466.398 11048.398 11484.398 11832.398 8880.398 10782.398 11666.398 12248.398 12684.398 13032.398) (list 6301.6816 4399.6816 3515.6817 2933.6817 2497.6817 2149.6817 5101.6816 3199.6817 2315.6817 1733.6817 1297.6817 949.68165 3901.6817 1999.6817 1115.6817 533.68165 97.68164 250.31836 2701.6817 799.68165 84.31836 666.31836 1102.3184 1450.3184 1501.6817 400.31836 1284.3184 1866.3184 2302.3184 2650.3184 301.68164 1600.3184 2484.3184 3066.3184 3502.3184 3850.3184 898.31836 2800.3184 3684.3184 4266.3184 4702.3184 5050.3184 2098.3184 4000.3184 4884.3184 5466.3184 5902.3184 6250.3184 3298.3184 5200.3184 6084.3184 6666.3184 7102.3184 7450.3184 4498.3184 6400.3184 7284.3184 7866.3184 8302.318 8650.318 5698.3184 7600.3184 8484.318 9066.318 9502.318 9850.318 6898.3184 8800.318 9684.318 10266.318 10702.318 11050.318 8098.3184 10000.318 10884.318 11466.318 11902.318 12250.318) (list 6260.322 4358.322 3474.3218 2892.3218 2456.3218 2108.3218 5060.322 3158.3218 2274.3218 1692.3218 1256.3218 908.3218 3860.3218 1958.3218 1074.3218 492.32178 56.321778 291.67822 2660.3218 758.3218 125.67822 707.6782 1143.6782 1491.6782 1460.3218 441.67822 1325.6782 1907.6782 2343.6783 2691.6783 260.32178 1641.6782 2525.6783 3107.6783 3543.6783 3891.6783 939.6782 2841.6783 3725.6783 4307.678 4743.678 5091.678 2139.6783 4041.6783 4925.678 5507.678 5943.678 6291.678 3339.6783 5241.678 6125.678 6707.678 7143.678 7491.678 4539.678 6441.678 7325.678 7907.678 8343.678 8691.678 5739.678 7641.678 8525.678 9107.678 9543.678 9891.678 6939.678 8841.678 9725.678 10307.678 10743.678 11091.678 8139.678 10041.678 10925.678 11507.678 11943.678 12291.678) (list 8918.642 7016.6416 6132.6416 5550.6416 5114.6416 4766.6416 7718.6416 5816.6416 4932.6416 4350.6416 3914.6416 3566.6416 6518.6416 4616.6416 3732.6416 3150.6416 2714.6416 2366.6416 5318.6416 3416.6416 2532.6416 1950.6416 1514.6416 1166.6416 4118.6416 2216.6416 1332.6416 750.6416 314.6416 33.3584 2918.6416 1016.6416 132.6416 449.3584 885.3584 1233.3584 1718.6416 183.3584 1067.3584 1649.3584 2085.3584 2433.3584 518.6416 1383.3584 2267.3584 2849.3584 3285.3584 3633.3584 681.3584 2583.3584 3467.3584 4049.3584 4485.3584 4833.3584 1881.3584 3783.3584 4667.3584 5249.3584 5685.3584 6033.3584 3081.3584 4983.3584 5867.3584 6449.3584 6885.3584 7233.3584 4281.3584 6183.3584 7067.3584 7649.3584 8085.3584 8433.358 5481.3584 7383.3584 8267.358 8849.358 9285.358 9633.358) (list 5557.201 3655.2012 2771.2012 2189.2012 1753.2012 1405.2012 4357.201 2455.2012 1571.2012 989.2012 553.2012 205.20117 3157.2012 1255.2012 371.20117 210.79883 646.7988 994.7988 1957.2012 55.20117 828.7988 1410.7988 1846.7988 2194.7989 757.2012 1144.7988 2028.7988 2610.7989 3046.7989 3394.7989 442.79883 2344.7989 3228.7989 3810.7989 4246.799 4594.799 1642.7988 3544.7989 4428.799 5010.799 5446.799 5794.799 2842.7989 4744.799 5628.799 6210.799 6646.799 6994.799 4042.7989 5944.799 6828.799 7410.799 7846.799 8194.799 5242.799 7144.799 8028.799 8610.799 9046.799 9394.799 6442.799 8344.799 9228.799 9810.799 10246.799 10594.799 7642.799 9544.799 10428.799 11010.799 11446.799 11794.799 8842.799 10744.799 11628.799 12210.799 12646.799 12994.799) (list 8924.281 7022.2813 6138.2813 5556.2813 5120.2813 4772.2813 7724.2813 5822.2813 4938.2813 4356.2813 3920.2813 3572.2813 6524.2813 4622.2813 3738.2813 3156.2813 2720.2813 2372.2813 5324.2813 3422.2813 2538.2813 1956.2813 1520.2813 1172.2813 4124.2813 2222.2813 1338.2813 756.28125 320.28125 27.71875 2924.2813 1022.28125 138.28125 443.71875 879.71875 1227.7188 1724.2813 177.71875 1061.7188 1643.7188 2079.7188 2427.7188 524.28125 1377.7188 2261.7188 2843.7188 3279.7188 3627.7188 675.71875 2577.7188 3461.7188 4043.7188 4479.7188 4827.7188 1875.7188 3777.7188 4661.7188 5243.7188 5679.7188 6027.7188 3075.7188 4977.7188 5861.7188 6443.7188 6879.7188 7227.7188 4275.7188 6177.7188 7061.7188 7643.7188 8079.7188 8427.719 5475.7188 7377.7188 8261.719 8843.719 9279.719 9627.719) (list 6382.5215 4480.5215 3596.5215 3014.5215 2578.5215 2230.5215 5182.5215 3280.5215 2396.5215 1814.5215 1378.5215 1030.5215 3982.5215 2080.5215 1196.5215 614.5215 178.52149 169.47852 2782.5215 880.5215 3.4785157 585.4785 1021.4785 1369.4785 1582.5215 319.47852 1203.4785 1785.4785 2221.4785 2569.4785 382.52148 1519.4785 2403.4785 2985.4785 3421.4785 3769.4785 817.4785 2719.4785 3603.4785 4185.4785 4621.4785 4969.4785 2017.4785 3919.4785 4803.4785 5385.4785 5821.4785 6169.4785 3217.4785 5119.4785 6003.4785 6585.4785 7021.4785 7369.4785 4417.4785 6319.4785 7203.4785 7785.4785 8221.479 8569.479 5617.4785 7519.4785 8403.479 8985.479 9421.479 9769.479 6817.4785 8719.479 9603.479 10185.479 10621.479 10969.479 8017.4785 9919.479 10803.479 11385.479 11821.479 12169.479) (list 8916.762 7014.7617 6130.7617 5548.7617 5112.7617 4764.7617 7716.7617 5814.7617 4930.7617 4348.7617 3912.7617 3564.7617 6516.7617 4614.7617 3730.7617 3148.7617 2712.7617 2364.7617 5316.7617 3414.7617 2530.7617 1948.7617 1512.7617 1164.7617 4116.7617 2214.7617 1330.7617 748.7617 312.76172 35.23828 2916.7617 1014.7617 130.76172 451.23828 887.2383 1235.2383 1716.7617 185.23828 1069.2383 1651.2383 2087.2383 2435.2383 516.7617 1385.2383 2269.2383 2851.2383 3287.2383 3635.2383 683.2383 2585.2383 3469.2383 4051.2383 4487.2383 4835.2383 1883.2383 3785.2383 4669.2383 5251.2383 5687.2383 6035.2383 3083.2383 4985.2383 5869.2383 6451.2383 6887.2383 7235.2383 4283.2383 6185.2383 7069.2383 7651.2383 8087.2383 8435.238 5483.2383 7385.2383 8269.238 8851.238 9287.238 9635.238) (list 5602.3223 3700.3223 2816.3223 2234.3223 1798.3223 1450.3223 4402.3223 2500.3223 1616.3223 1034.3223 598.32227 250.32227 3202.3223 1300.3223 416.32227 165.67774 601.67774 949.67774 2002.3223 100.322266 783.67774 1365.6777 1801.6777 2149.6778 802.32227 1099.6777 1983.6777 2565.6778 3001.6778 3349.6778 397.67773 2299.6778 3183.6778 3765.6778 4201.6777 4549.6777 1597.6777 3499.6778 4383.6777 4965.6777 5401.6777 5749.6777 2797.6778 4699.6777 5583.6777 6165.6777 6601.6777 6949.6777 3997.6778 5899.6777 6783.6777 7365.6777 7801.6777 8149.6777 5197.6777 7099.6777 7983.6777 8565.678 9001.678 9349.678 6397.6777 8299.678 9183.678 9765.678 10201.678 10549.678 7597.6777 9499.678 10383.678 10965.678 11401.678 11749.678 8797.678 10699.678 11583.678 12165.678 12601.678 12949.678) (list 8922.402 7020.4023 6136.4023 5554.4023 5118.4023 4770.4023 7722.4023 5820.4023 4936.4023 4354.4023 3918.4024 3570.4024 6522.4023 4620.4023 3736.4024 3154.4024 2718.4024 2370.4024 5322.4023 3420.4024 2536.4024 1954.4024 1518.4024 1170.4024 4122.4023 2220.4024 1336.4024 754.40235 318.40234 29.597657 2922.4024 1020.40235 136.40235 445.59766 881.59766 1229.5977 1722.4024 179.59766 1063.5977 1645.5977 2081.5977 2429.5977 522.40235 1379.5977 2263.5977 2845.5977 3281.5977 3629.5977 677.59766 2579.5977 3463.5977 4045.5977 4481.5977 4829.5977 1877.5977 3779.5977 4663.5977 5245.5977 5681.5977 6029.5977 3077.5977 4979.5977 5863.5977 6445.5977 6881.5977 7229.5977 4277.5977 6179.5977 7063.5977 7645.5977 8081.5977 8429.598 5477.5977 7379.5977 8263.598 8845.598 9281.598 9629.598) (list 5574.122 3672.122 2788.122 2206.122 1770.1221 1422.1221 4374.122 2472.122 1588.1221 1006.1221 570.1221 222.12207 3174.122 1272.1221 388.12207 193.87793 629.8779 977.8779 1974.1221 72.12207 811.8779 1393.8779 1829.8779 2177.878 774.1221 1127.8779 2011.8779 2593.878 3029.878 3377.878 425.87793 2327.878 3211.878 3793.878 4229.878 4577.878 1625.8779 3527.878 4411.878 4993.878 5429.878 5777.878 2825.878 4727.878 5611.878 6193.878 6629.878 6977.878 4025.878 5927.878 6811.878 7393.878 7829.878 8177.878 5225.878 7127.878 8011.878 8593.878 9029.878 9377.878 6425.878 8327.878 9211.878 9793.878 10229.878 10577.878 7625.878 9527.878 10411.878 10993.878 11429.878 11777.878 8825.878 10727.878 11611.878 12193.878 12629.878 12977.878) (list 8926.162 7024.162 6140.162 5558.162 5122.162 4774.162 7726.162 5824.162 4940.162 4358.162 3922.162 3574.162 6526.162 4624.162 3740.162 3158.162 2722.162 2374.162 5326.162 3424.162 2540.162 1958.1621 1522.1621 1174.1621 4126.162 2224.162 1340.1621 758.1621 322.1621 25.83789 2926.162 1024.1621 140.16211 441.8379 877.8379 1225.8379 1726.1621 175.83789 1059.8379 1641.8379 2077.838 2425.838 526.1621 1375.8379 2259.838 2841.838 3277.838 3625.838 673.8379 2575.838 3459.838 4041.838 4477.838 4825.838 1873.8379 3775.838 4659.838 5241.838 5677.838 6025.838 3073.838 4975.838 5859.838 6441.838 6877.838 7225.838 4273.838 6175.838 7059.838 7641.838 8077.838 8425.838 5473.838 7375.838 8259.838 8841.838 9277.838 9625.838))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 208 346) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 109 196) (om-make-point 101 58) nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 194 309) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 142 235) (om-make-point 61 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 32 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 281 58) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 29 59) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 256 464) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 128 460) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (0 1 5 0 nil 0) (0 0 6 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 297 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 299 81) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 77 85) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 310 449) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 173 442) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((1 1 0 0 nil 0) (2 0 1 0 nil 0) (5 0 2 0 nil 0) (3 0 2 1 nil 0) (4 0 3 0 nil 0) (0 0 6 0 nil 0) (1 0 7 0 nil 0))) 1 "nota-mais-próxima" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Vc+SP-nonvib-D4-mf-1c.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 311 11) (om-make-point 190 71) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host "C" :name "Vc+SP-nonvib-D4-mf-1c" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "SDIF - Catanzaro" (om-load-patch-abs1 "SDIF - Catanzaro" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 82 341) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 176 343) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 92 12) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 40 214) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 77 213) (om-make-point 36 28) 0.9 "0.9" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "amplitude for max" (om-load-patch-abs1 "amplitude for max" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 402 230) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 368 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 36 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 57 289) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 104 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 172 89) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 127 92) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0))) (om-make-point 155 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "ordem 3" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 86) (om-make-point 40 58) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 220 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 202 390) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 121 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 273 518) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 173 518) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0) (3 0 2 0 nil 0) (1 1 4 0 nil 0) (1 0 5 0 nil 0))) 1 "ordem" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (0 0 1 1 nil 0) (8 0 2 1 nil 0) (1 0 3 0 nil 0) (2 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (4 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 59 507/2) nil (list (list 8.489089333098996D-5 0.0018505805224961994D0 2.728292526229336D-5 1.107630195168245D-4 1.0605644615181893D-4 1.4808993000777396D-4 3.1887965713124346D-4 0.0013547886511736244D0 1.9788329950113778D-4 2.280209762278661D-4 1.5471393771152266D-5 6.381587179114184D-5 2.570427707366172D-5 3.8869844065296746D-5 1.0801723911746581D-4 2.420642242801435D-4 2.4022008628787398D-4 1.760226043218521D-4 1.1553521329913894D-4 4.5866135929364417D-4 0.0015351854339985837D0 3.6728480052487106D-4 1.3943416289971772D-4 4.1675308404522934D-4 0.8999999761581421D0 7.254536133155258D-4 2.875719836838399D-4 1.745752687800653D-4 0.0016408064746382782D0 0.0D0 2.1795283815349088D-4 4.016271150656284D-5 6.236416368263747D-5 0.0015773676170394813D0 4.663452516364944D-5 0.004793911188163224D0 1.1182422869255944D-4 4.575817661877682D-5 1.4978603906255393D-4 4.69963582511825D-4 0.029273699784885223D0 4.78747015801416D-4 1.9957532323810863D-4 0.0019905170837368016D0 0.012488143087389778D0 0.0010268087411650388D0 0.0021363271829912736D0 4.1119042914166975D-5 7.873763711755069D-4 0.0013075226731178315D0 0.001739621120475629D0)) nil "amplitude for max"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "freq" (om-load-patch-abs1 "freq" (quote ((let ((box (om-load-boxin "input 2" 1 (om-make-point 70 24) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 253 203) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 0 (om-make-point 190 446) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 227 367) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 208 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 114 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "F->MC 2" (quote f->mc) (quote ((om-load-inputfun (quote input-funbox) "frequency (Hz)" "FREQ" 440))) (om-make-point 49 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 243 291) (om-make-point 35 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "ordem" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 67 964/9) (om-make-point 40 58) nil nil (list (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 291 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 90 227) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 222 174) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 71 154) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 293 404) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 179 419) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 1 0 1 nil 0) (3 0 1 0 nil 0) (1 0 2 0 nil 0) (4 0 3 0 nil 0) (0 0 5 0 nil 0) (2 0 6 0 nil 0))) 1 "ordem" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 2 0 nil 0) (5 0 3 0 nil 0) (7 0 3 1 nil 0) (6 0 4 0 nil 0) (6 0 5 0 nil 0) (8 0 6 0 nil 0) (4 0 7 0 nil 0) (1 0 7 1 nil 0) (0 0 8 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 1492/9 1645/9) (om-make-point 64 66) (list (list 12844 12700 12676 12592 12582 12552 12486 12470 11962 11930 11640 11126 11114 10682 10618 10480 10098 9828 9754 9636 9530 9474 9262 9180 9100 8906 8780 8420 8302 8138 7244 12720 12258 12202 11902 11888 11692 11022 10560 10362 10300 10256 9246 9060 11002 13402 11500 13542 13086 13252 12904)) nil "freq"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CATANZARO" (om-load-patch-abs1 "CATANZARO" (quote ((let ((box (om-load-boxwithed1 (quote box-with-win) "NEIMOG" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "PROCESSAMENTO" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 263/9 293) (om-make-point 158 58) nil "&" (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 271 257) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 182 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "frame" nil))) (om-make-point 20 287) (om-make-point 308 58) nil nil (list (let ((box (om-load-boxin "frame" 4 (om-make-point 272 175) "" "frame" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 134 278) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 53 291) (om-make-point 41 28) "de" "\"de\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND 2" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 27 343) (om-make-point 89 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 342 501) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 283 435) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP 4" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 546 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 405 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 348 187) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 385 258) (om-make-point 89 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 457 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 413 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 314 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 309 48) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 209 261) (om-make-point 62 56) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 165 359) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 120 44) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 190 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 37 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 432 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 38 510) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((17 0 3 0 nil 0) (2 0 3 1 nil 0) (1 0 3 2 nil 0) (5 0 4 0 nil 0) (0 0 5 0 nil 0) (15 1 5 1 nil 0) (10 0 6 0 nil 0) (11 0 7 0 nil 0) (12 0 8 0 nil 0) (8 0 9 0 nil 0) (7 0 9 1 nil 0) (6 0 9 2 nil 0) (13 0 10 0 nil 0) (13 0 11 0 nil 0) (13 0 12 0 nil 0) (18 0 14 0 nil 0) (9 0 14 1 nil 0) (0 0 14 2 nil 0) (14 0 15 0 nil 0) (19 0 16 0 nil 0) (16 0 18 0 nil 0) (17 0 18 1 nil 0) (4 0 20 0 nil 0) (15 0 21 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 152 351) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 92 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "no documentation" "END" (quote t)) (om-load-inputfun (quote input-funbox) "no documentation" "STEP" 1))) (om-make-point 86 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 158 185) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 248 47) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "PROCESSAMENTO" 0 (om-make-point 6 205) "" "PROCESSAMENTO" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 221 503) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 122 512) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((3 1 1 1 nil 0) (8 0 2 0 nil 0) (4 0 2 1 nil 0) (6 0 2 2 nil 0) (7 0 2 3 nil 0) (0 0 2 4 nil 0) (2 0 3 0 nil 0) (5 0 4 0 nil 0) (7 0 5 1 nil 0) (1 0 9 0 nil 0) (3 0 10 0 nil 0))) 1 "neimog" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mat-trans" (om-load-patch-abs1 "mat-trans" (quote ((let ((box (om-load-boxout "output 3" 2 (om-make-point 903/4 3772/9) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 619/4 3763/9) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 339/4 3835/9) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 1901/12 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "test" (om-load-patch-abs1 "test" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 129 422) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 193 262) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 82 41) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 91 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REMOVE-DUP 2" (quote remove-dup) (quote ((om-load-inputfun (quote input-funbox) "list" "LIST" (list 1 2 3 4)) (om-load-inputfun (quote input-funbox) "equality test (function or function name)" "TEST" (quote eq)) (om-load-inputfun (quote input-funbox) "an integer" "DEPTH" 1))) (om-make-point 84 282) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 77 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 92 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0) (2 0 6 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 128 5663/18) nil (list (append (listlist 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7) (listlistnil "test"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 811/4 1180/9) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 555/4 1513/9) (om-make-point 103 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 643/4 2062/9) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 0 0 nil 0) (4 1 1 0 nil 0) (4 0 2 0 nil 0) (7 0 4 0 nil 0) (3 0 6 0 nil 0) (5 0 6 1 nil 0) (6 0 7 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 5117/144 1503/8) (om-make-point 154 66) nil "&" "mat-trans"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 86 3589/9) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 1019/9 5) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "CATANZARO - Extraindo Parciais de SDIF" (om-load-patch-abs1 "CATANZARO - Extraindo Parciais de SDIF" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 97 542) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "omloop" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 193 470) nil nil "&" (list (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 874 379) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 767 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 3" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 153.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/08/24 20:22:01" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 850 52) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 970 94) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT 2" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 875 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 542 211) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 494 377) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 444 96) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 169 275) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 2" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 45.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/08/24 20:22:01" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 108 257) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil))) (om-make-point 158 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 164 404) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 264 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 348 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 21 462) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 0.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275)))) (setf (create-info copy) (quote ("2020/08/24 20:22:01" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 8 160) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 198) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 19 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 393 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 293 604) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 7) (5 1 0 1 nil 6) (19 0 1 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 4 2 nil 0) (7 1 5 0 nil 0) (5 0 6 0 nil 4) (7 2 6 1 nil 3) (7 0 6 2 nil 2) (4 0 6 3 nil 5) (19 0 7 0 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (13 0 11 1 nil 0) (11 0 12 0 nil 0) (7 0 12 1 nil 1) (6 0 12 2 nil 0) (19 0 13 0 nil 0) (17 0 14 0 nil 0) (15 0 17 0 nil 0) (16 0 17 1 nil 0) (18 0 17 2 nil 0) (20 0 18 0 nil 0) (20 0 19 0 nil 0) (0 1 21 0 nil 8) (12 0 22 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "elegante map car" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 189 301) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 352 443) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 340 473) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 312 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 222 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 355 218) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 250 402) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 292 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 454 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 203 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 1 nil 0) (8 0 5 0 nil 0) (3 0 6 0 nil 0) (1 0 9 0 nil 0) (6 0 10 0 nil 0))) 1 "elegante map car" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 248 404) (om-make-point 106 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 292 362) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 372 372) (om-make-point 40 28) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 58 238) (om-make-point 346 54) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 124 204) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 204) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 222 150) (om-make-point 55 28) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (7 0 3 0 nil 0) (7 1 3 1 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (1 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 7 2 nil 0) (9 0 7 3 nil 0) (10 0 7 4 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 8 962/9) nil nil "&" "CATANZARO - Extraindo Parciais de SDIF"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (1 1 0 1 nil 0) (1 2 0 2 nil 0) (4 0 1 0 nil 0) (0 0 2 0 nil 0) (3 0 4 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 6767/144 17047/216) nil nil "&" "CATANZARO"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 1519/9 1114/9) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (6 0 1 0 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (7 0 5 2 nil 11) (8 0 6 0 nil 0) (7 0 6 1 nil 1) (2 0 7 0 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2249921/7680 3107297/34560) (om-make-point 227 66) (list (list 11772 11284 11042 10872 10744 10692 9986 9926 9270 8614 12222 11890 11822 11760 11722 11096 11032 10992 9732 12218 12140 11736 11486 11410 11376 11336 11260 10922 10678 10146 9764 9648 9498 12296 12274 12194 12160 11968 11814 11696 11516 11508 10892 10796 10620 10444 10424 10342 10266 10218 10200 10118 9572 12312 11932 11782 11626 11460 11330 11188 11086 10964 10710 10590 10580 10500 10378 10034 9982 9892 12258 12232 12114 12032 11918 11568 11478 11220 12262 11788 11554 11452 10008 11490 11054 10858 10708 10694 11730 11442 10638 10598 9888 9844 9212 8262 7900 11740 11708 11666 11066 10440 9814 8480 12308 11640 11352 10938 10396 9750 9722 9122 8538 8448 11044 10812 10720 10376 10354 10082 9872 10156 9602 9706 10194 10722 11522 11554 11564 11608 11644 11852 11860 11958 12022 12168 12218 9420 10942 11062 11192 11548 11598 12038 12246 12300 9386 9478 9844 10064 10128 10354 10342 10382 10566 10664 10780 11440 11576 11684 11792 11814 11904 12006 12176 12186 12208 12260 9340 9654 10288 10414 10880 11056 11238 11276 11706 11736 11870 12060 12086 12132 12136 12226 9586 9630 10264 10978 11146 11210 11264 11322 11416 11758 11762 12034 12092 12268 12286 9180 9506 9778 10212 10858 11082 11312 11362 11466 11536 11674 11876 11882 12030 12044 12076 12110 12288 9724 10140 10284 10458 10506 10634 10960 11516 11890 11948 12158 12192 12280 9014 10550 11492 11652 11696 12058 11896 12016 8860 11176 11336 11374 12182 12330 8384 11810 11974 11052 11404 11558 12254 12232 12308 11778 12314 11296 10366 11020 11482 11728 11930 11132 10734 11802 10844 10606 11604 11712 12012 9966 10164 10708 12124 10914 11576 10792 11216 8904 11620 10016 10648 11940 11988 9306 11588 9108 10316 11824 8788 10892 10106 11178 11226 12104 8714 9682 9904 10476 11342 11504 11840 11720 12252 9134 9448 12240 11162 11918 9864 12082 11200 10592 12000 12202 11662 12148 11750 12026 11432 10998 9564 10832 11628 12066 10818 11446 11862 11968 12260 10044 10430 10676 10754 10928 11248 11544 11786 11828 12232 12300 8224 8530 8664 9800 10248 10334 10522 11030 11116 11348 11386) (list 0.098974 0.019184 0.07881 0.100557 0.014349 0.007364 0.052448 0.216667 0.005111 0.022307 0.002506 0.005911 0.007529 0.099705 0.020094 0.071162 0.025293 0.049859 0.008078 0.002174 0.001024 0.023038 0.044281 0.006114 0.009934 0.020152 0.006844 0.054949 0.036942 0.021715 0.008345 0.005955 0.003391 0.005594 0.018711 0.001003 0.0 0.002808 0.016532 0.018854 0.010733 0.01207 0.018059 0.006193 0.019297 0.017035 0.01662 0.029603 0.012998 0.009116 0.010397 0.005306 0.005019 0.001857 0.002742 0.036706 2.59E-4 0.035122 0.006474 0.0034 0.021768 0.020608 0.03445 0.015085 0.086685 0.056288 0.00487 0.003114 0.002518 0.010001 0.009845 0.021808 0.001143 0.002572 0.003164 0.007696 0.006641 0.001422 0.003918 0.015019 0.005552 0.016033 0.003076 0.00761 0.039441 0.052364 0.06921 0.059347 0.031783 0.00901 0.025369 0.03995 0.015984 0.007899 0.004002 0.004634 0.004749 0.002903 0.016123 0.009061 0.01417 0.167435 0.034234 0.010246 0.004997 0.003396 0.003327 0.036862 0.097206 0.025665 0.022733 0.008201 0.007677 0.005348 0.005452 0.007525 0.018728 0.028278 0.019415 0.008498 0.004656 0.006377 0.015192 0.009762 0.04796 0.043828 0.027639 0.015511 0.008848 0.005324 0.013934 0.009544 0.004973 0.008842 0.012048 0.005791 0.006057 0.005152 0.110945 0.199477 0.003071 0.023391 0.009195 0.04642 0.013035 0.055167 0.004222 0.006379 0.120087 0.017246 0.023062 0.107281 0.037962 0.158459 0.540403 0.00597 0.02467 0.083677 0.008838 0.023498 0.062266 0.0276 0.007283 0.008191 0.007105 0.004908 0.005771 0.02995 0.006958 0.015024 0.041775 0.085231 0.084616 0.170135 0.016749 0.011301 0.023353 0.025953 0.013404 0.006198 0.019373 0.007488 0.009846 0.016523 0.013102 0.02838 0.0552 0.06252 0.057338 0.022616 0.018785 0.011383 0.044461 0.052239 0.049733 0.032553 0.016787 0.056536 0.082161 0.005092 0.011827 0.033718 0.036539 0.103244 0.463236 0.012016 0.013617 0.332606 0.051147 0.021128 0.01283 0.0115 0.007234 0.027036 0.027829 0.015302 0.029581 0.014753 0.041723 0.080498 0.136664 0.16566 0.062297 0.146377 0.039502 0.011117 0.009354 0.006176 0.006897 0.058446 0.004265 0.338875 0.14328 0.022891 0.022291 0.048868 0.011518 0.011024 0.006474 0.009552 0.008816 0.013054 0.00303 0.005389 0.005007 0.023599 0.00612 0.124432 0.020429 0.005268 0.003272 0.013896 0.007212 0.019464 0.028864 0.005966 0.093709 0.130377 0.07631 0.019922 0.007201 0.056452 0.038229 0.027173 0.043399 0.323298 0.011511 0.016702 0.009948 0.092069 0.038507 0.066579 0.006944 0.100429 0.009072 0.068446 0.006807 0.015843 0.019145 0.018985 0.06352 0.012865 0.011258 0.006002 0.015946 0.001281 0.077296 0.015931 0.017872 0.165548 0.040703 0.008755 0.009412 0.010394 0.010206 0.01859 0.393778 0.163626 0.00964 0.026041 0.006514 0.022196 0.029681 0.001834 0.005612 0.007556 0.035375 0.009238 0.477761 0.009613 0.009988 0.9 0.011329 0.006393 0.01766 0.007864 0.036517 0.010421 0.040614 0.114177 0.013978 0.053691 0.01896 0.013541 0.030714 0.105951 0.013979 0.011222 0.02521 0.013916 0.130846 0.080929 0.046751 0.183219 0.015005 0.010566 0.054366 0.01623 0.01517 0.023063 0.004155 0.010133 0.145479 0.06699 0.054015 0.133329 0.307702 0.089511 0.098842 0.008244 0.016453)) nil "SDIF - Catanzaro"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (10 0 3 0 nil 0) (5 0 4 0 nil 0) (9 0 5 0 nil 0) (7 0 5 1 nil 0) (6 0 7 1 nil 0) (8 0 9 1 nil 0) (11 1 10 0 nil 0) (4 0 11 0 nil 0) (15 0 12 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (19 1 15 2 nil 0) (1 0 16 0 nil 0) (17 0 16 1 nil 0) (1 0 17 0 nil 0) (19 0 17 1 nil 0) (18 0 19 0 nil 0))) nil 6.16))
