; OM File Header - Saved 2020/08/29 15:50:55
; (6.17 :patc (om-make-point 604 60) (om-make-point 329 0) (om-make-point 615 636) "" 183 0 "2020/07/30 20:25:36" "2020/07/30 20:45:30")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "Modulacao por notais iguais" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 18 57) (om-make-point 49 28) 19/11 "19/11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JOHNSTON-SOB" (quote johnston-sob) (quote ((om-load-inputfun (quote input-funbox) "first ratio" "RATIO" 3/2) (om-load-inputfun (quote input-funbox) "sobreposition number" "SOBREPOSITION" 3) (om-load-inputfun (quote input-funbox) "fundamental" "FUNDAMENTAL" 7200))) (om-make-point 58 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC 2" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 283 281) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 1042 376) (quote "OM > (6906 6000 \"will be equal if the second list has the fundamental with the difference of\" 900 cents)$OM > (6906 6904 \"are equal\")$OM > (6000 6396 \"will be equal if the second list has the fundamental with the difference of\" -400 cents)$OM > (6000 6000 \"are equal\")$OM > (6000 6904 \"will be equal if the second list has the fundamental with the difference of\" -900 cents)$OM > (6750 6142 \"will be equal if the second list has the fundamental with the difference of\" 600 cents)$OM > (6750 6750 \"are equal\")$OM > (6750 6356 \"will be equal if the second list has the fundamental with the difference of\" 400 cents)$OM > (6750 6652 \"will be equal if the second list has the fundamental with the difference of\" 100 cents)$OM > (6608 6000 \"will be equal if the second list has the fundamental with the difference of\" 600 cents)$OM > (6608 6904 \"will be equal if the second list has the fundamental with the difference of\" -300 cents)$OM > (6000 6396 \"will be equal if the second list has the fundamental with the difference of\" -400 cents)$OM > (6000 6000 \"are equal\")$OM > (6000 6904 \"will be equal if the second list has the fundamental with the difference of\" -900 cents)$OM => end") "" (om-make-point 16 48) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) 6.16 nil "" (om-make-point 200 200) (om-make-point 1132 437)) (quote nil) (om-make-point 797 488) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 242 559) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 202 548) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproximação de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 2))) (om-make-point 146 589) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 160 60) (quote "(11 19 27 35 43 51 59)") "" (om-make-point 302 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 148 43) (quote "(16 27 35 38 49 54 60)") "" (om-make-point 105 22) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 303 449) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 233 358) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 335 379) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 118 349) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 157 349) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST 2" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproximacao de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 88 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproximacao de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 210 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 349 447) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE 2" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 279 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7200))) (om-make-point 50 476) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 127 269) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 58 288) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE 2" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 69 191) (om-make-point 74 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 138 164) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sieve 2" (om-load-patch-abs1 "sieve" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 552 337) (om-make-point 138 28) (list 16 27 35 38 49 54 60) "(16 27 35 38 49 54 60)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 536 367) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 663 151) (om-make-point 77 28) (list 1 5/3 2) "(1 5/3 2/1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "RATIO->MC" (quote ratio->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 648 181) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 648 181)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 215 365) (om-make-point 253 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 225 16) "(4 6 7 10 13 14 16 18 19 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 4" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 291 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 271 283) (om-make-point 96 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 68 17) "(11 19 27 35 43 51 59)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 124 215) (om-make-point 137 47) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 109 23) "(11 16 21 26 31)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 39 292) (om-make-point 159 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 131 16) "(4 7 10 13 16 19 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 298 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 189 12) (om-make-point 67 28) (list 4 11 64) "(4 11 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 10) (om-make-point 67 28) (list 8 11 64) "(8 11 64)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 416 261) (om-make-point 64 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 419 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 158 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 61 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 158 45) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 4 11 64) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 73 45) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 11 64) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (2 0 3 0 nil 0) (12 0 4 0 nil 0) (9 0 5 0 nil 0) (5 0 6 0 ((om-make-point 321 271) (om-make-point 329 281) (om-make-point 319 277) (om-make-point 319 283)) 0) (14 0 7 0 nil 0) (15 0 8 0 nil 0) (17 0 9 0 nil 0) (16 0 9 1 nil 0) (13 0 12 0 nil 0) (17 0 13 0 nil 0) (16 0 13 1 nil 0) (16 0 14 0 nil 0) (17 0 15 0 nil 0) (10 0 16 1 nil 0) (11 0 17 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 262 12) nil (list (list 11 19 27 35 43 51 59)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 341 156) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 343 268) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 264 186) (om-make-point 74 74) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 228 89) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sieve" (om-load-patch-abs1 "sieve" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 552 337) (om-make-point 138 28) (list 16 27 35 38 49 54 60) "(16 27 35 38 49 54 60)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 115 15) (om-make-point 67 28) (list 5 11 32) "(5 11 32)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 536 367) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 663 151) (om-make-point 77 28) (list 1 5/3 2) "(1 5/3 2/1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((newbox (om-load-boxcall (quote genfun) "RATIO->MC" (quote ratio->mc) (quote ((om-load-inputfun (quote input-funbox) "convert list of ratios for midicent in Just Intonation" "RATIO" (list 1 11/8 7/4)) (om-load-inputfun (quote input-funbox) "this is the fundamental of the Just Intonation" "FUNDAMENTAL" 6000))) (om-make-point 648 181) nil nil nil nil 1))) (setf (frame-position newbox) (om-make-point 648 181)) newbox))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 215 365) (om-make-point 253 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 225 16) "(4 6 7 10 13 14 16 18 19 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 4" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 289 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 271 283) (om-make-point 96 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 68 17) "nil" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 124 215) (om-make-point 137 47) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 109 23) "(3 8 13 18 23 28)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 39 292) (om-make-point 159 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 131 16) "(11 16 21 26 31)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 298 131) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 216 13) (om-make-point 61 28) (list 8 7 32) "(8 7 32)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 416 261) (om-make-point 64 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 419 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 158 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 61 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 182 51) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 8 7 32) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 73 45) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 5 11 32) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (3 0 4 0 nil 0) (12 0 5 0 nil 0) (10 0 6 0 nil 0) (6 0 7 0 nil 0) (14 0 8 0 nil 0) (15 0 9 0 nil 0) (17 0 10 0 nil 0) (16 0 10 1 nil 0) (13 0 12 0 nil 0) (17 0 13 0 nil 0) (16 0 13 1 nil 0) (16 0 14 0 nil 0) (17 0 15 0 nil 0) (11 0 16 1 nil 0) (1 0 17 1 nil 0))) 6.16 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 81 8) nil (list (list 16 27 35 38 49 54 60)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (28 0 1 2 nil 0) (26 0 2 0 nil 0) (25 0 2 1 nil 0) (18 0 6 0 nil 0) (17 0 6 1 nil 0) (5 0 6 2 nil 0) (4 0 6 3 nil 0) (20 0 14 0 nil 0) (12 0 14 1 nil 0) (13 0 14 2 nil 0) (2 0 15 0 nil 0) (10 0 15 1 nil 0) (11 0 15 2 nil 0) (15 0 17 0 nil 0) (9 0 17 1 nil 0) (16 0 17 2 nil 0) (14 0 18 0 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (1 0 21 0 nil 0) (22 0 21 1 nil 0) (27 1 26 0 nil 0) (24 0 26 1 nil 0) (23 0 27 0 nil 0))) nil 6.16))
