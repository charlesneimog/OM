; OM File Header - Saved 2020/08/24 22:01:00
; (6.16 :patc (om-make-point 982 10) (om-make-point -8 -8) (om-make-point 1366 685) "" 183 0 "2020/05/22 14:20:47" "2020/08/24 22:00:59")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-JI")))(setf *om-current-persistent* (om-load-patch1 "Biblioteca" (quote ((let ((box (om-load-boxcall (quote genfun) "PRIME-DECOMPOSITION" (quote prime-decomposition) (quote ((om-load-inputfun (quote input-funbox) "Number or numbers list." "HARMONIC" (list 9 18 172)))) (om-make-point 458 348) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT->MC" (quote rt->mc) (quote ((om-load-inputfun (quote input-funbox) "Convert list of ratios for midicent." "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "This will be a note. This note will be the fundamental of the list of ratios." "FUNDAMENTAL" 6000))) (om-make-point 126 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GIZMO" (quote gizmo) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTE" (list 6386)) (om-load-inputfun (quote input-funbox) "fund of the gizmo" "FUND" (list 6000)))) (om-make-point 65 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIDICENTS->MIDI" (quote midicents->midi) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "MAXLIST" 6000))) (om-make-point 241 416) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY" (quote eikosany) (quote ((om-load-inputfun (quote input-funbox) "six harmonic notes | if you don't put 6 notes the result will not be an eikosany." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 962 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY" (quote hexany) (quote ((om-load-inputfun (quote input-funbox) "List of just four harmonics." "HEXANY" (list 5 7 13 17)))) (om-make-point 880 238) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 185 382) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SEND-MAX" (quote send-max) (quote ((om-load-inputfun (quote input-funbox) "list" "MAXLIST" 6000))) (om-make-point 160 412) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS-CHORDS" (quote cps-chords) (quote ((om-load-inputfun (quote input-funbox) "Hexa" "VALS" (list 1 3 5 7)) (om-load-inputfun (quote input-funbox) "chord-notes" "N" 4))) (om-make-point 801 348) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS->RATIO" (quote cps->ratio) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HEXANY" 1))) (om-make-point 883 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY-CONNECTIONS" (quote eikosany-connections) (quote ((om-load-inputfun (quote input-funbox) "list of tree harmonics" "VERTICE" (list 1 3 9)) (om-load-inputfun (quote input-funbox) "list of the cps-eikosany" "EIKOSANY" (list (list 1 3 5) (list 1 3 7) (list 1 5 7) (list 3 5 7) (list 1 3 9) (list 1 5 9) (list 3 5 9) (list 1 7 9) (list 3 7 9) (list 5 7 9) (list 1 3 11) (list 1 5 11) (list 3 5 11) (list 1 7 11) (list 3 7 11) (list 5 7 11) (list 1 9 11) (list 3 9 11) (list 5 9 11) (list 7 9 11))))) (om-make-point 1080 337) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY-CONNECTIONS" (quote hexany-connections) (quote ((om-load-inputfun (quote input-funbox) "list of two harmonics" "HARMONICO" (list 3 13)) (om-load-inputfun (quote input-funbox) "list of just four harmonics" "HEXANY" (list (list 3 5) (list 3 13) (list 5 13) (list 3 21) (list 5 21) (list 13 21))))) (om-make-point 968 334) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "EIKOSANY-TRIADS" (quote eikosany-triads) (quote ((om-load-inputfun (quote input-funbox) "three harmonic notes | if you don't put 3 notes the result will not be an eikosany triads." "6-NOTES" (list 1 3 5 7 9 11)))) (om-make-point 1140 241) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEXANY-TRIADS" (quote hexany-triads) (quote ((om-load-inputfun (quote input-funbox) "harmonicos" "HARMONICOS" 1))) (om-make-point 1048 237) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CPS" (quote cps) (quote ((om-load-inputfun (quote input-funbox) "six harmonic notes | if you don't put 6 notes the result will not be an eikosany." "NOTES" (list 1 3 5 7 9 11)))) (om-make-point 818 246) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOS-CHECK" (quote mos-check) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "INTERVAL" 4/3) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "FUND" 6000) (om-load-inputfun (quote input-funbox) "high note" "AGUDA" 7200) (om-load-inputfun (quote input-funbox) "number of sobreposition" "SOBREPOSITION" 11) (om-load-inputfun (quote input-funbox) "interval number of the MOS" "NUMBER_OF_INTERVAL" 2))) (om-make-point 836 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MK-TEMPERAMENT" (quote mk-temperament) (quote ((om-load-inputfun (quote input-funbox) "inicial-note" "FUND" 6000) (om-load-inputfun (quote input-funbox) "interval: 2 for octave, 3/2 for a fifth division, etc" "RATIO" 2) (om-load-inputfun (quote input-funbox) "divison for the interval, for example: 24 divison of the octave" "DIVISION" 24))) (om-make-point 400 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "JOHNSTON-SOB" (quote johnston-sob) (quote ((om-load-inputfun (quote input-funbox) "first ratio" "RATIO" 3/2) (om-load-inputfun (quote input-funbox) "sobreposition number" "SOBREPOSITION" 3) (om-load-inputfun (quote input-funbox) "fundamental" "FUNDAMENTAL" 7200))) (om-make-point 1112 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITH-MEAN" (quote arith-mean) (quote ((om-load-inputfun (quote input-funbox) "first ratio" "GRAVE" 1) (om-load-inputfun (quote input-funbox) "second ratio" "AGUDO" 2))) (om-make-point 1028 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERVAL-SOB" (quote interval-sob) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "FUND" 6000) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "list of sopreposition (I recomend the use o 'crible' object" "SIEVE" (list 2 3 7 11 12)))) (om-make-point 937 79) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "UTONAL-INVERSE" (quote utonal-inverse) (quote ((om-load-inputfun (quote input-funbox) "utonal chord" "UTONAL" (list 1 4/3 6/5)))) (om-make-point 338 194) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OTONAL-INVERSE" (quote otonal-inverse) (quote ((om-load-inputfun (quote input-funbox) "otonal chord" "OTONAL" (list 1 3/2 5/4)))) (om-make-point 244 186) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND-IDENTITY" (quote diamond-identity) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "IDENTITY" (list 11 19 97)))) (om-make-point 144 183) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIAMOND" (quote diamond) (quote ((om-load-inputfun (quote input-funbox) "limit-n for the diamond" "LIMITE" 11))) (om-make-point 66 178) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RT-OCTAVE" (quote rt-octave) (quote ((om-load-inputfun (quote input-funbox) "list of ratios" "FRAQ" (list 1/3 1 5/3)))) (om-make-point 58 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHOOSE" (quote choose) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list (list 6000 6530) (list 7203 5049))) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "CHORD-N" (list 2)))) (om-make-point 753 68) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES-FUND" (quote modulation-notes-fund) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproximação de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 10) (om-load-inputfun (quote input-funbox) "temperament! 2 for 2-DEO 4 for 24-DEO" "TEMPERAMENTO" 4))) (om-make-point 595 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODULATION-NOTES" (quote modulation-notes) (quote ((om-load-inputfun (quote input-funbox) "first notelist of the comparation" "LISTNOTE" (list 6000 6530)) (om-load-inputfun (quote input-funbox) "second notelist of the comparation" "LISTNOTE2" (list 7203 5049)) (om-load-inputfun (quote input-funbox) "aproximação de escala temperada 1/2 1/4 1/8 de tom" "CENTS" 2))) (om-make-point 486 73) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FILTER-AC-INST" (quote filter-ac-inst) (quote ((om-load-inputfun (quote input-funbox) "list of notes (THIS OBJECT DON'T READ LISTS OF LIST" "NOTELIST" (list 6000 6530 7203 5049)) (om-load-inputfun (quote input-funbox) "Cents aproximation of the 12-DEO" "APPROX" 10) (om-load-inputfun (quote input-funbox) "aproximação de escala temperada 1/2 1/4 1/8 de tom" "TEMPERAMENT" 2))) (om-make-point 405 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RANGE-REDUCE" (quote range-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTELIST" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "AGUDA" 7902))) (om-make-point 309 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OCTAVE-REDUCE" (quote octave-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTE" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000))) (om-make-point 203 65) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 7 0 nil 0))) nil 6.16))
