; OM File Header - Saved 2018/12/10 23:34:09
; (6.14 :patc (om-make-point 280 10) (om-make-point 50 50) (om-make-point 1366 685) "" 183 0 "2018/07/15 17:11:17" "2018/12/10 23:34:09")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "OSC-RECEIVE" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 661 304) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "PORT" 0 (om-make-point 588 45) "" "PORT" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSC-RECEIVE" (quote osc-receive) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" 3000) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING" nil))) (om-make-point 683 138) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "OSCEVENT" (quote oscevent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "an IP address" "host" "127.0.0.1") (om-load-inputfun (quote input-funbox) "a port number" "port" 3000) (om-load-inputfun (quote input-funbox) "message formatted as a list" "bundle" (list "/test" 0)))) (om-make-point 39 86) (om-make-point 428 116) (if (find-class (quote oscevent) nil) (let ((newobj (make-instance (quote oscevent) :host "127.0.0.1" :port 3000 :bundle (list "/test" 0) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (player deltapict zoom obj-mode cmnpref notechancolor? grillestep mode winsize winpos show-stems scale)) (list (quote :osc-player) (om-make-point 0 0) 1 0 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 370 280) (om-make-point 10 40) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) nil 6.14))