; OM File Header - Saved 2020/06/08 13:04:25
; (6.16 :patc (om-make-point 10 60) (om-make-point 106 137) (om-make-point 1196 361) "" 183 0 "2020/05/11 21:40:14" "2020/06/08 13:04:25")
; End File Header
; External resources 
; (list (list (quote :sound) "#P\"../../../Ircam Instrumentos/01 Flute/ordinario/Fl-ord-B3-pp.aif\""))
(in-package :om)(load-lib-for (quote ("OM-SuperVP")))(setf *om-current-persistent* (om-load-patch1 "Patch 4" (quote ((let ((box (om-load-editor-box1 "Fl-ord-B3-pp.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 73 207) (om-make-point 320 81) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "charl" "OneDrive - design.ufjf.br" "Documentos" "Ircam Instrumentos" "01 Flute" "ordinario")) :device nil :host nil :name "Fl-ord-B3-pp" :type "aif") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl-ord-B3-pp.aif") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Fl-ord-B3-pp.aif" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 107 7) (om-make-point 238 59) (let ((newobj (let ((thesound (load-sound (om-make-pathname :directory (quote (:absolute "Users" "charl" "OneDrive - design.ufjf.br" "Documentos" "Ircam Instrumentos" "01 Flute" "ordinario")) :device nil :host nil :name "Fl-ord-B3-pp" :type "aif") 0 1.0 0))) (when thesound (setf (markers thesound) (quote nil))) thesound))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "Fl-ord-B3-pp.aif") (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 400 20) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-MRK-ONSETS" (quote get-mrk-onsets) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 1021 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 575 180) (om-make-point 70 50) (let ((newobj (make-instance (quote sdiffile)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 842 64) (om-make-point 92 28) "markers.sdif" "\"markers.sdif\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 692 64) (om-make-point 44 28) 4096 "4096" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 656 33) (om-make-point 44 28) 4096 "4096" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 596 17) (om-make-point 42 28) 0.04 "0.04" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 542 64) (om-make-point 60 28) 22050.0 "22050.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 492 64) (om-make-point 36 28) 0.0 "0.0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 442 64) (om-make-point 36 28) 1.4 "1.4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TRANSIENT-DETECTION" (quote transient-detection) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputkeyword (quote input-keyword) "" "threshold" (quote :threshold) 1.4 nil) (om-load-inputkeyword (quote input-keyword) "" "minfreq" (quote :minfreq) 0.0 nil) (om-load-inputkeyword (quote input-keyword) "" "maxfreq" (quote :maxfreq) 22050.0 nil) (om-load-inputkeyword (quote input-keyword) "" "minoffset" (quote :minoffset) 0.02 nil) (om-load-inputkeyword (quote input-keyword) "" "windowsize" (quote :windowsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "fftsize" (quote :fftsize) 4096 nil) (om-load-inputkeyword (quote input-keyword) "" "step-oversamp" (quote :step-oversamp) 8 (list (list "1/4" 4) (list "1/8" 8) (list "1/16" 16) (list "1/32" 32))) (om-load-inputkeyword (quote input-keyword) "" "windowtype" (quote :windowtype) "hanning" (list (list "Blackman" "blackman") (list "Hanning" "hanning") (list "Hamming" "hamming"))) (om-load-inputkeyword (quote input-keyword) "" "out" (quote :out) "markers.sdif" nil))) (om-make-point 346 94) (om-make-point 551 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 0 2 nil 0) (11 0 3 0 nil 0) (1 0 11 0 nil 0) (10 0 11 1 nil 0) (9 0 11 2 nil 0) (8 0 11 3 nil 0) (7 0 11 4 nil 0) (6 0 11 5 nil 0) (5 0 11 6 nil 0) (4 0 11 9 nil 0))) nil 6.16))
