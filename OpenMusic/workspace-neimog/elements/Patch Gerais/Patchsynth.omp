; OM File Header - Saved 2020/05/27 22:39:05
; (6.16 :patc (om-make-point 403 409) (om-make-point -8 -8) (om-make-point 1366 705) "" 183 0 nil "2020/05/27 22:39:05")
; End File Header
(in-package :om)(load-lib-for (quote ("OM2Csound")))(setf *om-current-persistent* (om-load-patch1 "Patchsynth" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 155 71) (quote "OR , $connect first input of this $textfile to second input$of csound-synth") "" (om-make-point 827 165) nil (om-make-color 0 0 0) (om-make-font "Liberation Sans" 12 :family "Liberation Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 585 26) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "text to put in the file" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede mode" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "contents eval mode" "eval-mode" "text" (list (list "text" "text") (list "data list" "data") (list "list" "list"))))) (om-make-point 828 238) (om-make-point 151 91) (load-buffer-textfile (quote ("sr= 44100 " "kr= 441 " "ksmps= 100 " "nchnls= 1" " " "" " " "instr 1 " "iamp  =  ampdb(p4) " "idur  =  p3" "ifq1  =  p5" "a2  oscili  iamp,1/idur,2	" "a1  oscili  a2,ifq1,1	" "     out  a1" "    endin" "" "" "" "" "" "" "")) (quote textfile) "supersede" "text") "x" nil (pairlis (quote (obj-mode palette-mode winpos winsize mode grillestep notechancolor? cmnpref zoom inport outport deltapict show-stems)) (list 0 0 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (quote t))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 688 156) (om-make-point 110 79) (load-buffer-textfile (quote ("sr= 44100 " "kr= 441 " "ksmps= 100 " "nchnls= 1" "" " " "instr 1" "a2  oscili  ampdb(p4),1/p3,2	" "a1  oscili  a2,p5,1	" "     out  a1" "    endin" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 54 389) (om-make-point 44 30) 4096 "4096" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE1" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 1) (om-load-inputfun (quote input-funbox) "ttab" "TTAB" 0) (om-load-inputfun (quote input-funbox) "points" "POINTS" 4096) (om-load-inputfun (quote input-funbox) "gen" "GEN" 10) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 1)))) (om-make-point 238 199) (om-make-point 76 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 160 272) (om-make-point 26 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 105 265) (om-make-point 44 30) 4096 "4096" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TABLE1" (quote table) (quote ((om-load-inputfun (quote input-funbox) "table" "TABLE" 2) (om-load-inputfun (quote input-funbox) "ttab" "TTAB" 0) (om-load-inputfun (quote input-funbox) "points" "POINTS" 2048) (om-load-inputfun (quote input-funbox) "gen" "GEN" 7) (om-load-inputfun (quote input-funbox) "pargen" "PARGEN" (list 512 512 1)))) (om-make-point 61 428) (om-make-point 76 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "X-POINTS" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "Y-POINTS" "Y-POINTS" (list 0 100)))) (om-make-point 46 126) (om-make-point 158 50) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 1 2 3 4 5 6 7 8 10)) (quote (3 21 50 67 54 21 17 25 7 0)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture show-stems deltapict outport inport zoom cmnpref notechancolor? grillestep mode winsize winpos palette-mode obj-mode)) (list nil (quote t) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 335 275) (om-make-point 10 40) 0 0)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PARGEN05-07" (quote pargen05-07) (quote ((om-load-inputfun (quote input-funbox) "a BPF object" "BPF" (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (om-load-inputfun (quote input-funbox) "number of points" "PNTS" 2048) (om-load-inputfun (quote input-funbox) "min y value" "Y-MIN" 0) (om-load-inputfun (quote input-funbox) "max y value" "Y-MAX" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "NDEC" 3))) (om-make-point 71 318) (om-make-point 115 67) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 691 362) (om-make-point 75 30) "test1.wav" "\"test1.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WRITE-CSOUND-SCORE 2" (quote write-csound-score) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "score data" "DATA" nil))) (om-make-point 487 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "my-instrument-patch" (om-load-patch-abs1 "my-instrument-patch" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 141 6) (om-make-point 81 30) "ampdb(p4)" "\"ampdb(p4)\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 234 12) (om-make-point 49 30) "1/p3" "\"1/p3\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 109 28) (om-make-point 32 30) (quote a2) "a2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSCIL 2" (quote oscil) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" (quote asig)) (om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote oscili) (list (list "oscil" (quote (quote oscil))) (list "oscili" (quote (quote oscili))) (list "foscil" (quote (quote foscil))) (list "foscili" (quote (quote foscili))) (list "loscil" (quote (quote loscil))))) (om-load-inputfun (quote input-funbox) "amplitude" "XAMP" (quote p4)) (om-load-inputfun (quote input-funbox) "frequency (Hz)" "XCPS" (quote p5)) (om-load-inputfun (quote input-funbox) "table number" "IFN" 2))) (om-make-point 103 68) (om-make-point 166 70) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 111 337) (om-make-point 21 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 202 157) (om-make-point 29 30) (quote p5) "p5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 108 171) (om-make-point 32 30) (quote a1) "a1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OSCIL 2" (quote oscil) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" (quote asig)) (om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote oscili) (list (list "oscil" (quote (quote oscil))) (list "oscili" (quote (quote oscili))) (list "foscil" (quote (quote foscil))) (list "foscili" (quote (quote foscili))) (list "loscil" (quote (quote loscil))))) (om-load-inputfun (quote input-funbox) "amplitude" "XAMP" (quote p4)) (om-load-inputfun (quote input-funbox) "frequency (Hz)" "XCPS" (quote p5)) (om-load-inputfun (quote input-funbox) "table number" "IFN" 1))) (om-make-point 130 212) (om-make-point 116 70) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inst" (quote inst) (quote ((om-load-inputfun (quote input-funbox) "name" "NAME" 1) (om-load-inputfun (quote input-funbox) "assign-val" "VARBS" nil) (om-load-inputfun (quote input-funbox) "out" "OUT" nil))) (om-make-point 131 376) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "out" (quote out) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "opcode" "MODE" (quote out) (list (list "out" (quote (quote out))) (list "outs" (quote (quote outs))) (list "outs1" (quote (quote outs1))) (list "outs2" (quote (quote outs2))))) (om-load-inputfun (quote input-funbox) "asig" "ASIG" (quote a1)))) (om-make-point 143 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 127 450) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 3 0 nil 0) (0 0 3 2 nil 0) (1 0 3 3 nil 0) (6 0 7 0 nil 0) (3 0 7 2 nil 0) (5 0 7 3 nil 0) (4 0 8 0 nil 0) (9 0 8 2 nil 0) (7 0 9 1 nil 0) (8 0 10 0 nil 0))) 6.16 nil "" (om-make-point 0 0) (om-make-point 486 484)) (quote nil) (om-make-point 615 48) nil (list (list (list "
 ") (list "instr 1") (list (quote a2) "  " (quote oscili) "  " "ampdb(p4)" "," "1/p3" "," 2) (list (quote a1) "  " (quote oscili) "  " (quote a2) "," (quote p5) "," 1) (list "     " (quote out) "  " (quote a1)) (list "    endin"))) nil "my-instrument-patch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "" (quote sound) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a track index for multichannel mixing (0 = no specific track)" "tracknum" 0) (om-load-inputfun (quote input-funbox) "a list of markers (s)" "markers" nil))) (om-make-point 641 499) (om-make-point 171 79) (let ((newobj nil)) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj "") (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems notechancolor? cmnpref obj-mode deltapict show-spectrum winpos winsize mode grillestep zoom player inport outport)) (list nil (quote t) nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 (om-make-point 0 0) nil (om-make-point 0 0) (om-make-point 370 280) 0 nil 1 (quote :om-audio) nil nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 4" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 285 425) (om-make-point 285 129) (load-buffer-textfile (quote ("f 1	 0	 4096	 10	 1	 " "f 2	 0	 4096	 7	 1.0000	 477	 .1325	 3524	 .0000	 " ";p1	p2	p3	p4	p5	" "i 1	 2	 10	 60	 261.6256	 " "i 1	 2	 10	 60	 386.3755	 " "i 1	 2	 10	 60	 538.5836	 " "i 1	 2	 10	 60	 698.4565	 " "i 1	 2	 10	 60	 892.7999	 " "i 1	 2	 10	 60	 1077.1671	 " "i 1	 2	 10	 60	 1299.6070	 " "i 1	 2	 10	 60	 1523.3442	 " "e" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 14" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 302 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 32 186) (om-make-point 165 61) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2 12 86)) (quote (96 24 13)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 0) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 297 81) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 337 84) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 368 76) (om-make-point 32 28) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 417 83) (om-make-point 32 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXTFILE 3" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 330 16) (om-make-point 70 50) (load-buffer-textfile (quote ("261.62555" "386.3755" "538.58356" "698.4565" "892.79987" "1077.1671" "1299.607" "1523.3442" "" "" "" "" "")) (quote textfile) "supersede" "list") "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 250 21) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 93 5) (om-make-point 112 104) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6675 7250 7700 8125 8450 8775 9050)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 20) (om-make-point 683 260) 0 1000 (quote t) 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote ggf) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CSOUND-SYNTH" (quote csound-synth) (quote ((om-load-inputfun (quote input-funbox) "" "SCO" nil) (om-load-inputfun (quote input-funbox) "" "ORC" nil) (om-load-inputfun (quote input-funbox) "" "OUT-NAME" nil))) (om-make-point 644 408) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAKE-OBJ-SND" (quote make-obj-snd) (quote ((om-load-inputfun (quote input-funbox) "" "LINS" nil) (om-load-inputfun (quote input-funbox) "" "LDATS" nil) (om-load-inputfun (quote input-funbox) "" "LDURS" nil) (om-load-inputfun (quote input-funbox) "" "LP4" nil) (om-load-inputfun (quote input-funbox) "" "LP5" nil))) (om-make-point 332 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "HEADER" (quote header) (quote ((om-load-inputfun (quote input-funbox) "sample rate" "SR" 44100) (om-load-inputfun (quote input-funbox) "control rate" "KR" 441) (om-load-inputfun (quote input-funbox) "sr/kr ratio" "KSMPS" 100) (om-load-inputfun (quote input-funbox) "number of channels" "NCHNLS" 2))) (om-make-point 557 56) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "WRITE-CSOUND-ORC" (quote write-csound-orc) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "filename" "OUT" (quote no-file) (list (list "text output" (quote (quote no-file))) (list "file output" (quote (quote file))))) (om-load-inputfun (quote input-funbox) "file header" "HEADER" "") (om-load-inputfun (quote input-funbox) "csound instrument" "INSTR" nil))) (om-make-point 546 168) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((28 0 3 1 nil 0) (4 0 8 2 nil 0) (10 0 8 4 nil 0) (17 0 10 0 nil 0) (7 0 10 1 nil 0) (6 0 10 4 nil 0) (16 0 12 1 nil 0) (25 0 14 0 nil 0) (12 0 15 1 nil 0) (5 0 16 0 nil 0) (8 0 16 1 nil 0) (26 0 16 2 nil 0) (23 0 22 1 nil 0) (24 1 23 0 nil 0) (12 0 25 0 nil 0) (28 0 25 1 nil 0) (11 0 25 2 nil 0) (18 0 26 0 nil 0) (19 0 26 1 nil 0) (20 0 26 2 nil 0) (21 0 26 3 nil 0) (23 0 26 4 nil 0) (1 0 27 3 nil 0) (27 0 28 1 nil 0) (13 0 28 2 nil 0))) nil 6.16))
