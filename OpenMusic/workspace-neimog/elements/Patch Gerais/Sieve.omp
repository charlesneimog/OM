; OM File Header - Saved 2019/08/30 21:44:12
; (6.15 :patc (om-make-point 10 10) (om-make-point -8 -8) (om-make-point 1366 645) "" 183 0 "2018/07/15 17:02:51" "2018/12/10 23:34:08")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"C:midcent.omp\""))
(in-package :om)(load-lib-for (quote ("Morphologie")))(setf *om-current-persistent* (om-load-patch1 "Sieve" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 22" (quote t) (quote nil) (om-make-point 735 561) (om-make-point 44 28) 2400 "2400" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE 2" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 128) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 603 591) (om-make-point 273 147) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 2400 :puntos (list (list 692 2150 2380) (list 1324 1324 1038 1682) (list 264 1452 2380 1324 1324 2150) (list 264 2150 492 1786 1452)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1366 725) (om-make-point -8 -8))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 21" (quote t) (quote nil) (om-make-point 629 516) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM- 2" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 619 546) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch 2" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 267 183) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 50 50) (om-make-point 765 28) (list 128 136 137 140 144 146 152 155 160 164 168 173 176 182 184 188 191 192 200 208 209 212 216 218 224 227 232 236 240 245 248 254 256) " (128 136 137 140 144 146 152 155 160 164 168 173 176 182 184 188 191 192 200 208 209 212 216 218 224 227 232 236 240 245 248 254 256)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0))) 6.14 nil "" (om-make-point 200 200) (om-make-point 392 308)) (quote nil) (om-make-point 0 470) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 20" (quote t) (quote nil) (om-make-point 6613/6 137/3) (om-make-point 80 28) (list 9 128 256) "(9 128 256)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 76 312) (om-make-point 303 118) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 228 179) (om-make-point 32 28) 21 "21" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 208 161) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 199 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 483 114) (om-make-point 26 28) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 531 113) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 585 112) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 633 111) (om-make-point 26 28) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 5" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 603 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 4" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 555 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 3" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 501 143) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 453 144) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output 2" 1 (om-make-point 727 382) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 50 137) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 3595/6 18) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM 5" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 1415/3 709/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 4" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 1523/3 511/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 4" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 1598/3 289/3) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 21 128 512) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 1 0 nil 0) (4 0 3 0 nil 0) (5 0 4 0 nil 0) (2 0 5 1 nil 0))) 6.14 nil "" (om-make-point -8 -8) (om-make-point 1366 685)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 348 261/4) nil (list (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 21 128 512) :from-file t)) 296) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 19" (quote t) (quote nil) (om-make-point 210 561) (om-make-point 38 28) 128 "128" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "midcent 3" (quote ("elements" "Patch Gerais" "midcent")) (quote ((om-load-inputfun (quote input-funbox) "" "fundamental" nil) (om-load-inputfun (quote input-funbox) "" "oitava" nil) (om-load-inputfun (quote input-funbox) "" "Harmonicos" nil))) (om-make-point 147 603) nil (list (list (list 6618 6670 6398 6210) (list 6930 6526 6246 6086) (list 7078 6408 7196 6738) (list 7038 6418 7088 6724)) (list (list 374.0428 385.28452 329.0759 295.3507) (list 447.62497 354.62524 301.48257 274.91122) (list 487.482 331.11984 522.2291 400.61414) (list 476.24027 333.1638 490.5479 397.5482))) nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 18" (quote t) (quote nil) (om-make-point 118 573) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 92 675) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 5" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 122 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 17" (quote t) (quote nil) (om-make-point 702 288) (om-make-point 38 28) 128 "128" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 692 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 16" (quote t) (quote nil) (om-make-point 829 207) (om-make-point 38 28) 384 "384" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C2CHORD-SEQ" (quote c2chord-seq) (quote ((om-load-inputfun (quote input-funbox) "the cercle" "SELF" nil) (om-load-inputfun (quote input-funbox) "initial value" "BASE" 6000) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 100))) (om-make-point 983 509) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 827 577) (om-make-point 307 135) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7706 7706 6000) (6262 8231 6919 7444) (6919 6000 6788 7706 7312 7181) (7444 6525 6262 6525 6394))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point -8 -8) (om-make-point 1366 725) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 968 447) (om-make-point 67 28) 25/4 "1200/192" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 396 381) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 13" (quote t) (quote nil) (om-make-point 488 369) (om-make-point 38 28) 128 "128" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "midcent 2" (quote ("elements" "Patch Gerais" "midcent")) (quote ((om-load-inputfun (quote input-funbox) "" "fundamental" nil) (om-load-inputfun (quote input-funbox) "" "oitava" nil) (om-load-inputfun (quote input-funbox) "" "Harmonicos" nil))) (om-make-point 425 411) nil (list (list (list 6692 8150 8380) (list 7324 7324 7038 7682) (list 6264 7452 8380 7324 7324 8150) (list 6264 8150 6492 7786 7452)) (list (list 390.39438 905.46967 1034.2385) (list 562.0861 562.0861 476.24027 690.855) (list 304.5485 605.0091 1034.2385 562.0861 562.0861 905.46967) (list 304.5485 905.46967 347.47144 733.7779 605.0091))) "x" nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 264 565) (om-make-point 307 135) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6692 8150 8380) (7324 7324 7038 7682) (6264 7452 8380 7324 7324 8150) (6264 8150 6492 7786 7452))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 8)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 383 28) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 1663/6 30) (om-make-point 86 28) (list 21 128 512) "(21 128 512)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 520 274) (om-make-point 125 42) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 128) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 626 363) (om-make-point 273 147) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 384 :puntos (list (list 147 147 273) (list 378 252 42 336) (list 189 105 21 210 231 126) (list 126 147 315 231 42)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1366 725) (om-make-point -8 -8))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sieve 2" (om-load-patch-abs1 "Sieve" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 418 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 493 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 399 18) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 311 38) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 317 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION 2" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 411 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 385 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 273 95) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 357 95) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 7 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 445 94) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 11 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (7 0 4 0 nil 0) (8 0 4 1 nil 0) (4 0 5 0 nil 0) (9 0 5 1 nil 0) (5 0 6 0 nil 0) (3 0 7 1 nil 0) (2 0 8 1 nil 0) (1 0 9 1 nil 0))) 6.14 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 6697/6 341/3) nil (list (list 256 263 267 270 273 277 278 284 289 290 291 298 300 305 307 311 312 319 322 324 326 333 340 341 344 347 354 355 358 361 366 368 375 377 382 388 389 392 396 399 403 409 410 417 421 424 426 431 432 438 443 445 452 454 459 460 465 466 473 476 477 480 487 494 498 501 508 509 511)) nil "Sieve"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 12" (quote t) (quote nil) (om-make-point 1055 245) (om-make-point 38 28) 256 "256" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 1009 246) (om-make-point 44 28) 6300 "6300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote patch-box) "midcent" (quote ("elements" "Patch Gerais" "midcent")) (quote ((om-load-inputfun (quote input-funbox) "" "fundamental" nil) (om-load-inputfun (quote input-funbox) "" "oitava" nil) (om-load-inputfun (quote input-funbox) "" "Harmonicos" nil))) (om-make-point 1017 280) nil (list (list 7120 7472 6534 6984 7246 6676 6626 7242 6740 7242 6300 6740 7472 6900 7472 7120 7090 7242 6900 7344 7382 6534 7090 7382 6676 6900 6984 6740 7136 6984 7242 6498 6300 6984 7362 7472 6740 6626 6300 6984 7344 6300 6836 7136 7090 6900 6836 6740 7242 7246 6300 6740 6300 6534 7472 7120 6498 6534 7472 7120 7242 7136 6676 6534 7242 6924 6676 6498 7242 6498 7246 7362 6740 7472 6498 6984 6836 6676 6984 7246 6924 7246 7136 7242 6534 7242 6900 6984 6900 6676 6836 6300 7382 6626 7120 7246 7362 7344 6984 6626 6984 6924 7242 7382 7246 7344 7362 7246 7136 7120 6534 7382 7472 6676 6300 7362 6300 7472 6498 7136 7242 7382 6984 7242 7136 6534 6900 6740 6498 6900 7090 6300 7090 7344 7120 6498 6534 7242 7090 6924 6984 6740 7472 7362 7472 7136 6924 6900 7362 6676 6498 7242 7090 6300 7120 6900 7242 6984 7362 6534 6924 6836 6300 7120 6836 6498 7472 7136 7120 6836 7344 6924 7362 7090 7120 7136 6924 6626 7472 7362 6534 6626 7344 7362 6626 6740 7136 6534 6676 6836 6534 7382 6740 7362 7472 6900 7090 6740 7362 7090 7344 6676 6836 7362 6984 6300 7382 7136 6534 6836 7382 7120 6498 6300 6836 6300 6924 7136 7382 7120 6300 7246 7136 6626 7090 6676 7136 6836 7472 6498 6534 6676 7136 7362 6924 6676 6740 7120 7136 7242 6300 6900 7362 7382 6300 6984 6534 7382 6836 7136 7362 6836 7090 7136 6836 6924 6534 6498 7242 7382 7344 6836 6740 6924 7472 6300 7344 6534 6984 7090 7472 6498 7136 7120 7472 7362 6626 7242 6498 7120 6300 7246 6300 6626 6534 7362 6626 6924 6900 7382 6626 7090 6836 7382 7090 7246 7120 6534 6498 7120 6534 6498 7136 7246 6984 7362 7246 7120 6924 6984 6676 7472 6534 6300 7246 6836 6984 7246 6900 7242 6740 6676 6534 6740 6984 6924 7242 6498 6740 7136 6626 7136 7472 6534 6740 7362 6836 7344 6836 7382 6740 7362 7344 7090 6300 7472 6676 6300 7472 6740 6300 7246 6676 6924 7242 7120 6534 6626 7120 7246 6900 7344 6534 6676 7472 6740 6984 7120 6534 7090 6836 7472 6740 7472 6984 7362 6836 6626 7472 6676 6300 6900 7242 7120 6676 6836 6676 6740 7344 6900 6924 7120 7344 6676 7136 7344 7090 6836 7382 6984 6300 6740 7382 6300 6498 7382 6984 6900 6300 7242 7382 6900 7242 7472 7382 6626 6498 6534 6900 7136 7362 6676 7120 6740 6900 7090 7362 6900 6676 6924 7246 6300 6676 7120 7472 7382 6924 6740 7090 6984 6498 7382 6676 6924 7344 7090 7136 6626 7136 7382 7090 6836 6900 6300 7136 7472 6984 7246 6498 6984 7382 7344 7120 6740 7382 6924 7344 6900 6740 6626 7242 6900 7090 7472 6924 6300 6626 7344 6836 7242 6626 7472 7136 6534 7090 6626 6836 7362 6984 7362 6984 6498 7382 7472 6984 6498 6836 7120 6900 6676 6984 6836 7344 7382 6626 7136 6740 7344 7120 7242 6984 6900 6300 6984 6676 6900 6498 6300 7242 7246 6498 7246 6300 6740 6900 7382 6984 7120 7246 6984 7246 7136 6534 7136 7242 6626 7090 7242 7382 7136 7090 6900 7472 7242 6984 7382 6924 6676 7472 6626 6534 7362 6900 7472 6498 7090 7362 7344 7136 6984 6836 6626 7382 6534 7120 6498 6300 7472 7120 6498 7242 6498 6626 7120 7090 6900 6924 7120 6984 6900 7242 6740 6900 7472 6924 7090 7344 7246 7120 7362 6300 6676 7246 6498 6626 6740 6626 6740 6300 7472 6924 7242 7344 6534 7382 6498 6984 6676 7344 7090 6984 7136 7242 7382 6534 6740 7362 6984 6626 6900 7120 6300 6534 7246 6534 7242 6924 7382 7472 6740 6498 6900 7246 6626 7136 6836 7344 6498 7120 6676 6626 6900 7472 7246 6836 7382 6900 6534 7246 7362 7382 7242 7246 6626 6300 6498 7362 7472 6300 6740 7382 7136 6300 7136 7344 7120 6836 6900 7120 7382 6676 7136 6498 7472 7136 6924 7242 7136 6740 7362 7472 6740 6836 6740 7090 6626 6924 6740 6900 7090 7472 6676 7246 7120 7472 6924 7242 7472 6900 6740 7382 6300 6534 6498 6924 7090 6900 6740 6676 6900 7090 6676 7362 7382 6900 7246 6300 6836 7242 6924 6984 7090 6676 6498 7242 6300 6900 6300 7242 6676 6984 7344 7242 6534 7090 6676 7472 6626 6900 7090 6924 7136 6900 6740 6626 7136 6900 7472 6984 7090 7472 6534 7136 7382 7246 7242 6676 7120 6676 6900 7382 6498 7136 6984 7136 6740 7344 6498 7136 7090 6740 6626 7472 7120 7344 7362 6534 7120 7242 7120 7246 6498 7120 7090 6300 6984 7246 6626 7136 7246 6676 6626 6498 7242 7472 7246 7472 6498 6626 7246 6534 7136 6676 6740 6300 7362 6626 7382 6900 6924 6900 6534 7246 6498 6740 6984 7120 6900 6300 6900 7090 7344 6498 6900 7120 7136 6626 7472 6740 6534 6626 6984 7120 6740 7472 6836 7090 6626 7246 7362 6300 7382 6836 6534 7242 6836 6498 6676 6498 6836 7090 6626 6836 7382 6836 7382 6498 7090 7362 6984 6498 6740 6900 7382 6984 6676 7242 7362 7246 6300 6740 7362 7382 7472 6498 6984 6924 6626 6836 7136 6626 6534 7344 7090 6984 6900 6626 6900 7120 6300 6626 6836 6300 7246 7344 7090 7344 6900 7344 6626 6984 6924 7242 6300 7472 6740 6900 7382 7120 6676 7136 6924 7090 6676 7136 7472 7136 6900 6740 7344 7136 7344 6676 6900 7090 7382 6984 6900 7120 7362 7242 7246 6836 7120 7472 6626 7120 7472 6984 6676 6534 6300 7472 7344 6534 6900 6740 6836 7120 6626 7472 7136 6300 6900 7246 6740 6534 6300 6836 7090 7472 6836 7344 6900 6984 6836 6300 6900 7472 7120 6534 7246 6924 6676 7246 6740 6836 7120 7136 7120 6626 6900 7242 7136 6900 6984 7136 6498 6534 7362 6836 6676 7120 6498 7090 7242 7246 6626 7246 7382 7344 7242 7472 6900 6498 6900 7136 7120 7382 6676 6924 7090 6740 7090 6900 6924 6626 7382 7090 7362 6300 6984 6498 6924 7090 7246 7472 7344 7472 6836 7090 7344 7246 7382 6534 6626 7246 6498 7344 6676 6300 7090 6626 6676 6498 6534 6676 7136 6740 7090 6300 6676 6984 7136 7362 6924 6836 7242 7090 7136 7242 7120 6498 7120 7246 7120 7242 6740 6900 7090 7344 6900 6300 7242 7090 6498 6900 6836 6924 6984 7136 7472 6676 7090 6984 6534 7362 7382 6836 7382 6498 7246 7090 6984 7242 6676 7382 7344 6626 7246 7472 7242 6626 7136 6836 7362 6626 6836 7090 6836 7246 7362 7090 7382 6836 6740 7242 6924 6534 6984 7136 7120 6740 6984 7136 7090 7136 6626 6900 6676 7362 6300 7246 6676 6984 7136 6740 7362 7246 7344 6740 6300 7472 7090 7344 6300 6626 6534 6900 6300 6498 6626 7090 7120 7472 7120 7090 6740 6534 6626 6676 6984 7120 7382 7344 6676 7242 6984 7120 7472 7344 6534 7242 7472 6534 6300 7120 6900 6498 6740 7136 6900 6498 6984 6534 6924 6300 6534 6984 6836 7246 6676 6740 7136 6984 7382 6626 7246 7136 7120 6498 6984 7344 6498 7344 6924 6676 7136 7362 6534 6900 7136 7090 6676 7344 6626 7120 7242 7246 7344 6984 7120 6900 6836 7382 6836 7344 6300 7246 7362 7382 6900 6300 6626 7246 7362 6924 6626 7242 7362 6740 7344 6984 7120 7246 7472 6900 6676 7472 7382 7090 7120 6534 6300 7472 6900 7090 6740 7344 6676 6300 7472 6900 6498 6984 7242 7090 6498 7242 6676 6534 7382 6900 6534 7472 6924 6836 7362 7242 6984 6924 7090 6676 7382 6984 6900 7090 6534 7136 7362 6498 6534 6626 6836 7120 7242 6836 6924 6676 6498 7120 6984 6498 7344 6300 6984 6836 7246 7382 7472 7382 7362 6300 6984 6900 7472 6924 6900 6740 7120 6626 6984 7362 6836 7382 7120 7472 6626 7120 7090 6924 6676 7382 7136 7362 7382 6836 6534 6984 6300 6534 7344 6740 7344 6836 6498 7120 6498 6900 7090 7136 6740 6300 7136 6300 6498 6534 6626 7344 6900 6676 6900 6300 6534 7344 7246 6836 6740 7136 7472 6924 7136 6534 7344 7246 6300 7472 6498 7344 6676 6984 6900 7382 7246 7472 6676 6626 7120 7246 6676 7120 7246 7120 7382 6676 7242 6836 6626 7344 7362 7246 6300 6836 7382 7120 6900 6676 7242 6498 6300 7472 6534 7472 7120 6626 7362 6534 6300 7246 7344 7382 6740 7090 6740 7472 6498 7382 7242 6924 6300 6498 7090 6900 6300 7382 7472 6836 6924 6300 6676 6984 7242 6984 7362 6924 6836 7382 6900 7362 6900 7362 7344 7242 7090 6836 7382 7136 6836 7242 6740 6498 6900 7120 7344 6924 7120 7246 6836 6924 7382 6534 7344 6740 6836 6534 7136 7090 7472 6984 7382 7362 6836 7246 7382 7120 7344 6984 7090 6676 7382 7120 6740 7120 6984 7246 6740 7382 7120 7472 7120 6836 6984 6740 7362 6534 7120 6498 7362 6740 7362 6498 6626 7136 7344 6626 6740 6836 7362 7136 7382 7090 6984 7120 6740 7242 6740 7120 7242 6676 7246 7344 7382 7136 7090 7242 7382 6676 7472 6900 6300 7344 6534 7382 6626 7246 7120 7090 6984 6740 6836 6534 6900 6836 7382 6534 6740 6534 6498 6900 6498 6534 7382 7362 6984 6626 7382 7090 6740 6836 7362 7472 7242 7344 6300 6626 6984 7472 7136 7362 6740 6924 6534 7382 6924 7090 6900 6300 7382 6740 6534 6300 7090 7120 7362 6534 6900 7472 6836 6534 7344 7246 6300 7472 7242 7472 7136 6924 6900 6924 6836 7090 6626 7362 7136 7362 7136 6900 7242 7472 6924 7472 7120 7246 6836 6924 7136 7120 7136 6924 7136 7362 7120 6924 7120 7090 6626 6676 7136 6924 7136 7472 6498 6924 7472 6740 6984 6626 7242 6300 7090 7472 7090 7120 7246 7120 6900 6740 6984 7344 6626 7362 6534 6984 6676 6740 7120 6534 7090 6498 7242 6984 6900 7136 6626 6984 6498 7472 6498 6924 6676 7472 7362 7242 6498 7472 7382 6836 7382 7472 7242 7344 7242 7472 7120 6924 6534 6676 7136 6498 7246 7090 7382 7090 7246 6924 7120 6900 6924 7242 6740 6498 7472 6924 6498 6900 6836 7242 6676 7382 7242 7246 6900 6498 7090 7242 6676 6984 7090 6924 7136 6740 6984 6300 7472 7136 6626 6836 6900 6300 6534 7362 7090 7242 6676 6626 6740 6984 7242 6836 6984 6900 7472 7090 7242 6676 7242 7246 6498 6740 6836 7472 7136 6534 6740 7090 7246 7472 7242 7120 6626 6900 7382 6626 6498 6900 6498 7242 7382 6534 7090 6984 7382 6984 7382 6924 7246 7120 6300 6534 7472 7120 7362 6676 6534 6836 6984 7344 7090 6676 7246 6498 7120 6626 7246 7136 6534 6740 7382 6836 7090 6924 7242 6984 6836 7090 6300 6676 7246 6676 6740 6900 6740 7472 7246 7136 7242 7344 6836 6300 7090 6924 7472 7120 7382 7120 7382 6676 6534 6300 6836 7362 6836 6300 6676 6984 6676 6498 6740 6984 6836 6300 6676 6740 6984 7090 6626 6498 6836 7090 6984 6900 7382 7344 7090 7246 7242 7472 7246 6498 6984 6900 7242 6740 7246 7242 7120 6740 7472 7382 6740 6300 6984 6498 6836 7246 6534 7136 6740 7246 6836 6300 6498 7472 6676 6626 6740 7472 6626 7344 6984 6676)) nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 7105/6 191/3) (om-make-point 86 28) (list 12 128 256) "(12 128 256)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 6073/6 158/3) (om-make-point 80 28) (list 8 128 256) "(8 128 256)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Sieve 2" (om-load-patch-abs1 "Sieve" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 418 432) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 493 11) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 399 18) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 311 38) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 317 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION 2" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 411 221) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 385 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 273 95) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 357 95) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 7 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 3" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 445 94) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 11 1 18) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (7 0 4 0 nil 0) (8 0 4 1 nil 0) (4 0 5 0 nil 0) (9 0 5 1 nil 0) (5 0 6 0 nil 0) (3 0 7 1 nil 0) (2 0 8 1 nil 0) (1 0 9 1 nil 0))) 6.14 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 6697/6 341/3) nil (list (list 128 136 137 140 144 146 152 155 160 164 168 173 176 182 184 188 191 192 200 208 209 212 216 218 224 227 232 236 240 245 248 254 256)) nil "Sieve"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "the list" "LIST" nil))) (om-make-point 1118 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 1162 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 1217 238) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PTRN-SMOOTH" (quote morph::ptrn-smooth) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" (list (quote morph::a) (quote morph::b) (quote morph::b) (quote morph::b) (quote morph::c) (quote morph::c) (quote morph::c) (quote morph::d) (quote morph::a) (quote morph::a) (quote morph::b) (quote morph::b) (quote morph::c) (quote morph::c) (quote morph::d) (quote morph::e) (quote morph::d) (quote morph::d) (quote morph::d) (quote morph::b) (quote morph::b))))) (om-make-point 1157 347) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 1 nil 0) (3 0 1 2 nil 0) (32 0 3 0 nil 0) (2 0 3 1 nil 0) (9 0 6 2 nil 0) (23 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (18 1 14 0 nil 0) (13 0 14 1 nil 0) (18 1 15 0 nil 0) (12 0 15 1 nil 0) (18 1 16 0 nil 0) (11 0 16 1 nil 0) (18 1 17 0 nil 0) (10 0 17 1 nil 0) (35 0 18 0 nil 0) (21 0 20 0 nil 0) (19 0 20 1 nil 0) (4 0 20 2 nil 0) (20 0 22 0 nil 0) (18 0 23 0 nil 0) (36 0 25 0 nil 0) (24 0 25 1 nil 0) (37 0 27 0 nil 0) (29 0 27 2 nil 0) (27 0 28 0 nil 0) (30 0 32 0 nil 0) (31 0 32 1 nil 0) (36 0 32 2 nil 0) (32 0 33 1 nil 0) (17 0 36 0 nil 0) (16 0 36 1 nil 0) (15 0 36 2 nil 0) (14 0 36 3 nil 0) (26 0 37 1 nil 0) (25 0 37 2 nil 0) (40 0 41 0 nil 0) (39 0 41 1 nil 0) (48 0 41 2 nil 0) (5 0 44 0 nil 0) (43 0 44 1 nil 0) (42 0 44 2 nil 0) (44 0 45 0 nil 0) (45 0 46 0 nil 0) (47 0 46 1 nil 0) (46 0 48 0 nil 0))) nil 6.14))
