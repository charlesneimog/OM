; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 138 620) (om-make-point 494 23) (om-make-point 608 793) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Grain-buffer" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER 2" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 380 663) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 70 22) (quote "Press \"V\"") "" (om-make-point 385 619) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 491 305) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 90 24) (quote "Position file") "" (om-make-point 466 276) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FREEVERB" (quote omsc::freeverb) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "MIX" 0.3) (om-load-inputfun (quote input-funbox) "" "ROOM" 0.9) (om-load-inputfun (quote input-funbox) "" "DAMP" 0.5) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 317 386) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_KR" (quote omsc::dust_kr) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" 100) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 52 200) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Samples" (om-load-patch-abs1 "Samples" (quote ((let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 283 196) (om-make-point 22 30) -1 "-1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 106 20) (om-make-point 528 30) "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav" "\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 43 212) (om-make-point 17 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "channel number") "" (om-make-point 30 163) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BUFFER-READ 2" (quote omsc::buffer-read) (quote ((om-load-inputfun (quote input-funbox) "" "FILENAME" nil))) (om-make-point 181 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 193 420) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PLAYBUF" (quote omsc::playbuf) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" 1) (om-load-inputfun (quote input-funbox) "" "BUFNUM" "k") (om-load-inputfun (quote input-funbox) "" "RATE" 1) (om-load-inputfun (quote input-funbox) "" "TRIGGER" 1) (om-load-inputfun (quote input-funbox) "" "STARTPOS" 0) (om-load-inputfun (quote input-funbox) "" "LOOP" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 203 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 4 0 nil 0) (6 0 5 0 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0) (0 0 6 5 nil 0))) 6.120003 nil "" (om-make-point 88 286) (om-make-point 673 535)) (quote nil) (om-make-point 310 110) nil (list (list "PlayBuf.ar(" 1 "," (list "Buffer.read(s," "\"/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/a11wlk01.wav\"" ");" #\Return #\Newline) "," 1 "," 1 "," 0 "," -1 "," 2 ")")) nil "Samples"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 535 75) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 432 75) (om-make-point 31 30) 0.5 ".5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 250 41) (om-make-point 38 30) 1.1 "1.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 139 40) (om-make-point 45 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-Y" (quote omsc::mouse-y) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 1) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 100) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 481 130) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 0.0) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 10) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 172 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GRAINBUF" (quote omsc::grainbuf) (quote ((om-load-inputfun (quote input-funbox) "" "NUMCHANNELS" (list 1)) (om-load-inputfun (quote input-funbox) "" "TRIGGER" (list 0)) (om-load-inputfun (quote input-funbox) "" "DUR" (list 1)) (om-load-inputfun (quote input-funbox) "" "SNDBUF" (list 1)) (om-load-inputfun (quote input-funbox) "" "RATE" (list 1)) (om-load-inputfun (quote input-funbox) "" "POS" 0.5) (om-load-inputfun (quote input-funbox) "" "INTERP" (list 2)) (om-load-inputfun (quote input-funbox) "" "PAN" (list 0)) (om-load-inputfun (quote input-funbox) "" "ENVBUFNUM" (list -1)) (om-load-inputfun (quote input-funbox) "" "MAXGRAINS" 2048) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 303 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 206 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 305 576) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 148 442) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (13 0 4 0 nil 0) (8 0 11 0 nil 0) (7 0 11 1 nil 0) (10 0 12 0 nil 0) (9 0 12 1 nil 0) (5 0 13 1 nil 0) (12 0 13 2 nil 0) (6 0 13 3 nil 0) (11 0 13 4 nil 0) (2 0 13 5 nil 0) (16 0 14 0 nil 0) (14 0 15 0 nil 0) (4 0 16 0 nil 0))) nil 6.120003))
