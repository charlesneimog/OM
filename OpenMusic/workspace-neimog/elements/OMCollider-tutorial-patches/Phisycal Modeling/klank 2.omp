; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 219 200) (om-make-point 529 281) (om-make-point 984 742) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "klank 2" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 469 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 285 79) (quote "$Klank is a bank of fixed frequency resonators.") "" (om-make-point 592 436) nil (om-make-color 1.0 0.5019608 0.0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MODAL_RATIOS" (quote omsc::modal_ratios) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "LISTA" (list 314 836 1519 2360 3341 4462 5696) (list (list "Chalandi_plates" (list (quote list) 62 107 360 460 863)) (list "tibetan_bowl" (list (quote list) 221 614 1145 1804 2577 3456 4419)) (list "tibetan_bowl2" (list (quote list) 314 836 1519 2360 3341 4462 5696)) (list "tibetan_bowl3" (list (quote list) 528 1460 2704 4122 5694)) (list "small_handbell" (list (quote list) 1312 1314.5 2353.3 2362.9 3306.5 3309.4 3923.8 3928.2 4966.6 4993.7 5994.4 6003.0 6598.9 6619.7 7971.7 7753.2 8413.1 8453.3 9292.4 9305.2 9602.3 9912.4)) (list "spinel_sphere" (list (quote list) 977.25 1003.16 1390.13 1414.93 1432.84 1465.34 1748.48 1834.2 1919.9 1933.64 1987.2 2096.48 2107.1 2202.08 2238.4 2280.1 2290.53 2400.88 2435.85 2507.8 2546.3 2608.55 2652.35 2691.7 2708.0)))))) (om-make-point 610 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 831 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" 0.1) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 738 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 695 87) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 1) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 20) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 165 40) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DUST_AR" (quote omsc::dust_ar) (quote ((om-load-inputfun (quote input-funbox) "" "DENSITY" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 313 64) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 333 38) (quote "frequencies:  amplitudes:   decay times:$$") "" (om-make-point 602 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 18 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 4" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 843 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 734 254) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 263 433) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 346 520) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ABC-SUM" (quote omsc::abc-sum) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil) (om-load-inputfun (quote input-funbox) "" "C" nil))) (om-make-point 740 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 645 258) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "KLANK" (quote omsc::klank) (quote ((om-load-inputfun (quote input-funbox) "" "ARRAYREF" (list 0)) (om-load-inputfun (quote input-funbox) "" "INPUT" (list 0)) (om-load-inputfun (quote input-funbox) "" "FREQSCALE" 1) (om-load-inputfun (quote input-funbox) "" "FREQOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "" "DECAYSCALE" 1))) (om-make-point 391 163) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT 2" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 247 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 131 175) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 96 95) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (5 0 3 1 nil 0) (5 0 4 1 nil 0) (2 0 5 0 nil 0) (6 0 7 0 nil 0) (3 0 9 0 nil 0) (4 0 10 0 nil 0) (16 0 11 0 nil 0) (11 0 12 0 nil 0) (14 0 13 0 nil 0) (10 0 13 1 nil 0) (9 0 13 2 nil 0) (2 0 14 0 nil 0) (13 0 15 0 nil 0) (7 0 15 1 nil 0) (17 0 16 0 nil 0) (15 0 16 1 nil 0) (18 0 17 0 nil 0))) nil 6.120003))
