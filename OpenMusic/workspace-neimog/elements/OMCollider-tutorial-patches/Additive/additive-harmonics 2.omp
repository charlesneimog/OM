; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 93 38) (om-make-point 762 217) (om-make-point 778 812) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "additive-harmonics 2" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 549 703) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 100) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 2000) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 11 140) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 93 24) (quote "Amplitudes") "" (om-make-point 475 36) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 93 24) (quote "Partials") "" (om-make-point 136 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 621 268) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 55 25) (quote "Fund") "" (om-make-point 12 107) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 676 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 547 113) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 464 106) (om-make-point 35 30) 0.01 "0.01" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 558 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 459 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B 2" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 170 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 180 83) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 244 83) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 133 84) (om-make-point 28 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 147 132) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 42 24) (quote "LFO") "" (om-make-point 362 309) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 318 374) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 10) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 6) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 375 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 159 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 608 456) (om-make-point 56 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1/20) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 577 371) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 532 592) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 454 648) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 1))) (om-make-point 591 526) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((23 0 0 0 nil 0) (9 0 4 0 nil 0) (15 0 6 0 nil 0) (10 0 9 0 nil 0) (6 0 9 1 nil 0) (8 0 10 0 nil 0) (7 0 10 1 nil 0) (1 0 11 0 nil 0) (19 0 11 1 nil 0) (14 0 15 0 nil 0) (12 0 15 1 nil 0) (13 0 15 2 nil 0) (11 0 17 0 nil 0) (18 0 17 1 nil 0) (15 0 19 0 nil 0) (21 0 20 0 nil 0) (17 0 21 0 nil 0) (4 0 21 2 nil 0) (24 0 22 0 nil 0) (22 0 23 0 nil 0) (20 0 24 0 nil 0))) nil 6.120003))
