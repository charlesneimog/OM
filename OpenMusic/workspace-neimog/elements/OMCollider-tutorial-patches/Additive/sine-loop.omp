; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 10 10) (om-make-point 870 245) (om-make-point 840 810) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "sine-loop" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 367 672) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFDNOISE3_KR" (quote omsc::lfdnoise3_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 1) (om-load-inputfun (quote input-funbox) "" "MUL" (list 1)) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 96 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 86 23) (quote "Autopan") "" (om-make-point 95 259) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 198 584) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 102 36) (quote "Durata inviluppo") "" (om-make-point 707 93) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 734 143) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENV-SINE" (quote omsc::env-sine) (quote ((om-load-inputfun (quote input-funbox) "" "DUR" 0.5) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.5) (om-load-inputfun (quote input-funbox) "" "CURVE" "0.5"))) (om-make-point 737 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 554 261) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENVGEN" (quote omsc::envgen) (quote ((om-load-inputfun (quote input-funbox) "" "ENVELOPE" nil) (om-load-inputfun (quote input-funbox) "" "GATE" 0.1) (om-load-inputfun (quote input-funbox) "" "LEVELSCALE" 1) (om-load-inputfun (quote input-funbox) "" "LEVELBIAS" 0) (om-load-inputfun (quote input-funbox) "" "TIMESCALE" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 653 219) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 102 36) (quote "delay") "" (om-make-point 525 469) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 532 508) (om-make-point 26 28) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 0.5) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 384 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 220 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PAN2_AR" (quote omsc::pan2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "POS" 0) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.1))) (om-make-point 222 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 2" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 22000))) (om-make-point 259 37) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-LOOP" (quote omsc::do-loop) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "ITER" nil) (om-load-inputfun (quote input-funbox) "" "WAIT" 4))) (om-make-point 327 542) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 395 504) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 85 41) (quote "random frequency") "" (om-make-point 168 27) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 8) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 25) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 527 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 399 83) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 36) (quote "iterazioni") "" (om-make-point 391 465) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (15 0 3 0 nil 0) (5 0 6 0 nil 0) (11 0 7 0 nil 0) (8 0 7 1 nil 0) (6 0 8 0 nil 0) (19 0 11 0 nil 0) (13 0 12 0 nil 0) (7 0 13 0 nil 0) (1 0 13 1 nil 0) (12 0 15 0 nil 0) (16 0 15 1 nil 0) (10 0 15 2 nil 0) (14 0 19 0 nil 0) (18 0 19 1 nil 0))) nil 6.120003))
