; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 10 10) (om-make-point 689 173) (om-make-point 1122 820) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "rotate-sine-loop" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 504 691) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_KR" (quote omsc::sinosc_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 0.1) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 692 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 6" (om-make-point 106 28) (quote "Max frequency") "" (om-make-point 708 29) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 7" (quote list) (quote nil) (om-make-point 734 64) (om-make-point 48 30) 3000 "3000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sine 2" (om-load-patch-abs1 "sine" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 46) (om-make-point 48 30) 2000 "2000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 315 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 8" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 582 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 7" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 515 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 6" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 449 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 5" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 391 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 271 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 224 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 315 533) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 4" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 321 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 3" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 254 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 2" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 188 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 280 619) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 276 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 3) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 25) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 460 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 41) (quote "random frequency") "" (om-make-point 39 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 130 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 249 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 5 0 nil 0) (1 0 5 1 nil 0) (7 0 6 0 nil 0) (16 0 7 0 nil 0) (11 0 7 1 nil 0) (10 0 7 2 nil 0) (9 0 7 3 nil 0) (5 0 7 4 nil 0) (4 0 7 5 nil 0) (3 0 7 6 nil 0) (2 0 7 7 nil 0) (17 0 8 0 nil 0) (0 0 9 0 nil 0) (1 0 9 1 nil 0) (0 0 10 0 nil 0) (1 0 10 1 nil 0) (0 0 11 0 nil 0) (1 0 11 1 nil 0) (8 0 12 0 nil 0) (6 0 13 0 nil 0) (14 0 13 1 nil 0) (0 0 16 0 nil 0) (1 0 16 1 nil 0) (13 0 17 0 nil 0))) 6.120003 nil "" (om-make-point 200 200) (om-make-point 724 546)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 671 92) nil (list (list "Mix.new(" (list "SinOsc.ar(" (list (list "[" "(Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 )), (Rand( 2000 , 3000 ))" "]") "+" (list "SinOsc.ar(" 3 "," 0 "," 25 "," 0 ")")) "," 0 "," 0.1 "," 0 ")") ")")) nil "sine"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B 2" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 706 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 982 110) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENVGEN 2" (quote omsc::envgen) (quote ((om-load-inputfun (quote input-funbox) "" "ENVELOPE" nil) (om-load-inputfun (quote input-funbox) "" "GATE" 0.1) (om-load-inputfun (quote input-funbox) "" "LEVELSCALE" 1) (om-load-inputfun (quote input-funbox) "" "LEVELBIAS" 0) (om-load-inputfun (quote input-funbox) "" "TIMESCALE" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 815 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENV-SINE 2" (quote omsc::env-sine) (quote ((om-load-inputfun (quote input-funbox) "" "DUR" 0.5) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.5) (om-load-inputfun (quote input-funbox) "" "CURVE" "0.5"))) (om-make-point 965 155) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 102 36) (quote "Durata inviluppo") "" (om-make-point 984 62) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ROTATE2_AR" (quote omsc::rotate2_ar) (quote ((om-load-inputfun (quote input-funbox) "" "X" 0) (om-load-inputfun (quote input-funbox) "" "Y" 0) (om-load-inputfun (quote input-funbox) "" "POS" 1))) (om-make-point 434 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 106 28) (quote "Max frequency") "" (om-make-point 157 18) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 183 53) (om-make-point 48 30) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sine" (om-load-patch-abs1 "sine" (quote ((let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 95 46) (om-make-point 26 29) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 315 42) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 8" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 582 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 7" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 515 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 6" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 449 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 5" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 391 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 271 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 224 241) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 315 533) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 4" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 321 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 3" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 254 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND 2" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 188 126) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 280 619) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 276 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 10) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 25) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 460 280) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 85 41) (quote "random frequency") "" (om-make-point 39 117) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RAND" (quote omsc::rand) (quote ((om-load-inputfun (quote input-funbox) "" "LO" 40) (om-load-inputfun (quote input-funbox) "" "HI" 12000))) (om-make-point 130 127) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 249 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 2 0 nil 0) (1 0 2 1 nil 0) (0 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 4 0 nil 0) (1 0 4 1 nil 0) (0 0 5 0 nil 0) (1 0 5 1 nil 0) (7 0 6 0 nil 0) (16 0 7 0 nil 0) (11 0 7 1 nil 0) (10 0 7 2 nil 0) (9 0 7 3 nil 0) (5 0 7 4 nil 0) (4 0 7 5 nil 0) (3 0 7 6 nil 0) (2 0 7 7 nil 0) (17 0 8 0 nil 0) (0 0 9 0 nil 0) (1 0 9 1 nil 0) (0 0 10 0 nil 0) (1 0 10 1 nil 0) (0 0 11 0 nil 0) (1 0 11 1 nil 0) (8 0 12 0 nil 0) (6 0 13 0 nil 0) (14 0 13 1 nil 0) (0 0 16 0 nil 0) (1 0 16 1 nil 0) (13 0 17 0 nil 0))) 6.120003 nil "" (om-make-point 627 192) (om-make-point 701 708)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 120 81) nil (list (list "Mix.new(" (list "SinOsc.ar(" (list (list "[" "(Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 )), (Rand( 60 , 1000 ))" "]") "+" (list "SinOsc.ar(" 10 "," 0 "," 25 "," 0 ")")) "," 0 "," 0.1 "," 0 ")") ")")) nil "sine"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 86 23) (quote "Autopan") "" (om-make-point 695 329) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 358 614) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 5" (om-make-point 102 36) (quote "Durata inviluppo") "" (om-make-point 375 51) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 388 100) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENV-SINE" (quote omsc::env-sine) (quote ((om-load-inputfun (quote input-funbox) "" "DUR" 0.5) (om-load-inputfun (quote input-funbox) "" "LEVEL" 0.5) (om-load-inputfun (quote input-funbox) "" "CURVE" "0.5"))) (om-make-point 371 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A*B" (quote omsc::a*b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 154 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ENVGEN" (quote omsc::envgen) (quote ((om-load-inputfun (quote input-funbox) "" "ENVELOPE" nil) (om-load-inputfun (quote input-funbox) "" "GATE" 0.1) (om-load-inputfun (quote input-funbox) "" "LEVELSCALE" 1) (om-load-inputfun (quote input-funbox) "" "LEVELBIAS" 0) (om-load-inputfun (quote input-funbox) "" "TIMESCALE" 1) (om-load-inputfun (quote input-funbox) "" "DONEACTION" 2))) (om-make-point 254 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 4" (om-make-point 102 36) (quote "delay") "" (om-make-point 685 499) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 692 538) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 380 458) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DO-LOOP" (quote omsc::do-loop) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "ITER" nil) (om-load-inputfun (quote input-funbox) "" "WAIT" 4))) (om-make-point 487 572) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 555 534) (om-make-point 38 28) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 102 36) (quote "iterazioni") "" (om-make-point 551 495) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((15 0 0 0 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0) (7 0 5 1 nil 0) (8 0 7 0 nil 0) (6 0 8 0 nil 0) (19 0 10 0 nil 0) (5 0 10 1 nil 0) (1 0 10 2 nil 0) (12 0 13 0 nil 0) (24 0 15 0 nil 0) (17 0 18 0 nil 0) (13 0 19 0 nil 0) (20 0 19 1 nil 0) (18 0 20 0 nil 0) (10 0 23 0 nil 0) (23 0 24 0 nil 0) (25 0 24 1 nil 0) (22 0 24 2 nil 0))) nil 6.120003))
