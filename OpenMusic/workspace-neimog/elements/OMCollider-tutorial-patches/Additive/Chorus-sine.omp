; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 172 10) (om-make-point 426 45) (om-make-point 1121 896) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Chorus-sine" (quote ((let ((box (om-load-boxcall (quote genfun) "BLIP 2" (quote omsc::blip) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "NUMHARM" 20) (om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 605 298) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BLIP" (quote omsc::blip) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" (list 440)) (om-load-inputfun (quote input-funbox) "" "NUMHARM" 20) (om-load-inputfun (quote input-funbox) "" "MUL" 0.1) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 424 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 709 46) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 7" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 678 80) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MOUSE-X" (quote omsc::mouse-x) (quote ((om-load-inputfun (quote input-funbox) "" "MINVAL" 60) (om-load-inputfun (quote input-funbox) "" "MAXVAL" 2000) (om-load-inputfun (quote input-funbox) "" "WARP" 2) (om-load-inputfun (quote input-funbox) "" "LAG" 0.2))) (om-make-point 19 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Out" (om-load-patch-abs1 "Out" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 176 312) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 248 20) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 18) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 165 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 192 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 158 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (3 0 4 0 nil 0) (4 0 5 0 nil 0))) 6.120003 nil "" (om-make-point 505 399) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 454 520) nil (list (list "{" (list "[" "(Mix.new( (Blip.ar( ([ (MouseX.kr( 60 , 2000 , 2 , 0.2 )), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 0.1), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 0.3), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 0.5) ]) , 20 , 0.1 , (0) )) )), (Mix.new( (Blip.ar( ([ ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 1), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 1.5), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 2), ((MouseX.kr( 60 , 2000 , 2 , 0.2 )) + 2.5) ]) , 20 , 0.1 , (0) )) ))" "]") "}.play;")) nil "Out"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW 2" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 574 444) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 12" (quote list) (quote nil) (om-make-point 1016 39) (om-make-point 38 30) 2.5 "2.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 11" (quote list) (quote nil) (om-make-point 896 40) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 10" (quote list) (quote nil) (om-make-point 769 43) (om-make-point 38 30) 1.5 "1.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 6" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 991 82) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 5" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 877 85) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 4" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 764 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 3" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 695 228) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 8" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 808 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 3" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 426 69) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B 2" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 312 72) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A+B" (quote omsc::a+b) (quote ((om-load-inputfun (quote input-funbox) "" "A" nil) (om-load-inputfun (quote input-funbox) "" "B" nil))) (om-make-point 176 62) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 404 440) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 327 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 7" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 243 195) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 6" (quote list) (quote nil) (om-make-point 471 37) (om-make-point 38 30) 0.5 "0.5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 367 33) (om-make-point 38 30) 0.3 "0.3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 266 33) (om-make-point 38 30) 0.1 "0.1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 459 776) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 486 643) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((13 0 0 0 nil 0) (19 0 1 0 nil 0) (4 0 3 0 nil 0) (2 0 3 1 nil 0) (18 0 5 0 nil 0) (6 0 5 1 nil 0) (0 0 6 0 nil 0) (4 0 10 0 nil 0) (7 0 10 1 nil 0) (4 0 11 0 nil 0) (8 0 11 1 nil 0) (4 0 12 0 nil 0) (9 0 12 1 nil 0) (14 0 13 0 nil 0) (3 0 14 0 nil 0) (12 0 14 1 nil 0) (11 0 14 2 nil 0) (10 0 14 3 nil 0) (4 0 15 0 nil 0) (21 0 15 1 nil 0) (4 0 16 0 nil 0) (22 0 16 1 nil 0) (4 0 17 0 nil 0) (23 0 17 1 nil 0) (1 0 18 0 nil 0) (20 0 19 0 nil 0) (4 0 20 0 nil 0) (17 0 20 1 nil 0) (16 0 20 2 nil 0) (15 0 20 3 nil 0) (25 0 24 0 nil 0) (5 0 25 0 nil 0))) nil 6.120003))
