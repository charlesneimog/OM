; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 173 145) (om-make-point 808 425) (om-make-point 514 616) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "Binary" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 247 455) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Look to binary-menu (input 1)") "" (om-make-point 342 158) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 87 394) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 44 80) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 52 142) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 83 284) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 144 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR 2" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 2) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 356 54) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 198 67) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BINARY" (quote omsc::binary) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "MODE" (quote omsc::ring3) (list (list "+" (quote (quote +))) (list "-" (quote (quote -))) (list "*" (quote (quote *))) (list "/" (quote (quote /))) (list "%" (quote (quote omsc::%))) (list "**" (quote (quote **))) (list "pow" (quote (quote omsc::pow))) (list "<" (quote (quote <))) (list "<=" (quote (quote <=))) (list ">" (quote (quote >))) (list ">=" (quote (quote >=))) (list "==" (quote (quote omsc::==))) (list "!=" (quote (quote omsc::!=))) (list "<!" (quote (quote omsc::<!))) (list "min" (quote (quote min))) (list "max" (quote (quote max))) (list "round" (quote (quote round))) (list "trunc" (quote (quote omsc::trunc))) (list "hypot" (quote (quote omsc::hypot))) (list "hypotApx" (quote (quote omsc::hypotapx))) (list "atan2" (quote (quote omsc::atan2))) (list "ring1" (quote (quote omsc::ring1))) (list "ring2" (quote (quote omsc::ring2))) (list "ring3" (quote (quote omsc::ring3))) (list "ring4" (quote (quote omsc::ring4))) (list "sumsqr" (quote (quote omsc::sumsqr))) (list "difsqr" (quote (quote omsc::difsqr))) (list "sqrsum" (quote (quote omsc::sqrsum))) (list "sqrdif" (quote (quote omsc::sqrdif))) (list "absdif" (quote (quote omsc::absdif))) (list "thresh" (quote (quote omsc::thresh))) (list "amclip" (quote (quote omsc::amclip))) (list "scaleneg" (quote (quote omsc::scaleneg))) (list "clip2" (quote (quote omsc::clip2))) (list "wrap2" (quote (quote omsc::wrap2))) (list "fold2" (quote (quote omsc::fold2))) (list "excess" (quote (quote omsc::excess))))) (om-load-inputfun (quote input-funbox) "" "A" 0) (om-load-inputfun (quote input-funbox) "" "B" 0))) (om-make-point 270 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (5 0 2 0 nil 0) (3 0 4 0 nil 0) (6 0 5 0 nil 0) (4 0 6 0 nil 0) (9 0 6 1 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0))) nil 6.120003))
