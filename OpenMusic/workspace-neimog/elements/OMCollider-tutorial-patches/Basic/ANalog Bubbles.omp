; OM File Header - Saved 2020/11/18 23:49:56
; (6.120003 :patc (om-make-point 209 84) (om-make-point 570 173) (om-make-point 865 710) "" 183 0 nil "2020/11/18 23:49:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCollider")))(setf *om-current-persistent* (om-load-patch1 "ANalog Bubbles" (quote ((let ((box (om-load-boxcall (quote genfun) "SYNTHESIZER" (quote omsc::synthesizer) (quote ((om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 460 578) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GUI" (quote omsc::gui) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 345 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "Analog Bubbles") "" (om-make-point 728 116) nil (om-make-color 0 0 0) (om-make-font "Verdana" 21 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "UNARY" (quote omsc::unary) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "" "IN" (quote omsc::midicps) (list (list "neg" (quote (quote omsc::neg))) (list "reciprocal" (quote (quote omsc::reciprocal))) (list "abs" (quote (quote abs))) (list "floor" (quote (quote floor))) (list "ceil" (quote (quote omsc::ceil))) (list "frac" (quote (quote omsc::frac))) (list "sign" (quote (quote omsc::sign))) (list "squared" (quote (quote omsc::squared))) (list "cubed" (quote (quote omsc::cubed))) (list "sqrt" (quote (quote sqrt))) (list "exp" (quote (quote exp))) (list "midicps" (quote (quote omsc::midicps))) (list "cpsmidi" (quote (quote omsc::cpsmidi))) (list "midiratio" (quote (quote omsc::midiratio))) (list "ratiomidi" (quote (quote omsc::ratiomidi))) (list "dbamp" (quote (quote omsc::dbamp))) (list "ampdb" (quote (quote omsc::ampdb))) (list "octcps" (quote (quote omsc::octcps))) (list "cpsoct" (quote (quote omsc::cpsoct))) (list "log" (quote (quote log))) (list "log2" (quote (quote omsc::log2))) (list "log10" (quote (quote omsc::log10))) (list "sin" (quote (quote sin))) (list "cos" (quote (quote cos))) (list "tan" (quote (quote tan))) (list "asin" (quote (quote asin))) (list "acos" (quote (quote acos))) (list "atan" (quote (quote atan))) (list "sinh" (quote (quote sinh))) (list "cosh" (quote (quote cosh))) (list "tanh" (quote (quote tanh))) (list "distort" (quote (quote omsc::distort))) (list "softclip" (quote (quote omsc::softclip))) (list "isPositive" (quote (quote omsc::ispositive))) (list "isNegative" (quote (quote omsc::isnegative))) (list "isStrictlyPositive" (quote (quote omsc::isstrictlypositive))))) (om-load-inputfun (quote input-funbox) "" "MODE" 0))) (om-make-point 615 179) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 634 62) (om-make-point 51 28) (list 8 7.23) "(8 7.23)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "COMBN" (quote omsc::combn) (quote ((om-load-inputfun (quote input-funbox) "" "IN" 0) (om-load-inputfun (quote input-funbox) "" "MAXDELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DELAYTIME" 0.2) (om-load-inputfun (quote input-funbox) "" "DECAYTIME" 1) (om-load-inputfun (quote input-funbox) "" "MUL" 1) (om-load-inputfun (quote input-funbox) "" "ADD" 0))) (om-make-point 589 331) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFSAW_KR 2" (quote omsc::lfsaw_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 8) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 3) (om-load-inputfun (quote input-funbox) "" "ADD" 80))) (om-make-point 437 83) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LFSAW_KR" (quote omsc::lfsaw_kr) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 0.4) (om-load-inputfun (quote input-funbox) "" "PHASE" (list 0)) (om-load-inputfun (quote input-funbox) "" "MUL" 24) (om-load-inputfun (quote input-funbox) "" "ADD" (list 0)))) (om-make-point 473 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FUNCTION-PLAY" (quote omsc::function-play) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 234 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 94 142) (om-make-point 35 28) (list 0 1) "(0 1)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC 2" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 129 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUT" (quote omsc::out) (quote ((om-load-inputfun (quote input-funbox) "" "BUS" 0) (om-load-inputfun (quote input-funbox) "" "IN" 0))) (om-make-point 232 310) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MIX-NEW" (quote omsc::mix-new) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 273 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SINOSC_AR" (quote omsc::sinosc_ar) (quote ((om-load-inputfun (quote input-funbox) "" "FREQ" 440) (om-load-inputfun (quote input-funbox) "" "PHASE" 0) (om-load-inputfun (quote input-funbox) "" "MUL" 0.04) (om-load-inputfun (quote input-funbox) "" "ADD" 0.04))) (om-make-point 516 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARRAY-SC" (quote omsc::array-sc) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil))) (om-make-point 526 65) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (8 0 1 0 nil 0) (7 0 3 1 nil 0) (13 0 5 0 nil 0) (14 0 6 0 nil 0) (6 0 7 3 nil 0) (11 0 8 0 nil 0) (9 0 10 0 nil 0) (10 0 11 0 nil 0) (12 0 11 1 nil 0) (5 0 12 0 nil 0) (3 0 13 0 nil 0) (4 0 14 0 nil 0))) nil 6.120003))
