; OM File Header - Saved 2020/11/22 23:23:15
; (6.050102 :patc (om-make-point 985 499) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :picture) "../../resources/pict/escala cromatica"))
(in-package :om)(load-lib-for (quote ("Pixels")))(setf *om-current-persistent* (om-load-patch1 "algoritmo de medicao da temperatura de uma cor para conversao a sons 2" (quote ((om-load-boxcomment "comment" (om-make-point 267 70) (quote "Para a conversão de \"temperaturas\" a parâmetros sonoros/musicais") "" (om-make-point 216 125) nil (om-make-color 0 0 0) (om-make-font "Verdana" 14.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 313 93) (quote "Onde: $R = vermelho, $G = verde,$B = azul$e T = temperatura") "" (om-make-point 17 473) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 327 50) (quote "(R/2 + G/2) - B = T") "" (om-make-point 25 422) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 322 72) (quote "A \"temperatura\" aqui é concebida como um jogo de forças entre o amarelo, que é mistura de vermelho e verde (e representa o calor) e o azul (que representa o frio), conforme a equação a seguir:") "" (om-make-point 18 348) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 231 72) (quote "(Patch por: Yago Franco e Luiz E. Castelões, inspirado em Kandinsky, Comus Nov 2011)") "" (om-make-point 216 181) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 239 127) (quote "Conversor de \"temperatura\"$de cores a partir de RGB") "" (om-make-point 217 1) nil (om-make-color 0 0 0) (om-make-font "Verdana" 24.0 :family "Verdana" :style (quote (:bold)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "medidor de \"temperatura\" da cor" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 19 258) (om-make-point 276 59) nil nil (list (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 262 248) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 237 287) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 176 231) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 185 158) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 315 286) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 308 173) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 135 165) nil nil nil nil 1) (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 215 49) nil nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 82 37) "" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 34 40) "" nil nil nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 354 381) nil nil nil nil 3) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 44 225) nil nil nil nil 1) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 429 369) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 66 440) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (0 0 1 1 nil 0) (6 0 2 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (1 0 4 0 nil 0) (5 0 4 1 nil 0) (7 0 5 0 nil 0) (7 0 6 0 nil 0) (8 0 7 0 nil 0) (4 0 10 0 nil 0) (9 0 11 0 nil 0) (10 1 12 0 nil 0) (11 0 13 0 nil 0) (10 0 13 1 nil 0))) 1 "medidor de \"temperatura\" da cor" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 32 155) (om-make-point 28 30) 10 "10" nil) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "ORIG-N" "ORIG-N" nil) (om-load-inputfun (quote input-funbox) "ORIG-LIST" "ORIG-LIST" nil))) (om-make-point 85 201) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GET-RGB" (quote get-rgb) (quote ((om-load-inputfun (quote input-funbox) "a picture object" "SELF" nil))) (om-make-point 92 124) nil nil nil nil 1) (om-load-editor-box1 "PICTURE" (quote picture) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "main background: external picture pathname or RGB array" "background" nil) (om-load-inputfun (quote input-funbox) "list of vectorial graphics" "graphics" nil))) (om-make-point 55 1) (om-make-point 158 116) (make-instance (quote picture) :name "escala cromatica" :source (quote user) :pict-pathname (restore-pict-path (restore-path nil)) :thepict (om-get-picture "escala cromatica" (quote user)) :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs nil) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil))) (quote ((8 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (10 0 9 0 nil 0))) nil 6.050102))
