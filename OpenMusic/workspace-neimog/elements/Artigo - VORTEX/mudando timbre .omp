; OM File Header - Saved 2020/07/19 11:07:57
; (6.16 :patc (om-make-point 519.88086 190) (om-make-point -8 -8) (om-make-point 1366 505) "" 183 0 "2020/04/26 20:08:37" "2020/04/27 13:08:07")
; End File Header
; External resources 
; (list (list (quote :sdif) "#P\"C:../../out-files/ckn-test.sdif\"" "#P\"C:../../out-files/Fl-mul-C#6+-C5+-D#5-G5-mf - TROCA3 DE TIMBRE.sdif\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "mudando timbre " (quote ((let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 533 478) (om-make-point 423 130) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :osc-scoreplayer) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 28 8)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "ckn-test.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 167 526) (om-make-point 214 83) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host "C" :name "ckn-test" :type "sdif")))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 437 277) (om-make-point 94 28) "ckn-test2.txt" "\"ckn-test2.txt\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" ""))) (om-make-point 421 307) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPF objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 24 257) (om-make-point 192 109) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (append (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 1.0E-4)) (quote (0.0 1.0E-4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2846.2727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (2850.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (2850.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (2849.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (2848.2923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (2846.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (2846.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (2846.5813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (2855.3704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (2864.2818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (2849.4085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (2851.1177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (2852.2774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (2853.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (2854.4148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (2855.7156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (2856.7395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (2857.2137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (2857.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (2857.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (2857.5406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (2858.015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (2858.578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (2859.1758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (2859.7032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (2860.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (2859.6658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (2858.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2857.0945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2855.2425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2853.4639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2852.2635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2851.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2851.3216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2851.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2851.285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2850.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2850.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2850.0032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2849.5103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2849.101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2848.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2849.0525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2849.1529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2849.1265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2848.8206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2848.2283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2847.8675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2847.9834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2848.6597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2849.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2850.8194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2851.283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2851.4129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2851.3926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2851.4029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2851.2937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2850.8728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2850.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2849.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2848.024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2846.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2846.0408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2845.8328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2846.0689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2846.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2846.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2845.9536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2845.6614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2845.6004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2845.8626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2846.365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2846.7854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2846.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2846.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2846.5689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2846.307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2846.2346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2846.2517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2846.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2846.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2846.4395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2846.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2846.9978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2847.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2848.0794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2848.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2848.8938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2849.043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2849.1734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2849.4387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2849.9554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2850.538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2851.0926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2851.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2851.8184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2851.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2851.84)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2851.7139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2851.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2851.0747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2850.5447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2850.0352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2849.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2849.1345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2848.5762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2847.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2846.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2846.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2846.033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2845.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2845.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2845.463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2845.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2845.2193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2845.1792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2845.111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2845.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2845.4036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2845.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2846.4422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2846.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2846.8816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2846.7132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2846.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2846.3399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2846.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2846.4568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2846.7303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2847.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2847.4024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2847.2022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2846.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2846.1324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2845.6363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2845.1612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2844.4136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2843.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2842.8008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2842.401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2842.3606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2842.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2841.9969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2841.3106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2840.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2839.5376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2838.9739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2838.6936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2838.5469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2838.5144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2838.627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2838.9287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2839.1365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2839.2115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2839.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2839.348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2839.572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2839.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2840.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2840.9898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2841.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2842.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2842.9595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2843.5157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2844.1783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2844.917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2845.2842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2844.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2843.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2842.6365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2841.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2841.1746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2840.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2839.4905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2838.2512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2836.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2835.5825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2834.6158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2833.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2833.2307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2832.5017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2831.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2830.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2829.4116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2828.4754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2827.8728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2827.9727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2828.4383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2828.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2829.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2829.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2829.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2829.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2829.2928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2829.7012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2830.6094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2832.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2833.5276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2834.3482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2834.601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2834.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2834.1158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2833.9092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2833.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2834.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2834.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2835.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2835.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2836.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2836.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2836.8418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2836.5457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2835.9495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2835.3242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2834.6834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2833.958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2833.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2832.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2831.5655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2831.1502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2830.8916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2830.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2830.8533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2830.8015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2830.774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2830.8887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2831.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2831.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2831.438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2831.357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2831.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2831.0325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2830.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2830.9173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2831.1512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2831.5867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2832.0337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2832.2774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2832.3977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2832.4397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2832.4143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2832.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2831.5208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2830.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2830.1917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2829.6922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2829.3033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2829.0379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2829.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2829.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2829.4922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2829.566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2829.4959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2829.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2829.6446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2829.916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2830.2303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2830.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2831.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2832.0855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2832.8557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2833.444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2833.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2834.3792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2834.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2834.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2835.1624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2835.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2836.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2837.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2838.1165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2838.406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2838.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2837.9436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2837.6548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2837.51)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2837.4676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2837.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2837.6302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2837.611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2837.365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2836.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2836.6756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2836.75)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2837.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2837.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2837.944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2838.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2838.9632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2839.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2839.7698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2839.4444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2838.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2837.7708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2837.175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2836.9473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2836.9744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2837.0142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2837.0889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2837.2273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2837.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2837.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2837.7805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2837.9734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2838.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2838.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2838.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2838.2193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2838.3274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2838.4495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2838.5384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2838.6497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2838.7493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2838.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2838.4734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2838.2)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2838.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2837.982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2837.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2838.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2838.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2838.163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2837.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2837.7298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2837.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2837.5782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2837.5196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2837.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2836.9585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2836.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2837.121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2837.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2837.5808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2837.494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2837.1258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2836.5476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2836.0877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2836.0188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2836.033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2835.9737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2835.7552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2835.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2835.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2834.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2834.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2833.6336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2833.5989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2834.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2834.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2835.4739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2835.8264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2835.8177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2835.3406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2834.7083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2834.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2834.4724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2835.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2835.7246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2836.181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2836.6109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2837.076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2837.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2837.6536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2837.8885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2838.1223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2838.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2837.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2837.2483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2836.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2836.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2836.7732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2836.93)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2837.0345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2837.1126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2837.0943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2836.9358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2836.6697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2836.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2836.6424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2836.7193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2836.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2836.9019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2837.2127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2837.4947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2837.6045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2837.4788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2837.2056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2837.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2837.2144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2837.1924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2836.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2836.1983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2835.3926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2834.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2834.4666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2834.656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2835.2537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2835.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2835.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2835.0174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2834.6988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2834.6848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2834.6468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2834.3863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2833.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2833.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2833.4886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2833.6746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2833.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2832.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2832.0825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2831.3448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2831.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2831.0755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2831.6162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2832.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2833.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2833.3252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2832.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2831.8313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2831.0003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2830.3853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2830.4016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2830.8855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2831.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2831.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2831.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2831.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2831.1553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2831.2364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2831.4134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2831.3719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2830.8636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2830.1524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2829.383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2828.689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2828.2073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2827.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2827.358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2826.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2826.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2826.2359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2826.3733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2826.4615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2826.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2827.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2827.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2827.6302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2827.4195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2827.1209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2826.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2826.6514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2826.718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2826.7837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2826.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2826.7073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2826.7547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2826.8372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2826.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2826.3545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2826.2012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2826.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2827.454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2827.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2827.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (2827.5393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (2827.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (2827.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (2827.7117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (2827.6487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (2827.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (2827.5904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (2828.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (2828.4722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (2828.6529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (2828.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (2828.3748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (2828.108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (2827.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (2828.0955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (2828.3806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (2828.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (2828.6802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (2828.5894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (2828.5677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (2828.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (2828.8777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (2828.5545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2827.7969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2827.0222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2826.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2826.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2827.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2827.0034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2826.755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2826.6868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2827.3042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2827.9783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (2827.6565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (2826.6057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (2825.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (2825.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (2826.1419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (2826.1245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2825.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2825.486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2826.8089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2828.9583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2829.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2828.9734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2827.5137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2826.3255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2826.2486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2826.4366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (2826.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (2826.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (2826.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (2826.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (2826.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (2826.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (2826.8208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (2826.4788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (2825.6995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (2825.3626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (2825.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (2826.0943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (2826.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (2826.739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (2826.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (2826.1314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (2825.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (2824.9492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (2825.117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (2825.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (2825.481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (2825.4578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (2825.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (2826.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (2826.3084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (2826.2303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (2826.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (2826.4944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (2827.4563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (2828.2679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (2828.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (2829.0279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (2829.2713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (2829.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (2830.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (2832.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (2833.6748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2835.0655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (2835.6436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (2835.8037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (2835.7083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (2835.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (2835.0279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (2834.458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (2833.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (2833.2525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (2832.7249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (2832.471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (2832.7002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (2832.7303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (2832.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (2831.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (2830.9395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (2830.5244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (2830.343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (2830.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (2830.2637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (2830.1158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (2829.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (2829.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (2828.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (2828.3272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (2828.284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (2827.7766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (2826.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (2825.9544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (2825.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (2825.6306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (2826.6485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (2827.7928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (2828.7888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (2829.676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (2830.7556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (2832.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (2833.1226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (2833.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (2834.2669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (2834.4092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (2833.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (2833.7163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (2833.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (2834.0882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (2834.2918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (2834.003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (2833.6387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (2833.3743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (2833.2263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (2833.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (2832.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (2831.9812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (2831.6817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (2831.6656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (2831.7146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (2831.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (2830.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (2829.8218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (2829.3448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (2829.262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (2829.1946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (2828.766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (2828.161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (2827.6966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (2827.7825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (2828.2874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (2828.5852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (2828.7254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (2828.8338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (2829.1062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (2830.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (2831.5574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (2833.1345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (2834.2244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (2834.3667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (2833.923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (2833.6582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (2833.451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (2833.195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (2832.7928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (2832.18)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (2831.4993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (2830.9229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (2830.5076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (2830.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (2829.8653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (2829.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (2829.164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (2829.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (2829.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (2830.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (2830.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (2831.128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (2831.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (2832.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (2832.4807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (2833.0843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (2833.4429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (2833.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (2832.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (2831.1197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (2830.8528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (2830.9038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (2831.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (2831.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (2831.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (2832.0135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (2832.4248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (2832.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (2833.5105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (2833.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (2833.749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (2833.2078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (2832.5103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (2831.866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (2831.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (2831.0257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (2831.2346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (2831.808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (2832.5247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (2833.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (2833.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (2833.4856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (2833.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (2832.4715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (2832.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (2833.7117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (2834.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (2834.8406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (2834.2779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (2833.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (2832.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (2831.1558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (2830.443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (2830.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (2830.848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (2831.3848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (2831.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (2831.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (2830.8535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (2830.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (2830.0332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (2830.9798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (2832.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (2834.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (2835.1365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (2835.1233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (2834.8528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (2834.4178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (2833.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (2832.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (2831.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (2830.1844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (2829.9822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (2830.4422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (2831.7293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (2832.3206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (2831.9688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (2831.391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (2831.7566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (2834.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (2835.9512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (2836.732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (2836.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (2836.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (2836.6475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (2836.2156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (2834.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (2831.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (2826.3328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (2825.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (2828.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (2832.3172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (2834.406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (2834.5823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (2833.9285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (2832.4466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (2830.3033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (2828.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (2827.0816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (2827.6804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (2829.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (2834.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (2840.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (2846.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (2842.6199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (2839.3023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (2837.8196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (2837.662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (2837.7796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (2837.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.43)) (quote (2838.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.44)) (quote (2838.4612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2301.4326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (2304.2117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (2305.8753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (2305.7234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (2303.599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (2299.8916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (2298.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (2300.494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (2303.7227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (2307.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (2311.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (2315.969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (2318.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (2322.0257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (2325.5904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (2328.741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (2330.2884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (2330.7542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (2330.5855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (2330.1892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (2329.943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (2330.0188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (2330.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (2330.5877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (2331.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (2331.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (2331.1985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (2331.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2331.2503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2331.5567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2331.7107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2331.2683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2330.6407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2329.947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2329.2757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2328.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2328.3819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2328.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2328.2642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2328.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2328.5662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2328.6812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2328.5655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2328.2845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2327.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2327.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2327.3697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2327.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2326.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2326.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2326.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2326.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2327.2984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2327.412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2327.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2327.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2327.188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2327.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2328.1223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2328.4302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2328.4405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2327.9224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2326.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2325.4373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2324.3667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2324.1614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2324.7259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2325.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2326.0469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2326.5943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2326.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2326.5086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2325.7405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2325.0804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2324.7928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2324.9783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2325.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2325.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2324.5755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2324.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2324.013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2324.0952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2324.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2324.2054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2324.3513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2324.6094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2324.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2325.1138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2325.1682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2325.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2324.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2325.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2325.7554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2326.3594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2326.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2326.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2326.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2325.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2325.7127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2325.7464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2325.861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2325.7432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2325.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2325.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2324.7102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2324.5694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2324.5286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2324.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2324.0752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2323.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2323.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2323.2032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2323.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2322.9485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2322.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2322.6062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2322.3289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2322.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2321.9822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2321.7705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2321.5318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2321.5804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2321.8462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2322.059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2322.1565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2322.1878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2322.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2322.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2322.7356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2323.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2323.4654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2323.5059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2323.2627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2322.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2322.4148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2321.9722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2321.7066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2321.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2321.107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2320.5445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2319.9483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2319.9348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2320.3277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2320.6685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2320.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2320.479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2320.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2320.027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2319.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2319.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2319.177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2318.6138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2318.2202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2318.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2317.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2317.9678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2317.9917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2318.0113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2318.165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2318.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2318.9746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2319.3035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2319.475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2319.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2319.7864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2319.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2319.8833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2319.9849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2319.9886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2319.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2319.4986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2319.3406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2319.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2319.3538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2319.3052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2319.1826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2318.9385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2318.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2317.6824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2316.8333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2316.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2315.4412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2315.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2314.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2314.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2314.7368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2313.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2313.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2312.5506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2312.5034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2312.8433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2313.0616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2313.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2313.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2313.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2313.7459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2314.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2315.2234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2315.6785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2315.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2316.1853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2316.2178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2316.0728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2315.9173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2315.8096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2315.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2315.7522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2315.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2316.1739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2316.4947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2316.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2316.8946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2316.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2316.613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2316.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2315.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2315.6616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2315.4888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2315.227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2314.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2314.5616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2314.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2314.2903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2314.365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2314.5369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2314.7322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2314.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2314.5132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2314.3272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2314.214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2314.1504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2313.9417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2313.751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2313.7349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2313.8553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2313.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2313.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2313.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2314.0469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2314.3116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2314.5667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2314.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2314.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2314.1829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2313.9302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2313.5059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2312.929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2312.659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2312.7823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2313.1482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2313.5196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2313.5887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2313.2979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2312.7998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2312.3692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2312.3018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2312.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2313.4534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2313.7054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2313.667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2313.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2313.6663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2314.0213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2314.4485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2314.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2315.2674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2315.5845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2315.9558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2316.3736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2316.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2316.9995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2316.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2316.513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2316.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2316.0193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2316.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2316.2112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2316.2093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2316.1475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2316.0696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2316.0074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2315.9602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2315.977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2316.0562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2316.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2316.3033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2316.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2316.7967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2317.102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2317.3343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2317.381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2316.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2316.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2316.1804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2316.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2316.7937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2316.9722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2316.7449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2316.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2316.2488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2316.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2315.8877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2315.7669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2315.6873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2315.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2315.5694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2315.6226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2315.9055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2316.2122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2316.3902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2316.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2316.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2316.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2317.0608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2317.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2317.024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2316.4637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2316.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2315.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2316.0745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2316.3885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2316.5205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2316.2935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2315.9456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2315.6502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2315.5345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2315.612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2315.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2315.3784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2315.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2314.9038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2315.1153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2315.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2315.573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2315.3863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2315.0655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2315.0374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2315.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2315.615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2315.607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2315.3008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2314.9187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2314.7957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2314.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2314.7232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2314.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2314.1375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2314.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2314.6013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2314.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2314.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2314.4964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2314.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2313.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2313.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2313.0193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2312.7937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2313.4129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2314.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2315.0889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2315.0935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2314.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2313.854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2313.8362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2314.2014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2314.7342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2315.0462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2315.2473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2315.6062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2315.9597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2316.1013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2315.8067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2315.4214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2315.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2314.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2314.8367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2315.1604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2315.6394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2315.7317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2315.4395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2314.9405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2314.6863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2314.818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2314.9959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2315.1253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2315.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2314.9646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2314.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2314.4827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2314.509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2314.7017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2314.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2314.7857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2314.7122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2314.6238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2314.4737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2314.1028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2313.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2313.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2313.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2313.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2313.9705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2313.8758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2313.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2314.2075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2314.642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2314.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2314.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2313.7532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2313.1624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2313.0022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2313.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2313.7068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2313.731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2313.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2313.4844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2313.5117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2313.6717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2313.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2314.0655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2314.1668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2314.1116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2313.8599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2313.3028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2312.6619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2312.2395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2312.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2313.041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2313.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2312.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2312.5716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2312.4776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2312.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2311.7976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2311.703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2312.1512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2313.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2313.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2312.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2311.5042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2310.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2310.0288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2310.3135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2311.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2312.0374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2312.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2311.4934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2311.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2311.0105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2310.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2310.6018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2310.0677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2310.1004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2310.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2310.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2310.2268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2310.0554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2310.2349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2310.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2310.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2310.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2310.487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2309.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2309.3142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2309.3203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (2309.819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (2310.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (2310.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (2310.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (2310.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (2310.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (2310.5564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (2310.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (2311.1316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (2311.0633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (2310.9712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (2311.1309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (2311.1392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (2310.4959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (2309.71)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (2309.4104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (2310.3955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (2311.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (2312.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (2312.3736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (2311.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (2310.2574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (2310.3692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2310.6565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2310.5667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2310.0337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2309.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2310.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2311.8206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2313.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2313.79)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2313.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2310.3352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (2308.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (2308.4842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (2309.8616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (2312.6165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (2314.5354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (2320.198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2325.5379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2327.8975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2326.5757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2337.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2338.9436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2343.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2357.0618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2372.4776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2374.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2375.5345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (2385.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (2402.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (2409.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (2411.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (2417.771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (2422.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (2425.714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (2429.349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (2430.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (2433.3743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (2439.3609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (2446.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (2448.4485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (2450.0965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (2453.5323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (2456.7874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (2454.521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (2437.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (2440.4402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (2439.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (2449.6548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (2465.8052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (2465.0896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (2463.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (2446.8553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (2432.1668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (2428.4446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (2433.89)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (2439.0025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (2443.6858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (2446.9466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (2448.1426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (2446.9949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (2425.4297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (2420.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (2419.9544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (2418.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2414.8809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (2411.8877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (2395.4759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (2380.706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (2372.0135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (2363.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (2365.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (2366.1765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (2365.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (2365.8518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (2366.1148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (2373.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (2376.5664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (2376.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (2373.3323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (2364.47)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (2365.5774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (2366.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (2367.4685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (2366.8396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (2363.9207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (2361.0017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (2371.6492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (2375.8433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (2371.5159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (2372.3162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (2376.4002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (2377.8513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (2377.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (2380.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (2400.3228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (2396.2874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (2399.0637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (2403.5965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (2409.8533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (2421.6038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (2421.9229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (2416.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (2423.4339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (2436.3824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (2430.5196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (2427.8426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (2406.1309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (2388.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (2388.3499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (2407.4029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (2390.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (2373.994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (2370.4475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (2378.3213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (2386.0547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (2387.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (2385.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (2382.2276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (2377.8606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (2373.4322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (2357.3645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (2352.7434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (2350.91)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (2349.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (2349.8968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (2354.5645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (2358.7613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (2361.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (2362.8677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (2362.8828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (2358.7554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (2353.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (2352.3596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (2355.5918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (2361.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (2369.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (2372.3362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (2372.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (2370.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (2365.788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (2363.3357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (2364.7664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (2368.041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (2371.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (2375.753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (2374.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (2370.6253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (2380.0572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (2395.2974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (2395.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (2393.2298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (2393.013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (2404.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (2418.0186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (2413.0645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (2411.9158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (2415.849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (2422.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (2428.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (2429.6892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (2431.1118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (2432.7852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (2434.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (2436.0354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (2433.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (2428.6585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (2423.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (2422.489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (2425.609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (2428.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (2430.8267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (2432.0542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (2431.172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (2429.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (2429.7578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (2431.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (2431.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (2429.6114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (2427.0142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (2426.9893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (2428.917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (2430.6848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (2431.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (2431.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (2432.5074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (2433.5786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (2433.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (2433.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (2433.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (2433.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (2433.4536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (2431.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (2429.6096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (2428.5159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (2428.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (2428.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (2428.7276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (2430.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (2432.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (2437.9986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (2442.5686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (2443.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (2441.6465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (2437.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (2435.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (2435.9739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (2437.2386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (2437.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (2433.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (2425.8323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (2425.1804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (2426.6262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (2429.3662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (2433.0027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (2437.003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (2438.0899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (2437.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (2435.6155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (2433.341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (2431.1348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (2428.2654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (2424.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (2415.1707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (2404.6673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (2397.4978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (2390.328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (2378.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (2374.2517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (2376.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (2379.6934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (2385.1822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (2387.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (2389.8084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (2396.2115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (2411.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (2427.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (2429.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (2429.1897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (2260.0938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (2260.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (2260.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (2260.1592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (2260.7722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (2261.6897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (2259.8955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (2250.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (2240.8015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (2239.093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (2252.6956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (2260.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (2268.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (2264.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (2255.662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (2266.2735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (2276.8845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (2260.4668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (2261.6292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (2268.6072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (2220.0257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (2244.8457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (2255.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (2260.766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (2265.209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (2266.1555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (2262.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (2271.1104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2280.1475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2277.127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2249.7857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2250.9485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2267.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2260.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2240.2232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2258.3587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2244.1004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2267.9932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2284.7625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2286.4265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2294.627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2299.5198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2301.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2289.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2272.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2272.1658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2275.2598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2278.6695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2280.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2281.34)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2281.3382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2250.9602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2247.1028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2249.9239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2251.6194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2252.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2250.8902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2246.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2242.8482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2248.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2272.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2277.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2279.347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2279.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2278.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2278.1795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2284.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2289.4998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2292.7845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2294.2932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2295.3882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2279.1023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2283.9639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2288.2559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2287.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2290.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2291.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2290.3577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2288.3465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2286.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2286.549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2285.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2286.6077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2287.5025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2287.609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2285.9075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2278.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2275.3072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2262.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2245.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2240.0742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2257.8638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2263.0474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2263.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2263.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2265.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2265.462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2250.9583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2243.2427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2253.1455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2282.5503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2284.987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2286.0965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2284.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2281.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2276.2202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2271.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2271.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2259.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2248.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2261.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2261.0345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2261.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2250.6106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2245.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2269.8189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2270.2747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2271.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2271.199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2272.7432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2278.6656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2280.892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2281.1988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2279.0965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2275.4439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2271.9275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2270.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2270.7344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2273.4483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2281.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2295.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2298.5496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2280.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2275.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2282.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2281.5782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2255.9422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2250.1138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2263.5943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2281.7342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2284.6243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2282.57)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2283.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2283.7202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2278.304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2262.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2269.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2269.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2268.7722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2268.9065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2268.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2268.3352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2271.3296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2275.1126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2277.273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2276.1887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2279.1673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2284.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2287.8313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2289.3738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2290.7322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2289.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2266.8836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2252.9556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2248.8513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2244.4063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2243.5335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2247.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2253.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2263.253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2280.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2276.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2273.3423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2276.4536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2279.9033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2275.7346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2275.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2277.1438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2263.8638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2247.8)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2248.2708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2249.3347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2249.8587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2251.9192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2256.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2263.3494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2266.3946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2267.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2270.9046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2274.8445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2278.1409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2280.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2281.3296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2271.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2260.4402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2259.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2256.7495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2254.3784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2251.8155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2248.9029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2246.146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2247.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2251.6763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2255.1468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2256.9744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2257.386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2256.9688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2255.5254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2270.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2286.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2285.4268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2283.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2283.9683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2275.1175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2263.6868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2261.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2262.5498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2263.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2261.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2256.8325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2252.2644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2257.9717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2261.4129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2262.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2261.7508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2257.5388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2250.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2245.482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2242.2454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2240.0999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2238.0652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2234.5154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2230.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2229.1407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2229.5996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2231.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2231.7259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2247.8018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2256.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2258.6316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2262.7569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2264.965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2264.957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2262.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2257.148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2251.3208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2250.23)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2254.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2260.3787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2266.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2269.6678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2267.204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2261.0806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2259.9073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2263.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2269.3404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2283.3599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2284.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2280.2522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2268.8286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2249.4915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2232.0493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2234.8614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2236.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2236.0222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2237.5933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2245.2014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2248.5193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2252.666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2257.5154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2261.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2265.2696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2271.1702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2275.514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2277.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2278.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2278.0747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2271.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2265.1604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2263.5293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2269.4268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2277.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2277.238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2276.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2274.7097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2273.665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2276.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2276.5042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2281.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2281.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2270.607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2285.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2288.1573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2288.6619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2289.1665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2287.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2270.4317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2268.534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2267.2808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2265.4363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2263.585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2259.9927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2246.3948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2238.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2234.4453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2231.3509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2233.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2236.4656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2239.023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2241.5745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2244.6992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2251.3843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2258.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2273.5086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2284.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2281.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2281.7293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2283.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2277.14)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2263.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2247.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2244.996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2239.3506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2246.5782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2248.408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2235.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2247.6458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2252.1416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2254.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2254.342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2252.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2246.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2245.4488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2244.1043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2243.6873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2245.4104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2250.2908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2271.7063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2283.77)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2287.678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2286.3042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2274.102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2260.0767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2254.9036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2254.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2254.2766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2253.1429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2251.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2249.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2247.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2246.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2247.1438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2246.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2244.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2237.349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2229.3094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2245.7259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2247.6277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2247.8123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2248.3123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2248.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2246.9353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2241.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2235.5926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2234.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2238.1956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2241.1529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2239.8775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2240.1775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2240.5948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2238.5408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2230.2193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2239.2825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2253.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2261.06)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2259.3604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2258.8872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2254.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2267.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2280.6939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2281.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2278.0205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2277.6184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2279.4324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2281.1145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2281.0733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2279.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2256.1802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2245.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2240.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2237.0237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2235.4966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2232.6082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2241.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2260.5108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2279.3384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2275.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2273.247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2270.4285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2265.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2257.9275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2250.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2248.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2248.2244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2248.1775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2247.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2245.988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2250.8455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2254.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2256.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2254.6985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2250.2454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2252.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2254.6892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2254.9788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2252.479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2242.8638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2238.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2235.4348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2234.1585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2236.7005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2250.7993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2257.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2256.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2248.3772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2236.7478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2235.4654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2235.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2238.2073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2241.7476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2244.009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2243.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2240.845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2233.16)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2225.8687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2222.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2221.1604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2219.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2219.8802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2219.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2216.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2213.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2214.884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2216.4234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2221.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2229.5154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2237.9544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2261.2054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2267.7368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2264.328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2258.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2253.0425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2250.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2251.809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2252.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2249.8653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2244.7259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2239.5867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2234.4475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2231.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2232.1829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2232.5686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2255.977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2265.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2265.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (2263.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (2256.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (2255.3946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (2255.2627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (2254.1595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (2250.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (2245.5342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (2245.0738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (2244.4644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (2238.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (2229.2967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (2225.0174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (2225.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (2226.0847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (2225.9998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (2226.2078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (2230.0533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (2236.8977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (2239.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (2244.0315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (2251.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (2254.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (2234.7823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2230.0603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2230.4036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2230.9304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2235.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2238.5906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2226.3709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2216.2757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2215.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2215.4883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2215.4912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1802.3423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (1802.2615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (1797.4985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (1792.3729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (1789.0689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (1787.6576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (1790.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (1788.807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1789.9373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1789.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1773.7703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1794.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1799.2066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1799.4133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1800.4248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1801.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1802.3754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1802.8463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1802.9678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1802.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1802.8366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1803.1345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1803.3566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1803.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1803.4155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1803.6392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1804.1506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1804.5355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1804.851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1805.2005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1805.7272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1806.3948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1806.9303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1807.2809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1807.4584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1807.5327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1807.5852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1807.5866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1807.5073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1807.3583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1807.1857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1807.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1806.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1806.4829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1805.9254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1805.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1804.8385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1804.6159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1804.56)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1804.6303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1804.7924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1804.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1804.8031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1804.599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1804.3778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1804.2633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1804.3611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1804.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1805.1621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1805.7389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1806.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1806.4254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1806.4264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1806.3754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1806.3262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1806.2808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1806.1312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1805.9291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1805.7149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1805.4921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1805.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1805.0217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1804.9241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1804.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1804.7405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1804.4021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1803.7153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1802.9723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1802.3861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1802.0122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1801.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1801.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1801.4152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1801.3276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1801.3231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1801.3843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1801.5259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1801.6473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1801.6239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1801.4223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1801.0806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1800.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1800.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1801.0999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1801.353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1801.5164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1801.4378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1801.2355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1800.9623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1800.6566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1800.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1800.1683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1800.1099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1800.0911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1800.0547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1799.9672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1799.9402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1800.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1800.228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1800.4494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1800.6858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1800.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1800.8904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1800.6663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1800.2697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1799.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1799.4765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1799.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1799.1533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1799.0404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1798.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1798.7704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1798.7153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1798.7101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1798.7278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1798.7407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1798.7573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1798.7338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1798.6809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1798.6286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1798.6126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1798.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1798.4841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1798.3106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1798.104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1797.9039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1797.7914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1797.8204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1797.9631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1798.2014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1798.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1798.8507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1799.0598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1799.1117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1799.0485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1798.9542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1798.9364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1798.9434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1798.9379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1798.8916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1798.7774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1798.5286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1798.2266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1797.934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1797.6586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1797.3854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1797.1134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1796.8876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1796.6951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1796.5691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1796.5584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1796.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1796.7451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1796.6939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1796.5903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1796.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1796.2871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1795.9589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1795.7324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1795.73)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1796.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1796.4979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1796.9907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1797.4464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1797.8638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1798.2637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1798.6983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1799.153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1799.5914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1799.9851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1800.3067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1800.5017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1800.5198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1800.3667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1800.0731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1799.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1799.2645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1798.8109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1798.3407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1797.8771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1797.4544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1797.1705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1797.0707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1797.123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1797.2911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1797.5189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1797.6764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1797.7119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1797.6787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1797.6068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1797.5187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1797.4061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1797.2538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1797.0504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1796.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1796.6008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1796.5562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1796.7218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1796.9494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1797.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1797.1273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1796.9303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1796.8262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1796.9241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1797.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1797.4308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1797.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1797.5261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1797.6112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1797.7924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1798.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1798.2327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1798.2149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1798.0642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1797.8773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1797.7485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1797.6815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1797.5188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1797.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1797.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1796.8362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1796.8132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1796.8064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1796.7072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1796.5245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1796.3158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1796.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1796.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1796.3253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1796.4625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1796.5928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1796.6438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1796.7042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1796.8272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1796.9885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1797.1378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1797.1994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1797.2516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1797.3181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1797.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1797.3308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1797.1209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1796.7842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1796.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1796.1317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1795.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1795.7131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1795.5463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1795.4022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1795.2949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1795.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1795.3068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1795.4442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1795.5691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1795.6638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1795.7302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1795.7805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1795.7604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1795.7168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1795.692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1795.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1795.6937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1795.5726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1795.4526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1795.4071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1795.4735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1795.5676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1795.5309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1795.4447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1795.409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1795.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1795.7151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1795.7772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1795.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1795.3278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1794.999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1794.8219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1794.8301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1794.9354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1795.0623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1795.1373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1795.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1795.0148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1794.9666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1794.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1794.8842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1794.8285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1794.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1794.8369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1794.8095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1794.7228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1794.6076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1794.5375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1794.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1794.5184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1794.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1794.5029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1794.5342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1794.7214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1794.9899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1795.201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1795.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1794.7828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1794.5507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1794.4303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1794.3971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1794.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1794.197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1794.1052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1794.0939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1794.1661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1794.2297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1794.1264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1793.9229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1793.7354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1793.6755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1793.8241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1794.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1794.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1794.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1793.8135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1793.3919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1793.0807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1793.0431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1793.248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1793.5899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1793.8434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1793.9531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1794.034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1794.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1794.3816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1794.6747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1794.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1794.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1794.6288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1794.5061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1794.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1794.6262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1794.5885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1794.4209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1794.1561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1793.8877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1793.5571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1793.1655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1792.7954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1792.5116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1792.3048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1792.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1791.8727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1791.8302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1791.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1792.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1792.6166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1792.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1792.8858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1792.7345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1792.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1792.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1792.2597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1792.3792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1792.6718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1792.9918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1793.1749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1793.3286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1793.4369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1793.4724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1793.3988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1793.4284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1793.5065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1793.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1793.3217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1792.9328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1792.6126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1792.4638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1792.4778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1792.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1792.6674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1792.5376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1792.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1792.4578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1792.72)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1793.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1793.1996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1793.1112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1792.9618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1792.8837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1792.9832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1793.0803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1793.0614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1792.9862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1792.9387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1793.0272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1793.1889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1793.3842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1793.6112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1793.8474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1794.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1794.0636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1794.1056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1794.1284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1794.1068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1794.0042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1793.9492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1794.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1794.1668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1794.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1794.4633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1794.5486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1794.6692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1794.8078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1794.9242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1794.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1794.8069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1794.664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1794.645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1794.8348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1795.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1795.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1795.978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1796.3117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1796.6793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1797.0432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1797.1962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1797.1481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1796.9459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1796.6327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1796.2274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1795.7655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1795.3231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1794.9161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1794.564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1794.3056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1794.2036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1794.1058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1793.9398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1793.7169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1793.5895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1793.8532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1794.2149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1794.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1794.4874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1794.3002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1794.1467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1794.0143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1793.8502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1793.6321)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1793.3878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1793.1498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1792.8878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1792.6298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1792.4315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1792.3978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1792.6642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1793.0122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1793.2625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1793.2844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1793.0059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1792.6867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1792.5402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1792.5696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1792.7504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1793.0387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1793.4118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1793.7831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1794.043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1794.1375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1794.0875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1794.1459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1794.3568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1794.6373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1794.9142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1795.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1795.4098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1795.7461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1796.0498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1796.254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1796.3273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1796.3671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1796.4722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1796.6547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1796.9027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1797.1759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1797.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1796.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1796.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1795.6409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1795.1504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1795.2852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1795.6229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1795.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1795.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1795.5258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1794.8712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1794.1088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1793.3585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1792.6908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1792.1159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (1791.7708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (1791.8622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (1792.3721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (1793.1721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (1794.0065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1794.6359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1795.1594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1795.5607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1795.8619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1796.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1796.2758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1796.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1795.3141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1794.3615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1793.4525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1793.0567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1792.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1793.1088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1793.509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1794.1032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1794.2251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1793.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1792.9674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1792.2568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1791.9713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1792.2034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1792.5026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1792.7429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1792.8518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1792.8093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1792.7012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1792.6549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1792.6029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1792.4523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1792.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1791.7201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1791.7411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1792.0631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1792.5122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1792.8222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1792.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1792.6515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1792.5966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1792.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1792.7077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1792.8826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1793.2272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1793.5841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1793.8175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1793.8135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1793.7693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1793.8995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1794.0982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1794.2745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1794.3536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1794.3828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1794.4168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1794.4274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1794.4179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1794.4213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1794.5385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1794.6928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1794.8373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1794.9603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1795.0814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1795.153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1795.0787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1794.9508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1794.8626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1794.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1794.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1794.5714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1794.0542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1793.4249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1792.8189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1792.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1792.3678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1792.5177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1792.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1793.2601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1793.4946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1793.3497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1792.905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1792.3759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1792.0944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1792.2787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1792.5398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1792.8078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1793.0673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1793.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1793.4767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1793.4163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1793.3148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1793.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1793.3032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1793.2704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1793.251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1793.4009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1793.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1794.2717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1794.5308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1794.5433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1794.4719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1794.4046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1794.3715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1794.1416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1793.7576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1793.4342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1793.2854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1793.3423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1793.2758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1793.0426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1792.8228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1792.7153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1792.7606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1792.825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1792.7633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1792.6028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1792.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1792.4102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1792.6804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1793.0414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1793.3829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1793.6668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1793.9005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1794.0818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1794.193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1794.2717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1794.3687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1794.5365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1794.6387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1794.3982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1793.8732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1793.2689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1792.8928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1792.9776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1793.1618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1793.3464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1793.4525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1793.404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1792.9917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1792.6326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1792.5278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1792.6476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1792.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1792.7361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1792.678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1792.7051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1792.7883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1792.8441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1792.8627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1793.0303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1793.3113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1793.5885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1793.7029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1793.6592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1793.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1794.0383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1794.3273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1794.4749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1794.3552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1794.2141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1794.0371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1793.7984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1793.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1793.3998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1793.6001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1793.9025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1794.1843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1794.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1794.2885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1794.0892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1794.0106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1794.2118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1794.7733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1795.4382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1795.8862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1796.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1796.8462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1797.6266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1798.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1798.8872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (1798.8956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (1798.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (1797.9328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (1797.377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (1797.0801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (1797.0259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (1797.1707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (1797.4397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (1797.6902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (1797.9147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (1798.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (1798.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (1798.997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (1799.1295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (1799.0354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (1798.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (1799.0438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (1799.1926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (1798.5595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (1795.6069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (1791.8661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (1788.7654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (1787.7444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (1790.3632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (1792.8876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (1794.7135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (1795.7681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (1796.2538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (1796.5873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (1796.7091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (1796.6569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (1796.541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (1796.49)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (1796.4412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (1796.2211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (1796.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (1796.3036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (1796.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (1797.6854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (1797.7055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (1797.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (1794.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (1788.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (1786.6705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (1789.0426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (1793.6437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (1797.2638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (1796.9282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (1796.4447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (1795.8727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (1795.5054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (1795.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (1796.4005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (1797.5167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.43)) (quote (1798.1983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.44)) (quote (1798.3954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.45)) (quote (1798.2828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.46)) (quote (1798.1259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.47)) (quote (1798.0991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.48)) (quote (1797.9852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.49)) (quote (1797.7151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.5)) (quote (1797.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1660.4108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (1662.8442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (1666.1406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (1668.3025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (1668.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (1668.065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (1682.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (1687.2931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1681.7904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1678.521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1700.3218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1698.6085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1697.028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1695.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1694.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1693.7798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1693.6137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1693.8119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1693.8367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1693.3472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1692.2017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1692.4454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1693.0852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1693.2634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1692.6068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1691.1874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1690.4507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1689.8196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1689.1721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1688.5714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1688.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1687.8093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1686.9769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1686.1349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1685.6296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1685.7542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1686.0392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1685.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1685.6638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1685.4124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1685.3761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1685.3611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1685.2288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1685.0717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1684.8932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1684.6301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1684.3031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1684.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1683.9741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1683.9503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1684.086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1685.3908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1687.1137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1688.5302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1689.1891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1688.8666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1688.1437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1687.6115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1686.9464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1685.9869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1684.7077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1683.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1683.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1682.7133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1682.5746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1682.48)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1682.302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1682.1135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1682.0199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1682.0669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1682.2592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1682.6439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1683.0422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1683.3815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1683.6768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1684.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1684.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1684.6622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1684.5671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1684.2396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1683.8635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1683.3761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1682.2792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1680.5974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1677.7932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1673.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1670.125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1670.6354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1684.3828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1696.0106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1677.76)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1681.3807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1682.8373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1683.5223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1684.1962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1685.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1686.8338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1688.2916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1689.6303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1690.3532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1689.7553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1688.4369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1690.5285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1681.7566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1673.9304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1690.3883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1686.7278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1685.5531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1685.0933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1684.6718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1684.2145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1684.5338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1685.1682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1685.0304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1683.7151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1681.2472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1678.2025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1675.6879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1674.7468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1675.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1679.4491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1681.9075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1682.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1682.3825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1681.943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1681.5928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1682.088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1683.2738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1684.6878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1686.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1688.2609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1692.9143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1696.3462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1697.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1698.0444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1698.9673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1702.348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1701.3749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1698.1975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1693.5016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1687.6969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1684.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1682.8023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1682.1066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1681.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1680.8317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1680.4115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1681.0964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1681.3295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1680.5585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1678.8218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1677.6582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1676.2769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1674.6572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1673.4297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1673.4603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1675.0463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1676.7068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1678.0701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1679.3688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1681.0054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1682.3705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1683.1995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1683.6696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1683.7771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1683.5119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1683.3126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1683.4888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1683.5773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1683.2669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1682.233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1679.3518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1675.2507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1672.3844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1671.3059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1671.7565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1673.3272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1674.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1675.5712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1676.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1675.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1673.6524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1671.1013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1670.0596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1670.742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1672.5962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1674.0701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1674.3616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1673.532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1672.1034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1670.8121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1670.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1670.7493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1671.7451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1673.0958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1674.5119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1675.5304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1676.3478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1676.7615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1674.2578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1664.8727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1638.2933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1639.213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1643.2794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1641.8442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1633.0465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1629.1205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1629.8842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1631.518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1633.1516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1634.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1632.8231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1629.2702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1624.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1620.0978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1615.3381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1610.5785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1609.8554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1315.4215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (1318.7752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (1320.8323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (1321.9672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (1322.4833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (1322.6119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (1321.1408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (1320.2219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1312.4998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1297.7175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1282.4993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1280.9075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1278.6128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1275.9684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1273.8038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1273.3912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1274.9088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1275.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1275.5891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1275.6621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1276.1394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1276.2465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1275.7348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1274.2429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1272.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1272.651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1277.0966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1279.0953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1279.5719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1279.5097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1279.9861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1282.4985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1284.0164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1285.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1286.6244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1287.4994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1287.4165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1286.5678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1285.6539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1285.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1285.4268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1285.8984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1286.0079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1285.5308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1284.6913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1284.0742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1283.748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1283.9225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1283.9528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1283.7399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1283.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1282.3943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1280.9869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1280.1603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1280.2909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1281.386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1282.1981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1282.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1282.2216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1282.6273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1283.3422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1284.8722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1286.0368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1286.5121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1286.3842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1286.0614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1286.2489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1286.4851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1286.4412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1286.1461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1285.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1285.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1284.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1284.3014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1283.5305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1282.9935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1281.6192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1280.727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1280.3595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1280.6605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1281.7387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1281.6806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1281.0507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1279.8958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1278.5502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1277.5274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1276.6688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1276.7001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1277.1635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1277.5331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1277.2377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1276.2108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1275.9472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1276.2378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1276.699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1276.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1276.0457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1275.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1275.3385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1275.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1276.2709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1276.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1275.5505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1274.0037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1273.0497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1274.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1276.2319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1277.5774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1278.2756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1278.4751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1278.3568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1277.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1277.7819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1277.7467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1277.7217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1277.5636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1277.0795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1276.7518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1276.3825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1276.0122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1275.8099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1275.9845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1276.4729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1277.0101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1277.1832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1276.5541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1275.4917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1274.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1274.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1273.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1273.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1273.2116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1272.9456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1272.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1273.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1273.0009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1273.6829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1274.5199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1275.3339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1275.9669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1276.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1277.1521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1277.8059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1278.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1278.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1277.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1278.0078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1278.1362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1277.9343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1277.3734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1276.6041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1276.9939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1278.1337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1279.3153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1280.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1279.9032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1277.5512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1275.3947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1274.7482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1275.7536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1277.7672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1277.8209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1277.0834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1275.3284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1272.7803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1270.1076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1270.1066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1271.7453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1273.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1274.2166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1272.9387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1270.819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1271.1738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1272.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1274.9887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1277.0541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1278.5675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1280.3229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1281.6007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1282.4816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1283.4061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1285.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1287.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1287.7366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1287.126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1285.8692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1284.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1283.9904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1283.6414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1283.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1282.2163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1281.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1281.0928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1280.4645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1280.277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1280.9848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1281.724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1281.1862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1280.0023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1278.7443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1277.9692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1278.0504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1277.712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1277.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1277.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1278.2363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1278.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1277.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1277.6907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1277.7006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1277.7173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1277.7578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1276.8573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1276.3847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1276.5368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1277.1469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1278.1813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1279.1144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1280.2973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1281.4334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1282.0896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1282.2243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1282.3444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1282.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1282.0818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1281.459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1280.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1280.567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1280.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1280.5227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1280.7313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1281.421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1281.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1281.3287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1279.6941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1277.8197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1276.4505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1277.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1278.6831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1279.2485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1279.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1279.1452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1279.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1279.9949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1280.7274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1281.4823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1281.5469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1280.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1279.9345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1279.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1279.7018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1279.9786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1279.8931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1279.9308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1279.7793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1279.0925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1278.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1277.4548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1277.4692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1277.8036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1277.7482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1277.9756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1276.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1276.1677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1275.6332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1275.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1276.1229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1275.6306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1274.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1273.7474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1273.4258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1274.5148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1275.4478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1275.9225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1275.9324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1275.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1275.1791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1274.6115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1273.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1273.5886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1273.769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1274.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1276.5311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1277.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1276.4822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1274.8908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1273.3513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1272.7984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1272.706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1273.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1273.9396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1275.6102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1275.9629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1274.4036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1271.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1268.9984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1268.8439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1271.8236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1273.8508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1274.4963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1274.2282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1274.2127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1274.4338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1273.7269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1272.5325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1271.6679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1272.2874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1274.1156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1274.7152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1274.0276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1272.6365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1271.8119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1272.8584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1273.8285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1273.8054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1272.4761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1270.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1270.9878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1272.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1274.0259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1273.9144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1268.4317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1266.0969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1269.3949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1274.4402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1277.016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1275.2869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1273.8969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1273.4566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1273.0204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1271.6038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1268.8056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1268.0346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1269.3016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1272.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1275.3201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1276.7604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1276.848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1275.9273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1274.8704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1274.0979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1272.2765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1271.1879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1271.5652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1272.9459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1274.5895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1275.4972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1275.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1276.2372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1275.5154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1272.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1268.1972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1267.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1269.2938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1271.167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1272.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1273.3059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1273.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1273.3049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1271.9199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1270.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1272.0742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1271.7374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1269.6838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1267.2409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1265.7932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1266.4713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1269.0938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1271.0579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1272.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1274.0796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1273.8119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1272.1876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1271.32)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1271.1159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1271.2446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1271.4468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1271.3724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1271.8672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1271.8176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1270.4691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1268.3779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1268.2296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1269.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1270.1198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1271.0153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1271.314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1272.1079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1271.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1270.1569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1268.5449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1269.2435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1272.7564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1274.4791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1274.4269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1273.2155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1271.7019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1271.0917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1270.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1270.7009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1270.8363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1271.0607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1272.1183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1272.8085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1273.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1272.9331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1273.3056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1276.3615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1277.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1276.1522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1273.7634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1270.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1270.6083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1272.6968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1275.9469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1278.8015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1278.6547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1277.153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1274.9584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1273.4879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1273.4583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1274.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1276.1002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1277.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1277.475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1277.3472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1276.5004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1277.5924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1278.0253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1278.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1278.7903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1279.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1281.3934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1282.3252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1282.3389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1281.5895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1280.681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1279.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1279.2544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1278.5733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1277.9053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1277.5034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1275.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1274.9271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1274.7962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1275.6344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1277.8942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1279.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1279.658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1279.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1278.2487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1277.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1278.3607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1278.5877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1276.611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1273.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1273.0228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1289.8317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1292.7816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1290.5309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1289.8473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1291.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1292.7838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1281.5973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1273.5829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1274.9369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1274.7402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1275.1967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1275.6619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1276.4633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1277.4835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1277.8399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1275.4797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1272.4281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1270.8192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1271.8264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1275.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1277.0357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1278.3536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1279.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1279.9026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1278.5822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1277.7142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1278.3256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1280.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1282.1244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1282.0087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1281.3156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1282.0545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1283.2033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1283.5562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1281.7151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1273.2824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1265.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1261.5142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1260.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1260.9401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1263.5007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1261.7661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1253.1079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1242.1253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1243.0297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1232.7865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1229.8993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1222.5907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1212.1449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1217.8126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (1205.6919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (1206.3464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (1205.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (1201.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (1205.7885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1201.9067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1201.044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1204.6116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1209.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1209.3878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1224.55)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1238.7227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1257.1796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1279.7935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1299.6155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1323.3396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1349.3309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1364.163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1367.7168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1375.3687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1379.9988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1369.7835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1360.6054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1353.4428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1332.0274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1297.5243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1274.4115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1252.8715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1233.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1231.1471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1231.205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1232.9685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1248.0663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1270.3151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1274.3862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1274.6887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1275.2825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1273.7175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1269.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1265.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1266.5077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1267.9506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1269.728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1271.5016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1273.0112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1278.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1277.4404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1275.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1273.7706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1271.7518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1269.8392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1269.4179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1270.8718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1274.4782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1280.3613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1279.5532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1276.5525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1273.4367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1271.6515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1272.0592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1275.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1278.6907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1280.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1282.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1283.6106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1281.0059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1277.2463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1275.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1275.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1278.2512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1278.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1277.4284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1275.676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1274.198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1272.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1273.4573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1271.5231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1265.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1258.6865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1258.6227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1259.2971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1262.0779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1264.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1265.6947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1267.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1267.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1268.607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1270.6205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1273.1723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1275.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1275.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1274.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1273.1284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1272.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1273.2106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1273.2349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1273.7185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1274.1735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1274.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1275.6466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1277.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1279.3994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1280.9347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1281.1277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1279.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1276.4589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1275.8368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1275.6729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1275.3641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1275.0051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1273.7434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1274.4932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1274.7374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1273.6882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1271.7904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1270.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1271.8624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1273.5702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1274.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1272.8346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1272.2619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1272.5443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1273.408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1274.1791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1274.0044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1274.8246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1275.2247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1276.1171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1277.4609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1278.6296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1279.7564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1278.1864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1275.7875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1273.9136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1273.6679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1276.2179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1275.7756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1274.4498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1273.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1272.1906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1272.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1271.9268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1272.1909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1273.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1274.0903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1274.3958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1273.7683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1272.7561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1271.8742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1271.5955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1271.519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1272.2422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1273.6182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1275.0892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1275.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1273.4152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1272.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1272.5339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1272.8255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1273.3014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1274.3068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1274.6893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1274.2937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1273.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1272.7634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1273.7688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1272.9597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1272.2677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1272.4716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1273.8115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1277.0608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1277.1694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1283.1347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1297.9349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1319.3135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1316.8635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1314.5505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1313.9677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1314.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1312.4385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1308.8753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1308.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (1166.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (1167.6813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (1168.3964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (1168.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (1167.8171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (1166.2647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (1164.5162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (1163.3416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1162.6395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1162.3151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1162.2781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1162.6082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1163.1078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1163.6604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1164.1725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1164.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1164.7914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1164.9136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1164.9887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1165.0607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1165.1663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1165.3005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1165.4109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1165.4889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1165.533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1165.5479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1165.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1165.5003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1165.4447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1165.3711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1165.2847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1165.1771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1165.0444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1164.8983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1164.7548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1164.6344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1164.5663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1164.5271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1164.4913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1164.4378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1164.3474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1164.2203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1164.0908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1163.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1163.8348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1163.7002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1163.5635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1163.4497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1163.3795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1163.3644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1163.4083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1163.4848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1163.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1163.5576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1163.5565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1163.5525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1163.5768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1163.6176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1163.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1163.6724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1163.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1163.5905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1163.5078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1163.4234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1163.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1163.2672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1163.1652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1163.0304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1162.8837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1162.7474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1162.6476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1162.6204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1162.6408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1162.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1162.6879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1162.6515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1162.5454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1162.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1162.2857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1162.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1162.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1162.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1162.155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1162.2451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1162.3734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1162.5255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1162.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1162.7291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1162.7693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1162.7865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1162.7977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1162.8273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1162.8849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1162.9614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1163.0397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1163.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1163.0847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1163.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1162.9545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1162.8648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1162.7615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1162.6237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1162.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1162.3519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1162.2499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1162.1652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1162.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1161.9932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1161.9238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1161.8644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1161.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1161.7116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1161.5941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1161.4627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1161.3251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1161.188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1161.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1160.9994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1160.9723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1160.9832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1161.0204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1161.0739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1161.1303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1161.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1161.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1161.3709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1161.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1161.5133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1161.5281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1161.5216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1161.505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1161.4415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1161.3103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1161.1371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1160.9428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1160.7472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1160.5492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1160.3593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1160.2123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1160.1326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1160.1348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1160.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1160.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1160.2643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1160.2261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1160.1412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1160.0322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1159.9304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1159.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1159.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1159.6006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1159.4818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1159.3779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1159.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1159.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1159.1023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1159.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1159.0878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1159.1637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1159.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1159.3817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1159.4982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1159.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1159.7509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1159.8414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1159.8805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1159.8584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1159.7988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1159.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1159.6182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1159.5271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1159.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1159.4559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1159.447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1159.4154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1159.3306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1159.1643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1158.959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1158.7389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1158.511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1158.2764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1158.0374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1157.8125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1157.6138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1157.4458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1157.3071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1157.1812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1157.0322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1156.8558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1156.6602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1156.4635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1156.3169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1156.2838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1156.3722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1156.5651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1156.8262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1157.0901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1157.3235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1157.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1157.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1157.8356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1157.8908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1157.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1157.7753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1157.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1157.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1157.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1157.8855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1158.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1158.1908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1158.2891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1158.3157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1158.3016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1158.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1158.2107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1158.1033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1157.9149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1157.7286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1157.6116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1157.5768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1157.6109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1157.6532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1157.6538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1157.6112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1157.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1157.4026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1157.2561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1157.1237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1157.0087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1156.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1156.8097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1156.7225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1156.6582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1156.6262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1156.6366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1156.6948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1156.7893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1156.8667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1156.919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1156.9526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1156.9786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1157.0046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1157.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1157.0392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1157.0261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1156.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1156.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1156.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1156.7565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1156.7018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1156.6583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1156.6253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1156.6124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1156.6218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1156.6428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1156.6576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1156.6257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1156.5663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1156.5454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1156.5962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1156.7328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1156.9279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1157.1176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1157.2931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1157.4588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1157.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1157.7915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1157.9555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1158.0974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1158.2072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1158.2781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1158.3069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1158.3209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1158.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1158.3796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1158.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1158.469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1158.4819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1158.4677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1158.4291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1158.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1158.3146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1158.2719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1158.2482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1158.2514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1158.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1158.3795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1158.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1158.6264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1158.7206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1158.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1158.7316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1158.6151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1158.4491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1158.2623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1158.0858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1157.9603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1157.8915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1157.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1157.8606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1157.8927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1157.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1158.0016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1158.0195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1158.0142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1158.0045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1158.0297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1158.0983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1158.1738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1158.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1158.2871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1158.3179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1158.3336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1158.3322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1158.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1158.2987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1158.2852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1158.2777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1158.2628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1158.2285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1158.1652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1158.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1157.9568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1157.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1157.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1157.8102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1157.8342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1157.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1157.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1157.7233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1157.6735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1157.6203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1157.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1157.4448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1157.3932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1157.3906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1157.4223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1157.4483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1157.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1157.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1157.5255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1157.5252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1157.4785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1157.4142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1157.3416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1157.2662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1157.1852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1157.1334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1157.1369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1157.1853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1157.2514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1157.2725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1157.2025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1157.0825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1156.9409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1156.8059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1156.7088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1156.6837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1156.7203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1156.8056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1156.9242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1157.0617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1157.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1157.3818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1157.5338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1157.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1157.7081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1157.7067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1157.6812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1157.6381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1157.5847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1157.5374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1157.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1157.6152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1157.72)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1157.8289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1157.8848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1157.821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1157.6813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1157.5109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1157.3569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1157.2703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1157.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1157.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1157.3436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1157.3921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1157.43)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1157.4385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1157.4157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1157.3745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1157.3305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1157.3007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1157.261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1157.1952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1157.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1157.0565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1157.0463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1157.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1157.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1157.0276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1156.9642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1156.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1156.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1156.9454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1156.9702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1156.9796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1156.9608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1156.9229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1156.8792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1156.8302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1156.7767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1156.7219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1156.6755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1156.6414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1156.6296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1156.6502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1156.7167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1156.8202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1156.9257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1157.0059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1157.0308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1156.9568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1156.7733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1156.5825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1156.4381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1156.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1156.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1156.4921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1156.6205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1156.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1156.8908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1156.9596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1156.9165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1156.7958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1156.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1156.4021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1156.1641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1155.9396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1155.7632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1155.6452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1155.5836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1155.5626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1155.5529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1155.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1155.5209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1155.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1155.4566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1155.427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1155.4136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1155.4142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1155.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1155.4347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1155.4362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1155.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1155.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1155.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1155.1788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1155.0961)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1155.066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1155.0842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1155.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1155.2001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1155.2533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1155.2926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1155.3141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1155.3147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1155.2902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1155.2459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1155.2015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1155.1669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1155.1521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1155.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1155.2426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1155.3317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1155.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1155.5048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1155.5844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1155.6625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1155.7255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1155.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1155.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1155.8796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1155.921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1155.9428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1155.9557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1155.9738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1156.0139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1156.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1156.1493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1156.1885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1156.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1156.0906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1155.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1155.8328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1155.7645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1155.7543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1155.7918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1155.8615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1155.9373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1155.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1155.9534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1155.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1155.5064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1155.1676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1154.8505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1154.6129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1154.5122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (1154.6124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (1154.8136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (1155.0588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (1155.2986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (1155.4904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1155.5852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1155.6058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1155.5697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1155.4983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1155.4175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1155.3504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1155.2804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1155.1945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1155.0877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1154.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1154.8646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1154.8264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1154.8518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1154.9244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1155.0067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1155.0181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1154.9703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1154.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1154.8002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1154.7258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1154.6817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1154.6508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1154.6301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1154.6198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1154.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1154.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1154.7117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1154.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1154.8971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1154.9878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1155.0387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1155.0878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1155.1566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1155.2579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1155.3942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1155.5729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1155.7748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1155.9732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1156.1443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1156.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1156.3662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1156.4869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1156.6128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1156.723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1156.7922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1156.8184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1156.8338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1156.8434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1156.8496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1156.8522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1156.8366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1156.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1156.698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1156.5654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1156.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1156.2744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1156.203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1156.1609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1156.1168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1156.0365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1155.9237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1155.8352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1155.7846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1155.7702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1155.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1155.7587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1155.6815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1155.5457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1155.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1155.1968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1155.1419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1155.227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1155.4221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1155.6841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1155.9559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1156.1585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1156.2852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1156.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1156.3502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1156.3323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1156.3493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1156.4198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1156.5328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1156.6691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1156.8012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1156.867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1156.8554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1156.7915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1156.7015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1156.6141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1156.525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1156.4244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1156.3356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1156.2769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1156.2627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1156.2722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1156.2544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1156.1945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1156.0884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1155.9406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1155.7678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1155.6106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1155.4913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1155.4225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1155.4076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1155.4282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1155.4535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1155.4973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1155.5748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1155.7007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1155.8666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1156.0209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1156.149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1156.2461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1156.3146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1156.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1156.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1156.5025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1156.5885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1156.67)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1156.7164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1156.7296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1156.7114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1156.6589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1156.5673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1156.4166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1156.2241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1156.0199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1155.838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1155.7161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1155.7069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1155.7643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1155.847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1155.9273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1155.9823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1155.9977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1156.0071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1156.0328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1156.0795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1156.1387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1156.1734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1156.1804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1156.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1156.1575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1156.1521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1156.1942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1156.2902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1156.4179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1156.5578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1156.6906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1156.7942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1156.8579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1156.8847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1156.8775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1156.8405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1156.7626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1156.6578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1156.5519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1156.4679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1156.4292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1156.4646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1156.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1156.6351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1156.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1156.7465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1156.7461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1156.7623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1156.8162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1156.9086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1157.0267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1157.1328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1157.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1157.289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1157.36)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1157.4343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1157.5032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1157.5449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (1157.5379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (1157.4683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (1157.3318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (1157.1589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (1157.0404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (1157.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (1157.1072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (1157.3141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (1157.6354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (1158.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (1158.3897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (1158.752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (1159.073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (1159.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (1159.515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (1159.6705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (1159.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (1160.2101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (1161.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (1163.7079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (1166.348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (1167.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (1167.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (1163.5767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (1160.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (1158.3312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (1157.3336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (1156.8919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (1156.8466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (1156.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (1157.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (1157.1127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (1157.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (1157.1724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (1157.0296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (1156.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (1156.6962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (1156.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (1156.7296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (1157.1433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (1157.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (1158.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (1159.4191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (1159.8153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (1159.8644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (1159.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (1159.5469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (1159.3855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (1159.2656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (1159.0902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (1158.9158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (1158.8495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (1159.015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (1159.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.43)) (quote (1160.1582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.44)) (quote (1160.5974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.45)) (quote (1160.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.46)) (quote (1160.4238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.47)) (quote (1159.7598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.48)) (quote (1158.9869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.49)) (quote (1158.2969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.5)) (quote (1157.7844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.51)) (quote (1157.5012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.52)) (quote (1157.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.53)) (quote (1157.579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.54)) (quote (1157.7496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (871.37806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (871.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (872.41974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (873.0465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (873.4211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (873.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (871.8753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (870.3518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (868.9183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (867.79425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (867.05054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (860.75184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (857.4569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (857.56165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (860.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (867.1793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (867.11426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (867.24897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (867.3528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (867.23304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (866.73804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (866.4982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (867.55567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (870.9154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (875.4879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (878.31476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (878.1022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (876.9945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (877.0761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (878.4431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (879.45105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (877.184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (869.9139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (863.8511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (860.7566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (858.71387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (857.57196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (858.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (859.52356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (862.00477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (865.94037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (868.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (867.6468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (865.99964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (864.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (865.05524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (865.71186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (865.5618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (865.23584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (865.6842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (868.0799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (871.84675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (874.1305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (874.9962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (874.6099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (873.30164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (872.9891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (873.03986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (877.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (883.4059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (885.7509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (886.3734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (887.5623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (888.8488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (889.8343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (890.10816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (887.69056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (904.07404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (915.8009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (918.6315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (921.1868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (922.12244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (921.00007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (919.0651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (917.98377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (919.63385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (922.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (924.0608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (924.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (925.33155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (926.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (926.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (926.1242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (926.64325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (928.39075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (931.11585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (932.783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (933.49884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (933.83075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (934.21467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (935.02924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (936.6273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (938.0171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (938.6675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (938.51386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (937.8042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (936.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (936.46875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (936.5501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (936.91407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (937.27356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (937.38477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (937.20795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (936.6439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (935.7451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (934.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (933.7021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (932.7421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (931.42115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (929.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (928.35816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (928.28766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (928.3384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (928.34986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (928.24506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (928.0022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (927.7614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (928.3746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (929.6086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (930.94294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (931.758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (932.76667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (933.89997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (934.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (934.1862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (933.6574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (934.36347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (935.7927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (937.29487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (938.2829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (938.2414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (937.338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (936.3175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (935.38715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (934.6101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (933.91944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (932.4834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (930.5499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (928.7642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (927.5377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (927.08185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (926.51337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (925.9562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (925.88965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (926.136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (926.14704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (924.7769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (923.5915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (923.02527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (922.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (922.0589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (920.7933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (920.09095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (920.5221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (922.0971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (924.4115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (925.8024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (926.8947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (928.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (929.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (930.5043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (931.2861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (932.37085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (933.28614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (933.74866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (933.639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (933.6232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (934.08326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (934.4272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (934.19196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (933.0561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (931.50116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (929.9078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (928.09296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (925.9158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (923.2289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (919.5189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (917.23597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (915.8414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (914.23865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (912.95746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (929.8199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (948.99115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (957.72406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (948.8972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (921.3221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (902.02405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (899.3762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (897.4353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (893.62836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (890.17566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (890.9996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (892.83515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (894.7728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (897.4141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (901.66736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (906.9657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (911.6977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (915.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (916.357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (915.02204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (912.9943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (912.7629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (915.47077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (919.1453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (921.02204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (920.85224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (919.30567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (918.21875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (917.9881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (918.4854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (919.25745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (919.5111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (919.3382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (919.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (919.02137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (918.82447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (914.0888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (909.6608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (906.9962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (906.34327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (906.8312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (911.3153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (915.75086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (918.5244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (918.85975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (916.6176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (910.05555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (903.1028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (906.6331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (928.23615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (944.2493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (960.2625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (965.0141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (962.2702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (959.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (961.0314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (942.0024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (924.5657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (916.1723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (918.07154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (918.80524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (917.88794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (916.17585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (912.3072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (906.06067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (906.6287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (905.8171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (902.0698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (896.14624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (889.5407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (883.8839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (883.9286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (886.1888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (888.7891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (890.0322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (887.36585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (903.21906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (921.8356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (928.6674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (915.3063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (901.9452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (916.18537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (920.8239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (917.755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (916.30146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (917.00544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (919.48255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (922.49054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (925.25507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (927.1063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (927.33625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (926.3382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (925.06366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (924.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (924.2608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (926.15046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (927.7078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (927.625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (925.8022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (922.77497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (920.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (922.8644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (926.1192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (928.3134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (928.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (927.03266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (926.91126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (927.4455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (928.2219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (928.89814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (929.3731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (929.6144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (929.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (929.7239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (929.9027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (930.11835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (929.20447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (927.81366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (926.74897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (926.50727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (926.2739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (925.15485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (924.21955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (923.9154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (924.5589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (926.56244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (929.66767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (930.9702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (929.97327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (927.4059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (926.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (928.07905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (929.8326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (931.35047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (932.04816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (931.0446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (929.75544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (929.3978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (929.75696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (930.2763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (930.08625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (929.544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (929.5384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (930.23755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (931.25605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (930.70514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (928.3651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (926.98517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (927.2704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (928.8818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (929.1769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (928.94416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (929.20044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (929.65155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (929.5819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (927.4307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (925.9516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (924.9748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (924.3703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (924.39136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (926.6768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (927.62696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (926.25666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (918.7899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (905.6051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (900.65577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (897.4643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (895.15345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (894.20997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (894.72034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (895.2307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (895.78925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (895.12195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (893.88196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (893.24646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (895.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (897.3516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (900.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (910.41864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (927.1764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (927.25885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (929.9956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (932.114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (932.70405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (931.3251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (927.76325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (926.40436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (927.7932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (930.8883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (934.2531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (935.95514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (935.2171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (934.24805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (933.20826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (931.97846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (930.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (928.9929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (928.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (928.4195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (929.4102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (931.97315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (933.75324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (933.4545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (931.7366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (929.7752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (929.5071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (930.1476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (930.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (931.4284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (931.6174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (930.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (928.6246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (927.6771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (927.29206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (927.1986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (927.2819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (928.5466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (929.6349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (930.2768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (930.3833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (929.991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (926.2214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (924.1623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (924.5139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (927.4037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (932.8473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (931.4241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (928.4632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (921.782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (912.7691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (911.9216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (913.14087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (915.1594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (918.8842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (923.34217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (923.16907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (918.1958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (909.37934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (895.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (880.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (880.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0)) (quote (534.0057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01)) (quote (534.8265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.02)) (quote (535.2872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (535.3786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (535.1124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (534.5217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (533.91224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (533.52655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (533.31757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (533.14716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (532.7877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (531.7704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (530.40857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (529.0494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (527.9471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (527.2684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (527.0022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (526.8908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (526.89216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (526.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (527.1276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (527.33124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (527.57917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (527.85035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (528.09607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (528.24146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (528.10877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (527.7131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (527.05896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (526.16834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (525.0841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (523.9473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (523.01276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (522.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (521.8923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (521.62104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (521.3967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (521.1615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (520.96436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (520.8578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (520.89716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (521.1462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (521.4838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (521.80005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (522.00104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (522.0061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (521.8006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (521.6212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (521.5914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (521.76587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (522.1412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (522.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (523.0235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (523.34937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (523.54377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (523.5705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (523.3851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (523.09766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (522.72004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (522.23914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (521.62824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (520.91565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (520.3203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (519.9359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (519.77924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (519.80317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (519.8757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (519.90674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (519.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (519.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (520.0253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (520.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (520.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (520.7549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (521.0535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (521.3375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (521.50464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (521.54255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (521.5318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (521.5497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (521.6723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (521.92377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (522.21326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (522.53595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (522.89405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (523.29096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (523.6879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (524.0334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (524.3354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (524.61017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (524.8773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (525.0799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (525.1674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (525.1868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (525.1773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (525.1738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (525.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (525.0675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (525.00214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (524.95014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (524.9034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (524.8301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (524.7678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (524.70966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (524.6151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (524.4235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (524.0634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (523.67127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (523.3204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (523.0356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (522.81257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (522.63007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (522.5046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (522.44336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (522.4343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (522.4522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (522.478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (522.5504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (522.68335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (522.8634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (523.05774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (523.204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (523.3317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (523.49244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (523.70386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (523.9601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (524.1796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (524.33027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (524.4586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (524.5863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (524.7185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (524.7792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (524.71735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (524.53815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (524.24286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (523.8368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (523.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (522.7722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (522.2724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (521.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (521.57654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (521.42225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (521.34107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (521.2918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (521.2369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (521.1378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (520.9509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (520.7266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (520.5099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (520.33057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (520.2128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (520.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (520.2769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (520.41596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (520.6132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (520.8733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (521.2293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (521.62037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (521.9885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (522.30744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (522.56727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (522.7802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (522.9757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (523.1506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (523.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (523.4173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (523.5023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (523.529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (523.46235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (523.2882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (523.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (522.6809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (522.35657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (521.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (521.5248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (520.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (519.99115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (518.99616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (518.02265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (517.1263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (516.3329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (515.6489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (515.0819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (514.6849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (514.49677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (514.5301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (514.7096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (514.83155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (514.9032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (514.99494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (515.19684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (515.5637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (515.90357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (516.14924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (516.3266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (516.5063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (516.82605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (517.24384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (517.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (518.00055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (518.2661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (518.4738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (518.67414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (518.86744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (519.03974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (519.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (519.22516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (519.2352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (519.2613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (519.3293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (519.4447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (519.5507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (519.5395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (519.3966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (519.1359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (518.78846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (518.3891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (517.9624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (517.53486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (517.14606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (516.8413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (516.6911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (516.6372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (516.60114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (516.5691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (516.5533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (516.6235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (516.74616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (516.8398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (516.87214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (516.8356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (516.7771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (516.79847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (516.91816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (517.1131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (517.3383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (517.51337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (517.62226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (517.70704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (517.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (517.8395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (517.8058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (517.58576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (517.23017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (516.818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (516.4413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (516.1962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (516.0378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (515.93244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (515.88587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (515.91077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (516.03046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (516.2189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (516.4335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (516.6538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (516.8721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (517.1261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (517.46814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (517.84864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (518.22175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (518.5473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (518.81055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (519.0734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (519.3381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (519.59205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (519.82575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (520.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (520.3297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (520.6073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (520.8521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (521.0266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (521.09015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (521.05176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (520.95997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (520.86005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (520.7971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (520.8153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (520.8464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (520.82355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (520.74775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (520.648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (520.60724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (520.6641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (520.7789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (520.9366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (521.1275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (521.35706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (521.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (521.80445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (521.97345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (522.09656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (522.16407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (522.1265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (521.98737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (521.7891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (521.5906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (521.4766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (521.4173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (521.3503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (521.27594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (521.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (521.2031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (521.2404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (521.3043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (521.3921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (521.49396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (521.5653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (521.5518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (521.5249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (521.5434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (521.64826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (521.83136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (521.9962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (522.1125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (522.1811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (522.21326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (522.22864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (522.23267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (522.21485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (522.1793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (522.13715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (522.1131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (522.0782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (521.99054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (521.8478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (521.66816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (521.5118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (521.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (521.5001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (521.5802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (521.6578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (521.6892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (521.6932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (521.67395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (521.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (521.47596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (521.2738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (521.09925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (520.9899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (520.9251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (520.86786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (520.75824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (520.5949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (520.4202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (520.2497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (520.09626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (519.9792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (519.95807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (520.05317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (520.2591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (520.5518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (520.8781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (521.1207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (521.2439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (521.28046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (521.2853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (521.34534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (521.4381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (521.50635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (521.55207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (521.58954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (521.64594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (521.7533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (521.9241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (522.1451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (522.38764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (522.5919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (522.6808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (522.6635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (522.5685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (522.43775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (522.33765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (522.30066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (522.2908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (522.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (522.23835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (522.1192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (521.91486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (521.72175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (521.60547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (521.6105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (521.75196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (521.9403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (522.08777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (522.16956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (522.18165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (522.1465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (522.12275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (522.1053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (522.0651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (521.97394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (521.8036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (521.5629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (521.3231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (521.1448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (521.07526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (521.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (521.2613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (521.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (521.21967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (521.0355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (520.79865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (520.62604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (520.5195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (520.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (520.3856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (520.2908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (520.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (519.95905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (519.7691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (519.5937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (519.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (519.35614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (519.3075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (519.3089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (519.348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (519.3864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (519.3397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (519.2031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (518.9923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (518.73664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (518.4861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (518.3197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (518.21387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (518.1374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (518.06257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (517.9696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (517.8289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (517.60334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (517.29194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (516.92145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (516.5637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (516.3182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (516.14234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (516.02277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (515.96344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (516.00495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (516.17426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (516.34107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (516.4432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (516.46674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (516.47345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (516.6153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (516.84)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (517.0553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (517.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (517.07776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (516.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (516.4794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (516.25275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (516.13526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (516.1111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (516.16474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (516.28345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (516.4304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (516.57087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (516.67475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (516.7955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (516.9348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (517.06324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (517.1611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (517.22547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (517.2769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (517.32587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (517.37446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (517.4202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (517.454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (517.44587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (517.4003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (517.32764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (517.2436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (517.17237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (517.15686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (517.1911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (517.24695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (517.2849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (517.2477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (517.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (517.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (517.0381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (517.0361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (516.9915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (516.8608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (516.697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (516.51325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (516.3211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (516.1324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (515.9585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (515.74024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (515.4417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (515.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (514.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (514.7089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (514.9471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (515.3219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (515.7234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (516.064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (516.30726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (516.4087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (516.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (516.0723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (515.8446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (516.0765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (516.5565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (517.0239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (517.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (517.4219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (517.48377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (517.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (517.31006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (517.05005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (516.7356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (516.4393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (516.13556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (515.82447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (515.53516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (515.3335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (515.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (515.19916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (515.18506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (515.24097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (515.39954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (515.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (515.8068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (515.89997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (515.8364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (515.57856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (515.4563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (515.6672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (516.07276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (516.4883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (516.67945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (516.57947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (516.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (516.2933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (516.2097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (516.21174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (516.37555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (516.6112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (516.8624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (517.09986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (517.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (517.58014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (517.83967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (518.0993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (518.37647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (518.7085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (519.1078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (519.48414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (519.82056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (520.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (520.37995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (520.58765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (520.74176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (520.8558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (520.93177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (520.96027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (520.86597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (520.679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (520.4317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (520.1567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (519.8873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (519.6624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (519.44654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (519.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (518.9312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (518.6264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (518.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (518.1225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (517.87305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (517.5827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (517.2385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (516.9055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (516.6398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (516.45636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (516.3573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (516.33106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (516.3066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (516.27057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (516.30964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (516.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (516.8925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (517.4562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (517.97175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (518.3818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (518.6741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (518.87745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (519.1006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (519.36744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (519.6409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (519.8954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (520.11414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (520.299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (520.4579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (520.58887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (520.6871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (520.74585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (520.73456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (520.6648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (520.5409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (520.3629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (520.12885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (519.81617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (519.4637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (519.1271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (518.85206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (518.6747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (518.52936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (518.2801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (517.94275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (517.57325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (517.26117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (517.14026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (517.13514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (517.1792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (517.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (517.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (517.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (517.5559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (517.87714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (518.28754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (518.7288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (519.1023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (519.4122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (519.6738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (519.8902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (520.05787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (520.1658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (520.2562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (520.3303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (520.3617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (520.30335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (520.03467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (519.60834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (519.11707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (518.64356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (518.26746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (518.0502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (517.91376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (517.83735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (517.82435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (517.8905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (518.051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (518.24634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (518.4621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (518.6872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (518.9115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (519.1217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (519.33844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (519.55426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (519.73224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (519.8161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (519.7155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (519.53675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (519.379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (519.3069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (519.36347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (519.5544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (519.7616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (519.92975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (520.0362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (520.07947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (520.0862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (520.0673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (519.9929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (519.8411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (519.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (519.29517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (519.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (518.93665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (518.98346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (519.18555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (519.4487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (519.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (519.8169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (519.91584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (519.9534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (519.8988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (519.8024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (519.68824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (519.5489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (519.35944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (519.05347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (518.6346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (518.1251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (517.5548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (516.9672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (516.4757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (516.12574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (515.89966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (515.7941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (515.80597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (515.94086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (516.14765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (516.45276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (516.8832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (517.45234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (518.0748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (518.57947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (518.9308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (519.1228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (519.1683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (519.04664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (518.7921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (518.4592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (518.04676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (517.51197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (516.5588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (514.9654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (512.79505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (510.2582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (507.703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (505.9401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (505.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (507.4343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (510.6137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (514.0566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (515.32947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (515.0566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (515.29126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (517.2826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (521.3455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (522.0005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (518.88575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (515.34974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (513.16486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (513.3282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (515.0128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (517.1205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (518.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (520.074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (520.14374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (519.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (518.3239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (517.6482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (517.296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (517.2005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (517.3859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (517.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (516.9219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (515.95887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (514.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (514.02485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.43)) (quote (513.76465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.44)) (quote (513.70636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.45)) (quote (513.7126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.46)) (quote (513.6925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.47)) (quote (513.7106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.48)) (quote (514.0596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.49)) (quote (514.7142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.5)) (quote (515.4474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.51)) (quote (515.9267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.52)) (quote (515.6141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.53)) (quote (514.44825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.03)) (quote (2222.682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.04)) (quote (2224.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (2225.7254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (2222.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (2221.0056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (2213.6463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (2204.9392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (2211.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (2218.5022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (2219.6184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (2219.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (2218.6878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (2218.4624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (2218.3885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (2218.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (2218.7442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (2219.2027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (2219.8174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (2220.4324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (2221.0003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (2221.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (2221.9033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (2222.086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (2221.804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (2221.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2219.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2217.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2215.3606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2212.7735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2210.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2209.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2208.6345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2208.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2207.6372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2207.2278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2206.9114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2206.6419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2206.3418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2206.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2206.5872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2207.0279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2207.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2207.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2206.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2206.2554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2206.5467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2207.3738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2208.5799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2209.629)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2210.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2210.6873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2210.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2210.9468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2210.6494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2210.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2209.298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2208.2957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2207.039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2205.3872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2203.979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2203.1404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2202.8919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2203.008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2202.8875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2202.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2202.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2202.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2202.2298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2202.5772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2203.2798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2204.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2204.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2205.3572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2205.5166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2205.3806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2205.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2205.0552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2205.2593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2205.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2206.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2207.7386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2208.6902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2209.5493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2210.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2210.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2211.3672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2211.8743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2212.416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2212.8907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2213.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2213.2422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2213.3672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2213.5877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2213.6682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2213.4514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2213.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2212.8223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2212.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2212.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2211.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2211.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2211.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2211.1182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2210.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2209.4148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2208.6092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2207.9864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2207.5637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2207.3025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2207.0513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2206.7317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2206.3128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2205.806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2205.42)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2205.437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2205.829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2206.4754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2207.1783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2207.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2207.9573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2208.3877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2208.9986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2209.7742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2210.3067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2210.4187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2210.3975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2210.4226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2210.6084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2210.7434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2210.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2210.1536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2209.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2208.5623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2207.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2206.1678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2205.0254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2204.1023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2203.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2203.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2203.32)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2203.3338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2203.1973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2202.7854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2202.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2201.39)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2200.6883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2200.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2199.4002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2199.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2199.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2199.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2200.4632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2201.0066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2201.7395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2202.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2203.264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2203.9104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2204.5078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2205.0906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2205.651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2206.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2206.7454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2207.2259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2207.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2207.3465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2206.9104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2206.2813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2205.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2205.1223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2204.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2204.1944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2203.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2201.4607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2198.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2195.6685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2193.496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2192.0825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2191.1988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2189.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2188.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2186.6687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2186.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2187.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2187.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2186.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2185.5345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2185.3865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2186.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2188.1927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2188.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2189.1043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2189.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2190.4517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2191.3362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2192.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2193.0325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2193.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2194.5642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2195.1258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2195.5108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2195.8255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2196.138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2196.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2196.7146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2196.791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2196.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2197.2364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2197.6458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2197.7708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2197.283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2196.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2195.5462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2194.773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2194.0762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2193.2405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2192.416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2191.721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2191.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2190.9495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2190.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2190.6236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2190.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2190.5982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2190.5474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2190.4617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2190.4253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2190.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2190.5174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2190.4627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2190.2854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2190.2354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2190.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2191.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2192.0418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2192.6663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2192.836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2192.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2192.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2192.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2192.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2191.772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2190.9532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2189.9676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2189.2898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2189.07)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2189.0425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2189.013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2188.8435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2188.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2188.8194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2189.338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2189.9807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2190.4995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2190.7237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2191.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2191.7893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2192.7808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2193.8726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2194.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2195.3838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2196.0552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2196.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2197.4195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2198.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2198.9046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2199.6695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2200.295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2200.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2200.5425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2200.1614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2199.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2199.8496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2200.0813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2200.3387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2200.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2200.1145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2199.7879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2199.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2199.3394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2199.4475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2199.6922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2200.021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2200.4014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2200.8738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2201.4285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2201.937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2202.3553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2202.6707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2202.9048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2202.9026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2202.584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2202.0252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2201.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2200.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2200.6597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2200.4475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2200.2705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2200.178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2200.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2200.5108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2200.6348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2200.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2200.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2201.1316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2201.2515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2201.2769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2201.329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2201.5198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2201.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2202.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2202.4373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2202.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2202.6053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2202.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2202.6734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2202.6372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2202.5533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2202.4507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2202.3682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2202.1949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2201.912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2201.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2201.2268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2200.9307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2200.7613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2200.756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2200.8777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2201.0547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2201.166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2201.2166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2201.2083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2201.054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2200.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2200.1192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2199.7266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2199.6153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2199.6546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2199.65)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2199.3108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2198.7945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2198.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2197.9385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2197.4854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2196.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2196.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2196.8428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2197.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2198.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2199.4256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2199.7825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2199.7473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2199.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2199.3448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2199.4842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2199.6792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2199.7532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2199.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2199.9353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2200.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2200.6902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2201.2679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2201.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2202.7232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2203.2993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2203.4783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2203.3296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2202.9502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2202.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2202.0547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2201.91)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2202.01)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2202.2005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2202.282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2201.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2201.2669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2200.6975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2200.4693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2200.6844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2201.2823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2201.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2201.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2201.7837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2201.5672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2201.5108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2201.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2201.6128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2201.5286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2201.3289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2201.0286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2200.5117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2199.9178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2199.4458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2199.2522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2199.4102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2199.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2199.6875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2199.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2199.1568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2198.6663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2198.3235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2198.1167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2197.9302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2197.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2197.235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2196.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2196.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2195.9178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2195.5034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2195.1653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2194.9893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2194.929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2194.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2195.1863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2195.5056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2195.7425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2195.7073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2195.3406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2194.6414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2193.6783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2192.718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2192.0642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2191.8186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2191.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2192.2735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2192.3006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2191.9859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2191.4583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2190.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2190.5208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2190.1143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2189.4468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2188.6675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2187.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2187.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2187.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2188.1)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2188.2642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2188.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2188.7056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2189.344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2189.5757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2189.4776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2189.2786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2189.4016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2189.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2189.5882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2189.0923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2188.22)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2187.325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2187.3782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2187.9073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2188.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2187.8777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2187.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2187.7808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2188.7388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2189.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2189.3072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2188.9593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2189.2967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2190.0108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2190.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (2190.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (2189.9602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (2189.8003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (2189.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (2190.0728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (2189.9173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (2189.5562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (2189.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (2189.9317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (2190.3845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (2190.6429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (2190.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (2190.0237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (2189.7442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (2189.6297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (2189.5594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (2189.2693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (2189.1768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (2189.458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (2189.7454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (2189.5804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (2188.3609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (2187.5935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2187.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2188.698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2189.446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2189.0056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2188.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2188.2437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2187.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2186.6922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2188.5818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2210.5222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (2222.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (2230.2984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (2230.3609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (2200.6873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (2177.5882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (2173.5388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2184.4964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2199.9449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2201.3675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2198.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2196.278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2193.6927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2190.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2186.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2186.035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2186.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (2190.805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (2198.5305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (2204.3062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (2206.7342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (2206.4353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (2204.3587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (2200.322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (2192.7237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (2166.1995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (2174.2134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (2196.7595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (2210.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (2190.991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (2195.819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (2202.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (2208.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (2209.8865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (2208.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (2195.884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (2190.5755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (2188.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (2186.477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (2185.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (2186.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (2187.9129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (2189.4156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (2190.8655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (2191.7193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (2191.227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (2191.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (2191.6482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (2192.6946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (2193.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (2194.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (2195.4366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (2195.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (2196.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2197.4449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (2198.134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (2198.5054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (2198.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (2198.9778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (2199.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (2199.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (2198.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (2198.1758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (2197.441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (2196.91)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (2196.6143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (2196.1775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (2195.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (2194.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (2193.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (2192.0127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (2191.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (2191.0623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (2190.8504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (2190.3833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (2189.7913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (2189.5423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (2189.4463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (2189.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (2188.6248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (2187.7415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (2187.3719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (2187.5142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (2188.0723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (2188.8609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (2189.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (2191.094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (2192.4058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (2193.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (2194.4324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (2195.0733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (2195.5945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (2196.0113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (2196.3845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (2196.8133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (2197.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (2197.6577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (2197.9695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (2198.2808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (2198.6443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (2198.7969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (2198.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (2198.3098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (2197.8116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (2197.1575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (2196.2088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (2195.1714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (2194.2737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (2193.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (2193.479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (2193.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (2192.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (2191.8836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (2190.8445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (2189.8025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (2189.266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (2189.3098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (2189.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (2190.149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (2190.406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (2190.2276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (2190.254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (2190.843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (2192.0625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (2193.7346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (2194.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (2195.4549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (2195.823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (2196.1585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (2196.5696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (2197.0467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (2197.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (2197.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (2198.1155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (2197.9485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (2197.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (2195.687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (2194.2735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (2193.1136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (2192.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (2192.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (2191.673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (2191.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (2191.0672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (2191.1297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (2191.6519)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (2192.29)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (2192.925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (2193.4937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (2193.966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (2194.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (2194.8015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (2195.4114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (2196.0432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (2196.4532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (2196.1922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (2195.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (2195.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (2194.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (2194.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (2195.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (2195.9329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (2196.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (2197.1472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (2197.1397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (2196.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (2196.9307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (2196.8662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (2196.636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (2196.0655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (2195.0972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (2194.3372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (2194.0174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (2194.1765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (2194.7224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (2195.44)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (2196.1783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (2196.7654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (2197.0955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (2197.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (2196.8728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (2196.6158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (2196.446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (2196.3845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (2196.3797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (2196.0274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (2194.7832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (2193.0266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (2191.2632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (2190.0786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (2189.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (2190.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (2189.9766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (2189.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (2189.4766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (2189.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (2188.9085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (2189.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (2190.359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (2192.3264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (2194.6158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (2196.1626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (2197.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (2197.4324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (2197.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (2198.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (2197.6158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (2196.4534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (2194.8382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (2193.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (2191.032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (2187.2254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (2185.0735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (2186.0757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (2190.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (2196.4468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (2198.991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (2188.4856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (2179.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (2191.41)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (2203.662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (2192.3245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (2185.4002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (3472.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (3474.3155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (3476.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (3476.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (3475.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (3478.8614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (3482.0066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (3486.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (3490.2317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (3492.9654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (3495.0535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (3495.8284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (3495.5218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (3494.8645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (3494.38)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (3494.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (3494.4258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (3494.8509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (3496.1433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (3498.1472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (3500.1194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (3499.3518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (3497.7996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (3495.965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (3494.2356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (3492.9138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (3492.6062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (3492.828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (3493.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (3493.807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (3494.0618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (3493.84)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (3493.3826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (3492.8396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (3492.3636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (3492.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (3492.173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (3492.3152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (3492.3684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (3492.2032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (3491.723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (3491.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (3490.6375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (3490.5713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (3490.8047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (3491.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (3491.5462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (3491.7222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (3491.738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (3491.6775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (3491.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (3491.6897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (3491.4407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (3491.0008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (3490.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (3490.0838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (3489.748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (3489.51)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (3489.4978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (3489.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (3489.9566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (3489.6834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (3488.9842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (3488.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (3487.9397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (3488.1136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (3488.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (3489.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (3488.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (3488.5684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (3488.0752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (3487.6712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (3487.2534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (3486.951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (3486.8396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (3486.9375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (3486.7693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (3486.4334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (3486.412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (3486.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (3487.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (3488.3335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (3488.3587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (3488.2412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (3488.198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (3488.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (3488.5498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (3488.6033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (3488.6028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (3488.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (3488.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (3489.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (3490.2603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (3490.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (3489.7898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (3488.9693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (3488.3528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (3488.095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (3487.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (3487.0996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (3485.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (3485.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (3484.9756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (3485.294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (3485.5725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (3485.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (3484.7139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (3484.6604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (3484.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (3485.1548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (3484.7373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (3483.7615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (3483.2388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (3483.2422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (3483.5906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (3483.9278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (3483.69)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (3483.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (3482.5098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (3482.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (3483.6665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (3485.6585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (3487.0279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (3487.1365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (3485.6524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (3482.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (3480.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (3481.911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (3483.9275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (3485.344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (3484.5696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (3482.093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (3479.9478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (3478.9666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (3479.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (3480.6004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (3481.7058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (3481.9602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (3481.4815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (3480.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (3479.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (3479.2222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (3479.4336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (3479.392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (3478.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (3478.2007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (3477.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (3478.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (3477.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (3477.279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (3476.6687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (3476.7408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (3477.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (3478.9016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (3479.9129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (3480.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (3480.113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (3480.0977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (3480.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (3480.4326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (3480.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (3479.3775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (3479.0782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (3479.2044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (3479.5564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (3479.799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (3479.4007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (3478.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (3476.9597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (3475.7574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (3475.072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (3475.163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (3475.351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (3475.291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (3474.9073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (3474.2517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (3473.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (3472.9107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (3472.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (3472.0718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (3471.6302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (3470.9912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (3470.3103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (3469.7073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (3469.245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (3468.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (3469.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (3469.75)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (3470.6668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (3471.654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (3472.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (3472.9156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (3473.0174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (3472.9803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (3472.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (3473.2508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (3473.8035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (3474.141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (3474.167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (3474.0237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (3473.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (3474.1282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (3474.3108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (3474.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (3474.8306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (3475.1902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (3475.0603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (3474.568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (3474.3023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (3474.3035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (3474.3845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (3474.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (3473.3733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (3472.8172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (3472.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (3472.1258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (3471.7137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (3471.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (3471.2085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (3471.1817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (3471.1902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (3471.122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (3471.053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (3470.8704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (3470.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (3470.3318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (3470.4383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (3470.7554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (3470.9822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (3471.0852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (3471.1035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (3471.0403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (3470.8645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (3470.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (3471.0342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (3471.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (3471.5186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (3471.139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (3470.5967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (3470.1348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (3469.9583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (3470.1768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (3470.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (3470.7757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (3470.8062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (3470.5303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (3469.8853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (3469.378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (3469.285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (3469.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (3470.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (3470.3533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (3470.71)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (3471.1035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (3471.398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (3471.472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (3471.4488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (3471.7254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (3472.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (3472.706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (3473.0447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (3473.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (3473.4842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (3473.7913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (3474.0357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (3474.1018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (3473.9143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (3474.018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (3474.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (3475.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (3476.2058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (3475.9302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (3475.4837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (3475.4129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (3475.7327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (3476.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (3476.1678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (3475.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (3474.1314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (3473.761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (3474.4248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (3475.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (3476.004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (3475.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (3475.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (3475.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (3475.9217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (3476.162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (3475.9048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (3475.199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (3474.2349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (3473.4229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (3473.0354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (3473.0152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (3473.3587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (3474.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (3474.7166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (3474.7007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (3474.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (3473.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (3473.2056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (3473.9492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (3474.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (3474.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (3474.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (3475.317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (3475.9253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (3475.9705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (3475.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (3474.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (3474.7058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (3474.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (3474.3692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (3473.9085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (3473.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (3473.6426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (3474.1004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (3474.281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (3473.9444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (3473.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (3472.5855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (3472.3826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (3472.7444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (3473.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (3473.428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (3473.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (3472.643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (3472.2952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (3472.388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (3472.6968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (3472.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (3472.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (3472.2615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (3471.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (3472.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (3472.4405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (3472.8599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (3472.7574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (3472.4322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (3472.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (3471.8929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (3471.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (3471.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (3471.4956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (3471.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (3471.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (3471.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (3471.526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (3471.258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (3470.7845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (3470.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (3470.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (3470.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (3470.8235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (3471.46)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (3472.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (3472.3272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (3472.2923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (3472.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (3472.7105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (3472.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (3473.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (3473.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (3473.0584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (3472.8355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (3472.3513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (3472.0337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (3472.5952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (3473.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (3474.0345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (3474.0398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (3473.895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (3474.1548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (3474.0445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (3473.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (3471.814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (3471.0952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (3471.6309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (3472.0906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (3472.0703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (3471.5899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (3471.4558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (3471.8313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (3472.1353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (3472.1934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (3471.9632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (3471.5913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (3471.3443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (3471.1433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (3470.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (3470.932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (3471.2469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (3471.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (3472.355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (3472.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (3471.2146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (3470.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (3469.9324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (3470.0828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (3470.3765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (3470.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (3470.6892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (3470.815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (3470.8828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (3470.7727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (3470.4387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (3469.9798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (3469.7517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (3469.764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (3469.9507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (3470.2317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (3470.5196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (3470.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (3470.4995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (3470.2224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (3469.8919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (3469.6165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (3469.5293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (3469.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (3469.5288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (3469.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (3469.3863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (3469.4763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (3469.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (3470.2188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (3470.6783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (3470.9287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (3470.7393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (3470.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (3469.7957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (3469.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (3468.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (3467.3994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (3466.8867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (3466.8335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (3467.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (3467.2405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (3466.671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (3465.9695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (3465.4568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (3465.2566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (3465.1883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (3465.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (3465.2168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (3465.527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (3465.8523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (3465.8804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (3465.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (3465.7193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (3465.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (3466.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (3466.5628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (3466.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (3465.3892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (3464.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (3463.759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (3463.9178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (3464.8147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (3465.4812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (3465.807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (3465.8365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (3465.7854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (3465.8672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (3465.9414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (3465.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (3466.0074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (3466.1949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (3466.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (3466.9815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (3467.0904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (3466.9346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (3466.638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (3466.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (3466.6929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (3466.948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (3467.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (3467.0474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (3467.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (3467.3323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (3467.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (3468.5066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (3468.941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (3469.0889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (3469.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (3468.8304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (3468.5)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (3468.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (3467.6118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (3467.323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (3467.2364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (3467.3335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (3467.528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (3467.6184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (3467.77)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (3467.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (3468.1126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (3467.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (3465.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (3463.7752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (3461.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (3461.0882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (3461.4978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (3463.3284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (3465.4895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (3467.3174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (3468.352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (3468.3457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (3467.5784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (3466.7788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (3466.2366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (3466.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (3466.277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (3466.3885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (3466.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (3465.7027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (3465.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (3464.7473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (3464.7315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (3464.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (3464.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (3464.0117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (3463.6924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (3464.188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (3464.8308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (3465.0987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (3464.7744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (3463.9734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (3463.489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (3463.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (3463.688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (3463.8924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (3463.8428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (3463.8247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (3464.1035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (3464.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (3465.022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (3465.249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (3465.226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (3465.4805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (3466.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (3467.1717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (3468.2542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (3468.5889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (3468.5616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (3468.4126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (3468.3445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (3468.5227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (3469.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (3470.033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (3471.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (3472.1433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (3472.6956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (3472.2522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (3471.7149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (3471.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (3471.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (3470.9646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (3470.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (3469.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (3468.9534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (3468.3174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (3467.965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (3468.1678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (3468.5847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (3468.8858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (3468.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (3468.6533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (3468.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (3468.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (3467.814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (3467.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (3466.262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (3466.1194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (3466.3286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (3466.352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (3465.9366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (3465.0877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (3464.788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (3465.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (3466.3)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (3467.3936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (3468.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (3468.7393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (3469.091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (3469.477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (3469.9366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (3470.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (3470.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (3470.8584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (3471.024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (3471.0662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (3470.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (3470.7078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (3470.7117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (3470.6775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (3470.4502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (3469.912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (3469.1306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (3468.5074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (3468.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (3468.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (3468.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (3469.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (3469.2383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (3468.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (3468.3775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (3467.5882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (3466.7154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (3466.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (3466.0982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (3466.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (3467.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (3467.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (3466.9334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (3466.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (3466.2605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (3467.1077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (3468.0232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (3468.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (3468.3714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (3468.5242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (3469.0193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (3469.5413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (3469.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (3470.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (3470.536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (3470.5623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (3470.2149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (3470.0132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (3469.873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (3469.6775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (3469.303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (3469.078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (3468.8448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (3468.1692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (3467.1702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (3466.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (3466.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (3467.4563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (3467.9104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (3468.0808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (3468.3304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (3469.0008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (3469.3694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (3469.3562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (3469.0308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (3468.577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (3468.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (3468.4449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (3468.4998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (3468.3963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (3468.1053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (3468.2359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (3468.863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (3469.6145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (3470.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (3470.3277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (3470.2278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (3470.2845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (3470.4246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (3470.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (3470.421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (3470.084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (3469.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (3469.4676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (3469.3599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (3469.5135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (3469.9617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (3470.3533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (3470.5298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (3470.483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (3470.3025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (3470.2928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (3470.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (3470.8797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (3471.1114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (3471.049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (3470.7278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (3470.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (3470.5025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (3470.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (3470.8758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (3471.2322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (3471.4622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (3471.5257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (3471.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (3471.7073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (3472.077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (3472.2696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (3472.3894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (3472.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (3473.1128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (3473.8553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (3474.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (3475.7249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (3476.7696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (3477.599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (3477.7276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (3477.3438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (3476.8819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (3476.6348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (3476.803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (3477.1756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (3477.0237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (3476.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (3475.8184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (3475.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (3475.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (3474.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (3474.0186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (3473.7412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (3473.6372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (3473.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (3474.0706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (3474.4602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (3474.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (3474.8919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (3474.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (3472.7263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (3471.7586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.05)) (quote (1598.8518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.06)) (quote (1592.8859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07)) (quote (1586.9198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1584.9122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1586.8096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1588.6957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1588.1093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1587.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1585.7782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1583.2676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1581.8287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1581.4592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1581.4376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1581.5496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1581.6864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1581.8362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1582.2273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1582.8331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1583.5712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1584.3167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1584.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1584.9039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1584.4628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1583.5476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1581.4955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1577.1117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1569.8456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1566.6256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1566.4777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1568.0071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1569.3617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1566.9968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1564.0908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1562.6193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1563.1422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1565.0104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1565.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1564.8417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1564.1878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1564.2913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1565.208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1565.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1565.5693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1565.4214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1565.9619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1567.5099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1569.4011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1570.4508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1570.9796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1571.1865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1571.1852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1570.5725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1569.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1567.6685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1565.5269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1562.8402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1560.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1559.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1560.0315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1561.6932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1562.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1562.1871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1561.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1560.096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1559.1508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1558.3253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1558.4055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1559.955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1562.0805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1564.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1565.6952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1566.2811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1565.7261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1564.4926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1563.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1563.3275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1565.3008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1567.3778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1568.9022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1569.9122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1570.8938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1572.0505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1572.9902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1573.6115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1574.052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1574.6066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1575.4451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1575.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1575.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1575.6264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1575.4131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1575.2739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1575.0768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1574.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1574.9705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1575.1293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1575.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1574.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1574.5936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1574.168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1573.5029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1571.9688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1570.1796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1568.7929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1568.0324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1567.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1567.8316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1567.8632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1567.9177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1567.8862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1567.6351)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1567.3795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1567.5469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1568.1287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1568.9379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1569.6721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1570.0315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1570.2072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1570.5569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1571.2584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1572.3546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1573.3379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1573.6793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1573.6675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1573.6167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1573.8541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1574.4153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1574.6524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1574.3047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1573.3305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1571.8339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1570.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1568.508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1567.1768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1566.0324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1565.0574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1564.6128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1564.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1563.9456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1563.154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1562.1757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1561.7654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1561.8689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1561.9765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1561.7544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1561.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1560.4518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1560.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1560.7797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1561.267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1561.8291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1563.0411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1564.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1566.6807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1568.011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1568.704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1569.0955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1569.5841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1570.1012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1570.5586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1570.8671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1571.0259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1571.0236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1570.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1569.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1568.8428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1567.6815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1566.922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1566.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1564.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1562.2658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1559.2196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1557.405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1555.4343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1552.0335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1548.5653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1570.1449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1573.3904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1573.0776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1572.1243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1569.6632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1566.9058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1565.7127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1564.8201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1563.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1561.4025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1554.2335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1551.8091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1552.1293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1553.7793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1555.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1553.2543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1551.7864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1551.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1552.2562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1554.2362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1556.3259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1557.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1557.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1557.8383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1557.5625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1557.1834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1557.1655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1557.6616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1558.5695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1559.6235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1560.1412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1559.5043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1558.3153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1556.951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1555.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1554.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1553.232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1552.3789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1551.6344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1550.8242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1550.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1550.1832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1550.6007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1550.601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1549.5582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1547.9296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1548.1762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1549.82)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1551.5171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1551.8156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1550.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1549.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1550.2885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1551.6713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1552.9505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1552.7084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1552.6395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1552.9369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1553.3759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1553.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1553.7428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1553.7413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1553.1253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1551.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1550.6394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1549.6652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1548.3649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1547.2538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1546.6405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1546.7941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1548.2084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1548.9235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1550.0734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1550.8025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1550.2323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1549.8742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1550.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1552.9697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1555.1089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1556.3657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1556.716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1557.3866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1558.2782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1559.1332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1559.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1560.2078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1560.9111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1561.7372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1562.5053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1563.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1563.1349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1563.0097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1562.84)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1562.7026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1562.6449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1562.6925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1562.6253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1562.177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1561.5591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1561.1444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1561.5765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1562.5421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1563.2073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1563.5082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1563.637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1564.1808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1565.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1565.8484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1566.4552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1566.8497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1567.0548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1566.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1565.9308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1565.0739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1564.4423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1564.1403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1563.8529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1563.7461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1563.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1564.1168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1564.1765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1564.0839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1564.1235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1564.2694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1564.3954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1564.2026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1563.8883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1563.9348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1564.4127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1565.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1565.9491)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1566.2372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1566.2924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1566.2832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1566.3678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1566.683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1566.9778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1566.9971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1566.7562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1566.3872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1566.2479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1566.3056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1566.1356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1565.6249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1564.8356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1564.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1564.1527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1564.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1564.7979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1565.0646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1565.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1565.1018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1565.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1564.9313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1564.3906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1563.4474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1562.9608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1562.9988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1563.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1563.3025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1562.8657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1562.2785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1561.5326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1560.6207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1559.6422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1559.0217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1559.1304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1559.6)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1560.3377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1561.2909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1562.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1563.5463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1564.1753)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1564.3169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1564.0901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1563.9176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1564.0359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1564.1543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1564.2532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1564.4125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1564.9176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1565.7758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1566.6178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1567.3009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1567.7645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1568.0731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1568.2141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1568.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1567.8303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1567.3565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1566.8588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1566.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1566.6521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1566.8093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1566.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1566.4866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1565.6192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1564.8723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1564.4782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1564.5429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1565.0086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1565.642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1566.2511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1566.6881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1566.8578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1566.7487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1566.7808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1566.9452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1566.9788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1566.6089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1565.5457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1564.2308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1563.3579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1563.09)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1563.4122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1564.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1564.2608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1563.9783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1563.3661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1562.5862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1561.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1561.5704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1561.5319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1561.3767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1560.8823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1560.0494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1559.3619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1559.0217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1558.9474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1558.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1558.7874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1558.2545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1557.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1557.5038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1557.5089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1557.781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1557.9945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1557.8341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1557.124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1555.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1553.9224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1552.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1553.0242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1554.1409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1555.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1556.8214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1555.9989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1553.1664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1549.8973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1547.4988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1546.6306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1548.4323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1551.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1553.8839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1554.8685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1553.8294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1551.9866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1548.1985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1539.8577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1529.5148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1529.5148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (2412.85)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (2419.1302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (2426.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (2423.8064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (2422.3892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (2417.6853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (2411.9788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (2413.487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (2402.269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (2398.5176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (2402.0032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (2406.442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (2400.215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (2400.7178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (2403.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (2404.356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (2407.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (2421.9873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (2436.0628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (2439.931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2441.1665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2442.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2443.6228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2445.851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2449.798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2452.882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2453.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2453.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2452.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2453.0616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2453.793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2453.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2450.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2446.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2446.0327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2446.342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2446.6604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2446.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2445.1382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2444.9534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2445.387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2445.978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2446.0674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2445.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2444.5774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2444.1568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2444.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2445.132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2446.4944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2447.2569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2447.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2446.1385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2444.5012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2444.6194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2447.9905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2451.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2454.429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2453.5169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2451.0686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2449.8125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2448.9778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2447.792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2445.5379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2443.906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2444.1438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2445.0608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2445.8084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2445.737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2444.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2443.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2443.213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2443.7556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2444.2215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2443.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2442.127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2441.6844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2441.8343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2441.6538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2440.662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2440.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2439.7486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2439.315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2438.2295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2436.5442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2436.3824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2437.6663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2439.512)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2440.469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2438.9824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2438.1507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2438.358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2439.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2439.9917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2439.2708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2438.209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2437.3953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2436.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2436.797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2437.249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2438.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2439.0789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2439.9473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2440.8118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2441.1529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2440.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2439.7913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2439.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2439.1883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2438.8028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2437.7058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2436.446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2435.4803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2435.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2435.7403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2436.466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2437.1692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2437.5806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2437.4524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2437.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2437.241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2437.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2436.434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2435.2356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2434.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2433.4366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2432.9812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2432.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2433.577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2434.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2436.1243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2437.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2438.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2438.1565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2437.6634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2437.2674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2437.2014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2437.3902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2437.6204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2437.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2438.0415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2437.9387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2437.6248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2437.2246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2437.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2437.1529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2437.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2436.9373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2436.363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2435.1885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2433.881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2433.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2433.8938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2434.5257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2434.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2433.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2433.2564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2432.7207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2432.2862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2432.395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2432.9217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2433.1702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2433.0694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2432.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2433.4663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2434.6485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2435.8338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2436.736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2437.244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2437.824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2439.0806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2440.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2441.6453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2442.825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2444.2237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2445.1453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2445.1028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2443.6365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2440.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2437.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2437.1646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2438.0664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2439.3145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2439.556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2438.4148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2437.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2438.2622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2439.2976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2440.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2439.9798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2439.0862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2437.8355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2436.4873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2435.3433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2435.3533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2435.5996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2435.3609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2434.6646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2433.9019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2434.222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2435.7307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2437.0899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2437.5523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2436.7156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2435.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2434.784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2435.079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2435.7879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2436.675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2437.6536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2438.6614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2439.2752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2439.1822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2438.2598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2437.2432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2437.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2437.9624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2439.1729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2439.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2439.1158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2438.1453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2437.8982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2438.4287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2439.3487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2439.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2437.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2435.703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2433.8716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2432.9737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2434.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2435.065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2435.3196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2435.3592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2435.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2436.8054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2437.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2436.7422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2436.5379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2437.0503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2438.3513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2439.5198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2440.04)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2439.9024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2439.2212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2437.8675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2436.2569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2435.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2435.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2436.1387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2435.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2434.6343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2432.95)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2431.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2432.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2434.344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2435.8528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2436.173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2435.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2433.9356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2432.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2431.5664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2431.0564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2430.7854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2430.8242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2431.9514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2433.6565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2434.5647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2434.3709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2433.15)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2431.4195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2430.8318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2431.7154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2433.2356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2434.1548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2432.597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2431.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2431.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2433.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2435.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2434.9998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2433.6016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2431.8706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2431.0115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2431.7696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2432.8242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2433.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2432.2652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2431.0755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2429.974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2428.8762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2428.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2429.6975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2431.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2433.0347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2433.0982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2432.252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2430.9119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2429.6885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2429.2276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2430.2408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2430.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2431.3045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2431.7952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2432.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2433.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2432.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2429.864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2427.8736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2427.8545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2430.641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2432.4693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2432.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2430.7622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2428.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2429.0784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2429.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2429.6983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2428.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2426.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2426.1197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2427.0406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2428.2976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2429.926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2431.9112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2433.373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2433.0152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2431.219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2429.256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2428.5037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2430.3758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2432.4773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2432.6958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2431.6026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2430.2908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2430.1985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2430.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2431.0799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2431.5808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2432.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2432.4444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2431.879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2430.7317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2429.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2430.4514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2432.924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2434.672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2434.12)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2431.2034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2426.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2420.5093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2421.8304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2409.4163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2397.6336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2397.4202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2398.1814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2420.69)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2429.0164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2429.6653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2430.8494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2431.0135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2429.9182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2429.0706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2428.7163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2428.6123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2427.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2426.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2425.113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2425.0296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2425.891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2427.5818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2429.2156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2430.4732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2430.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2429.5896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2426.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2424.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2425.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2426.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2429.2906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2431.1243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2429.8972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2428.5388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2427.5274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2427.2027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2428.2483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2444.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2451.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2451.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2448.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2428.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2427.4649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2429.205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2431.4243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2432.9339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2431.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2429.4756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2428.2405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2428.3457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2429.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2430.287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2431.871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2432.0696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2430.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2427.792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2426.7984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2431.3155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2433.3574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2432.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2431.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2431.105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2432.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2433.2234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2432.9453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2431.9)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2430.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2427.8272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2416.559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2405.0586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2398.7434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2395.7366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2394.372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2392.4754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2388.1802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2386.3926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2405.899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2403.6839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2402.8582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2403.717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2404.7285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2403.677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2401.1697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2400.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2401.9666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2403.1402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2403.6704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2405.4505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2409.2779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2413.503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2415.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2409.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2428.4302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2434.581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.08)) (quote (1061.7391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.09)) (quote (1064.7014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.1)) (quote (1062.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.11)) (quote (1060.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.12)) (quote (1058.047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.13)) (quote (1056.2559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (1055.3584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (1054.4701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (1054.9003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (1055.0792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (1055.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (1054.9192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (1054.7326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (1055.0263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (1055.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (1056.3591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (1056.6515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (1056.6173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (1056.238)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (1055.2655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (1053.8073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (1052.063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (1050.314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (1048.2129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (1046.3333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (1044.9966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (1044.1422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (1043.3842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (1042.5881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (1041.8488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (1041.2653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (1041.0858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (1041.6641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (1042.589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (1043.4443)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (1043.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (1043.1355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (1042.7728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (1042.3534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (1042.4408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (1042.8538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (1043.7134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (1045.3214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (1046.1765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (1046.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (1047.3485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (1047.8403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (1048.2625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (1048.0155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (1047.4722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (1047.0667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (1046.5578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (1045.2228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (1042.8274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (1039.7409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (1037.4328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (1036.564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (1037.1736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (1038.1027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (1038.7083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (1039.2073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (1039.7587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (1040.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (1040.3649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (1040.8146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (1041.4111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (1042.104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (1043.0136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (1042.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (1043.1557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (1043.1954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (1043.2035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (1043.5925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (1043.9839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (1044.8544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (1045.8911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (1046.9476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (1047.949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (1048.2848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (1048.3528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (1048.456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (1048.8334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (1049.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (1050.5037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (1051.1458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (1051.3561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (1051.2045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (1050.9506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (1050.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (1050.3032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (1050.0719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (1050.0568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (1050.1676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (1050.2367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (1049.9834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (1049.4098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (1048.6405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (1047.8694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (1046.9963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (1046.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (1045.5305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (1045.0073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (1044.6953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (1044.9236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (1045.4192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (1045.6755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (1045.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (1044.8844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (1044.5397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (1045.2413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (1046.3483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (1047.371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (1047.9039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (1048.0458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (1048.1366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (1048.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (1048.0391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (1048.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (1048.0907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (1048.3949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (1048.8377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (1049.2788)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (1049.5642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (1049.4812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (1048.8588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (1048.2583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (1047.754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (1047.1967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (1046.5316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (1045.7522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1044.907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1044.0364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1043.2096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1042.8602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1042.4832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1042.2745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1042.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1041.4894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1040.96)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1040.4682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1040.4407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1040.7051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1040.8275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1040.6633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1040.3338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1040.4077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1041.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1042.211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1043.733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1045.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1046.1516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1046.6853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1046.5184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1046.2807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1046.3113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1046.6459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1047.1251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1047.4702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1047.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1046.6744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1046.1709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1045.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1045.5514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1045.1537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1044.6862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1043.9363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1042.9015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1041.6077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1039.4275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1036.9329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1034.5302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1032.7151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1031.902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1031.5685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1030.3867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1029.0221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1028.3901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1029.1514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1028.9328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1028.7247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1028.7675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1029.1585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1030.0281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1032.3641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1033.6113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1033.531)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1033.0027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1033.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1034.4596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1035.3709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1035.641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1035.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1035.166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1035.7971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1037.1467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1038.7174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1039.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1040.0723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1039.8672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1039.4833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1039.0708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1038.6712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1038.2943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1037.958)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1037.8538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1037.8858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1037.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1037.6002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1036.4116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1034.921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1034.0604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1033.9535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1034.402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1034.9061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1034.4212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1033.0427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1031.3146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1030.005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1030.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1032.3241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1033.8623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1034.3506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1033.8927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1033.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1034.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1034.8745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1035.0223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1034.8449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1034.2077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1034.598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1035.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1036.2297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1037.1115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1036.0375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1034.8042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1033.6098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1032.684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1032.1657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1031.6829)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1031.8234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1032.5275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1032.954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1032.283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1030.8768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1030.6417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1031.1992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1032.1381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1033.0956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1034.2015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1035.2411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1036.6676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1038.0092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1038.7714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1039.4719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1039.7977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1039.972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1039.8842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1039.5441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1039.9028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1040.3093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1040.8569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1041.2803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1041.4246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1042.0659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1042.4473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1042.4179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1042.1008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1041.7118)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1041.5481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1041.1875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1040.5012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1040.0505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1040.3871)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1041.4293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1042.542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1043.1818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1043.4083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1043.449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1043.6476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1044.231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1044.7256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1044.8511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1044.4345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1043.5095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1042.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1042.4113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1042.6262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1043.1898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1043.6327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1043.6099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1043.4259)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1043.1752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1042.8986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1042.55)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1042.6375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1042.9939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1043.3057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1043.2649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1042.6621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1042.3292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1042.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1043.2041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1043.9752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1044.4913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1044.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1045.3347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1045.4714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1045.3489)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1044.9158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1044.3978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1044.0673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1043.9008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1043.7938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1043.5414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1043.32)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1043.4506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1043.7979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1044.0349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1043.4067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1042.385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1041.8911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1041.9296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1042.2893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1042.5757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1042.7044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1042.9077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1043.0386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1042.9103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1042.3506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1041.8272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1041.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1040.9448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1040.8297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1040.9402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1041.1432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1040.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1040.0742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1039.4241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1039.4472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1040.0418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1040.5615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1040.9249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1041.213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1041.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1042.2161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1042.4086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1042.4784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1042.5781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1042.8264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1043.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1043.7448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1044.5228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1045.4135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1046.1649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1045.696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1044.7888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1043.8206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1043.1607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1043.3301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1044.1786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1044.7411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1044.909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1044.7442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1044.4572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1044.3584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1044.2756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1044.1409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1044.031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1044.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1044.7453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1044.6791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1044.305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1043.8734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1043.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1044.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1044.6878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1044.5939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1044.2521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1043.8129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1043.7346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1043.8405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1043.887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1043.7185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1043.3889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1042.6452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1042.0111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1041.7976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1042.1472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1042.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1043.4597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1043.5097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1043.2544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1042.7665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1041.7194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1040.1439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1039.0457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1038.8279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1039.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1039.709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1039.1417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1038.4406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1038.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1038.365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1038.2044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1038.6824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1039.4564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1040.1934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1040.3787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1039.0297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1037.9219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1037.0372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1036.7075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1036.8233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1036.3345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1036.6972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1036.7164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1036.6395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1036.548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1035.9694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1036.0015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1035.0391)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1033.9624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1033.4747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1033.6608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1034.1918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1033.4335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1032.0698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1030.8202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1030.2063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1029.8864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1030.3876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1031.5183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1032.7589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1033.0499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1032.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1033.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1035.4745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1036.6572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1037.3699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1036.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1035.1887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1033.6914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1031.8609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1031.0017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1031.3339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1032.3029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1032.4481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1031.5076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1031.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1033.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1035.2977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1034.9592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1033.4002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1032.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1034.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1035.3165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1035.9807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1036.1249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1035.6726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1035.817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1035.713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1035.6936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1035.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1035.4088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1034.3815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1032.8102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1031.9451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1032.3257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1033.4105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1035.0615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1035.6154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1036.2247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1037.1194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1037.0007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1036.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1034.6992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1033.3142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1032.6245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1031.6454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1033.7372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1038.2363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1043.4446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1047.8486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1050.1646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1048.8773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1044.7157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1037.7494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1029.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1025.5687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1023.84766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1022.0112)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1021.171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1021.43787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1021.48566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1004.0061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1002.3235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1004.5528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1004.1559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1002.79444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (999.9526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (988.2707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (981.3701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (982.71735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (982.62244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1000.43427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1022.20466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1049.0104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1073.5222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1077.4642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1078.717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1078.6271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1077.1793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1074.4102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1070.4121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1067.6322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1063.9976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1069.1426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1080.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1078.5639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1077.1262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1079.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1086.4154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1095.5973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1101.7601)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1104.7992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1107.8098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1113.263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1117.1393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1108.2212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1108.9835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1115.3552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1116.6452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1111.7827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1109.9989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1101.0494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1091.6676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1082.1488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1072.6307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1063.1122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1063.4055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1074.6882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1080.1083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1075.9338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1071.7595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1067.585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1066.5437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.14)) (quote (636.31617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.15)) (quote (637.72095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.16)) (quote (638.067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.17)) (quote (638.22254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.18)) (quote (638.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.19)) (quote (638.4234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.2)) (quote (638.2197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.21)) (quote (638.3187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.22)) (quote (638.2394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.23)) (quote (637.8851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.24)) (quote (637.431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.25)) (quote (637.2895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.26)) (quote (637.2111)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.27)) (quote (637.5271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (638.0031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (638.5199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (639.0568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (639.8925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (640.8282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (641.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (642.2347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (642.7481)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (642.80286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (643.0027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (643.24085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (643.47016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (643.68494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (643.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (643.5179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (643.2595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (642.8253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (642.4068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (641.97626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (641.9184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (641.86237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (641.71296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (641.5719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (641.0305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (640.7448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (640.4508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (640.1228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (639.90986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (639.8869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (640.2838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (640.7609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (641.2256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (641.7507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (642.11475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (642.5485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (642.8342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (642.964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (643.0757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (643.1018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (643.2842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (643.4741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (643.5776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (643.52967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (643.0908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (642.685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (642.29987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (641.9502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (641.6617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (641.2736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (641.0501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (640.83924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (640.6192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (640.4396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (640.0628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (639.9682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (639.85975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (639.71424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (639.6556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (639.2566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (638.7692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (638.25934)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (637.78705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (637.4127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (637.2285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (637.4292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (637.75904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (638.1718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (638.7009)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (638.61927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (638.4758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (638.4089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (638.3683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (638.2066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (638.069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (637.73084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (637.61255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (637.7698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (638.03547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (638.09284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (638.12995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (638.2172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (638.366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (638.5524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (638.7374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (638.7946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (638.8477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (638.87165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (638.76685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (638.5101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (638.4204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (638.4135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (638.4069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (638.30695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (637.9143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (637.6103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (637.53534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (637.5921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (637.5609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (637.36274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (637.4382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (637.56464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (637.67566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (637.74097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (637.2199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (636.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (637.0094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (637.37446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (637.6649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (637.5542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (637.1944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (637.057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (637.3069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (637.92414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (638.4793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (638.72236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (638.7371)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (638.58497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (638.3605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (638.5214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (638.64875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (638.85547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (639.00885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (638.9235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (639.09766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (638.92804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (638.7762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (638.59296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (638.20844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (638.04786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (637.74164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (637.40046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (637.1676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (637.1906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (637.5028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (637.8822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (637.97406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (637.69745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (637.1558)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (637.04926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (637.13056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (637.0559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (636.75306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (636.30225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (636.15796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (636.57154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (637.0823)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (637.46375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (637.6416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (638.1896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (638.71644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (639.36207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (640.01557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (640.51514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (641.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (641.6767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (641.9932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (642.13984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (642.2654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (642.4666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (642.5053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (642.49805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (642.39466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (642.1215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (641.86976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (641.43305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (641.2441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (641.2677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (641.30585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (641.2254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (640.86304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (640.4483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (639.96845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (639.4173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (639.4388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (639.28724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (639.2361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (639.05536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (638.4932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (638.3567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (638.2187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (638.486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (638.82135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (638.7662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (638.7781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (638.447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (638.4612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (638.6454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (638.65204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (638.8612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (638.97785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (639.48664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (640.11615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (640.43555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (640.53467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (640.57355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (640.70295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (640.8011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (640.70765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (640.5268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (640.5409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (640.6152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (640.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (640.40046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (639.82154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (639.8131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (639.9744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (640.1619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (640.242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (639.74366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (639.4379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (639.1088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (638.8818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (638.9035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (638.9424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (639.1317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (639.34247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (639.60315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (639.96204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (640.36866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (640.6678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (640.8246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (640.87067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (640.8636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (640.87146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (640.7115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (640.41645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (640.07605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (639.8046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (639.7574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (639.5427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (639.1497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (638.7162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (638.4224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (638.4752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (638.63166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (638.76716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (638.8056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (638.68976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (638.375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (637.79316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (637.4052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (637.2368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (637.2445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (637.58094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (637.6589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (637.7547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (637.7416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (637.51575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (637.4671)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (637.26655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (637.1728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (637.1731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (637.21)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (637.3034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (637.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (637.28205)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (637.1612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (637.1422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (637.12067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (637.4319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (637.6722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (637.7739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (637.69495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (637.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (636.5678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (636.0345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (635.798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (636.00446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (636.53467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (637.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (637.3758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (637.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (637.1296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (636.7772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (636.4825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (636.3818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (636.38886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (636.3649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (636.1334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (636.12885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (636.45624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (636.90027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (637.18226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (636.9951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (636.81147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (636.6991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (636.51984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (636.13764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (635.5287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (635.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (635.3723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (635.4031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (635.7269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (636.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (636.2006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (636.221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (636.2395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (636.28785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (636.3848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (636.2359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (636.00415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (635.81397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (635.7441)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (635.7486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (635.7137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (635.5298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (635.3778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (635.4005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (635.4867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (635.9338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (636.5079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (636.93854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (637.01355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (636.68)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (636.8562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (637.1366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (637.4161)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (637.5288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (636.95887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (637.0052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (637.28565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (637.6488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (637.8438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (637.1971)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (636.4197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (635.87305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (635.6117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (635.5886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (635.6116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (635.59095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (635.3223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (635.09546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (635.1587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (635.49714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (635.91437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (636.1511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (636.02576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (635.5223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (635.01307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (634.39637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (634.23316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (634.3756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (634.52894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (634.2242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (634.8529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (635.34974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (635.51807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (635.3724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (635.1959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (635.3981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (636.0152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (636.60065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (636.7759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (636.4215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (635.68836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (635.0645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (634.7518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (634.7133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (634.4139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (634.6859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (634.9403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (635.3041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (635.792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (635.98)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (635.68866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (635.47455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (635.45905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (635.69635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (636.2117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (636.52655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (636.54096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (636.3672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (636.144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (636.0192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (636.0141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (636.0998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (636.1379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (636.1385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (636.4714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (636.59455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (636.8551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (637.01636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (637.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (637.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (637.3004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (637.3091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (637.22474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (637.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (636.97986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (637.27204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (637.44715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (637.719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (638.1459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (638.35724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (638.5533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (638.2054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (637.8331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (637.76905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (637.84516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (638.3107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (638.5105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (638.7119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (639.08545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (639.50306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (640.05286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (640.3329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (640.32557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (640.0973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (639.80756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (639.7065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (639.6211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (639.39966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (639.0554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (638.89985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (638.5878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (638.47986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (638.3922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (638.2867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (638.4493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (638.41425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (638.7307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (639.12494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (639.3832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (639.4637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (639.32367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (639.22297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (639.0905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (638.8923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (638.6824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (638.6243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (638.5038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (638.4611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (638.49457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (638.3382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (638.0372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (637.5868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (637.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (637.7379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (637.84766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (637.98737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (637.9827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (638.058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (638.1804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (637.8817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (638.00275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (638.17225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (638.4063)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (638.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (638.07196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (638.11866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (638.3386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (638.64344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (638.86676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (638.70166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (638.8176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (638.71326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (638.5338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (638.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (638.6767)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (639.52674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (640.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (640.3567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (640.40967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (640.59974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (641.1807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (641.31116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (640.8369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (639.92414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (639.1386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (639.6399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (640.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (641.32996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (641.37647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (640.4603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (637.7132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (636.0461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (636.37885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (638.6473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (641.634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (639.4919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (637.8187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (637.67304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (639.0791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (640.923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (640.8926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (640.0624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (639.3691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (639.3562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (640.11304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (640.79126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (640.6943)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (640.2802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (639.8197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (639.3373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (638.2662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (637.29737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (637.05347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (637.7071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (638.92695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (639.26954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (639.47107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (639.4325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (639.2048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (639.01764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (639.0402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (639.1658)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (639.23707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (639.1516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (638.86524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (638.54267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (638.22754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (638.0496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (637.91834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (637.5067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (637.1677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (637.0812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (637.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (637.6483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (637.7518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (637.4272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (637.23816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (637.11225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (636.9858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (636.80585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (636.2975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (636.17426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (636.26716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (636.4286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (636.5324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (636.3894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (636.52094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (636.7006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (636.8395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (636.9795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (637.10724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (637.3256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (637.5241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (637.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (637.58606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (637.774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (637.89624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (638.05164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (638.22504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (638.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (638.60584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (638.79255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (638.9196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (638.9911)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (638.9655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (638.8892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (638.8615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (638.75086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (638.5136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (638.1796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (637.5862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (637.35505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (637.23804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (637.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (637.396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (637.52845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (637.49744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (637.29084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (636.99775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (636.7953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (636.8909)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (636.85627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (636.76954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (636.61506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (636.31586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (636.2937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (636.3235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (636.4929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (636.6839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (636.626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (636.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (636.45136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (636.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (637.1193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (637.57154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (637.58985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (637.5703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (637.6937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (638.0442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (638.6181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (638.8905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (638.8762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (638.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (637.99695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (637.46656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (637.22107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (637.17054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (637.1652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (637.2177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (637.432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (637.41297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (637.4467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (637.3058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (637.0492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (636.9126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (636.575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (636.5104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (636.4533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (636.4233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (636.6024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (636.64557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (636.8947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (637.1032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (637.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (637.9043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (638.1597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (638.2201)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (638.06366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (637.8182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (637.6955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (637.49756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (637.49805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (637.6274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (637.7412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (637.64606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (637.2172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (636.80036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (636.6771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (636.75916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (636.7533)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (636.81916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (636.69666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (636.76117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (636.8948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (636.742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (636.8368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (636.6315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (636.51874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (636.5388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (636.5613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (636.88446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (637.06415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (637.14246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (637.1453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (637.0936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (636.96766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (637.0945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (637.182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (637.25684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (637.4607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (637.1503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (637.2301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (637.1692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (636.9879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (636.9468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (636.67756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (636.9023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (637.17176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (637.42457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (637.74146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (637.6002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (637.67255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (637.8765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (638.30005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (639.06464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (639.7667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (640.3935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (640.8252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (641.02955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (641.0232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (640.79157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (640.5022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (640.2608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (640.1372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (640.16877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (640.2231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (640.3163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (640.3947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (640.39014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (640.23816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (639.983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (639.5348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (639.2903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (639.19416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (639.0457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (639.2812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (638.9698)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (637.5888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (635.13556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (632.13135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (631.7592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (634.4209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (637.81415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (640.2966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (640.6652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (639.8857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (639.1088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (638.6612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (638.4085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (638.0546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (637.65186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (637.75696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (637.98175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (638.0645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (637.81775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (637.3563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (637.2564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (637.1536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (636.9575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (636.7375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (637.1043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (638.27546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (639.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (639.7197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (639.237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (637.7041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (636.5021)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (635.60486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (635.20014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (635.4145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (635.4145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.28)) (quote (2361.9326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.29)) (quote (2368.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.3)) (quote (2375.6092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.31)) (quote (2395.8064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.32)) (quote (2376.6665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.33)) (quote (2363.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.34)) (quote (2366.6126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.35)) (quote (2366.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.36)) (quote (2363.7097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.37)) (quote (2370.7935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.38)) (quote (2378.0613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.39)) (quote (2382.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.4)) (quote (2385.0977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.41)) (quote (2387.915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.42)) (quote (2386.11)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.43)) (quote (2382.9143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.44)) (quote (2379.7185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.45)) (quote (2376.5315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.46)) (quote (2373.7679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.47)) (quote (2372.1612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.48)) (quote (2371.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.49)) (quote (2372.1197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.5)) (quote (2373.3133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.51)) (quote (2374.0115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.52)) (quote (2373.9353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.53)) (quote (2371.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.54)) (quote (2367.0689)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.55)) (quote (2358.5462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.56)) (quote (2357.9033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.57)) (quote (2360.6294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.58)) (quote (2364.7957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.59)) (quote (2368.7818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.6)) (quote (2371.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.61)) (quote (2375.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.62)) (quote (2377.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.63)) (quote (2377.498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.64)) (quote (2376.652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.65)) (quote (2372.9458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.66)) (quote (2361.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.67)) (quote (2355.6949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (2362.6453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (2381.0122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (2401.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (2399.9986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (2397.0816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (2394.4722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2391.4854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2386.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2380.1844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2378.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2380.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2383.4317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2382.8079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2375.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2363.591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2356.276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2355.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2357.645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2360.0286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2371.8636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2379.0745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2379.7569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2379.2815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2376.346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2372.7132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2369.6548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2366.9495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2364.005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2371.1978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2360.2464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2352.9925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2354.1692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2358.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2363.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2364.0074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2365.646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2368.8374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2372.1797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2371.623)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2370.5542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2369.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2366.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2361.9763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2358.1914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2355.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2352.7466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2358.179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2379.728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2360.4048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2358.0987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2356.4556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2351.9715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2347.7017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2347.159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2348.329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2349.9146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2350.998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2350.953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2351.0647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2351.176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2360.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2372.2395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2369.5752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2358.2862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2357.4016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2361.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2368.0135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2374.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2377.172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2379.3274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2377.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2373.3328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2370.1844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2365.889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2365.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2365.19)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2365.2449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2365.4036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2367.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2365.6284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2362.7669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2362.3496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2368.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2374.5554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2376.3682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2364.3772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2349.7012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2350.003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2350.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2349.4998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2360.8345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2372.5825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2366.4544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2366.735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2366.537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2366.8167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2367.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2366.4595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2365.492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2364.816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2365.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2367.1726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2370.97)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2373.4876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2374.5923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2374.4143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2371.9265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2366.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2363.2354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2361.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2356.2654)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2349.6077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2344.8728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2346.2732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2346.0967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2345.7818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2353.5215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2375.0196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2373.6516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2374.3684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2377.1272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2379.851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2381.151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2392.3413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2403.5318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2407.8208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2402.2224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2388.499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2392.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2393.4075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2393.8665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2397.1219)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2404.703)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2408.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2396.7776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2381.4866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2371.5865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2371.0025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2360.3167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2356.7627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2356.417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2357.5786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2359.606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2365.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2370.4983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2373.8274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2375.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2372.115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2350.2818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2359.0862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2367.448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2371.477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2374.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2378.8609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2379.075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2376.796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2373.2525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2369.8709)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2368.661)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2366.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2378.7595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2391.57)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2387.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2375.8)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2364.1072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2359.6277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2359.4632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2360.1136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2373.4383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2364.8487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2351.6863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2350.4344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2371.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2392.5098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2388.8145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2385.1836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2383.888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2382.2273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2381.6795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2362.8023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2357.135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2362.345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2368.2193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2370.394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2377.0528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2379.7659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2379.453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2379.2737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2381.5467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2383.8797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2384.5208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2382.852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2379.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2376.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2355.918)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2347.6927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2348.7935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2349.633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2348.5598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2349.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2348.8762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2357.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2379.836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2383.8194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2382.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2378.0283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2368.158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2355.0855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2357.392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2359.6988)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (2362.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (2365.4283)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (2367.8904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (2370.5884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (2372.0782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (2372.297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (2371.319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (2369.374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (2366.9314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (2359.289)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (2354.0525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (2351.5232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (2350.3882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (2349.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (2346.3406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (2345.8574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (2348.7608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (2355.0479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (2362.3797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (2363.6787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (2362.9)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (2361.9903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (2362.7998)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (2368.3462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (2369.3653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (2367.341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (2362.4673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (2356.2866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (2356.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (2360.5025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (2366.9668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (2372.6377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (2375.056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (2373.779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (2359.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (2355.535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (2354.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (2350.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (2347.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (2350.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (2352.104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (2351.6848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (2349.938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (2350.4593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (2354.4702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (2354.834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (2353.0747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (2351.6543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (2351.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (2352.045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (2351.8628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (2351.0838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (2350.218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (2349.4)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (2347.0662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (2347.025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (2349.3838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (2353.3137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (2357.0222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (2356.876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (2358.9334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (2362.0972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (2364.59)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (2365.7163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (2364.8994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (2362.9287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (2359.4976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (2355.0042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (2352.37)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (2349.5088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (2353.157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (2360.207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (2366.2176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (2366.7195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (2347.7754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (2342.9737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (2346.4617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (2349.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (2353.4378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (2356.7378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (2358.1214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (2357.6768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (2355.99)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (2354.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (2358.4116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (2366.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (2372.3562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (2373.757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (2374.3255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (2366.5747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (2361.812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (2358.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (2356.8523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (2357.9212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (2354.6253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (2351.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (2349.3284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (2348.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (2346.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (2347.4563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (2348.973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (2350.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (2355.0406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (2374.1638)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (2360.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (2350.8738)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (2346.7835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (2345.7622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (2345.7964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (2346.2158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (2348.3196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (2353.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (2362.0904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (2367.178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (2369.1739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (2371.743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (2376.7183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (2383.5486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (2386.5435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (2387.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (2387.8614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (2387.3328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (2387.4632)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (2391.5203)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (2370.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (2359.1783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (2362.872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (2375.2679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (2374.8516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (2371.5496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (2370.9185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (2371.1155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (2369.8672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (2365.1072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (2360.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (2351.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (2345.076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (2346.865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (2348.4265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (2352.1248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (2355.0974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (2355.3199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (2352.2263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (2347.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (2343.9214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (2341.1839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (2338.9456)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (2337.1448)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (2337.1778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (2345.2115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (2353.7256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (2355.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (2347.6695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (2340.2017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (2352.534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (2366.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (2366.1685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (2352.9805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (2352.5462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (2362.411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (2366.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2367.1282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2368.968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2371.8987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2373.2376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2372.7139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2371.3108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2370.0037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2369.6516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2368.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2367.194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2366.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2366.5628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2365.0293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2364.3553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2363.9903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2362.6836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2361.4239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2365.185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2368.9458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2369.3184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2373.692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2380.2796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2371.0142)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2361.7493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2352.484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2353.507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (2363.3445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (2361.0242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (2353.0515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (2349.1153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (2344.2805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (2338.423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (2340.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (2341.6487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (2341.6343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (2341.2332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (2341.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (2342.1482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (2364.0684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (2369.5957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (2369.0696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (2369.2669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (2369.0916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (2348.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (2341.73)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (2348.3968)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (2359.966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (2361.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (2343.393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2340.2237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2344.0752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2352.1927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2370.5098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2368.5054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2366.8784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2366.4363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2366.7886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2366.7288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2363.8313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (2345.3594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (2339.875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (2351.8997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (2352.9207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (2355.949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (2359.966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2364.1678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2367.3733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2367.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2367.7932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2367.7337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2367.674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2368.1873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2370.6023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2373.0179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2352.2237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (2337.4024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (2337.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (2336.7149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (2335.7556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (2336.329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (2338.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (2342.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (2344.7298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (2346.6758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (2350.028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (2354.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (2358.85)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (2364.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (2363.655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (2374.9524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (2383.2732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (2383.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (2383.5384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (2384.7635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (2386.5115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (2387.339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (2386.7202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (2385.1248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (2385.1367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (2387.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (2389.257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (2389.0579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (2387.5567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (2385.0923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (2383.0467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (2381.147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (2378.8914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (2375.545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (2370.9944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (2369.306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (2368.8748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (2368.7046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2368.4339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (2345.0596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (2350.1936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (2366.2388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (2375.2273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (2358.9846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (2342.7425)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (2338.7276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.68)) (quote (856.5867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.69)) (quote (856.65247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.7)) (quote (855.0294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.71)) (quote (854.04944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.72)) (quote (855.60004)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.73)) (quote (860.47657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (866.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (868.5127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (876.4041)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (880.55994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (881.8495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (881.19526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (879.70197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (878.83234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (879.1479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (880.2171)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (881.801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (883.8288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (888.15345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (887.3469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (893.61054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (901.5783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (896.1075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (890.6367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (889.66034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (879.1534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (865.56525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (866.3847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (866.216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (866.2492)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (866.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (866.2039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (866.4413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (876.95496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (881.2483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (881.5404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (878.422)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (872.1228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (869.11255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (867.1379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (865.95166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (865.0831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (864.00104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (864.0002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (866.37317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (869.3566)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (871.41394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (871.30085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (871.3619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (876.8681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (881.07074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (883.04084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (884.75806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (886.0438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (884.0308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (891.96235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (902.2239)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (898.2855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (894.3472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (890.4089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (895.67005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (904.72486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (905.86176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (905.86176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.74)) (quote (2729.8787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.75)) (quote (2730.9646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.76)) (quote (2730.4439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.77)) (quote (2729.3494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.78)) (quote (2728.4554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.79)) (quote (2727.8723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.8)) (quote (2727.3435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.81)) (quote (2728.25)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.82)) (quote (2729.9807)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.83)) (quote (2732.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.84)) (quote (2734.1917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.85)) (quote (2735.003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.86)) (quote (2734.9173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.87)) (quote (2735.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.88)) (quote (2735.7559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.89)) (quote (2736.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.9)) (quote (2738.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.91)) (quote (2739.1013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.92)) (quote (2739.504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.93)) (quote (2739.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.94)) (quote (2739.0889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.95)) (quote (2738.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.96)) (quote (2738.2615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.97)) (quote (2737.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.98)) (quote (2737.5318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.99)) (quote (2737.457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.0)) (quote (2737.6043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.01)) (quote (2737.5928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.02)) (quote (2737.333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.03)) (quote (2737.0616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.04)) (quote (2736.8643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.05)) (quote (2736.7095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.06)) (quote (2735.919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.07)) (quote (2733.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.08)) (quote (2730.2783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.09)) (quote (2728.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.1)) (quote (2727.407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.11)) (quote (2728.1236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.12)) (quote (2728.995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.13)) (quote (2729.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.14)) (quote (2729.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.15)) (quote (2728.3736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.16)) (quote (2727.3499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.17)) (quote (2727.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (2729.4746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (2731.2869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (2732.4969)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (2732.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (2733.2163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (2733.2732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (2733.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (2733.2578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (2733.4849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (2733.9427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (2734.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (2735.474)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (2736.1277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (2736.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (2735.6048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (2734.8013)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (2733.7254)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (2732.3318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (2730.428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (2728.8755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (2727.729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (2726.7036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (2725.4207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (2724.6028)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (2724.6262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (2724.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (2724.4292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (2723.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (2721.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (2721.1016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (2721.223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (2721.6177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (2721.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (2721.3553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (2720.4634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (2719.846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (2719.9912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (2721.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (2723.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (2724.6407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (2725.9258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (2726.9583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (2727.7386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (2728.1209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (2728.8047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (2729.7415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (2730.586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (2730.894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (2730.5674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (2730.3262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (2730.1736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (2729.981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (2729.57)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (2728.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (2727.461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (2725.5303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (2723.2598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (2720.956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (2718.4085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (2716.4917)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (2716.5174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (2719.192)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (2724.5225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (2729.3008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (2729.5584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (2727.4534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (2724.3094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (2720.8365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (2713.7725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (2710.707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (2710.3728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (2713.202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (2717.9339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (2705.2996)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (2700.593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (2697.0135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (2698.17)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (2708.4385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (2711.0154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (2711.769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (2711.6096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (2711.2176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (2711.1717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (2711.4898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (2712.6436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (2714.6846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (2716.9175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (2718.3535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (2717.8504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (2716.9973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (2716.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (2716.7124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (2717.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (2717.1233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (2716.8506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (2716.3853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (2715.5965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (2714.3247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (2712.618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (2710.765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (2709.255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (2708.3096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (2707.992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (2708.0144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (2707.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (2704.9844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (2701.3189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (2699.0933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (2700.7273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (2706.0987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (2709.9768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (2712.3484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (2715.3902)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (2725.7473)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (2713.748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (2707.686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (2709.8528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (2714.7683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (2714.1302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (2713.1436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (2711.582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (2709.7532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (2708.1717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (2707.6494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (2706.6133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (2705.0047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (2703.3008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (2702.1336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (2702.1675)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (2703.3308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (2705.4549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (2707.811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (2709.4568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (2709.1402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (2707.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (2701.0432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (2694.2644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (2691.4527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (2688.8628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (2686.9773)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (2684.8137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (2682.6057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (2680.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (2678.6626)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (2679.4033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (2665.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (2652.6126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (2658.3094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (2665.5027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (2667.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (2664.901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (2667.0323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (2679.903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (2686.5513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (2693.1995)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (2699.942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (2706.7412)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (2713.5406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (2720.34)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (2721.1878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.18)) (quote (855.908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.19)) (quote (857.5228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.2)) (quote (861.51435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.21)) (quote (862.46064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.22)) (quote (862.6749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.23)) (quote (863.4565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.24)) (quote (864.56647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.25)) (quote (864.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.26)) (quote (863.4072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.27)) (quote (863.0641)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.28)) (quote (864.1507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.29)) (quote (866.2222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.3)) (quote (868.3999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.31)) (quote (869.42164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.32)) (quote (875.65064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.33)) (quote (880.1472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.34)) (quote (879.74866)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.35)) (quote (874.9499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.36)) (quote (890.2027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.37)) (quote (878.5375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (871.5398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (872.0963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (870.63135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (869.62806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (870.24256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (871.4427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (872.5801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (873.26325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (874.57306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (878.96204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (881.1157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (874.1358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (854.37836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (862.69574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (867.55787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (870.8685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (873.0987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (874.15705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (873.3842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (872.16706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (872.4131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (874.21375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (876.60175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (876.14637)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (871.27607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (860.94806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (852.27106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (854.2466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (859.0651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (862.55317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (863.2439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (861.96674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (860.5155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (859.83674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (860.69745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (863.1417)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (866.832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (870.9183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (871.9072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (867.62494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (862.69086)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (859.5477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (859.5466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (861.2217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (862.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (862.75556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (863.1552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (863.2297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (861.9513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (858.04627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (853.96564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (851.3407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (851.9541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (861.493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (864.6314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (864.65394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (862.7454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (859.8394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (859.1606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (855.75007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (852.099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (849.5214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (848.97687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (851.7741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (854.3541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (865.35614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (875.46686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (872.99396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (873.8244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (874.77076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (874.6282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (872.58307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (867.9791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (859.7275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (859.1101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (861.1511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (863.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (863.229)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (860.70716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (858.3107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (858.0164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (859.5168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (861.6891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (863.1919)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (864.2376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (862.5341)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (858.83045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (855.0975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (854.8039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (856.9796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (858.50837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (858.8082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (858.18616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (857.8424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (858.49256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (860.12586)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (862.63605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (865.7719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (868.9034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (872.461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (875.3633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (877.26075)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (878.421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (881.4032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (884.29346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (884.2164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (879.32905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (869.25904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (859.189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (856.7598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (855.8567)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (855.7293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (856.78785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (859.0734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (858.0114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (855.38385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (852.63575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (851.1599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (852.3539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (853.73774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (855.40046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (857.10505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (858.538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (859.3952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (860.7268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (866.5342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (873.26136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (876.24665)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (874.19574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (867.4993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (864.3032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (864.34186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (865.75306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (868.7584)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (872.04694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (874.15485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (874.5343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (873.0126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (869.77894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (867.624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (866.8772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (868.63117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (873.01954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (875.5784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (877.83234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (878.6179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (876.94977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (872.78046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (869.55225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (868.74604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (867.67237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (865.84327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (863.31696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (860.5284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (857.7322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (856.0986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (856.4304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (859.2231)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (864.50507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (866.28974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (868.0576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (870.2574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (872.47016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (872.95765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (870.60987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (867.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (865.37336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (863.82776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (863.0539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (862.5307)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (862.24)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (862.5216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (864.2125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (870.1317)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (875.55597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (884.433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (891.95856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (894.0105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (894.0168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (891.2841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (889.4044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (879.1005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (858.56775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (859.8346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (861.4247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (863.1985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (864.7956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (865.74036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (865.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (863.84314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (863.0569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (862.9624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (863.48346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (864.47797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (865.859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (866.2372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (865.12494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (862.39655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (858.3852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (857.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (859.1722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (860.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (860.2493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (856.60157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (857.54865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (861.48127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (864.80256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (865.332)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (866.01905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (867.30707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (868.8579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (870.1434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (870.51044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (868.8542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (866.1846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (863.38025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (861.59784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (861.6887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (863.76215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (866.0047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (864.62397)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (861.31446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (858.36426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (857.77717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (860.338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (863.3997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (866.60694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (869.9447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (873.63886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (879.8967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (881.7496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (881.28376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (880.9666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (881.3755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (880.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (875.515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (869.0877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (864.4972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (861.3287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (858.4439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (857.1023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (858.65217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (862.6864)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (864.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (862.7541)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (862.29157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (863.97925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (867.2311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (869.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (870.3292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (871.0787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (871.05677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (870.1781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (868.6385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (868.2711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (868.3263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (867.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (865.85596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (864.15766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (864.0719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (863.7272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (862.1984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (859.8196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (859.5951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (863.53534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (869.0599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (872.8905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (873.497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (873.0945)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (872.286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (871.5765)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (870.90784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (869.3724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (864.1424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (857.09577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (854.12836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (854.23096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (855.9733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (858.38306)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (858.99494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (858.75745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (858.51496)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (860.9038)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (872.7191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (878.07984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (881.9006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (884.00574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (883.9999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (881.5395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (865.2804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (856.6651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (853.293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (851.31537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (847.3245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (843.90827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (842.4079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (843.37287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (846.69477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (851.3249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (853.7715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (855.9735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (859.05896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (862.9857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (865.6722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (866.2469)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (866.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (868.2976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (871.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (871.7091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (867.8033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (859.9725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (855.1872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (855.96467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (856.78095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (859.2821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (863.65027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (866.93976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (867.87104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (868.1193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (868.04847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (866.9404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (865.16925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (863.4363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (862.92634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (865.2237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (867.2742)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (868.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (870.0714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (873.5453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (876.41095)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (877.47065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (876.47706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (874.0404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (871.9925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (870.0622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (867.0225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (863.619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (860.01404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (855.3342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (852.3678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (851.39356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (851.88587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (853.07746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (853.9024)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (854.4539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (855.40424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (856.6197)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (856.12244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (849.1281)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (847.37146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (849.35)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (853.3022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (856.82117)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (856.5071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (852.6409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (849.8783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (850.0655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (853.77326)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (860.0951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (861.3982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (863.418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (864.59436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (864.40686)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (863.9312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (866.2175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (868.2418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (867.7682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (865.5072)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (865.949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (868.6472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (873.8019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (877.6722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (878.349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (876.2193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (868.74006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (861.1618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (857.92957)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (859.72986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (862.7799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (873.51905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (877.1414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (876.05787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (871.5715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (863.2452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (862.50574)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (863.236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (863.30054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (860.8857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (854.4154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (852.3679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (851.33246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (851.0074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (853.9194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (865.84174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (868.8106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (868.5736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (866.4925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (863.76795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (861.46747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (849.7017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (846.1419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (847.80854)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (852.4023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (858.524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (860.21625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (863.27967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (866.1539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (867.5444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (866.4635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (864.65735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (864.4503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (865.12555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (866.017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (866.52)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (868.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (870.5409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (872.42005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (873.02717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (870.697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (867.55915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (864.88837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (864.6573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (866.65815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (868.57294)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (866.88007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (863.21485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (860.2878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (857.7359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (852.36487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (847.4082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (845.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (846.31415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (847.9344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (849.83735)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (852.69935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (855.6301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (858.4409)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (861.16547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (863.9963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (863.87134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (865.4986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (868.70545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (871.47815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (870.2762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (868.51777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (866.4487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (865.6015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (866.465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (868.608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (869.63257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (870.1879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (869.75556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (868.41785)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (866.7841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (866.33454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (867.5333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (868.7268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (868.87714)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (867.38965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (862.4987)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (857.9139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (852.9411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (848.6895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (847.74347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (855.4081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (863.45246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (866.55994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (865.64954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (866.2511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (866.7809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (866.09186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (865.72956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (866.5402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (868.8167)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (871.0657)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (880.1636)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (884.9617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (883.28766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (878.8459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (858.6384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (852.2209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (850.90174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (851.3279)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (853.56855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (858.5134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (865.77137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (870.6251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (871.6752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (869.7131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (863.5375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (860.3228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (858.38385)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (856.77607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (855.0084)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (853.7091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (852.22535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (848.4564)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (843.65705)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (841.23127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (842.8668)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (848.4856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (855.0486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (861.8174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (869.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (873.5699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (876.84186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (877.98377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (877.04206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (874.8608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (873.3452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (872.01557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (871.14655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (870.5524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (869.7378)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (867.81836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (866.1666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (865.3253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (863.5745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (858.21454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (852.8607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (851.29816)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (851.4819)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (855.5797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (866.80524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (868.13337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (867.4579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (865.61536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (862.34797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (857.05524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (852.0429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (848.7003)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (846.7583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (846.8006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (850.3676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (868.01697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (869.71796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (867.67737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (865.44324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (862.61536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (860.89454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (856.09955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (849.70777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (843.76056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (840.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (841.1855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (860.7692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (870.3542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (869.3734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (870.2724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (872.91614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (874.7303)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (874.2716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (868.8585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (856.90485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (856.5131)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (857.8199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (860.29206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (863.19495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (865.30597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (861.3756)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (856.81415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (854.55494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (854.9676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (856.99085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (857.3856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (856.71387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (858.6967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (862.85157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (866.4848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (863.67737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (861.56727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (859.90717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (858.4646)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (857.037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (855.9542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (856.2825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (858.86927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (863.761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (869.9719)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (870.53217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (870.00147)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (867.7034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (864.62336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (862.57514)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (864.26166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (870.52155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (876.3362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (873.4872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (856.83844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (861.15455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (864.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (867.11664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (868.84504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (869.56684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (868.34485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (865.56116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (855.3585)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (845.9268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (848.2125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (850.4984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (851.5253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (851.8479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.38)) (quote (1902.0557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.39)) (quote (1902.9563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.4)) (quote (1906.0833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.41)) (quote (1910.3912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.42)) (quote (1914.6997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.43)) (quote (1919.0077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.44)) (quote (1922.1528)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.45)) (quote (1922.7649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.46)) (quote (1923.2896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.47)) (quote (1922.8008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.48)) (quote (1920.4548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.49)) (quote (1917.3812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.5)) (quote (1914.5487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.51)) (quote (1899.7899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.52)) (quote (1896.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.53)) (quote (1907.3955)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.54)) (quote (1919.403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.55)) (quote (1914.8651)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.56)) (quote (1913.0867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.57)) (quote (1911.588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.58)) (quote (1910.7488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.59)) (quote (1911.3468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.6)) (quote (1913.8982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.61)) (quote (1914.8213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.62)) (quote (1914.3577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.63)) (quote (1912.6766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.64)) (quote (1910.5744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.65)) (quote (1909.1354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.66)) (quote (1909.1521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.67)) (quote (1909.5596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.68)) (quote (1909.6609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.69)) (quote (1907.5787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.7)) (quote (1901.8931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.71)) (quote (1899.9182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.72)) (quote (1901.9212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.73)) (quote (1906.515)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.74)) (quote (1911.0244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.75)) (quote (1912.9081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.76)) (quote (1916.7733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.77)) (quote (1919.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.78)) (quote (1921.5026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.79)) (quote (1922.0596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.8)) (quote (1922.9716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.81)) (quote (1926.0523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.82)) (quote (1929.9699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.83)) (quote (1931.4291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.84)) (quote (1929.7055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.85)) (quote (1925.6546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.86)) (quote (1924.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.87)) (quote (1910.0949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.88)) (quote (1903.5245)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.89)) (quote (1904.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.9)) (quote (1908.1936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.91)) (quote (1922.1618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.92)) (quote (1922.9893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.93)) (quote (1921.2527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.94)) (quote (1919.516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.95)) (quote (1919.5404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.96)) (quote (1937.7185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.97)) (quote (1942.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.98)) (quote (1944.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (1.99)) (quote (1947.0619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.0)) (quote (1948.7882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.01)) (quote (1950.7821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.02)) (quote (1952.7946)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.03)) (quote (1954.7935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.04)) (quote (1956.7182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.05)) (quote (1958.4061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.06)) (quote (1958.9692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.07)) (quote (1958.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.08)) (quote (1958.1517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.09)) (quote (1958.0731)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.1)) (quote (1958.7258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.11)) (quote (1959.5726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.12)) (quote (1959.0905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.13)) (quote (1957.2173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.14)) (quote (1954.8057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.15)) (quote (1953.1484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.16)) (quote (1954.3073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.17)) (quote (1955.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.18)) (quote (1952.177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.19)) (quote (1952.9613)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.2)) (quote (1963.8505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.21)) (quote (1947.0104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.22)) (quote (1939.143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.23)) (quote (1937.6301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.24)) (quote (1939.8383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.25)) (quote (1943.0966)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.26)) (quote (1946.6734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.27)) (quote (1952.2214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.28)) (quote (1954.8495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.29)) (quote (1954.4064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.3)) (quote (1952.5741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.31)) (quote (1953.3381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1952.9237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1950.174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1946.5924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1944.2554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1943.8694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1944.3967)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1947.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1950.7101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1953.6947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1954.4132)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1955.2393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1961.2191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1968.647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1971.8242)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1967.054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1962.0722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1945.877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1931.0458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.32)) (quote (1921.0798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.33)) (quote (1919.3933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.34)) (quote (1917.2455)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.35)) (quote (1914.8442)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.36)) (quote (1909.9116)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.37)) (quote (1904.9791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.38)) (quote (1900.0466)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.39)) (quote (1897.775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.4)) (quote (1900.27)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.41)) (quote (1902.7649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.42)) (quote (1905.2598)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.43)) (quote (1907.5972)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.44)) (quote (1909.2881)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.45)) (quote (1909.9014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.46)) (quote (1909.6387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.47)) (quote (1910.2593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.48)) (quote (1911.5872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.49)) (quote (1913.8377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.5)) (quote (1916.7666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.51)) (quote (1917.2478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.52)) (quote (1918.551)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.53)) (quote (1921.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.54)) (quote (1924.8992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.55)) (quote (1926.4376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.56)) (quote (1925.7542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.57)) (quote (1918.9741)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1914.6113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1912.3198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1909.1622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1899.7293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1895.0779)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1894.5354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1898.0265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1904.5482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1908.8981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1912.3236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1914.5487)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1915.2926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1914.4973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1912.7539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1912.1089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1912.2291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1912.6023)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1912.7316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1912.4696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1913.3554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1915.3639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1917.6633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1918.9979)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1916.9182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1911.5463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1907.1948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1903.9751)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1901.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1905.2261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1908.6325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1910.7377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1911.4813)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1912.6831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1923.2135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1933.744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1935.3233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1931.4486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1926.8372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1920.1248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1917.001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1914.985)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1912.986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1910.6361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1909.6035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1910.2459)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1910.9989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1910.5619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1908.5368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1907.7472)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1910.4944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1911.9843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1908.4537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1899.8869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1899.3706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1899.5977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1902.1583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1907.2042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1913.826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1918.4393)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1941.0166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1949.7684)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1949.6105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1946.7083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1928.3696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1925.691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1924.6915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1923.4999)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1921.9887)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1919.622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1915.1027)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1909.5347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1906.1224)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1907.0794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1910.6845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1911.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1909.9331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1907.1652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1904.0907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1902.3071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1895.7055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1892.3727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1882.7949)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1861.1791)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1840.4653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1842.0853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1844.2942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1856.5556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1880.7568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1882.6834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1884.6098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1886.5361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1885.4127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1877.596)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1857.7426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1849.4768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1847.8872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1849.6265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1854.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1872.2804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1871.3124)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1871.9485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1876.5747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1884.1257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1890.2922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1896.4588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1898.6648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1900.3875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1904.2681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1908.2444)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1910.271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1911.5786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1911.3164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1909.212)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1906.975)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1905.5285)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1905.0454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1904.9818)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1904.7258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1903.6812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1904.2337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1907.956)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1918.499)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1933.0001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1931.382)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1929.3944)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1914.9099)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1904.1845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1906.2031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1905.5189)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1906.0104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1908.1001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1909.8696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1909.9647)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1908.7916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1908.2423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1907.7667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1907.6494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1908.0194)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1908.5049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1907.13)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1905.5271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1904.3961)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1904.3993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1906.4597)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1909.4358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1910.9542)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1918.3903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1935.234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1955.3451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1957.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1941.5609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1920.5667)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1906.5841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1911.5064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1912.9882)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1913.9786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1913.8148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1912.3572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1911.0652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1913.5044)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1914.6693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1914.3451)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1913.4152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1914.268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1898.1526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1902.7433)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1910.1431)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1909.2257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1909.9208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1910.6571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1910.0984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1908.2222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1905.8611)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1905.3414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1906.3059)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1908.9694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1915.9497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1924.6593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1922.1941)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1920.4982)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1916.5994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1909.842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1902.0232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1899.2468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1898.0502)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1899.6618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1910.1509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1924.9811)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1919.879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1917.4083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1916.2225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1917.0453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1919.4158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1920.6721)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1917.6213)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1914.2877)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1913.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1914.7064)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1915.787)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1911.2573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1911.1908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1902.3209)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1885.4074)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1886.2555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1901.2506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1907.4015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1910.6375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1914.156)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1914.5702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1914.1552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1914.0388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1913.8139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1913.1682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1912.012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1912.1105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1913.3513)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1915.0435)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1916.3618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1916.2644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1914.8713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1913.6199)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1914.4392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1917.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1921.1008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1919.119)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1913.9037)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1912.7077)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1916.8986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1919.2905)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1915.1723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1907.3179)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1902.2503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1903.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1907.8589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1912.711)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1903.4434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1888.3082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1876.8046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1879.6394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1883.7842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1888.452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1892.137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1894.0181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1894.1277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1895.1923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1895.186)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1894.4304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1893.2924)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1892.1168)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (1892.5287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (1892.0591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (1890.3071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (1888.1145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (1887.8483)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1897.1296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1900.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1900.1088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1898.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1897.1803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1897.7695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1901.0724)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1904.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1906.3855)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1907.2964)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1906.0114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1904.9834)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1905.4146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1907.712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1911.4191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1915.2962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1922.3141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1927.5669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1928.8529)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1927.0603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1925.0101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1927.3253)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1931.5794)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1936.2162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1940.7056)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1941.9755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1942.6419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1936.1627)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1925.2002)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1922.32)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1921.3195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1919.7128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1918.4942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1917.7228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1916.4688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1914.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1913.6781)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1912.8842)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1911.7247)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1910.1994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1910.361)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1911.2593)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1911.5264)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1910.6256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1908.8449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1906.8568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1906.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1906.1746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1908.0311)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1912.9677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1914.4608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1913.8158)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1912.1546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1910.6853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1910.701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1912.576)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1912.3267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1910.4984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1908.4506)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1908.4389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1927.019)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1926.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1920.9678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1918.1284)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1916.8178)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1916.3591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1915.2315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1913.6305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1911.6633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1909.3799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1907.5234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1901.2687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1894.0476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1889.0612)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1889.2766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1891.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1875.4951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1865.9644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1867.6527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1869.1991)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1868.9266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1866.7835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1863.6697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1859.9913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1855.8276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1852.7313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1850.8164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1848.6304)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1846.0906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1844.6769)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1866.7604)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1869.4302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1866.4076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1863.3851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1860.4379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1860.4379)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.58)) (quote (1669.4618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.59)) (quote (1670.7344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.6)) (quote (1672.6055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.61)) (quote (1674.215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.62)) (quote (1674.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.63)) (quote (1674.9066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.64)) (quote (1675.1879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.65)) (quote (1676.1704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.66)) (quote (1678.1377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.67)) (quote (1680.1867)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.68)) (quote (1681.2662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.69)) (quote (1681.4181)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.7)) (quote (1681.0383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.71)) (quote (1680.8334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.72)) (quote (1681.7251)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.73)) (quote (1682.1874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.74)) (quote (1681.7981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.75)) (quote (1680.6195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.76)) (quote (1679.7258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.77)) (quote (1679.81)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.78)) (quote (1679.1106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.79)) (quote (1677.3154)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.8)) (quote (1674.9262)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.81)) (quote (1674.6478)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.82)) (quote (1674.8676)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.83)) (quote (1675.1755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.84)) (quote (1676.0243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.85)) (quote (1677.7345)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.86)) (quote (1679.3961)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.87)) (quote (1680.0204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.88)) (quote (1680.3683)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.89)) (quote (1680.8633)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.9)) (quote (1681.664)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.91)) (quote (1682.0592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.92)) (quote (1681.7942)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.93)) (quote (1681.1809)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.94)) (quote (1680.3554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.95)) (quote (1679.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.96)) (quote (1678.4749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.97)) (quote (1678.085)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.98)) (quote (1678.2153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (2.99)) (quote (1678.6088)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.0)) (quote (1678.9437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.01)) (quote (1678.8449)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.02)) (quote (1678.539)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.03)) (quote (1678.3915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.04)) (quote (1678.6482)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.05)) (quote (1679.3645)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.06)) (quote (1680.006)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.07)) (quote (1680.1464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.08)) (quote (1679.9857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.09)) (quote (1679.6903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.1)) (quote (1679.439)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.11)) (quote (1679.4591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.12)) (quote (1679.8803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.13)) (quote (1680.2778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.14)) (quote (1680.4777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.15)) (quote (1680.4423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.16)) (quote (1680.4579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.17)) (quote (1680.5265)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.18)) (quote (1680.4235)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.19)) (quote (1680.2415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.2)) (quote (1680.148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.21)) (quote (1680.4008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.22)) (quote (1680.4706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.23)) (quote (1680.2182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.24)) (quote (1679.8602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.25)) (quote (1679.6127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.26)) (quote (1679.4865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.27)) (quote (1679.1155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.28)) (quote (1678.9196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.29)) (quote (1678.9963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.3)) (quote (1679.2916)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.31)) (quote (1679.4365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.32)) (quote (1679.6471)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.33)) (quote (1680.1609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.34)) (quote (1680.6243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.35)) (quote (1680.6674)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.36)) (quote (1680.1045)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.37)) (quote (1679.7644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.38)) (quote (1679.8036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.39)) (quote (1679.7411)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.4)) (quote (1679.1419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.41)) (quote (1677.9518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.42)) (quote (1677.3115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.43)) (quote (1677.6046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.44)) (quote (1678.1727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.45)) (quote (1678.2518)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.46)) (quote (1677.1563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.47)) (quote (1675.6691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.48)) (quote (1674.9894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.49)) (quote (1674.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.5)) (quote (1674.9873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.51)) (quote (1674.7078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.52)) (quote (1672.778)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.53)) (quote (1659.364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.54)) (quote (1648.5582)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.55)) (quote (1650.3401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.56)) (quote (1654.5206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.57)) (quote (1654.4761)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.58)) (quote (1653.8662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.59)) (quote (1653.1771)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.6)) (quote (1656.03)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.61)) (quote (1677.039)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.62)) (quote (1679.2617)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.63)) (quote (1679.9546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.64)) (quote (1680.8832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.65)) (quote (1681.9328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.66)) (quote (1682.786)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.67)) (quote (1682.4055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.68)) (quote (1681.6355)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.69)) (quote (1681.0587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.7)) (quote (1681.0128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.71)) (quote (1681.3025)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.72)) (quote (1681.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.73)) (quote (1680.7891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.74)) (quote (1680.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.75)) (quote (1679.7548)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.76)) (quote (1679.0263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.77)) (quote (1678.1511)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.78)) (quote (1677.6026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.79)) (quote (1677.6399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.8)) (quote (1678.3342)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.81)) (quote (1679.4185)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.82)) (quote (1679.8092)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.83)) (quote (1679.88)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.84)) (quote (1679.9163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.85)) (quote (1679.994)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.86)) (quote (1679.6764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.87)) (quote (1678.9802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.88)) (quote (1678.7976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.89)) (quote (1679.1467)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.9)) (quote (1679.7682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.91)) (quote (1679.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.92)) (quote (1679.5565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.93)) (quote (1678.9544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.94)) (quote (1678.3555)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.95)) (quote (1677.9164)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.96)) (quote (1677.7577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.97)) (quote (1677.4828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.98)) (quote (1677.2069)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (3.99)) (quote (1677.2837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.0)) (quote (1677.8535)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.01)) (quote (1678.5687)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.02)) (quote (1678.5628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.03)) (quote (1678.4745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.04)) (quote (1678.6989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.05)) (quote (1679.302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.06)) (quote (1679.6906)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.07)) (quote (1678.3634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.08)) (quote (1674.0891)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.09)) (quote (1667.8607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.1)) (quote (1666.3976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.11)) (quote (1689.5128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.12)) (quote (1688.3305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.13)) (quote (1684.3237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.14)) (quote (1680.5805)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.15)) (quote (1678.1524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.16)) (quote (1676.9652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.17)) (quote (1676.1268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.18)) (quote (1675.2404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.19)) (quote (1674.8659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.2)) (quote (1675.2276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.21)) (quote (1675.7764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.22)) (quote (1675.2775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.23)) (quote (1674.1217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.24)) (quote (1673.7241)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.25)) (quote (1674.6217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.26)) (quote (1675.5453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.27)) (quote (1674.292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.28)) (quote (1664.7223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.29)) (quote (1657.9851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.3)) (quote (1660.1215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.31)) (quote (1665.6348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.32)) (quote (1670.9634)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.33)) (quote (1673.4828)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.34)) (quote (1673.835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.35)) (quote (1672.9692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.36)) (quote (1671.914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.37)) (quote (1672.1702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.38)) (quote (1672.9257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (1673.461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (1673.2677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (1672.1406)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (1670.4606)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (1668.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (1667.7682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (1668.722)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (1668.8388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (1651.6017)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (1647.2033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (1647.6837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (1646.0062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (1640.2079)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (1631.0839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (1625.4277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (1621.663)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (1619.1388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (1619.6583)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (1623.2565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (1623.4505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (1621.6476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (1619.2521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (1616.9951)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (1615.6869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (1614.7509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (1615.1532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.65)) (quote (1619.4446)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.66)) (quote (1633.0115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.67)) (quote (1633.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.68)) (quote (1633.9691)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.69)) (quote (1633.8146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.7)) (quote (1632.1293)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.71)) (quote (1629.644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.72)) (quote (1629.885)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.73)) (quote (1629.4402)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.74)) (quote (1623.0408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.75)) (quote (1612.745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.76)) (quote (1611.9057)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.77)) (quote (1612.1453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.78)) (quote (1613.7066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.79)) (quote (1615.9872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.8)) (quote (1618.1725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.81)) (quote (1619.148)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.82)) (quote (1618.6233)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.83)) (quote (1616.8128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.84)) (quote (1614.6782)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.85)) (quote (1613.6101)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.86)) (quote (1615.6852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.87)) (quote (1616.2642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (1627.7266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (1634.3712)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (1631.5324)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (1630.9602)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (1629.8789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (1615.458)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (1599.7536)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (1591.3477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (1593.5313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (1598.9563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (1601.7874)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (1601.7413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (1598.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (1593.8348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (1593.4257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (1590.2258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (1585.5685)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (1581.9011)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (1582.9352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (1587.6318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (1589.6846)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (1589.5403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (1587.523)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (1583.5571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (1580.4329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (1582.0662)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (1585.8682)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (1589.4031)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (1590.5282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (1592.4728)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (1594.7277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (1596.5595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (1598.0639)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (1600.3308)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (1606.1415)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (1608.7022)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (1608.3832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (1605.7191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (1601.278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (1597.8134)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (1594.7914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (1592.9725)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (1593.0426)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (1595.6228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (1597.9572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (1600.7847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (1609.3331)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (1624.5338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (1642.6187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (1643.071)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (1643.7383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (1654.3649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (1669.91)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (1669.5723)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (1669.1076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1667.7755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1666.3049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1665.9729)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1668.6256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1672.9386)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1674.9926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1677.1182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1680.3225)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1684.2549)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1683.8716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1679.8143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1675.3986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1673.4314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1676.1893)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1678.862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1681.2052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1682.1907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1681.6799)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1680.3965)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1679.5227)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1678.8143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1677.8504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1676.562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1675.2157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1674.6884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1674.0034)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1673.0618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1672.0354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1671.3427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1671.0618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1671.4157)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1672.0106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1672.4894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1672.5277)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1672.4159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1672.3078)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1672.0276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1671.6066)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1671.2588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1671.4581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1671.5835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1671.7827)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1672.5036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1674.4314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1677.2808)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1678.5271)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1678.3693)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1676.9861)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1674.5848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1671.8297)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1670.6067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1671.1151)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1673.6589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1678.4053)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1677.2853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1673.9592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1671.6845)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1665.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1645.3847)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1646.6727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1646.3258)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1645.1806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1646.9872)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1657.3699)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1667.7521)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1668.8005)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1668.6275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1670.0479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1672.1149)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1673.0763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1672.6234)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1672.0252)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1671.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1672.2899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1671.9772)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1670.7363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1669.8672)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1670.1232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1671.8026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1672.8733)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1673.4802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1673.8759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1674.4679)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1675.7244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1676.5901)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1677.6863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1679.5868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1681.3892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1681.1592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1676.228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1672.2465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1671.1932)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1672.1759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1672.4625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1671.6581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1671.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1672.3821)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1673.7844)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1674.9884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1674.9335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1674.2544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1673.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1673.2538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1674.1962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1675.8182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1676.8381)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1676.9221)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1676.2389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1675.2921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1674.5573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1674.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1674.4061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1674.8327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1675.0824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1675.0374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1675.4797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1676.3978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1677.4126)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1677.9319)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1677.6323)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1677.4232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1677.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1677.7553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1677.6054)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1676.599)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1675.5261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1674.6532)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1674.2102)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1674.4226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1675.8759)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1677.2677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1677.7268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1677.3362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1676.7354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1676.9922)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1677.0083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1676.7743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1677.2008)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1679.445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1681.5888)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1680.7257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1678.246)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1675.9159)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1675.5243)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1675.4697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1674.7796)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (1673.9457)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (1673.1843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (1672.5718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (1671.8992)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (1671.5569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (1671.831)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (1672.6547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (1673.7525)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (1674.6621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (1675.7896)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (1677.3007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (1678.7824)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (1679.5316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (1678.648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (1676.8108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (1674.7476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (1672.6766)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (1670.5128)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (1667.0322)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (1661.1299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (1654.569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (1648.1218)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (1641.7516)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (1630.6569)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (1626.0369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (1625.9463)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (1622.3622)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (1608.2175)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (1613.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (1615.7485)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (1602.5504)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (1579.2505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (1559.0286)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (1560.098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (1581.7865)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (1604.0938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (1623.4655)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (1642.4755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (1663.3726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (1669.336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (1671.0835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (1671.7815)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (1671.8423)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (1669.603)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (1665.7527)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (1661.621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (1657.6939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.36)) (quote (1654.2688)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.37)) (quote (1652.5249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.38)) (quote (1651.3573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.39)) (quote (1651.1554)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.4)) (quote (1652.068)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.41)) (quote (1653.7365)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.42)) (quote (1652.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.43)) (quote (1651.9067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.44)) (quote (1662.7369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.45)) (quote (1674.7302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.46)) (quote (1673.4396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.47)) (quote (1675.9856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.48)) (quote (1676.3954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.39)) (quote (2339.9173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.4)) (quote (2340.4383)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.41)) (quote (2339.3033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.42)) (quote (2338.2595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.43)) (quote (2337.8296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.44)) (quote (2337.66)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.45)) (quote (2337.4903)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.46)) (quote (2337.3206)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.47)) (quote (2335.4453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.48)) (quote (2334.8716)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.49)) (quote (2334.8843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.5)) (quote (2334.897)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.51)) (quote (2334.9097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.52)) (quote (2335.5462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.53)) (quote (2338.0562)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.54)) (quote (2341.3367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.55)) (quote (2344.6172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.56)) (quote (2347.898)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.57)) (quote (2346.0183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.58)) (quote (2343.424)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.59)) (quote (2342.8372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.6)) (quote (2344.8618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.61)) (quote (2346.8863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.62)) (quote (2349.5364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.63)) (quote (2355.609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.64)) (quote (2359.6353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.88)) (quote (2283.9136)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.89)) (quote (2279.9666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.9)) (quote (2273.7237)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.91)) (quote (2268.2137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.92)) (quote (2265.8137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.93)) (quote (2263.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.94)) (quote (2260.6018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.95)) (quote (2258.7195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.96)) (quote (2259.436)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.97)) (quote (2262.0108)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.98)) (quote (2268.169)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (4.99)) (quote (2272.837)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.0)) (quote (2274.3015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.01)) (quote (2275.4495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.02)) (quote (2277.1172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.03)) (quote (2278.563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2288.6526)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2301.2505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2290.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2279.2495)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2268.2488)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2263.3325)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2264.6453)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2264.8172)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2281.0376)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2285.4575)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.04)) (quote (2309.4878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.05)) (quote (2310.8396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.06)) (quote (2312.1912)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.07)) (quote (2313.543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.08)) (quote (2312.5418)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.09)) (quote (2311.53)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.1)) (quote (2311.833)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.11)) (quote (2313.4214)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (2313.7364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (2312.8509)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (2311.7305)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (2310.9744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (2310.7288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (2309.9832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.18)) (quote (2309.1182)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.19)) (quote (2308.802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.2)) (quote (2309.3394)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.21)) (quote (2310.6165)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.22)) (quote (2311.3748)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.23)) (quote (2311.2537)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.24)) (quote (2310.0913)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.25)) (quote (2308.2642)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.26)) (quote (2306.763)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.27)) (quote (2306.8838)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.28)) (quote (2308.5464)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.29)) (quote (2310.7832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.3)) (quote (2312.7908)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.31)) (quote (2313.952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.32)) (quote (2313.1953)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.33)) (quote (2310.935)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.34)) (quote (2308.7295)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.35)) (quote (2307.5984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.36)) (quote (2307.976)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.37)) (quote (2309.1338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.38)) (quote (2309.868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.39)) (quote (2310.0713)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.4)) (quote (2309.9336)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.41)) (quote (2309.9517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.42)) (quote (2310.9268)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (2311.9717)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (2312.5357)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (2312.4114)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (2311.745)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (2311.2884)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (2311.565)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (2312.3123)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (2313.1096)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (2313.3814)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (2313.4153)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (2313.9573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (2314.7222)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (2315.2857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (2315.0904)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (2314.5938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (2314.631)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (2314.9578)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (2315.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (2314.9522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (2314.191)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (2313.58)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (2313.107)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (2312.6248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (2311.862)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (2310.9016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (2310.3098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (2310.2137)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (2310.5899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (2311.272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (2311.8377)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (2311.747)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (2310.9588)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (2309.9475)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (2309.653)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (2310.614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (2311.839)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (2312.5362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (2312.399)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (2311.5545)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (2310.9248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (2310.9314)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (2311.282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (2311.726)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (2312.042)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (2312.1775)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (2312.3697)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (2312.7447)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (2313.301)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (2313.923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (2314.1087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (2314.0269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (2313.836)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (2313.6692)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (2313.6477)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (2313.9312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (2314.1973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (2314.2183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (2313.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (2313.0804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (2312.5948)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (2312.595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (2312.8155)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (2312.9732)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (2312.7652)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (2312.109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (2311.4727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (2311.1162)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (2311.145)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (2311.538)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (2312.0076)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (2312.0413)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (2311.4927)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (2310.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (2309.6255)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (2310.036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (2311.2334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (2312.344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (2312.8894)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (2312.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (2312.1094)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (2311.762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (2311.6983)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (2311.9082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (2312.3196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (2312.8572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (2313.5232)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (2314.2115)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (2314.7176)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (2314.7718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (2314.1507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (2313.5015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (2312.9737)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (2312.6204)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (2312.4263)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (2312.2793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (2312.0298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (2311.5579)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (2310.9202)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (2310.316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (2310.4832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (2311.2344)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (2312.0635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (2312.581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (2312.4895)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (2312.1216)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (2312.129)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (2312.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (2313.1043)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (2313.6087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (2313.561)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (2312.9387)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (2312.0889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (2311.419)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (2311.363)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (2311.9353)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (2312.4082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (2312.6929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (2312.9073)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (2313.2793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (2313.78)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (2314.048)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (2314.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (2314.288)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (2314.367)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (2314.1026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (2313.3977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (2312.6223)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (2312.1863)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (2312.494)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (2313.4248)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (2313.9793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (2314.1065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (2313.9556)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (2313.7876)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (2313.6858)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (2313.708)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (2313.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (2313.962)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (2314.0215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (2314.082)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (2314.282)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (2314.228)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (2313.669)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (2312.5125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (2311.7427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (2312.0269)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (2312.928)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (2313.963)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (2314.62)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (2314.7559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (2314.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (2315.4849)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (2316.1497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (2316.7832)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (2317.0757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (2317.2508)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (2317.309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (2317.1707)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (2316.7505)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (2316.2434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (2315.9607)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (2315.694)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (2315.2036)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (2314.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (2312.592)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (2309.6743)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (2304.7798)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (2297.3907)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (2287.7547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (2282.2127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (2281.8133)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (2297.5366)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (2315.9163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (2316.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (2316.522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.12)) (quote (852.12757)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.13)) (quote (853.8208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.14)) (quote (855.37806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.15)) (quote (856.9354)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.16)) (quote (858.49274)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.17)) (quote (858.51746)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.43)) (quote (1555.8817)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1556.7727)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1556.5299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1556.0792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1556.5292)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1557.6921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1559.1925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1560.625)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1561.5553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1562.0568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1562.4434)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1562.7122)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1562.853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1562.8479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1562.6401)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1562.2986)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1561.7595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1560.9812)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1559.9476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1559.2736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1558.993)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1558.4049)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1557.0859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1554.8856)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1553.3984)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1552.7389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1551.989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1550.777)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1549.2395)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1549.1217)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1550.1093)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1551.7362)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1553.2373)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1553.5618)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1551.0624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1549.2113)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1548.6106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1549.2715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1550.6696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1551.8372)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1553.5359)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1555.4163)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1557.0275)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1557.8392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1558.173)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1558.5936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1559.1333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1559.7208)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1560.2018)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1560.5789)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1561.1375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1561.8384)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1562.5266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1562.9503)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1562.8244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1562.4718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1562.0012)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1561.4276)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1560.6921)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1559.5226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1558.1936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1557.0852)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1556.3938)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1556.1517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1555.4883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1554.5352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1553.7428)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1553.2125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1552.7774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1551.8121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1551.1614)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1551.062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1551.4103)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1551.8452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1552.1343)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1553.007)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1554.2568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1555.5734)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1556.5678)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1557.1974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1557.9978)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1558.9358)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1559.8484)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1560.4804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1560.6318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1560.5825)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1560.5138)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1560.5188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1560.6139)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1560.2792)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1559.2749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1558.0701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1556.977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1556.1952)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1555.2559)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1553.9445)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1552.9522)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1552.6375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1553.1146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1553.7616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1554.2677)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1554.914)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1555.7793)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1556.8032)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1557.6174)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1558.313)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1558.9879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1559.5715)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1559.883)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1559.5016)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1558.8595)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1558.3795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1558.2207)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1558.3754)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1558.5892)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1558.8926)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1559.2047)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1559.4739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1559.6853)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1560.1939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1560.8352)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1561.0795)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1560.6878)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1559.6184)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1558.2501)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1556.9889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1556.0608)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1555.7498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1556.3543)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1558.1744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1559.6408)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1560.4701)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1560.6058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1560.1571)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1559.517)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1559.2106)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1559.2886)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1559.5768)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1559.7195)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1558.6644)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1556.4619)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1554.2421)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1552.5581)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1551.6547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1551.2348)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1550.6087)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (1549.3875)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (1547.7605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (1546.1681)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (1544.4244)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (1544.1452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (1546.0046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (1550.3416)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (1556.6869)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (1558.0349)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (1558.5198)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (1558.7568)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (1558.7429)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (1558.1954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (1556.5226)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (1553.0462)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (1550.5316)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (1550.261)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (1552.5783)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (1554.9889)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (1554.2835)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (1553.0001)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (1552.6298)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (1554.0486)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (1555.822)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (1556.2615)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (1556.6109)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (1558.6065)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (1563.6587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (1567.8403)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (1567.4346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (1564.1414)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (1561.4802)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (1563.0337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (1564.587)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (1566.1405)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (1571.334)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (1579.183)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (1587.0315)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (1594.8806)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (1601.552)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (1597.9736)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (1587.1624)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (1576.3507)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (1565.5396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.33)) (quote (1561.9196)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.34)) (quote (1560.1211)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.35)) (quote (1559.0989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.44)) (quote (1036.127)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.45)) (quote (1037.3873)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.46)) (quote (1037.649)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.47)) (quote (1038.1923)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.48)) (quote (1039.5803)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.49)) (quote (1041.1749)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.5)) (quote (1042.2498)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.51)) (quote (1041.9939)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.52)) (quote (1041.7033)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.53)) (quote (1041.9135)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.54)) (quote (1042.3347)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.55)) (quote (1042.5997)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.56)) (quote (1042.2666)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.57)) (quote (1041.4744)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.58)) (quote (1040.5755)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.59)) (quote (1039.9407)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.6)) (quote (1039.5547)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.61)) (quote (1039.0338)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.62)) (quote (1038.8257)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.63)) (quote (1037.9335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.64)) (quote (1037.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.65)) (quote (1037.4859)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.66)) (quote (1036.9937)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.67)) (quote (1037.1696)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.68)) (quote (1036.097)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.69)) (quote (1035.2954)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.7)) (quote (1035.0287)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.71)) (quote (1034.4389)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.72)) (quote (1034.6493)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.73)) (quote (1034.0432)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.74)) (quote (1033.4273)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.75)) (quote (1032.9266)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.76)) (quote (1032.0784)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.77)) (quote (1031.4312)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.78)) (quote (1031.104)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.79)) (quote (1031.4368)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.8)) (quote (1032.4375)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.81)) (quote (1033.8121)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.82)) (quote (1034.8328)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.83)) (quote (1036.089)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.84)) (quote (1037.1616)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.85)) (quote (1038.0437)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.86)) (quote (1039.055)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.87)) (quote (1039.337)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.88)) (quote (1039.5333)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.89)) (quote (1040.026)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.9)) (quote (1040.841)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.91)) (quote (1041.6981)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.92)) (quote (1041.739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.93)) (quote (1041.6476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.94)) (quote (1041.6524)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.95)) (quote (1041.7356)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.96)) (quote (1041.6826)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.97)) (quote (1041.2589)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.98)) (quote (1040.8329)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (5.99)) (quote (1040.2804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.0)) (quote (1039.5427)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.01)) (quote (1038.6141)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.02)) (quote (1037.4774)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.03)) (quote (1037.5497)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.04)) (quote (1038.0925)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.05)) (quote (1038.6267)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.06)) (quote (1038.7974)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.07)) (quote (1036.5296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.08)) (quote (1034.9572)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.09)) (quote (1034.2046)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.1)) (quote (1034.2398)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.11)) (quote (1034.8544)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.12)) (quote (1034.6058)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.13)) (quote (1034.695)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.14)) (quote (1034.6146)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.15)) (quote (1034.4015)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.16)) (quote (1034.4706)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.17)) (quote (1034.9188)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.18)) (quote (1036.2868)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.19)) (quote (1037.6083)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.2)) (quote (1038.4479)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.21)) (quote (1038.7374)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.22)) (quote (1038.74)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.23)) (quote (1039.3052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.24)) (quote (1039.8915)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.25)) (quote (1040.2977)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.26)) (quote (1040.5339)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.27)) (quote (1040.335)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.28)) (quote (1040.3143)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.29)) (quote (1040.318)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.3)) (quote (1040.2577)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.31)) (quote (1040.0797)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.32)) (quote (1039.6051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.33)) (quote (1038.476)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.34)) (quote (1037.3256)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.35)) (quote (1036.461)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.36)) (quote (1036.0098)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.37)) (quote (1036.5278)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.38)) (quote (1036.2454)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.39)) (quote (1035.7166)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.4)) (quote (1035.2776)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.41)) (quote (1035.1752)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.42)) (quote (1036.2299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.43)) (quote (1037.3764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.44)) (quote (1038.6296)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.45)) (quote (1039.6563)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.46)) (quote (1039.9299)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.47)) (quote (1039.3973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.48)) (quote (1038.7648)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.49)) (quote (1038.8762)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.5)) (quote (1039.5947)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.51)) (quote (1040.1929)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.52)) (quote (1040.152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.53)) (quote (1039.2396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.54)) (quote (1038.291)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.55)) (quote (1037.8392)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.56)) (quote (1038.2067)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.57)) (quote (1038.8014)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.58)) (quote (1039.0879)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.59)) (quote (1039.327)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.6)) (quote (1039.702)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.61)) (quote (1040.3215)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.62)) (quote (1040.6553)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.63)) (quote (1040.9105)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.64)) (quote (1040.3659)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.65)) (quote (1039.0573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.66)) (quote (1037.4899)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.67)) (quote (1036.628)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.68)) (quote (1037.1249)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.69)) (quote (1037.8573)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.7)) (quote (1038.6364)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.71)) (quote (1039.6857)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.72)) (quote (1040.4152)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.73)) (quote (1040.6546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.74)) (quote (1040.4591)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.75)) (quote (1040.052)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.76)) (quote (1039.7621)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.77)) (quote (1039.8594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.78)) (quote (1039.6704)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.79)) (quote (1039.2438)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.8)) (quote (1038.3125)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.81)) (quote (1036.6091)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.82)) (quote (1035.8468)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.83)) (quote (1035.8187)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.84)) (quote (1036.0177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.85)) (quote (1035.7804)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.86)) (quote (1034.4605)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.87)) (quote (1032.8396)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.88)) (quote (1031.7656)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.89)) (quote (1031.2758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.9)) (quote (1031.0452)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.91)) (quote (1030.5989)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.92)) (quote (1030.1062)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.93)) (quote (1030.3739)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.94)) (quote (1031.8193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.95)) (quote (1034.081)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.96)) (quote (1036.369)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.97)) (quote (1037.7272)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.98)) (quote (1038.0764)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (6.99)) (quote (1038.061)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.0)) (quote (1037.8959)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.01)) (quote (1037.594)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.02)) (quote (1036.7404)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.03)) (quote (1035.7933)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.04)) (quote (1034.8546)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.05)) (quote (1034.1051)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.06)) (quote (1033.6843)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.07)) (quote (1032.9035)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.08)) (quote (1031.4609)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.09)) (quote (1029.9718)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.1)) (quote (1029.0177)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.11)) (quote (1028.936)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.12)) (quote (1027.5801)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.13)) (quote (1028.635)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.14)) (quote (1030.9534)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.15)) (quote (1033.3851)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.16)) (quote (1034.8029)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.17)) (quote (1035.0346)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.18)) (quote (1036.0193)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.19)) (quote (1038.6973)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.2)) (quote (1042.3673)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.21)) (quote (1045.2465)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.22)) (quote (1042.0388)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.23)) (quote (1038.8309)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.24)) (quote (1035.5236)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.25)) (quote (1033.0758)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.26)) (quote (1032.6931)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.27)) (quote (1034.1848)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.28)) (quote (1035.7144)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.29)) (quote (1038.3643)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.3)) (quote (1040.557)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.31)) (quote (1040.2302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (7.32)) (quote (1040.2302)) (quote bpf) 6))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))) :from-file t)) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "FILE-BOX" (quote file-box) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "BPF-LIST" nil) (om-load-inputfun (quote input-funbox) "no documentation" "FILE-PATH" nil))) (om-make-point 168 447) (om-make-point 297 66) nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 338 290) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 87 106) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 111 32) (quote "Type declarations") "" (om-make-point 6 73) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF-WRITE-FRAME 2" (quote sdif-write-frame) (quote ((om-load-inputfun (quote input-funbox) "an SDIFFrame to write" "SELF" nil) (om-load-inputfun (quote input-funbox) "an SDIF file pointer" "FSTREAM" nil))) (om-make-point 375 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 152 64) (quote "At each iteration:$- Write the frame$- Increment the counter") "" (om-make-point 348 633) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 184 65) (quote "Here the time tags of the frames are set and incremented by the loop counter") "" (om-make-point 41 459) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 48) (quote "Create an SDIF Frame with the matrix (or matrices)") "" (om-make-point 427 440) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 127 44) (quote "Writes a Frame in an SDIF file stream") "" (om-make-point 474 547) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 48) (quote "Create an SDIF Matrix with each BPF from the list") "" (om-make-point 425 321) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 140 48) (quote "END OF THE LOOP: $Return the filename") "" (om-make-point 586 223) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 129 69) (quote "This box represents the file pointer (or 'stream')") "" (om-make-point 444 207) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 146 91) (quote "Before to start the loop:$Write file header with type declarations (optionnaly also NVTs)") "" (om-make-point 0 332) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.000001 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 311 159) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLOAT" (quote float) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 315 436) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "count" (quote counter) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" (quote t)))) (om-make-point 230 402) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" "1TRC") (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 269 480) (om-make-point 122 51) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature nil :ftime 0.0 :streamid 0 :lmatrix nil :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 358 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "POINT-LIST" (quote point-list) (quote ((om-load-inputfun (quote input-funbox) "3DS" "3DS" nil))) (om-make-point 268 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 272 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "XMAT") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :k0) nil nil))) (om-make-point 303 364) (om-make-point 57 50) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) nil) (setf (lcontrols array) (list)) (setf (data array) nil) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open") (list "All close")) 0 (quote t) nil (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 77 217) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "1TRC") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XMAT" "datamat"))))) (om-make-point 110 148) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XMAT" "datamat")) :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1")))) (om-make-point 29 149) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1") :from-file t)) nil nil (pairlis (quote (mode grillestep notechancolor? cmnpref zoom inport outport deltapict winsize winpos palette-mode obj-mode show-stems)) (list 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 0 0 (om-make-point 0 0) (om-make-point 370 280) (om-make-point 40 10) 0 0 (quote t))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SDIF-WRITE-HEADER" (quote sdif-write-header) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "STREAM" nil) (om-load-inputfun (quote input-funbox) "no documentation" "TYPES" nil) (om-load-inputfun (quote input-funbox) "list of SDIFNVT" "NVTS" nil))) (om-make-point 123 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "init" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 154 367) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "StreamFile" (quote streamfile) (quote ((om-load-inputfun (quote input-funbox) "pathname or string" "PATHNAME" nil))) (om-make-point 411 146) nil nil nil nil 1))) (setf (filetype box) (quote sdif) (direction box) :io (if-ex box) :overwrite) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 437 55) "no documentation" "FILE-PATH" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 321 85) "no documentation" "BPF-LIST" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 589 166) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil) (om-load-inputfun (quote input-funbox) "patch" "OPPATCH" nil))) (om-make-point 217 580) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((15 0 3 0 nil 0) (25 0 3 1 nil 0) (27 0 12 0 nil 0) (14 1 13 0 nil 0) (13 0 15 2 nil 0) (16 0 15 4 nil 0) (19 0 16 0 nil 0) (12 0 17 0 nil 0) (17 0 18 0 nil 0) (18 0 19 1 nil 0) (0 0 19 2 nil 0) (12 0 19 3 nil 0) (22 0 20 0 nil 0) (21 0 20 1 nil 0) (1 0 21 2 nil 0) (1 0 22 2 nil 0) (25 0 23 0 nil 0) (20 0 23 1 nil 0) (23 0 24 0 nil 0) (26 0 25 0 nil 0) (26 0 28 0 nil 0) (3 0 29 0 nil 0) (14 0 29 1 nil 0))) 1 "file-box" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "bpf" (om-load-patch-abs1 "bpf" (quote ((let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 248 256) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 325 549) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 505 332) (om-make-point 26 28) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 193 362) (om-make-point 397 120) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 373 260) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 119 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 1 0 nil 0) (0 0 3 1 nil 0) (4 0 3 2 nil 0) (2 0 3 3 nil 0) (5 0 4 0 nil 0) (6 0 5 0 nil 0))) 6.16 nil "" (om-make-point -8 -8) (om-make-point 1366 665)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 25 180) nil (list nil) "l" "bpf"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Extraindo Parciais de SDIF" (om-load-patch-abs1 "Extraindo Parciais de SDIF" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 91 449) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 103 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 101 368) nil nil "&" (list (let ((box (om-load-seqbox "SEQUENCE 2" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 874 379) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 767 55) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 3" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 27.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2020/04/26 20:08:37" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 845 56) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 970 94) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT 2" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 875 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 624 193) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 494 377) nil nil nil 4))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 454 178) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 169 275) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur 2" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 45.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2020/04/26 20:08:37" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 108 257) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GET-SLOT" (quote get-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil))) (om-make-point 158 327) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM=" (quote om=) (quote ((om-load-inputfun (quote input-funbox) "a number" "A" 0) (om-load-inputfun (quote input-funbox) "a number" "B" 0))) (om-make-point 164 404) (om-make-point 85 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 264 443) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 252 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "INITDO" (quote initdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 21 462) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxinstance "pointeur" (let ((copy (make-instance (quote ominstance) :name "pointeur" :icon 215))) (setf (instance copy) (if (find-class (quote store) nil) (make-instance (quote store) :value 0.0D0 :from-file t))) (setf (edition-params copy) (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40)))) (setf (create-info copy) (quote ("2020/04/26 20:08:37" "--"))) (setf (doc copy) (str-with-nl "")) copy) (quote nil) (om-make-point 8 160) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 114 198) (om-make-point 47 28) (quote value) "value" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SET-SLOT" (quote set-slot) (quote ((om-load-inputfun (quote input-funbox) "object" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "slot" "SLOT" nil) (om-load-inputfun (quote input-funbox) "value" "VALUE" nil))) (om-make-point 19 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAAR" (quote caar) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 242 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 484 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 384 521) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 7) (5 1 0 1 nil 6) (19 0 1 0 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0) (1 0 4 2 nil 0) (7 1 5 0 nil 0) (5 0 6 0 nil 4) (7 2 6 1 nil 3) (7 0 6 2 nil 2) (4 0 6 3 nil 5) (19 0 7 0 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (13 0 11 1 nil 0) (11 0 12 0 nil 0) (7 0 12 1 nil 1) (6 0 12 2 nil 0) (19 0 13 0 nil 0) (17 0 14 0 nil 0) (15 0 17 0 nil 0) (16 0 17 1 nil 0) (18 0 17 2 nil 0) (20 0 18 0 nil 0) (20 0 19 0 nil 0) (0 1 21 0 nil 8) (12 0 22 0 nil 0))) 1 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "elegante map car" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input1" nil))) (om-make-point 189 301) nil nil nil (list (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 352 443) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputfun (quote input-funbox) "level of parenthesis" "LEVEL" nil))) (om-make-point 340 473) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 312 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 222 308) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 355 218) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 29 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 250 402) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input1" 1 (om-make-point 292 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 5 40) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 454 506) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 203 523) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((6 1 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (4 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 1 nil 0) (8 0 5 0 nil 0) (3 0 6 0 nil 0) (1 0 9 0 nil 0) (6 0 10 0 nil 0))) 1 "elegante map car" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil) (om-load-inputkeyword (quote input-keyword) "test function" "test" (quote :test) (quote (quote <)) nil) (om-load-inputkeyword (quote input-keyword) "test key" "key" (quote :key) nil nil))) (om-make-point 248 404) (om-make-point 106 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 312 370) (om-make-point 28 28) (quote <) "<" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 372 372) (om-make-point 40 28) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "GETSDIFDATA" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (int)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type (string)" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "field number (int or list)" "CNUM" 0) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 58 238) (om-make-point 346 54) nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 124 204) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 159 204) (om-make-point 55 28) "1TRC" "\"1TRC\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 222 150) (om-make-point 55 28) (list 0 1 2) "(0 1 2)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (4 0 2 0 nil 0) (7 0 3 0 nil 0) (7 1 3 1 nil 0) (3 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (1 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 7 2 nil 0) (9 0 7 3 nil 0) (10 0 7 4 nil 0))) 6.16 nil "" (om-make-point 200 0) (om-make-point 500 696)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 743/3 962/9) nil (list (append (list nil (list (list 0.0D0 2846.272705078125D0 3.703406764543615D-5 0.0D0)) (list (list 0.0D0 2850.096923828125D0 6.804928125347942D-5 0.009999999776482582D0)) (list (list 0.0D0 2850.595458984375D0 1.0013813152909279D-4 0.019999999552965164D0)) (list (list 0.0D0 2849.62646484375D0 1.2822079588659108D-4 0.029999999329447747D0)) (list (list 0.0D0 2848.292236328125D0 1.4832471788395196D-4 0.03999999910593033D0)) (list (list 0.0D0 2846.9462890625D0 1.5757854271214456D-4 0.04999999701976776D0)) (list (list 0.0D0 2846.39404296875D0 1.4841988740954548D-4 0.05999999865889549D0)) (list (list 0.0D0 2846.581298828125D0 1.4036029460839927D-4 0.07000000029802323D0)) (list (list 0.0D0 2855.3701171875D0 1.3661858974955976D-4 0.07999999821186066D0)) (list (list 0.0D0 2864.281982421875D0 2.2322594304569066D-4 0.08999999612569809D0)) (list (list 0.0D0 2849.408447265625D0 5.645281635224819D-4 0.09999999403953552D0)) (list (list 0.0D0 2851.11767578125D0 0.0010728834895417095D0 0.10999999940395355D0)) (list (list 0.0D0 2852.27734375D0 0.0016829675296321512D0 0.11999999731779099D0)) (list (list 0.0D0 2853.296142578125D0 0.0022894570138305426D0 0.12999999523162842D0)) (list (list 0.0D0 2854.414794921875D0 0.002798314904794097D0 0.14000000059604645D0)) (list (list 0.0D0 2855.715576171875D0 0.003125752555206418D0 0.14999999105930328D0)) (list (list 0.0D0 2856.739501953125D0 0.0031833341345191D0 0.1599999964237213D0)) (list (list 0.0D0 2857.213623046875D0 0.003091481514275074D0 0.17000000178813934D0)) (list (list 0.0D0 2857.339111328125D0 0.002919548423960805D0 0.17999999225139618D0)) (list (list 0.0D0 2857.35498046875D0 0.0027259879279881716D0 0.1899999976158142D0)) (list (list 0.0D0 2857.54052734375D0 0.0025607063435018063D0 0.19999998807907105D0)) (list (list 0.0D0 2858.014892578125D0 0.0024845621082931757D0 0.20999999344348908D0)) (list (list 0.0D0 2858.577880859375D0 0.0024857099633663893D0 0.2199999988079071D0)) (list (list 0.0D0 2859.17578125D0 0.0025529079139232636D0 0.22999998927116394D0)) (list (list 0.0D0 2859.703125D0 0.0026842716615647078D0 0.23999999463558197D0)) (list (list 0.0D0 2860.006103515625D0 0.0028861910104751587D0 0.25D0)) (list (list 0.0D0 2859.665771484375D0 0.003249707166105509D0 0.25999999046325684D0)) (list (list 0.0D0 2858.652099609375D0 0.0037486173678189516D0 0.26999998092651367D0)) (list (list 0.0D0 2857.094482421875D0 0.004322899971157312D0 0.2800000011920929D0)) (list (list 0.0D0 2855.242431640625D0 0.004882486071437597D0 0.28999999165534973D0)) (list (list 0.0D0 2853.4638671875D0 0.00530870771035552D0 0.29999998211860657D0)) (list (list 0.0D0 2852.263427734375D0 0.005439188797026873D0 0.3100000023841858D0)) (list (list 0.0D0 2851.58935546875D0 0.005510280840098858D0 0.3199999928474426D0)) (list (list 0.0D0 2851.321533203125D0 0.005663254298269749D0 0.32999998331069947D0)) (list (list 0.0D0 2851.29296875D0 0.005952497944235802D0 0.3400000035762787D0)) (list (list 0.0D0 2851.284912109375D0 0.006355540826916695D0 0.3499999940395355D0)) (list (list 0.0D0 2850.9794921875D0 0.006637701764702797D0 0.35999998450279236D0)) (list (list 0.0D0 2850.5185546875D0 0.006731666624546051D0 0.3700000047683716D0)) (list (list 0.0D0 2850.003173828125D0 0.006683766841888428D0 0.3799999952316284D0)) (list (list 0.0D0 2849.51025390625D0 0.006538750603795052D0 0.38999998569488526D0)) (list (list 0.0D0 2849.10107421875D0 0.0063445596024394036D0 0.3999999761581421D0)) (list (list 0.0D0 2848.98193359375D0 0.006179634016007185D0 0.4099999964237213D0)) (list (list 0.0D0 2849.052490234375D0 0.006146669387817383D0 0.41999998688697815D0)) (list (list 0.0D0 2849.15283203125D0 0.0062488978728652D0 0.429999977350235D0)) (list (list 0.0D0 2849.12646484375D0 0.00642973929643631D0 0.4399999976158142D0)) (list (list 0.0D0 2848.820556640625D0 0.006579693406820297D0 0.44999998807907105D0)) (list (list 0.0D0 2848.228271484375D0 0.006518326699733734D0 0.4599999785423279D0)) (list (list 0.0D0 2847.867431640625D0 0.006310635711997747D0 0.4699999988079071D0)) (list (list 0.0D0 2847.9833984375D0 0.006021646782755852D0 0.47999998927116394D0)) (list (list 0.0D0 2848.65966796875D0 0.005717056337743998D0 0.4899999797344208D0)) (list (list 0.0D0 2849.82958984375D0 0.005466944072395563D0 0.5D0)) (list (list 0.0D0 2850.8193359375D0 0.005362239200621843D0 0.5099999904632568D0)) (list (list 0.0D0 2851.282958984375D0 0.005330574233084917D0 0.5199999809265137D0)) (list (list 0.0D0 2851.412841796875D0 0.005327253602445126D0 0.5299999713897705D0)) (list (list 0.0D0 2851.392578125D0 0.005322483833879232D0 0.5399999618530273D0)) (list (list 0.0D0 2851.40283203125D0 0.005298476666212082D0 0.550000011920929D0)) (list (list 0.0D0 2851.293701171875D0 0.005323116667568684D0 0.5600000023841858D0)) (list (list 0.0D0 2850.872802734375D0 0.005465843714773655D0 0.5699999928474426D0)) (list (list 0.0D0 2850.154296875D0 0.005706729367375374D0 0.5799999833106995D0)) (list (list 0.0D0 2849.179931640625D0 0.005998766981065273D0 0.5899999737739563D0)) (list (list 0.0D0 2848.023681640625D0 0.006271512247622013D0 0.5999999642372131D0)) (list (list 0.0D0 2846.814453125D0 0.006460294593125582D0 0.6100000143051148D0)) (list (list 0.0D0 2846.040771484375D0 0.006579280830919743D0 0.6200000047683716D0)) (list (list 0.0D0 2845.832763671875D0 0.006619530264288187D0 0.6299999952316284D0)) (list (list 0.0D0 2846.06884765625D0 0.006599436979740858D0 0.6399999856948853D0)) (list (list 0.0D0 2846.421875D0 0.006561826448887587D0 0.6499999761581421D0)) (list (list 0.0D0 2846.302978515625D0 0.006616064812988043D0 0.6599999666213989D0)) (list (list 0.0D0 2845.95361328125D0 0.006828228943049908D0 0.6699999570846558D0)) (list (list 0.0D0 2845.661376953125D0 0.007157598622143269D0 0.6800000071525574D0)) (list (list 0.0D0 2845.600341796875D0 0.007525234017521143D0 0.6899999976158142D0)) (list (list 0.0D0 2845.862548828125D0 0.00781956221908331D0 0.699999988079071D0)) (list (list 0.0D0 2846.364990234375D0 0.007906720973551274D0 0.7099999785423279D0)) (list (list 0.0D0 2846.785400390625D0 0.007895020768046379D0 0.7199999690055847D0)) (list (list 0.0D0 2846.97412109375D0 0.007866963744163514D0 0.7299999594688416D0)) (list (list 0.0D0 2846.886962890625D0 0.007867407985031605D0 0.7400000095367432D0)) (list (list 0.0D0 2846.56884765625D0 0.007913406006991864D0 0.75D0)) (list (list 0.0D0 2846.306884765625D0 0.007908904924988747D0 0.7599999904632568D0)) (list (list 0.0D0 2846.234619140625D0 0.0077548581175506115D0 0.7699999809265137D0)) (list (list 0.0D0 2846.251708984375D0 0.0074776108376681805D0 0.7799999713897705D0)) (list (list 0.0D0 2846.294921875D0 0.00712806498631835D0 0.7899999618530273D0)) (list (list 0.0D0 2846.324951171875D0 0.006779262330383062D0 0.7999999523162842D0)) (list (list 0.0D0 2846.439453125D0 0.006513184867799282D0 0.8100000023841858D0)) (list (list 0.0D0 2846.656005859375D0 0.006314304191619158D0 0.8199999928474426D0)) (list (list 0.0D0 2846.997802734375D0 0.006147067993879318D0 0.8299999833106995D0)) (list (list 0.0D0 2847.47607421875D0 0.0059797028079628945D0 0.8399999737739563D0)) (list (list 0.0D0 2848.079345703125D0 0.0057828123681247235D0 0.8499999642372131D0)) (list (list 0.0D0 2848.6015625D0 0.0055709220468997955D0 0.85999995470047D0)) (list (list 0.0D0 2848.893798828125D0 0.005405639298260212D0 0.8700000047683716D0)) (list (list 0.0D0 2849.04296875D0 0.005284735932946205D0 0.8799999952316284D0)) (list (list 0.0D0 2849.17333984375D0 0.005183422937989235D0 0.8899999856948853D0)) (list (list 0.0D0 2849.438720703125D0 0.00505905831232667D0 0.8999999761581421D0)) (list (list 0.0D0 2849.955322265625D0 0.0048318589106202126D0 0.9099999666213989D0)) (list (list 0.0D0 2850.5380859375D0 0.004523633047938347D0 0.9199999570846558D0)) (list (list 0.0D0 2851.092529296875D0 0.004181296098977327D0 0.9300000071525574D0)) (list (list 0.0D0 2851.541259765625D0 0.0038481848314404488D0 0.9399999976158142D0)) (list (list 0.0D0 2851.818115234375D0 0.003567362204194069D0 0.949999988079071D0)) (list (list 0.0D0 2851.880615234375D0 0.0033735893666744233D0 0.9599999785423279D0)) (list (list 0.0D0 2851.840087890625D0 0.003239662619307637D0 0.9699999690055847D0)) (list (list 0.0D0 2851.7138671875D0 0.003161311848089099D0 0.9799999594688416D0)) (list (list 0.0D0 2851.47412109375D0 0.00313809746876359D0 0.9899999499320984D0)) (list (list 0.0D0 2851.07470703125D0 0.003170402953401208D0 1.0D0)) (list (list 0.0D0 2850.544677734375D0 0.003282510209828615D0 1.0099999904632569D0)) (list (list 0.0D0 2850.03515625D0 0.003461403539404273D0 1.0199999809265137D0)) (list (list 0.0D0 2849.58349609375D0 0.0036824773997068405D0 1.0299999713897705D0)) (list (list 0.0D0 2849.134521484375D0 0.003920315764844418D0 1.0399999618530274D0)) (list (list 0.0D0 2848.576171875D0 0.004148127976804972D0 1.0499999523162842D0)) (list (list 0.0D0 2847.75048828125D0 0.004366090055555105D0 1.059999942779541D0)) (list (list 0.0D0 2846.9619140625D0 0.00459673535078764D0 1.0699999332427979D0)) (list (list 0.0D0 2846.3798828125D0 0.004809282720088959D0 1.0799999237060547D0)) (list (list 0.0D0 2846.032958984375D0 0.00497620040550828D0 1.090000033378601D0)) (list (list 0.0D0 2845.856201171875D0 0.005073984619230032D0 1.100000023841858D0)) (list (list 0.0D0 2845.674072265625D0 0.005108408629894257D0 1.1100000143051148D0)) (list (list 0.0D0 2845.462890625D0 0.005165118258446455D0 1.1200000047683716D0)) (list (list 0.0D0 2845.305908203125D0 0.005271631292998791D0 1.1299999952316285D0)) (list (list 0.0D0 2845.21923828125D0 0.005426183342933655D0 1.1399999856948853D0)) (list (list 0.0D0 2845.17919921875D0 0.005606255494058132D0 1.149999976158142D0)) (list (list 0.0D0 2845.111083984375D0 0.005745754577219486D0 1.159999966621399D0)) (list (list 0.0D0 2845.1552734375D0 0.005793606396764517D0 1.1699999570846558D0)) (list (list 0.0D0 2845.403564453125D0 0.005735012702643871D0 1.1799999475479126D0)) (list (list 0.0D0 2845.856689453125D0 0.00557413836941123D0 1.1899999380111695D0)) (list (list 0.0D0 2846.442138671875D0 0.005333051551133394D0 1.1999999284744263D0)) (list (list 0.0D0 2846.83740234375D0 0.0050725992769002915D0 1.209999918937683D0)) (list (list 0.0D0 2846.881591796875D0 0.004843670409172773D0 1.2200000286102295D0)) (list (list 0.0D0 2846.713134765625D0 0.004660426173359156D0 1.2300000190734864D0)) (list (list 0.0D0 2846.47998046875D0 0.004534042440354824D0 1.2400000095367432D0)) (list (list 0.0D0 2846.33984375D0 0.004472263157367706D0 1.25D0)) (list (list 0.0D0 2846.343017578125D0 0.0044887978583574295D0 1.2599999904632569D0)) (list (list 0.0D0 2846.456787109375D0 0.0045291343703866005D0 1.2699999809265137D0)) (list (list 0.0D0 2846.730224609375D0 0.00456901965662837D0 1.2799999713897705D0)) (list (list 0.0D0 2847.0966796875D0 0.004612328484654427D0 1.2899999618530274D0)) (list (list 0.0D0 2847.40234375D0 0.00467874389141798D0 1.2999999523162842D0)) (list (list 0.0D0 2847.2021484375D0 0.004817326553165913D0 1.309999942779541D0)) (list (list 0.0D0 2846.681884765625D0 0.00502610532566905D0 1.3199999332427979D0)) (list (list 0.0D0 2846.13232421875D0 0.005267203785479069D0 1.3299999237060547D0)) (list (list 0.0D0 2845.63623046875D0 0.005500947590917349D0 1.3399999141693116D0)) (list (list 0.0D0 2845.1611328125D0 0.005684786941856146D0 1.350000023841858D0)) (list (list 0.0D0 2844.413818359375D0 0.005775931756943464D0 1.3600000143051148D0)) (list (list 0.0D0 2843.52197265625D0 0.005778443533927202D0 1.3700000047683716D0)) (list (list 0.0D0 2842.80078125D0 0.005672273226082325D0 1.3799999952316285D0)) (list (list 0.0D0 2842.40087890625D0 0.005450310185551643D0 1.3899999856948853D0)) (list (list 0.0D0 2842.360595703125D0 0.00512295588850975D0 1.399999976158142D0)) (list (list 0.0D0 2842.354248046875D0 0.004769874271005392D0 1.409999966621399D0)) (list (list 0.0D0 2841.996826171875D0 0.004462866578251123D0 1.4199999570846558D0)) (list (list 0.0D0 2841.310546875D0 0.004202706273645163D0 1.4299999475479126D0)) (list (list 0.0D0 2840.423095703125D0 0.003995670471340418D0 1.4399999380111695D0)) (list (list 0.0D0 2839.53759765625D0 0.0038516223430633545D0 1.4499999284744263D0)) (list (list 0.0D0 2838.973876953125D0 0.0038272037636488676D0 1.459999918937683D0)) (list (list 0.0D0 2838.693603515625D0 0.003919699229300022D0 1.46999990940094D0)) (list (list 0.0D0 2838.546875D0 0.004089350812137127D0 1.4800000190734864D0)) (list (list 0.0D0 2838.514404296875D0 0.004301763139665127D0 1.4900000095367432D0)) (list (list 0.0D0 2838.626953125D0 0.0045194257982075215D0 1.5D0)) (list (list 0.0D0 2838.9287109375D0 0.004693660885095596D0 1.5099999904632569D0)) (list (list 0.0D0 2839.136474609375D0 0.004789439495652914D0 1.5199999809265137D0)) (list (list 0.0D0 2839.21142578125D0 0.004784621298313141D0 1.5299999713897705D0)) (list (list 0.0D0 2839.2373046875D0 0.004684747662395239D0 1.5399999618530274D0)) (list (list 0.0D0 2839.347900390625D0 0.004515953827649355D0 1.5499999523162842D0)) (list (list 0.0D0 2839.572021484375D0 0.0043380423448979855D0 1.559999942779541D0)) (list (list 0.0D0 2839.842041015625D0 0.004163121804594994D0 1.5699999332427979D0)) (list (list 0.0D0 2840.305908203125D0 0.003952209372073412D0 1.5799999237060547D0)) (list (list 0.0D0 2840.98974609375D0 0.003695073537528515D0 1.5899999141693116D0)) (list (list 0.0D0 2841.829345703125D0 0.0033985134214162827D0 1.5999999046325684D0)) (list (list 0.0D0 2842.45263671875D0 0.0031024098861962557D0 1.6100000143051148D0)) (list (list 0.0D0 2842.95947265625D0 0.0028049645479768515D0 1.6200000047683716D0)) (list (list 0.0D0 2843.515625D0 0.0024912143126130104D0 1.6299999952316285D0)) (list (list 0.0D0 2844.17822265625D0 0.002175751607865095D0 1.6399999856948853D0)) (list (list 0.0D0 2844.9169921875D0 0.0018954698462039233D0 1.649999976158142D0)) (list (list 0.0D0 2845.2841796875D0 0.0017876561032608152D0 1.659999966621399D0)) (list (list 0.0D0 2844.880615234375D0 0.0018677108455449343D0 1.6699999570846558D0)) (list (list 0.0D0 2843.856689453125D0 0.0020584138110280037D0 1.6799999475479126D0)) (list (list 0.0D0 2842.636474609375D0 0.0023003718815743924D0 1.6899999380111695D0)) (list (list 0.0D0 2841.735107421875D0 0.002539864042773843D0 1.6999999284744263D0)) (list (list 0.0D0 2841.174560546875D0 0.0027732437010854483D0 1.709999918937683D0)) (list (list 0.0D0 2840.470947265625D0 0.003095111344009638D0 1.71999990940094D0)) (list (list 0.0D0 2839.490478515625D0 0.0035219741985201836D0 1.7300000190734864D0)) (list (list 0.0D0 2838.251220703125D0 0.004049000795930624D0 1.7400000095367432D0)) (list (list 0.0D0 2836.86181640625D0 0.004657207056879997D0 1.75D0)) (list (list 0.0D0 2835.58251953125D0 0.005330316722393036D0 1.7599999904632569D0)) (list (list 0.0D0 2834.61572265625D0 0.006030757445842028D0 1.7699999809265137D0)) (list (list 0.0D0 2833.87841796875D0 0.006689698901027441D0 1.7799999713897705D0)) (list (list 0.0D0 2833.23046875D0 0.007233195006847382D0 1.7899999618530274D0)) (list (list 0.0D0 2832.501708984375D0 0.007583599537611008D0 1.7999999523162842D0)) (list (list 0.0D0 2831.549072265625D0 0.0076122586615383625D0 1.809999942779541D0)) (list (list 0.0D0 2830.487548828125D0 0.007382718380540609D0 1.8199999332427979D0)) (list (list 0.0D0 2829.41162109375D0 0.007042677607387304D0 1.8299999237060547D0)) (list (list 0.0D0 2828.475341796875D0 0.006702043581753969D0 1.8399999141693116D0)) (list (list 0.0D0 2827.872802734375D0 0.006460630800575018D0 1.8499999046325684D0)) (list (list 0.0D0 2827.97265625D0 0.006401891820132732D0 1.8600000143051148D0)) (list (list 0.0D0 2828.438232421875D0 0.006444473750889301D0 1.8700000047683716D0)) (list (list 0.0D0 2828.908203125D0 0.006450443062931299D0 1.8799999952316285D0)) (list (list 0.0D0 2829.2333984375D0 0.00634125666692853D0 1.8899999856948853D0)) (list (list 0.0D0 2829.351806640625D0 0.006074859760701656D0 1.899999976158142D0)) (list (list 0.0D0 2829.313720703125D0 0.005714409053325653D0 1.909999966621399D0)) (list (list 0.0D0 2829.224609375D0 0.00544055225327611D0 1.9199999570846558D0)) (list (list 0.0D0 2829.292724609375D0 0.0052948263473808766D0 1.9299999475479126D0)) (list (list 0.0D0 2829.701171875D0 0.005267491564154625D0 1.9399999380111695D0)) (list (list 0.0D0 2830.609375D0 0.005320781841874123D0 1.9499999284744263D0)) (list (list 0.0D0 2832.1552734375D0 0.005392569117248058D0 1.959999918937683D0)) (list (list 0.0D0 2833.527587890625D0 0.00542781688272953D0 1.96999990940094D0)) (list (list 0.0D0 2834.34814453125D0 0.005400972906500101D0 1.9799998998641968D0)) (list (list 0.0D0 2834.60107421875D0 0.0053203594870865345D0 1.9900000095367432D0)) (list (list 0.0D0 2834.43701171875D0 0.00521092489361763D0 2.0D0)) (list (list 0.0D0 2834.11572265625D0 0.005112512037158012D0 2.009999990463257D0)) (list (list 0.0D0 2833.9091796875D0 0.00505369296297431D0 2.0199999809265137D0)) (list (list 0.0D0 2833.89697265625D0 0.005043608136475086D0 2.0299999713897705D0)) (list (list 0.0D0 2834.098388671875D0 0.005068350117653608D0 2.0399999618530274D0)) (list (list 0.0D0 2834.494140625D0 0.005097519606351852D0 2.049999952316284D0)) (list (list 0.0D0 2835.010986328125D0 0.005050557665526867D0 2.059999942779541D0)) (list (list 0.0D0 2835.57666015625D0 0.004890948534011841D0 2.069999933242798D0)) (list (list 0.0D0 2836.156005859375D0 0.004661201499402523D0 2.0799999237060547D0)) (list (list 0.0D0 2836.62939453125D0 0.0044135721400380135D0 2.0899999141693116D0)) (list (list 0.0D0 2836.841796875D0 0.004210230428725481D0 2.0999999046325684D0)) (list (list 0.0D0 2836.545654296875D0 0.004142919555306435D0 2.109999895095825D0)) (list (list 0.0D0 2835.949462890625D0 0.004204972181469202D0 2.119999885559082D0)) (list (list 0.0D0 2835.32421875D0 0.004335278179496527D0 2.129999876022339D0)) (list (list 0.0D0 2834.683349609375D0 0.004500771872699261D0 2.1399998664855957D0)) (list (list 0.0D0 2833.957763671875D0 0.0046761431731283665D0 2.1499998569488526D0)) (list (list 0.0D0 2833.021484375D0 0.004856593441218138D0 2.1599998474121094D0)) (list (list 0.0D0 2832.18505859375D0 0.004993719514459372D0 2.169999837875366D0)) (list (list 0.0D0 2831.5654296875D0 0.005048493389040232D0 2.180000066757202D0)) (list (list 0.0D0 2831.150146484375D0 0.005023661069571972D0 2.190000057220459D0)) (list (list 0.0D0 2830.8916015625D0 0.00494597340002656D0 2.200000047683716D0)) (list (list 0.0D0 2830.8515625D0 0.0048889899626374245D0 2.2100000381469727D0)) (list (list 0.0D0 2830.853271484375D0 0.004917840473353863D0 2.2200000286102295D0)) (list (list 0.0D0 2830.801513671875D0 0.0050029815174639225D0 2.2300000190734864D0)) (list (list 0.0D0 2830.77392578125D0 0.0051093376241624355D0 2.240000009536743D0)) (list (list 0.0D0 2830.888671875D0 0.005202171858400106D0 2.25D0)) (list (list 0.0D0 2831.202880859375D0 0.00527564249932766D0 2.259999990463257D0)) (list (list 0.0D0 2831.39794921875D0 0.005364897660911083D0 2.2699999809265137D0)) (list (list 0.0D0 2831.43798828125D0 0.005452771671116352D0 2.2799999713897705D0)) (list (list 0.0D0 2831.35693359375D0 0.005525412503629923D0 2.2899999618530274D0)) (list (list 0.0D0 2831.212158203125D0 0.005574809852987528D0 2.299999952316284D0)) (list (list 0.0D0 2831.032470703125D0 0.005621162708848715D0 2.309999942779541D0)) (list (list 0.0D0 2830.89404296875D0 0.005678620655089617D0 2.319999933242798D0)) (list (list 0.0D0 2830.9169921875D0 0.005720416083931923D0 2.3299999237060547D0)) (list (list 0.0D0 2831.151123046875D0 0.0057325889356434345D0 2.3399999141693116D0)) (list (list 0.0D0 2831.586669921875D0 0.005709737539291382D0 2.3499999046325684D0)) (list (list 0.0D0 2832.03369140625D0 0.005669061094522476D0 2.359999895095825D0)) (list (list 0.0D0 2832.27734375D0 0.0056278640404343605D0 2.369999885559082D0)) (list (list 0.0D0 2832.397705078125D0 0.005601857788860798D0 2.379999876022339D0)) (list (list 0.0D0 2832.439697265625D0 0.005607440136373043D0 2.3899998664855957D0)) (list (list 0.0D0 2832.414306640625D0 0.005658058915287256D0 2.3999998569488526D0)) (list (list 0.0D0 2832.1337890625D0 0.005758780520409346D0 2.4099998474121094D0)) (list (list 0.0D0 2831.520751953125D0 0.005860015284270048D0 2.419999837875366D0)) (list (list 0.0D0 2830.8291015625D0 0.005927459802478552D0 2.429999828338623D0)) (list (list 0.0D0 2830.191650390625D0 0.005942386109381914D0 2.440000057220459D0)) (list (list 0.0D0 2829.692138671875D0 0.005896686110645533D0 2.450000047683716D0)) (list (list 0.0D0 2829.30322265625D0 0.005803825333714485D0 2.4600000381469727D0)) (list (list 0.0D0 2829.037841796875D0 0.005693158600479364D0 2.4700000286102295D0)) (list (list 0.0D0 2829.02099609375D0 0.0055696116760373116D0 2.4800000190734864D0)) (list (list 0.0D0 2829.21337890625D0 0.0054491194896399975D0 2.490000009536743D0)) (list (list 0.0D0 2829.4921875D0 0.005350172985345125D0 2.5D0)) (list (list 0.0D0 2829.56591796875D0 0.0052905757911503315D0 2.509999990463257D0)) (list (list 0.0D0 2829.495849609375D0 0.005211584270000458D0 2.5199999809265137D0)) (list (list 0.0D0 2829.503173828125D0 0.0050566596910357475D0 2.5299999713897705D0)) (list (list 0.0D0 2829.64453125D0 0.0048174867406487465D0 2.5399999618530274D0)) (list (list 0.0D0 2829.916015625D0 0.004510948900133371D0 2.549999952316284D0)) (list (list 0.0D0 2830.230224609375D0 0.004201715812087059D0 2.559999942779541D0)) (list (list 0.0D0 2830.6552734375D0 0.003931330982595682D0 2.569999933242798D0)) (list (list 0.0D0 2831.302978515625D0 0.003687053918838501D0 2.5799999237060547D0)) (list (list 0.0D0 2832.08544921875D0 0.0034814977552741766D0 2.5899999141693116D0)) (list (list 0.0D0 2832.855712890625D0 0.003337653586640954D0 2.5999999046325684D0)) (list (list 0.0D0 2833.444091796875D0 0.003317571245133877D0 2.609999895095825D0)) (list (list 0.0D0 2833.971923828125D0 0.00340426922775805D0 2.619999885559082D0)) (list (list 0.0D0 2834.379150390625D0 0.003533188486471772D0 2.629999876022339D0)) (list (list 0.0D0 2834.6572265625D0 0.0036643301136791706D0 2.6399998664855957D0)) (list (list 0.0D0 2834.84912109375D0 0.003758382750675082D0 2.6499998569488526D0)) (list (list 0.0D0 2835.162353515625D0 0.0037533279974013567D0 2.6599998474121094D0)) (list (list 0.0D0 2835.79931640625D0 0.0036219963803887368D0 2.669999837875366D0)) (list (list 0.0D0 2836.589111328125D0 0.003414853010326624D0 2.679999828338623D0)) (list (list 0.0D0 2837.409912109375D0 0.0031744439620524645D0 2.690000057220459D0)) (list (list 0.0D0 2838.116455078125D0 0.0029466755222529173D0 2.700000047683716D0)) (list (list 0.0D0 2838.40576171875D0 0.0027910165954381228D0 2.7100000381469727D0)) (list (list 0.0D0 2838.253173828125D0 0.0027444600127637387D0 2.7200000286102295D0)) (list (list 0.0D0 2837.943603515625D0 0.0027872466016560793D0 2.7300000190734864D0)) (list (list 0.0D0 2837.65478515625D0 0.0028935133013874293D0 2.740000009536743D0)) (list (list 0.0D0 2837.509765625D0 0.0030254716984927655D0 2.75D0)) (list (list 0.0D0 2837.467529296875D0 0.0031131731811910868D0 2.759999990463257D0)) (list (list 0.0D0 2837.537109375D0 0.0031042098999023438D0 2.7699999809265137D0)) (list (list 0.0D0 2837.630126953125D0 0.0030553846154361964D0 2.7799999713897705D0)) (list (list 0.0D0 2837.611083984375D0 0.00302374386228621D0 2.7899999618530274D0)) (list (list 0.0D0 2837.364990234375D0 0.0030613241251558066D0 2.799999952316284D0)) (list (list 0.0D0 2836.89208984375D0 0.003201452549546957D0 2.809999942779541D0)) (list (list 0.0D0 2836.675537109375D0 0.0033699979539960623D0 2.819999933242798D0)) (list (list 0.0D0 2836.75D0 0.00350441737100482D0 2.8299999237060547D0)) (list (list 0.0D0 2837.06005859375D0 0.0035818126052618027D0 2.8399999141693116D0)) (list (list 0.0D0 2837.507080078125D0 0.003591426182538271D0 2.8499999046325684D0)) (list (list 0.0D0 2837.944091796875D0 0.003525430103763938D0 2.859999895095825D0)) (list (list 0.0D0 2838.408935546875D0 0.003398735774680972D0 2.869999885559082D0)) (list (list 0.0D0 2838.963134765625D0 0.003241418395191431D0 2.879999876022339D0)) (list (list 0.0D0 2839.48193359375D0 0.0030786609277129174D0 2.8899998664855957D0)) (list (list 0.0D0 2839.769775390625D0 0.0029373555444180966D0 2.8999998569488526D0)) (list (list 0.0D0 2839.4443359375D0 0.002855583094060421D0 2.9099998474121094D0)) (list (list 0.0D0 2838.6083984375D0 0.002849436830729246D0 2.919999837875366D0)) (list (list 0.0D0 2837.770751953125D0 0.0028933314606547356D0 2.929999828338623D0)) (list (list 0.0D0 2837.175048828125D0 0.002965513151139021D0 2.93999981880188D0)) (list (list 0.0D0 2836.947265625D0 0.003046567551791668D0 2.950000047683716D0)) (list (list 0.0D0 2836.974365234375D0 0.0031318990513682366D0 2.9600000381469727D0)) (list (list 0.0D0 2837.01416015625D0 0.0032121683470904827D0 2.9700000286102295D0)) (list (list 0.0D0 2837.0888671875D0 0.003265746869146824D0 2.9800000190734864D0)) (list (list 0.0D0 2837.227294921875D0 0.003282677149400115D0 2.990000009536743D0)) (list (list 0.0D0 2837.43310546875D0 0.003259137272834778D0 3.0D0)) (list (list 0.0D0 2837.61669921875D0 0.003198086516931653D0 3.009999990463257D0)) (list (list 0.0D0 2837.780517578125D0 0.0031041749753057957D0 3.0199999809265137D0)) (list (list 0.0D0 2837.973388671875D0 0.002990323817357421D0 3.0299999713897705D0)) (list (list 0.0D0 2838.145751953125D0 0.0028764712624251843D0 3.0399999618530274D0)) (list (list 0.0D0 2838.236083984375D0 0.0027843816205859185D0 3.049999952316284D0)) (list (list 0.0D0 2838.1875D0 0.002739726100116968D0 3.059999942779541D0)) (list (list 0.0D0 2838.21923828125D0 0.002717607654631138D0 3.069999933242798D0)) (list (list 0.0D0 2838.327392578125D0 0.00269191712141037D0 3.0799999237060547D0)) (list (list 0.0D0 2838.449462890625D0 0.002657196018844843D0 3.0899999141693116D0)) (list (list 0.0D0 2838.538330078125D0 0.002613556571304798D0 3.0999999046325684D0)) (list (list 0.0D0 2838.649658203125D0 0.0025672882329672575D0 3.109999895095825D0)) (list (list 0.0D0 2838.749267578125D0 0.0025294122751802206D0 3.119999885559082D0)) (list (list 0.0D0 2838.68359375D0 0.00251039769500494D0 3.129999876022339D0)) (list (list 0.0D0 2838.473388671875D0 0.002514495048671961D0 3.1399998664855957D0)) (list (list 0.0D0 2838.199951171875D0 0.0025401022285223008D0 3.1499998569488526D0)) (list (list 0.0D0 2838.037109375D0 0.0025725082959979773D0 3.1599998474121094D0)) (list (list 0.0D0 2837.98193359375D0 0.002588670700788498D0 3.169999837875366D0)) (list (list 0.0D0 2837.985595703125D0 0.002597963670268655D0 3.179999828338623D0)) (list (list 0.0D0 2838.047607421875D0 0.0026155628729611636D0 3.18999981880188D0)) (list (list 0.0D0 2838.145751953125D0 0.00265397597104311D0 3.1999998092651367D0)) (list (list 0.0D0 2838.1630859375D0 0.002715272130444646D0 3.2100000381469727D0)) (list (list 0.0D0 2837.958984375D0 0.002749701263383031D0 3.2200000286102295D0)) (list (list 0.0D0 2837.729736328125D0 0.0027343446854501963D0 3.2300000190734864D0)) (list (list 0.0D0 2837.590087890625D0 0.002678242977708578D0 3.240000009536743D0)) (list (list 0.0D0 2837.578125D0 0.002603425644338131D0 3.25D0)) (list (list 0.0D0 2837.51953125D0 0.0025540522765368224D0 3.259999990463257D0)) (list (list 0.0D0 2837.21484375D0 0.0025470578111708165D0 3.2699999809265137D0)) (list (list 0.0D0 2836.95849609375D0 0.0025510555133223534D0 3.2799999713897705D0)) (list (list 0.0D0 2836.908203125D0 0.002548754680901766D0 3.2899999618530274D0)) (list (list 0.0D0 2837.12109375D0 0.0025311526842415333D0 3.299999952316284D0)) (list (list 0.0D0 2837.41748046875D0 0.0025091369170695544D0 3.309999942779541D0)) (list (list 0.0D0 2837.580810546875D0 0.0024966979399323464D0 3.319999933242798D0)) (list (list 0.0D0 2837.493896484375D0 0.002483212389051914D0 3.3299999237060547D0)) (list (list 0.0D0 2837.125732421875D0 0.0024664888624101878D0 3.3399999141693116D0)) (list (list 0.0D0 2836.547607421875D0 0.0024495043326169253D0 3.3499999046325684D0)) (list (list 0.0D0 2836.087646484375D0 0.0024486093316227198D0 3.359999895095825D0)) (list (list 0.0D0 2836.018798828125D0 0.002463120734319091D0 3.369999885559082D0)) (list (list 0.0D0 2836.032958984375D0 0.002475535264238715D0 3.379999876022339D0)) (list (list 0.0D0 2835.9736328125D0 0.0024759487714618445D0 3.3899998664855957D0)) (list (list 0.0D0 2835.755126953125D0 0.002457401482388377D0 3.3999998569488526D0)) (list (list 0.0D0 2835.43115234375D0 0.0024159152526408434D0 3.4099998474121094D0)) (list (list 0.0D0 2835.070068359375D0 0.002368159592151642D0 3.419999837875366D0)) (list (list 0.0D0 2834.593994140625D0 0.0023357542231678963D0 3.429999828338623D0)) (list (list 0.0D0 2834.0693359375D0 0.002325334120541811D0 3.43999981880188D0)) (list (list 0.0D0 2833.633544921875D0 0.0023325069341808558D0 3.4499998092651367D0)) (list (list 0.0D0 2833.598876953125D0 0.0023274787236005068D0 3.4600000381469727D0)) (list (list 0.0D0 2834.156005859375D0 0.00226626661606133D0 3.4700000286102295D0)) (list (list 0.0D0 2834.859375D0 0.0021681487560272217D0 3.4800000190734864D0)) (list (list 0.0D0 2835.473876953125D0 0.0020511774346232415D0 3.490000009536743D0)) (list (list 0.0D0 2835.826416015625D0 0.001933615654706955D0 3.5D0)) (list (list 0.0D0 2835.817626953125D0 0.0018331782193854452D0 3.509999990463257D0)) (list (list 0.0D0 2835.340576171875D0 0.0017513830680400134D0 3.5199999809265137D0)) (list (list 0.0D0 2834.708251953125D0 0.0016883456846699119D0 3.5299999713897705D0)) (list (list 0.0D0 2834.3232421875D0 0.0016519034979864955D0 3.5399999618530274D0)) (list (list 0.0D0 2834.472412109375D0 0.0016503105871379376D0 3.549999952316284D0)) (list (list 0.0D0 2835.137939453125D0 0.0016964442329481245D0 3.559999942779541D0)) (list (list 0.0D0 2835.724609375D0 0.001766256638802588D0 3.569999933242798D0)) (list (list 0.0D0 2836.180908203125D0 0.0018154196441173554D0 3.5799999237060547D0)) (list (list 0.0D0 2836.61083984375D0 0.0018333032494410873D0 3.5899999141693116D0)) (list (list 0.0D0 2837.075927734375D0 0.0018227124819532037D0 3.5999999046325684D0)) (list (list 0.0D0 2837.46044921875D0 0.0018089271616190672D0 3.609999895095825D0)) (list (list 0.0D0 2837.653564453125D0 0.0018280100775882602D0 3.619999885559082D0)) (list (list 0.0D0 2837.888427734375D0 0.0018729919102042914D0 3.629999876022339D0)) (list (list 0.0D0 2838.122314453125D0 0.001931896316818893D0 3.6399998664855957D0)) (list (list 0.0D0 2838.224609375D0 0.0019953548908233643D0 3.6499998569488526D0)) (list (list 0.0D0 2837.884033203125D0 0.0020646771881729365D0 3.6599998474121094D0)) (list (list 0.0D0 2837.248291015625D0 0.002161887940019369D0 3.669999837875366D0)) (list (list 0.0D0 2836.79931640625D0 0.0022641003597527743D0 3.679999828338623D0)) (list (list 0.0D0 2836.64892578125D0 0.0023535804357379675D0 3.68999981880188D0)) (list (list 0.0D0 2836.773193359375D0 0.002420153934508562D0 3.6999998092651367D0)) (list (list 0.0D0 2836.93017578125D0 0.002469799481332302D0 3.7099997997283936D0)) (list (list 0.0D0 2837.034423828125D0 0.0025314397644251585D0 3.7200000286102295D0)) (list (list 0.0D0 2837.112548828125D0 0.002611942356452346D0 3.7300000190734864D0)) (list (list 0.0D0 2837.09423828125D0 0.002698188414797187D0 3.740000009536743D0)) (list (list 0.0D0 2836.935791015625D0 0.002769673941656947D0 3.75D0)) (list (list 0.0D0 2836.669677734375D0 0.0027898233383893967D0 3.759999990463257D0)) (list (list 0.0D0 2836.593994140625D0 0.0027451086789369583D0 3.7699999809265137D0)) (list (list 0.0D0 2836.642333984375D0 0.00267836544662714D0 3.7799999713897705D0)) (list (list 0.0D0 2836.719482421875D0 0.002597906393930316D0 3.7899999618530274D0)) (list (list 0.0D0 2836.777587890625D0 0.002502565970644355D0 3.799999952316284D0)) (list (list 0.0D0 2836.90185546875D0 0.002373047871515155D0 3.809999942779541D0)) (list (list 0.0D0 2837.212646484375D0 0.0022150203585624695D0 3.819999933242798D0)) (list (list 0.0D0 2837.49462890625D0 0.0020704027265310288D0 3.8299999237060547D0)) (list (list 0.0D0 2837.6044921875D0 0.001962775830179453D0 3.8399999141693116D0)) (list (list 0.0D0 2837.478759765625D0 0.0019083033548668027D0 3.8499999046325684D0)) (list (list 0.0D0 2837.20556640625D0 0.0019167535938322545D0 3.859999895095825D0)) (list (list 0.0D0 2837.137939453125D0 0.0019624936394393444D0 3.869999885559082D0)) (list (list 0.0D0 2837.21435546875D0 0.002001633169129491D0 3.879999876022339D0)) (list (list 0.0D0 2837.1923828125D0 0.0020243937615305186D0 3.8899998664855957D0)) (list (list 0.0D0 2836.876953125D0 0.0020325069781392813D0 3.8999998569488526D0)) (list (list 0.0D0 2836.1982421875D0 0.0020461305975914D0 3.9099998474121094D0)) (list (list 0.0D0 2835.392578125D0 0.002081034705042839D0 3.919999837875366D0)) (list (list 0.0D0 2834.74658203125D0 0.0021143185440450907D0 3.929999828338623D0)) (list (list 0.0D0 2834.466552734375D0 0.0021291999146342278D0 3.93999981880188D0)) (list (list 0.0D0 2834.656005859375D0 0.0021168941166251898D0 3.9499998092651367D0)) (list (list 0.0D0 2835.253662109375D0 0.002082914812490344D0 3.9599997997283936D0)) (list (list 0.0D0 2835.544189453125D0 0.002051160205155611D0 3.9700000286102295D0)) (list (list 0.0D0 2835.386962890625D0 0.002037412952631712D0 3.9800000190734864D0)) (list (list 0.0D0 2835.017333984375D0 0.0020452714525163174D0 3.990000009536743D0)) (list (list 0.0D0 2834.69873046875D0 0.002069737995043397D0 4.0D0)) (list (list 0.0D0 2834.684814453125D0 0.0020903318654745818D0 4.009999752044678D0)) (list (list 0.0D0 2834.646728515625D0 0.0020793406292796135D0 4.019999980926514D0)) (list (list 0.0D0 2834.38623046875D0 0.002036868827417493D0 4.029999732971191D0)) (list (list 0.0D0 2833.97412109375D0 0.0019695411901921034D0 4.039999961853027D0)) (list (list 0.0D0 2833.5703125D0 0.0018914106767624617D0 4.049999713897705D0)) (list (list 0.0D0 2833.488525390625D0 0.0018308819271624089D0 4.059999942779541D0)) (list (list 0.0D0 2833.674560546875D0 0.0018380554392933846D0 4.069999694824219D0)) (list (list 0.0D0 2833.529052734375D0 0.001896534813567996D0 4.079999923706055D0)) (list (list 0.0D0 2832.9599609375D0 0.0019791775848716498D0 4.089999675750732D0)) (list (list 0.0D0 2832.08251953125D0 0.002058180049061775D0 4.099999904632568D0)) (list (list 0.0D0 2831.3447265625D0 0.0021056474652141333D0 4.110000133514404D0)) (list (list 0.0D0 2831.01806640625D0 0.0021044001914560795D0 4.119999885559082D0)) (list (list 0.0D0 2831.075439453125D0 0.0020637495908886195D0 4.130000114440918D0)) (list (list 0.0D0 2831.6162109375D0 0.0019890964031219483D0 4.139999866485596D0)) (list (list 0.0D0 2832.548095703125D0 0.0018966237548738718D0 4.150000095367432D0)) (list (list 0.0D0 2833.383056640625D0 0.0018246459076181055D0 4.159999847412109D0)) (list (list 0.0D0 2833.3251953125D0 0.0018169981194660068D0 4.170000076293945D0)) (list (list 0.0D0 2832.698974609375D0 0.0018720249645411969D0 4.179999828338623D0)) (list (list 0.0D0 2831.831298828125D0 0.0019924810621887446D0 4.190000057220459D0)) (list (list 0.0D0 2831.000244140625D0 0.0021750731393694878D0 4.199999809265137D0)) (list (list 0.0D0 2830.38525390625D0 0.00241039227694273D0 4.210000038146973D0)) (list (list 0.0D0 2830.401611328125D0 0.0026358135510236025D0 4.21999979019165D0)) (list (list 0.0D0 2830.885498046875D0 0.0028005733620375395D0 4.230000019073486D0)) (list (list 0.0D0 2831.47314453125D0 0.002916088793426752D0 4.239999771118164D0)) (list (list 0.0D0 2831.829345703125D0 0.003009099280461669D0 4.25D0)) (list (list 0.0D0 2831.674072265625D0 0.003126485040411353D0 4.259999752044678D0)) (list (list 0.0D0 2831.300048828125D0 0.0032961396500468254D0 4.269999980926514D0)) (list (list 0.0D0 2831.1552734375D0 0.003457764396443963D0 4.279999732971191D0)) (list (list 0.0D0 2831.236328125D0 0.0035835413727909327D0 4.289999961853027D0)) (list (list 0.0D0 2831.413330078125D0 0.0036554511170834303D0 4.299999713897705D0)) (list (list 0.0D0 2831.371826171875D0 0.003664602991193533D0 4.309999942779541D0)) (list (list 0.0D0 2830.863525390625D0 0.003577016294002533D0 4.319999694824219D0)) (list (list 0.0D0 2830.15234375D0 0.0034168418496847153D0 4.329999923706055D0)) (list (list 0.0D0 2829.383056640625D0 0.003207519417628646D0 4.339999675750732D0)) (list (list 0.0D0 2828.68896484375D0 0.0029762054327875376D0 4.349999904632568D0)) (list (list 0.0D0 2828.207275390625D0 0.0027557569555938244D0 4.360000133514404D0)) (list (list 0.0D0 2827.875D0 0.0025706570595502854D0 4.369999885559082D0)) (list (list 0.0D0 2827.35791015625D0 0.0024300087243318558D0 4.380000114440918D0)) (list (list 0.0D0 2826.75830078125D0 0.0023330668918788433D0 4.389999866485596D0)) (list (list 0.0D0 2826.2724609375D0 0.0022683683782815934D0 4.400000095367432D0)) (list (list 0.0D0 2826.23583984375D0 0.002208284568041563D0 4.409999847412109D0)) (list (list 0.0D0 2826.373291015625D0 0.0021480764262378216D0 4.420000076293945D0)) (list (list 0.0D0 2826.46142578125D0 0.0021184387151151896D0 4.429999828338623D0)) (list (list 0.0D0 2826.69970703125D0 0.0021352001931518317D0 4.440000057220459D0)) (list (list 0.0D0 2827.154541015625D0 0.002209674334153533D0 4.449999809265137D0)) (list (list 0.0D0 2827.623046875D0 0.002352059120312333D0 4.460000038146973D0)) (list (list 0.0D0 2827.630126953125D0 0.0025568802375346423D0 4.46999979019165D0)) (list (list 0.0D0 2827.41943359375D0 0.0027748197317123413D0 4.480000019073486D0)) (list (list 0.0D0 2827.120849609375D0 0.0029662016313523054D0 4.489999771118164D0)) (list (list 0.0D0 2826.83935546875D0 0.003094104817137122D0 4.5D0)) (list (list 0.0D0 2826.6513671875D0 0.003119018394500017D0 4.509999752044678D0)) (list (list 0.0D0 2826.718017578125D0 0.003041705582290888D0 4.519999980926514D0)) (list (list 0.0D0 2826.78369140625D0 0.002943917643278837D0 4.529999732971191D0)) (list (list 0.0D0 2826.77294921875D0 0.0028584261890500784D0 4.539999961853027D0)) (list (list 0.0D0 2826.707275390625D0 0.0028053896967321635D0 4.549999713897705D0)) (list (list 0.0D0 2826.754638671875D0 0.0027906852774322033D0 4.559999942779541D0)) (list (list 0.0D0 2826.837158203125D0 0.002809074241667986D0 4.569999694824219D0)) (list (list 0.0D0 2826.654296875D0 0.0028323617298156023D0 4.579999923706055D0)) (list (list 0.0D0 2826.3544921875D0 0.0028345175087451935D0 4.589999675750732D0)) (list (list 0.0D0 2826.201171875D0 0.0027944440953433514D0 4.599999904632568D0)) (list (list 0.0D0 2826.632568359375D0 0.0026953574270009995D0 4.610000133514404D0)) (list (list 0.0D0 2827.4541015625D0 0.0025908034294843674D0 4.619999885559082D0)) (list (list 0.0D0 2827.91650390625D0 0.002517616841942072D0 4.630000114440918D0)) (list (list 0.0D0 2827.899658203125D0 0.002468099119141698D0 4.639999866485596D0)) (list (list 0.0D0 2827.539306640625D0 0.002431964036077261D0 4.650000095367432D0)) (list (list 0.0D0 2827.322021484375D0 0.0023987882304936648D0 4.659999847412109D0)) (list (list 0.0D0 2827.572265625D0 0.002378842793405056D0 4.670000076293945D0)) (list (list 0.0D0 2827.711669921875D0 0.0023936398793011904D0 4.679999828338623D0)) (list (list 0.0D0 2827.648681640625D0 0.0024423333816230297D0 4.690000057220459D0)) (list (list 0.0D0 2827.484375D0 0.002513328567147255D0 4.699999809265137D0)) (list (list 0.0D0 2827.59033203125D0 0.002580634318292141D0 4.710000038146973D0)) (list (list 0.0D0 2828.0810546875D0 0.002634182572364807D0 4.71999979019165D0)) (list (list 0.0D0 2828.47216796875D0 0.002695862203836441D0 4.730000019073486D0)) (list (list 0.0D0 2828.65283203125D0 0.002764822682365775D0 4.739999771118164D0)) (list (list 0.0D0 2828.597900390625D0 0.002833855804055929D0 4.75D0)) (list (list 0.0D0 2828.374755859375D0 0.0028870990499854088D0 4.759999752044678D0)) (list (list 0.0D0 2828.10791015625D0 0.002874235389754176D0 4.769999980926514D0)) (list (list 0.0D0 2827.9921875D0 0.0027803184930235148D0 4.779999732971191D0)) (list (list 0.0D0 2828.095458984375D0 0.00261731818318367D0 4.789999961853027D0)) (list (list 0.0D0 2828.380615234375D0 0.0024160549510270357D0 4.799999713897705D0)) (list (list 0.0D0 2828.6689453125D0 0.0022327848710119725D0 4.809999942779541D0)) (list (list 0.0D0 2828.68017578125D0 0.002119538141414523D0 4.819999694824219D0)) (list (list 0.0D0 2828.58935546875D0 0.002029277151450515D0 4.829999923706055D0)) (list (list 0.0D0 2828.567626953125D0 0.0019342447631061078D0 4.839999675750732D0)) (list (list 0.0D0 2828.68603515625D0 0.0018208614783361555D0 4.849999904632568D0)) (list (list 0.0D0 2828.877685546875D0 0.0016940272180363536D0 4.859999656677246D0)) (list (list 0.0D0 2828.554443359375D0 0.0015860627172514797D0 4.869999885559082D0)) (list (list 0.0D0 2827.797119140625D0 0.0015031250659376383D0 4.880000114440918D0)) (list (list 0.0D0 2827.0224609375D0 0.0014372025616467D0 4.889999866485596D0)) (list (list 0.0D0 2826.5966796875D0 0.0013812354300171137D0 4.900000095367432D0)) (list (list 0.0D0 2826.8251953125D0 0.0013305048923939467D0 4.909999847412109D0)) (list (list 0.0D0 2827.09619140625D0 0.0013077366165816784D0 4.920000076293945D0)) (list (list 0.0D0 2827.00341796875D0 0.0012964872876182199D0 4.929999828338623D0)) (list (list 0.0D0 2826.7548828125D0 0.0012807208113372326D0 4.940000057220459D0)) (list (list 0.0D0 2826.686767578125D0 0.0012480310397222639D0 4.949999809265137D0)) (list (list 0.0D0 2827.30419921875D0 0.001189929898828268D0 4.960000038146973D0)) (list (list 0.0D0 2827.978271484375D0 0.0011306590167805553D0 4.96999979019165D0)) (list (list 0.0D0 2827.656494140625D0 0.0010829720413312316D0 4.980000019073486D0)) (list (list 0.0D0 2826.605712890625D0 0.0010586758144199849D0 4.989999771118164D0)) (list (list 0.0D0 2825.476318359375D0 0.0010559328366070986D0 5.0D0)) (list (list 0.0D0 2825.399658203125D0 0.0010554337641224266D0 5.009999752044678D0)) (list (list 0.0D0 2826.141845703125D0 0.0010301260044798255D0 5.019999980926514D0)) (list (list 0.0D0 2826.12451171875D0 9.890577057376504D-4 5.029999732971191D0)) (list (list 0.0D0 2825.66455078125D0 9.421145659871399D-4 5.039999961853027D0)) (list (list 0.0D0 2825.486083984375D0 8.954476797953248D-4 5.049999713897705D0)) (list (list 0.0D0 2826.808837890625D0 8.504177676513791D-4 5.059999942779541D0)) (list (list 0.0D0 2828.958251953125D0 8.633295656181872D-4 5.069999694824219D0)) (list (list 0.0D0 2829.64306640625D0 9.083363111130893D-4 5.079999923706055D0)) (list (list 0.0D0 2828.973388671875D0 9.75162023678422D-4 5.089999675750732D0)) (list (list 0.0D0 2827.513671875D0 0.0010543089592829347D0 5.099999904632568D0)) (list (list 0.0D0 2826.325439453125D0 0.001137036015279591D0 5.109999656677246D0)) (list (list 0.0D0 2826.24853515625D0 0.0011707883095368743D0 5.119999885559082D0)) (list (list 0.0D0 2826.4365234375D0 0.0011712228879332543D0 5.130000114440918D0)) (list (list 0.0D0 2826.62255859375D0 0.0011562611907720566D0 5.139999866485596D0)) (list (list 0.0D0 2826.69970703125D0 0.001141988206654787D0 5.150000095367432D0)) (list (list 0.0D0 2826.739990234375D0 0.0011424657423049212D0 5.159999847412109D0)) (list (list 0.0D0 2826.774658203125D0 0.0011531485943123699D0 5.170000076293945D0)) (list (list 0.0D0 2826.801025390625D0 0.0011484689312055707D0 5.179999828338623D0)) (list (list 0.0D0 2826.847412109375D0 0.001132565550506115D0 5.190000057220459D0)) (list (list 0.0D0 2826.82080078125D0 0.001118777203373611D0 5.199999809265137D0)) (list (list 0.0D0 2826.478759765625D0 0.001131146214902401D0 5.210000038146973D0)) (list (list 0.0D0 2825.699462890625D0 0.0011954284273087979D0 5.21999979019165D0)) (list (list 0.0D0 2825.3623046875D0 0.0012621170608326793D0 5.230000019073486D0)) (list (list 0.0D0 2825.551025390625D0 0.001313177403062582D0 5.239999771118164D0)) (list (list 0.0D0 2826.09423828125D0 0.001344638061709702D0 5.25D0)) (list (list 0.0D0 2826.541259765625D0 0.0013679589610546828D0 5.259999752044678D0)) (list (list 0.0D0 2826.739013671875D0 0.0013937070034444333D0 5.269999980926514D0)) (list (list 0.0D0 2826.603515625D0 0.001424260321073234D0 5.279999732971191D0)) (list (list 0.0D0 2826.13134765625D0 0.0014634960098192096D0 5.289999961853027D0)) (list (list 0.0D0 2825.47265625D0 0.0015120990574359894D0 5.299999713897705D0)) (list (list 0.0D0 2824.94921875D0 0.0015672894660383463D0 5.309999942779541D0)) (list (list 0.0D0 2825.116943359375D0 0.00160295981913805D0 5.319999694824219D0)) (list (list 0.0D0 2825.373046875D0 0.0016233725473284722D0 5.329999923706055D0)) (list (list 0.0D0 2825.48095703125D0 0.0016297303372994066D0 5.339999675750732D0)) (list (list 0.0D0 2825.457763671875D0 0.0016252625500783325D0 5.349999904632568D0)) (list (list 0.0D0 2825.593994140625D0 0.0016153441974893213D0 5.359999656677246D0)) (list (list 0.0D0 2826.098876953125D0 0.0016524273669347167D0 5.369999885559082D0)) (list (list 0.0D0 2826.308349609375D0 0.0017485703574493528D0 5.380000114440918D0)) (list (list 0.0D0 2826.230224609375D0 0.0018785195425152779D0 5.389999866485596D0)) (list (list 0.0D0 2826.1201171875D0 0.0020130970515310765D0 5.400000095367432D0)) (list (list 0.0D0 2826.494384765625D0 0.002119105076417327D0 5.409999847412109D0)) (list (list 0.0D0 2827.456298828125D0 0.0022104522213339806D0 5.420000076293945D0)) (list (list 0.0D0 2828.267822265625D0 0.002317917998880148D0 5.429999828338623D0)) (list (list 0.0D0 2828.7763671875D0 0.0024117447901517153D0 5.440000057220459D0)) (list (list 0.0D0 2829.02783203125D0 0.002458676928654313D0 5.449999809265137D0)) (list (list 0.0D0 2829.271240234375D0 0.0024219194892793894D0 5.460000038146973D0)) (list (list 0.0D0 2829.83447265625D0 0.0022467782255262137D0 5.46999979019165D0)) (list (list 0.0D0 2830.802978515625D0 0.0020011793822050095D0 5.480000019073486D0)) (list (list 0.0D0 2832.1435546875D0 0.0017392135923728347D0 5.489999771118164D0)) (list (list 0.0D0 2833.6748046875D0 0.0015110293170437217D0 5.5D0)) (list (list 0.0D0 2835.0654296875D0 0.001362737501040101D0 5.509999752044678D0)) (list (list 0.0D0 2835.6435546875D0 0.0013229744508862496D0 5.519999980926514D0)) (list (list 0.0D0 2835.8037109375D0 0.0013488674303516746D0 5.529999732971191D0)) (list (list 0.0D0 2835.708251953125D0 0.0014252453111112118D0 5.539999961853027D0)) (list (list 0.0D0 2835.445068359375D0 0.0015353393973782659D0 5.549999713897705D0)) (list (list 0.0D0 2835.027587890625D0 0.0016608299920335412D0 5.559999942779541D0)) (list (list 0.0D0 2834.4580078125D0 0.0017789015546441079D0 5.569999694824219D0)) (list (list 0.0D0 2833.864013671875D0 0.0018778347875922919D0 5.579999923706055D0)) (list (list 0.0D0 2833.25244140625D0 0.0019517623586580158D0 5.589999675750732D0)) (list (list 0.0D0 2832.724609375D0 0.0019943949300795794D0 5.599999904632568D0)) (list (list 0.0D0 2832.470947265625D0 0.001999228959903121D0 5.609999656677246D0)) (list (list 0.0D0 2832.7001953125D0 0.001981616485863924D0 5.619999885559082D0)) (list (list 0.0D0 2832.730224609375D0 0.001998532097786665D0 5.62999963760376D0)) (list (list 0.0D0 2832.37890625D0 0.0020613193046301604D0 5.639999866485596D0)) (list (list 0.0D0 2831.693359375D0 0.002164516830816865D0 5.650000095367432D0)) (list (list 0.0D0 2830.939453125D0 0.002286498202010989D0 5.659999847412109D0)) (list (list 0.0D0 2830.5244140625D0 0.002392767695710063D0 5.670000076293945D0)) (list (list 0.0D0 2830.343017578125D0 0.002508491976186633D0 5.679999828338623D0)) (list (list 0.0D0 2830.294921875D0 0.00265520135872066D0 5.690000057220459D0)) (list (list 0.0D0 2830.263427734375D0 0.002838865155354142D0 5.699999809265137D0)) (list (list 0.0D0 2830.115966796875D0 0.003050436032935977D0 5.710000038146973D0)) (list (list 0.0D0 2829.62255859375D0 0.0032121120020747185D0 5.71999979019165D0)) (list (list 0.0D0 2829.015380859375D0 0.003270894754678011D0 5.730000019073486D0)) (list (list 0.0D0 2828.552001953125D0 0.0032306292559951544D0 5.739999771118164D0)) (list (list 0.0D0 2828.3271484375D0 0.0031177543569356203D0 5.75D0)) (list (list 0.0D0 2828.283935546875D0 0.002980597550049424D0 5.759999752044678D0)) (list (list 0.0D0 2827.776611328125D0 0.0028937046881765128D0 5.769999980926514D0)) (list (list 0.0D0 2826.845947265625D0 0.0028301882557570935D0 5.779999732971191D0)) (list (list 0.0D0 2825.954345703125D0 0.0027421056292951107D0 5.789999961853027D0)) (list (list 0.0D0 2825.45947265625D0 0.0025998991914093495D0 5.799999713897705D0)) (list (list 0.0D0 2825.630615234375D0 0.0023909478913992644D0 5.809999942779541D0)) (list (list 0.0D0 2826.648193359375D0 0.0021804682910442353D0 5.819999694824219D0)) (list (list 0.0D0 2827.792724609375D0 0.0020342024508863688D0 5.829999923706055D0)) (list (list 0.0D0 2828.788818359375D0 0.0019282435532659293D0 5.839999675750732D0)) (list (list 0.0D0 2829.676025390625D0 0.001834049355238676D0 5.849999904632568D0)) (list (list 0.0D0 2830.755615234375D0 0.0017188949277624488D0 5.859999656677246D0)) (list (list 0.0D0 2832.14306640625D0 0.0015984878409653902D0 5.869999885559082D0)) (list (list 0.0D0 2833.12255859375D0 0.0015099908923730255D0 5.87999963760376D0)) (list (list 0.0D0 2833.8212890625D0 0.0014688579831272364D0 5.889999866485596D0)) (list (list 0.0D0 2834.266845703125D0 0.0014833719469606877D0 5.900000095367432D0)) (list (list 0.0D0 2834.4091796875D0 0.0015548445517197252D0 5.909999847412109D0)) (list (list 0.0D0 2833.9970703125D0 0.0016764781903475523D0 5.920000076293945D0)) (list (list 0.0D0 2833.71630859375D0 0.001806410145945847D0 5.929999828338623D0)) (list (list 0.0D0 2833.779052734375D0 0.0019104303792119027D0 5.940000057220459D0)) (list (list 0.0D0 2834.088134765625D0 0.001965457573533058D0 5.949999809265137D0)) (list (list 0.0D0 2834.291748046875D0 0.0019578502979129553D0 5.960000038146973D0)) (list (list 0.0D0 2834.0029296875D0 0.0018896041437983513D0 5.96999979019165D0)) (list (list 0.0D0 2833.638671875D0 0.0018175222212448717D0 5.980000019073486D0)) (list (list 0.0D0 2833.374267578125D0 0.0017547454917803407D0 5.989999771118164D0)) (list (list 0.0D0 2833.226318359375D0 0.0017111018532887102D0 6.0D0)) (list (list 0.0D0 2833.08203125D0 0.0016946413088589907D0 6.009999752044678D0)) (list (list 0.0D0 2832.549072265625D0 0.001748004462569952D0 6.019999980926514D0)) (list (list 0.0D0 2831.981201171875D0 0.0018596641020849348D0 6.029999732971191D0)) (list (list 0.0D0 2831.681640625D0 0.0019940196070820093D0 6.039999961853027D0)) (list (list 0.0D0 2831.66552734375D0 0.0021280597429722548D0 6.049999713897705D0)) (list (list 0.0D0 2831.714599609375D0 0.0022490601986646653D0 6.059999942779541D0)) (list (list 0.0D0 2831.267578125D0 0.0024179951287806034D0 6.069999694824219D0)) (list (list 0.0D0 2830.537109375D0 0.0026522662956267596D0 6.079999923706055D0)) (list (list 0.0D0 2829.82177734375D0 0.0028944150544703007D0 6.089999675750732D0)) (list (list 0.0D0 2829.3447265625D0 0.003086210461333394D0 6.099999904632568D0)) (list (list 0.0D0 2829.26220703125D0 0.0031686914153397084D0 6.109999656677246D0)) (list (list 0.0D0 2829.194580078125D0 0.0031232221517711878D0 6.119999885559082D0)) (list (list 0.0D0 2828.76611328125D0 0.0030253177974373103D0 6.12999963760376D0)) (list (list 0.0D0 2828.16064453125D0 0.002882537664845586D0 6.139999866485596D0)) (list (list 0.0D0 2827.696533203125D0 0.002696453593671322D0 6.150000095367432D0)) (list (list 0.0D0 2827.782470703125D0 0.002468026941642165D0 6.159999847412109D0)) (list (list 0.0D0 2828.287353515625D0 0.002260236069560051D0 6.170000076293945D0)) (list (list 0.0D0 2828.585205078125D0 0.00211165938526392D0 6.179999828338623D0)) (list (list 0.0D0 2828.725341796875D0 0.0019923956133425236D0 6.190000057220459D0)) (list (list 0.0D0 2828.833740234375D0 0.0018732156604528428D0 6.199999809265137D0)) (list (list 0.0D0 2829.106201171875D0 0.0017244141781702638D0 6.210000038146973D0)) (list (list 0.0D0 2830.01708984375D0 0.0015370872570201755D0 6.21999979019165D0)) (list (list 0.0D0 2831.557373046875D0 0.0013827512739226222D0 6.230000019073486D0)) (list (list 0.0D0 2833.134521484375D0 0.0012960376916453243D0 6.239999771118164D0)) (list (list 0.0D0 2834.224365234375D0 0.0012847172329202295D0 6.25D0)) (list (list 0.0D0 2834.36669921875D0 0.001336814253591001D0 6.259999752044678D0)) (list (list 0.0D0 2833.923095703125D0 0.0014543161960318685D0 6.269999980926514D0)) (list (list 0.0D0 2833.658203125D0 0.0015941493911668659D0 6.279999732971191D0)) (list (list 0.0D0 2833.450927734375D0 0.0017281201435253025D0 6.289999961853027D0)) (list (list 0.0D0 2833.195068359375D0 0.001851017470471561D0 6.299999713897705D0)) (list (list 0.0D0 2832.792724609375D0 0.001974712824448943D0 6.309999942779541D0)) (list (list 0.0D0 2832.179931640625D0 0.002162008546292782D0 6.319999694824219D0)) (list (list 0.0D0 2831.499267578125D0 0.002391241956502199D0 6.329999923706055D0)) (list (list 0.0D0 2830.9228515625D0 0.0026061097159981728D0 6.339999675750732D0)) (list (list 0.0D0 2830.507568359375D0 0.0027722110971808434D0 6.349999904632568D0)) (list (list 0.0D0 2830.22607421875D0 0.0028701566625386477D0 6.359999656677246D0)) (list (list 0.0D0 2829.865234375D0 0.002911290153861046D0 6.369999885559082D0)) (list (list 0.0D0 2829.43701171875D0 0.002902889158576727D0 6.37999963760376D0)) (list (list 0.0D0 2829.1640625D0 0.002825818955898285D0 6.389999866485596D0)) (list (list 0.0D0 2829.19775390625D0 0.0026818248443305493D0 6.399999618530273D0)) (list (list 0.0D0 2829.62646484375D0 0.002490641549229622D0 6.409999847412109D0)) (list (list 0.0D0 2830.181884765625D0 0.0023201298899948597D0 6.420000076293945D0)) (list (list 0.0D0 2830.65625D0 0.0021779064554721117D0 6.429999828338623D0)) (list (list 0.0D0 2831.127685546875D0 0.002039592480286956D0 6.440000057220459D0)) (list (list 0.0D0 2831.6142578125D0 0.0018973445985466242D0 6.449999809265137D0)) (list (list 0.0D0 2832.094970703125D0 0.0017536921659484506D0 6.460000038146973D0)) (list (list 0.0D0 2832.480712890625D0 0.0016299848211929202D0 6.46999979019165D0)) (list (list 0.0D0 2833.084228515625D0 0.0015403085853904486D0 6.480000019073486D0)) (list (list 0.0D0 2833.44287109375D0 0.0014888597652316094D0 6.489999771118164D0)) (list (list 0.0D0 2833.201904296875D0 0.0014834250323474408D0 6.5D0)) (list (list 0.0D0 2832.133544921875D0 0.0015323841944336892D0 6.509999752044678D0)) (list (list 0.0D0 2831.11962890625D0 0.0016478196484968067D0 6.519999980926514D0)) (list (list 0.0D0 2830.852783203125D0 0.0017342575592920185D0 6.529999732971191D0)) (list (list 0.0D0 2830.90380859375D0 0.0017685324419289828D0 6.539999961853027D0)) (list (list 0.0D0 2831.065673828125D0 0.0017507608281448484D0 6.549999713897705D0)) (list (list 0.0D0 2831.251953125D0 0.0016975977923721075D0 6.559999942779541D0)) (list (list 0.0D0 2831.62255859375D0 0.0016431130934506655D0 6.569999694824219D0)) (list (list 0.0D0 2832.01318359375D0 0.0015844160225242377D0 6.579999923706055D0)) (list (list 0.0D0 2832.4248046875D0 0.0015187811804935337D0 6.589999675750732D0)) (list (list 0.0D0 2832.906005859375D0 0.0014589624479413033D0 6.599999904632568D0)) (list (list 0.0D0 2833.510498046875D0 0.0014279502211138606D0 6.609999656677246D0)) (list (list 0.0D0 2833.9248046875D0 0.0014707098016515375D0 6.619999885559082D0)) (list (list 0.0D0 2833.7490234375D0 0.001549675827845931D0 6.62999963760376D0)) (list (list 0.0D0 2833.207763671875D0 0.0016398971201851964D0 6.639999866485596D0)) (list (list 0.0D0 2832.51025390625D0 0.0017264425987377763D0 6.649999618530273D0)) (list (list 0.0D0 2831.865966796875D0 0.0017982410499826074D0 6.659999847412109D0)) (list (list 0.0D0 2831.27197265625D0 0.0018327627331018448D0 6.670000076293945D0)) (list (list 0.0D0 2831.025634765625D0 0.0018216170137748123D0 6.679999828338623D0)) (list (list 0.0D0 2831.234619140625D0 0.0017810174031183124D0 6.690000057220459D0)) (list (list 0.0D0 2831.80810546875D0 0.0017297270242124796D0 6.699999809265137D0)) (list (list 0.0D0 2832.524658203125D0 0.0016881340416148305D0 6.710000038146973D0)) (list (list 0.0D0 2833.103271484375D0 0.0016547600971534849D0 6.71999979019165D0)) (list (list 0.0D0 2833.4873046875D0 0.0016238514799624682D0 6.730000019073486D0)) (list (list 0.0D0 2833.485595703125D0 0.0016185458516702056D0 6.739999771118164D0)) (list (list 0.0D0 2833.091552734375D0 0.0016558688366785646D0 6.75D0)) (list (list 0.0D0 2832.4716796875D0 0.001744797918945551D0 6.759999752044678D0)) (list (list 0.0D0 2832.6689453125D0 0.0018392482306808234D0 6.769999980926514D0)) (list (list 0.0D0 2833.711669921875D0 0.0019057848257943988D0 6.779999732971191D0)) (list (list 0.0D0 2834.59375D0 0.001956227933987975D0 6.789999961853027D0)) (list (list 0.0D0 2834.840576171875D0 0.001994439633563161D0 6.799999713897705D0)) (list (list 0.0D0 2834.27783203125D0 0.0020233681425452233D0 6.809999942779541D0)) (list (list 0.0D0 2833.22998046875D0 0.002074211137369275D0 6.819999694824219D0)) (list (list 0.0D0 2832.16748046875D0 0.0021790240425616503D0 6.829999923706055D0)) (list (list 0.0D0 2831.15576171875D0 0.002319158287718892D0 6.839999675750732D0)) (list (list 0.0D0 2830.443115234375D0 0.002452340442687273D0 6.849999904632568D0)) (list (list 0.0D0 2830.339111328125D0 0.002523689530789852D0 6.859999656677246D0)) (list (list 0.0D0 2830.847900390625D0 0.002488483674824238D0 6.869999885559082D0)) (list (list 0.0D0 2831.384765625D0 0.00243409164249897D0 6.87999963760376D0)) (list (list 0.0D0 2831.66455078125D0 0.002405183156952262D0 6.889999866485596D0)) (list (list 0.0D0 2831.512451171875D0 0.0024156062863767147D0 6.899999618530273D0)) (list (list 0.0D0 2830.853759765625D0 0.002460961462929845D0 6.909999847412109D0)) (list (list 0.0D0 2830.06005859375D0 0.0025022951886057854D0 6.920000076293945D0)) (list (list 0.0D0 2830.033203125D0 0.0024491704534739256D0 6.929999828338623D0)) (list (list 0.0D0 2830.979736328125D0 0.0023029108997434378D0 6.940000057220459D0)) (list (list 0.0D0 2832.635009765625D0 0.002112200018018484D0 6.949999809265137D0)) (list (list 0.0D0 2834.41748046875D0 0.0019505401141941548D0 6.960000038146973D0)) (list (list 0.0D0 2835.136474609375D0 0.0018708199495449663D0 6.96999979019165D0)) (list (list 0.0D0 2835.123291015625D0 0.0018086855998262763D0 6.980000019073486D0)) (list (list 0.0D0 2834.852783203125D0 0.0017171830404549838D0 6.989999771118164D0)) (list (list 0.0D0 2834.417724609375D0 0.0015814172802492977D0 7.0D0)) (list (list 0.0D0 2833.735107421875D0 0.001407161820679903D0 7.009999752044678D0)) (list (list 0.0D0 2832.405029296875D0 0.0012590064434334636D0 7.019999980926514D0)) (list (list 0.0D0 2831.047607421875D0 0.0011743344366550446D0 7.029999732971191D0)) (list (list 0.0D0 2830.1845703125D0 0.0011165942996740342D0 7.039999961853027D0)) (list (list 0.0D0 2829.982177734375D0 0.0010550637962296606D0 7.049999713897705D0)) (list (list 0.0D0 2830.442138671875D0 9.605488157831132D-4 7.059999942779541D0)) (list (list 0.0D0 2831.729248046875D0 8.107385947369039D-4 7.069999694824219D0)) (list (list 0.0D0 2832.320556640625D0 6.525053759105504D-4 7.079999923706055D0)) (list (list 0.0D0 2831.96875D0 5.285007646307349D-4 7.089999675750732D0)) (list (list 0.0D0 2831.39111328125D0 4.5798218343406916D-4 7.099999904632568D0)) (list (list 0.0D0 2831.756591796875D0 4.462581127882004D-4 7.109999656677246D0)) (list (list 0.0D0 2834.280517578125D0 4.743216559290886D-4 7.119999885559082D0)) (list (list 0.0D0 2835.951171875D0 5.06735232193023D-4 7.12999963760376D0)) (list (list 0.0D0 2836.73193359375D0 5.165014299564064D-4 7.139999866485596D0)) (list (list 0.0D0 2836.87451171875D0 4.972978495061398D-4 7.149999618530273D0)) (list (list 0.0D0 2836.778076171875D0 4.5284043881110847D-4 7.159999847412109D0)) (list (list 0.0D0 2836.6474609375D0 3.9108138298615813D-4 7.170000076293945D0)) (list (list 0.0D0 2836.215576171875D0 3.257676144130528D-4 7.179999828338623D0)) (list (list 0.0D0 2834.502685546875D0 2.562256413511932D-4 7.190000057220459D0)) (list (list 0.0D0 2831.0791015625D0 1.9505458476487547D-4 7.199999809265137D0)) (list (list 0.0D0 2826.332763671875D0 1.5960737073328346D-4 7.210000038146973D0)) (list (list 0.0D0 2825.886962890625D0 1.6236222290899605D-4 7.21999979019165D0)) (list (list 0.0D0 2828.97509765625D0 1.8933319370262325D-4 7.230000019073486D0)) (list (list 0.0D0 2832.317138671875D0 2.2836918651591987D-4 7.239999771118164D0)) (list (list 0.0D0 2834.406005859375D0 2.587412600405514D-4 7.25D0)) (list (list 0.0D0 2834.582275390625D0 2.580339496489614D-4 7.259999752044678D0)) (list (list 0.0D0 2833.928466796875D0 2.2335418907459825D-4 7.269999980926514D0)) (list (list 0.0D0 2832.446533203125D0 1.768281072145328D-4 7.279999732971191D0)) (list (list 0.0D0 2830.30322265625D0 1.3263223809190095D-4 7.289999961853027D0)) (list (list 0.0D0 2828.2080078125D0 9.723862604005262D-5 7.299999713897705D0)) (list (list 0.0D0 2827.08154296875D0 7.3427872848697D-5 7.309999942779541D0)) (list (list 0.0D0 2827.680419921875D0 5.808507194160484D-5 7.319999694824219D0)) (list (list 0.0D0 2829.33203125D0 4.4277894630795345D-5 7.329999923706055D0)) (list (list 0.0D0 2834.065673828125D0 3.754670251510106D-5 7.339999675750732D0)) (list (list 0.0D0 2840.8544921875D0 3.5659362765727565D-5 7.349999904632568D0)) (list (list 0.0D0 2846.72900390625D0 3.455168553045951D-5 7.359999656677246D0)) (list (list 0.0D0 2842.619873046875D0 4.1958948713727296D-5 7.369999885559082D0)) (list (list 0.0D0 2839.30224609375D0 5.143478119862266D-5 7.37999963760376D0)) (list (list 0.0D0 2837.819580078125D0 5.626185884466395D-5 7.389999866485596D0)) (list (list 0.0D0 2837.662109375D0 5.540990241570398D-5 7.399999618530273D0)) (list (list 0.0D0 2837.779541015625D0 5.028068335377611D-5 7.409999847412109D0)) (list (list 0.0D0 2837.9794921875D0 4.367887959233485D-5 7.419999599456787D0)) (list (list 0.0D0 2838.31298828125D0 3.7947884266031906D-5 7.429999828338623D0)) (list (list 0.0D0 2838.461181640625D0 1.8893881133408286D-5 7.440000057220459D0)) (list (list 1.0D0 2301.4326171875D0 1.0409242531750351D-4 0.0D0)) (list (list 1.0D0 2304.211669921875D0 2.145188773283735D-4 0.009999999776482582D0)) (list (list 1.0D0 2305.875244140625D0 3.559323668014258D-4 0.019999999552965164D0)) (list (list 1.0D0 2305.723388671875D0 4.840743786189705D-4 0.029999999329447747D0)) (list (list 1.0D0 2303.59912109375D0 5.698600434698165D-4 0.03999999910593033D0)) (list (list 1.0D0 2299.8916015625D0 5.993360537104309D-4 0.04999999701976776D0)) (list (list 1.0D0 2298.810546875D0 5.675879074260593D-4 0.05999999865889549D0)) (list (list 1.0D0 2300.493896484375D0 5.118594854138792D-4 0.07000000029802323D0)) (list (list 1.0D0 2303.72265625D0 5.191017407923937D-4 0.07999999821186066D0)) (list (list 1.0D0 2307.6689453125D0 6.896158447489142D-4 0.08999999612569809D0)) (list (list 1.0D0 2311.87646484375D0 0.0011375600006431342D0 0.09999999403953552D0)) (list (list 1.0D0 2315.968994140625D0 0.002268148586153984D0 0.10999999940395355D0)) (list (list 1.0D0 2318.89404296875D0 0.0036936525721102953D0 0.11999999731779099D0)) (list (list 1.0D0 2322.025634765625D0 0.005320973694324493D0 0.12999999523162842D0)) (list (list 1.0D0 2325.59033203125D0 0.007051031105220318D0 0.14000000059604645D0)) (list (list 1.0D0 2328.740966796875D0 0.00877359788864851D0 0.14999999105930328D0)) (list (list 1.0D0 2330.288330078125D0 0.009849084541201592D0 0.1599999964237213D0)) (list (list 1.0D0 2330.754150390625D0 0.01018746942281723D0 0.17000000178813934D0)) (list (list 1.0D0 2330.58544921875D0 0.01000570971518755D0 0.17999999225139618D0)) (list (list 1.0D0 2330.189208984375D0 0.009526154957711697D0 0.1899999976158142D0)) (list (list 1.0D0 2329.943115234375D0 0.008984112180769444D0 0.19999998807907105D0)) (list (list 1.0D0 2330.018798828125D0 0.00871698372066021D0 0.20999999344348908D0)) (list (list 1.0D0 2330.2109375D0 0.008874733000993729D0 0.2199999988079071D0)) (list (list 1.0D0 2330.587646484375D0 0.009403744712471962D0 0.22999998927116394D0)) (list (list 1.0D0 2331.06201171875D0 0.01015723031014204D0 0.23999999463558197D0)) (list (list 1.0D0 2331.405029296875D0 0.01090022549033165D0 0.25D0)) (list (list 1.0D0 2331.198486328125D0 0.011440522968769074D0 0.25999999046325684D0)) (list (list 1.0D0 2331.098876953125D0 0.012130963616073132D0 0.26999998092651367D0)) (list (list 1.0D0 2331.250244140625D0 0.013027814216911793D0 0.2800000011920929D0)) (list (list 1.0D0 2331.556640625D0 0.014000074937939644D0 0.28999999165534973D0)) (list (list 1.0D0 2331.710693359375D0 0.014748835004866124D0 0.29999998211860657D0)) (list (list 1.0D0 2331.268310546875D0 0.014794663526117802D0 0.3100000023841858D0)) (list (list 1.0D0 2330.640625D0 0.01473010703921318D0 0.3199999928474426D0)) (list (list 1.0D0 2329.947021484375D0 0.01488250121474266D0 0.32999998331069947D0)) (list (list 1.0D0 2329.275634765625D0 0.015331159345805645D0 0.3400000035762787D0)) (list (list 1.0D0 2328.693359375D0 0.015936508774757385D0 0.3499999940395355D0)) (list (list 1.0D0 2328.382080078125D0 0.01602056249976158D0 0.35999998450279236D0)) (list (list 1.0D0 2328.258056640625D0 0.01565493643283844D0 0.3700000047683716D0)) (list (list 1.0D0 2328.26416015625D0 0.015128931030631066D0 0.3799999952316284D0)) (list (list 1.0D0 2328.37109375D0 0.014622896909713745D0 0.38999998569488526D0)) (list (list 1.0D0 2328.566162109375D0 0.01423155888915062D0 0.3999999761581421D0)) (list (list 1.0D0 2328.68115234375D0 0.01385815255343914D0 0.4099999964237213D0)) (list (list 1.0D0 2328.5654296875D0 0.013662602752447129D0 0.41999998688697815D0)) (list (list 1.0D0 2328.284423828125D0 0.013780099339783192D0 0.429999977350235D0)) (list (list 1.0D0 2327.9248046875D0 0.01416765246540308D0 0.4399999976158142D0)) (list (list 1.0D0 2327.593994140625D0 0.014625852927565575D0 0.44999998807907105D0)) (list (list 1.0D0 2327.36962890625D0 0.014606161043047905D0 0.4599999785423279D0)) (list (list 1.0D0 2327.0849609375D0 0.0141676664352417D0 0.4699999988079071D0)) (list (list 1.0D0 2326.75830078125D0 0.013528029434382916D0 0.47999998927116394D0)) (list (list 1.0D0 2326.4970703125D0 0.012872934341430664D0 0.4899999797344208D0)) (list (list 1.0D0 2326.48193359375D0 0.012375096790492535D0 0.5D0)) (list (list 1.0D0 2326.902099609375D0 0.012321213260293007D0 0.5099999904632568D0)) (list (list 1.0D0 2327.29833984375D0 0.012647215276956559D0 0.5199999809265137D0)) (list (list 1.0D0 2327.412109375D0 0.013204962015151978D0 0.5299999713897705D0)) (list (list 1.0D0 2327.2451171875D0 0.013848790898919106D0 0.5399999618530273D0)) (list (list 1.0D0 2327.009033203125D0 0.014421749860048294D0 0.550000011920929D0)) (list (list 1.0D0 2327.18798828125D0 0.014634971506893635D0 0.5600000023841858D0)) (list (list 1.0D0 2327.647216796875D0 0.014437100850045681D0 0.5699999928474426D0)) (list (list 1.0D0 2328.122314453125D0 0.013869119808077813D0 0.5799999833106995D0)) (list (list 1.0D0 2328.43017578125D0 0.013009106740355492D0 0.5899999737739563D0)) (list (list 1.0D0 2328.4404296875D0 0.011973941698670388D0 0.5999999642372131D0)) (list (list 1.0D0 2327.92236328125D0 0.010829423554241658D0 0.6100000143051148D0)) (list (list 1.0D0 2326.791015625D0 0.00959219504147768D0 0.6200000047683716D0)) (list (list 1.0D0 2325.437255859375D0 0.008356442674994469D0 0.6299999952316284D0)) (list (list 1.0D0 2324.36669921875D0 0.007240595296025276D0 0.6399999856948853D0)) (list (list 1.0D0 2324.161376953125D0 0.0063914149068295956D0 0.6499999761581421D0)) (list (list 1.0D0 2324.725830078125D0 0.006240817252546549D0 0.6599999666213989D0)) (list (list 1.0D0 2325.3876953125D0 0.00668925978243351D0 0.6699999570846558D0)) (list (list 1.0D0 2326.046875D0 0.007545859087258577D0 0.6800000071525574D0)) (list (list 1.0D0 2326.59423828125D0 0.008603633381426335D0 0.6899999976158142D0)) (list (list 1.0D0 2326.901123046875D0 0.009618192911148072D0 0.699999988079071D0)) (list (list 1.0D0 2326.508544921875D0 0.010129616595804692D0 0.7099999785423279D0)) (list (list 1.0D0 2325.740478515625D0 0.010175012983381749D0 0.7199999690055847D0)) (list (list 1.0D0 2325.080322265625D0 0.009985356591641903D0 0.7299999594688416D0)) (list (list 1.0D0 2324.792724609375D0 0.009756091982126236D0 0.7400000095367432D0)) (list (list 1.0D0 2324.978271484375D0 0.009669389575719834D0 0.75D0)) (list (list 1.0D0 2325.249755859375D0 0.009843134321272374D0 0.7599999904632568D0)) (list (list 1.0D0 2325.030517578125D0 0.010054760612547398D0 0.7699999809265137D0)) (list (list 1.0D0 2324.575439453125D0 0.010281377471983433D0 0.7799999713897705D0)) (list (list 1.0D0 2324.14697265625D0 0.010530397295951844D0 0.7899999618530273D0)) (list (list 1.0D0 2324.012939453125D0 0.010827899910509587D0 0.7999999523162842D0)) (list (list 1.0D0 2324.09521484375D0 0.011190337128937245D0 0.8100000023841858D0)) (list (list 1.0D0 2324.13671875D0 0.011636896058917046D0 0.8199999928474426D0)) (list (list 1.0D0 2324.205322265625D0 0.012188144959509373D0 0.8299999833106995D0)) (list (list 1.0D0 2324.351318359375D0 0.012792784720659256D0 0.8399999737739563D0)) (list (list 1.0D0 2324.609375D0 0.013336909003555775D0 0.8499999642372131D0)) (list (list 1.0D0 2324.910888671875D0 0.013426498509943486D0 0.85999995470047D0)) (list (list 1.0D0 2325.11376953125D0 0.013029133901000023D0 0.8700000047683716D0)) (list (list 1.0D0 2325.168212890625D0 0.012351838871836663D0 0.8799999952316284D0)) (list (list 1.0D0 2325.089111328125D0 0.011596622876822949D0 0.8899999856948853D0)) (list (list 1.0D0 2324.952392578125D0 0.010978064499795437D0 0.8999999761581421D0)) (list (list 1.0D0 2325.174072265625D0 0.010706637986004353D0 0.9099999666213989D0)) (list (list 1.0D0 2325.75537109375D0 0.010713668540120125D0 0.9199999570846558D0)) (list (list 1.0D0 2326.359375D0 0.01095143985003233D0 0.9300000071525574D0)) (list (list 1.0D0 2326.7470703125D0 0.011370780877768994D0 0.9399999976158142D0)) (list (list 1.0D0 2326.739990234375D0 0.011908595450222493D0 0.949999988079071D0)) (list (list 1.0D0 2326.280517578125D0 0.012467475607991219D0 0.9599999785423279D0)) (list (list 1.0D0 2325.886962890625D0 0.013014254160225392D0 0.9699999690055847D0)) (list (list 1.0D0 2325.712646484375D0 0.01353529654443264D0 0.9799999594688416D0)) (list (list 1.0D0 2325.746337890625D0 0.014003703370690346D0 0.9899999499320984D0)) (list (list 1.0D0 2325.861083984375D0 0.014380952343344689D0 1.0D0)) (list (list 1.0D0 2325.7431640625D0 0.014537148177623749D0 1.0099999904632569D0)) (list (list 1.0D0 2325.408935546875D0 0.014544839970767498D0 1.0199999809265137D0)) (list (list 1.0D0 2325.02294921875D0 0.014528527855873108D0 1.0299999713897705D0)) (list (list 1.0D0 2324.710205078125D0 0.014569022692739964D0 1.0399999618530274D0)) (list (list 1.0D0 2324.5693359375D0 0.01472617406398058D0 1.0499999523162842D0)) (list (list 1.0D0 2324.528564453125D0 0.015080652199685574D0 1.059999942779541D0)) (list (list 1.0D0 2324.365966796875D0 0.015464750118553639D0 1.0699999332427979D0)) (list (list 1.0D0 2324.0751953125D0 0.015709275379776955D0 1.0799999237060547D0)) (list (list 1.0D0 2323.720947265625D0 0.01570218615233898D0 1.090000033378601D0)) (list (list 1.0D0 2323.410888671875D0 0.01537378877401352D0 1.100000023841858D0)) (list (list 1.0D0 2323.203125D0 0.014752098359167576D0 1.1100000143051148D0)) (list (list 1.0D0 2323.055908203125D0 0.014109189622104168D0 1.1200000047683716D0)) (list (list 1.0D0 2322.94873046875D0 0.013590993359684945D0 1.1299999952316285D0)) (list (list 1.0D0 2322.8232421875D0 0.013293519616127015D0 1.1399999856948853D0)) (list (list 1.0D0 2322.60595703125D0 0.013266320340335369D0 1.149999976158142D0)) (list (list 1.0D0 2322.328857421875D0 0.013319714926183224D0 1.159999966621399D0)) (list (list 1.0D0 2322.155029296875D0 0.013078694231808186D0 1.1699999570846558D0)) (list (list 1.0D0 2321.982177734375D0 0.012539143674075604D0 1.1799999475479126D0)) (list (list 1.0D0 2321.7705078125D0 0.011830114759504795D0 1.1899999380111695D0)) (list (list 1.0D0 2321.53173828125D0 0.011167745105922223D0 1.1999999284744263D0)) (list (list 1.0D0 2321.580322265625D0 0.010793441906571389D0 1.209999918937683D0)) (list (list 1.0D0 2321.84619140625D0 0.010543293319642544D0 1.2200000286102295D0)) (list (list 1.0D0 2322.05908203125D0 0.010353472083806992D0 1.2300000190734864D0)) (list (list 1.0D0 2322.156494140625D0 0.010224969126284123D0 1.2400000095367432D0)) (list (list 1.0D0 2322.187744140625D0 0.010187198407948017D0 1.25D0)) (list (list 1.0D0 2322.322021484375D0 0.010259048081934452D0 1.2599999904632569D0)) (list (list 1.0D0 2322.48193359375D0 0.010276478715240956D0 1.2699999809265137D0)) (list (list 1.0D0 2322.735595703125D0 0.010258509777486325D0 1.2799999713897705D0)) (list (list 1.0D0 2323.08349609375D0 0.010316204279661179D0 1.2899999618530274D0)) (list (list 1.0D0 2323.465087890625D0 0.010613051243126393D0 1.2999999523162842D0)) (list (list 1.0D0 2323.505859375D0 0.011382875964045525D0 1.309999942779541D0)) (list (list 1.0D0 2323.2626953125D0 0.012405076995491982D0 1.3199999332427979D0)) (list (list 1.0D0 2322.87060546875D0 0.013406848534941674D0 1.3299999237060547D0)) (list (list 1.0D0 2322.414794921875D0 0.014236263930797577D0 1.3399999141693116D0)) (list (list 1.0D0 2321.97216796875D0 0.014815665781497956D0 1.350000023841858D0)) (list (list 1.0D0 2321.70654296875D0 0.015292828902602196D0 1.3600000143051148D0)) (list (list 1.0D0 2321.49267578125D0 0.015889698639512062D0 1.3700000047683716D0)) (list (list 1.0D0 2321.10693359375D0 0.01656537689268589D0 1.3799999952316285D0)) (list (list 1.0D0 2320.54443359375D0 0.017284756526350975D0 1.3899999856948853D0)) (list (list 1.0D0 2319.9482421875D0 0.0180154200643301D0 1.399999976158142D0)) (list (list 1.0D0 2319.934814453125D0 0.01878397911787033D0 1.409999966621399D0)) (list (list 1.0D0 2320.32763671875D0 0.019515685737133026D0 1.4199999570846558D0)) (list (list 1.0D0 2320.66845703125D0 0.020011302083730698D0 1.4299999475479126D0)) (list (list 1.0D0 2320.742919921875D0 0.02014322392642498D0 1.4399999380111695D0)) (list (list 1.0D0 2320.47900390625D0 0.01985461637377739D0 1.4499999284744263D0)) (list (list 1.0D0 2320.17724609375D0 0.019398750737309456D0 1.459999918937683D0)) (list (list 1.0D0 2320.027099609375D0 0.019110623747110367D0 1.46999990940094D0)) (list (list 1.0D0 2319.897216796875D0 0.01889842376112938D0 1.4800000190734864D0)) (list (list 1.0D0 2319.652587890625D0 0.01863868162035942D0 1.4900000095367432D0)) (list (list 1.0D0 2319.177001953125D0 0.01820099912583828D0 1.5D0)) (list (list 1.0D0 2318.61376953125D0 0.017585093155503273D0 1.5099999904632569D0)) (list (list 1.0D0 2318.22021484375D0 0.01693657599389553D0 1.5199999809265137D0)) (list (list 1.0D0 2318.010986328125D0 0.016247272491455078D0 1.5299999713897705D0)) (list (list 1.0D0 2317.949951171875D0 0.015557350590825081D0 1.5399999618530274D0)) (list (list 1.0D0 2317.9677734375D0 0.01494855061173439D0 1.5499999523162842D0)) (list (list 1.0D0 2317.99169921875D0 0.014715256169438362D0 1.559999942779541D0)) (list (list 1.0D0 2318.01123046875D0 0.014852200634777546D0 1.5699999332427979D0)) (list (list 1.0D0 2318.1650390625D0 0.015108347870409489D0 1.5799999237060547D0)) (list (list 1.0D0 2318.49609375D0 0.015298118814826012D0 1.5899999141693116D0)) (list (list 1.0D0 2318.974609375D0 0.015255022794008255D0 1.5999999046325684D0)) (list (list 1.0D0 2319.303466796875D0 0.014797155745327473D0 1.6100000143051148D0)) (list (list 1.0D0 2319.47509765625D0 0.014029678888618946D0 1.6200000047683716D0)) (list (list 1.0D0 2319.637939453125D0 0.013228824362158776D0 1.6299999952316285D0)) (list (list 1.0D0 2319.78662109375D0 0.012613045983016491D0 1.6399999856948853D0)) (list (list 1.0D0 2319.86328125D0 0.012377090752124787D0 1.649999976158142D0)) (list (list 1.0D0 2319.88330078125D0 0.012703387066721917D0 1.659999966621399D0)) (list (list 1.0D0 2319.98486328125D0 0.013475450687110424D0 1.6699999570846558D0)) (list (list 1.0D0 2319.988525390625D0 0.01462420541793108D0 1.6799999475479126D0)) (list (list 1.0D0 2319.822998046875D0 0.016059227287769318D0 1.6899999380111695D0)) (list (list 1.0D0 2319.49853515625D0 0.017644189298152924D0 1.6999999284744263D0)) (list (list 1.0D0 2319.340576171875D0 0.019089320674538613D0 1.709999918937683D0)) (list (list 1.0D0 2319.346923828125D0 0.02029602788388729D0 1.71999990940094D0)) (list (list 1.0D0 2319.353759765625D0 0.021386852487921715D0 1.7300000190734864D0)) (list (list 1.0D0 2319.30517578125D0 0.022405525669455528D0 1.7400000095367432D0)) (list (list 1.0D0 2319.1826171875D0 0.023347163572907448D0 1.75D0)) (list (list 1.0D0 2318.9384765625D0 0.02395908161997795D0 1.7599999904632569D0)) (list (list 1.0D0 2318.42626953125D0 0.024029545485973358D0 1.7699999809265137D0)) (list (list 1.0D0 2317.682373046875D0 0.02367154136300087D0 1.7799999713897705D0)) (list (list 1.0D0 2316.833251953125D0 0.023049015551805496D0 1.7899999618530274D0)) (list (list 1.0D0 2316.04541015625D0 0.022366084158420563D0 1.7999999523162842D0)) (list (list 1.0D0 2315.441162109375D0 0.02180078811943531D0 1.809999942779541D0)) (list (list 1.0D0 2315.04345703125D0 0.02119002863764763D0 1.8199999332427979D0)) (list (list 1.0D0 2314.89697265625D0 0.020369090139865875D0 1.8299999237060547D0)) (list (list 1.0D0 2314.87255859375D0 0.01930050365626812D0 1.8399999141693116D0)) (list (list 1.0D0 2314.73681640625D0 0.01802091673016548D0 1.8499999046325684D0)) (list (list 1.0D0 2313.9951171875D0 0.016702696681022644D0 1.8600000143051148D0)) (list (list 1.0D0 2313.086669921875D0 0.015776004642248154D0 1.8700000047683716D0)) (list (list 1.0D0 2312.550537109375D0 0.015267938375473023D0 1.8799999952316285D0)) (list (list 1.0D0 2312.50341796875D0 0.015159055590629578D0 1.8899999856948853D0)) (list (list 1.0D0 2312.84326171875D0 0.015387340448796749D0 1.899999976158142D0)) (list (list 1.0D0 2313.0615234375D0 0.015887904912233353D0 1.909999966621399D0)) (list (list 1.0D0 2313.0283203125D0 0.016564715653657913D0 1.9199999570846558D0)) (list (list 1.0D0 2313.009765625D0 0.017344970256090164D0 1.9299999475479126D0)) (list (list 1.0D0 2313.201904296875D0 0.018136491999030113D0 1.9399999380111695D0)) (list (list 1.0D0 2313.745849609375D0 0.018852654844522476D0 1.9499999284744263D0)) (list (list 1.0D0 2314.56494140625D0 0.019544759765267372D0 1.959999918937683D0)) (list (list 1.0D0 2315.223388671875D0 0.020415082573890686D0 1.96999990940094D0)) (list (list 1.0D0 2315.678466796875D0 0.0214247889816761D0 1.9799998998641968D0)) (list (list 1.0D0 2315.9765625D0 0.02241494134068489D0 1.9900000095367432D0)) (list (list 1.0D0 2316.185302734375D0 0.023147616535425186D0 2.0D0)) (list (list 1.0D0 2316.2177734375D0 0.023103879764676094D0 2.009999990463257D0)) (list (list 1.0D0 2316.07275390625D0 0.022277573123574257D0 2.0199999809265137D0)) (list (list 1.0D0 2315.917236328125D0 0.02123362384736538D0 2.0299999713897705D0)) (list (list 1.0D0 2315.8095703125D0 0.02041809819638729D0 2.0399999618530274D0)) (list (list 1.0D0 2315.7666015625D0 0.020222103223204613D0 2.049999952316284D0)) (list (list 1.0D0 2315.752197265625D0 0.020885929465293885D0 2.059999942779541D0)) (list (list 1.0D0 2315.89892578125D0 0.02184508740901947D0 2.069999933242798D0)) (list (list 1.0D0 2316.173828125D0 0.02276420220732689D0 2.0799999237060547D0)) (list (list 1.0D0 2316.49462890625D0 0.02352796122431755D0 2.0899999141693116D0)) (list (list 1.0D0 2316.7607421875D0 0.024097830057144165D0 2.0999999046325684D0)) (list (list 1.0D0 2316.89453125D0 0.024461649358272553D0 2.109999895095825D0)) (list (list 1.0D0 2316.8564453125D0 0.02456296794116497D0 2.119999885559082D0)) (list (list 1.0D0 2316.613037109375D0 0.02436443231999874D0 2.129999876022339D0)) (list (list 1.0D0 2316.23828125D0 0.023952007293701172D0 2.1399998664855957D0)) (list (list 1.0D0 2315.857421875D0 0.023500993847846985D0 2.1499998569488526D0)) (list (list 1.0D0 2315.66162109375D0 0.02344779670238495D0 2.1599998474121094D0)) (list (list 1.0D0 2315.48876953125D0 0.023875033482909203D0 2.169999837875366D0)) (list (list 1.0D0 2315.22705078125D0 0.024379601702094078D0 2.180000066757202D0)) (list (list 1.0D0 2314.89501953125D0 0.02469545602798462D0 2.190000057220459D0)) (list (list 1.0D0 2314.5615234375D0 0.0246284082531929D0 2.200000047683716D0)) (list (list 1.0D0 2314.35009765625D0 0.024180831387639046D0 2.2100000381469727D0)) (list (list 1.0D0 2314.290283203125D0 0.02372344210743904D0 2.2200000286102295D0)) (list (list 1.0D0 2314.364990234375D0 0.023332776501774788D0 2.2300000190734864D0)) (list (list 1.0D0 2314.536865234375D0 0.02295377105474472D0 2.240000009536743D0)) (list (list 1.0D0 2314.732177734375D0 0.022482793778181076D0 2.25D0)) (list (list 1.0D0 2314.7216796875D0 0.021751312538981438D0 2.259999990463257D0)) (list (list 1.0D0 2314.51318359375D0 0.020893994718790055D0 2.2699999809265137D0)) (list (list 1.0D0 2314.3271484375D0 0.020111948251724243D0 2.2799999713897705D0)) (list (list 1.0D0 2314.214111328125D0 0.019513987004756928D0 2.2899999618530274D0)) (list (list 1.0D0 2314.150390625D0 0.019194036722183228D0 2.299999952316284D0)) (list (list 1.0D0 2313.941650390625D0 0.019374806433916092D0 2.309999942779541D0)) (list (list 1.0D0 2313.7509765625D0 0.02007131651043892D0 2.319999933242798D0)) (list (list 1.0D0 2313.73486328125D0 0.020946122705936432D0 2.3299999237060547D0)) (list (list 1.0D0 2313.855224609375D0 0.021726222708821297D0 2.3399999141693116D0)) (list (list 1.0D0 2313.9970703125D0 0.022157665342092514D0 2.3499999046325684D0)) (list (list 1.0D0 2313.951904296875D0 0.021999189630150795D0 2.359999895095825D0)) (list (list 1.0D0 2313.91064453125D0 0.021442679688334465D0 2.369999885559082D0)) (list (list 1.0D0 2314.046875D0 0.020781686529517174D0 2.379999876022339D0)) (list (list 1.0D0 2314.3115234375D0 0.020252589136362076D0 2.3899998664855957D0)) (list (list 1.0D0 2314.566650390625D0 0.02006436698138714D0 2.3999998569488526D0)) (list (list 1.0D0 2314.53466796875D0 0.02037171646952629D0 2.4099998474121094D0)) (list (list 1.0D0 2314.361083984375D0 0.020811941474676132D0 2.419999837875366D0)) (list (list 1.0D0 2314.182861328125D0 0.021017329767346382D0 2.429999828338623D0)) (list (list 1.0D0 2313.93017578125D0 0.020859692245721817D0 2.440000057220459D0)) (list (list 1.0D0 2313.505859375D0 0.020343758165836334D0 2.450000047683716D0)) (list (list 1.0D0 2312.928955078125D0 0.0197843536734581D0 2.4600000381469727D0)) (list (list 1.0D0 2312.658935546875D0 0.01949196308851242D0 2.4700000286102295D0)) (list (list 1.0D0 2312.7822265625D0 0.019348811358213425D0 2.4800000190734864D0)) (list (list 1.0D0 2313.148193359375D0 0.019265076145529747D0 2.490000009536743D0)) (list (list 1.0D0 2313.51953125D0 0.019153032451868057D0 2.5D0)) (list (list 1.0D0 2313.588623046875D0 0.01892896741628647D0 2.509999990463257D0)) (list (list 1.0D0 2313.2978515625D0 0.018475625663995743D0 2.5199999809265137D0)) (list (list 1.0D0 2312.7998046875D0 0.017758941277861595D0 2.5299999713897705D0)) (list (list 1.0D0 2312.369140625D0 0.016881465911865235D0 2.5399999618530274D0)) (list (list 1.0D0 2312.3017578125D0 0.016031887382268906D0 2.549999952316284D0)) (list (list 1.0D0 2312.856689453125D0 0.015638306736946106D0 2.559999942779541D0)) (list (list 1.0D0 2313.453369140625D0 0.015798475593328476D0 2.569999933242798D0)) (list (list 1.0D0 2313.705322265625D0 0.01602163352072239D0 2.5799999237060547D0)) (list (list 1.0D0 2313.6669921875D0 0.016062570735812187D0 2.5899999141693116D0)) (list (list 1.0D0 2313.5390625D0 0.01578887365758419D0 2.5999999046325684D0)) (list (list 1.0D0 2313.666259765625D0 0.015328747220337391D0 2.609999895095825D0)) (list (list 1.0D0 2314.021240234375D0 0.01503527071326971D0 2.619999885559082D0)) (list (list 1.0D0 2314.448486328125D0 0.014981096610426903D0 2.629999876022339D0)) (list (list 1.0D0 2314.879150390625D0 0.015111412853002549D0 2.6399998664855957D0)) (list (list 1.0D0 2315.267333984375D0 0.015309196896851063D0 2.6499998569488526D0)) (list (list 1.0D0 2315.58447265625D0 0.01534220390021801D0 2.6599998474121094D0)) (list (list 1.0D0 2315.955810546875D0 0.015108476392924786D0 2.669999837875366D0)) (list (list 1.0D0 2316.37353515625D0 0.014815873466432095D0 2.679999828338623D0)) (list (list 1.0D0 2316.758056640625D0 0.014590892009437085D0 2.690000057220459D0)) (list (list 1.0D0 2316.99951171875D0 0.014520706608891487D0 2.700000047683716D0)) (list (list 1.0D0 2316.899658203125D0 0.014599005691707135D0 2.7100000381469727D0)) (list (list 1.0D0 2316.512939453125D0 0.01482617948204279D0 2.7200000286102295D0)) (list (list 1.0D0 2316.176025390625D0 0.015340156853199005D0 2.7300000190734864D0)) (list (list 1.0D0 2316.019287109375D0 0.016188669949769974D0 2.740000009536743D0)) (list (list 1.0D0 2316.0810546875D0 0.01731712371110916D0 2.75D0)) (list (list 1.0D0 2316.211181640625D0 0.018361903727054596D0 2.759999990463257D0)) (list (list 1.0D0 2316.209228515625D0 0.01864684745669365D0 2.7699999809265137D0)) (list (list 1.0D0 2316.1474609375D0 0.01819601282477379D0 2.7799999713897705D0)) (list (list 1.0D0 2316.069580078125D0 0.017255540937185288D0 2.7899999618530274D0)) (list (list 1.0D0 2316.00732421875D0 0.016178900375962258D0 2.799999952316284D0)) (list (list 1.0D0 2315.960205078125D0 0.015470116399228573D0 2.809999942779541D0)) (list (list 1.0D0 2315.97705078125D0 0.015317367389798165D0 2.819999933242798D0)) (list (list 1.0D0 2316.05615234375D0 0.015494572930037976D0 2.8299999237060547D0)) (list (list 1.0D0 2316.1708984375D0 0.015848135575652123D0 2.8399999141693116D0)) (list (list 1.0D0 2316.302978515625D0 0.01622084155678749D0 2.8499999046325684D0)) (list (list 1.0D0 2316.5048828125D0 0.016424719244241715D0 2.859999895095825D0)) (list (list 1.0D0 2316.796630859375D0 0.016415970399975777D0 2.869999885559082D0)) (list (list 1.0D0 2317.10205078125D0 0.016317833214998245D0 2.879999876022339D0)) (list (list 1.0D0 2317.334228515625D0 0.01617635414004326D0 2.8899998664855957D0)) (list (list 1.0D0 2317.381103515625D0 0.016015246510505677D0 2.8999998569488526D0)) (list (list 1.0D0 2316.9990234375D0 0.01580994389951229D0 2.9099998474121094D0)) (list (list 1.0D0 2316.41845703125D0 0.015586971305310727D0 2.919999837875366D0)) (list (list 1.0D0 2316.180419921875D0 0.015409067273139954D0 2.929999828338623D0)) (list (list 1.0D0 2316.35107421875D0 0.01533286739140749D0 2.93999981880188D0)) (list (list 1.0D0 2316.793701171875D0 0.015396425500512123D0 2.950000047683716D0)) (list (list 1.0D0 2316.97216796875D0 0.015591982752084732D0 2.9600000381469727D0)) (list (list 1.0D0 2316.744873046875D0 0.015710946172475815D0 2.9700000286102295D0)) (list (list 1.0D0 2316.476318359375D0 0.015756310895085335D0 2.9800000190734864D0)) (list (list 1.0D0 2316.248779296875D0 0.015789130702614784D0 2.990000009536743D0)) (list (list 1.0D0 2316.073974609375D0 0.01587274856865406D0 3.0D0)) (list (list 1.0D0 2315.8876953125D0 0.016035884618759156D0 3.009999990463257D0)) (list (list 1.0D0 2315.766845703125D0 0.016196200624108315D0 3.0199999809265137D0)) (list (list 1.0D0 2315.687255859375D0 0.01630396954715252D0 3.0299999713897705D0)) (list (list 1.0D0 2315.62255859375D0 0.01634160801768303D0 3.0399999618530274D0)) (list (list 1.0D0 2315.5693359375D0 0.0162971168756485D0 3.049999952316284D0)) (list (list 1.0D0 2315.62255859375D0 0.016138503327965737D0 3.059999942779541D0)) (list (list 1.0D0 2315.905517578125D0 0.015836691483855248D0 3.069999933242798D0)) (list (list 1.0D0 2316.212158203125D0 0.015471668913960457D0 3.0799999237060547D0)) (list (list 1.0D0 2316.39013671875D0 0.01515209674835205D0 3.0899999141693116D0)) (list (list 1.0D0 2316.37158203125D0 0.015009700320661068D0 3.0999999046325684D0)) (list (list 1.0D0 2316.355712890625D0 0.01527160033583641D0 3.109999895095825D0)) (list (list 1.0D0 2316.680908203125D0 0.015810055658221245D0 3.119999885559082D0)) (list (list 1.0D0 2317.060791015625D0 0.01627565175294876D0 3.129999876022339D0)) (list (list 1.0D0 2317.236083984375D0 0.016518322750926018D0 3.1399998664855957D0)) (list (list 1.0D0 2317.02392578125D0 0.0164805855602026D0 3.1499998569488526D0)) (list (list 1.0D0 2316.463623046875D0 0.016279106959700585D0 3.1599998474121094D0)) (list (list 1.0D0 2316.02978515625D0 0.01614518277347088D0 3.169999837875366D0)) (list (list 1.0D0 2315.91064453125D0 0.016004711389541626D0 3.179999828338623D0)) (list (list 1.0D0 2316.074462890625D0 0.01585046388208866D0 3.18999981880188D0)) (list (list 1.0D0 2316.388427734375D0 0.015716956928372383D0 3.1999998092651367D0)) (list (list 1.0D0 2316.5205078125D0 0.01575714536011219D0 3.2100000381469727D0)) (list (list 1.0D0 2316.29345703125D0 0.016054173931479454D0 3.2200000286102295D0)) (list (list 1.0D0 2315.945556640625D0 0.01638828217983246D0 3.2300000190734864D0)) (list (list 1.0D0 2315.650146484375D0 0.01658642664551735D0 3.240000009536743D0)) (list (list 1.0D0 2315.534423828125D0 0.016532052308321D0 3.25D0)) (list (list 1.0D0 2315.612060546875D0 0.016246933490037918D0 3.259999990463257D0)) (list (list 1.0D0 2315.589111328125D0 0.01591930352151394D0 3.2699999809265137D0)) (list (list 1.0D0 2315.37841796875D0 0.015561303123831749D0 3.2799999713897705D0)) (list (list 1.0D0 2315.09130859375D0 0.015110890381038189D0 3.2899999618530274D0)) (list (list 1.0D0 2314.90380859375D0 0.014515805058181286D0 3.299999952316284D0)) (list (list 1.0D0 2315.115234375D0 0.013770859688520432D0 3.309999942779541D0)) (list (list 1.0D0 2315.47998046875D0 0.0131008829921484D0 3.319999933242798D0)) (list (list 1.0D0 2315.572998046875D0 0.012615778483450413D0 3.3299999237060547D0)) (list (list 1.0D0 2315.38623046875D0 0.012408378534018994D0 3.3399999141693116D0)) (list (list 1.0D0 2315.0654296875D0 0.012542140670120716D0 3.3499999046325684D0)) (list (list 1.0D0 2315.037353515625D0 0.013056992553174496D0 3.359999895095825D0)) (list (list 1.0D0 2315.366943359375D0 0.013735656626522541D0 3.369999885559082D0)) (list (list 1.0D0 2315.614990234375D0 0.014337753877043724D0 3.379999876022339D0)) (list (list 1.0D0 2315.60693359375D0 0.014828219078481198D0 3.3899998664855957D0)) (list (list 1.0D0 2315.30078125D0 0.015220063738524914D0 3.3999998569488526D0)) (list (list 1.0D0 2314.918701171875D0 0.015569798648357392D0 3.4099998474121094D0)) (list (list 1.0D0 2314.7958984375D0 0.01564565673470497D0 3.419999837875366D0)) (list (list 1.0D0 2314.791015625D0 0.01536285039037466D0 3.429999828338623D0)) (list (list 1.0D0 2314.72314453125D0 0.014805483631789685D0 3.43999981880188D0)) (list (list 1.0D0 2314.476318359375D0 0.014134757220745087D0 3.4499998092651367D0)) (list (list 1.0D0 2314.137451171875D0 0.013650540262460709D0 3.4600000381469727D0)) (list (list 1.0D0 2314.221923828125D0 0.013442575000226498D0 3.4700000286102295D0)) (list (list 1.0D0 2314.601318359375D0 0.01332894153892994D0 3.4800000190734864D0)) (list (list 1.0D0 2314.9423828125D0 0.013218289241194725D0 3.490000009536743D0)) (list (list 1.0D0 2314.95068359375D0 0.013066957704722882D0 3.5D0)) (list (list 1.0D0 2314.496337890625D0 0.012941279448568821D0 3.509999990463257D0)) (list (list 1.0D0 2314.09130859375D0 0.012845325283706189D0 3.5199999809265137D0)) (list (list 1.0D0 2313.777099609375D0 0.01247999258339405D0 3.5299999713897705D0)) (list (list 1.0D0 2313.43310546875D0 0.011742813512682915D0 3.5399999618530274D0)) (list (list 1.0D0 2313.019287109375D0 0.010672708041965962D0 3.549999952316284D0)) (list (list 1.0D0 2312.793701171875D0 0.009600299410521984D0 3.559999942779541D0)) (list (list 1.0D0 2313.412841796875D0 0.00911128893494606D0 3.569999933242798D0)) (list (list 1.0D0 2314.3798828125D0 0.009246569126844406D0 3.5799999237060547D0)) (list (list 1.0D0 2315.0888671875D0 0.009846823289990425D0 3.5899999141693116D0)) (list (list 1.0D0 2315.093505859375D0 0.010695133358240128D0 3.5999999046325684D0)) (list (list 1.0D0 2314.3564453125D0 0.01153633464127779D0 3.609999895095825D0)) (list (list 1.0D0 2313.85400390625D0 0.012209409847855568D0 3.619999885559082D0)) (list (list 1.0D0 2313.836181640625D0 0.012536355294287205D0 3.629999876022339D0)) (list (list 1.0D0 2314.201416015625D0 0.012424382381141186D0 3.6399998664855957D0)) (list (list 1.0D0 2314.734130859375D0 0.011874507181346417D0 3.6499998569488526D0)) (list (list 1.0D0 2315.046142578125D0 0.011050928384065628D0 3.6599998474121094D0)) (list (list 1.0D0 2315.247314453125D0 0.010499226860702038D0 3.669999837875366D0)) (list (list 1.0D0 2315.606201171875D0 0.010305994190275669D0 3.679999828338623D0)) (list (list 1.0D0 2315.959716796875D0 0.010340124368667603D0 3.68999981880188D0)) (list (list 1.0D0 2316.101318359375D0 0.010448227636516095D0 3.6999998092651367D0)) (list (list 1.0D0 2315.806640625D0 0.010503608733415604D0 3.7099997997283936D0)) (list (list 1.0D0 2315.42138671875D0 0.010643772780895234D0 3.7200000286102295D0)) (list (list 1.0D0 2315.09130859375D0 0.010902111418545246D0 3.7300000190734864D0)) (list (list 1.0D0 2314.8720703125D0 0.011290166527032853D0 3.740000009536743D0)) (list (list 1.0D0 2314.836669921875D0 0.011795098893344403D0 3.75D0)) (list (list 1.0D0 2315.160400390625D0 0.012364194728434086D0 3.759999990463257D0)) (list (list 1.0D0 2315.639404296875D0 0.012815716676414013D0 3.7699999809265137D0)) (list (list 1.0D0 2315.731689453125D0 0.01301095262169838D0 3.7799999713897705D0)) (list (list 1.0D0 2315.439453125D0 0.01298506185412407D0 3.7899999618530274D0)) (list (list 1.0D0 2314.9404296875D0 0.01281245332211256D0 3.799999952316284D0)) (list (list 1.0D0 2314.686279296875D0 0.012597229331731797D0 3.809999942779541D0)) (list (list 1.0D0 2314.818115234375D0 0.01231600996106863D0 3.819999933242798D0)) (list (list 1.0D0 2314.99609375D0 0.012025794014334679D0 3.8299999237060547D0)) (list (list 1.0D0 2315.125244140625D0 0.011782366782426834D0 3.8399999141693116D0)) (list (list 1.0D0 2315.138916015625D0 0.011643876321613789D0 3.8499999046325684D0)) (list (list 1.0D0 2314.964599609375D0 0.011690188199281693D0 3.859999895095825D0)) (list (list 1.0D0 2314.65771484375D0 0.012001924216747284D0 3.869999885559082D0)) (list (list 1.0D0 2314.482666015625D0 0.012446937151253224D0 3.879999876022339D0)) (list (list 1.0D0 2314.509033203125D0 0.012874322943389416D0 3.8899998664855957D0)) (list (list 1.0D0 2314.70166015625D0 0.013159851543605328D0 3.8999998569488526D0)) (list (list 1.0D0 2314.8349609375D0 0.013231619261205197D0 3.9099998474121094D0)) (list (list 1.0D0 2314.78564453125D0 0.013233122415840626D0 3.919999837875366D0)) (list (list 1.0D0 2314.712158203125D0 0.013193681836128235D0 3.929999828338623D0)) (list (list 1.0D0 2314.623779296875D0 0.01302248053252697D0 3.93999981880188D0)) (list (list 1.0D0 2314.4736328125D0 0.01266445592045784D0 3.9499998092651367D0)) (list (list 1.0D0 2314.102783203125D0 0.012152563780546189D0 3.9599997997283936D0)) (list (list 1.0D0 2313.728515625D0 0.011820957995951176D0 3.9700000286102295D0)) (list (list 1.0D0 2313.634033203125D0 0.011777852661907673D0 3.9800000190734864D0)) (list (list 1.0D0 2313.756103515625D0 0.01198386587202549D0 3.990000009536743D0)) (list (list 1.0D0 2313.95166015625D0 0.012353358790278435D0 4.0D0)) (list (list 1.0D0 2313.970458984375D0 0.012745562940835953D0 4.009999752044678D0)) (list (list 1.0D0 2313.875732421875D0 0.012998281046748162D0 4.019999980926514D0)) (list (list 1.0D0 2313.9326171875D0 0.013129280880093575D0 4.029999732971191D0)) (list (list 1.0D0 2314.20751953125D0 0.013189604505896569D0 4.039999961853027D0)) (list (list 1.0D0 2314.64208984375D0 0.013228357769548893D0 4.049999713897705D0)) (list (list 1.0D0 2314.950439453125D0 0.01328064315021038D0 4.059999942779541D0)) (list (list 1.0D0 2314.48193359375D0 0.013361523859202862D0 4.069999694824219D0)) (list (list 1.0D0 2313.753173828125D0 0.01358266081660986D0 4.079999923706055D0)) (list (list 1.0D0 2313.162353515625D0 0.01387019269168377D0 4.089999675750732D0)) (list (list 1.0D0 2313.002197265625D0 0.014076925814151764D0 4.099999904632568D0)) (list (list 1.0D0 2313.404052734375D0 0.013914067298173905D0 4.110000133514404D0)) (list (list 1.0D0 2313.706787109375D0 0.013548584654927254D0 4.119999885559082D0)) (list (list 1.0D0 2313.73095703125D0 0.013534089550375939D0 4.130000114440918D0)) (list (list 1.0D0 2313.6064453125D0 0.014041713438928128D0 4.139999866485596D0)) (list (list 1.0D0 2313.484375D0 0.015033182688057423D0 4.150000095367432D0)) (list (list 1.0D0 2313.51171875D0 0.016138354316353798D0 4.159999847412109D0)) (list (list 1.0D0 2313.671630859375D0 0.016717061400413513D0 4.170000076293945D0)) (list (list 1.0D0 2313.878662109375D0 0.016806581988930702D0 4.179999828338623D0)) (list (list 1.0D0 2314.0654296875D0 0.016579657793045044D0 4.190000057220459D0)) (list (list 1.0D0 2314.166748046875D0 0.016250887885689736D0 4.199999809265137D0)) (list (list 1.0D0 2314.111572265625D0 0.016092296689748764D0 4.210000038146973D0)) (list (list 1.0D0 2313.85986328125D0 0.01604272611439228D0 4.21999979019165D0)) (list (list 1.0D0 2313.302734375D0 0.0156850703060627D0 4.230000019073486D0)) (list (list 1.0D0 2312.661865234375D0 0.014984282664954663D0 4.239999771118164D0)) (list (list 1.0D0 2312.239501953125D0 0.014071902260184288D0 4.25D0)) (list (list 1.0D0 2312.4833984375D0 0.013344665989279747D0 4.259999752044678D0)) (list (list 1.0D0 2313.040771484375D0 0.013026803731918335D0 4.269999980926514D0)) (list (list 1.0D0 2313.152099609375D0 0.012587519362568856D0 4.279999732971191D0)) (list (list 1.0D0 2312.91845703125D0 0.01200445182621479D0 4.289999961853027D0)) (list (list 1.0D0 2312.571533203125D0 0.011424337513744831D0 4.299999713897705D0)) (list (list 1.0D0 2312.4775390625D0 0.011265630833804608D0 4.309999942779541D0)) (list (list 1.0D0 2312.197021484375D0 0.01142953708767891D0 4.319999694824219D0)) (list (list 1.0D0 2311.797607421875D0 0.011248691938817501D0 4.329999923706055D0)) (list (list 1.0D0 2311.702880859375D0 0.010594077408313752D0 4.339999675750732D0)) (list (list 1.0D0 2312.151123046875D0 0.009556859731674195D0 4.349999904632568D0)) (list (list 1.0D0 2313.03759765625D0 0.008551467210054398D0 4.360000133514404D0)) (list (list 1.0D0 2313.128662109375D0 0.0080772889778018D0 4.369999885559082D0)) (list (list 1.0D0 2312.47314453125D0 0.008004724979400635D0 4.380000114440918D0)) (list (list 1.0D0 2311.504150390625D0 0.008185404352843762D0 4.389999866485596D0)) (list (list 1.0D0 2310.604248046875D0 0.008446385152637959D0 4.400000095367432D0)) (list (list 1.0D0 2310.02880859375D0 0.008574461564421654D0 4.409999847412109D0)) (list (list 1.0D0 2310.3134765625D0 0.008624338544905186D0 4.420000076293945D0)) (list (list 1.0D0 2311.20068359375D0 0.00884584616869688D0 4.429999828338623D0)) (list (list 1.0D0 2312.037353515625D0 0.009273326024413109D0 4.440000057220459D0)) (list (list 1.0D0 2312.268798828125D0 0.009888392873108387D0 4.449999809265137D0)) (list (list 1.0D0 2311.493408203125D0 0.010615958832204342D0 4.460000038146973D0)) (list (list 1.0D0 2311.045166015625D0 0.011562342755496502D0 4.46999979019165D0)) (list (list 1.0D0 2311.010498046875D0 0.01233653910458088D0 4.480000019073486D0)) (list (list 1.0D0 2310.947998046875D0 0.01267156656831503D0 4.489999771118164D0)) (list (list 1.0D0 2310.601806640625D0 0.012462428770959378D0 4.5D0)) (list (list 1.0D0 2310.067626953125D0 0.011831234209239483D0 4.509999752044678D0)) (list (list 1.0D0 2310.10009765625D0 0.011414461769163609D0 4.519999980926514D0)) (list (list 1.0D0 2310.31591796875D0 0.0113581083714962D0 4.529999732971191D0)) (list (list 1.0D0 2310.3935546875D0 0.011508047580718995D0 4.539999961853027D0)) (list (list 1.0D0 2310.226806640625D0 0.011731878854334355D0 4.549999713897705D0)) (list (list 1.0D0 2310.055419921875D0 0.011964840814471245D0 4.559999942779541D0)) (list (list 1.0D0 2310.23486328125D0 0.01237915363162756D0 4.569999694824219D0)) (list (list 1.0D0 2310.534912109375D0 0.012765570543706417D0 4.579999923706055D0)) (list (list 1.0D0 2310.80908203125D0 0.012807163409888745D0 4.589999675750732D0)) (list (list 1.0D0 2310.879150390625D0 0.012291928753256798D0 4.599999904632568D0)) (list (list 1.0D0 2310.487060546875D0 0.011145265772938729D0 4.610000133514404D0)) (list (list 1.0D0 2309.777099609375D0 0.010040960274636746D0 4.619999885559082D0)) (list (list 1.0D0 2309.314208984375D0 0.009392836131155491D0 4.630000114440918D0)) (list (list 1.0D0 2309.320068359375D0 0.009112573228776455D0 4.639999866485596D0)) (list (list 1.0D0 2309.819091796875D0 0.009033871814608574D0 4.650000095367432D0)) (list (list 1.0D0 2310.574951171875D0 0.008910906501114369D0 4.659999847412109D0)) (list (list 1.0D0 2310.924072265625D0 0.00867967028170824D0 4.670000076293945D0)) (list (list 1.0D0 2310.802001953125D0 0.00862346775829792D0 4.679999828338623D0)) (list (list 1.0D0 2310.492919921875D0 0.008876267820596695D0 4.690000057220459D0)) (list (list 1.0D0 2310.301513671875D0 0.00946350023150444D0 4.699999809265137D0)) (list (list 1.0D0 2310.556396484375D0 0.010271260514855385D0 4.710000038146973D0)) (list (list 1.0D0 2310.9951171875D0 0.011109882965683937D0 4.71999979019165D0)) (list (list 1.0D0 2311.131591796875D0 0.011884398758411408D0 4.730000019073486D0)) (list (list 1.0D0 2311.063232421875D0 0.012528294697403908D0 4.739999771118164D0)) (list (list 1.0D0 2310.97119140625D0 0.012961813248693943D0 4.75D0)) (list (list 1.0D0 2311.130859375D0 0.01306705642491579D0 4.759999752044678D0)) (list (list 1.0D0 2311.13916015625D0 0.012610850855708123D0 4.769999980926514D0)) (list (list 1.0D0 2310.495849609375D0 0.01172767672687769D0 4.779999732971191D0)) (list (list 1.0D0 2309.7099609375D0 0.01058774534612894D0 4.789999961853027D0)) (list (list 1.0D0 2309.410400390625D0 0.009374105371534825D0 4.799999713897705D0)) (list (list 1.0D0 2310.395263671875D0 0.008287432603538037D0 4.809999942779541D0)) (list (list 1.0D0 2311.990478515625D0 0.007885514758527279D0 4.819999694824219D0)) (list (list 1.0D0 2312.6416015625D0 0.007855432108044625D0 4.829999923706055D0)) (list (list 1.0D0 2312.37353515625D0 0.00792003609240055D0 4.839999675750732D0)) (list (list 1.0D0 2311.4287109375D0 0.007851650007069111D0 4.849999904632568D0)) (list (list 1.0D0 2310.25732421875D0 0.007479983381927013D0 4.859999656677246D0)) (list (list 1.0D0 2310.369140625D0 0.007047008723020554D0 4.869999885559082D0)) (list (list 1.0D0 2310.656494140625D0 0.007099762558937073D0 4.880000114440918D0)) (list (list 1.0D0 2310.566650390625D0 0.007565914187580347D0 4.889999866485596D0)) (list (list 1.0D0 2310.03369140625D0 0.008214154280722142D0 4.900000095367432D0)) (list (list 1.0D0 2309.632568359375D0 0.008618113584816456D0 4.909999847412109D0)) (list (list 1.0D0 2310.54638671875D0 0.008659513667225838D0 4.920000076293945D0)) (list (list 1.0D0 2311.820556640625D0 0.008994459174573422D0 4.929999828338623D0)) (list (list 1.0D0 2313.082275390625D0 0.009630928747355938D0 4.940000057220459D0)) (list (list 1.0D0 2313.7900390625D0 0.010317794978618622D0 4.949999809265137D0)) (list (list 1.0D0 2313.1064453125D0 0.01046792697161436D0 4.960000038146973D0)) (list (list 1.0D0 2310.335205078125D0 0.01009342074394226D0 4.96999979019165D0)) (list (list 1.0D0 2308.666015625D0 0.010187549516558648D0 4.980000019073486D0)) (list (list 1.0D0 2308.484130859375D0 0.010594626888632775D0 4.989999771118164D0)) (list (list 1.0D0 2309.861572265625D0 0.011030084453523159D0 5.0D0)) (list (list 1.0D0 2312.616455078125D0 0.011072098277509213D0 5.009999752044678D0)) (list (list 1.0D0 2314.535400390625D0 0.009454065933823586D0 5.019999980926514D0)) (list (list 1.0D0 2320.197998046875D0 0.0070015015080571175D0 5.029999732971191D0)) (list (list 1.0D0 2325.537841796875D0 0.0050241779536008835D0 5.039999961853027D0)) (list (list 1.0D0 2327.8974609375D0 0.004010271746665239D0 5.049999713897705D0)) (list (list 1.0D0 2326.57568359375D0 0.003402794012799859D0 5.059999942779541D0)) (list (list 1.0D0 2337.856689453125D0 0.0021386484149843455D0 5.069999694824219D0)) (list (list 1.0D0 2338.943603515625D0 0.0011529859621077776D0 5.079999923706055D0)) (list (list 1.0D0 2343.655029296875D0 0.0011365028331056238D0 5.089999675750732D0)) (list (list 1.0D0 2357.061767578125D0 0.0017212247475981713D0 5.099999904632568D0)) (list (list 1.0D0 2372.4775390625D0 0.0012121311156079174D0 5.109999656677246D0)) (list (list 1.0D0 2374.13330078125D0 9.212747681885958D-4 5.119999885559082D0)) (list (list 1.0D0 2375.534423828125D0 6.344569846987724D-4 5.130000114440918D0)) (list (list 1.0D0 2385.5712890625D0 4.885359667241573D-4 5.139999866485596D0)) (list (list 1.0D0 2402.083984375D0 5.574425449594855D-4 5.150000095367432D0)) (list (list 1.0D0 2409.50927734375D0 8.364571840502322D-4 5.159999847412109D0)) (list (list 1.0D0 2411.78466796875D0 8.768584812059999D-4 5.170000076293945D0)) (list (list 1.0D0 2417.77099609375D0 8.040062384679914D-4 5.179999828338623D0)) (list (list 1.0D0 2422.83935546875D0 6.57359603792429D-4 5.190000057220459D0)) (list (list 1.0D0 2425.714111328125D0 4.787810321431607D-4 5.199999809265137D0)) (list (list 1.0D0 2429.34912109375D0 3.1452352413907647D-4 5.210000038146973D0)) (list (list 1.0D0 2430.960693359375D0 3.2982596894726157D-4 5.21999979019165D0)) (list (list 1.0D0 2433.374267578125D0 4.3983643990941346D-4 5.230000019073486D0)) (list (list 1.0D0 2439.36083984375D0 6.03396852966398D-4 5.239999771118164D0)) (list (list 1.0D0 2446.91259765625D0 7.540383958257735D-4 5.25D0)) (list (list 1.0D0 2448.448486328125D0 7.938999915495515D-4 5.259999752044678D0)) (list (list 1.0D0 2450.096435546875D0 7.106674020178616D-4 5.269999980926514D0)) (list (list 1.0D0 2453.5322265625D0 5.609236541204155D-4 5.279999732971191D0)) (list (list 1.0D0 2456.787353515625D0 4.0595707832835615D-4 5.289999961853027D0)) (list (list 1.0D0 2454.52099609375D0 3.008254279848188D-4 5.299999713897705D0)) (list (list 1.0D0 2437.47265625D0 2.9474313487298787D-4 5.309999942779541D0)) (list (list 1.0D0 2440.43994140625D0 3.859194985125214D-4 5.319999694824219D0)) (list (list 1.0D0 2439.9462890625D0 4.3379756971262396D-4 5.329999923706055D0)) (list (list 1.0D0 2449.65478515625D0 4.416383453644812D-4 5.339999675750732D0)) (list (list 1.0D0 2465.804931640625D0 4.2168068466708064D-4 5.349999904632568D0)) (list (list 1.0D0 2465.089599609375D0 3.9430666947737336D-4 5.359999656677246D0)) (list (list 1.0D0 2463.89892578125D0 3.434460377320647D-4 5.369999885559082D0)) (list (list 1.0D0 2446.855224609375D0 3.298308583907783D-4 5.380000114440918D0)) (list (list 1.0D0 2432.166748046875D0 3.6965261097066105D-4 5.389999866485596D0)) (list (list 1.0D0 2428.444580078125D0 4.254281520843506D-4 5.400000095367432D0)) (list (list 1.0D0 2433.889892578125D0 4.0249896119348705D-4 5.409999847412109D0)) (list (list 1.0D0 2439.00244140625D0 3.936600696761161D-4 5.420000076293945D0)) (list (list 1.0D0 2443.685791015625D0 3.891291271429509D-4 5.429999828338623D0)) (list (list 1.0D0 2446.946533203125D0 3.716978244483471D-4 5.440000057220459D0)) (list (list 1.0D0 2448.142578125D0 3.343649732414633D-4 5.449999809265137D0)) (list (list 1.0D0 2446.994873046875D0 2.8069395921193063D-4 5.460000038146973D0)) (list (list 1.0D0 2425.4296875D0 3.7767228786833585D-4 5.46999979019165D0)) (list (list 1.0D0 2420.25D0 4.860889748670161D-4 5.480000019073486D0)) (list (list 1.0D0 2419.954345703125D0 5.28473115991801D-4 5.489999771118164D0)) (list (list 1.0D0 2418.375D0 4.8647745279595256D-4 5.5D0)) (list (list 1.0D0 2414.880859375D0 4.0143803926184774D-4 5.509999752044678D0)) (list (list 1.0D0 2411.8876953125D0 4.3386846664361656D-4 5.519999980926514D0)) (list (list 1.0D0 2395.4755859375D0 6.324940477497876D-4 5.529999732971191D0)) (list (list 1.0D0 2380.7060546875D0 8.826678968034685D-4 5.539999961853027D0)) (list (list 1.0D0 2372.013427734375D0 0.0011291506234556437D0 5.549999713897705D0)) (list (list 1.0D0 2363.344970703125D0 0.0013751331716775895D0 5.559999942779541D0)) (list (list 1.0D0 2365.679443359375D0 0.0013931909343227745D0 5.569999694824219D0)) (list (list 1.0D0 2366.176513671875D0 0.0012929207878187299D0 5.579999923706055D0)) (list (list 1.0D0 2365.990478515625D0 0.0012280759401619435D0 5.589999675750732D0)) (list (list 1.0D0 2365.851806640625D0 0.0012688256101682783D0 5.599999904632568D0)) (list (list 1.0D0 2366.11474609375D0 0.0014037111541256309D0 5.609999656677246D0)) (list (list 1.0D0 2373.02197265625D0 0.0013639938551932574D0 5.619999885559082D0)) (list (list 1.0D0 2376.56640625D0 0.0013198385713621974D0 5.62999963760376D0)) (list (list 1.0D0 2376.906005859375D0 0.0012199993943795562D0 5.639999866485596D0)) (list (list 1.0D0 2373.332275390625D0 0.0011377839837223292D0 5.650000095367432D0)) (list (list 1.0D0 2364.469970703125D0 0.001260741031728685D0 5.659999847412109D0)) (list (list 1.0D0 2365.577392578125D0 0.001397202955558896D0 5.670000076293945D0)) (list (list 1.0D0 2366.777587890625D0 0.0014574374072253704D0 5.679999828338623D0)) (list (list 1.0D0 2367.468505859375D0 0.0014312408166006208D0 5.690000057220459D0)) (list (list 1.0D0 2366.839599609375D0 0.0013173563638702035D0 5.699999809265137D0)) (list (list 1.0D0 2363.920654296875D0 0.0011242675827816129D0 5.710000038146973D0)) (list (list 1.0D0 2361.001708984375D0 9.311880567111075D-4 5.71999979019165D0)) (list (list 1.0D0 2371.649169921875D0 7.92932987678796D-4 5.730000019073486D0)) (list (list 1.0D0 2375.84326171875D0 8.187653147615492D-4 5.739999771118164D0)) (list (list 1.0D0 2371.515869140625D0 9.155382285825908D-4 5.75D0)) (list (list 1.0D0 2372.316162109375D0 8.13054561149329D-4 5.759999752044678D0)) (list (list 1.0D0 2376.400146484375D0 6.23417436145246D-4 5.769999980926514D0)) (list (list 1.0D0 2377.851318359375D0 4.992489120922983D-4 5.779999732971191D0)) (list (list 1.0D0 2377.009765625D0 4.595183418132365D-4 5.789999961853027D0)) (list (list 1.0D0 2380.62548828125D0 4.74107131594792D-4 5.799999713897705D0)) (list (list 1.0D0 2400.32275390625D0 4.7114622429944575D-4 5.809999942779541D0)) (list (list 1.0D0 2396.287109375D0 5.282692145556212D-4 5.819999694824219D0)) (list (list 1.0D0 2399.063720703125D0 4.8754713498055935D-4 5.829999923706055D0)) (list (list 1.0D0 2403.596435546875D0 4.3066972284577787D-4 5.839999675750732D0)) (list (list 1.0D0 2409.853271484375D0 4.088237474206835D-4 5.849999904632568D0)) (list (list 1.0D0 2421.603759765625D0 4.462925426196307D-4 5.859999656677246D0)) (list (list 1.0D0 2421.9228515625D0 4.189209721516818D-4 5.869999885559082D0)) (list (list 1.0D0 2416.5859375D0 3.747324808500707D-4 5.87999963760376D0)) (list (list 1.0D0 2423.433837890625D0 3.424869501031935D-4 5.889999866485596D0)) (list (list 1.0D0 2436.382080078125D0 3.3369235461577773D-4 5.900000095367432D0)) (list (list 1.0D0 2430.51953125D0 3.463461180217564D-4 5.909999847412109D0)) (list (list 1.0D0 2427.842529296875D0 4.087132983841002D-4 5.920000076293945D0)) (list (list 1.0D0 2406.130859375D0 4.453771107364446D-4 5.929999828338623D0)) (list (list 1.0D0 2388.810791015625D0 4.407599044498056D-4 5.940000057220459D0)) (list (list 1.0D0 2388.349853515625D0 3.646682598628104D-4 5.949999809265137D0)) (list (list 1.0D0 2407.40283203125D0 1.8425486632622779D-4 5.960000038146973D0)) (list (list 1.0D0 2390.25341796875D0 2.458134258631617D-4 5.96999979019165D0)) (list (list 1.0D0 2373.993896484375D0 4.4917233753949404D-4 5.980000019073486D0)) (list (list 1.0D0 2370.447509765625D0 5.688969395123422D-4 5.989999771118164D0)) (list (list 1.0D0 2378.321533203125D0 5.732601275667548D-4 6.0D0)) (list (list 1.0D0 2386.0546875D0 5.810168804600835D-4 6.009999752044678D0)) (list (list 1.0D0 2387.720947265625D0 7.352206157520413D-4 6.019999980926514D0)) (list (list 1.0D0 2385.90966796875D0 8.778176852501929D-4 6.029999732971191D0)) (list (list 1.0D0 2382.2275390625D0 0.0010398225858807564D0 6.039999961853027D0)) (list (list 1.0D0 2377.860595703125D0 0.0011988322949036956D0 6.049999713897705D0)) (list (list 1.0D0 2373.43212890625D0 0.0013074687449261547D0 6.059999942779541D0)) (list (list 1.0D0 2357.364501953125D0 0.0018993362318724394D0 6.069999694824219D0)) (list (list 1.0D0 2352.743408203125D0 0.0020021626260131598D0 6.079999923706055D0)) (list (list 1.0D0 2350.909912109375D0 0.0018817847594618798D0 6.089999675750732D0)) (list (list 1.0D0 2349.357421875D0 0.0017022010870277882D0 6.099999904632568D0)) (list (list 1.0D0 2349.896728515625D0 0.0015625511296093464D0 6.109999656677246D0)) (list (list 1.0D0 2354.564453125D0 0.001512116752564907D0 6.119999885559082D0)) (list (list 1.0D0 2358.76123046875D0 0.0015110806562006474D0 6.12999963760376D0)) (list (list 1.0D0 2361.5869140625D0 0.0014941631816327572D0 6.139999866485596D0)) (list (list 1.0D0 2362.86767578125D0 0.0014680628664791584D0 6.150000095367432D0)) (list (list 1.0D0 2362.8828125D0 0.001485092332586646D0 6.159999847412109D0)) (list (list 1.0D0 2358.75537109375D0 0.001423982554115355D0 6.170000076293945D0)) (list (list 1.0D0 2353.75048828125D0 0.0014252335531637073D0 6.179999828338623D0)) (list (list 1.0D0 2352.359619140625D0 0.0013777698623016477D0 6.190000057220459D0)) (list (list 1.0D0 2355.591552734375D0 0.001301037846133113D0 6.199999809265137D0)) (list (list 1.0D0 2361.95263671875D0 0.0013032159768044949D0 6.210000038146973D0)) (list (list 1.0D0 2369.635986328125D0 0.0014211944071576D0 6.21999979019165D0)) (list (list 1.0D0 2372.336181640625D0 0.0013706646859645844D0 6.230000019073486D0)) (list (list 1.0D0 2372.65771484375D0 0.0012930149678140879D0 6.239999771118164D0)) (list (list 1.0D0 2370.81494140625D0 0.001257839729078114D0 6.25D0)) (list (list 1.0D0 2365.7880859375D0 0.0012850310886278749D0 6.259999752044678D0)) (list (list 1.0D0 2363.335693359375D0 0.001278169802390039D0 6.269999980926514D0)) (list (list 1.0D0 2364.766357421875D0 0.0011134038213640452D0 6.279999732971191D0)) (list (list 1.0D0 2368.041015625D0 9.62664489634335D-4 6.289999961853027D0)) (list (list 1.0D0 2371.991943359375D0 8.983107982203364D-4 6.299999713897705D0)) (list (list 1.0D0 2375.7529296875D0 9.20687394682318D-4 6.309999942779541D0)) (list (list 1.0D0 2374.43115234375D0 8.211330859921873D-4 6.319999694824219D0)) (list (list 1.0D0 2370.625244140625D0 7.876385934650898D-4 6.329999923706055D0)) (list (list 1.0D0 2380.05712890625D0 7.334520923905075D-4 6.339999675750732D0)) (list (list 1.0D0 2395.29736328125D0 6.857007974758744D-4 6.349999904632568D0)) (list (list 1.0D0 2395.212158203125D0 7.291528163477778D-4 6.359999656677246D0)) (list (list 1.0D0 2393.229736328125D0 6.013383390381932D-4 6.369999885559082D0)) (list (list 1.0D0 2393.012939453125D0 4.218900285195559D-4 6.37999963760376D0)) (list (list 1.0D0 2404.52197265625D0 3.2418957562185824D-4 6.389999866485596D0)) (list (list 1.0D0 2418.0185546875D0 2.9877646011300385D-4 6.399999618530273D0)) (list (list 1.0D0 2413.064453125D0 2.5356592959724367D-4 6.409999847412109D0)) (list (list 1.0D0 2411.915771484375D0 2.733052533585578D-4 6.420000076293945D0)) (list (list 1.0D0 2415.84912109375D0 2.737853501457721D-4 6.429999828338623D0)) (list (list 1.0D0 2422.56982421875D0 2.9451047885231674D-4 6.440000057220459D0)) (list (list 1.0D0 2428.526611328125D0 3.246882406529039D-4 6.449999809265137D0)) (list (list 1.0D0 2429.689208984375D0 3.2450995058752597D-4 6.460000038146973D0)) (list (list 1.0D0 2431.11181640625D0 2.919166872743517D-4 6.46999979019165D0)) (list (list 1.0D0 2432.78515625D0 3.029635699931532D-4 6.480000019073486D0)) (list (list 1.0D0 2434.9619140625D0 3.639338247012347D-4 6.489999771118164D0)) (list (list 1.0D0 2436.035400390625D0 4.437546303961426D-4 6.5D0)) (list (list 1.0D0 2433.483642578125D0 4.904135130345821D-4 6.509999752044678D0)) (list (list 1.0D0 2428.658447265625D0 5.169213400222361D-4 6.519999980926514D0)) (list (list 1.0D0 2423.31298828125D0 5.662738112732768D-4 6.529999732971191D0)) (list (list 1.0D0 2422.489013671875D0 5.60002401471138D-4 6.539999961853027D0)) (list (list 1.0D0 2425.60888671875D0 4.98879817314446D-4 6.549999713897705D0)) (list (list 1.0D0 2428.8564453125D0 4.3017411371693015D-4 6.559999942779541D0)) (list (list 1.0D0 2430.82666015625D0 3.9116371772252023D-4 6.569999694824219D0)) (list (list 1.0D0 2432.05419921875D0 3.5270510124973953D-4 6.579999923706055D0)) (list (list 1.0D0 2431.172119140625D0 3.0855712248012424D-4 6.589999675750732D0)) (list (list 1.0D0 2429.4970703125D0 2.6909643202088773D-4 6.599999904632568D0)) (list (list 1.0D0 2429.7578125D0 2.5624444242566824D-4 6.609999656677246D0)) (list (list 1.0D0 2431.795166015625D0 3.2736180583015084D-4 6.619999885559082D0)) (list (list 1.0D0 2431.83447265625D0 4.441390046849847D-4 6.62999963760376D0)) (list (list 1.0D0 2429.611328125D0 5.710683763027191D-4 6.639999866485596D0)) (list (list 1.0D0 2427.01416015625D0 6.758777308277786D-4 6.649999618530273D0)) (list (list 1.0D0 2426.9892578125D0 7.287118351086974D-4 6.659999847412109D0)) (list (list 1.0D0 2428.9169921875D0 7.252116338349879D-4 6.670000076293945D0)) (list (list 1.0D0 2430.684814453125D0 7.266364991664887D-4 6.679999828338623D0)) (list (list 1.0D0 2431.597900390625D0 6.9789047120139D-4 6.690000057220459D0)) (list (list 1.0D0 2431.939208984375D0 6.22995721641928D-4 6.699999809265137D0)) (list (list 1.0D0 2432.50732421875D0 5.021014949306846D-4 6.710000038146973D0)) (list (list 1.0D0 2433.57861328125D0 4.105684638489038D-4 6.71999979019165D0)) (list (list 1.0D0 2433.698974609375D0 4.1157592204399407D-4 6.730000019073486D0)) (list (list 1.0D0 2433.513916015625D0 4.88899415358901D-4 6.739999771118164D0)) (list (list 1.0D0 2433.46728515625D0 6.148112006485462D-4 6.75D0)) (list (list 1.0D0 2433.8251953125D0 7.487222319468856D-4 6.759999752044678D0)) (list (list 1.0D0 2433.45361328125D0 8.098325924947858D-4 6.769999980926514D0)) (list (list 1.0D0 2431.46630859375D0 7.878266042098403D-4 6.779999732971191D0)) (list (list 1.0D0 2429.609619140625D0 7.270557107403874D-4 6.789999961853027D0)) (list (list 1.0D0 2428.515869140625D0 6.672365707345307D-4 6.799999713897705D0)) (list (list 1.0D0 2428.224609375D0 6.474535330198705D-4 6.809999942779541D0)) (list (list 1.0D0 2428.098388671875D0 6.959009915590286D-4 6.819999694824219D0)) (list (list 1.0D0 2428.7275390625D0 7.593246409669519D-4 6.829999923706055D0)) (list (list 1.0D0 2430.13037109375D0 7.902222569100559D-4 6.839999675750732D0)) (list (list 1.0D0 2432.986083984375D0 7.619377574883401D-4 6.849999904632568D0)) (list (list 1.0D0 2437.99853515625D0 6.695131305605173D-4 6.859999656677246D0)) (list (list 1.0D0 2442.568603515625D0 6.438332493416965D-4 6.869999885559082D0)) (list (list 1.0D0 2443.899658203125D0 6.520158494822681D-4 6.87999963760376D0)) (list (list 1.0D0 2441.646484375D0 6.60342862829566D-4 6.889999866485596D0)) (list (list 1.0D0 2437.69091796875D0 6.621737848035991D-4 6.899999618530273D0)) (list (list 1.0D0 2435.07666015625D0 6.579081527888775D-4 6.909999847412109D0)) (list (list 1.0D0 2435.973876953125D0 5.797880585305393D-4 6.920000076293945D0)) (list (list 1.0D0 2437.238525390625D0 5.205335910432041D-4 6.929999828338623D0)) (list (list 1.0D0 2437.21484375D0 4.704178136307746D-4 6.940000057220459D0)) (list (list 1.0D0 2433.80029296875D0 4.3958629248663783D-4 6.949999809265137D0)) (list (list 1.0D0 2425.832275390625D0 4.463104996830225D-4 6.960000038146973D0)) (list (list 1.0D0 2425.180419921875D0 5.064703291282058D-4 6.96999979019165D0)) (list (list 1.0D0 2426.626220703125D0 5.559654673561454D-4 6.980000019073486D0)) (list (list 1.0D0 2429.3662109375D0 5.916007212363184D-4 6.989999771118164D0)) (list (list 1.0D0 2433.002685546875D0 5.987007170915604D-4 7.0D0)) (list (list 1.0D0 2437.0029296875D0 5.636005662381649D-4 7.009999752044678D0)) (list (list 1.0D0 2438.08984375D0 5.330028361640871D-4 7.019999980926514D0)) (list (list 1.0D0 2437.4052734375D0 5.637810099869967D-4 7.029999732971191D0)) (list (list 1.0D0 2435.615478515625D0 6.411222857423127D-4 7.039999961853027D0)) (list (list 1.0D0 2433.34130859375D0 7.209258619695902D-4 7.049999713897705D0)) (list (list 1.0D0 2431.134765625D0 7.450177799910307D-4 7.059999942779541D0)) (list (list 1.0D0 2428.265380859375D0 6.649901042692363D-4 7.069999694824219D0)) (list (list 1.0D0 2424.02294921875D0 5.155248218216002D-4 7.079999923706055D0)) (list (list 1.0D0 2415.170654296875D0 3.6469945916906D-4 7.089999675750732D0)) (list (list 1.0D0 2404.667236328125D0 2.4174842110369355D-4 7.099999904632568D0)) (list (list 1.0D0 2397.497802734375D0 1.5573593555018306D-4 7.109999656677246D0)) (list (list 1.0D0 2390.327880859375D0 6.97193609084934D-5 7.119999885559082D0)) (list (list 1.0D0 2378.87841796875D0 4.2483388824621216D-5 7.12999963760376D0)) (list (list 1.0D0 2374.251708984375D0 4.153177360421978D-5 7.139999866485596D0)) (list (list 1.0D0 2376.121337890625D0 4.80442467960529D-5 7.149999618530273D0)) (list (list 1.0D0 2379.693359375D0 4.878154140897095D-5 7.159999847412109D0)) (list (list 1.0D0 2385.18212890625D0 4.728872954729013D-5 7.170000076293945D0)) (list (list 1.0D0 2387.8349609375D0 4.482470467337407D-5 7.179999828338623D0)) (list (list 1.0D0 2389.808349609375D0 4.00647877540905D-5 7.190000057220459D0)) (list (list 1.0D0 2396.21142578125D0 3.69423178199213D-5 7.199999809265137D0)) (list (list 1.0D0 2411.87451171875D0 4.037164035253227D-5 7.210000038146973D0)) (list (list 1.0D0 2427.53662109375D0 4.3800799176096916D-5 7.21999979019165D0)) (list (list 1.0D0 2429.54296875D0 4.0803679439704865D-5 7.230000019073486D0)) (list (list 1.0D0 2429.189697265625D0 2.0938558009220287D-5 7.239999771118164D0)) (list (list 2.0D0 2260.09375D0 1.1944360448978841D-4 0.0D0)) (list (list 2.0D0 2260.20849609375D0 1.677207474131137D-4 0.009999999776482582D0)) (list (list 2.0D0 2260.037109375D0 1.9517909095156938D-4 0.019999999552965164D0)) (list (list 2.0D0 2260.1591796875D0 2.0714868151117116D-4 0.029999999329447747D0)) (list (list 2.0D0 2260.77197265625D0 2.114342787535861D-4 0.03999999910593033D0)) (list (list 2.0D0 2261.689697265625D0 2.18179018702358D-4 0.04999999701976776D0)) (list (list 2.0D0 2259.8955078125D0 1.985722192330286D-4 0.05999999865889549D0)) (list (list 2.0D0 2250.316162109375D0 2.0259105076547712D-4 0.07000000029802323D0)) (list (list 2.0D0 2240.801513671875D0 2.5226076832041145D-4 0.07999999821186066D0)) (list (list 2.0D0 2239.093017578125D0 2.814911713358015D-4 0.08999999612569809D0)) (list (list 2.0D0 2252.695556640625D0 1.4137527614366263D-4 0.09999999403953552D0)) (list (list 2.0D0 2260.888916015625D0 1.1201043525943533D-4 0.10999999940395355D0)) (list (list 2.0D0 2268.889404296875D0 1.6316045366693288D-4 0.11999999731779099D0)) (list (list 2.0D0 2264.771484375D0 2.508875622879714D-4 0.12999999523162842D0)) (list (list 2.0D0 2255.662109375D0 3.800834820140153D-4 0.14000000059604645D0)) (list (list 2.0D0 2266.2734375D0 5.999558488838375D-4 0.14999999105930328D0)) (list (list 2.0D0 2276.884521484375D0 8.198285358957946D-4 0.1599999964237213D0)) (list (list 2.0D0 2260.466796875D0 6.676755147054791D-4 0.17000000178813934D0)) (list (list 2.0D0 2261.629150390625D0 5.726444651372731D-4 0.17999999225139618D0)) (list (list 2.0D0 2268.607177734375D0 0.00404021330177784D0 0.1899999976158142D0)) (list (list 2.0D0 2220.025634765625D0 0.0169962327927351D0 0.19999998807907105D0)) (list (list 2.0D0 2244.845703125D0 0.003658203175291419D0 0.20999999344348908D0)) (list (list 2.0D0 2255.10888671875D0 5.225020577199757D-4 0.2199999988079071D0)) (list (list 2.0D0 2260.76611328125D0 6.15004391875118D-4 0.22999998927116394D0)) (list (list 2.0D0 2265.208984375D0 7.358421571552753D-4 0.23999999463558197D0)) (list (list 2.0D0 2266.155517578125D0 9.355429210700095D-4 0.25D0)) (list (list 2.0D0 2262.502685546875D0 0.0010077853221446276D0 0.25999999046325684D0)) (list (list 2.0D0 2271.1103515625D0 6.981816841289401D-4 0.26999998092651367D0)) (list (list 2.0D0 2280.1474609375D0 5.083713913336396D-4 0.2800000011920929D0)) (list (list 2.0D0 2277.126953125D0 7.127640419639647D-4 0.28999999165534973D0)) (list (list 2.0D0 2249.78564453125D0 0.0013711557257920504D0 0.29999998211860657D0)) (list (list 2.0D0 2250.948486328125D0 0.0010797680588439107D0 0.3100000023841858D0)) (list (list 2.0D0 2267.20849609375D0 8.358073537237942D-4 0.3199999928474426D0)) (list (list 2.0D0 2260.02099609375D0 8.104054140858352D-4 0.32999998331069947D0)) (list (list 2.0D0 2240.22314453125D0 8.385470137000084D-4 0.3400000035762787D0)) (list (list 2.0D0 2258.358642578125D0 4.889556439593434D-4 0.3499999940395355D0)) (list (list 2.0D0 2244.100341796875D0 5.340793286450207D-4 0.35999998450279236D0)) (list (list 2.0D0 2267.9931640625D0 8.000204106792808D-4 0.3700000047683716D0)) (list (list 2.0D0 2284.762451171875D0 0.0010675998637452722D0 0.3799999952316284D0)) (list (list 2.0D0 2286.426513671875D0 0.0012750669848173857D0 0.38999998569488526D0)) (list (list 2.0D0 2294.626953125D0 0.0014875595225021244D0 0.3999999761581421D0)) (list (list 2.0D0 2299.519775390625D0 0.0017913860501721502D0 0.4099999964237213D0)) (list (list 2.0D0 2301.03759765625D0 0.0018559186719357968D0 0.41999998688697815D0)) (list (list 2.0D0 2289.534912109375D0 0.0013547196285799146D0 0.429999977350235D0)) (list (list 2.0D0 2272.822998046875D0 7.140723755583167D-4 0.4399999976158142D0)) (list (list 2.0D0 2272.166015625D0 9.299950324930251D-4 0.44999998807907105D0)) (list (list 2.0D0 2275.259521484375D0 0.0010060349013656378D0 0.4599999785423279D0)) (list (list 2.0D0 2278.669189453125D0 0.001058868016116321D0 0.4699999988079071D0)) (list (list 2.0D0 2280.680908203125D0 0.0010342210298404098D0 0.47999998927116394D0)) (list (list 2.0D0 2281.340087890625D0 9.188549593091011D-4 0.4899999797344208D0)) (list (list 2.0D0 2281.338134765625D0 7.446358213201165D-4 0.5D0)) (list (list 2.0D0 2250.960205078125D0 0.0010273027000948787D0 0.5099999904632568D0)) (list (list 2.0D0 2247.102783203125D0 0.0011535607045516372D0 0.5199999809265137D0)) (list (list 2.0D0 2249.923828125D0 0.001153334742411971D0 0.5299999713897705D0)) (list (list 2.0D0 2251.619384765625D0 0.0011044953716918827D0 0.5399999618530273D0)) (list (list 2.0D0 2252.89501953125D0 0.0011207545176148415D0 0.550000011920929D0)) (list (list 2.0D0 2250.89013671875D0 0.0011308806715533138D0 0.5600000023841858D0)) (list (list 2.0D0 2246.1708984375D0 0.001079664332792163D0 0.5699999928474426D0)) (list (list 2.0D0 2242.84814453125D0 9.443398448638618D-4 0.5799999833106995D0)) (list (list 2.0D0 2248.6572265625D0 6.986949592828751D-4 0.5899999737739563D0)) (list (list 2.0D0 2272.6689453125D0 3.3958247513510287D-4 0.5999999642372131D0)) (list (list 2.0D0 2277.587890625D0 6.490695523098111D-4 0.6100000143051148D0)) (list (list 2.0D0 2279.346923828125D0 0.001053439686074853D0 0.6200000047683716D0)) (list (list 2.0D0 2279.089111328125D0 0.0014103252906352282D0 0.6299999952316284D0)) (list (list 2.0D0 2278.145751953125D0 0.0015943251783028245D0 0.6399999856948853D0)) (list (list 2.0D0 2278.179443359375D0 0.0014963794965296984D0 0.6499999761581421D0)) (list (list 2.0D0 2284.030517578125D0 0.0011636515846475959D0 0.6599999666213989D0)) (list (list 2.0D0 2289.499755859375D0 0.001029219594784081D0 0.6699999570846558D0)) (list (list 2.0D0 2292.784423828125D0 9.584977524355054D-4 0.6800000071525574D0)) (list (list 2.0D0 2294.293212890625D0 9.060098091140389D-4 0.6899999976158142D0)) (list (list 2.0D0 2295.38818359375D0 8.674520649947226D-4 0.699999988079071D0)) (list (list 2.0D0 2279.102294921875D0 3.696772619150579D-4 0.7099999785423279D0)) (list (list 2.0D0 2283.9638671875D0 6.477704155258834D-4 0.7199999690055847D0)) (list (list 2.0D0 2288.255859375D0 9.322429541498423D-4 0.7299999594688416D0)) (list (list 2.0D0 2287.952880859375D0 9.981802431866527D-4 0.7400000095367432D0)) (list (list 2.0D0 2290.298095703125D0 9.743617265485227D-4 0.75D0)) (list (list 2.0D0 2291.56982421875D0 9.052183595485985D-4 0.7599999904632568D0)) (list (list 2.0D0 2290.357666015625D0 8.75583034940064D-4 0.7699999809265137D0)) (list (list 2.0D0 2288.346435546875D0 9.392625652253628D-4 0.7799999713897705D0)) (list (list 2.0D0 2286.7763671875D0 0.0010929390555247665D0 0.7899999618530273D0)) (list (list 2.0D0 2286.549072265625D0 0.0012869841884821654D0 0.7999999523162842D0)) (list (list 2.0D0 2285.904296875D0 0.0013339658034965396D0 0.8100000023841858D0)) (list (list 2.0D0 2286.607666015625D0 0.0013029107358306647D0 0.8199999928474426D0)) (list (list 2.0D0 2287.50244140625D0 0.001200794242322445D0 0.8299999833106995D0)) (list (list 2.0D0 2287.60888671875D0 0.00103371636942029D0 0.8399999737739563D0)) (list (list 2.0D0 2285.907470703125D0 8.203183533623815D-4 0.8499999642372131D0)) (list (list 2.0D0 2278.54638671875D0 8.077168604359031D-4 0.85999995470047D0)) (list (list 2.0D0 2275.30712890625D0 8.436900097876787D-4 0.8700000047683716D0)) (list (list 2.0D0 2262.541015625D0 8.928400930017233D-4 0.8799999952316284D0)) (list (list 2.0D0 2245.258056640625D0 0.0010016105370596052D0 0.8899999856948853D0)) (list (list 2.0D0 2240.07421875D0 0.0012257995549589396D0 0.8999999761581421D0)) (list (list 2.0D0 2257.86376953125D0 7.457911851815879D-4 0.9099999666213989D0)) (list (list 2.0D0 2263.04736328125D0 7.611822220496833D-4 0.9199999570846558D0)) (list (list 2.0D0 2263.73046875D0 9.670081781223416D-4 0.9300000071525574D0)) (list (list 2.0D0 2263.8681640625D0 0.001244372338987887D0 0.9399999976158142D0)) (list (list 2.0D0 2265.05859375D0 0.0015680461656302214D0 0.949999988079071D0)) (list (list 2.0D0 2265.4619140625D0 0.0017940547550097108D0 0.9599999785423279D0)) (list (list 2.0D0 2250.958251953125D0 0.0016699268016964198D0 0.9699999690055847D0)) (list (list 2.0D0 2243.24267578125D0 0.001371375285089016D0 0.9799999594688416D0)) (list (list 2.0D0 2253.1455078125D0 0.0012065537739545107D0 0.9899999499320984D0)) (list (list 2.0D0 2282.55029296875D0 0.0015026715118438006D0 1.0D0)) (list (list 2.0D0 2284.987060546875D0 0.0012501078890636564D0 1.0099999904632569D0)) (list (list 2.0D0 2286.096435546875D0 9.453340899199247D-4 1.0199999809265137D0)) (list (list 2.0D0 2284.856201171875D0 6.33974326774478D-4 1.0299999713897705D0)) (list (list 2.0D0 2281.298095703125D0 4.4627845636568964D-4 1.0399999618530274D0)) (list (list 2.0D0 2276.22021484375D0 5.451937904581428D-4 1.0499999523162842D0)) (list (list 2.0D0 2271.5166015625D0 7.905524107627571D-4 1.059999942779541D0)) (list (list 2.0D0 2271.15869140625D0 8.425005944445729D-4 1.0699999332427979D0)) (list (list 2.0D0 2259.6923828125D0 8.514482178725302D-4 1.0799999237060547D0)) (list (list 2.0D0 2248.6201171875D0 8.100929553620517D-4 1.090000033378601D0)) (list (list 2.0D0 2261.2919921875D0 6.419150740839541D-4 1.100000023841858D0)) (list (list 2.0D0 2261.034423828125D0 5.174577818252146D-4 1.1100000143051148D0)) (list (list 2.0D0 2261.070068359375D0 4.731660010293126D-4 1.1200000047683716D0)) (list (list 2.0D0 2250.610595703125D0 4.7843577340245247D-4 1.1299999952316285D0)) (list (list 2.0D0 2245.136962890625D0 4.93472907692194D-4 1.1399999856948853D0)) (list (list 2.0D0 2269.81884765625D0 4.821468028239906D-4 1.149999976158142D0)) (list (list 2.0D0 2270.274658203125D0 5.94907789491117D-4 1.159999966621399D0)) (list (list 2.0D0 2271.06396484375D0 7.852374110370874D-4 1.1699999570846558D0)) (list (list 2.0D0 2271.198974609375D0 9.587855311110616D-4 1.1799999475479126D0)) (list (list 2.0D0 2272.7431640625D0 0.001038811751641333D0 1.1899999380111695D0)) (list (list 2.0D0 2278.66552734375D0 9.73046466242522D-4 1.1999999284744263D0)) (list (list 2.0D0 2280.89208984375D0 9.449674980714917D-4 1.209999918937683D0)) (list (list 2.0D0 2281.19873046875D0 9.511322132311761D-4 1.2200000286102295D0)) (list (list 2.0D0 2279.096435546875D0 9.956274880096317D-4 1.2300000190734864D0)) (list (list 2.0D0 2275.44384765625D0 0.0010451325215399266D0 1.2400000095367432D0)) (list (list 2.0D0 2271.927490234375D0 0.0010489332489669323D0 1.25D0)) (list (list 2.0D0 2270.529052734375D0 0.001009519794024527D0 1.2599999904632569D0)) (list (list 2.0D0 2270.734375D0 9.821432176977396D-4 1.2699999809265137D0)) (list (list 2.0D0 2273.4482421875D0 9.323848062194884D-4 1.2799999713897705D0)) (list (list 2.0D0 2281.025390625D0 8.909594616852701D-4 1.2899999618530274D0)) (list (list 2.0D0 2295.0693359375D0 9.206854738295078D-4 1.2999999523162842D0)) (list (list 2.0D0 2298.549560546875D0 0.0010711270151659847D0 1.309999942779541D0)) (list (list 2.0D0 2280.0634765625D0 6.783317658118904D-4 1.3199999332427979D0)) (list (list 2.0D0 2275.302978515625D0 5.228218506090343D-4 1.3299999237060547D0)) (list (list 2.0D0 2282.474365234375D0 5.961695569567382D-4 1.3399999141693116D0)) (list (list 2.0D0 2281.578125D0 5.694045103155077D-4 1.350000023841858D0)) (list (list 2.0D0 2255.942138671875D0 9.78417694568634D-4 1.3600000143051148D0)) (list (list 2.0D0 2250.11376953125D0 9.993755957111717D-4 1.3700000047683716D0)) (list (list 2.0D0 2263.59423828125D0 9.365837322548032D-4 1.3799999952316285D0)) (list (list 2.0D0 2281.734130859375D0 9.620403288863599D-4 1.3899999856948853D0)) (list (list 2.0D0 2284.624267578125D0 0.0011534307850524784D0 1.399999976158142D0)) (list (list 2.0D0 2282.570068359375D0 0.0010910482378676534D0 1.409999966621399D0)) (list (list 2.0D0 2283.178955078125D0 0.0010496318573132158D0 1.4199999570846558D0)) (list (list 2.0D0 2283.72021484375D0 0.0010664869332686067D0 1.4299999475479126D0)) (list (list 2.0D0 2278.303955078125D0 0.0011319442419335247D0 1.4399999380111695D0)) (list (list 2.0D0 2262.6416015625D0 0.0012295765336602927D0 1.4499999284744263D0)) (list (list 2.0D0 2269.2314453125D0 0.001557074603624642D0 1.459999918937683D0)) (list (list 2.0D0 2269.2294921875D0 0.001546283601783216D0 1.46999990940094D0)) (list (list 2.0D0 2268.772216796875D0 0.001332875806838274D0 1.4800000190734864D0)) (list (list 2.0D0 2268.906494140625D0 0.0010563867399469018D0 1.4900000095367432D0)) (list (list 2.0D0 2268.6240234375D0 8.657540893182159D-4 1.5D0)) (list (list 2.0D0 2268.335205078125D0 8.628569194115698D-4 1.5099999904632569D0)) (list (list 2.0D0 2271.32958984375D0 9.571301052346826D-4 1.5199999809265137D0)) (list (list 2.0D0 2275.112548828125D0 0.0010900037596002222D0 1.5299999713897705D0)) (list (list 2.0D0 2277.27294921875D0 0.0011732315178960562D0 1.5399999618530274D0)) (list (list 2.0D0 2276.188720703125D0 0.0011106454767286778D0 1.5499999523162842D0)) (list (list 2.0D0 2279.167236328125D0 8.801723597571254D-4 1.559999942779541D0)) (list (list 2.0D0 2284.46337890625D0 8.53716628625989D-4 1.5699999332427979D0)) (list (list 2.0D0 2287.831298828125D0 9.586512460373342D-4 1.5799999237060547D0)) (list (list 2.0D0 2289.373779296875D0 0.001128736766986549D0 1.5899999141693116D0)) (list (list 2.0D0 2290.732177734375D0 0.0012831458589062095D0 1.5999999046325684D0)) (list (list 2.0D0 2289.740234375D0 0.0012371557531878353D0 1.6100000143051148D0)) (list (list 2.0D0 2266.883544921875D0 8.167188498191536D-4 1.6200000047683716D0)) (list (list 2.0D0 2252.95556640625D0 6.426116451621056D-4 1.6299999952316285D0)) (list (list 2.0D0 2248.85107421875D0 7.430504774674773D-4 1.6399999856948853D0)) (list (list 2.0D0 2244.40625D0 9.160788613371551D-4 1.649999976158142D0)) (list (list 2.0D0 2243.53369140625D0 0.0011694858549162746D0 1.659999966621399D0)) (list (list 2.0D0 2247.950439453125D0 0.001035149092786014D0 1.6699999570846558D0)) (list (list 2.0D0 2253.48583984375D0 8.187879575416446D-4 1.6799999475479126D0)) (list (list 2.0D0 2263.2529296875D0 6.531038088724017D-4 1.6899999380111695D0)) (list (list 2.0D0 2280.029296875D0 5.979734123684466D-4 1.6999999284744263D0)) (list (list 2.0D0 2276.23388671875D0 6.15035358350724D-4 1.709999918937683D0)) (list (list 2.0D0 2273.34228515625D0 7.212563650682569D-4 1.71999990940094D0)) (list (list 2.0D0 2276.45361328125D0 7.336041308008134D-4 1.7300000190734864D0)) (list (list 2.0D0 2279.9033203125D0 6.110866670496762D-4 1.7400000095367432D0)) (list (list 2.0D0 2275.734619140625D0 3.893909160979092D-4 1.75D0)) (list (list 2.0D0 2275.6201171875D0 2.686943334992975D-4 1.7599999904632569D0)) (list (list 2.0D0 2277.143798828125D0 3.331363550387323D-4 1.7699999809265137D0)) (list (list 2.0D0 2263.86376953125D0 5.588964559137821D-4 1.7799999713897705D0)) (list (list 2.0D0 2247.800048828125D0 8.149576606228948D-4 1.7899999618530274D0)) (list (list 2.0D0 2248.270751953125D0 9.587826207280159D-4 1.7999999523162842D0)) (list (list 2.0D0 2249.334716796875D0 0.001177965197712183D0 1.809999942779541D0)) (list (list 2.0D0 2249.858642578125D0 0.0013705071760341525D0 1.8199999332427979D0)) (list (list 2.0D0 2251.919189453125D0 0.0014478296507149935D0 1.8299999237060547D0)) (list (list 2.0D0 2256.4833984375D0 0.0014829614665359259D0 1.8399999141693116D0)) (list (list 2.0D0 2263.34912109375D0 0.0016096880426630378D0 1.8499999046325684D0)) (list (list 2.0D0 2266.39453125D0 0.0019403474871069193D0 1.8600000143051148D0)) (list (list 2.0D0 2267.930908203125D0 0.0019117185147479177D0 1.8700000047683716D0)) (list (list 2.0D0 2270.904541015625D0 0.0016769284848123789D0 1.8799999952316285D0)) (list (list 2.0D0 2274.844482421875D0 0.001374906161800027D0 1.8899999856948853D0)) (list (list 2.0D0 2278.140869140625D0 0.0011551760835573078D0 1.899999976158142D0)) (list (list 2.0D0 2280.184814453125D0 0.0012109477538615466D0 1.909999966621399D0)) (list (list 2.0D0 2281.32958984375D0 0.001379324123263359D0 1.9199999570846558D0)) (list (list 2.0D0 2271.78759765625D0 0.0014534119982272387D0 1.9299999475479126D0)) (list (list 2.0D0 2260.43994140625D0 0.0014435496414080263D0 1.9399999380111695D0)) (list (list 2.0D0 2259.79541015625D0 0.0014175998512655497D0 1.9499999284744263D0)) (list (list 2.0D0 2256.74951171875D0 0.0012713097967207432D0 1.959999918937683D0)) (list (list 2.0D0 2254.37841796875D0 0.0012682044180110097D0 1.96999990940094D0)) (list (list 2.0D0 2251.8154296875D0 0.0012195693561807275D0 1.9799998998641968D0)) (list (list 2.0D0 2248.90283203125D0 0.0011022525141015649D0 1.9900000095367432D0)) (list (list 2.0D0 2246.14599609375D0 9.591917623765767D-4 2.0D0)) (list (list 2.0D0 2247.39892578125D0 9.052824461832643D-4 2.009999990463257D0)) (list (list 2.0D0 2251.67626953125D0 0.0010888049146160484D0 2.0199999809265137D0)) (list (list 2.0D0 2255.146728515625D0 0.0013956425245851279D0 2.0299999713897705D0)) (list (list 2.0D0 2256.974365234375D0 0.001649929559789598D0 2.0399999618530274D0)) (list (list 2.0D0 2257.385986328125D0 0.0016734037781134248D0 2.049999952316284D0)) (list (list 2.0D0 2256.96875D0 0.0014443333493545652D0 2.059999942779541D0)) (list (list 2.0D0 2255.525390625D0 0.0011240867897868157D0 2.069999933242798D0)) (list (list 2.0D0 2270.2080078125D0 9.966577636078D-4 2.0799999237060547D0)) (list (list 2.0D0 2286.72607421875D0 0.0010332097299396992D0 2.0899999141693116D0)) (list (list 2.0D0 2285.4267578125D0 0.0011321130441501737D0 2.0999999046325684D0)) (list (list 2.0D0 2283.073974609375D0 0.001449757837690413D0 2.109999895095825D0)) (list (list 2.0D0 2283.96826171875D0 0.0015959696611389518D0 2.119999885559082D0)) (list (list 2.0D0 2275.1171875D0 0.0014014734188094736D0 2.129999876022339D0)) (list (list 2.0D0 2263.686767578125D0 0.0010982644744217396D0 2.1399998664855957D0)) (list (list 2.0D0 2261.025390625D0 9.826088789850474D-4 2.1499998569488526D0)) (list (list 2.0D0 2262.5498046875D0 8.476388175040484D-4 2.1599998474121094D0)) (list (list 2.0D0 2263.02294921875D0 8.475172217004001D-4 2.169999837875366D0)) (list (list 2.0D0 2261.0712890625D0 9.431513608433306D-4 2.180000066757202D0)) (list (list 2.0D0 2256.83251953125D0 0.0011059499811381102D0 2.190000057220459D0)) (list (list 2.0D0 2252.264404296875D0 0.0012670692522078753D0 2.200000047683716D0)) (list (list 2.0D0 2257.9716796875D0 0.001090796198695898D0 2.2100000381469727D0)) (list (list 2.0D0 2261.412841796875D0 9.247908601537347D-4 2.2200000286102295D0)) (list (list 2.0D0 2262.86328125D0 7.910716230981052D-4 2.2300000190734864D0)) (list (list 2.0D0 2261.750732421875D0 6.99768541380763D-4 2.240000009536743D0)) (list (list 2.0D0 2257.538818359375D0 6.61506550386548D-4 2.25D0)) (list (list 2.0D0 2250.490234375D0 7.299654535017908D-4 2.259999990463257D0)) (list (list 2.0D0 2245.48193359375D0 9.985077194869519D-4 2.2699999809265137D0)) (list (list 2.0D0 2242.245361328125D0 0.0013230963377282024D0 2.2799999713897705D0)) (list (list 2.0D0 2240.099853515625D0 0.0016139739891514183D0 2.2899999618530274D0)) (list (list 2.0D0 2238.065185546875D0 0.001789402449503541D0 2.299999952316284D0)) (list (list 2.0D0 2234.515380859375D0 0.0017237821593880654D0 2.309999942779541D0)) (list (list 2.0D0 2230.81103515625D0 0.001529706409201026D0 2.319999933242798D0)) (list (list 2.0D0 2229.140625D0 0.001310362364165485D0 2.3299999237060547D0)) (list (list 2.0D0 2229.599365234375D0 0.0011253665434196592D0 2.3399999141693116D0)) (list (list 2.0D0 2231.3232421875D0 0.0010110728908330203D0 2.3499999046325684D0)) (list (list 2.0D0 2231.725830078125D0 9.344039717689157D-4 2.359999895095825D0)) (list (list 2.0D0 2247.8017578125D0 6.209103739820421D-4 2.369999885559082D0)) (list (list 2.0D0 2256.074951171875D0 5.827965214848518D-4 2.379999876022339D0)) (list (list 2.0D0 2258.631591796875D0 7.791296811774373D-4 2.3899998664855957D0)) (list (list 2.0D0 2262.7568359375D0 0.001019545248709619D0 2.3999998569488526D0)) (list (list 2.0D0 2264.965087890625D0 0.0011633287649601698D0 2.4099998474121094D0)) (list (list 2.0D0 2264.95703125D0 0.001152916345745325D0 2.419999837875366D0)) (list (list 2.0D0 2262.20068359375D0 0.0010940470965579153D0 2.429999828338623D0)) (list (list 2.0D0 2257.14794921875D0 0.001100384397432208D0 2.440000057220459D0)) (list (list 2.0D0 2251.32080078125D0 0.0012359452666714788D0 2.450000047683716D0)) (list (list 2.0D0 2250.22998046875D0 0.0012693932512775064D0 2.4600000381469727D0)) (list (list 2.0D0 2254.02294921875D0 0.0010564703261479736D0 2.4700000286102295D0)) (list (list 2.0D0 2260.378662109375D0 8.374805329367518D-4 2.4800000190734864D0)) (list (list 2.0D0 2266.540283203125D0 7.449754048138857D-4 2.490000009536743D0)) (list (list 2.0D0 2269.667724609375D0 8.27256590127945D-4 2.5D0)) (list (list 2.0D0 2267.2041015625D0 8.303715148940682D-4 2.509999990463257D0)) (list (list 2.0D0 2261.08056640625D0 8.781807846389711D-4 2.5199999809265137D0)) (list (list 2.0D0 2259.9072265625D0 8.605541079305112D-4 2.5299999713897705D0)) (list (list 2.0D0 2263.220947265625D0 8.048930903896689D-4 2.5399999618530274D0)) (list (list 2.0D0 2269.34033203125D0 8.357215556316078D-4 2.549999952316284D0)) (list (list 2.0D0 2283.35986328125D0 0.0014291665283963085D0 2.559999942779541D0)) (list (list 2.0D0 2284.637939453125D0 0.0014278385788202286D0 2.569999933242798D0)) (list (list 2.0D0 2280.252197265625D0 0.001148937619291246D0 2.5799999237060547D0)) (list (list 2.0D0 2268.82861328125D0 8.762835641391575D-4 2.5899999141693116D0)) (list (list 2.0D0 2249.491455078125D0 8.51235818117857D-4 2.5999999046325684D0)) (list (list 2.0D0 2232.04931640625D0 0.001111346180550754D0 2.609999895095825D0)) (list (list 2.0D0 2234.861328125D0 9.891928639262915D-4 2.619999885559082D0)) (list (list 2.0D0 2236.429931640625D0 7.734976825304329D-4 2.629999876022339D0)) (list (list 2.0D0 2236.022216796875D0 6.166819948703051D-4 2.6399998664855957D0)) (list (list 2.0D0 2237.59326171875D0 6.233715685084462D-4 2.6499998569488526D0)) (list (list 2.0D0 2245.201416015625D0 8.179463911801577D-4 2.6599998474121094D0)) (list (list 2.0D0 2248.519287109375D0 0.0010661110281944275D0 2.669999837875366D0)) (list (list 2.0D0 2252.666015625D0 0.0011347215622663498D0 2.679999828338623D0)) (list (list 2.0D0 2257.51513671875D0 0.0010688460897654295D0 2.690000057220459D0)) (list (list 2.0D0 2261.899658203125D0 9.608358377590776D-4 2.700000047683716D0)) (list (list 2.0D0 2265.26953125D0 7.952396990731359D-4 2.7100000381469727D0)) (list (list 2.0D0 2271.170166015625D0 6.648068665526807D-4 2.7200000286102295D0)) (list (list 2.0D0 2275.513916015625D0 6.616279133595526D-4 2.7300000190734864D0)) (list (list 2.0D0 2277.857421875D0 7.439188775606453D-4 2.740000009536743D0)) (list (list 2.0D0 2278.614013671875D0 8.342972723767161D-4 2.75D0)) (list (list 2.0D0 2278.07470703125D0 8.435824420303106D-4 2.759999990463257D0)) (list (list 2.0D0 2271.635009765625D0 8.619664586149156D-4 2.7699999809265137D0)) (list (list 2.0D0 2265.160400390625D0 0.0010424343636259437D0 2.7799999713897705D0)) (list (list 2.0D0 2263.529296875D0 0.0012043167371302844D0 2.7899999618530274D0)) (list (list 2.0D0 2269.4267578125D0 0.001176681718789041D0 2.799999952316284D0)) (list (list 2.0D0 2277.404052734375D0 0.001152577344328165D0 2.809999942779541D0)) (list (list 2.0D0 2277.238037109375D0 9.97371505945921D-4 2.819999933242798D0)) (list (list 2.0D0 2276.02490234375D0 8.780931239016354D-4 2.8299999237060547D0)) (list (list 2.0D0 2274.709716796875D0 8.494766079820693D-4 2.8399999141693116D0)) (list (list 2.0D0 2273.6650390625D0 9.063650504685938D-4 2.8499999046325684D0)) (list (list 2.0D0 2276.152099609375D0 8.920019608922303D-4 2.859999895095825D0)) (list (list 2.0D0 2276.504150390625D0 7.650865009054542D-4 2.869999885559082D0)) (list (list 2.0D0 2281.718994140625D0 5.753223667852581D-4 2.879999876022339D0)) (list (list 2.0D0 2281.26171875D0 4.6450537047348917D-4 2.8899998664855957D0)) (list (list 2.0D0 2270.60693359375D0 5.741766653954983D-4 2.8999998569488526D0)) (list (list 2.0D0 2285.907958984375D0 9.939722949638963D-4 2.9099998474121094D0)) (list (list 2.0D0 2288.1572265625D0 0.0011014569317921997D0 2.919999837875366D0)) (list (list 2.0D0 2288.661865234375D0 0.001167189795523882D0 2.929999828338623D0)) (list (list 2.0D0 2289.16650390625D0 0.001232922775670886D0 2.93999981880188D0)) (list (list 2.0D0 2287.34130859375D0 0.0012300806120038033D0 2.950000047683716D0)) (list (list 2.0D0 2270.431640625D0 7.83284951467067D-4 2.9600000381469727D0)) (list (list 2.0D0 2268.533935546875D0 0.0010580964153632522D0 2.9700000286102295D0)) (list (list 2.0D0 2267.280517578125D0 0.0013757993001490832D0 2.9800000190734864D0)) (list (list 2.0D0 2265.436279296875D0 0.001527149579487741D0 2.990000009536743D0)) (list (list 2.0D0 2263.5849609375D0 0.0014195997500792146D0 3.0D0)) (list (list 2.0D0 2259.99267578125D0 0.0010524049866944552D0 3.009999990463257D0)) (list (list 2.0D0 2246.394775390625D0 9.826268069446087D-4 3.0199999809265137D0)) (list (list 2.0D0 2238.447265625D0 0.0011588389752432704D0 3.0299999713897705D0)) (list (list 2.0D0 2234.4453125D0 0.0014534704387187958D0 3.0399999618530274D0)) (list (list 2.0D0 2231.350830078125D0 0.0016573528992012144D0 3.049999952316284D0)) (list (list 2.0D0 2233.908203125D0 0.0012958404840901494D0 3.059999942779541D0)) (list (list 2.0D0 2236.465576171875D0 9.343280689790845D-4 3.069999933242798D0)) (list (list 2.0D0 2239.02294921875D0 5.728157120756805D-4 3.0799999237060547D0)) (list (list 2.0D0 2241.574462890625D0 3.90704779420048D-4 3.0899999141693116D0)) (list (list 2.0D0 2244.69921875D0 4.989253357052803D-4 3.0999999046325684D0)) (list (list 2.0D0 2251.38427734375D0 6.666679983027279D-4 3.109999895095825D0)) (list (list 2.0D0 2258.0693359375D0 8.344106026925147D-4 3.119999885559082D0)) (list (list 2.0D0 2273.508544921875D0 8.935334044508636D-4 3.129999876022339D0)) (list (list 2.0D0 2284.477294921875D0 8.727303938940167D-4 3.1399998664855957D0)) (list (list 2.0D0 2281.48583984375D0 8.38151085190475D-4 3.1499998569488526D0)) (list (list 2.0D0 2281.729248046875D0 9.00128623470664D-4 3.1599998474121094D0)) (list (list 2.0D0 2283.043701171875D0 9.18556354008615D-4 3.169999837875366D0)) (list (list 2.0D0 2277.139892578125D0 9.126217919401825D-4 3.179999828338623D0)) (list (list 2.0D0 2263.762939453125D0 9.830908384174109D-4 3.18999981880188D0)) (list (list 2.0D0 2247.489990234375D0 0.0011532085482031107D0 3.1999998092651367D0)) (list (list 2.0D0 2244.99609375D0 0.001123810070566833D0 3.2100000381469727D0)) (list (list 2.0D0 2239.3505859375D0 9.779613465070725D-4 3.2200000286102295D0)) (list (list 2.0D0 2246.578125D0 5.725154187530279D-4 3.2300000190734864D0)) (list (list 2.0D0 2248.407958984375D0 4.205017175991088D-4 3.240000009536743D0)) (list (list 2.0D0 2235.386962890625D0 7.809663657099009D-4 3.25D0)) (list (list 2.0D0 2247.645751953125D0 6.934418343007565D-4 3.259999990463257D0)) (list (list 2.0D0 2252.1416015625D0 8.659517043270171D-4 3.2699999809265137D0)) (list (list 2.0D0 2254.26171875D0 9.811638155952096D-4 3.2799999713897705D0)) (list (list 2.0D0 2254.342041015625D0 9.676940971985459D-4 3.2899999618530274D0)) (list (list 2.0D0 2252.0693359375D0 8.33743077237159D-4 3.299999952316284D0)) (list (list 2.0D0 2246.9541015625D0 7.134542101994157D-4 3.309999942779541D0)) (list (list 2.0D0 2245.44873046875D0 7.299932185560465D-4 3.319999933242798D0)) (list (list 2.0D0 2244.104248046875D0 8.726210799068213D-4 3.3299999237060547D0)) (list (list 2.0D0 2243.687255859375D0 0.00101325789000839D0 3.3399999141693116D0)) (list (list 2.0D0 2245.410400390625D0 0.001022804994136095D0 3.3499999046325684D0)) (list (list 2.0D0 2250.290771484375D0 8.127411128953099D-4 3.359999895095825D0)) (list (list 2.0D0 2271.706298828125D0 6.279692170210183D-4 3.369999885559082D0)) (list (list 2.0D0 2283.77001953125D0 6.087356014177203D-4 3.379999876022339D0)) (list (list 2.0D0 2287.677978515625D0 6.752325571142137D-4 3.3899998664855957D0)) (list (list 2.0D0 2286.30419921875D0 6.503544864244759D-4 3.3999998569488526D0)) (list (list 2.0D0 2274.10205078125D0 1.3040550402365625D-4 3.4099998474121094D0)) (list (list 2.0D0 2260.076416015625D0 5.841361125931144D-4 3.419999837875366D0)) (list (list 2.0D0 2254.903564453125D0 9.932122193276883D-4 3.429999828338623D0)) (list (list 2.0D0 2254.591064453125D0 0.0012448764173313976D0 3.43999981880188D0)) (list (list 2.0D0 2254.276611328125D0 0.0013363368343561888D0 3.4499998092651367D0)) (list (list 2.0D0 2253.142822265625D0 0.0011954668443650008D0 3.4600000381469727D0)) (list (list 2.0D0 2251.3935546875D0 0.0010390528477728367D0 3.4700000286102295D0)) (list (list 2.0D0 2249.1435546875D0 9.74774535279721D-4 3.4800000190734864D0)) (list (list 2.0D0 2247.25146484375D0 9.850647766143084D-4 3.490000009536743D0)) (list (list 2.0D0 2246.47998046875D0 0.0010210105683654547D0 3.5D0)) (list (list 2.0D0 2247.1435546875D0 9.949225932359696D-4 3.509999990463257D0)) (list (list 2.0D0 2246.375D0 9.65096231084317D-4 3.5199999809265137D0)) (list (list 2.0D0 2244.221923828125D0 8.92908195964992D-4 3.5299999713897705D0)) (list (list 2.0D0 2237.34912109375D0 9.010705398395658D-4 3.5399999618530274D0)) (list (list 2.0D0 2229.309326171875D0 9.556935401633382D-4 3.549999952316284D0)) (list (list 2.0D0 2245.725830078125D0 4.889810224995017D-4 3.559999942779541D0)) (list (list 2.0D0 2247.627685546875D0 5.879531963728368D-4 3.569999933242798D0)) (list (list 2.0D0 2247.812255859375D0 8.424401748925448D-4 3.5799999237060547D0)) (list (list 2.0D0 2248.312255859375D0 0.0010891173733398319D0 3.5899999141693116D0)) (list (list 2.0D0 2248.962890625D0 0.001222126535139978D0 3.5999999046325684D0)) (list (list 2.0D0 2246.935302734375D0 0.001204123254865408D0 3.609999895095825D0)) (list (list 2.0D0 2241.20703125D0 0.0011749950936064125D0 3.619999885559082D0)) (list (list 2.0D0 2235.592529296875D0 0.001302041346207261D0 3.629999876022339D0)) (list (list 2.0D0 2234.19189453125D0 0.0014315831940621138D0 3.6399998664855957D0)) (list (list 2.0D0 2238.195556640625D0 0.0014397872146219016D0 3.6499998569488526D0)) (list (list 2.0D0 2241.15283203125D0 0.0013830953976139427D0 3.6599998474121094D0)) (list (list 2.0D0 2239.87744140625D0 0.0012031354708597064D0 3.669999837875366D0)) (list (list 2.0D0 2240.177490234375D0 8.873392944224179D-4 3.679999828338623D0)) (list (list 2.0D0 2240.5947265625D0 5.551596987061203D-4 3.68999981880188D0)) (list (list 2.0D0 2238.540771484375D0 3.230167494621128D-4 3.6999998092651367D0)) (list (list 2.0D0 2230.21923828125D0 2.6908531435765326D-4 3.7099997997283936D0)) (list (list 2.0D0 2239.282470703125D0 1.648117759032175D-4 3.7200000286102295D0)) (list (list 2.0D0 2253.011962890625D0 3.304101701360196D-4 3.7300000190734864D0)) (list (list 2.0D0 2261.06005859375D0 5.686046206392348D-4 3.740000009536743D0)) (list (list 2.0D0 2259.3603515625D0 7.285153260454536D-4 3.75D0)) (list (list 2.0D0 2258.88720703125D0 9.330771863460541D-4 3.759999990463257D0)) (list (list 2.0D0 2254.89111328125D0 9.630238055251539D-4 3.7699999809265137D0)) (list (list 2.0D0 2267.8505859375D0 9.914790280163289D-4 3.7799999713897705D0)) (list (list 2.0D0 2280.69384765625D0 0.001024555298499763D0 3.7899999618530274D0)) (list (list 2.0D0 2281.0712890625D0 0.0010268567129969597D0 3.799999952316284D0)) (list (list 2.0D0 2278.0205078125D0 8.946707821451128D-4 3.809999942779541D0)) (list (list 2.0D0 2277.618408203125D0 8.127275505103171D-4 3.819999933242798D0)) (list (list 2.0D0 2279.432373046875D0 8.358937338925898D-4 3.8299999237060547D0)) (list (list 2.0D0 2281.11474609375D0 9.674977627582848D-4 3.8399999141693116D0)) (list (list 2.0D0 2281.0732421875D0 0.001182778738439083D0 3.8499999046325684D0)) (list (list 2.0D0 2279.939453125D0 0.001411502598784864D0 3.859999895095825D0)) (list (list 2.0D0 2256.18017578125D0 0.0013602209510281682D0 3.869999885559082D0)) (list (list 2.0D0 2245.043701171875D0 0.0012630207929760218D0 3.879999876022339D0)) (list (list 2.0D0 2240.81201171875D0 0.0012012365041300655D0 3.8899998664855957D0)) (list (list 2.0D0 2237.023681640625D0 0.001196973491460085D0 3.8999998569488526D0)) (list (list 2.0D0 2235.49658203125D0 0.0011686537181958557D0 3.9099998474121094D0)) (list (list 2.0D0 2232.608154296875D0 9.949356317520142D-4 3.919999837875366D0)) (list (list 2.0D0 2241.77197265625D0 8.446324500255287D-4 3.929999828338623D0)) (list (list 2.0D0 2260.5107421875D0 7.889156695455313D-4 3.93999981880188D0)) (list (list 2.0D0 2279.33837890625D0 8.605410694144666D-4 3.9499998092651367D0)) (list (list 2.0D0 2275.349609375D0 0.0010387336369603873D0 3.9599997997283936D0)) (list (list 2.0D0 2273.2470703125D0 0.0011628885986283422D0 3.9700000286102295D0)) (list (list 2.0D0 2270.428466796875D0 0.0012712731258943677D0 3.9800000190734864D0)) (list (list 2.0D0 2265.37451171875D0 0.001358261564746499D0 3.990000009536743D0)) (list (list 2.0D0 2257.927490234375D0 0.0014063161797821522D0 4.0D0)) (list (list 2.0D0 2250.599365234375D0 0.0013735071988776327D0 4.009999752044678D0)) (list (list 2.0D0 2248.3974609375D0 0.0013923407532274723D0 4.019999980926514D0)) (list (list 2.0D0 2248.224365234375D0 0.0013269638875499368D0 4.029999732971191D0)) (list (list 2.0D0 2248.177490234375D0 0.0012392884818837047D0 4.039999961853027D0)) (list (list 2.0D0 2247.224609375D0 0.0011845481349155307D0 4.049999713897705D0)) (list (list 2.0D0 2245.988037109375D0 0.0011677895672619343D0 4.059999942779541D0)) (list (list 2.0D0 2250.845458984375D0 0.0010184263810515404D0 4.069999694824219D0)) (list (list 2.0D0 2254.924072265625D0 0.001097453641705215D0 4.079999923706055D0)) (list (list 2.0D0 2256.429931640625D0 0.00130613858345896D0 4.089999675750732D0)) (list (list 2.0D0 2254.698486328125D0 0.0015233223093673587D0 4.099999904632568D0)) (list (list 2.0D0 2250.245361328125D0 0.0016627931036055088D0 4.110000133514404D0)) (list (list 2.0D0 2252.8994140625D0 0.0014788989210501314D0 4.119999885559082D0)) (list (list 2.0D0 2254.689208984375D0 0.0012992683332413435D0 4.130000114440918D0)) (list (list 2.0D0 2254.978759765625D0 0.001191062736324966D0 4.139999866485596D0)) (list (list 2.0D0 2252.47900390625D0 0.0011503022396937013D0 4.150000095367432D0)) (list (list 2.0D0 2242.86376953125D0 0.0010707592591643334D0 4.159999847412109D0)) (list (list 2.0D0 2238.243896484375D0 8.72317876201123D-4 4.170000076293945D0)) (list (list 2.0D0 2235.434814453125D0 7.275941898114979D-4 4.179999828338623D0)) (list (list 2.0D0 2234.158447265625D0 6.542695919051766D-4 4.190000057220459D0)) (list (list 2.0D0 2236.700439453125D0 6.412613438442349D-4 4.199999809265137D0)) (list (list 2.0D0 2250.79931640625D0 6.481150048784912D-4 4.210000038146973D0)) (list (list 2.0D0 2257.2373046875D0 8.089803741313517D-4 4.21999979019165D0)) (list (list 2.0D0 2256.604248046875D0 8.377071935683489D-4 4.230000019073486D0)) (list (list 2.0D0 2248.377197265625D0 8.234074339270592D-4 4.239999771118164D0)) (list (list 2.0D0 2236.747802734375D0 8.468824089504778D-4 4.25D0)) (list (list 2.0D0 2235.46533203125D0 9.218186605721712D-4 4.259999752044678D0)) (list (list 2.0D0 2235.45751953125D0 9.855712996795774D-4 4.269999980926514D0)) (list (list 2.0D0 2238.207275390625D0 0.0010828695958480239D0 4.279999732971191D0)) (list (list 2.0D0 2241.74755859375D0 0.0012177443131804467D0 4.289999961853027D0)) (list (list 2.0D0 2244.009033203125D0 0.001369292731396854D0 4.299999713897705D0)) (list (list 2.0D0 2243.01806640625D0 0.001473743817768991D0 4.309999942779541D0)) (list (list 2.0D0 2240.844970703125D0 0.0016332331579178572D0 4.319999694824219D0)) (list (list 2.0D0 2233.159912109375D0 0.0017301978077739478D0 4.329999923706055D0)) (list (list 2.0D0 2225.86865234375D0 0.0017134689260274172D0 4.339999675750732D0)) (list (list 2.0D0 2222.50439453125D0 0.0015940952580422163D0 4.349999904632568D0)) (list (list 2.0D0 2221.160400390625D0 0.0014855151530355215D0 4.360000133514404D0)) (list (list 2.0D0 2219.81640625D0 0.001376940286718309D0 4.369999885559082D0)) (list (list 2.0D0 2219.880126953125D0 0.0014041619142517448D0 4.380000114440918D0)) (list (list 2.0D0 2219.19140625D0 0.001437295926734805D0 4.389999866485596D0)) (list (list 2.0D0 2216.68359375D0 0.0013967424165457488D0 4.400000095367432D0)) (list (list 2.0D0 2213.57666015625D0 0.0013201647670939565D0 4.409999847412109D0)) (list (list 2.0D0 2214.884033203125D0 0.0012099817395210267D0 4.420000076293945D0)) (list (list 2.0D0 2216.42333984375D0 0.0010980382794514299D0 4.429999828338623D0)) (list (list 2.0D0 2221.076171875D0 0.0011445628479123116D0 4.440000057220459D0)) (list (list 2.0D0 2229.51513671875D0 0.0013838130980730057D0 4.449999809265137D0)) (list (list 2.0D0 2237.954345703125D0 0.0016230747569352389D0 4.460000038146973D0)) (list (list 2.0D0 2261.205322265625D0 0.0016846071230247617D0 4.46999979019165D0)) (list (list 2.0D0 2267.73681640625D0 0.0015995014691725374D0 4.480000019073486D0)) (list (list 2.0D0 2264.327880859375D0 0.0013808790827170015D0 4.489999771118164D0)) (list (list 2.0D0 2258.12109375D0 0.0011002153623849154D0 4.5D0)) (list (list 2.0D0 2253.04248046875D0 9.31618909817189D-4 4.509999752044678D0)) (list (list 2.0D0 2250.88037109375D0 8.994529489427805D-4 4.519999980926514D0)) (list (list 2.0D0 2251.80908203125D0 9.027826599776745D-4 4.529999732971191D0)) (list (list 2.0D0 2252.234375D0 8.90447641722858D-4 4.539999961853027D0)) (list (list 2.0D0 2249.865234375D0 9.365911828354001D-4 4.549999713897705D0)) (list (list 2.0D0 2244.725830078125D0 0.0013353417161852122D0 4.559999942779541D0)) (list (list 2.0D0 2239.586669921875D0 0.0017340731574222446D0 4.569999694824219D0)) (list (list 2.0D0 2234.447509765625D0 0.0021328236907720566D0 4.579999923706055D0)) (list (list 2.0D0 2231.823486328125D0 0.0021865491289645434D0 4.589999675750732D0)) (list (list 2.0D0 2232.182861328125D0 0.0018021938158199192D0 4.599999904632568D0)) (list (list 2.0D0 2232.568603515625D0 0.0013047759421169758D0 4.610000133514404D0)) (list (list 2.0D0 2255.97705078125D0 0.001034794026054442D0 4.619999885559082D0)) (list (list 2.0D0 2265.065673828125D0 0.0012652486329898239D0 4.630000114440918D0)) (list (list 2.0D0 2265.92529296875D0 0.0016068845288828016D0 4.639999866485596D0)) (list (list 2.0D0 2263.39794921875D0 0.001775894546881318D0 4.650000095367432D0)) (list (list 2.0D0 2256.847412109375D0 0.001691567711532116D0 4.659999847412109D0)) (list (list 2.0D0 2255.39453125D0 0.0015547913499176503D0 4.670000076293945D0)) (list (list 2.0D0 2255.2626953125D0 0.0014182482846081257D0 4.679999828338623D0)) (list (list 2.0D0 2254.159423828125D0 0.0013371111126616598D0 4.690000057220459D0)) (list (list 2.0D0 2250.856201171875D0 0.0013520775828510523D0 4.699999809265137D0)) (list (list 2.0D0 2245.5341796875D0 0.0014881977112963796D0 4.710000038146973D0)) (list (list 2.0D0 2245.07373046875D0 0.0014307656092569232D0 4.71999979019165D0)) (list (list 2.0D0 2244.46435546875D0 0.0013126006815582514D0 4.730000019073486D0)) (list (list 2.0D0 2238.9150390625D0 0.0011356441536918283D0 4.739999771118164D0)) (list (list 2.0D0 2229.296630859375D0 9.696375345811248D-4 4.75D0)) (list (list 2.0D0 2225.017333984375D0 0.0010004519717767835D0 4.759999752044678D0)) (list (list 2.0D0 2225.507080078125D0 9.222012595273554D-4 4.769999980926514D0)) (list (list 2.0D0 2226.084716796875D0 8.81046405993402D-4 4.779999732971191D0)) (list (list 2.0D0 2226.0D0 9.129051468335092D-4 4.789999961853027D0)) (list (list 2.0D0 2226.207763671875D0 9.822460124269128D-4 4.799999713897705D0)) (list (list 2.0D0 2230.05322265625D0 9.533279808238149D-4 4.809999942779541D0)) (list (list 2.0D0 2236.897705078125D0 0.0011255597928538919D0 4.819999694824219D0)) (list (list 2.0D0 2239.54736328125D0 0.0012310995953157545D0 4.829999923706055D0)) (list (list 2.0D0 2244.031494140625D0 0.00118933932390064D0 4.839999675750732D0)) (list (list 2.0D0 2251.253173828125D0 0.0010511938016861678D0 4.849999904632568D0)) (list (list 2.0D0 2254.091552734375D0 0.0010468608234077692D0 4.859999656677246D0)) (list (list 2.0D0 2234.7822265625D0 0.0011779064079746604D0 4.869999885559082D0)) (list (list 2.0D0 2230.060302734375D0 0.0012628965778276325D0 4.880000114440918D0)) (list (list 2.0D0 2230.403564453125D0 0.0012674928875640035D0 4.889999866485596D0)) (list (list 2.0D0 2230.930419921875D0 0.0011936600785702467D0 4.900000095367432D0)) (list (list 2.0D0 2235.3798828125D0 0.0010844557546079159D0 4.909999847412109D0)) (list (list 2.0D0 2238.590576171875D0 0.0012780501274392009D0 4.920000076293945D0)) (list (list 2.0D0 2226.370849609375D0 0.0013047256506979466D0 4.929999828338623D0)) (list (list 2.0D0 2216.275634765625D0 0.0014624383766204119D0 4.940000057220459D0)) (list (list 2.0D0 2215.371337890625D0 0.0018089879304170609D0 4.949999809265137D0)) (list (list 2.0D0 2215.48828125D0 0.002048237482085824D0 4.960000038146973D0)) (list (list 2.0D0 2215.4912109375D0 4.511675797402859D-4 4.96999979019165D0)) (list (list 3.0D0 1802.34228515625D0 5.3337869758252055D-5 0.0D0)) (list (list 3.0D0 1802.261474609375D0 6.384587322827429D-5 0.009999999776482582D0)) (list (list 3.0D0 1797.49853515625D0 6.124338688096032D-5 0.019999999552965164D0)) (list (list 3.0D0 1792.3729248046875D0 5.8202724176226184D-5 0.029999999329447747D0)) (list (list 3.0D0 1789.06884765625D0 6.06276371399872D-5 0.03999999910593033D0)) (list (list 3.0D0 1787.6575927734375D0 6.768340972485021D-5 0.04999999701976776D0)) (list (list 3.0D0 1790.1376953125D0 6.575349107151851D-5 0.05999999865889549D0)) (list (list 3.0D0 1788.8070068359375D0 6.144013605080545D-5 0.07000000029802323D0)) (list (list 3.0D0 1789.937255859375D0 7.22497352398932D-5 0.07999999821186066D0)) (list (list 3.0D0 1789.48046875D0 1.435934827895835D-4 0.08999999612569809D0)) (list (list 3.0D0 1773.770263671875D0 3.5007117548957467D-4 0.09999999403953552D0)) (list (list 3.0D0 1794.5560302734375D0 0.0013042001519352198D0 0.10999999940395355D0)) (list (list 3.0D0 1799.20654296875D0 0.002513123443350196D0 0.11999999731779099D0)) (list (list 3.0D0 1799.413330078125D0 0.003862600540742278D0 0.12999999523162842D0)) (list (list 3.0D0 1800.4248046875D0 0.005188994109630585D0 0.14000000059604645D0)) (list (list 3.0D0 1801.53125D0 0.006280260160565376D0 0.14999999105930328D0)) (list (list 3.0D0 1802.37548828125D0 0.006820464041084051D0 0.1599999964237213D0)) (list (list 3.0D0 1802.8463134765625D0 0.006960746366530657D0 0.17000000178813934D0)) (list (list 3.0D0 1802.9677734375D0 0.006831533275544643D0 0.17999999225139618D0)) (list (list 3.0D0 1802.880615234375D0 0.006563680246472359D0 0.1899999976158142D0)) (list (list 3.0D0 1802.8365478515625D0 0.006292056757956743D0 0.19999998807907105D0)) (list (list 3.0D0 1803.134521484375D0 0.00613543763756752D0 0.20999999344348908D0)) (list (list 3.0D0 1803.3565673828125D0 0.006080533843487501D0 0.2199999988079071D0)) (list (list 3.0D0 1803.41455078125D0 0.006123302970081568D0 0.22999998927116394D0)) (list (list 3.0D0 1803.41552734375D0 0.006292217411100864D0 0.23999999463558197D0)) (list (list 3.0D0 1803.63916015625D0 0.006645688787102699D0 0.25D0)) (list (list 3.0D0 1804.150634765625D0 0.007451040204614401D0 0.25999999046325684D0)) (list (list 3.0D0 1804.5355224609375D0 0.008661572821438313D0 0.26999998092651367D0)) (list (list 3.0D0 1804.8509521484375D0 0.01011212170124054D0 0.2800000011920929D0)) (list (list 3.0D0 1805.200439453125D0 0.011582049541175366D0 0.28999999165534973D0)) (list (list 3.0D0 1805.727294921875D0 0.012794987298548222D0 0.29999998211860657D0)) (list (list 3.0D0 1806.394775390625D0 0.013350501656532288D0 0.3100000023841858D0)) (list (list 3.0D0 1806.9302978515625D0 0.013564588502049446D0 0.3199999928474426D0)) (list (list 3.0D0 1807.2808837890625D0 0.013701423071324826D0 0.32999998331069947D0)) (list (list 3.0D0 1807.4583740234375D0 0.01392726693302393D0 0.3400000035762787D0)) (list (list 3.0D0 1807.53271484375D0 0.014325561001896859D0 0.3499999940395355D0)) (list (list 3.0D0 1807.585205078125D0 0.014684149995446206D0 0.35999998450279236D0)) (list (list 3.0D0 1807.5865478515625D0 0.014823971316218377D0 0.3700000047683716D0)) (list (list 3.0D0 1807.50732421875D0 0.014774556271731854D0 0.3799999952316284D0)) (list (list 3.0D0 1807.3583984375D0 0.014581526629626751D0 0.38999998569488526D0)) (list (list 3.0D0 1807.1856689453125D0 0.014308254234492779D0 0.3999999761581421D0)) (list (list 3.0D0 1807.0699462890625D0 0.014004621654748917D0 0.4099999964237213D0)) (list (list 3.0D0 1806.866455078125D0 0.013824780471622944D0 0.41999998688697815D0)) (list (list 3.0D0 1806.48291015625D0 0.013877064920961857D0 0.429999977350235D0)) (list (list 3.0D0 1805.9254150390625D0 0.01418109331279993D0 0.4399999976158142D0)) (list (list 3.0D0 1805.2860107421875D0 0.014673825353384018D0 0.44999998807907105D0)) (list (list 3.0D0 1804.8385009765625D0 0.014959762804210186D0 0.4599999785423279D0)) (list (list 3.0D0 1804.6158447265625D0 0.014841222204267979D0 0.4699999988079071D0)) (list (list 3.0D0 1804.5599365234375D0 0.014382441528141499D0 0.47999998927116394D0)) (list (list 3.0D0 1804.6302490234375D0 0.013689596205949784D0 0.4899999797344208D0)) (list (list 3.0D0 1804.7923583984375D0 0.012915183790028096D0 0.5D0)) (list (list 3.0D0 1804.891357421875D0 0.012332922779023648D0 0.5099999904632568D0)) (list (list 3.0D0 1804.8031005859375D0 0.012066874653100968D0 0.5199999809265137D0)) (list (list 3.0D0 1804.5989990234375D0 0.012091758660972119D0 0.5299999713897705D0)) (list (list 3.0D0 1804.3778076171875D0 0.012339514680206776D0 0.5399999618530273D0)) (list (list 3.0D0 1804.2633056640625D0 0.012701555155217648D0 0.550000011920929D0)) (list (list 3.0D0 1804.361083984375D0 0.013117935508489609D0 0.5600000023841858D0)) (list (list 3.0D0 1804.6710205078125D0 0.013598277233541012D0 0.5699999928474426D0)) (list (list 3.0D0 1805.162109375D0 0.01411533635109663D0 0.5799999833106995D0)) (list (list 3.0D0 1805.7388916015625D0 0.014610986225306988D0 0.5899999737739563D0)) (list (list 3.0D0 1806.247802734375D0 0.015000767074525357D0 0.5999999642372131D0)) (list (list 3.0D0 1806.4254150390625D0 0.015139731578528881D0 0.6100000143051148D0)) (list (list 3.0D0 1806.4263916015625D0 0.01510907057672739D0 0.6200000047683716D0)) (list (list 3.0D0 1806.37548828125D0 0.014969571493566037D0 0.6299999952316284D0)) (list (list 3.0D0 1806.326171875D0 0.01477402076125145D0 0.6399999856948853D0)) (list (list 3.0D0 1806.28076171875D0 0.014575714245438576D0 0.6499999761581421D0)) (list (list 3.0D0 1806.1312255859375D0 0.014469936490058899D0 0.6599999666213989D0)) (list (list 3.0D0 1805.9290771484375D0 0.014488635584712029D0 0.6699999570846558D0)) (list (list 3.0D0 1805.71484375D0 0.014601007103919983D0 0.6800000071525574D0)) (list (list 3.0D0 1805.4920654296875D0 0.014762362465262413D0 0.6899999976158142D0)) (list (list 3.0D0 1805.241943359375D0 0.014911243692040444D0 0.699999988079071D0)) (list (list 3.0D0 1805.021728515625D0 0.014900232665240765D0 0.7099999785423279D0)) (list (list 3.0D0 1804.924072265625D0 0.014687341637909413D0 0.7199999690055847D0)) (list (list 3.0D0 1804.8681640625D0 0.014343468472361565D0 0.7299999594688416D0)) (list (list 3.0D0 1804.740478515625D0 0.013955945149064064D0 0.7400000095367432D0)) (list (list 3.0D0 1804.402099609375D0 0.013627294450998307D0 0.75D0)) (list (list 3.0D0 1803.71533203125D0 0.013396289199590683D0 0.7599999904632568D0)) (list (list 3.0D0 1802.9722900390625D0 0.013120772317051888D0 0.7699999809265137D0))) (list (list (list 3.0D0 1802.3861083984375D0 0.012739649042487145D0 0.7799999713897705D0)) (list (list 3.0D0 1802.01220703125D0 0.012238108552992344D0 0.7899999618530273D0)) (list (list 3.0D0 1801.795166015625D0 0.011635650880634785D0 0.7999999523162842D0)) (list (list 3.0D0 1801.58203125D0 0.010962341912090779D0 0.8100000023841858D0)) (list (list 3.0D0 1801.4151611328125D0 0.01028713770210743D0 0.8199999928474426D0)) (list (list 3.0D0 1801.32763671875D0 0.009661979973316193D0 0.8299999833106995D0)) (list (list 3.0D0 1801.3231201171875D0 0.009115314111113549D0 0.8399999737739563D0)) (list (list 3.0D0 1801.38427734375D0 0.00865881983190775D0 0.8499999642372131D0)) (list (list 3.0D0 1801.52587890625D0 0.008294778876006604D0 0.85999995470047D0)) (list (list 3.0D0 1801.6473388671875D0 0.008015057072043419D0 0.8700000047683716D0)) (list (list 3.0D0 1801.6239013671875D0 0.007830164395272732D0 0.8799999952316284D0)) (list (list 3.0D0 1801.4222412109375D0 0.007739990949630737D0 0.8899999856948853D0)) (list (list 3.0D0 1801.08056640625D0 0.007732389960438013D0 0.8999999761581421D0)) (list (list 3.0D0 1800.84765625D0 0.007765697780996561D0 0.9099999666213989D0)) (list (list 3.0D0 1800.891357421875D0 0.007797576487064362D0 0.9199999570846558D0)) (list (list 3.0D0 1801.099853515625D0 0.007847695611417294D0 0.9300000071525574D0)) (list (list 3.0D0 1801.35302734375D0 0.007927687838673592D0 0.9399999976158142D0)) (list (list 3.0D0 1801.516357421875D0 0.0080430768430233D0 0.949999988079071D0)) (list (list 3.0D0 1801.437744140625D0 0.008185229264199734D0 0.9599999785423279D0)) (list (list 3.0D0 1801.2354736328125D0 0.008379567414522171D0 0.9699999690055847D0)) (list (list 3.0D0 1800.9622802734375D0 0.008620536886155606D0 0.9799999594688416D0)) (list (list 3.0D0 1800.6566162109375D0 0.008873475715517998D0 0.9899999499320984D0)) (list (list 3.0D0 1800.3564453125D0 0.009084589779376984D0 1.0D0)) (list (list 3.0D0 1800.1683349609375D0 0.009206884540617466D0 1.0099999904632569D0)) (list (list 3.0D0 1800.10986328125D0 0.009374858811497689D0 1.0199999809265137D0)) (list (list 3.0D0 1800.091064453125D0 0.00969343539327383D0 1.0299999713897705D0)) (list (list 3.0D0 1800.0546875D0 0.010211783461272717D0 1.0399999618530274D0)) (list (list 3.0D0 1799.9671630859375D0 0.010935598984360695D0 1.0499999523162842D0)) (list (list 3.0D0 1799.940185546875D0 0.011768973432481289D0 1.059999942779541D0)) (list (list 3.0D0 1800.0469970703125D0 0.012491912581026554D0 1.0699999332427979D0)) (list (list 3.0D0 1800.2279052734375D0 0.013037795200943947D0 1.0799999237060547D0)) (list (list 3.0D0 1800.44921875D0 0.013389174826443196D0 1.090000033378601D0)) (list (list 3.0D0 1800.685791015625D0 0.013565120287239552D0 1.100000023841858D0)) (list (list 3.0D0 1800.889404296875D0 0.013604167848825455D0 1.1100000143051148D0)) (list (list 3.0D0 1800.890380859375D0 0.013598794117569924D0 1.1200000047683716D0)) (list (list 3.0D0 1800.666259765625D0 0.013590755872428418D0 1.1299999952316285D0)) (list (list 3.0D0 1800.2696533203125D0 0.013590844348073006D0 1.1399999856948853D0)) (list (list 3.0D0 1799.81005859375D0 0.013586306013166905D0 1.149999976158142D0)) (list (list 3.0D0 1799.4764404296875D0 0.013444045558571816D0 1.159999966621399D0)) (list (list 3.0D0 1799.281005859375D0 0.01309373788535595D0 1.1699999570846558D0)) (list (list 3.0D0 1799.1533203125D0 0.012593497522175312D0 1.1799999475479126D0)) (list (list 3.0D0 1799.0404052734375D0 0.012005099095404148D0 1.1899999380111695D0)) (list (list 3.0D0 1798.8994140625D0 0.011397053487598896D0 1.1999999284744263D0)) (list (list 3.0D0 1798.7703857421875D0 0.010781427845358849D0 1.209999918937683D0)) (list (list 3.0D0 1798.7154541015625D0 0.01008541602641344D0 1.2200000286102295D0)) (list (list 3.0D0 1798.7100830078125D0 0.009334567002952099D0 1.2300000190734864D0)) (list (list 3.0D0 1798.727783203125D0 0.00860346294939518D0 1.2400000095367432D0)) (list (list 3.0D0 1798.74072265625D0 0.008000719361007214D0 1.25D0)) (list (list 3.0D0 1798.75732421875D0 0.0077218967489898205D0 1.2599999904632569D0)) (list (list 3.0D0 1798.73388671875D0 0.00767811993137002D0 1.2699999809265137D0)) (list (list 3.0D0 1798.680908203125D0 0.007746522780507803D0 1.2799999713897705D0)) (list (list 3.0D0 1798.62841796875D0 0.007868302054703236D0 1.2899999618530274D0)) (list (list 3.0D0 1798.612548828125D0 0.008019184693694115D0 1.2999999523162842D0)) (list (list 3.0D0 1798.59375D0 0.008314586244523526D0 1.309999942779541D0)) (list (list 3.0D0 1798.484130859375D0 0.008871033787727356D0 1.3199999332427979D0)) (list (list 3.0D0 1798.310546875D0 0.009702288545668126D0 1.3299999237060547D0)) (list (list 3.0D0 1798.1041259765625D0 0.010782962664961815D0 1.3399999141693116D0)) (list (list 3.0D0 1797.90380859375D0 0.012043731287121773D0 1.350000023841858D0)) (list (list 3.0D0 1797.7913818359375D0 0.01328173466026783D0 1.3600000143051148D0)) (list (list 3.0D0 1797.8204345703125D0 0.014263249933719635D0 1.3700000047683716D0)) (list (list 3.0D0 1797.963134765625D0 0.014967212453484536D0 1.3799999952316285D0)) (list (list 3.0D0 1798.201416015625D0 0.015424156561493874D0 1.3899999856948853D0)) (list (list 3.0D0 1798.512451171875D0 0.015706319361925125D0 1.399999976158142D0)) (list (list 3.0D0 1798.8507080078125D0 0.01591380499303341D0 1.409999966621399D0)) (list (list 3.0D0 1799.059814453125D0 0.016121724620461464D0 1.4199999570846558D0)) (list (list 3.0D0 1799.1116943359375D0 0.01633208431303501D0 1.4299999475479126D0)) (list (list 3.0D0 1799.0484619140625D0 0.016537286341190338D0 1.4399999380111695D0)) (list (list 3.0D0 1798.9542236328125D0 0.016726147383451462D0 1.4499999284744263D0)) (list (list 3.0D0 1798.9364013671875D0 0.016897598281502724D0 1.459999918937683D0)) (list (list 3.0D0 1798.943359375D0 0.017053809016942978D0 1.46999990940094D0)) (list (list 3.0D0 1798.9378662109375D0 0.017138777300715447D0 1.4800000190734864D0)) (list (list 3.0D0 1798.8916015625D0 0.017086811363697052D0 1.4900000095367432D0)) (list (list 3.0D0 1798.77734375D0 0.01683308184146881D0 1.5D0)) (list (list 3.0D0 1798.528564453125D0 0.016322549432516098D0 1.5099999904632569D0)) (list (list 3.0D0 1798.2265625D0 0.01566305197775364D0 1.5199999809265137D0)) (list (list 3.0D0 1797.9339599609375D0 0.014887352474033833D0 1.5299999713897705D0)) (list (list 3.0D0 1797.6585693359375D0 0.01402786560356617D0 1.5399999618530274D0)) (list (list 3.0D0 1797.3853759765625D0 0.013131536543369294D0 1.5499999523162842D0)) (list (list 3.0D0 1797.1134033203125D0 0.012333575636148453D0 1.559999942779541D0)) (list (list 3.0D0 1796.8875732421875D0 0.011665635742247105D0 1.5699999332427979D0)) (list (list 3.0D0 1796.695068359375D0 0.011041952297091484D0 1.5799999237060547D0)) (list (list 3.0D0 1796.569091796875D0 0.010417443700134755D0 1.5899999141693116D0)) (list (list 3.0D0 1796.558349609375D0 0.009771885350346566D0 1.5999999046325684D0)) (list (list 3.0D0 1796.696044921875D0 0.009200041182339192D0 1.6100000143051148D0)) (list (list 3.0D0 1796.7451171875D0 0.00881276186555624D0 1.6200000047683716D0)) (list (list 3.0D0 1796.69384765625D0 0.008611009456217289D0 1.6299999952316285D0)) (list (list 3.0D0 1796.59033203125D0 0.008590257726609707D0 1.6399999856948853D0)) (list (list 3.0D0 1796.49462890625D0 0.00873534195125103D0 1.649999976158142D0)) (list (list 3.0D0 1796.287109375D0 0.009060063399374485D0 1.659999966621399D0)) (list (list 3.0D0 1795.9588623046875D0 0.009547555819153786D0 1.6699999570846558D0)) (list (list 3.0D0 1795.732421875D0 0.010166036896407605D0 1.6799999475479126D0)) (list (list 3.0D0 1795.7298583984375D0 0.010889342986047268D0 1.6899999380111695D0)) (list (list 3.0D0 1796.0126953125D0 0.011693348176777363D0 1.6999999284744263D0)) (list (list 3.0D0 1796.4979248046875D0 0.012630434706807137D0 1.709999918937683D0)) (list (list 3.0D0 1796.99072265625D0 0.013826217502355576D0 1.71999990940094D0)) (list (list 3.0D0 1797.4464111328125D0 0.01526668481528759D0 1.7300000190734864D0)) (list (list 3.0D0 1797.86376953125D0 0.016843153163790703D0 1.7400000095367432D0)) (list (list 3.0D0 1798.263671875D0 0.018374333158135414D0 1.75D0)) (list (list 3.0D0 1798.6982421875D0 0.019454922527074814D0 1.7599999904632569D0)) (list (list 3.0D0 1799.1529541015625D0 0.01996987871825695D0 1.7699999809265137D0)) (list (list 3.0D0 1799.5914306640625D0 0.02008477784693241D0 1.7799999713897705D0)) (list (list 3.0D0 1799.985107421875D0 0.01992405578494072D0 1.7899999618530274D0)) (list (list 3.0D0 1800.306640625D0 0.01961461640894413D0 1.7999999523162842D0)) (list (list 3.0D0 1800.501708984375D0 0.019229697063565254D0 1.809999942779541D0)) (list (list 3.0D0 1800.519775390625D0 0.018737679347395897D0 1.8199999332427979D0)) (list (list 3.0D0 1800.36669921875D0 0.01814298704266548D0 1.8299999237060547D0)) (list (list 3.0D0 1800.0731201171875D0 0.01748289354145527D0 1.8399999141693116D0)) (list (list 3.0D0 1799.6884765625D0 0.016812270507216454D0 1.8499999046325684D0)) (list (list 3.0D0 1799.2645263671875D0 0.01618720032274723D0 1.8600000143051148D0)) (list (list 3.0D0 1798.8109130859375D0 0.015541130676865578D0 1.8700000047683716D0)) (list (list 3.0D0 1798.3406982421875D0 0.014858080074191094D0 1.8799999952316285D0)) (list (list 3.0D0 1797.8770751953125D0 0.014200334437191487D0 1.8899999856948853D0)) (list (list 3.0D0 1797.454345703125D0 0.013674135319888592D0 1.899999976158142D0)) (list (list 3.0D0 1797.1705322265625D0 0.013522999361157418D0 1.909999966621399D0)) (list (list 3.0D0 1797.0706787109375D0 0.0137888602912426D0 1.9199999570846558D0)) (list (list 3.0D0 1797.123046875D0 0.014332659542560578D0 1.9299999475479126D0)) (list (list 3.0D0 1797.2911376953125D0 0.015031306073069573D0 1.9399999380111695D0)) (list (list 3.0D0 1797.5189208984375D0 0.01574769988656044D0 1.9499999284744263D0)) (list (list 3.0D0 1797.6763916015625D0 0.016309373080730438D0 1.959999918937683D0)) (list (list 3.0D0 1797.7119140625D0 0.01665971428155899D0 1.96999990940094D0)) (list (list 3.0D0 1797.6787109375D0 0.01682695560157299D0 1.9799998998641968D0)) (list (list 3.0D0 1797.6068115234375D0 0.0168301984667778D0 1.9900000095367432D0)) (list (list 3.0D0 1797.5186767578125D0 0.01669895462691784D0 2.0D0)) (list (list 3.0D0 1797.4061279296875D0 0.016479069367051125D0 2.009999990463257D0)) (list (list 3.0D0 1797.2537841796875D0 0.016258755698800087D0 2.0199999809265137D0)) (list (list 3.0D0 1797.0504150390625D0 0.0160683486610651D0 2.0299999713897705D0)) (list (list 3.0D0 1796.8170166015625D0 0.015912601724267006D0 2.0399999618530274D0)) (list (list 3.0D0 1796.600830078125D0 0.015783246606588364D0 2.049999952316284D0)) (list (list 3.0D0 1796.55615234375D0 0.01564955711364746D0 2.059999942779541D0)) (list (list 3.0D0 1796.7218017578125D0 0.015532835386693478D0 2.069999933242798D0)) (list (list 3.0D0 1796.9493408203125D0 0.015500199049711228D0 2.0799999237060547D0)) (list (list 3.0D0 1797.1190185546875D0 0.015584866516292096D0 2.0899999141693116D0)) (list (list 3.0D0 1797.1273193359375D0 0.015798434615135193D0 2.0999999046325684D0)) (list (list 3.0D0 1796.9302978515625D0 0.016116561368107796D0 2.109999895095825D0)) (list (list 3.0D0 1796.8260498046875D0 0.016468359157443047D0 2.119999885559082D0)) (list (list 3.0D0 1796.924072265625D0 0.016837118193507195D0 2.129999876022339D0)) (list (list 3.0D0 1797.1680908203125D0 0.01722615957260132D0 2.1399998664855957D0)) (list (list 3.0D0 1797.4307861328125D0 0.017640555277466774D0 2.1499998569488526D0)) (list (list 3.0D0 1797.50927734375D0 0.018063804134726525D0 2.1599998474121094D0)) (list (list 3.0D0 1797.526123046875D0 0.01843741163611412D0 2.169999837875366D0)) (list (list 3.0D0 1797.611328125D0 0.018683068454265595D0 2.180000066757202D0)) (list (list 3.0D0 1797.7923583984375D0 0.018738577142357826D0 2.190000057220459D0)) (list (list 3.0D0 1798.04541015625D0 0.018563145771622658D0 2.200000047683716D0)) (list (list 3.0D0 1798.232666015625D0 0.018158866092562676D0 2.2100000381469727D0)) (list (list 3.0D0 1798.2147216796875D0 0.01766703650355339D0 2.2200000286102295D0)) (list (list 3.0D0 1798.064208984375D0 0.01714719645678997D0 2.2300000190734864D0)) (list (list 3.0D0 1797.8773193359375D0 0.016623586416244507D0 2.240000009536743D0)) (list (list 3.0D0 1797.74853515625D0 0.016121605411171913D0 2.25D0)) (list (list 3.0D0 1797.6815185546875D0 0.015735255554318428D0 2.259999990463257D0)) (list (list 3.0D0 1797.518798828125D0 0.015540647320449353D0 2.2699999809265137D0)) (list (list 3.0D0 1797.275146484375D0 0.015468371100723744D0 2.2799999713897705D0)) (list (list 3.0D0 1797.01904296875D0 0.015448165126144886D0 2.2899999618530274D0)) (list (list 3.0D0 1796.836181640625D0 0.015410187654197216D0 2.299999952316284D0)) (list (list 3.0D0 1796.813232421875D0 0.015323217958211899D0 2.309999942779541D0)) (list (list 3.0D0 1796.806396484375D0 0.01526047196239233D0 2.319999933242798D0)) (list (list 3.0D0 1796.7071533203125D0 0.015220112167298794D0 2.3299999237060547D0)) (list (list 3.0D0 1796.5245361328125D0 0.015184571966528893D0 2.3399999141693116D0)) (list (list 3.0D0 1796.3157958984375D0 0.015139850787818432D0 2.3499999046325684D0)) (list (list 3.0D0 1796.214599609375D0 0.015125703066587448D0 2.359999895095825D0)) (list (list 3.0D0 1796.2294921875D0 0.015245086513459683D0 2.369999885559082D0)) (list (list 3.0D0 1796.3253173828125D0 0.015472659841179848D0 2.379999876022339D0)) (list (list 3.0D0 1796.4625244140625D0 0.015770750120282173D0 2.3899998664855957D0)) (list (list 3.0D0 1796.5927734375D0 0.01609640195965767D0 2.3999998569488526D0)) (list (list 3.0D0 1796.643798828125D0 0.01642712391912937D0 2.4099998474121094D0)) (list (list 3.0D0 1796.7042236328125D0 0.01676555722951889D0 2.419999837875366D0)) (list (list 3.0D0 1796.8271484375D0 0.0170594472438097D0 2.429999828338623D0)) (list (list 3.0D0 1796.988525390625D0 0.017255544662475586D0 2.440000057220459D0)) (list (list 3.0D0 1797.1378173828125D0 0.017306705936789513D0 2.450000047683716D0)) (list (list 3.0D0 1797.1993408203125D0 0.017170434817671776D0 2.4600000381469727D0)) (list (list 3.0D0 1797.2515869140625D0 0.016943469643592835D0 2.4700000286102295D0)) (list (list 3.0D0 1797.318115234375D0 0.016714313998818398D0 2.4800000190734864D0)) (list (list 3.0D0 1797.36328125D0 0.016528835520148278D0 2.490000009536743D0)) (list (list 3.0D0 1797.330810546875D0 0.016418403014540673D0 2.5D0)) (list (list 3.0D0 1797.120849609375D0 0.016402432695031166D0 2.509999990463257D0)) (list (list 3.0D0 1796.7841796875D0 0.016384851187467575D0 2.5199999809265137D0)) (list (list 3.0D0 1796.4361572265625D0 0.01624491810798645D0 2.5299999713897705D0)) (list (list 3.0D0 1796.1317138671875D0 0.01592191681265831D0 2.5399999618530274D0)) (list (list 3.0D0 1795.899658203125D0 0.01540239155292511D0 2.549999952316284D0)) (list (list 3.0D0 1795.713134765625D0 0.014796080067753792D0 2.559999942779541D0)) (list (list 3.0D0 1795.5462646484375D0 0.014339796267449856D0 2.569999933242798D0)) (list (list 3.0D0 1795.4022216796875D0 0.014051535166800022D0 2.5799999237060547D0)) (list (list 3.0D0 1795.294921875D0 0.013893838040530682D0 2.5899999141693116D0)) (list (list 3.0D0 1795.2451171875D0 0.01380816102027893D0 2.5999999046325684D0)) (list (list 3.0D0 1795.3067626953125D0 0.013738644309341908D0 2.609999895095825D0)) (list (list 3.0D0 1795.4442138671875D0 0.013700745068490506D0 2.619999885559082D0)) (list (list 3.0D0 1795.569091796875D0 0.013712605461478234D0 2.629999876022339D0)) (list (list 3.0D0 1795.663818359375D0 0.013765240088105202D0 2.6399998664855957D0)) (list (list 3.0D0 1795.730224609375D0 0.013835002668201924D0 2.6499998569488526D0)) (list (list 3.0D0 1795.780517578125D0 0.013866624794900418D0 2.6599998474121094D0)) (list (list 3.0D0 1795.7603759765625D0 0.013835475780069828D0 2.669999837875366D0)) (list (list 3.0D0 1795.7166748046875D0 0.01379241980612278D0 2.679999828338623D0)) (list (list 3.0D0 1795.6920166015625D0 0.013783210888504982D0 2.690000057220459D0)) (list (list 3.0D0 1795.70849609375D0 0.013852037489414215D0 2.700000047683716D0)) (list (list 3.0D0 1795.6937255859375D0 0.014051314443349839D0 2.7100000381469727D0)) (list (list 3.0D0 1795.5726318359375D0 0.014329049736261368D0 2.7200000286102295D0)) (list (list 3.0D0 1795.45263671875D0 0.014566936530172825D0 2.7300000190734864D0)) (list (list 3.0D0 1795.4071044921875D0 0.014698727987706662D0 2.740000009536743D0)) (list (list 3.0D0 1795.4735107421875D0 0.014686753042042256D0 2.75D0)) (list (list 3.0D0 1795.567626953125D0 0.014548048377037049D0 2.759999990463257D0)) (list (list 3.0D0 1795.5308837890625D0 0.014361383393406868D0 2.7699999809265137D0)) (list (list 3.0D0 1795.4447021484375D0 0.014154735952615738D0 2.7799999713897705D0)) (list (list 3.0D0 1795.4090576171875D0 0.013950495980679989D0 2.7899999618530274D0)) (list (list 3.0D0 1795.50439453125D0 0.013770313933491707D0 2.799999952316284D0)) (list (list 3.0D0 1795.715087890625D0 0.013638566248118878D0 2.809999942779541D0)) (list (list 3.0D0 1795.77734375D0 0.01344983745366335D0 2.819999933242798D0)) (list (list 3.0D0 1795.6259765625D0 0.013127844780683518D0 2.8299999237060547D0)) (list (list 3.0D0 1795.3277587890625D0 0.012697571888566018D0 2.8399999141693116D0)) (list (list 3.0D0 1794.9990234375D0 0.012228176929056645D0 2.8499999046325684D0)) (list (list 3.0D0 1794.8218994140625D0 0.011872018687427044D0 2.859999895095825D0)) (list (list 3.0D0 1794.830078125D0 0.011681069619953633D0 2.869999885559082D0)) (list (list 3.0D0 1794.9354248046875D0 0.011571780778467656D0 2.879999876022339D0)) (list (list 3.0D0 1795.062255859375D0 0.011526692658662796D0 2.8899998664855957D0)) (list (list 3.0D0 1795.1373291015625D0 0.011552449315786362D0 2.8999998569488526D0)) (list (list 3.0D0 1795.09130859375D0 0.011728920973837376D0 2.9099998474121094D0)) (list (list 3.0D0 1795.0147705078125D0 0.012037941254675389D0 2.919999837875366D0)) (list (list 3.0D0 1794.966552734375D0 0.012344850227236748D0 2.929999828338623D0)) (list (list 3.0D0 1794.9310302734375D0 0.012583217583596707D0 2.93999981880188D0)) (list (list 3.0D0 1794.884033203125D0 0.012723025865852833D0 2.950000047683716D0)) (list (list 3.0D0 1794.8284912109375D0 0.0128189567476511D0 2.9600000381469727D0)) (list (list 3.0D0 1794.829345703125D0 0.013000876642763615D0 2.9700000286102295D0)) (list (list 3.0D0 1794.8369140625D0 0.013242662884294987D0 2.9800000190734864D0)) (list (list 3.0D0 1794.8094482421875D0 0.013478366658091545D0 2.990000009536743D0)) (list (list 3.0D0 1794.7227783203125D0 0.01363123394548893D0 3.0D0)) (list (list 3.0D0 1794.6075439453125D0 0.013602646067738533D0 3.009999990463257D0)) (list (list 3.0D0 1794.5374755859375D0 0.013385247439146042D0 3.0199999809265137D0)) (list (list 3.0D0 1794.512451171875D0 0.013044510036706925D0 3.0299999713897705D0)) (list (list 3.0D0 1794.5184326171875D0 0.012621701695024968D0 3.0399999618530274D0)) (list (list 3.0D0 1794.53125D0 0.012159333564341069D0 3.049999952316284D0)) (list (list 3.0D0 1794.5029296875D0 0.011702201329171658D0 3.059999942779541D0)) (list (list 3.0D0 1794.5341796875D0 0.011273014359176159D0 3.069999933242798D0)) (list (list 3.0D0 1794.721435546875D0 0.010884791612625122D0 3.0799999237060547D0)) (list (list 3.0D0 1794.9898681640625D0 0.010566296987235546D0 3.0899999141693116D0)) (list (list 3.0D0 1795.2010498046875D0 0.010342544876039029D0 3.0999999046325684D0)) (list (list 3.0D0 1795.0849609375D0 0.010233305394649506D0 3.109999895095825D0)) (list (list 3.0D0 1794.7828369140625D0 0.010181555524468422D0 3.119999885559082D0)) (list (list 3.0D0 1794.5506591796875D0 0.010102430358529091D0 3.129999876022339D0)) (list (list 3.0D0 1794.4302978515625D0 0.009962226264178753D0 3.1399998664855957D0)) (list (list 3.0D0 1794.3970947265625D0 0.009754152968525887D0 3.1499998569488526D0)) (list (list 3.0D0 1794.32666015625D0 0.009528093039989472D0 3.1599998474121094D0)) (list (list 3.0D0 1794.197021484375D0 0.009382965043187142D0 3.169999837875366D0)) (list (list 3.0D0 1794.105224609375D0 0.009330890141427517D0 3.179999828338623D0)) (list (list 3.0D0 1794.0938720703125D0 0.009379174560308457D0 3.18999981880188D0)) (list (list 3.0D0 1794.1661376953125D0 0.009528111666440964D0 3.1999998092651367D0)) (list (list 3.0D0 1794.229736328125D0 0.009779548272490502D0 3.2100000381469727D0)) (list (list 3.0D0 1794.1263427734375D0 0.010036876425147057D0 3.2200000286102295D0)) (list (list 3.0D0 1793.9228515625D0 0.010187544859945774D0 3.2300000190734864D0)) (list (list 3.0D0 1793.7353515625D0 0.01018989272415638D0 3.240000009536743D0)) (list (list 3.0D0 1793.675537109375D0 0.010041262954473496D0 3.25D0)) (list (list 3.0D0 1793.8240966796875D0 0.009806777350604535D0 3.259999990463257D0)) (list (list 3.0D0 1794.029296875D0 0.009624531492590905D0 3.2699999809265137D0)) (list (list 3.0D0 1794.13720703125D0 0.009489831514656544D0 3.2799999713897705D0)) (list (list 3.0D0 1794.074951171875D0 0.009377427399158478D0 3.2899999618530274D0)) (list (list 3.0D0 1793.8134765625D0 0.009275480173528195D0 3.299999952316284D0)) (list (list 3.0D0 1793.391845703125D0 0.0092351408675313D0 3.309999942779541D0)) (list (list 3.0D0 1793.0806884765625D0 0.00935055036097765D0 3.319999933242798D0)) (list (list 3.0D0 1793.0430908203125D0 0.009549446403980255D0 3.3299999237060547D0)) (list (list 3.0D0 1793.248046875D0 0.009775417856872082D0 3.3399999141693116D0)) (list (list 3.0D0 1793.58984375D0 0.009983227588236332D0 3.3499999046325684D0)) (list (list 3.0D0 1793.8433837890625D0 0.010160085745155812D0 3.359999895095825D0)) (list (list 3.0D0 1793.953125D0 0.010343872010707856D0 3.369999885559082D0)) (list (list 3.0D0 1794.0340576171875D0 0.010509020648896695D0 3.379999876022339D0)) (list (list 3.0D0 1794.16162109375D0 0.01063474826514721D0 3.3899998664855957D0)) (list (list 3.0D0 1794.381591796875D0 0.010721122846007347D0 3.3999998569488526D0)) (list (list 3.0D0 1794.6746826171875D0 0.010827657766640187D0 3.4099998474121094D0)) (list (list 3.0D0 1794.8170166015625D0 0.011069800704717636D0 3.419999837875366D0)) (list (list 3.0D0 1794.771484375D0 0.011369981802999974D0 3.429999828338623D0)) (list (list 3.0D0 1794.6287841796875D0 0.01162537932395935D0 3.43999981880188D0)) (list (list 3.0D0 1794.506103515625D0 0.01174024399369955D0 3.4499998092651367D0)) (list (list 3.0D0 1794.54638671875D0 0.011632479727268219D0 3.4600000381469727D0)) (list (list 3.0D0 1794.626220703125D0 0.01140678022056818D0 3.4700000286102295D0)) (list (list 3.0D0 1794.5885009765625D0 0.011174329556524754D0 3.4800000190734864D0)) (list (list 3.0D0 1794.4208984375D0 0.010953165590763092D0 3.490000009536743D0)) (list (list 3.0D0 1794.1561279296875D0 0.010745684616267681D0 3.5D0)) (list (list 3.0D0 1793.8876953125D0 0.010545339435338974D0 3.509999990463257D0)) (list (list 3.0D0 1793.55712890625D0 0.010361154563724995D0 3.5199999809265137D0)) (list (list 3.0D0 1793.16552734375D0 0.01017867773771286D0 3.5299999713897705D0)) (list (list 3.0D0 1792.79541015625D0 0.00999224092811346D0 3.5399999618530274D0)) (list (list 3.0D0 1792.5115966796875D0 0.009806986898183823D0 3.549999952316284D0)) (list (list 3.0D0 1792.3048095703125D0 0.009657900780439377D0 3.559999942779541D0)) (list (list 3.0D0 1792.052978515625D0 0.009603209793567658D0 3.569999933242798D0)) (list (list 3.0D0 1791.8726806640625D0 0.009581766091287136D0 3.5799999237060547D0)) (list (list 3.0D0 1791.8302001953125D0 0.00952093955129385D0 3.5899999141693116D0)) (list (list 3.0D0 1791.960693359375D0 0.009351123124361039D0 3.5999999046325684D0)) (list (list 3.0D0 1792.25341796875D0 0.00899963453412056D0 3.609999895095825D0)) (list (list 3.0D0 1792.6165771484375D0 0.008546148426830769D0 3.619999885559082D0)) (list (list 3.0D0 1792.847412109375D0 0.00816316157579422D0 3.629999876022339D0)) (list (list 3.0D0 1792.8857421875D0 0.007911047898232937D0 3.6399998664855957D0)) (list (list 3.0D0 1792.7344970703125D0 0.007812085561454296D0 3.6499998569488526D0)) (list (list 3.0D0 1792.498046875D0 0.007842665538191796D0 3.6599998474121094D0)) (list (list 3.0D0 1792.3179931640625D0 0.00797942839562893D0 3.669999837875366D0)) (list (list 3.0D0 1792.259521484375D0 0.00819227285683155D0 3.679999828338623D0)) (list (list 3.0D0 1792.379150390625D0 0.0084155835211277D0 3.68999981880188D0)) (list (list 3.0D0 1792.6717529296875D0 0.008577033877372742D0 3.6999998092651367D0)) (list (list 3.0D0 1792.9918212890625D0 0.008589028380811215D0 3.7099997997283936D0)) (list (list 3.0D0 1793.1749267578125D0 0.008568050339818D0 3.7200000286102295D0)) (list (list 3.0D0 1793.32861328125D0 0.00870388001203537D0 3.7300000190734864D0)) (list (list 3.0D0 1793.4368896484375D0 0.009026923216879368D0 3.740000009536743D0)) (list (list 3.0D0 1793.472412109375D0 0.009499280713498593D0 3.75D0)) (list (list 3.0D0 1793.3988037109375D0 0.009969926439225674D0 3.759999990463257D0)) (list (list 3.0D0 1793.4283447265625D0 0.010269049555063248D0 3.7699999809265137D0)) (list (list 3.0D0 1793.5064697265625D0 0.01044753659516573D0 3.7799999713897705D0)) (list (list 3.0D0 1793.5040283203125D0 0.010527764447033406D0 3.7899999618530274D0)) (list (list 3.0D0 1793.3216552734375D0 0.010521040298044682D0 3.799999952316284D0)) (list (list 3.0D0 1792.9327392578125D0 0.010402277112007141D0 3.809999942779541D0)) (list (list 3.0D0 1792.6126708984375D0 0.010161066427826882D0 3.819999933242798D0)) (list (list 3.0D0 1792.4637451171875D0 0.00987306796014309D0 3.8299999237060547D0)) (list (list 3.0D0 1792.477783203125D0 0.009573448449373246D0 3.8399999141693116D0)) (list (list 3.0D0 1792.594970703125D0 0.009291088208556176D0 3.8499999046325684D0)) (list (list 3.0D0 1792.6673583984375D0 0.009051119908690453D0 3.859999895095825D0)) (list (list 3.0D0 1792.53759765625D0 0.008919481188058854D0 3.869999885559082D0)) (list (list 3.0D0 1792.41748046875D0 0.008942347019910813D0 3.879999876022339D0)) (list (list 3.0D0 1792.457763671875D0 0.009141049347817898D0 3.8899998664855957D0)) (list (list 3.0D0 1792.719970703125D0 0.009510559029877186D0 3.8999998569488526D0)) (list (list 3.0D0 1793.0880126953125D0 0.010011744685471058D0 3.9099998474121094D0)) (list (list 3.0D0 1793.1995849609375D0 0.010466005653142929D0 3.919999837875366D0)) (list (list 3.0D0 1793.1112060546875D0 0.010742614045739174D0 3.929999828338623D0)) (list (list 3.0D0 1792.9617919921875D0 0.010800058953464032D0 3.93999981880188D0)) (list (list 3.0D0 1792.8836669921875D0 0.010638979263603688D0 3.9499998092651367D0)) (list (list 3.0D0 1792.983154296875D0 0.010310767218470574D0 3.9599997997283936D0)) (list (list 3.0D0 1793.080322265625D0 0.010074625723063946D0 3.9700000286102295D0)) (list (list 3.0D0 1793.0614013671875D0 0.010122611187398434D0 3.9800000190734864D0)) (list (list 3.0D0 1792.9862060546875D0 0.010465198196470738D0 3.990000009536743D0)) (list (list 3.0D0 1792.938720703125D0 0.01102041732519865D0 4.0D0)) (list (list 3.0D0 1793.0272216796875D0 0.011555477045476437D0 4.009999752044678D0)) (list (list 3.0D0 1793.1888427734375D0 0.01177227683365345D0 4.019999980926514D0)) (list (list 3.0D0 1793.3841552734375D0 0.011815784499049187D0 4.029999732971191D0)) (list (list 3.0D0 1793.6112060546875D0 0.011811455711722374D0 4.039999961853027D0)) (list (list 3.0D0 1793.847412109375D0 0.011846950277686119D0 4.049999713897705D0)) (list (list 3.0D0 1794.015380859375D0 0.01193169690668583D0 4.059999942779541D0)) (list (list 3.0D0 1794.0635986328125D0 0.011941303499042988D0 4.069999694824219D0)) (list (list 3.0D0 1794.1055908203125D0 0.011893382295966149D0 4.079999923706055D0)) (list (list 3.0D0 1794.12841796875D0 0.011848137713968754D0 4.089999675750732D0)) (list (list 3.0D0 1794.1068115234375D0 0.01186374668031931D0 4.099999904632568D0)) (list (list 3.0D0 1794.004150390625D0 0.011994068510830403D0 4.110000133514404D0)) (list (list 3.0D0 1793.94921875D0 0.012179023586213589D0 4.119999885559082D0)) (list (list 3.0D0 1794.0159912109375D0 0.012298301793634892D0 4.130000114440918D0)) (list (list 3.0D0 1794.166748046875D0 0.012332189828157425D0 4.139999866485596D0)) (list (list 3.0D0 1794.34326171875D0 0.012307814322412014D0 4.150000095367432D0)) (list (list 3.0D0 1794.4632568359375D0 0.012330207042396069D0 4.159999847412109D0)) (list (list 3.0D0 1794.548583984375D0 0.012529402039945126D0 4.170000076293945D0)) (list (list 3.0D0 1794.669189453125D0 0.012793046422302723D0 4.179999828338623D0)) (list (list 3.0D0 1794.8077392578125D0 0.013044201768934727D0 4.190000057220459D0)) (list (list 3.0D0 1794.9241943359375D0 0.013229046016931534D0 4.199999809265137D0)) (list (list 3.0D0 1794.9410400390625D0 0.013328826054930687D0 4.210000038146973D0)) (list (list 3.0D0 1794.806884765625D0 0.01335145067423582D0 4.21999979019165D0)) (list (list 3.0D0 1794.6639404296875D0 0.01329830288887024D0 4.230000019073486D0)) (list (list 3.0D0 1794.64501953125D0 0.013197802938520909D0 4.239999771118164D0)) (list (list 3.0D0 1794.8348388671875D0 0.013104750774800778D0 4.25D0)) (list (list 3.0D0 1795.2449951171875D0 0.013125989586114884D0 4.259999752044678D0)) (list (list 3.0D0 1795.64404296875D0 0.013344762846827507D0 4.269999980926514D0)) (list (list 3.0D0 1795.97802734375D0 0.013648591935634613D0 4.279999732971191D0)) (list (list 3.0D0 1796.3116455078125D0 0.013988083228468895D0 4.289999961853027D0)) (list (list 3.0D0 1796.6793212890625D0 0.014315830543637276D0 4.299999713897705D0)) (list (list 3.0D0 1797.043212890625D0 0.014577866531908512D0 4.309999942779541D0)) (list (list 3.0D0 1797.1961669921875D0 0.014606703072786332D0 4.319999694824219D0)) (list (list 3.0D0 1797.1480712890625D0 0.014384077861905098D0 4.329999923706055D0)) (list (list 3.0D0 1796.9459228515625D0 0.013945972546935082D0 4.339999675750732D0)) (list (list 3.0D0 1796.6326904296875D0 0.013355812057852745D0 4.349999904632568D0)) (list (list 3.0D0 1796.2274169921875D0 0.012709381990134716D0 4.360000133514404D0)) (list (list 3.0D0 1795.7655029296875D0 0.012124983593821526D0 4.369999885559082D0)) (list (list 3.0D0 1795.3231201171875D0 0.011634493246674538D0 4.380000114440918D0)) (list (list 3.0D0 1794.9161376953125D0 0.01124484185129404D0 4.389999866485596D0)) (list (list 3.0D0 1794.56396484375D0 0.010951769538223744D0 4.400000095367432D0)) (list (list 3.0D0 1794.3055419921875D0 0.010742325335741043D0 4.409999847412109D0)) (list (list 3.0D0 1794.20361328125D0 0.01056853961199522D0 4.420000076293945D0)) (list (list 3.0D0 1794.1058349609375D0 0.01041321363300085D0 4.429999828338623D0)) (list (list 3.0D0 1793.9398193359375D0 0.010296209715306759D0 4.440000057220459D0)) (list (list 3.0D0 1793.7169189453125D0 0.01024040300399065D0 4.449999809265137D0)) (list (list 3.0D0 1793.5894775390625D0 0.010276321321725846D0 4.460000038146973D0)) (list (list 3.0D0 1793.8531494140625D0 0.010420646518468857D0 4.46999979019165D0)) (list (list 3.0D0 1794.21484375D0 0.010624408721923828D0 4.480000019073486D0)) (list (list 3.0D0 1794.465087890625D0 0.010813376866281033D0 4.489999771118164D0)) (list (list 3.0D0 1794.4874267578125D0 0.010908241383731366D0 4.5D0)) (list (list 3.0D0 1794.3001708984375D0 0.010812846943736077D0 4.509999752044678D0)) (list (list 3.0D0 1794.146728515625D0 0.010487639345228672D0 4.519999980926514D0)) (list (list 3.0D0 1794.0142822265625D0 0.010079232975840569D0 4.529999732971191D0)) (list (list 3.0D0 1793.8502197265625D0 0.009664425626397133D0 4.539999961853027D0)) (list (list 3.0D0 1793.632080078125D0 0.009301288053393364D0 4.549999713897705D0)) (list (list 3.0D0 1793.3878173828125D0 0.009027324616909027D0 4.559999942779541D0)) (list (list 3.0D0 1793.1497802734375D0 0.008842005394399166D0 4.569999694824219D0)) (list (list 3.0D0 1792.8878173828125D0 0.008695919997990132D0 4.579999923706055D0)) (list (list 3.0D0 1792.6297607421875D0 0.0085509167984128D0 4.589999675750732D0)) (list (list 3.0D0 1792.4315185546875D0 0.008369138464331627D0 4.599999904632568D0)) (list (list 3.0D0 1792.3978271484375D0 0.008108467794954777D0 4.610000133514404D0)) (list (list 3.0D0 1792.6641845703125D0 0.0078074391931295395D0 4.619999885559082D0)) (list (list 3.0D0 1793.01220703125D0 0.007596077397465706D0 4.630000114440918D0)) (list (list 3.0D0 1793.262451171875D0 0.007503792643547058D0 4.639999866485596D0)) (list (list 3.0D0 1793.284423828125D0 0.007525296416133642D0 4.650000095367432D0)) (list (list 3.0D0 1793.005859375D0 0.0076141576282680035D0 4.659999847412109D0)) (list (list 3.0D0 1792.6866455078125D0 0.007761877961456776D0 4.670000076293945D0)) (list (list 3.0D0 1792.5401611328125D0 0.00798756442964077D0 4.679999828338623D0)) (list (list 3.0D0 1792.569580078125D0 0.008299769833683968D0 4.690000057220459D0)) (list (list 3.0D0 1792.7503662109375D0 0.008691861294209957D0 4.699999809265137D0)) (list (list 3.0D0 1793.0386962890625D0 0.009139074943959713D0 4.710000038146973D0)) (list (list 3.0D0 1793.4117431640625D0 0.009596098214387894D0 4.71999979019165D0)) (list (list 3.0D0 1793.7830810546875D0 0.00998518243432045D0 4.730000019073486D0)) (list (list 3.0D0 1794.04296875D0 0.010261003859341145D0 4.739999771118164D0)) (list (list 3.0D0 1794.137451171875D0 0.010411107912659645D0 4.75D0)) (list (list 3.0D0 1794.0875244140625D0 0.010463553480803967D0 4.759999752044678D0)) (list (list 3.0D0 1794.1458740234375D0 0.010522969998419285D0 4.769999980926514D0)) (list (list 3.0D0 1794.3568115234375D0 0.010585222393274308D0 4.779999732971191D0)) (list (list 3.0D0 1794.6373291015625D0 0.010599473491311074D0 4.789999961853027D0)) (list (list 3.0D0 1794.9141845703125D0 0.010536913760006428D0 4.799999713897705D0)) (list (list 3.0D0 1795.1337890625D0 0.010399318300187588D0 4.809999942779541D0)) (list (list 3.0D0 1795.4097900390625D0 0.010305352509021759D0 4.819999694824219D0)) (list (list 3.0D0 1795.74609375D0 0.01027109008282423D0 4.829999923706055D0)) (list (list 3.0D0 1796.0498046875D0 0.010236002504825592D0 4.839999675750732D0)) (list (list 3.0D0 1796.2540283203125D0 0.010143783874809742D0 4.849999904632568D0)) (list (list 3.0D0 1796.3272705078125D0 0.009943688288331032D0 4.859999656677246D0)) (list (list 3.0D0 1796.3670654296875D0 0.009645740501582623D0 4.869999885559082D0)) (list (list 3.0D0 1796.47216796875D0 0.00930804293602705D0 4.880000114440918D0)) (list (list 3.0D0 1796.6546630859375D0 0.008927037008106709D0 4.889999866485596D0)) (list (list 3.0D0 1796.9027099609375D0 0.008488149382174015D0 4.900000095367432D0)) (list (list 3.0D0 1797.1759033203125D0 0.007960882969200611D0 4.909999847412109D0)) (list (list 3.0D0 1797.2158203125D0 0.007326735183596611D0 4.920000076293945D0)) (list (list 3.0D0 1796.904296875D0 0.006706730462610722D0 4.929999828338623D0)) (list (list 3.0D0 1796.322021484375D0 0.006182047072798014D0 4.940000057220459D0)) (list (list 3.0D0 1795.640869140625D0 0.005792766343802214D0 4.949999809265137D0)) (list (list 3.0D0 1795.150390625D0 0.005530614405870438D0 4.960000038146973D0)) (list (list 3.0D0 1795.28515625D0 0.0052958945743739605D0 4.96999979019165D0)) (list (list 3.0D0 1795.6229248046875D0 0.005016304086893797D0 4.980000019073486D0)) (list (list 3.0D0 1795.8890380859375D0 0.00467056967318058D0 4.989999771118164D0)) (list (list 3.0D0 1795.8909912109375D0 0.004261224064975977D0 5.0D0)) (list (list 3.0D0 1795.5257568359375D0 0.003818580647930503D0 5.009999752044678D0)) (list (list 3.0D0 1794.8712158203125D0 0.0034716969821602106D0 5.019999980926514D0)) (list (list 3.0D0 1794.1087646484375D0 0.003233595984056592D0 5.029999732971191D0)) (list (list 3.0D0 1793.3585205078125D0 0.003060263581573963D0 5.039999961853027D0)) (list (list 3.0D0 1792.6907958984375D0 0.002915584249421954D0 5.049999713897705D0)) (list (list 3.0D0 1792.1158447265625D0 0.0027757971547544003D0 5.059999942779541D0)) (list (list 3.0D0 1791.770751953125D0 0.0027562091127038D0 5.069999694824219D0)) (list (list 3.0D0 1791.8621826171875D0 0.002904315246269107D0 5.079999923706055D0)) (list (list 3.0D0 1792.3720703125D0 0.0031872917897999287D0 5.089999675750732D0)) (list (list 3.0D0 1793.172119140625D0 0.003540548263117671D0 5.099999904632568D0)) (list (list 3.0D0 1794.006591796875D0 0.0038622780703008175D0 5.109999656677246D0)) (list (list 3.0D0 1794.6358642578125D0 0.003997068386524916D0 5.119999885559082D0)) (list (list 3.0D0 1795.159423828125D0 0.003965521231293678D0 5.130000114440918D0)) (list (list 3.0D0 1795.5606689453125D0 0.003776323748752475D0 5.139999866485596D0)) (list (list 3.0D0 1795.8619384765625D0 0.0034514691215008498D0 5.150000095367432D0)) (list (list 3.0D0 1796.133544921875D0 0.00302624749019742D0 5.159999847412109D0)) (list (list 3.0D0 1796.2757568359375D0 0.0025936139281839133D0 5.170000076293945D0)) (list (list 3.0D0 1796.0013427734375D0 0.0022434676066040993D0 5.179999828338623D0)) (list (list 3.0D0 1795.3140869140625D0 0.0020103356800973416D0 5.190000057220459D0)) (list (list 3.0D0 1794.3614501953125D0 0.001909197075292468D0 5.199999809265137D0)) (list (list 3.0D0 1793.4525146484375D0 0.0019360287114977837D0 5.210000038146973D0)) (list (list 3.0D0 1793.056640625D0 0.0020752015989273787D0 5.21999979019165D0)) (list (list 3.0D0 1792.94775390625D0 0.002268383512273431D0 5.230000019073486D0)) (list (list 3.0D0 1793.1087646484375D0 0.002477819798514247D0 5.239999771118164D0)) (list (list 3.0D0 1793.509033203125D0 0.0026596910320222378D0 5.25D0)) (list (list 3.0D0 1794.1031494140625D0 0.00276158656924963D0 5.259999752044678D0)) (list (list 3.0D0 1794.22509765625D0 0.0027413559146225453D0 5.269999980926514D0)) (list (list 3.0D0 1793.73828125D0 0.0027274363674223423D0 5.279999732971191D0)) (list (list 3.0D0 1792.9674072265625D0 0.0028070537373423577D0 5.289999961853027D0)) (list (list 3.0D0 1792.2569580078125D0 0.0030236428137868643D0 5.299999713897705D0)) (list (list 3.0D0 1791.9713134765625D0 0.0033742054365575314D0 5.309999942779541D0)) (list (list 3.0D0 1792.203369140625D0 0.003750907490029931D0 5.319999694824219D0)) (list (list 3.0D0 1792.5025634765625D0 0.004055050201714039D0 5.329999923706055D0)) (list (list 3.0D0 1792.742919921875D0 0.004271074663847685D0 5.339999675750732D0)) (list (list 3.0D0 1792.851806640625D0 0.004404433071613312D0 5.349999904632568D0)) (list (list 3.0D0 1792.809326171875D0 0.004481799900531769D0 5.359999656677246D0)) (list (list 3.0D0 1792.701171875D0 0.004585040733218193D0 5.369999885559082D0)) (list (list 3.0D0 1792.6549072265625D0 0.004795443266630173D0 5.380000114440918D0)) (list (list 3.0D0 1792.6029052734375D0 0.005132842808961868D0 5.389999866485596D0)) (list (list 3.0D0 1792.4522705078125D0 0.005580575671046972D0 5.400000095367432D0)) (list (list 3.0D0 1792.082763671875D0 0.006084098480641842D0 5.409999847412109D0)) (list (list 3.0D0 1791.7200927734375D0 0.006536031607538462D0 5.420000076293945D0)) (list (list 3.0D0 1791.7410888671875D0 0.00696936622262001D0 5.429999828338623D0)) (list (list 3.0D0 1792.0631103515625D0 0.007455076556652784D0 5.440000057220459D0)) (list (list 3.0D0 1792.51220703125D0 0.008013594895601273D0 5.449999809265137D0)) (list (list 3.0D0 1792.8221435546875D0 0.008613066747784615D0 5.460000038146973D0)) (list (list 3.0D0 1792.7607421875D0 0.008957508020102978D0 5.46999979019165D0)) (list (list 3.0D0 1792.6514892578125D0 0.008981507271528244D0 5.480000019073486D0)) (list (list 3.0D0 1792.5965576171875D0 0.008759954012930394D0 5.489999771118164D0)) (list (list 3.0D0 1792.6280517578125D0 0.00839248113334179D0 5.5D0)) (list (list 3.0D0 1792.7076416015625D0 0.00800295453518629D0 5.509999752044678D0)) (list (list 3.0D0 1792.882568359375D0 0.007701805327087641D0 5.519999980926514D0)) (list (list 3.0D0 1793.2271728515625D0 0.00753105990588665D0 5.529999732971191D0)) (list (list 3.0D0 1793.5841064453125D0 0.007556277792900801D0 5.539999961853027D0)) (list (list 3.0D0 1793.8175048828125D0 0.007798163220286369D0 5.549999713897705D0)) (list (list 3.0D0 1793.8134765625D0 0.008232579566538334D0 5.559999942779541D0)) (list (list 3.0D0 1793.769287109375D0 0.008720474317669869D0 5.569999694824219D0)) (list (list 3.0D0 1793.8995361328125D0 0.009183228947222233D0 5.579999923706055D0)) (list (list 3.0D0 1794.09814453125D0 0.009642893448472023D0 5.589999675750732D0)) (list (list 3.0D0 1794.2745361328125D0 0.01008942723274231D0 5.599999904632568D0)) (list (list 3.0D0 1794.3536376953125D0 0.010481414385139943D0 5.609999656677246D0)) (list (list 3.0D0 1794.3828125D0 0.010687676258385182D0 5.619999885559082D0)) (list (list 3.0D0 1794.416748046875D0 0.010775565169751645D0 5.62999963760376D0)) (list (list 3.0D0 1794.4273681640625D0 0.010768403299152851D0 5.639999866485596D0)) (list (list 3.0D0 1794.4178466796875D0 0.010674681514501572D0 5.650000095367432D0)) (list (list 3.0D0 1794.4212646484375D0 0.010490297339856625D0 5.659999847412109D0)) (list (list 3.0D0 1794.5384521484375D0 0.010271308943629265D0 5.670000076293945D0)) (list (list 3.0D0 1794.6927490234375D0 0.010129982605576516D0 5.679999828338623D0)) (list (list 3.0D0 1794.8372802734375D0 0.010064131580293179D0 5.690000057220459D0)) (list (list 3.0D0 1794.9603271484375D0 0.010056189261376858D0 5.699999809265137D0)) (list (list 3.0D0 1795.0814208984375D0 0.010073922574520111D0 5.710000038146973D0)) (list (list 3.0D0 1795.1529541015625D0 0.01011444441974163D0 5.71999979019165D0)) (list (list 3.0D0 1795.0787353515625D0 0.010150650516152382D0 5.730000019073486D0)) (list (list 3.0D0 1794.9508056640625D0 0.0101545425131917D0 5.739999771118164D0)) (list (list 3.0D0 1794.862548828125D0 0.01010610070079565D0 5.75D0)) (list (list 3.0D0 1794.906005859375D0 0.009992726147174836D0 5.759999752044678D0)) (list (list 3.0D0 1794.876953125D0 0.009808318689465523D0 5.769999980926514D0)) (list (list 3.0D0 1794.5714111328125D0 0.009581060148775578D0 5.779999732971191D0)) (list (list 3.0D0 1794.05419921875D0 0.009332765825092793D0 5.789999961853027D0)) (list (list 3.0D0 1793.4249267578125D0 0.009072558954358101D0 5.799999713897705D0)) (list (list 3.0D0 1792.81884765625D0 0.008798479102551937D0 5.809999942779541D0)) (list (list 3.0D0 1792.45703125D0 0.008466512896120549D0 5.819999694824219D0)) (list (list 3.0D0 1792.3677978515625D0 0.008107384666800499D0 5.829999923706055D0)) (list (list 3.0D0 1792.5177001953125D0 0.007772344630211592D0 5.839999675750732D0)) (list (list 3.0D0 1792.845947265625D0 0.00750836543738842D0 5.849999904632568D0)) (list (list 3.0D0 1793.2601318359375D0 0.007358575239777565D0 5.859999656677246D0)) (list (list 3.0D0 1793.49462890625D0 0.007338268216699362D0 5.869999885559082D0)) (list (list 3.0D0 1793.3497314453125D0 0.007316542789340019D0 5.87999963760376D0)) (list (list 3.0D0 1792.9051513671875D0 0.007251027040183544D0 5.889999866485596D0)) (list (list 3.0D0 1792.3758544921875D0 0.00714909890666604D0 5.900000095367432D0)) (list (list 3.0D0 1792.0943603515625D0 0.007061917334794998D0 5.909999847412109D0)) (list (list 3.0D0 1792.2786865234375D0 0.007165857125073671D0 5.920000076293945D0)) (list (list 3.0D0 1792.539794921875D0 0.007433976046741009D0 5.929999828338623D0)) (list (list 3.0D0 1792.8076171875D0 0.007747686002403498D0 5.940000057220459D0)) (list (list 3.0D0 1793.0672607421875D0 0.008011807687580586D0 5.949999809265137D0)) (list (list 3.0D0 1793.34326171875D0 0.00814851839095354D0 5.960000038146973D0)) (list (list 3.0D0 1793.4766845703125D0 0.008148589171469212D0 5.96999979019165D0)) (list (list 3.0D0 1793.4163818359375D0 0.00813599955290556D0 5.980000019073486D0)) (list (list 3.0D0 1793.3148193359375D0 0.00815857294946909D0 5.989999771118164D0)) (list (list 3.0D0 1793.262939453125D0 0.008227500133216381D0 6.0D0)) (list (list 3.0D0 1793.30322265625D0 0.00832425057888031D0 6.009999752044678D0)) (list (list 3.0D0 1793.2703857421875D0 0.008393446914851666D0 6.019999980926514D0)) (list (list 3.0D0 1793.2509765625D0 0.008485120721161366D0 6.029999732971191D0)) (list (list 3.0D0 1793.40087890625D0 0.008649314753711224D0 6.039999961853027D0)) (list (list 3.0D0 1793.7607421875D0 0.008902795612812043D0 6.049999713897705D0)) (list (list 3.0D0 1794.271728515625D0 0.009234831668436528D0 6.059999942779541D0)) (list (list 3.0D0 1794.53076171875D0 0.00960080698132515D0 6.069999694824219D0)) (list (list 3.0D0 1794.5433349609375D0 0.00997096486389637D0 6.079999923706055D0)) (list (list 3.0D0 1794.471923828125D0 0.010288779623806477D0 6.089999675750732D0)) (list (list 3.0D0 1794.4044189453125D0 0.010473654605448246D0 6.099999904632568D0)) (list (list 3.0D0 1794.3714599609375D0 0.010428175330162049D0 6.109999656677246D0)) (list (list 3.0D0 1794.1416015625D0 0.01006832905113697D0 6.119999885559082D0)) (list (list 3.0D0 1793.757568359375D0 0.009651202708482743D0 6.12999963760376D0)) (list (list 3.0D0 1793.4342041015625D0 0.009287111461162568D0 6.139999866485596D0)) (list (list 3.0D0 1793.285400390625D0 0.00902271643280983D0 6.150000095367432D0)) (list (list 3.0D0 1793.34228515625D0 0.008857624605298043D0 6.159999847412109D0)) (list (list 3.0D0 1793.2757568359375D0 0.008751550689339638D0 6.170000076293945D0)) (list (list 3.0D0 1793.0426025390625D0 0.008680331520736218D0 6.179999828338623D0)) (list (list 3.0D0 1792.82275390625D0 0.008662128821015358D0 6.190000057220459D0)) (list (list 3.0D0 1792.7154541015625D0 0.008703567087650299D0 6.199999809265137D0)) (list (list 3.0D0 1792.7606201171875D0 0.008798518218100071D0 6.210000038146973D0)) (list (list 3.0D0 1792.824951171875D0 0.008853878825902939D0 6.21999979019165D0)) (list (list 3.0D0 1792.7633056640625D0 0.008761519566178322D0 6.230000019073486D0)) (list (list 3.0D0 1792.602783203125D0 0.008529475890100003D0 6.239999771118164D0)) (list (list 3.0D0 1792.43701171875D0 0.008212912827730179D0 6.25D0)) (list (list 3.0D0 1792.41015625D0 0.007908646948635579D0 6.259999752044678D0)) (list (list 3.0D0 1792.680419921875D0 0.00781620666384697D0 6.269999980926514D0)) (list (list 3.0D0 1793.0413818359375D0 0.007958359085023404D0 6.279999732971191D0)) (list (list 3.0D0 1793.3829345703125D0 0.00829787366092205D0 6.289999961853027D0)) (list (list 3.0D0 1793.666748046875D0 0.008783873170614243D0 6.299999713897705D0)) (list (list 3.0D0 1793.9005126953125D0 0.009345910511910916D0 6.309999942779541D0)) (list (list 3.0D0 1794.081787109375D0 0.009865809231996537D0 6.319999694824219D0)) (list (list 3.0D0 1794.1929931640625D0 0.010270188562572003D0 6.329999923706055D0)) (list (list 3.0D0 1794.271728515625D0 0.01053698267787695D0 6.339999675750732D0)) (list (list 3.0D0 1794.36865234375D0 0.010640600696206093D0 6.349999904632568D0)) (list (list 3.0D0 1794.5364990234375D0 0.010556775145232678D0 6.359999656677246D0)) (list (list 3.0D0 1794.638671875D0 0.010220750235021115D0 6.369999885559082D0)) (list (list 3.0D0 1794.398193359375D0 0.009741985239088536D0 6.37999963760376D0)) (list (list 3.0D0 1793.8731689453125D0 0.009216764010488987D0 6.389999866485596D0)) (list (list 3.0D0 1793.2689208984375D0 0.008720813319087029D0 6.399999618530273D0)) (list (list 3.0D0 1792.892822265625D0 0.008321840316057206D0 6.409999847412109D0)) (list (list 3.0D0 1792.9775390625D0 0.008115657605230809D0 6.420000076293945D0)) (list (list 3.0D0 1793.1617431640625D0 0.008066348731517792D0 6.429999828338623D0)) (list (list 3.0D0 1793.346435546875D0 0.008081632666289807D0 6.440000057220459D0)) (list (list 3.0D0 1793.4525146484375D0 0.008078932762145996D0 6.449999809265137D0)) (list (list 3.0D0 1793.404052734375D0 0.007978719659149647D0 6.460000038146973D0)) (list (list 3.0D0 1792.99169921875D0 0.007734185550361872D0 6.46999979019165D0)) (list (list 3.0D0 1792.632568359375D0 0.007472421042621136D0 6.480000019073486D0)) (list (list 3.0D0 1792.52783203125D0 0.007255600765347481D0 6.489999771118164D0)) (list (list 3.0D0 1792.6475830078125D0 0.007113811559975147D0 6.5D0)) (list (list 3.0D0 1792.810791015625D0 0.007055632304400206D0 6.509999752044678D0)) (list (list 3.0D0 1792.736083984375D0 0.007062239106744528D0 6.519999980926514D0)) (list (list 3.0D0 1792.677978515625D0 0.007082974072545767D0 6.529999732971191D0)) (list (list 3.0D0 1792.705078125D0 0.007077259011566639D0 6.539999961853027D0)) (list (list 3.0D0 1792.788330078125D0 0.00701768696308136D0 6.549999713897705D0)) (list (list 3.0D0 1792.8441162109375D0 0.006888269912451506D0 6.559999942779541D0)) (list (list 3.0D0 1792.8626708984375D0 0.006730020511895418D0 6.569999694824219D0)) (list (list 3.0D0 1793.0302734375D0 0.006619737483561039D0 6.579999923706055D0)) (list (list 3.0D0 1793.311279296875D0 0.0065579586662352085D0 6.589999675750732D0)) (list (list 3.0D0 1793.5885009765625D0 0.006534032989293337D0 6.599999904632568D0)) (list (list 3.0D0 1793.702880859375D0 0.006529363337904215D0 6.609999656677246D0)) (list (list 3.0D0 1793.6591796875D0 0.006536968983709812D0 6.619999885559082D0)) (list (list 3.0D0 1793.777587890625D0 0.006598522420972586D0 6.62999963760376D0)) (list (list 3.0D0 1794.038330078125D0 0.00675334595143795D0 6.639999866485596D0)) (list (list 3.0D0 1794.3272705078125D0 0.006994929164648056D0 6.649999618530273D0)) (list (list 3.0D0 1794.474853515625D0 0.007279255427420139D0 6.659999847412109D0)) (list (list 3.0D0 1794.355224609375D0 0.007425670977681875D0 6.670000076293945D0)) (list (list 3.0D0 1794.214111328125D0 0.007383865304291248D0 6.679999828338623D0)) (list (list 3.0D0 1794.037109375D0 0.007230896502733231D0 6.690000057220459D0)) (list (list 3.0D0 1793.79833984375D0 0.007036016322672367D0 6.699999809265137D0)) (list (list 3.0D0 1793.4873046875D0 0.006869934033602476D0 6.710000038146973D0)) (list (list 3.0D0 1793.3997802734375D0 0.006786920130252838D0 6.71999979019165D0)) (list (list 3.0D0 1793.60009765625D0 0.006760601885616779D0 6.730000019073486D0)) (list (list 3.0D0 1793.9024658203125D0 0.006775498390197754D0 6.739999771118164D0)) (list (list 3.0D0 1794.184326171875D0 0.006824240554124117D0 6.75D0)) (list (list 3.0D0 1794.34765625D0 0.006903558503836393D0 6.759999752044678D0)) (list (list 3.0D0 1794.2884521484375D0 0.007044457830488682D0 6.769999980926514D0)) (list (list 3.0D0 1794.0892333984375D0 0.007308374624699354D0 6.779999732971191D0)) (list (list 3.0D0 1794.0106201171875D0 0.007722239010035992D0 6.789999961853027D0)) (list (list 3.0D0 1794.2117919921875D0 0.008270257152616978D0 6.799999713897705D0)) (list (list 3.0D0 1794.7734375D0 0.008900181390345097D0 6.809999942779541D0)) (list (list 3.0D0 1795.438232421875D0 0.009455095045268536D0 6.819999694824219D0)) (list (list 3.0D0 1795.88623046875D0 0.009809241630136967D0 6.829999923706055D0)) (list (list 3.0D0 1796.3046875D0 0.009982706978917122D0 6.839999675750732D0)) (list (list 3.0D0 1796.84619140625D0 0.010000858455896378D0 6.849999904632568D0)) (list (list 3.0D0 1797.6265869140625D0 0.009899342432618142D0 6.859999656677246D0)) (list (list 3.0D0 1798.45556640625D0 0.009681517258286477D0 6.869999885559082D0)) (list (list 3.0D0 1798.88720703125D0 0.009388910606503487D0 6.87999963760376D0)) (list (list 3.0D0 1798.8956298828125D0 0.009073580615222454D0 6.889999866485596D0)) (list (list 3.0D0 1798.5350341796875D0 0.008765171281993389D0 6.899999618530273D0)) (list (list 3.0D0 1797.932861328125D0 0.008482380770146847D0 6.909999847412109D0)) (list (list 3.0D0 1797.376953125D0 0.008218676783144474D0 6.920000076293945D0)) (list (list 3.0D0 1797.080078125D0 0.007979643531143666D0 6.929999828338623D0)) (list (list 3.0D0 1797.02587890625D0 0.007798201870173216D0 6.940000057220459D0)) (list (list 3.0D0 1797.170654296875D0 0.007694328669458628D0 6.949999809265137D0)) (list (list 3.0D0 1797.439697265625D0 0.007677481975406408D0 6.960000038146973D0)) (list (list 3.0D0 1797.690185546875D0 0.00774005614221096D0 6.96999979019165D0)) (list (list 3.0D0 1797.9146728515625D0 0.007835987955331803D0 6.980000019073486D0)) (list (list 3.0D0 1798.2135009765625D0 0.00793260708451271D0 6.989999771118164D0)) (list (list 3.0D0 1798.59375D0 0.007981231436133385D0 7.0D0)) (list (list 3.0D0 1798.9969482421875D0 0.007916244678199292D0 7.009999752044678D0)) (list (list 3.0D0 1799.1295166015625D0 0.007555114571005106D0 7.019999980926514D0)) (list (list 3.0D0 1799.035400390625D0 0.006880539935082197D0 7.029999732971191D0)) (list (list 3.0D0 1798.9749755859375D0 0.005972298793494701D0 7.039999961853027D0)) (list (list 3.0D0 1799.0438232421875D0 0.004894842393696308D0 7.049999713897705D0)) (list (list 3.0D0 1799.192626953125D0 0.0037235694471746683D0 7.059999942779541D0)) (list (list 3.0D0 1798.5594482421875D0 0.0025780450087040663D0 7.069999694824219D0)) (list (list 3.0D0 1795.60693359375D0 0.0016763857565820218D0 7.079999923706055D0)) (list (list 3.0D0 1791.8660888671875D0 0.0011099197436124087D0 7.089999675750732D0)) (list (list 3.0D0 1788.7655029296875D0 8.304655202664435D-4 7.099999904632568D0)) (list (list 3.0D0 1787.744384765625D0 7.139683002606034D-4 7.109999656677246D0)) (list (list 3.0D0 1790.3631591796875D0 6.464387406595051D-4 7.119999885559082D0)) (list (list 3.0D0 1792.8875732421875D0 6.358121754601598D-4 7.12999963760376D0)) (list (list 3.0D0 1794.7135009765625D0 6.544041680172086D-4 7.139999866485596D0)) (list (list 3.0D0 1795.76806640625D0 6.859421846456826D-4 7.149999618530273D0)) (list (list 3.0D0 1796.2537841796875D0 7.170719327405095D-4 7.159999847412109D0)) (list (list 3.0D0 1796.5872802734375D0 7.349047809839249D-4 7.170000076293945D0)) (list (list 3.0D0 1796.7091064453125D0 7.291710935533047D-4 7.179999828338623D0)) (list (list 3.0D0 1796.6568603515625D0 7.023208308964968D-4 7.190000057220459D0)) (list (list 3.0D0 1796.541015625D0 6.60071091260761D-4 7.199999809265137D0)) (list (list 3.0D0 1796.489990234375D0 6.109736277721822D-4 7.210000038146973D0)) (list (list 3.0D0 1796.441162109375D0 5.669905222021043D-4 7.21999979019165D0)) (list (list 3.0D0 1796.2210693359375D0 5.288808606564999D-4 7.230000019073486D0)) (list (list 3.0D0 1796.1015625D0 4.910493735224009D-4 7.239999771118164D0)) (list (list 3.0D0 1796.3035888671875D0 4.4945027912035585D-4 7.25D0)) (list (list 3.0D0 1796.96435546875D0 4.008417599834502D-4 7.259999752044678D0)) (list (list 3.0D0 1797.6854248046875D0 3.437140549067408D-4 7.269999980926514D0)) (list (list 3.0D0 1797.7054443359375D0 2.8005277272313833D-4 7.279999732971191D0)) (list (list 3.0D0 1797.001220703125D0 2.1333122276701033D-4 7.289999961853027D0)) (list (list 3.0D0 1794.2359619140625D0 1.4977181854192168D-4 7.299999713897705D0)) (list (list 3.0D0 1788.5001220703125D0 9.790158219402656D-5 7.309999942779541D0)) (list (list 3.0D0 1786.670654296875D0 7.752857345622033D-5 7.319999694824219D0)) (list (list 3.0D0 1789.0426025390625D0 7.16924769221805D-5 7.329999923706055D0)) (list (list 3.0D0 1793.6436767578125D0 7.990023732418195D-5 7.339999675750732D0)) (list (list 3.0D0 1797.2637939453125D0 9.179658081848175D-5 7.349999904632568D0)) (list (list 3.0D0 1796.92822265625D0 9.480528387939558D-5 7.359999656677246D0)) (list (list 3.0D0 1796.4447021484375D0 9.398378460900858D-5 7.369999885559082D0)) (list (list 3.0D0 1795.8726806640625D0 9.44212733884342D-5 7.37999963760376D0)) (list (list 3.0D0 1795.50537109375D0 9.4362381787505D-5 7.389999866485596D0)) (list (list 3.0D0 1795.6180419921875D0 9.300799865741283D-5 7.399999618530273D0)) (list (list 3.0D0 1796.4005126953125D0 9.031264198711142D-5 7.409999847412109D0)) (list (list 3.0D0 1797.5167236328125D0 8.948706090450287D-5 7.419999599456787D0)) (list (list 3.0D0 1798.1982421875D0 9.095806308323518D-5 7.429999828338623D0)) (list (list 3.0D0 1798.3953857421875D0 9.213865996571258D-5 7.440000057220459D0)) (list (list 3.0D0 1798.2828369140625D0 9.117492299992591D-5 7.449999809265137D0)) (list (list 3.0D0 1798.1258544921875D0 8.65162000991404D-5 7.460000038146973D0)) (list (list 3.0D0 1798.09912109375D0 7.660777919227258D-5 7.46999979019165D0)) (list (list 3.0D0 1797.9852294921875D0 6.373803626047448D-5 7.480000019073486D0)) (list (list 3.0D0 1797.715087890625D0 5.031896216678433D-5 7.489999771118164D0)) (list (list 3.0D0 1797.47265625D0 3.0182438422343694D-5 7.5D0)) (list (list 4.0D0 1660.4107666015625D0 3.609482882893644D-5 0.0D0)) (list (list 4.0D0 1662.84423828125D0 3.85215062124189D-5 0.009999999776482582D0)) (list (list 4.0D0 1666.140625D0 3.7356334360083565D-5 0.019999999552965164D0)) (list (list 4.0D0 1668.302490234375D0 3.5152370401192457D-5 0.029999999329447747D0)) (list (list 4.0D0 1668.6939697265625D0 3.3821837860159576D-5 0.03999999910593033D0)) (list (list 4.0D0 1668.06494140625D0 3.4668624721234664D-5 0.04999999701976776D0)) (list (list 4.0D0 1682.926025390625D0 5.268385575618595D-5 0.05999999865889549D0)) (list (list 4.0D0 1687.2930908203125D0 6.663903332082555D-5 0.07000000029802323D0)) (list (list 4.0D0 1681.7904052734375D0 8.067607996053994D-5 0.07999999821186066D0)) (list (list 4.0D0 1678.52099609375D0 1.908410486066714D-4 0.08999999612569809D0)) (list (list 4.0D0 1700.32177734375D0 5.793585442006588D-4 0.09999999403953552D0)) (list (list 4.0D0 1698.6085205078125D0 9.846249595284462D-4 0.10999999940395355D0)) (list (list 4.0D0 1697.0279541015625D0 0.0014157037949189544D0 0.11999999731779099D0)) (list (list 4.0D0 1695.67431640625D0 0.001766625908203423D0 0.12999999523162842D0)) (list (list 4.0D0 1694.592041015625D0 0.0019576053600758314D0 0.14000000059604645D0)) (list (list 4.0D0 1693.77978515625D0 0.0019340378930792213D0 0.14999999105930328D0)) (list (list 4.0D0 1693.6136474609375D0 0.0016923551447689534D0 0.1599999964237213D0)) (list (list 4.0D0 1693.8118896484375D0 0.0014559534611180425D0 0.17000000178813934D0)) (list (list 4.0D0 1693.836669921875D0 0.0013167894212529064D0 0.17999999225139618D0)) (list (list 4.0D0 1693.34716796875D0 0.001306189689785242D0 0.1899999976158142D0)) (list (list 4.0D0 1692.20166015625D0 0.0013988354476168752D0 0.19999998807907105D0)) (list (list 4.0D0 1692.4454345703125D0 0.0014880473027005792D0 0.20999999344348908D0)) (list (list 4.0D0 1693.085205078125D0 0.0015827432507649064D0 0.2199999988079071D0)) (list (list 4.0D0 1693.2635498046875D0 0.0016918540932238102D0 0.22999998927116394D0)) (list (list 4.0D0 1692.6068115234375D0 0.0018151078838855029D0 0.23999999463558197D0)) (list (list 4.0D0 1691.1873779296875D0 0.0019444212084636093D0 0.25D0)) (list (list 4.0D0 1690.45068359375D0 0.0021151250693947077D0 0.25999999046325684D0)) (list (list 4.0D0 1689.819580078125D0 0.0023688175715506077D0 0.26999998092651367D0)) (list (list 4.0D0 1689.172119140625D0 0.0026889063883572817D0 0.2800000011920929D0)) (list (list 4.0D0 1688.5714111328125D0 0.003013896057382226D0 0.28999999165534973D0)) (list (list 4.0D0 1688.2314453125D0 0.0032418465707451105D0 0.29999998211860657D0)) (list (list 4.0D0 1687.809326171875D0 0.0032574532087892294D0 0.3100000023841858D0)) (list (list 4.0D0 1686.9769287109375D0 0.0032418305054306984D0 0.3199999928474426D0)) (list (list 4.0D0 1686.1348876953125D0 0.00330703379586339D0 0.32999998331069947D0)) (list (list 4.0D0 1685.629638671875D0 0.0034917988814413548D0 0.3400000035762787D0)) (list (list 4.0D0 1685.754150390625D0 0.0037719227839261294D0 0.3499999940395355D0)) (list (list 4.0D0 1686.0391845703125D0 0.004079136066138744D0 0.35999998450279236D0)) (list (list 4.0D0 1685.939208984375D0 0.004337735008448362D0 0.3700000047683716D0)) (list (list 4.0D0 1685.663818359375D0 0.004485387820750475D0 0.3799999952316284D0)) (list (list 4.0D0 1685.412353515625D0 0.004478208255022764D0 0.38999998569488526D0)) (list (list 4.0D0 1685.3760986328125D0 0.004291923716664314D0 0.3999999761581421D0)) (list (list 4.0D0 1685.3609619140625D0 0.004045599140226841D0 0.4099999964237213D0)) (list (list 4.0D0 1685.228759765625D0 0.003928606864064932D0 0.41999998688697815D0)) (list (list 4.0D0 1685.0716552734375D0 0.0038979812525212765D0 0.429999977350235D0)) (list (list 4.0D0 1684.8931884765625D0 0.0038707894273102284D0 0.4399999976158142D0)) (list (list 4.0D0 1684.630126953125D0 0.0037295978982001543D0 0.44999998807907105D0)) (list (list 4.0D0 1684.3031005859375D0 0.003376253414899111D0 0.4599999785423279D0)) (list (list 4.0D0 1684.094970703125D0 0.0030011581256985665D0 0.4699999988079071D0)) (list (list 4.0D0 1683.97412109375D0 0.0027024149894714356D0 0.47999998927116394D0)) (list (list 4.0D0 1683.9503173828125D0 0.0025151206646114588D0 0.4899999797344208D0)) (list (list 4.0D0 1684.0860595703125D0 0.0024221043568104506D0 0.5D0)) (list (list 4.0D0 1685.3907470703125D0 0.002302171429619193D0 0.5099999904632568D0)) (list (list 4.0D0 1687.1136474609375D0 0.002192283747717738D0 0.5199999809265137D0)) (list (list 4.0D0 1688.5301513671875D0 0.002153906039893627D0 0.5299999713897705D0)) (list (list 4.0D0 1689.1890869140625D0 0.0022211065515875817D0 0.5399999618530273D0)) (list (list 4.0D0 1688.8665771484375D0 0.0024080027360469103D0 0.550000011920929D0)) (list (list 4.0D0 1688.1435546875D0 0.0028029063250869513D0 0.5600000023841858D0)) (list (list 4.0D0 1687.611328125D0 0.0033580707386136055D0 0.5699999928474426D0)) (list (list 4.0D0 1686.9464111328125D0 0.004011613316833973D0 0.5799999833106995D0)) (list (list 4.0D0 1685.9869384765625D0 0.004681757185608149D0 0.5899999737739563D0)) (list (list 4.0D0 1684.7076416015625D0 0.005265891086310148D0 0.5999999642372131D0)) (list (list 4.0D0 1683.68359375D0 0.005601192358881235D0 0.6100000143051148D0)) (list (list 4.0D0 1683.045166015625D0 0.005789531860500574D0 0.6200000047683716D0)) (list (list 4.0D0 1682.7132568359375D0 0.0059306505136191845D0 0.6299999952316284D0)) (list (list 4.0D0 1682.5745849609375D0 0.006079584825783968D0 0.6399999856948853D0)) (list (list 4.0D0 1682.47998046875D0 0.006257860455662012D0 0.6499999761581421D0)) (list (list 4.0D0 1682.302001953125D0 0.006339216139167547D0 0.6599999666213989D0)) (list (list 4.0D0 1682.113525390625D0 0.006257758010178804D0 0.6699999570846558D0)) (list (list 4.0D0 1682.0198974609375D0 0.006058412604033947D0 0.6800000071525574D0)) (list (list 4.0D0 1682.06689453125D0 0.005821456201374531D0 0.6899999976158142D0)) (list (list 4.0D0 1682.2591552734375D0 0.005658003035932779D0 0.699999988079071D0)) (list (list 4.0D0 1682.6439208984375D0 0.005704592447727919D0 0.7099999785423279D0)) (list (list 4.0D0 1683.042236328125D0 0.005856536328792572D0 0.7199999690055847D0)) (list (list 4.0D0 1683.3814697265625D0 0.005993202328681946D0 0.7299999594688416D0)) (list (list 4.0D0 1683.6767578125D0 0.00601218780502677D0 0.7400000095367432D0)) (list (list 4.0D0 1684.00390625D0 0.005821632221341133D0 0.75D0)) (list (list 4.0D0 1684.447265625D0 0.005322438199073076D0 0.7599999904632568D0)) (list (list 4.0D0 1684.6622314453125D0 0.0046761417761445046D0 0.7699999809265137D0)) (list (list 4.0D0 1684.567138671875D0 0.004006613977253437D0 0.7799999713897705D0)) (list (list 4.0D0 1684.2396240234375D0 0.0033982412423938513D0 0.7899999618530273D0)) (list (list 4.0D0 1683.863525390625D0 0.00290880911052227D0 0.7999999523162842D0)) (list (list 4.0D0 1683.3760986328125D0 0.0025074630975723267D0 0.8100000023841858D0)) (list (list 4.0D0 1682.2791748046875D0 0.002081256825476885D0 0.8199999928474426D0)) (list (list 4.0D0 1680.597412109375D0 0.0016227405285462737D0 0.8299999833106995D0)) (list (list 4.0D0 1677.793212890625D0 0.0011656905990093947D0 0.8399999737739563D0)) (list (list 4.0D0 1673.17041015625D0 7.737307460047305D-4 0.8499999642372131D0)) (list (list 4.0D0 1670.125D0 5.572615773417056D-4 0.85999995470047D0)) (list (list 4.0D0 1670.6353759765625D0 4.2341038351878524D-4 0.8700000047683716D0)) (list (list 4.0D0 1684.3828125D0 3.4984020749107003D-4 0.8799999952316284D0)) (list (list 4.0D0 1696.0106201171875D0 4.099007637705654D-4 0.8899999856948853D0)) (list (list 4.0D0 1677.760009765625D0 7.141223177313805D-4 0.8999999761581421D0)) (list (list 4.0D0 1681.3807373046875D0 9.494576952420175D-4 0.9099999666213989D0)) (list (list 4.0D0 1682.8372802734375D0 0.0011236189166083932D0 0.9199999570846558D0)) (list (list 4.0D0 1683.5223388671875D0 0.0012146541848778725D0 0.9300000071525574D0)) (list (list 4.0D0 1684.1961669921875D0 0.0012277693022042513D0 0.9399999976158142D0)) (list (list 4.0D0 1685.275146484375D0 0.0011873900657519699D0 0.949999988079071D0)) (list (list 4.0D0 1686.833740234375D0 0.0011026252759620548D0 0.9599999785423279D0)) (list (list 4.0D0 1688.2916259765625D0 9.926030179485679D-4 0.9699999690055847D0)) (list (list 4.0D0 1689.6302490234375D0 8.655186975374818D-4 0.9799999594688416D0)) (list (list 4.0D0 1690.3531494140625D0 7.386293727904558D-4 0.9899999499320984D0)) (list (list 4.0D0 1689.7552490234375D0 6.359943654388189D-4 1.0D0)) (list (list 4.0D0 1688.4368896484375D0 5.914613138884306D-4 1.0099999904632569D0)) (list (list 4.0D0 1690.5284423828125D0 5.923528224229813D-4 1.0199999809265137D0)) (list (list 4.0D0 1681.756591796875D0 6.369375623762608D-4 1.0299999713897705D0)) (list (list 4.0D0 1673.930419921875D0 8.371315198019147D-4 1.0399999618530274D0)) (list (list 4.0D0 1690.3883056640625D0 0.0013464358635246754D0 1.0499999523162842D0)) (list (list 4.0D0 1686.727783203125D0 0.0019317363621667028D0 1.059999942779541D0)) (list (list 4.0D0 1685.5531005859375D0 0.0023798069451004267D0 1.0699999332427979D0)) (list (list 4.0D0 1685.09326171875D0 0.0025858660228550434D0 1.0799999237060547D0)) (list (list 4.0D0 1684.6717529296875D0 0.0025592574384063483D0 1.090000033378601D0)) (list (list 4.0D0 1684.2144775390625D0 0.0023894954938441515D0 1.100000023841858D0)) (list (list 4.0D0 1684.5338134765625D0 0.002265774179250002D0 1.1100000143051148D0)) (list (list 4.0D0 1685.168212890625D0 0.002296547405421734D0 1.1200000047683716D0)) (list (list 4.0D0 1685.0303955078125D0 0.0024043023586273194D0 1.1299999952316285D0)) (list (list 4.0D0 1683.715087890625D0 0.0025117157492786646D0 1.1399999856948853D0)) (list (list 4.0D0 1681.2471923828125D0 0.0025347343180328608D0 1.149999976158142D0)) (list (list 4.0D0 1678.2025146484375D0 0.0023574898950755596D0 1.159999966621399D0)) (list (list 4.0D0 1675.6878662109375D0 0.0019856528379023075D0 1.1699999570846558D0)) (list (list 4.0D0 1674.746826171875D0 0.0015029071364551783D0 1.1799999475479126D0)) (list (list 4.0D0 1675.9759521484375D0 0.0010292876977473498D0 1.1899999380111695D0)) (list (list 4.0D0 1679.4490966796875D0 7.1140838554129D-4 1.1999999284744263D0)) (list (list 4.0D0 1681.907470703125D0 7.087034755386412D-4 1.209999918937683D0)) (list (list 4.0D0 1682.54736328125D0 8.103297441266477D-4 1.2200000286102295D0)) (list (list 4.0D0 1682.3824462890625D0 9.3211664352566D-4 1.2300000190734864D0)) (list (list 4.0D0 1681.9429931640625D0 0.0010146903805434704D0 1.2400000095367432D0)) (list (list 4.0D0 1681.5928955078125D0 0.0010115824406966567D0 1.25D0)) (list (list 4.0D0 1682.0880126953125D0 9.075089474208653D-4 1.2599999904632569D0)) (list (list 4.0D0 1683.2738037109375D0 8.076983503997326D-4 1.2699999809265137D0)) (list (list 4.0D0 1684.687744140625D0 7.639031973667443D-4 1.2799999713897705D0)) (list (list 4.0D0 1686.2646484375D0 7.706566248089075D-4 1.2899999618530274D0)) (list (list 4.0D0 1688.2608642578125D0 7.863709470257163D-4 1.2999999523162842D0)) (list (list 4.0D0 1692.914306640625D0 6.962462211959064D-4 1.309999942779541D0)) (list (list 4.0D0 1696.34619140625D0 6.101301987655461D-4 1.3199999332427979D0)) (list (list 4.0D0 1697.764404296875D0 5.593658424913883D-4 1.3299999237060547D0)) (list (list 4.0D0 1698.04443359375D0 5.454958300106227D-4 1.3399999141693116D0)) (list (list 4.0D0 1698.96728515625D0 5.514798103831708D-4 1.350000023841858D0)) (list (list 4.0D0 1702.3480224609375D0 5.261213518679142D-4 1.3600000143051148D0)) (list (list 4.0D0 1701.3748779296875D0 4.6643539099022746D-4 1.3700000047683716D0)) (list (list 4.0D0 1698.197509765625D0 4.627433081623167D-4 1.3799999952316285D0)) (list (list 4.0D0 1693.5015869140625D0 5.65354828722775D-4 1.3899999856948853D0)) (list (list 4.0D0 1687.6968994140625D0 7.903446676209569D-4 1.399999976158142D0)) (list (list 4.0D0 1684.604248046875D0 9.894997347146273D-4 1.409999966621399D0)) (list (list 4.0D0 1682.80224609375D0 0.0010968793649226427D0 1.4199999570846558D0)) (list (list 4.0D0 1682.1065673828125D0 0.001089929835870862D0 1.4299999475479126D0)) (list (list 4.0D0 1681.7559814453125D0 0.0010013352148234845D0 1.4399999380111695D0)) (list (list 4.0D0 1680.8316650390625D0 9.000623831525445D-4 1.4499999284744263D0)) (list (list 4.0D0 1680.4114990234375D0 9.165802621282637D-4 1.459999918937683D0)) (list (list 4.0D0 1681.096435546875D0 0.0010724372696131468D0 1.46999990940094D0)) (list (list 4.0D0 1681.329345703125D0 0.0013032348360866309D0 1.4800000190734864D0)) (list (list 4.0D0 1680.5584716796875D0 0.0015445091994479299D0 1.4900000095367432D0)) (list (list 4.0D0 1678.82177734375D0 0.001727554015815258D0 1.5D0)) (list (list 4.0D0 1677.658203125D0 0.0017850036965683103D0 1.5099999904632569D0)) (list (list 4.0D0 1676.27685546875D0 0.0017477477667853237D0 1.5199999809265137D0)) (list (list 4.0D0 1674.6572265625D0 0.0016892775893211365D0 1.5299999713897705D0)) (list (list 4.0D0 1673.4296875D0 0.0016249872278422118D0 1.5399999618530274D0)) (list (list 4.0D0 1673.4603271484375D0 0.0015498058637604118D0 1.5499999523162842D0)) (list (list 4.0D0 1675.0462646484375D0 0.0014895552303642035D0 1.559999942779541D0)) (list (list 4.0D0 1676.706787109375D0 0.0015072488458827138D0 1.5699999332427979D0)) (list (list 4.0D0 1678.070068359375D0 0.0016184746054932476D0 1.5799999237060547D0)) (list (list 4.0D0 1679.3687744140625D0 0.001850730273872614D0 1.5899999141693116D0)) (list (list 4.0D0 1681.00537109375D0 0.0022238625679165125D0 1.5999999046325684D0)) (list (list 4.0D0 1682.3704833984375D0 0.002684872830286622D0 1.6100000143051148D0)) (list (list 4.0D0 1683.199462890625D0 0.003068411024287343D0 1.6200000047683716D0)) (list (list 4.0D0 1683.6695556640625D0 0.0033405590802431107D0 1.6299999952316285D0)) (list (list 4.0D0 1683.777099609375D0 0.003490068484097719D0 1.6399999856948853D0)) (list (list 4.0D0 1683.5118408203125D0 0.0035242456942796707D0 1.649999976158142D0)) (list (list 4.0D0 1683.3126220703125D0 0.0034783370792865754D0 1.659999966621399D0)) (list (list 4.0D0 1683.48876953125D0 0.003434352111071348D0 1.6699999570846558D0)) (list (list 4.0D0 1683.5772705078125D0 0.003401112509891391D0 1.6799999475479126D0)) (list (list 4.0D0 1683.266845703125D0 0.0033205135259777308D0 1.6899999380111695D0)) (list (list 4.0D0 1682.2330322265625D0 0.0031025081407278777D0 1.6999999284744263D0)) (list (list 4.0D0 1679.351806640625D0 0.002596869133412838D0 1.709999918937683D0)) (list (list 4.0D0 1675.250732421875D0 0.002100862329825759D0 1.71999990940094D0)) (list (list 4.0D0 1672.3843994140625D0 0.0018043857999145985D0 1.7300000190734864D0)) (list (list 4.0D0 1671.305908203125D0 0.001728888601064682D0 1.7400000095367432D0)) (list (list 4.0D0 1671.7564697265625D0 0.0018108220538124443D0 1.75D0)) (list (list 4.0D0 1673.3271484375D0 0.001898105489090085D0 1.7599999904632569D0)) (list (list 4.0D0 1674.5279541015625D0 0.0018348044250160456D0 1.7699999809265137D0)) (list (list 4.0D0 1675.5711669921875D0 0.0016645038267597557D0 1.7799999713897705D0)) (list (list 4.0D0 1676.19775390625D0 0.0014415764017030597D0 1.7899999618530274D0)) (list (list 4.0D0 1675.9249267578125D0 0.0012316738720983267D0 1.7999999523162842D0)) (list (list 4.0D0 1673.65234375D0 0.0011138140689581633D0 1.809999942779541D0)) (list (list 4.0D0 1671.101318359375D0 0.001128797885030508D0 1.8199999332427979D0)) (list (list 4.0D0 1670.0595703125D0 0.0011951770866289735D0 1.8299999237060547D0)) (list (list 4.0D0 1670.741943359375D0 0.0012849546037614346D0 1.8399999141693116D0)) (list (list 4.0D0 1672.59619140625D0 0.0013883952051401139D0 1.8499999046325684D0)) (list (list 4.0D0 1674.070068359375D0 0.0015148029197007418D0 1.8600000143051148D0)) (list (list 4.0D0 1674.361572265625D0 0.0015534062404185534D0 1.8700000047683716D0)) (list (list 4.0D0 1673.531982421875D0 0.0014944655122235418D0 1.8799999952316285D0)) (list (list 4.0D0 1672.1033935546875D0 0.0013810829259455204D0 1.8899999856948853D0)) (list (list 4.0D0 1670.8121337890625D0 0.0012841125717386604D0 1.899999976158142D0)) (list (list 4.0D0 1670.3509521484375D0 0.0013109637657180429D0 1.909999966621399D0)) (list (list 4.0D0 1670.749267578125D0 0.0014170140493661166D0 1.9199999570846558D0)) (list (list 4.0D0 1671.7451171875D0 0.001483027939684689D0 1.9299999475479126D0)) (list (list 4.0D0 1673.0958251953125D0 0.001453668111935258D0 1.9399999380111695D0)) (list (list 4.0D0 1674.5118408203125D0 0.0013108471175655723D0 1.9499999284744263D0)) (list (list 4.0D0 1675.5303955078125D0 0.0011374133173376322D0 1.959999918937683D0)) (list (list 4.0D0 1676.3477783203125D0 0.0010247734608128667D0 1.96999990940094D0)) (list (list 4.0D0 1676.761474609375D0 9.039962315000594D-4 1.9799998998641968D0)) (list (list 4.0D0 1674.2578125D0 7.560152444057167D-4 1.9900000095367432D0)) (list (list 4.0D0 1664.8726806640625D0 5.924439756199718D-4 2.0D0)) (list (list 4.0D0 1638.2933349609375D0 5.334622110240161D-4 2.009999990463257D0)) (list (list 4.0D0 1639.2130126953125D0 5.295355804264545D-4 2.0199999809265137D0)) (list (list 4.0D0 1643.2794189453125D0 5.378464120440185D-4 2.0299999713897705D0)) (list (list 4.0D0 1641.84423828125D0 5.252043483778834D-4 2.0399999618530274D0)) (list (list 4.0D0 1633.0465087890625D0 4.8098753904923797D-4 2.049999952316284D0)) (list (list 4.0D0 1629.1204833984375D0 5.452416953630745D-4 2.059999942779541D0)) (list (list 4.0D0 1629.8841552734375D0 5.879620439372957D-4 2.069999933242798D0)) (list (list 4.0D0 1631.5179443359375D0 6.26687949988991D-4 2.0799999237060547D0)) (list (list 4.0D0 1633.151611328125D0 6.654138560406864D-4 2.0899999141693116D0)) (list (list 4.0D0 1634.47265625D0 7.020554039627314D-4 2.0999999046325684D0)) (list (list 4.0D0 1632.8231201171875D0 7.188930758275092D-4 2.109999895095825D0)) (list (list 4.0D0 1629.2701416015625D0 6.765587604604662D-4 2.119999885559082D0)) (list (list 4.0D0 1624.857421875D0 7.115296903066337D-4 2.129999876022339D0)) (list (list 4.0D0 1620.0977783203125D0 8.06126743555069D-4 2.1399998664855957D0)) (list (list 4.0D0 1615.338134765625D0 9.007237968035042D-4 2.1499998569488526D0)) (list (list 4.0D0 1610.5784912109375D0 9.953208500519395D-4 2.1599998474121094D0)) (list (list 4.0D0 1609.8553466796875D0 3.2436224864795804D-4 2.169999837875366D0)) (list (list 5.0D0 1315.421630859375D0 6.429116911021993D-5 0.0D0)) (list (list 5.0D0 1318.775146484375D0 1.0560776718193665D-4 0.009999999776482582D0)) (list (list 5.0D0 1320.832275390625D0 1.4526283484883607D-4 0.019999999552965164D0)) (list (list 5.0D0 1321.967041015625D0 1.7652020324021578D-4 0.029999999329447747D0)) (list (list 5.0D0 1322.4832763671875D0 1.9349153444636613D-4 0.03999999910593033D0)) (list (list 5.0D0 1322.6119384765625D0 1.9114516908302903D-4 0.04999999701976776D0)) (list (list 5.0D0 1321.1407470703125D0 1.6038058674894273D-4 0.05999999865889549D0)) (list (list 5.0D0 1320.221923828125D0 1.288422499783337D-4 0.07000000029802323D0)) (list (list 5.0D0 1312.499755859375D0 1.015753296087496D-4 0.07999999821186066D0)) (list (list 5.0D0 1297.717529296875D0 1.0913305595749989D-4 0.08999999612569809D0)) (list (list 5.0D0 1282.499267578125D0 2.060490078292787D-4 0.09999999403953552D0)) (list (list 5.0D0 1280.907470703125D0 3.412792575545609D-4 0.10999999940395355D0)) (list (list 5.0D0 1278.61279296875D0 4.932147567160428D-4 0.11999999731779099D0)) (list (list 5.0D0 1275.9683837890625D0 6.635284516960383D-4 0.12999999523162842D0)) (list (list 5.0D0 1273.8038330078125D0 8.427222492173314D-4 0.14000000059604645D0)) (list (list 5.0D0 1273.3912353515625D0 0.001010885345749557D0 0.14999999105930328D0)) (list (list 5.0D0 1274.9088134765625D0 0.0011745903175324202D0 0.1599999964237213D0)) (list (list 5.0D0 1275.487548828125D0 0.001345049007795751D0 0.17000000178813934D0)) (list (list 5.0D0 1275.589111328125D0 0.0014823984820395708D0 0.17999999225139618D0)) (list (list 5.0D0 1275.662109375D0 0.0015473170205950737D0 0.1899999976158142D0)) (list (list 5.0D0 1276.139404296875D0 0.001501551945693791D0 0.19999998807907105D0)) (list (list 5.0D0 1276.246337890625D0 0.0013535827165469528D0 0.20999999344348908D0)) (list (list 5.0D0 1275.7347412109375D0 0.0012322807451710105D0 0.2199999988079071D0)) (list (list 5.0D0 1274.242919921875D0 0.001184206921607256D0 0.22999998927116394D0)) (list (list 5.0D0 1272.5870361328125D0 0.0011937421513721347D0 0.23999999463558197D0)) (list (list 5.0D0 1272.6510009765625D0 0.0011893808841705323D0 0.25D0)) (list (list 5.0D0 1277.0965576171875D0 0.0011077183298766613D0 0.25999999046325684D0)) (list (list 5.0D0 1279.0953369140625D0 0.0010162326507270337D0 0.26999998092651367D0)) (list (list 5.0D0 1279.57177734375D0 9.955415735021234D-4 0.2800000011920929D0)) (list (list 5.0D0 1279.5096435546875D0 0.001107720541767776D0 0.28999999165534973D0)) (list (list 5.0D0 1279.986083984375D0 0.0013969397405162454D0 0.29999998211860657D0)) (list (list 5.0D0 1282.49853515625D0 0.0018058146815747023D0 0.3100000023841858D0)) (list (list 5.0D0 1284.016357421875D0 0.002114246366545558D0 0.3199999928474426D0)) (list (list 5.0D0 1285.3389892578125D0 0.002338322577998042D0 0.32999998331069947D0)) (list (list 5.0D0 1286.6243896484375D0 0.002530497033149004D0 0.3400000035762787D0)) (list (list 5.0D0 1287.4993896484375D0 0.0027747289277613163D0 0.3499999940395355D0)) (list (list 5.0D0 1287.41650390625D0 0.003087270073592663D0 0.35999998450279236D0)) (list (list 5.0D0 1286.5677490234375D0 0.0033392226323485375D0 0.3700000047683716D0)) (list (list 5.0D0 1285.6539306640625D0 0.0034907872322946787D0 0.3799999952316284D0)) (list (list 5.0D0 1285.1680908203125D0 0.0035246701445430518D0 0.38999998569488526D0)) (list (list 5.0D0 1285.4267578125D0 0.003444196656346321D0 0.3999999761581421D0)) (list (list 5.0D0 1285.8984375D0 0.003270541550591588D0 0.4099999964237213D0)) (list (list 5.0D0 1286.0079345703125D0 0.003061645897105336D0 0.41999998688697815D0)) (list (list 5.0D0 1285.53076171875D0 0.002838837681338191D0 0.429999977350235D0)) (list (list 5.0D0 1284.6912841796875D0 0.0026530716568231583D0 0.4399999976158142D0)) (list (list 5.0D0 1284.07421875D0 0.00257890485227108D0 0.44999998807907105D0)) (list (list 5.0D0 1283.748046875D0 0.0026523915585130453D0 0.4599999785423279D0)) (list (list 5.0D0 1283.9224853515625D0 0.0027866445016115904D0 0.4699999988079071D0)) (list (list 5.0D0 1283.9527587890625D0 0.002912224968895316D0 0.47999998927116394D0)) (list (list 5.0D0 1283.7398681640625D0 0.0029772240668535233D0 0.4899999797344208D0)) (list (list 5.0D0 1283.5712890625D0 0.0029415010940283537D0 0.5D0)) (list (list 5.0D0 1282.394287109375D0 0.0027228465769439936D0 0.5099999904632568D0)) (list (list 5.0D0 1280.98681640625D0 0.002470752689987421D0 0.5199999809265137D0)) (list (list 5.0D0 1280.1602783203125D0 0.002297255676239729D0 0.5299999713897705D0)) (list (list 5.0D0 1280.2908935546875D0 0.0022591741289943457D0 0.5399999618530273D0)) (list (list 5.0D0 1281.385986328125D0 0.002368945861235261D0 0.550000011920929D0)) (list (list 5.0D0 1282.1981201171875D0 0.0025674165226519108D0 0.5600000023841858D0)) (list (list 5.0D0 1282.18505859375D0 0.0027009632904082537D0 0.5699999928474426D0)) (list (list 5.0D0 1282.2215576171875D0 0.002812322461977601D0 0.5799999833106995D0)) (list (list 5.0D0 1282.6273193359375D0 0.002950283931568265D0 0.5899999737739563D0)) (list (list 5.0D0 1283.3421630859375D0 0.00316864182241261D0 0.5999999642372131D0)) (list (list 5.0D0 1284.8721923828125D0 0.0034886219073086977D0 0.6100000143051148D0)) (list (list 5.0D0 1286.0367431640625D0 0.0037825789768248797D0 0.6200000047683716D0)) (list (list 5.0D0 1286.5120849609375D0 0.003971605096012354D0 0.6299999952316284D0)) (list (list 5.0D0 1286.3841552734375D0 0.00403214804828167D0 0.6399999856948853D0)) (list (list 5.0D0 1286.0614013671875D0 0.003986214753240347D0 0.6499999761581421D0)) (list (list 5.0D0 1286.2489013671875D0 0.0039627160876989365D0 0.6599999666213989D0)) (list (list 5.0D0 1286.485107421875D0 0.004030226729810238D0 0.6699999570846558D0)) (list (list 5.0D0 1286.441162109375D0 0.004101247526705265D0 0.6800000071525574D0)) (list (list 5.0D0 1286.1461181640625D0 0.0041308291256427765D0 0.6899999976158142D0)) (list (list 5.0D0 1285.8680419921875D0 0.00409921957179904D0 0.699999988079071D0)) (list (list 5.0D0 1285.41748046875D0 0.003904341021552682D0 0.7099999785423279D0)) (list (list 5.0D0 1284.9739990234375D0 0.0036567894276231528D0 0.7199999690055847D0)) (list (list 5.0D0 1284.3013916015625D0 0.003380697453394532D0 0.7299999594688416D0)) (list (list 5.0D0 1283.530517578125D0 0.003148325253278017D0 0.7400000095367432D0)) (list (list 5.0D0 1282.9935302734375D0 0.0030639346223324538D0 0.75D0)) (list (list 5.0D0 1281.6192626953125D0 0.0031694381032139063D0 0.7599999904632568D0)) (list (list 5.0D0 1280.72705078125D0 0.003233372000977397D0 0.7699999809265137D0)) (list (list 5.0D0 1280.3594970703125D0 0.003171357326209545D0 0.7799999713897705D0)) (list (list 5.0D0 1280.6605224609375D0 0.002976874355226755D0 0.7899999618530273D0)) (list (list 5.0D0 1281.7386474609375D0 0.0027041530702263117D0 0.7999999523162842D0)) (list (list 5.0D0 1281.6805419921875D0 0.002543180715292692D0 0.8100000023841858D0)) (list (list 5.0D0 1281.0506591796875D0 0.0024322012905031443D0 0.8199999928474426D0)) (list (list 5.0D0 1279.895751953125D0 0.0023307197261601687D0 0.8299999833106995D0)) (list (list 5.0D0 1278.5501708984375D0 0.00219933339394629D0 0.8399999737739563D0)) (list (list 5.0D0 1277.52734375D0 0.0020052287727594376D0 0.8499999642372131D0)) (list (list 5.0D0 1276.6688232421875D0 0.0018763000844046474D0 0.85999995470047D0)) (list (list 5.0D0 1276.7000732421875D0 0.0018377653323113919D0 0.8700000047683716D0)) (list (list 5.0D0 1277.163330078125D0 0.0018802153645083309D0 0.8799999952316284D0)) (list (list 5.0D0 1277.5330810546875D0 0.0019895851146429777D0 0.8899999856948853D0)) (list (list 5.0D0 1277.2376708984375D0 0.002141576958820224D0 0.8999999761581421D0)) (list (list 5.0D0 1276.2108154296875D0 0.0022349851205945015D0 0.9099999666213989D0)) (list (list 5.0D0 1275.9471435546875D0 0.002307455288246274D0 0.9199999570846558D0)) (list (list 5.0D0 1276.23779296875D0 0.002310129813849926D0 0.9300000071525574D0)) (list (list 5.0D0 1276.698974609375D0 0.00224699336104095D0 0.9399999976158142D0)) (list (list 5.0D0 1276.810791015625D0 0.0021581777837127447D0 0.949999988079071D0)) (list (list 5.0D0 1276.045654296875D0 0.00211596442386508D0 0.9599999785423279D0)) (list (list 5.0D0 1275.3719482421875D0 0.0021516361739486456D0 0.9699999690055847D0)) (list (list 5.0D0 1275.3385009765625D0 0.002253291429951787D0 0.9799999594688416D0)) (list (list 5.0D0 1275.8160400390625D0 0.0023734092246741057D0 0.9899999499320984D0)) (list (list 5.0D0 1276.2708740234375D0 0.00244161207228899D0 1.0D0)) (list (list 5.0D0 1276.50927734375D0 0.002416078932583332D0 1.0099999904632569D0)) (list (list 5.0D0 1275.550537109375D0 0.002266671508550644D0 1.0199999809265137D0)) (list (list 5.0D0 1274.003662109375D0 0.0020931025501340628D0 1.0299999713897705D0)) (list (list 5.0D0 1273.0496826171875D0 0.001963080605491996D0 1.0399999618530274D0)) (list (list 5.0D0 1274.10498046875D0 0.0019333864329382778D0 1.0499999523162842D0)) (list (list 5.0D0 1276.23193359375D0 0.0021478210110217333D0 1.059999942779541D0)) (list (list 5.0D0 1277.577392578125D0 0.002565795788541436D0 1.0699999332427979D0)) (list (list 5.0D0 1278.275634765625D0 0.002972827758640051D0 1.0799999237060547D0)) (list (list 5.0D0 1278.47509765625D0 0.003252043854445219D0 1.090000033378601D0)) (list (list 5.0D0 1278.3568115234375D0 0.0033424883149564267D0 1.100000023841858D0)) (list (list 5.0D0 1277.949951171875D0 0.0032483353279531D0 1.1100000143051148D0)) (list (list 5.0D0 1277.7818603515625D0 0.003160726511850953D0 1.1200000047683716D0)) (list (list 5.0D0 1277.7467041015625D0 0.003150023054331541D0 1.1299999952316285D0)) (list (list 5.0D0 1277.7216796875D0 0.003198191523551941D0 1.1399999856948853D0)) (list (list 5.0D0 1277.5635986328125D0 0.003239833749830723D0 1.149999976158142D0)) (list (list 5.0D0 1277.0794677734375D0 0.00326649472117424D0 1.159999966621399D0)) (list (list 5.0D0 1276.7518310546875D0 0.003184181870892644D0 1.1699999570846558D0)) (list (list 5.0D0 1276.3824462890625D0 0.0030375849455595017D0 1.1799999475479126D0)) (list (list 5.0D0 1276.01220703125D0 0.002819753484800458D0 1.1899999380111695D0)) (list (list 5.0D0 1275.8099365234375D0 0.002507403725758195D0 1.1999999284744263D0)) (list (list 5.0D0 1275.9844970703125D0 0.0021831232588738203D0 1.209999918937683D0)) (list (list 5.0D0 1276.472900390625D0 0.0019101103534922004D0 1.2200000286102295D0)) (list (list 5.0D0 1277.0101318359375D0 0.0016858066665008665D0 1.2300000190734864D0)) (list (list 5.0D0 1277.1832275390625D0 0.001518634962849319D0 1.2400000095367432D0)) (list (list 5.0D0 1276.5540771484375D0 0.001419951324351132D0 1.25D0)) (list (list 5.0D0 1275.49169921875D0 0.0014008559519425035D0 1.2599999904632569D0)) (list (list 5.0D0 1274.926025390625D0 0.0014928802847862244D0 1.2699999809265137D0)) (list (list 5.0D0 1274.4334716796875D0 0.0015832961071282626D0 1.2799999713897705D0)) (list (list 5.0D0 1273.939208984375D0 0.001639363239519298D0 1.2899999618530274D0)) (list (list 5.0D0 1273.5279541015625D0 0.0016711063217371703D0 1.2999999523162842D0)) (list (list 5.0D0 1273.2115478515625D0 0.0017456584610044957D0 1.309999942779541D0)) (list (list 5.0D0 1272.945556640625D0 0.0019094871822744608D0 1.3199999332427979D0)) (list (list 5.0D0 1272.92138671875D0 0.0021384002175182104D0 1.3299999237060547D0)) (list (list 5.0D0 1273.01171875D0 0.0023724455386400223D0 1.3399999141693116D0)) (list (list 5.0D0 1273.0008544921875D0 0.0025381820742040873D0 1.350000023841858D0)) (list (list 5.0D0 1273.682861328125D0 0.002659839577972889D0 1.3600000143051148D0)) (list (list 5.0D0 1274.5198974609375D0 0.00282120518386364D0 1.3700000047683716D0)) (list (list 5.0D0 1275.3338623046875D0 0.0030121817253530026D0 1.3799999952316285D0)) (list (list 5.0D0 1275.9669189453125D0 0.0032063843682408333D0 1.3899999856948853D0)) (list (list 5.0D0 1276.333984375D0 0.003362466813996434D0 1.399999976158142D0)) (list (list 5.0D0 1277.152099609375D0 0.0033660773187875748D0 1.409999966621399D0)) (list (list 5.0D0 1277.805908203125D0 0.0033541733864694834D0 1.4199999570846558D0)) (list (list 5.0D0 1278.18994140625D0 0.0033121875021606684D0 1.4299999475479126D0)) (list (list 5.0D0 1278.1680908203125D0 0.0032607142347842455D0 1.4399999380111695D0)) (list (list 5.0D0 1277.70751953125D0 0.00323002552613616D0 1.4499999284744263D0)) (list (list 5.0D0 1278.0078125D0 0.0031558105256408453D0 1.459999918937683D0)) (list (list 5.0D0 1278.13623046875D0 0.003075177548453212D0 1.46999990940094D0)) (list (list 5.0D0 1277.934326171875D0 0.002990532899275422D0 1.4800000190734864D0)) (list (list 5.0D0 1277.3734130859375D0 0.0029272630345076323D0 1.4900000095367432D0)) (list (list 5.0D0 1276.6041259765625D0 0.0029098486993461848D0 1.5D0)) (list (list 5.0D0 1276.993896484375D0 0.002833370119333267D0 1.5099999904632569D0)) (list (list 5.0D0 1278.1336669921875D0 0.0027133773546665907D0 1.5199999809265137D0)) (list (list 5.0D0 1279.3153076171875D0 0.0026076752692461014D0 1.5299999713897705D0)) (list (list 5.0D0 1280.05859375D0 0.002508689882233739D0 1.5399999618530274D0)) (list (list 5.0D0 1279.9031982421875D0 0.0023761196061968804D0 1.5499999523162842D0)) (list (list 5.0D0 1277.5511474609375D0 0.002120194723829627D0 1.559999942779541D0)) (list (list 5.0D0 1275.3946533203125D0 0.0018680908251553774D0 1.5699999332427979D0)) (list (list 5.0D0 1274.7481689453125D0 0.0016607557190582157D0 1.5799999237060547D0)) (list (list 5.0D0 1275.753662109375D0 0.0015254522440955043D0 1.5899999141693116D0)) (list (list 5.0D0 1277.7672119140625D0 0.0014760529156774283D0 1.5999999046325684D0)) (list (list 5.0D0 1277.8209228515625D0 0.0014728570822626353D0 1.6100000143051148D0)) (list (list 5.0D0 1277.0833740234375D0 0.0013936856994405389D0 1.6200000047683716D0)) (list (list 5.0D0 1275.328369140625D0 0.001282853540033102D0 1.6299999952316285D0)) (list (list 5.0D0 1272.7802734375D0 0.001157178427092731D0 1.6399999856948853D0)) (list (list 5.0D0 1270.1075439453125D0 0.001028893399052322D0 1.649999976158142D0)) (list (list 5.0D0 1270.1065673828125D0 9.571642731316388D-4 1.659999966621399D0)) (list (list 5.0D0 1271.7452392578125D0 9.566916851326823D-4 1.6699999570846558D0)) (list (list 5.0D0 1273.52001953125D0 0.0010130879236385227D0 1.6799999475479126D0)) (list (list 5.0D0 1274.216552734375D0 0.0011081630364060402D0 1.6899999380111695D0)) (list (list 5.0D0 1272.938720703125D0 0.001222593942657113D0 1.6999999284744263D0)) (list (list 5.0D0 1270.8189697265625D0 0.0013734737876802683D0 1.709999918937683D0)) (list (list 5.0D0 1271.173828125D0 0.0016355388797819615D0 1.71999990940094D0)) (list (list 5.0D0 1272.81494140625D0 0.0019956929609179497D0 1.7300000190734864D0)) (list (list 5.0D0 1274.9886474609375D0 0.002420879667624831D0 1.7400000095367432D0)) (list (list 5.0D0 1277.0540771484375D0 0.002857270883396268D0 1.75D0)) (list (list 5.0D0 1278.5675048828125D0 0.0031778563279658556D0 1.7599999904632569D0)) (list (list 5.0D0 1280.3228759765625D0 0.00343923456966877D0 1.7699999809265137D0)) (list (list 5.0D0 1281.6007080078125D0 0.003613312728703022D0 1.7799999713897705D0)) (list (list 5.0D0 1282.4815673828125D0 0.003655452048406005D0 1.7899999618530274D0)) (list (list 5.0D0 1283.4061279296875D0 0.0035208133049309254D0 1.7999999523162842D0)) (list (list 5.0D0 1285.1844482421875D0 0.0031618275679647923D0 1.809999942779541D0)) (list (list 5.0D0 1287.094970703125D0 0.0027350729797035456D0 1.8199999332427979D0)) (list (list 5.0D0 1287.736572265625D0 0.002326085465028882D0 1.8299999237060547D0)) (list (list 5.0D0 1287.1259765625D0 0.0019992338493466378D0 1.8399999141693116D0)) (list (list 5.0D0 1285.869140625D0 0.001806936226785183D0 1.8499999046325684D0)) (list (list 5.0D0 1284.6468505859375D0 0.0017815908649936319D0 1.8600000143051148D0)) (list (list 5.0D0 1283.9903564453125D0 0.0017749466933310032D0 1.8700000047683716D0)) (list (list 5.0D0 1283.641357421875D0 0.0017279693856835366D0 1.8799999952316285D0)) (list (list 5.0D0 1283.16845703125D0 0.001655965344980359D0 1.8899999856948853D0)) (list (list 5.0D0 1282.21630859375D0 0.0015966343926265836D0 1.899999976158142D0)) (list (list 5.0D0 1281.6875D0 0.0015412592329084874D0 1.909999966621399D0)) (list (list 5.0D0 1281.0927734375D0 0.0016061995411291719D0 1.9199999570846558D0)) (list (list 5.0D0 1280.4644775390625D0 0.001749328337609768D0 1.9299999475479126D0)) (list (list 5.0D0 1280.2769775390625D0 0.001965081552043557D0 1.9399999380111695D0)) (list (list 5.0D0 1280.9847412109375D0 0.0022476075682789088D0 1.9499999284744263D0)) (list (list 5.0D0 1281.7239990234375D0 0.0025279982946813107D0 1.959999918937683D0)) (list (list 5.0D0 1281.1861572265625D0 0.0027021090500056744D0 1.96999990940094D0)) (list (list 5.0D0 1280.0023193359375D0 0.0028068446554243565D0 1.9799998998641968D0)) (list (list 5.0D0 1278.7442626953125D0 0.002848361385986209D0 1.9900000095367432D0)) (list (list 5.0D0 1277.96923828125D0 0.0028255239594727755D0 2.0D0)) (list (list 5.0D0 1278.0504150390625D0 0.002723885700106621D0 2.009999990463257D0)) (list (list 5.0D0 1277.7120361328125D0 0.0025681937113404274D0 2.0199999809265137D0)) (list (list 5.0D0 1277.67431640625D0 0.002407056512311101D0 2.0299999713897705D0)) (list (list 5.0D0 1277.927978515625D0 0.002268334152176976D0 2.0399999618530274D0)) (list (list 5.0D0 1278.236328125D0 0.00217313296161592D0 2.049999952316284D0)) (list (list 5.0D0 1278.526611328125D0 0.00214396882802248D0 2.059999942779541D0)) (list (list 5.0D0 1277.9739990234375D0 0.0021356623619794846D0 2.069999933242798D0)) (list (list 5.0D0 1277.690673828125D0 0.0021284737158566714D0 2.0799999237060547D0)) (list (list 5.0D0 1277.7005615234375D0 0.002121602650731802D0 2.0899999141693116D0)) (list (list 5.0D0 1277.71728515625D0 0.002121018012985587D0 2.0999999046325684D0)) (list (list 5.0D0 1277.7578125D0 0.002140465658158064D0 2.109999895095825D0)) (list (list 5.0D0 1276.8572998046875D0 0.002183297649025917D0 2.119999885559082D0)) (list (list 5.0D0 1276.3846435546875D0 0.0022325848694890738D0 2.129999876022339D0)) (list (list 5.0D0 1276.5367431640625D0 0.0023087842855602503D0 2.1399998664855957D0)) (list (list 5.0D0 1277.1468505859375D0 0.0024338101502507925D0 2.1499998569488526D0)) (list (list 5.0D0 1278.1812744140625D0 0.0025677077937871218D0 2.1599998474121094D0)) (list (list 5.0D0 1279.1143798828125D0 0.0025963648222386837D0 2.169999837875366D0)) (list (list 5.0D0 1280.2972412109375D0 0.002590251388028264D0 2.180000066757202D0)) (list (list 5.0D0 1281.433349609375D0 0.0026297925505787135D0 2.190000057220459D0)) (list (list 5.0D0 1282.089599609375D0 0.002792102750390768D0 2.200000047683716D0)) (list (list 5.0D0 1282.2242431640625D0 0.003115035593509674D0 2.2100000381469727D0)) (list (list 5.0D0 1282.3443603515625D0 0.003332685213536024D0 2.2200000286102295D0)) (list (list 5.0D0 1282.34765625D0 0.0033908882178366185D0 2.2300000190734864D0)) (list (list 5.0D0 1282.081787109375D0 0.003262590616941452D0 2.240000009536743D0)) (list (list 5.0D0 1281.458984375D0 0.002959393197670579D0 2.25D0)) (list (list 5.0D0 1280.83447265625D0 0.0026256954297423363D0 2.259999990463257D0)) (list (list 5.0D0 1280.5670166015625D0 0.0023159203119575978D0 2.2699999809265137D0)) (list (list 5.0D0 1280.477294921875D0 0.002076278207823634D0 2.2799999713897705D0)) (list (list 5.0D0 1280.522705078125D0 0.0019394690170884133D0 2.2899999618530274D0)) (list (list 5.0D0 1280.731201171875D0 0.0019223899580538273D0 2.299999952316284D0)) (list (list 5.0D0 1281.4210205078125D0 0.0020013677421957255D0 2.309999942779541D0)) (list (list 5.0D0 1281.998046875D0 0.0020770826376974583D0 2.319999933242798D0)) (list (list 5.0D0 1281.3287353515625D0 0.0020369363483041525D0 2.3299999237060547D0)) (list (list 5.0D0 1279.694091796875D0 0.0019384573679417372D0 2.3399999141693116D0)) (list (list 5.0D0 1277.8197021484375D0 0.0018738431390374899D0 2.3499999046325684D0)) (list (list 5.0D0 1276.450439453125D0 0.0018381867557764054D0 2.359999895095825D0)) (list (list 5.0D0 1277.637939453125D0 0.0017591970972716809D0 2.369999885559082D0)) (list (list 5.0D0 1278.68310546875D0 0.0016729844501242042D0 2.379999876022339D0)) (list (list 5.0D0 1279.24853515625D0 0.0016240552067756653D0 2.3899998664855957D0)) (list (list 5.0D0 1279.530029296875D0 0.001643190160393715D0 2.3999998569488526D0)) (list (list 5.0D0 1279.1451416015625D0 0.0016728268237784505D0 2.4099998474121094D0)) (list (list 5.0D0 1279.4310302734375D0 0.001645297626964748D0 2.419999837875366D0)) (list (list 5.0D0 1279.994873046875D0 0.0015379159012809396D0 2.429999828338623D0)) (list (list 5.0D0 1280.7274169921875D0 0.0014208902139216662D0 2.440000057220459D0)) (list (list 5.0D0 1281.482177734375D0 0.0013828352093696595D0 2.450000047683716D0)) (list (list 5.0D0 1281.546875D0 0.0014736942248418928D0 2.4600000381469727D0)) (list (list 5.0D0 1280.583984375D0 0.001614931970834732D0 2.4700000286102295D0)) (list (list 5.0D0 1279.9344482421875D0 0.0017755526350811124D0 2.4800000190734864D0)) (list (list 5.0D0 1279.7010498046875D0 0.0019377851858735085D0 2.490000009536743D0)) (list (list 5.0D0 1279.7017822265625D0 0.0020924643613398075D0 2.5D0)) (list (list 5.0D0 1279.9786376953125D0 0.002264208160340786D0 2.509999990463257D0)) (list (list 5.0D0 1279.89306640625D0 0.00228850613348186D0 2.5199999809265137D0)) (list (list 5.0D0 1279.9307861328125D0 0.0022064782679080963D0 2.5299999713897705D0)) (list (list 5.0D0 1279.779296875D0 0.002041659550741315D0 2.5399999618530274D0)) (list (list 5.0D0 1279.092529296875D0 0.0018368471646681428D0 2.549999952316284D0)) (list (list 5.0D0 1278.3360595703125D0 0.0017339499900117517D0 2.559999942779541D0)) (list (list 5.0D0 1277.454833984375D0 0.001713976263999939D0 2.569999933242798D0)) (list (list 5.0D0 1277.46923828125D0 0.0017828731797635556D0 2.5799999237060547D0)) (list (list 5.0D0 1277.8035888671875D0 0.0019149825675413013D0 2.5899999141693116D0)) (list (list 5.0D0 1277.7481689453125D0 0.0020556089002639056D0 2.5999999046325684D0)) (list (list 5.0D0 1277.9755859375D0 0.0020544109866023064D0 2.609999895095825D0)) (list (list 5.0D0 1276.963134765625D0 0.0018032985972240568D0 2.619999885559082D0)) (list (list 5.0D0 1276.167724609375D0 0.0014839135110378266D0 2.629999876022339D0)) (list (list 5.0D0 1275.6331787109375D0 0.0012610243866220117D0 2.6399998664855957D0)) (list (list 5.0D0 1275.28125D0 0.0012691122246906162D0 2.6499998569488526D0)) (list (list 5.0D0 1276.1229248046875D0 0.0015294834738597274D0 2.6599998474121094D0)) (list (list 5.0D0 1275.630615234375D0 0.0018456088146194816D0 2.669999837875366D0)) (list (list 5.0D0 1274.65869140625D0 0.0020203108433634043D0 2.679999828338623D0)) (list (list 5.0D0 1273.7474365234375D0 0.0020462065003812313D0 2.690000057220459D0)) (list (list 5.0D0 1273.42578125D0 0.001967998221516609D0 2.700000047683716D0)) (list (list 5.0D0 1274.5147705078125D0 0.001840454526245594D0 2.7100000381469727D0)) (list (list 5.0D0 1275.44775390625D0 0.001889962237328291D0 2.7200000286102295D0)) (list (list 5.0D0 1275.9224853515625D0 0.0020274461712688208D0 2.7300000190734864D0)) (list (list 5.0D0 1275.932373046875D0 0.0021998481824994088D0 2.740000009536743D0)) (list (list 5.0D0 1275.593994140625D0 0.002358131343498826D0 2.75D0)) (list (list 5.0D0 1275.1790771484375D0 0.0024483490269631148D0 2.759999990463257D0)) (list (list 5.0D0 1274.6114501953125D0 0.002446436323225498D0 2.7699999809265137D0)) (list (list 5.0D0 1273.977294921875D0 0.0023743105120956898D0 2.7799999713897705D0)) (list (list 5.0D0 1273.588623046875D0 0.0022343886084854603D0 2.7899999618530274D0)) (list (list 5.0D0 1273.76904296875D0 0.0020520819816738367D0 2.799999952316284D0)) (list (list 5.0D0 1274.762939453125D0 0.0019618473015725613D0 2.809999942779541D0)) (list (list 5.0D0 1276.5311279296875D0 0.0019815401174128056D0 2.819999933242798D0)) (list (list 5.0D0 1277.157958984375D0 0.002035072073340416D0 2.8299999237060547D0)) (list (list 5.0D0 1276.482177734375D0 0.002063718158751726D0 2.8399999141693116D0)) (list (list 5.0D0 1274.8907470703125D0 0.00204171659424901D0 2.8499999046325684D0)) (list (list 5.0D0 1273.351318359375D0 0.002074658405035734D0 2.859999895095825D0)) (list (list 5.0D0 1272.79833984375D0 0.002121654339134693D0 2.869999885559082D0)) (list (list 5.0D0 1272.7060546875D0 0.0021817267406731844D0 2.879999876022339D0)) (list (list 5.0D0 1273.0576171875D0 0.0022196373902261258D0 2.8899998664855957D0)) (list (list 5.0D0 1273.9395751953125D0 0.0021963610779494047D0 2.8999998569488526D0)) (list (list 5.0D0 1275.6102294921875D0 0.00207704515196383D0 2.9099998474121094D0)) (list (list 5.0D0 1275.962890625D0 0.0018968062940984965D0 2.919999837875366D0)) (list (list 5.0D0 1274.403564453125D0 0.0016629282617941499D0 2.929999828338623D0)) (list (list 5.0D0 1271.654296875D0 0.0014742141356691719D0 2.93999981880188D0)) (list (list 5.0D0 1268.9984130859375D0 0.0013966214610263706D0 2.950000047683716D0)) (list (list 5.0D0 1268.8438720703125D0 0.001292558154091239D0 2.9600000381469727D0)) (list (list 5.0D0 1271.8236083984375D0 0.0012087326031178236D0 2.9700000286102295D0)) (list (list 5.0D0 1273.850830078125D0 0.0012067919597029686D0 2.9800000190734864D0)) (list (list 5.0D0 1274.496337890625D0 0.0012818285031244159D0 2.990000009536743D0)) (list (list 5.0D0 1274.2281494140625D0 0.001424066023901105D0 3.0D0)) (list (list 5.0D0 1274.212646484375D0 0.0016750110080465675D0 3.009999990463257D0)) (list (list 5.0D0 1274.433837890625D0 0.001901552896015346D0 3.0199999809265137D0)) (list (list 5.0D0 1273.7269287109375D0 0.002088089007884264D0 3.0299999713897705D0)) (list (list 5.0D0 1272.532470703125D0 0.0021956406999379397D0 3.0399999618530274D0)) (list (list 5.0D0 1271.6678466796875D0 0.002188532380387187D0 3.049999952316284D0)) (list (list 5.0D0 1272.287353515625D0 0.002037462079897523D0 3.059999942779541D0)) (list (list 5.0D0 1274.1156005859375D0 0.001744552981108427D0 3.069999933242798D0)) (list (list 5.0D0 1274.7152099609375D0 0.00144698575604707D0 3.0799999237060547D0)) (list (list 5.0D0 1274.027587890625D0 0.001244884915649891D0 3.0899999141693116D0)) (list (list 5.0D0 1272.6363525390625D0 0.0012060104636475444D0 3.0999999046325684D0)) (list (list 5.0D0 1271.8118896484375D0 0.001322679570876062D0 3.109999895095825D0)) (list (list 5.0D0 1272.8583984375D0 0.0013880464248359204D0 3.119999885559082D0)) (list (list 5.0D0 1273.8284912109375D0 0.001300064497627318D0 3.129999876022339D0)) (list (list 5.0D0 1273.805419921875D0 0.001120464294217527D0 3.1399998664855957D0)) (list (list 5.0D0 1272.47607421875D0 9.521949104964733D-4 3.1499998569488526D0)) (list (list 5.0D0 1270.958984375D0 9.401975548826158D-4 3.1599998474121094D0)) (list (list 5.0D0 1270.98779296875D0 0.0011182429734617472D0 3.169999837875366D0)) (list (list 5.0D0 1272.427734375D0 0.0013170838356018067D0 3.179999828338623D0)) (list (list 5.0D0 1274.02587890625D0 0.0014082818524912D0 3.18999981880188D0)) (list (list 5.0D0 1273.914306640625D0 0.0013122595846652985D0 3.1999998092651367D0)) (list (list 5.0D0 1268.431640625D0 0.001077046850696206D0 3.2100000381469727D0)) (list (list 5.0D0 1266.096923828125D0 9.767157025635243D-4 3.2200000286102295D0)) (list (list 5.0D0 1269.3948974609375D0 9.301529498770833D-4 3.2300000190734864D0)) (list (list 5.0D0 1274.440185546875D0 0.0010032386053353548D0 3.240000009536743D0)) (list (list 5.0D0 1277.0159912109375D0 0.0011958874529227615D0 3.25D0)) (list (list 5.0D0 1275.286865234375D0 0.0012113143457099796D0 3.259999990463257D0)) (list (list 5.0D0 1273.8968505859375D0 0.0012344667920842767D0 3.2699999809265137D0)) (list (list 5.0D0 1273.45654296875D0 0.0012262793025001884D0 3.2799999713897705D0)) (list (list 5.0D0 1273.0203857421875D0 0.001194335287436843D0 3.2899999618530274D0)) (list (list 5.0D0 1271.603759765625D0 0.00114894297439605D0 3.299999952316284D0)) (list (list 5.0D0 1268.8055419921875D0 0.0010809972882270813D0 3.309999942779541D0)) (list (list 5.0D0 1268.0345458984375D0 0.0010424036299809814D0 3.319999933242798D0)) (list (list 5.0D0 1269.3016357421875D0 0.0010213126661255956D0 3.3299999237060547D0)) (list (list 5.0D0 1272.074951171875D0 0.0010592525359243155D0 3.3399999141693116D0)) (list (list 5.0D0 1275.320068359375D0 0.0011841279920190573D0 3.3499999046325684D0)) (list (list 5.0D0 1276.7603759765625D0 0.0013664581347256899D0 3.359999895095825D0)) (list (list 5.0D0 1276.8480224609375D0 0.0014218833530321718D0 3.369999885559082D0)) (list (list 5.0D0 1275.92724609375D0 0.0014152141520753503D0 3.379999876022339D0)) (list (list 5.0D0 1274.870361328125D0 0.001372547703795135D0 3.3899998664855957D0)) (list (list 5.0D0 1274.097900390625D0 0.0013220866676419974D0 3.3999998569488526D0)) (list (list 5.0D0 1272.2764892578125D0 0.0013122990494593978D0 3.4099998474121094D0)) (list (list 5.0D0 1271.1878662109375D0 0.0013161535607650876D0 3.419999837875366D0)) (list (list 5.0D0 1271.565185546875D0 0.0013842778280377388D0 3.429999828338623D0)) (list (list 5.0D0 1272.9459228515625D0 0.0015305663691833616D0 3.43999981880188D0)) (list (list 5.0D0 1274.5894775390625D0 0.0017324056243523956D0 3.4499998092651367D0)) (list (list 5.0D0 1275.4971923828125D0 0.0018777030054479838D0 3.4600000381469727D0)) (list (list 5.0D0 1275.7823486328125D0 0.001821151003241539D0 3.4700000286102295D0)) (list (list 5.0D0 1276.2371826171875D0 0.0016117003979161382D0 3.4800000190734864D0)) (list (list 5.0D0 1275.515380859375D0 0.0013043154031038285D0 3.490000009536743D0)) (list (list 5.0D0 1272.622314453125D0 9.868111228570342D-4 3.5D0)) (list (list 5.0D0 1268.1971435546875D0 8.392580202780664D-4 3.509999990463257D0)) (list (list 5.0D0 1267.8990478515625D0 8.482905104756355D-4 3.5199999809265137D0)) (list (list 5.0D0 1269.2938232421875D0 8.74851131811738D-4 3.5299999713897705D0)) (list (list 5.0D0 1271.1669921875D0 8.766463724896312D-4 3.5399999618530274D0)) (list (list 5.0D0 1272.6280517578125D0 8.30048113130033D-4 3.549999952316284D0)) (list (list 5.0D0 1273.305908203125D0 7.240131380967796D-4 3.559999942779541D0)) (list (list 5.0D0 1273.977294921875D0 6.437865667976439D-4 3.569999933242798D0)) (list (list 5.0D0 1273.304931640625D0 6.195801543071866D-4 3.5799999237060547D0)) (list (list 5.0D0 1271.919921875D0 6.155249429866672D-4 3.5899999141693116D0)) (list (list 5.0D0 1270.91748046875D0 6.032706587575376D-4 3.5999999046325684D0)) (list (list 5.0D0 1272.07421875D0 6.012152298353612D-4 3.609999895095825D0)) (list (list 5.0D0 1271.7374267578125D0 5.966283497400582D-4 3.619999885559082D0)) (list (list 5.0D0 1269.683837890625D0 6.653137970715761D-4 3.629999876022339D0)) (list (list 5.0D0 1267.2408447265625D0 7.861016783863306D-4 3.6399998664855957D0)) (list (list 5.0D0 1265.7930908203125D0 9.09343536477536D-4 3.6499998569488526D0)) (list (list 5.0D0 1266.4713134765625D0 9.385593584738672D-4 3.6599998474121094D0)) (list (list 5.0D0 1269.09375D0 9.016198455356062D-4 3.669999837875366D0)) (list (list 5.0D0 1271.057861328125D0 8.465581340715289D-4 3.679999828338623D0)) (list (list 5.0D0 1272.6820068359375D0 7.940927753224969D-4 3.68999981880188D0)) (list (list 5.0D0 1274.07958984375D0 7.452901918441057D-4 3.6999998092651367D0)) (list (list 5.0D0 1273.8118896484375D0 6.548739038407803D-4 3.7099997997283936D0)) (list (list 5.0D0 1272.1876220703125D0 5.916242371313274D-4 3.7200000286102295D0)) (list (list 5.0D0 1271.3199462890625D0 6.346508162096143D-4 3.7300000190734864D0)) (list (list 5.0D0 1271.115966796875D0 7.744903559796512D-4 3.740000009536743D0)) (list (list 5.0D0 1271.24462890625D0 9.8328641615808D-4 3.75D0)) (list (list 5.0D0 1271.44677734375D0 0.001221933402121067D0 3.759999990463257D0)) (list (list 5.0D0 1271.3724365234375D0 0.0012697292258962989D0 3.7699999809265137D0)) (list (list 5.0D0 1271.8671875D0 0.0011661063181236387D0 3.7799999713897705D0)) (list (list 5.0D0 1271.817626953125D0 9.598772157914937D-4 3.7899999618530274D0)) (list (list 5.0D0 1270.4691162109375D0 7.331181550398469D-4 3.799999952316284D0)) (list (list 5.0D0 1268.3779296875D0 6.480320589616895D-4 3.809999942779541D0)) (list (list 5.0D0 1268.2296142578125D0 7.38613773137331D-4 3.819999933242798D0)) (list (list 5.0D0 1269.0169677734375D0 8.265767246484757D-4 3.8299999237060547D0)) (list (list 5.0D0 1270.1197509765625D0 8.642873144708574D-4 3.8399999141693116D0)) (list (list 5.0D0 1271.0152587890625D0 8.321917848661542D-4 3.8499999046325684D0)) (list (list 5.0D0 1271.31396484375D0 7.389338570646942D-4 3.859999895095825D0)) (list (list 5.0D0 1272.10791015625D0 6.507206708192825D-4 3.869999885559082D0)) (list (list 5.0D0 1271.6629638671875D0 6.045491900295019D-4 3.879999876022339D0)) (list (list 5.0D0 1270.15673828125D0 6.136870360933244D-4 3.8899998664855957D0)) (list (list 5.0D0 1268.544921875D0 6.862562731839716D-4 3.8999998569488526D0)) (list (list 5.0D0 1269.2435302734375D0 8.327548275701702D-4 3.9099998474121094D0)) (list (list 5.0D0 1272.75634765625D0 9.243943495675921D-4 3.919999837875366D0)) (list (list 5.0D0 1274.4791259765625D0 9.586185915395618D-4 3.929999828338623D0)) (list (list 5.0D0 1274.4268798828125D0 9.519303566776216D-4 3.93999981880188D0)) (list (list 5.0D0 1273.2154541015625D0 9.347661398351193D-4 3.9499998092651367D0)) (list (list 5.0D0 1271.701904296875D0 9.654223104007542D-4 3.9599997997283936D0)) (list (list 5.0D0 1271.0916748046875D0 0.001053036074154079D0 3.9700000286102295D0)) (list (list 5.0D0 1270.77294921875D0 0.001152488635852933D0 3.9800000190734864D0)) (list (list 5.0D0 1270.700927734375D0 0.0013074155431240797D0 3.990000009536743D0)) (list (list 5.0D0 1270.8363037109375D0 0.001520009944215417D0 4.0D0)) (list (list 5.0D0 1271.0606689453125D0 0.0016832493711262942D0 4.009999752044678D0)) (list (list 5.0D0 1272.1182861328125D0 0.0016880544135347009D0 4.019999980926514D0)) (list (list 5.0D0 1272.8084716796875D0 0.0015643829246982933D0 4.029999732971191D0)) (list (list 5.0D0 1273.009765625D0 0.001391586964018643D0 4.039999961853027D0)) (list (list 5.0D0 1272.93310546875D0 0.0012460954021662474D0 4.049999713897705D0)) (list (list 5.0D0 1273.3055419921875D0 0.0011913030175492168D0 4.059999942779541D0)) (list (list 5.0D0 1276.3614501953125D0 0.0011773125734180212D0 4.069999694824219D0)) (list (list 5.0D0 1277.2451171875D0 0.0011723084608092905D0 4.079999923706055D0)) (list (list 5.0D0 1276.1522216796875D0 0.0011781812645494938D0 4.089999675750732D0)) (list (list 5.0D0 1273.763427734375D0 0.001225206651724875D0 4.099999904632568D0)) (list (list 5.0D0 1270.751953125D0 0.0014066447038203478D0 4.110000133514404D0)) (list (list 5.0D0 1270.6082763671875D0 0.0014473627088591457D0 4.119999885559082D0)) (list (list 5.0D0 1272.69677734375D0 0.001388675649650395D0 4.130000114440918D0)) (list (list 5.0D0 1275.9468994140625D0 0.0012675570324063302D0 4.139999866485596D0)) (list (list 5.0D0 1278.801513671875D0 0.0011162107111886144D0 4.150000095367432D0)) (list (list 5.0D0 1278.6546630859375D0 9.536913130432367D-4 4.159999847412109D0)) (list (list 5.0D0 1277.1529541015625D0 8.885525749064982D-4 4.170000076293945D0)) (list (list 5.0D0 1274.9583740234375D0 9.522506152279675D-4 4.179999828338623D0)) (list (list 5.0D0 1273.4879150390625D0 0.0010847569210454822D0 4.190000057220459D0)) (list (list 5.0D0 1273.458251953125D0 0.0012313176412135363D0 4.199999809265137D0)) (list (list 5.0D0 1274.157958984375D0 0.001364043797366321D0 4.210000038146973D0)) (list (list 5.0D0 1276.1002197265625D0 0.0013891052221879363D0 4.21999979019165D0)) (list (list 5.0D0 1277.128662109375D0 0.001395571161992848D0 4.230000019073486D0)) (list (list 5.0D0 1277.4749755859375D0 0.0014058980159461499D0 4.239999771118164D0)) (list (list 5.0D0 1277.34716796875D0 0.0014234287664294243D0 4.25D0)) (list (list 5.0D0 1276.5003662109375D0 0.0014227967476472259D0 4.259999752044678D0)) (list (list 5.0D0 1277.5924072265625D0 0.0013415898429229856D0 4.269999980926514D0)) (list (list 5.0D0 1278.0252685546875D0 0.0012289595324546099D0 4.279999732971191D0)) (list (list 5.0D0 1278.2640380859375D0 0.0011333313304930926D0 4.289999961853027D0)) (list (list 5.0D0 1278.790283203125D0 0.00107801693957299D0 4.299999713897705D0)) (list (list 5.0D0 1279.73828125D0 0.001040824456140399D0 4.309999942779541D0)) (list (list 5.0D0 1281.3934326171875D0 0.0011261836625635624D0 4.319999694824219D0)) (list (list 5.0D0 1282.3251953125D0 0.001267986954189837D0 4.329999923706055D0)) (list (list 5.0D0 1282.3388671875D0 0.0014421584783121944D0 4.339999675750732D0)) (list (list 5.0D0 1281.5894775390625D0 0.0015914146788418293D0 4.349999904632568D0)) (list (list 5.0D0 1280.6810302734375D0 0.0015847274335101247D0 4.360000133514404D0)) (list (list 5.0D0 1279.92529296875D0 0.001446384354494512D0 4.369999885559082D0)) (list (list 5.0D0 1279.25439453125D0 0.001326908590272069D0 4.380000114440918D0)) (list (list 5.0D0 1278.5732421875D0 0.0012713053729385138D0 4.389999866485596D0)) (list (list 5.0D0 1277.9052734375D0 0.001300069154240191D0 4.400000095367432D0)) (list (list 5.0D0 1277.50341796875D0 0.0014083670685067773D0 4.409999847412109D0)) (list (list 5.0D0 1275.87646484375D0 0.001492696232162416D0 4.420000076293945D0)) (list (list 5.0D0 1274.9271240234375D0 0.0015123755438253284D0 4.429999828338623D0)) (list (list 5.0D0 1274.796142578125D0 0.0014543433208018542D0 4.440000057220459D0)) (list (list 5.0D0 1275.6343994140625D0 0.001338569330982864D0 4.449999809265137D0)) (list (list 5.0D0 1277.8941650390625D0 0.0012379559921100736D0 4.460000038146973D0)) (list (list 5.0D0 1279.103271484375D0 0.0012001714203506709D0 4.46999979019165D0)) (list (list 5.0D0 1279.657958984375D0 0.0012089702067896724D0 4.480000019073486D0)) (list (list 5.0D0 1279.27001953125D0 0.0012157339369878173D0 4.489999771118164D0)) (list (list 5.0D0 1278.2486572265625D0 0.0012128596426919103D0 4.5D0)) (list (list 5.0D0 1277.991943359375D0 0.0012682439992204309D0 4.509999752044678D0)) (list (list 5.0D0 1278.3607177734375D0 0.0012801708653569222D0 4.519999980926514D0)) (list (list 5.0D0 1278.587646484375D0 0.0012205310631543398D0 4.529999732971191D0)) (list (list 5.0D0 1276.6109619140625D0 0.0010916219325736165D0 4.539999961853027D0)) (list (list 5.0D0 1273.02197265625D0 9.192850557155907D-4 4.549999713897705D0)) (list (list 5.0D0 1273.0228271484375D0 7.645809673704207D-4 4.559999942779541D0)) (list (list 5.0D0 1289.8316650390625D0 8.10596626251936D-4 4.569999694824219D0)) (list (list 5.0D0 1292.7816162109375D0 8.137234253808856D-4 4.579999923706055D0)) (list (list 5.0D0 1290.531005859375D0 7.269512279890478D-4 4.589999675750732D0)) (list (list 5.0D0 1289.8472900390625D0 5.617886781692505D-4 4.599999904632568D0)) (list (list 5.0D0 1291.322265625D0 4.0644622640684247D-4 4.610000133514404D0)) (list (list 5.0D0 1292.783935546875D0 3.894822730217129D-4 4.619999885559082D0)) (list (list 5.0D0 1281.5972900390625D0 5.307116662152112D-4 4.630000114440918D0)) (list (list 5.0D0 1273.5828857421875D0 7.43926502764225D-4 4.639999866485596D0)) (list (list 5.0D0 1274.9368896484375D0 9.449170320294797D-4 4.650000095367432D0)) (list (list 5.0D0 1274.740234375D0 0.0010575178312137723D0 4.659999847412109D0)) (list (list 5.0D0 1275.1966552734375D0 0.0010606361320242286D0 4.670000076293945D0)) (list (list 5.0D0 1275.661865234375D0 0.0010583172552287579D0 4.679999828338623D0)) (list (list 5.0D0 1276.4632568359375D0 0.0010759442811831832D0 4.690000057220459D0)) (list (list 5.0D0 1277.4835205078125D0 0.0011110870400443674D0 4.699999809265137D0)) (list (list 5.0D0 1277.83984375D0 0.0011235387064516545D0 4.710000038146973D0)) (list (list 5.0D0 1275.479736328125D0 0.0010855175787582994D0 4.71999979019165D0)) (list (list 5.0D0 1272.4281005859375D0 0.0011418703943490982D0 4.730000019073486D0)) (list (list 5.0D0 1270.8192138671875D0 0.0012392888311296702D0 4.739999771118164D0)) (list (list 5.0D0 1271.826416015625D0 0.0013350886292755604D0 4.75D0)) (list (list 5.0D0 1275.32470703125D0 0.001414239639416337D0 4.759999752044678D0)) (list (list 5.0D0 1277.03564453125D0 0.00148824043571949D0 4.769999980926514D0)) (list (list 5.0D0 1278.3536376953125D0 0.001483017229475081D0 4.779999732971191D0)) (list (list 5.0D0 1279.4365234375D0 0.0013905575033277274D0 4.789999961853027D0)) (list (list 5.0D0 1279.902587890625D0 0.001223648083396256D0 4.799999713897705D0)) (list (list 5.0D0 1278.5821533203125D0 0.0010186276631429792D0 4.809999942779541D0)) (list (list 5.0D0 1277.7142333984375D0 9.671090519987047D-4 4.819999694824219D0)) (list (list 5.0D0 1278.3255615234375D0 0.00101866212207824D0 4.829999923706055D0)) (list (list 5.0D0 1280.154541015625D0 0.001162264496088028D0 4.839999675750732D0)) (list (list 5.0D0 1282.1243896484375D0 0.0013299018610268832D0 4.849999904632568D0)) (list (list 5.0D0 1282.0086669921875D0 0.0013674295041710139D0 4.859999656677246D0)) (list (list 5.0D0 1281.3155517578125D0 0.0013333426322788D0 4.869999885559082D0)) (list (list 5.0D0 1282.054443359375D0 0.0012325576972216368D0 4.880000114440918D0)) (list (list 5.0D0 1283.2032470703125D0 0.0011275336146354676D0 4.889999866485596D0)) (list (list 5.0D0 1283.55615234375D0 0.0010357737774029375D0 4.900000095367432D0)) (list (list 5.0D0 1281.715087890625D0 9.092707186937332D-4 4.909999847412109D0)) (list (list 5.0D0 1273.2823486328125D0 8.302111527882516D-4 4.920000076293945D0)) (list (list 5.0D0 1265.9639892578125D0 8.336154278367758D-4 4.929999828338623D0)) (list (list 5.0D0 1261.51416015625D0 7.950667641125619D-4 4.940000057220459D0)) (list (list 5.0D0 1260.2587890625D0 6.555308937095106D-4 4.949999809265137D0)) (list (list 5.0D0 1260.9400634765625D0 4.4694700045511127D-4 4.960000038146973D0)) (list (list 5.0D0 1263.5006103515625D0 3.822348080575466D-4 4.96999979019165D0)) (list (list 5.0D0 1261.76611328125D0 3.680740192066878D-4 4.980000019073486D0)) (list (list 5.0D0 1253.1080322265625D0 3.9761365042068064D-4 4.989999771118164D0)) (list (list 5.0D0 1242.1251220703125D0 4.152516776230186D-4 5.0D0)) (list (list 5.0D0 1243.0296630859375D0 2.948532346636057D-4 5.009999752044678D0)) (list (list 5.0D0 1232.7864990234375D0 2.7488780324347317D-4 5.019999980926514D0)) (list (list 5.0D0 1229.8992919921875D0 3.0989860533736646D-4 5.029999732971191D0)) (list (list 5.0D0 1222.5906982421875D0 3.858915879391134D-4 5.039999961853027D0)) (list (list 5.0D0 1212.1448974609375D0 4.950099973939359D-4 5.049999713897705D0)) (list (list 5.0D0 1217.8126220703125D0 6.375181255862117D-4 5.059999942779541D0)) (list (list 5.0D0 1205.69189453125D0 8.020513341762126D-4 5.069999694824219D0)) (list (list 5.0D0 1206.346435546875D0 9.342874400317669D-4 5.079999923706055D0)) (list (list 5.0D0 1205.775390625D0 9.32906405068934D-4 5.089999675750732D0)) (list (list 5.0D0 1201.3170166015625D0 7.596081122756004D-4 5.099999904632568D0)) (list (list 5.0D0 1205.7884521484375D0 4.511656006798148D-4 5.109999656677246D0)) (list (list 5.0D0 1201.90673828125D0 2.522846916690469D-4 5.119999885559082D0)) (list (list 5.0D0 1201.0439453125D0 3.8963500992394984D-4 5.130000114440918D0)) (list (list 5.0D0 1204.611572265625D0 5.437671206891537D-4 5.139999866485596D0)) (list (list 5.0D0 1209.908203125D0 5.533785442821682D-4 5.150000095367432D0)) (list (list 5.0D0 1209.3878173828125D0 4.5864266576245427D-4 5.159999847412109D0)) (list (list 5.0D0 1224.550048828125D0 3.9361134986393154D-4 5.170000076293945D0)) (list (list 5.0D0 1238.72265625D0 4.0533015271648765D-4 5.179999828338623D0)) (list (list 5.0D0 1257.1795654296875D0 4.5521397260017693D-4 5.190000057220459D0)) (list (list 5.0D0 1279.79345703125D0 5.015762289986014D-4 5.199999809265137D0)) (list (list 5.0D0 1299.615478515625D0 5.000263336114585D-4 5.210000038146973D0)) (list (list 5.0D0 1323.339599609375D0 3.704292175825685D-4 5.21999979019165D0)) (list (list 5.0D0 1349.3309326171875D0 3.0462490394711495D-4 5.230000019073486D0)) (list (list 5.0D0 1364.1629638671875D0 3.196263569407165D-4 5.239999771118164D0)) (list (list 5.0D0 1367.716796875D0 4.0129380067810416D-4 5.25D0)) (list (list 5.0D0 1375.36865234375D0 5.032034823670983D-4 5.259999752044678D0)) (list (list 5.0D0 1379.998779296875D0 4.630759940482676D-4 5.269999980926514D0)) (list (list 5.0D0 1369.783447265625D0 4.0803971933200956D-4 5.279999732971191D0)) (list (list 5.0D0 1360.6053466796875D0 4.014905134681612D-4 5.289999961853027D0)) (list (list 5.0D0 1353.4427490234375D0 4.7520684893243015D-4 5.299999713897705D0)) (list (list 5.0D0 1332.02734375D0 6.275649066083133D-4 5.309999942779541D0)) (list (list 5.0D0 1297.5244140625D0 5.520012928172946D-4 5.319999694824219D0)) (list (list 5.0D0 1274.4114990234375D0 4.4994382187724114D-4 5.329999923706055D0)) (list (list 5.0D0 1252.8714599609375D0 4.143146506976336D-4 5.339999675750732D0)) (list (list 5.0D0 1233.9639892578125D0 4.3844012543559075D-4 5.349999904632568D0)) (list (list 5.0D0 1231.1470947265625D0 4.0762717253528536D-4 5.359999656677246D0)) (list (list 5.0D0 1231.2049560546875D0 3.56696400558576D-4 5.369999885559082D0)) (list (list 5.0D0 1232.968505859375D0 3.269651788286865D-4 5.380000114440918D0)) (list (list 5.0D0 1248.0662841796875D0 4.7869436093606055D-4 5.389999866485596D0)) (list (list 5.0D0 1270.3150634765625D0 7.152019534260035D-4 5.400000095367432D0)) (list (list 5.0D0 1274.38623046875D0 6.639583734795451D-4 5.409999847412109D0)) (list (list 5.0D0 1274.688720703125D0 5.522981518879533D-4 5.420000076293945D0)) (list (list 5.0D0 1275.282470703125D0 4.5529979979619384D-4 5.429999828338623D0)) (list (list 5.0D0 1273.717529296875D0 3.973507846239954D-4 5.440000057220459D0)) (list (list 5.0D0 1269.8232421875D0 3.8036442128941417D-4 5.449999809265137D0)) (list (list 5.0D0 1265.822998046875D0 3.832623187918216D-4 5.460000038146973D0)) (list (list 5.0D0 1266.5076904296875D0 4.0976080344989896D-4 5.46999979019165D0)) (list (list 5.0D0 1267.9505615234375D0 4.1320922900922597D-4 5.480000019073486D0)) (list (list 5.0D0 1269.72802734375D0 4.1296202107332647D-4 5.489999771118164D0)) (list (list 5.0D0 1271.5015869140625D0 4.200827388558537D-4 5.5D0)) (list (list 5.0D0 1273.01123046875D0 4.3705207644961775D-4 5.509999752044678D0)) (list (list 5.0D0 1278.46875D0 4.6271676546894014D-4 5.519999980926514D0)) (list (list 5.0D0 1277.4404296875D0 4.759788862429559D-4 5.529999732971191D0)) (list (list 5.0D0 1275.220947265625D0 5.431533791124821D-4 5.539999961853027D0)) (list (list 5.0D0 1273.7706298828125D0 6.890400545671582D-4 5.549999713897705D0)) (list (list 5.0D0 1271.7518310546875D0 8.96920682862401D-4 5.559999942779541D0)) (list (list 5.0D0 1269.8392333984375D0 9.835937526077033D-4 5.569999694824219D0)) (list (list 5.0D0 1269.4178466796875D0 0.001018188544549048D0 5.579999923706055D0)) (list (list 5.0D0 1270.871826171875D0 9.74992464762181D-4 5.589999675750732D0)) (list (list 5.0D0 1274.478271484375D0 9.174483129754663D-4 5.599999904632568D0)) (list (list 5.0D0 1280.361328125D0 9.935100097209216D-4 5.609999656677246D0)) (list (list 5.0D0 1279.55322265625D0 0.001034615794196725D0 5.619999885559082D0)) (list (list 5.0D0 1276.552490234375D0 0.0010897985193878413D0 5.62999963760376D0)) (list (list 5.0D0 1273.4366455078125D0 0.0011947917519137264D0 5.639999866485596D0)) (list (list 5.0D0 1271.6514892578125D0 0.001318898517638445D0 5.650000095367432D0)) (list (list 5.0D0 1272.059326171875D0 0.0013692555949091912D0 5.659999847412109D0)) (list (list 5.0D0 1275.78466796875D0 0.0012972168624401093D0 5.670000076293945D0)) (list (list 5.0D0 1278.690673828125D0 0.0013259516563266516D0 5.679999828338623D0)) (list (list 5.0D0 1280.9110107421875D0 0.0014289376558735967D0 5.690000057220459D0)) (list (list 5.0D0 1282.538818359375D0 0.0015399683034047485D0 5.699999809265137D0)) (list (list 5.0D0 1283.610595703125D0 0.001555747352540493D0 5.710000038146973D0)) (list (list 5.0D0 1281.005859375D0 0.0013836557045578957D0 5.71999979019165D0)) (list (list 5.0D0 1277.246337890625D0 0.0012370633194223047D0 5.730000019073486D0)) (list (list 5.0D0 1275.239990234375D0 0.0011328649707138539D0 5.739999771118164D0)) (list (list 5.0D0 1275.883056640625D0 0.0010568450670689345D0 5.75D0)) (list (list 5.0D0 1278.251220703125D0 9.677887428551912D-4 5.759999752044678D0)) (list (list 5.0D0 1278.93603515625D0 9.19437559787184D-4 5.769999980926514D0)) (list (list 5.0D0 1277.4283447265625D0 8.855313062667847D-4 5.779999732971191D0)) (list (list 5.0D0 1275.676025390625D0 8.795686881057918D-4 5.789999961853027D0)) (list (list 5.0D0 1274.197998046875D0 8.710529073141515D-4 5.799999713897705D0)) (list (list 5.0D0 1272.35546875D0 7.909304113127291D-4 5.809999942779541D0)) (list (list 5.0D0 1273.457275390625D0 5.665217177011073D-4 5.819999694824219D0)) (list (list 5.0D0 1271.5230712890625D0 3.943709598388523D-4 5.829999923706055D0)) (list (list 5.0D0 1265.4239501953125D0 2.89273913949728D-4 5.839999675750732D0)) (list (list 5.0D0 1258.6865234375D0 2.586915506981313D-4 5.849999904632568D0)) (list (list 5.0D0 1258.6226806640625D0 3.013542736880481D-4 5.859999656677246D0)) (list (list 5.0D0 1259.297119140625D0 3.3326863194815815D-4 5.869999885559082D0)) (list (list 5.0D0 1262.077880859375D0 4.603449488058686D-4 5.87999963760376D0)) (list (list 5.0D0 1264.3819580078125D0 6.398086552508175D-4 5.889999866485596D0)) (list (list 5.0D0 1265.6947021484375D0 8.301013149321079D-4 5.900000095367432D0)) (list (list 5.0D0 1267.1337890625D0 9.894389659166336D-4 5.909999847412109D0)) (list (list 5.0D0 1267.3935546875D0 0.0011056053917855025D0 5.920000076293945D0)) (list (list 5.0D0 1268.6070556640625D0 0.0011816760525107384D0 5.929999828338623D0)) (list (list 5.0D0 1270.62060546875D0 0.0012366118608042598D0 5.940000057220459D0)) (list (list 5.0D0 1273.1722412109375D0 0.0012855562381446362D0 5.949999809265137D0)) (list (list 5.0D0 1275.829345703125D0 0.0013397590955719352D0 5.960000038146973D0)) (list (list 5.0D0 1275.29931640625D0 0.0013326684711501003D0 5.96999979019165D0)) (list (list 5.0D0 1274.16064453125D0 0.001250563538633287D0 5.980000019073486D0)) (list (list 5.0D0 1273.12841796875D0 0.001200864091515541D0 5.989999771118164D0)) (list (list 5.0D0 1272.70849609375D0 0.0012280147057026625D0 6.0D0)) (list (list 5.0D0 1273.2105712890625D0 0.0013290001079440117D0 6.009999752044678D0)) (list (list 5.0D0 1273.23486328125D0 0.0015366701409220696D0 6.019999980926514D0)) (list (list 5.0D0 1273.718505859375D0 0.0016427220543846488D0 6.029999732971191D0)) (list (list 5.0D0 1274.1734619140625D0 0.0016675372608006D0 6.039999961853027D0)) (list (list 5.0D0 1274.6610107421875D0 0.0016321557341143489D0 6.049999713897705D0)) (list (list 5.0D0 1275.6466064453125D0 0.0015631711576133967D0 6.059999942779541D0)) (list (list 5.0D0 1277.354248046875D0 0.0015690645668655634D0 6.069999694824219D0)) (list (list 5.0D0 1279.3994140625D0 0.0016890285769477487D0 6.079999923706055D0)) (list (list 5.0D0 1280.9346923828125D0 0.0018339669331908226D0 6.089999675750732D0)) (list (list 5.0D0 1281.127685546875D0 0.001917955232784152D0 6.099999904632568D0)) (list (list 5.0D0 1279.218017578125D0 0.0018572122789919377D0 6.109999656677246D0)) (list (list 5.0D0 1276.4588623046875D0 0.0016432813135907054D0 6.119999885559082D0)) (list (list 5.0D0 1275.8367919921875D0 0.0014108065515756607D0 6.12999963760376D0)) (list (list 5.0D0 1275.6728515625D0 0.0012114441487938166D0 6.139999866485596D0)) (list (list 5.0D0 1275.3641357421875D0 0.0010719683486968279D0 6.150000095367432D0)) (list (list 5.0D0 1275.005126953125D0 0.0010011723497882486D0 6.159999847412109D0)) (list (list 5.0D0 1273.743408203125D0 0.0010138914221897722D0 6.170000076293945D0)) (list (list 5.0D0 1274.4931640625D0 0.001039256458170712D0 6.179999828338623D0)) (list (list 5.0D0 1274.7374267578125D0 0.0010603520786389709D0 6.190000057220459D0)) (list (list 5.0D0 1273.688232421875D0 0.001059836708009243D0 6.199999809265137D0)) (list (list 5.0D0 1271.79052734375D0 0.0010244699660688639D0 6.210000038146973D0)) (list (list 5.0D0 1270.873046875D0 0.0010707451729103923D0 6.21999979019165D0)) (list (list 5.0D0 1271.8624267578125D0 0.0011037637013942004D0 6.230000019073486D0)) (list (list 5.0D0 1273.5701904296875D0 0.0011022454127669335D0 6.239999771118164D0)) (list (list 5.0D0 1274.4449462890625D0 0.0010541107039898634D0 6.25D0)) (list (list 5.0D0 1272.8345947265625D0 9.61144978646189D-4 6.259999752044678D0)) (list (list 5.0D0 1272.2618408203125D0 0.001000541029497981D0 6.269999980926514D0)) (list (list 5.0D0 1272.5443115234375D0 0.0011802231892943383D0 6.279999732971191D0)) (list (list 5.0D0 1273.407958984375D0 0.001358363893814385D0 6.289999961853027D0)) (list (list 5.0D0 1274.1790771484375D0 0.0014643488684669137D0 6.299999713897705D0)) (list (list 5.0D0 1274.00439453125D0 0.0014737332239747048D0 6.309999942779541D0)) (list (list 5.0D0 1274.8245849609375D0 0.0013970104046165944D0 6.319999694824219D0)) (list (list 5.0D0 1275.2247314453125D0 0.0014046499272808433D0 6.329999923706055D0)) (list (list 5.0D0 1276.1170654296875D0 0.0014665009221062065D0 6.339999675750732D0)) (list (list 5.0D0 1277.4609375D0 0.0015492051606997848D0 6.349999904632568D0)) (list (list 5.0D0 1278.629638671875D0 0.0016130759613588453D0 6.359999656677246D0)) (list (list 5.0D0 1279.7562255859375D0 0.0015859249979257584D0 6.369999885559082D0)) (list (list 5.0D0 1278.1864013671875D0 0.0014158536214381457D0 6.37999963760376D0)) (list (list 5.0D0 1275.7874755859375D0 0.0012663747183978558D0 6.389999866485596D0)) (list (list 5.0D0 1273.91357421875D0 0.0012070286320522428D0 6.399999618530273D0)) (list (list 5.0D0 1273.6678466796875D0 0.0012461934238672257D0 6.409999847412109D0)) (list (list 5.0D0 1276.2178955078125D0 0.0013029881520196796D0 6.420000076293945D0)) (list (list 5.0D0 1275.775634765625D0 0.001303415629081428D0 6.429999828338623D0)) (list (list 5.0D0 1274.4498291015625D0 0.0012696381891146303D0 6.440000057220459D0)) (list (list 5.0D0 1273.15966796875D0 0.0012429979396983982D0 6.449999809265137D0)) (list (list 5.0D0 1272.1905517578125D0 0.0012733377516269684D0 6.460000038146973D0)) (list (list 5.0D0 1272.13037109375D0 0.0013075328897684813D0 6.46999979019165D0)) (list (list 5.0D0 1271.9267578125D0 0.0013543670065701008D0 6.480000019073486D0)) (list (list 5.0D0 1272.19091796875D0 0.0013626095606014133D0 6.489999771118164D0)) (list (list 5.0D0 1273.0059814453125D0 0.001315387198701501D0 6.5D0)) (list (list 5.0D0 1274.09033203125D0 0.0012157540768384934D0 6.509999752044678D0)) (list (list 5.0D0 1274.395751953125D0 0.0010398414451628924D0 6.519999980926514D0)) (list (list 5.0D0 1273.768310546875D0 8.445592247880995D-4 6.529999732971191D0)) (list (list 5.0D0 1272.756103515625D0 7.042603101581335D-4 6.539999961853027D0)) (list (list 5.0D0 1271.8741455078125D0 6.30339200142771D-4 6.549999713897705D0)) (list (list 5.0D0 1271.595458984375D0 5.984101444482803D-4 6.559999942779541D0)) (list (list 5.0D0 1271.5191650390625D0 6.199512863531709D-4 6.569999694824219D0)) (list (list 5.0D0 1272.2421875D0 5.827996646985412D-4 6.579999923706055D0)) (list (list 5.0D0 1273.6181640625D0 5.451093893498182D-4 6.589999675750732D0)) (list (list 5.0D0 1275.0892333984375D0 5.246448563411832D-4 6.599999904632568D0)) (list (list 5.0D0 1275.7569580078125D0 5.226825596764684D-4 6.609999656677246D0)) (list (list 5.0D0 1273.4151611328125D0 6.294749910011888D-4 6.619999885559082D0)) (list (list 5.0D0 1272.603515625D0 8.244946366176009D-4 6.62999963760376D0)) (list (list 5.0D0 1272.533935546875D0 0.0010791211389005185D0 6.639999866485596D0)) (list (list 5.0D0 1272.825439453125D0 0.0013268778566271067D0 6.649999618530273D0)) (list (list 5.0D0 1273.3013916015625D0 0.0014751243870705367D0 6.659999847412109D0)) (list (list 5.0D0 1274.3067626953125D0 0.0013929686974734068D0 6.670000076293945D0)) (list (list 5.0D0 1274.6893310546875D0 0.0011710403487086296D0 6.679999828338623D0)) (list (list 5.0D0 1274.293701171875D0 9.175878949463368D-4 6.690000057220459D0)) (list (list 5.0D0 1273.4339599609375D0 7.241833955049515D-4 6.699999809265137D0)) (list (list 5.0D0 1272.763427734375D0 6.683078827336431D-4 6.710000038146973D0)) (list (list 5.0D0 1273.768798828125D0 7.033981382846832D-4 6.71999979019165D0)) (list (list 5.0D0 1272.959716796875D0 8.017279324121773D-4 6.730000019073486D0)) (list (list 5.0D0 1272.2677001953125D0 8.84544278960675D-4 6.739999771118164D0)) (list (list 5.0D0 1272.4715576171875D0 9.24965541344136D-4 6.75D0)) (list (list 5.0D0 1273.8115234375D0 9.192856959998608D-4 6.759999752044678D0)) (list (list 5.0D0 1277.060791015625D0 8.152226218953729D-4 6.769999980926514D0)) (list (list 5.0D0 1277.16943359375D0 7.497224141843617D-4 6.779999732971191D0)) (list (list 5.0D0 1283.1346435546875D0 7.245640736073256D-4 6.789999961853027D0)) (list (list 5.0D0 1297.9349365234375D0 7.545751286670566D-4 6.799999713897705D0)) (list (list 5.0D0 1319.3135986328125D0 8.46038747113198D-4 6.809999942779541D0)) (list (list 5.0D0 1316.863525390625D0 8.270225371234119D-4 6.819999694824219D0)) (list (list 5.0D0 1314.550537109375D0 7.946817786432803D-4 6.829999923706055D0)) (list (list 5.0D0 1313.9676513671875D0 7.032584981061518D-4 6.839999675750732D0)) (list (list 5.0D0 1314.030517578125D0 5.57440856937319D-4 6.849999904632568D0)) (list (list 5.0D0 1312.4384765625D0 3.9621235919184983D-4 6.859999656677246D0)) (list (list 5.0D0 1308.875244140625D0 3.538255987223238D-4 6.869999885559082D0)) (list (list 5.0D0 1308.20458984375D0 1.2115182471461594D-4 6.87999963760376D0)) (list (list 6.0D0 1166.781005859375D0 3.612963482737541D-4 0.0D0)) (list (list 6.0D0 1167.6812744140625D0 5.844499100930989D-4 0.009999999776482582D0)) (list (list 6.0D0 1168.3963623046875D0 7.9371128231287D-4 0.019999999552965164D0)) (list (list 6.0D0 1168.5159912109375D0 0.0010286156320944429D0 0.029999999329447747D0)) (list (list 6.0D0 1167.817138671875D0 0.0013958249473944307D0 0.03999999910593033D0)) (list (list 6.0D0 1166.2646484375D0 0.00206936988979578D0 0.04999999701976776D0)) (list (list 6.0D0 1164.5162353515625D0 0.0038654066156595946D0 0.05999999865889549D0)) (list (list 6.0D0 1163.341552734375D0 0.007397687062621117D0 0.07000000029802323D0)) (list (list 6.0D0 1162.6395263671875D0 0.013632085174322129D0 0.07999999821186066D0)) (list (list 6.0D0 1162.3150634765625D0 0.023514702916145325D0 0.08999999612569809D0)) (list (list 6.0D0 1162.2779541015625D0 0.03796066716313362D0 0.09999999403953552D0)) (list (list 6.0D0 1162.608154296875D0 0.057908494025468826D0 0.10999999940395355D0)) (list (list 6.0D0 1163.1077880859375D0 0.07886052131652832D0 0.11999999731779099D0)) (list (list 6.0D0 1163.660400390625D0 0.09803718328475952D0 0.12999999523162842D0)) (list (list 6.0D0 1164.172607421875D0 0.11335301399230957D0 0.14000000059604645D0)) (list (list 6.0D0 1164.5712890625D0 0.12338022142648697D0 0.14999999105930328D0)) (list (list 6.0D0 1164.7913818359375D0 0.12700526416301727D0 0.1599999964237213D0)) (list (list 6.0D0 1164.91357421875D0 0.1273571103811264D0 0.17000000178813934D0)) (list (list 6.0D0 1164.9886474609375D0 0.12547270953655243D0 0.17999999225139618D0)) (list (list 6.0D0 1165.060546875D0 0.1222996637225151D0 0.1899999976158142D0)) (list (list 6.0D0 1165.166259765625D0 0.11874214559793472D0 0.19999998807907105D0)) (list (list 6.0D0 1165.300537109375D0 0.11645431816577912D0 0.20999999344348908D0)) (list (list 6.0D0 1165.410888671875D0 0.11627519875764847D0 0.2199999988079071D0)) (list (list 6.0D0 1165.4888916015625D0 0.11862140148878098D0 0.22999998927116394D0)) (list (list 6.0D0 1165.532958984375D0 0.12380702048540116D0 0.23999999463558197D0)) (list (list 6.0D0 1165.5478515625D0 0.13203489780426026D0 0.25D0)) (list (list 6.0D0 1165.534912109375D0 0.14460505545139313D0 0.25999999046325684D0)) (list (list 6.0D0 1165.500244140625D0 0.1604050099849701D0 0.26999998092651367D0)) (list (list 6.0D0 1165.4447021484375D0 0.17847475409507752D0 0.2800000011920929D0)) (list (list 6.0D0 1165.37109375D0 0.19746705889701843D0 0.28999999165534973D0)) (list (list 6.0D0 1165.2845458984375D0 0.2156248837709427D0 0.29999998211860657D0)) (list (list 6.0D0 1165.1771240234375D0 0.22944502532482147D0 0.3100000023841858D0)) (list (list 6.0D0 1165.04443359375D0 0.2390688955783844D0 0.3199999928474426D0)) (list (list 6.0D0 1164.8983154296875D0 0.24524298310279846D0 0.32999998331069947D0)) (list (list 6.0D0 1164.7547607421875D0 0.2488219439983368D0 0.3400000035762787D0)) (list (list 6.0D0 1164.6343994140625D0 0.250825971364975D0 0.3499999940395355D0)) (list (list 6.0D0 1164.5662841796875D0 0.25197482109069824D0 0.35999998450279236D0)) (list (list 6.0D0 1164.527099609375D0 0.2525227963924408D0 0.3700000047683716D0)) (list (list 6.0D0 1164.4913330078125D0 0.2521241307258606D0 0.3799999952316284D0)) (list (list 6.0D0 1164.437744140625D0 0.2504599988460541D0 0.38999998569488526D0)) (list (list 6.0D0 1164.347412109375D0 0.24725697934627533D0 0.3999999761581421D0)) (list (list 6.0D0 1164.2203369140625D0 0.24256843328475952D0 0.4099999964237213D0)) (list (list 6.0D0 1164.0909423828125D0 0.23806989192962647D0 0.41999998688697815D0)) (list (list 6.0D0 1163.9630126953125D0 0.23441271483898163D0 0.429999977350235D0)) (list (list 6.0D0 1163.8348388671875D0 0.23166032135486603D0 0.4399999976158142D0)) (list (list 6.0D0 1163.7001953125D0 0.2293582707643509D0 0.44999998807907105D0)) (list (list 6.0D0 1163.5634765625D0 0.22544991970062256D0 0.4599999785423279D0)) (list (list 6.0D0 1163.44970703125D0 0.21923163533210755D0 0.4699999988079071D0)) (list (list 6.0D0 1163.37939453125D0 0.21127554774284363D0 0.47999998927116394D0)) (list (list 6.0D0 1163.3643798828125D0 0.20248432457447052D0 0.4899999797344208D0)) (list (list 6.0D0 1163.408447265625D0 0.19410356879234314D0 0.5D0)) (list (list 6.0D0 1163.48486328125D0 0.18846704065799713D0 0.5099999904632568D0)) (list (list 6.0D0 1163.536376953125D0 0.18591414391994476D0 0.5199999809265137D0)) (list (list 6.0D0 1163.5576171875D0 0.1862979531288147D0 0.5299999713897705D0)) (list (list 6.0D0 1163.5565185546875D0 0.1893797516822815D0 0.5399999618530273D0)) (list (list 6.0D0 1163.552490234375D0 0.19477622210979462D0 0.550000011920929D0)) (list (list 6.0D0 1163.5767822265625D0 0.202743262052536D0 0.5600000023841858D0)) (list (list 6.0D0 1163.6175537109375D0 0.21271546185016632D0 0.5699999928474426D0)) (list (list 6.0D0 1163.655029296875D0 0.22420118749141693D0 0.5799999833106995D0)) (list (list 6.0D0 1163.67236328125D0 0.2363809496164322D0 0.5899999737739563D0)) (list (list 6.0D0 1163.655029296875D0 0.24809114634990692D0 0.5999999642372131D0)) (list (list 6.0D0 1163.5904541015625D0 0.2567121684551239D0 0.6100000143051148D0)) (list (list 6.0D0 1163.5078125D0 0.26195597648620606D0 0.6200000047683716D0)) (list (list 6.0D0 1163.42333984375D0 0.2643927037715912D0 0.6299999952316284D0)) (list (list 6.0D0 1163.343505859375D0 0.26468437910079956D0 0.6399999856948853D0)) (list (list 6.0D0 1163.2672119140625D0 0.26365888118743897D0 0.6499999761581421D0)) (list (list 6.0D0 1163.1651611328125D0 0.2618711590766907D0 0.6599999666213989D0)) (list (list 6.0D0 1163.0303955078125D0 0.25949689745903015D0 0.6699999570846558D0)) (list (list 6.0D0 1162.8836669921875D0 0.2563989460468292D0 0.6800000071525574D0)) (list (list 6.0D0 1162.7474365234375D0 0.2524768114089966D0 0.6899999976158142D0)) (list (list 6.0D0 1162.6475830078125D0 0.24768207967281342D0 0.699999988079071D0)) (list (list 6.0D0 1162.620361328125D0 0.24203191697597504D0 0.7099999785423279D0)) (list (list 6.0D0 1162.6407470703125D0 0.23631972074508667D0 0.7199999690055847D0)) (list (list 6.0D0 1162.6739501953125D0 0.23107922077178955D0 0.7299999594688416D0)) (list (list 6.0D0 1162.6878662109375D0 0.2266487330198288D0 0.7400000095367432D0)) (list (list 6.0D0 1162.6514892578125D0 0.2232065349817276D0 0.75D0)) (list (list 6.0D0 1162.54541015625D0 0.2204473316669464D0 0.7599999904632568D0)) (list (list 6.0D0 1162.41455078125D0 0.21727636456489563D0 0.7699999809265137D0)) (list (list 6.0D0 1162.28564453125D0 0.21335572004318237D0 0.7799999713897705D0)) (list (list 6.0D0 1162.1796875D0 0.20860740542411804D0 0.7899999618530273D0)) (list (list 6.0D0 1162.114013671875D0 0.2031448632478714D0 0.7999999523162842D0)) (list (list 6.0D0 1162.110595703125D0 0.19694902002811432D0 0.8100000023841858D0)) (list (list 6.0D0 1162.155029296875D0 0.1900225728750229D0 0.8199999928474426D0)) (list (list 6.0D0 1162.2451171875D0 0.18249797821044922D0 0.8299999833106995D0)) (list (list 6.0D0 1162.3734130859375D0 0.17464515566825867D0 0.8399999737739563D0)) (list (list 6.0D0 1162.5255126953125D0 0.16686584055423737D0 0.8499999642372131D0)) (list (list 6.0D0 1162.6519775390625D0 0.15991874039173126D0 0.85999995470047D0)) (list (list 6.0D0 1162.7291259765625D0 0.15400652587413788D0 0.8700000047683716D0)) (list (list 6.0D0 1162.769287109375D0 0.1492040902376175D0 0.8799999952316284D0)) (list (list 6.0D0 1162.7864990234375D0 0.14557021856307984D0 0.8899999856948853D0)) (list (list 6.0D0 1162.7977294921875D0 0.14310790598392487D0 0.8999999761581421D0)) (list (list 6.0D0 1162.8272705078125D0 0.14186321198940277D0 0.9099999666213989D0)) (list (list 6.0D0 1162.8848876953125D0 0.14123813807964325D0 0.9199999570846558D0)) (list (list 6.0D0 1162.96142578125D0 0.14111341536045075D0 0.9300000071525574D0)) (list (list 6.0D0 1163.0396728515625D0 0.14151881635189057D0 0.9399999976158142D0)) (list (list 6.0D0 1163.0948486328125D0 0.14255307614803314D0 0.949999988079071D0)) (list (list 6.0D0 1163.084716796875D0 0.14438076317310333D0 0.9599999785423279D0)) (list (list 6.0D0 1163.030517578125D0 0.14649398624897003D0 0.9699999690055847D0)) (list (list 6.0D0 1162.9544677734375D0 0.1486206203699112D0 0.9799999594688416D0)) (list (list 6.0D0 1162.86474609375D0 0.15061423182487488D0 0.9899999499320984D0)) (list (list 6.0D0 1162.761474609375D0 0.1524081528186798D0 1.0D0)) (list (list 6.0D0 1162.6236572265625D0 0.15413151681423187D0 1.0099999904632569D0)) (list (list 6.0D0 1162.478515625D0 0.15639403462409973D0 1.0199999809265137D0)) (list (list 6.0D0 1162.3519287109375D0 0.15970149636268616D0 1.0299999713897705D0)) (list (list 6.0D0 1162.2498779296875D0 0.16428019106388092D0 1.0399999618530274D0)) (list (list 6.0D0 1162.1651611328125D0 0.17010530829429627D0 1.0499999523162842D0)) (list (list 6.0D0 1162.076171875D0 0.17630535364151D0 1.059999942779541D0)) (list (list 6.0D0 1161.9931640625D0 0.18147224187850952D0 1.0699999332427979D0)) (list (list 6.0D0 1161.923828125D0 0.18531472980976105D0 1.0799999237060547D0)) (list (list 6.0D0 1161.8643798828125D0 0.18780556321144104D0 1.090000033378601D0)) (list (list 6.0D0 1161.802978515625D0 0.18912239372730255D0 1.100000023841858D0)) (list (list 6.0D0 1161.71142578125D0 0.18936589360237122D0 1.1100000143051148D0)) (list (list 6.0D0 1161.5941162109375D0 0.18896961212158203D0 1.1200000047683716D0)) (list (list 6.0D0 1161.462646484375D0 0.18811814486980438D0 1.1299999952316285D0)) (list (list 6.0D0 1161.3250732421875D0 0.18681670725345612D0 1.1399999856948853D0)) (list (list 6.0D0 1161.18798828125D0 0.18496303260326386D0 1.149999976158142D0)) (list (list 6.0D0 1161.0711669921875D0 0.1818699687719345D0 1.159999966621399D0)) (list (list 6.0D0 1160.9993896484375D0 0.17748920619487763D0 1.1699999570846558D0)) (list (list 6.0D0 1160.9722900390625D0 0.17220668494701386D0 1.1799999475479126D0)) (list (list 6.0D0 1160.983154296875D0 0.16636186838150025D0 1.1899999380111695D0)) (list (list 6.0D0 1161.0203857421875D0 0.16030338406562805D0 1.1999999284744263D0)) (list (list 6.0D0 1161.0738525390625D0 0.154103085398674D0 1.209999918937683D0)) (list (list 6.0D0 1161.1302490234375D0 0.14770250022411347D0 1.2200000286102295D0)) (list (list 6.0D0 1161.19384765625D0 0.14142073690891266D0 1.2300000190734864D0)) (list (list 6.0D0 1161.27197265625D0 0.13570328056812286D0 1.2400000095367432D0)) (list (list 6.0D0 1161.370849609375D0 0.1310764104127884D0 1.25D0)) (list (list 6.0D0 1161.4649658203125D0 0.1283586174249649D0 1.2599999904632569D0)) (list (list 6.0D0 1161.5133056640625D0 0.12703117728233338D0 1.2699999809265137D0)) (list (list 6.0D0 1161.528076171875D0 0.12671133875846863D0 1.2799999713897705D0)) (list (list 6.0D0 1161.5216064453125D0 0.1273433268070221D0 1.2899999618530274D0)) (list (list 6.0D0 1161.5050048828125D0 0.12903036177158356D0 1.2999999523162842D0)) (list (list 6.0D0 1161.4415283203125D0 0.13265669345855713D0 1.309999942779541D0)) (list (list 6.0D0 1161.310302734375D0 0.1382817029953003D0 1.3199999332427979D0)) (list (list 6.0D0 1161.136962890625D0 0.14538832008838654D0 1.3299999237060547D0)) (list (list 6.0D0 1160.9427490234375D0 0.1533442735671997D0 1.3399999141693116D0)) (list (list 6.0D0 1160.7471923828125D0 0.16133272647857666D0 1.350000023841858D0)) (list (list 6.0D0 1160.5491943359375D0 0.16794618964195252D0 1.3600000143051148D0)) (list (list 6.0D0 1160.3592529296875D0 0.1728360950946808D0 1.3700000047683716D0)) (list (list 6.0D0 1160.2122802734375D0 0.17638733983039856D0 1.3799999952316285D0)) (list (list 6.0D0 1160.132568359375D0 0.1789599508047104D0 1.3899999856948853D0)) (list (list 6.0D0 1160.134765625D0 0.1809745579957962D0 1.399999976158142D0)) (list (list 6.0D0 1160.2001953125D0 0.18278606235980988D0 1.409999966621399D0)) (list (list 6.0D0 1160.252685546875D0 0.1845126897096634D0 1.4199999570846558D0)) (list (list 6.0D0 1160.2642822265625D0 0.18614459037780762D0 1.4299999475479126D0)) (list (list 6.0D0 1160.22607421875D0 0.18770731985569D0 1.4399999380111695D0)) (list (list 6.0D0 1160.1412353515625D0 0.18924997746944428D0 1.4499999284744263D0)) (list (list 6.0D0 1160.0322265625D0 0.19084861874580383D0 1.459999918937683D0)) (list (list 6.0D0 1159.930419921875D0 0.1922687590122223D0 1.46999990940094D0)) (list (list 6.0D0 1159.8289794921875D0 0.1931113600730896D0 1.4800000190734864D0)) (list (list 6.0D0 1159.720947265625D0 0.19303978979587555D0 1.4900000095367432D0)) (list (list 6.0D0 1159.6005859375D0 0.19177259504795075D0 1.5D0)) (list (list 6.0D0 1159.4818115234375D0 0.18895842134952545D0 1.5099999904632569D0)) (list (list 6.0D0 1159.3779296875D0 0.18496614694595337D0 1.5199999809265137D0)) (list (list 6.0D0 1159.280517578125D0 0.18001294136047363D0 1.5299999713897705D0)) (list (list 6.0D0 1159.1875D0 0.17427296936511994D0 1.5399999618530274D0)) (list (list 6.0D0 1159.102294921875D0 0.16797086596488953D0 1.5499999523162842D0)) (list (list 6.0D0 1159.061279296875D0 0.16146539151668549D0 1.559999942779541D0)) (list (list 6.0D0 1159.0877685546875D0 0.15505826473236084D0 1.5699999332427979D0)) (list (list 6.0D0 1159.1636962890625D0 0.14889639616012573D0 1.5799999237060547D0)) (list (list 6.0D0 1159.26904296875D0 0.14323697984218598D0 1.5899999141693116D0)) (list (list 6.0D0 1159.3817138671875D0 0.13840214908123016D0 1.5999999046325684D0)) (list (list 6.0D0 1159.4981689453125D0 0.13510271906852722D0 1.6100000143051148D0)) (list (list 6.0D0 1159.6290283203125D0 0.13315466046333313D0 1.6200000047683716D0)) (list (list 6.0D0 1159.7508544921875D0 0.13221853971481323D0 1.6299999952316285D0)) (list (list 6.0D0 1159.8414306640625D0 0.13225339353084564D0 1.6399999856948853D0)) (list (list 6.0D0 1159.8804931640625D0 0.13334861397743225D0 1.649999976158142D0)) (list (list 6.0D0 1159.8583984375D0 0.13635161519050598D0 1.659999966621399D0)) (list (list 6.0D0 1159.798828125D0 0.1413634568452835D0 1.6699999570846558D0)) (list (list 6.0D0 1159.71435546875D0 0.14777736365795136D0 1.6799999475479126D0)) (list (list 6.0D0 1159.6181640625D0 0.1551223248243332D0 1.6899999380111695D0)) (list (list 6.0D0 1159.5269775390625D0 0.1629682034254074D0 1.6999999284744263D0)) (list (list 6.0D0 1159.47265625D0 0.17158424854278565D0 1.709999918937683D0)) (list (list 6.0D0 1159.4559326171875D0 0.1820267289876938D0 1.71999990940094D0)) (list (list 6.0D0 1159.447021484375D0 0.1945808082818985D0 1.7300000190734864D0)) (list (list 6.0D0 1159.4154052734375D0 0.20897750556468964D0 1.7400000095367432D0)) (list (list 6.0D0 1159.33056640625D0 0.22449485957622528D0 1.75D0)) (list (list 6.0D0 1159.164306640625D0 0.23927663266658783D0 1.7599999904632569D0)) (list (list 6.0D0 1158.958984375D0 0.2517774999141693D0 1.7699999809265137D0)) (list (list 6.0D0 1158.7388916015625D0 0.2619799077510834D0 1.7799999713897705D0)) (list (list 6.0D0 1158.510986328125D0 0.26991409063339234D0 1.7899999618530274D0)) (list (list 6.0D0 1158.2763671875D0 0.27571526169776917D0 1.7999999523162842D0)) (list (list 6.0D0 1158.037353515625D0 0.278999388217926D0 1.809999942779541D0)) (list (list 6.0D0 1157.8125D0 0.28006088733673096D0 1.8199999332427979D0)) (list (list 6.0D0 1157.61376953125D0 0.2793952226638794D0 1.8299999237060547D0)) (list (list 6.0D0 1157.44580078125D0 0.2773413062095642D0 1.8399999141693116D0)) (list (list 6.0D0 1157.30712890625D0 0.2742599546909332D0 1.8499999046325684D0)) (list (list 6.0D0 1157.18115234375D0 0.27027902007102967D0 1.8600000143051148D0)) (list (list 6.0D0 1157.0322265625D0 0.2651902437210083D0 1.8700000047683716D0)) (list (list 6.0D0 1156.8558349609375D0 0.2588448226451874D0 1.8799999952316285D0)) (list (list 6.0D0 1156.66015625D0 0.25138047337532044D0 1.8899999856948853D0)) (list (list 6.0D0 1156.4635009765625D0 0.2432062178850174D0 1.899999976158142D0)) (list (list 6.0D0 1156.31689453125D0 0.23555468022823334D0 1.909999966621399D0)) (list (list 6.0D0 1156.2838134765625D0 0.22945314645767212D0 1.9199999570846558D0)) (list (list 6.0D0 1156.3721923828125D0 0.22461801767349243D0 1.9299999475479126D0)) (list (list 6.0D0 1156.5650634765625D0 0.22064778208732605D0 1.9399999380111695D0)) (list (list 6.0D0 1156.826171875D0 0.2170167863368988D0 1.9499999284744263D0)) (list (list 6.0D0 1157.090087890625D0 0.21309532225131989D0 1.959999918937683D0)) (list (list 6.0D0 1157.323486328125D0 0.20872622728347778D0 1.96999990940094D0)) (list (list 6.0D0 1157.529541015625D0 0.20398038625717163D0 1.9799998998641968D0)) (list (list 6.0D0 1157.703369140625D0 0.19883917272090912D0 1.9900000095367432D0)) (list (list 6.0D0 1157.8355712890625D0 0.19327376782894135D0 2.0D0)) (list (list 6.0D0 1157.8907470703125D0 0.18720580637454987D0 2.009999990463257D0)) (list (list 6.0D0 1157.857421875D0 0.18105357885360718D0 2.0199999809265137D0)) (list (list 6.0D0 1157.7752685546875D0 0.17531593143939972D0 2.0299999713897705D0)) (list (list 6.0D0 1157.69140625D0 0.1703300029039383D0 2.0399999618530274D0)) (list (list 6.0D0 1157.65869140625D0 0.166336327791214D0 2.049999952316284D0)) (list (list 6.0D0 1157.7373046875D0 0.1635010689496994D0 2.059999942779541D0)) (list (list 6.0D0 1157.885498046875D0 0.16144515573978424D0 2.069999933242798D0)) (list (list 6.0D0 1158.047607421875D0 0.16011877357959747D0 2.0799999237060547D0)) (list (list 6.0D0 1158.1907958984375D0 0.15972650051116943D0 2.0899999141693116D0)) (list (list 6.0D0 1158.2890625D0 0.1605348438024521D0 2.0999999046325684D0)) (list (list 6.0D0 1158.315673828125D0 0.1630953848361969D0 2.109999895095825D0)) (list (list 6.0D0 1158.3017578125D0 0.16708597540855408D0 2.119999885559082D0)) (list (list 6.0D0 1158.2701416015625D0 0.17191541194915772D0 2.129999876022339D0)) (list (list 6.0D0 1158.210693359375D0 0.17717206478118897D0 2.1399998664855957D0)) (list (list 6.0D0 1158.103271484375D0 0.18243972957134247D0 2.1499998569488526D0)) (list (list 6.0D0 1157.9149169921875D0 0.18718306720256806D0 2.1599998474121094D0)) (list (list 6.0D0 1157.7286376953125D0 0.1911693513393402D0 2.169999837875366D0)) (list (list 6.0D0 1157.611572265625D0 0.1944163292646408D0 2.180000066757202D0)) (list (list 6.0D0 1157.5767822265625D0 0.1969420611858368D0 2.190000057220459D0)) (list (list 6.0D0 1157.61083984375D0 0.1988271176815033D0 2.200000047683716D0)) (list (list 6.0D0 1157.6531982421875D0 0.20025134086608887D0 2.2100000381469727D0)) (list (list 6.0D0 1157.65380859375D0 0.2014925479888916D0 2.2200000286102295D0)) (list (list 6.0D0 1157.611328125D0 0.20242255926132202D0 2.2300000190734864D0)) (list (list 6.0D0 1157.5260009765625D0 0.20289666950702667D0 2.240000009536743D0)) (list (list 6.0D0 1157.402587890625D0 0.20283494889736176D0 2.25D0)) (list (list 6.0D0 1157.256103515625D0 0.2024517059326172D0 2.259999990463257D0)) (list (list 6.0D0 1157.1236572265625D0 0.20239849388599396D0 2.2699999809265137D0)) (list (list 6.0D0 1157.0086669921875D0 0.20266252756118775D0 2.2799999713897705D0)) (list (list 6.0D0 1156.906005859375D0 0.20301388204097748D0 2.2899999618530274D0)) (list (list 6.0D0 1156.8096923828125D0 0.2031240463256836D0 2.299999952316284D0)) (list (list 6.0D0 1156.7225341796875D0 0.2024788111448288D0 2.309999942779541D0)) (list (list 6.0D0 1156.658203125D0 0.201131209731102D0 2.319999933242798D0)) (list (list 6.0D0 1156.626220703125D0 0.19955410063266754D0 2.3299999237060547D0)) (list (list 6.0D0 1156.6365966796875D0 0.19810214638710022D0 2.3399999141693116D0)) (list (list 6.0D0 1156.69482421875D0 0.19710731506347656D0 2.3499999046325684D0)) (list (list 6.0D0 1156.789306640625D0 0.196956604719162D0 2.359999895095825D0)) (list (list 6.0D0 1156.86669921875D0 0.19775564968585968D0 2.369999885559082D0)) (list (list 6.0D0 1156.9189453125D0 0.19954077899456024D0 2.379999876022339D0)) (list (list 6.0D0 1156.95263671875D0 0.202409565448761D0 2.3899998664855957D0)) (list (list 6.0D0 1156.9786376953125D0 0.20640425384044647D0 2.3999998569488526D0)) (list (list 6.0D0 1157.004638671875D0 0.2115616798400879D0 2.4099998474121094D0)) (list (list 6.0D0 1157.0283203125D0 0.2172698676586151D0 2.419999837875366D0)) (list (list 6.0D0 1157.0391845703125D0 0.22287943959236145D0 2.429999828338623D0)) (list (list 6.0D0 1157.026123046875D0 0.22790707647800446D0 2.440000057220459D0)) (list (list 6.0D0 1156.98095703125D0 0.23191788792610169D0 2.450000047683716D0)) (list (list 6.0D0 1156.9029541015625D0 0.23434121906757355D0 2.4600000381469727D0)) (list (list 6.0D0 1156.823974609375D0 0.23534300923347473D0 2.4700000286102295D0)) (list (list 6.0D0 1156.7564697265625D0 0.23546981811523438D0 2.4800000190734864D0)) (list (list 6.0D0 1156.7017822265625D0 0.23502622544765473D0 2.490000009536743D0)) (list (list 6.0D0 1156.6583251953125D0 0.23426835238933563D0 2.5D0)) (list (list 6.0D0 1156.625244140625D0 0.23326024413108826D0 2.509999990463257D0)) (list (list 6.0D0 1156.6124267578125D0 0.23171715438365936D0 2.5199999809265137D0)) (list (list 6.0D0 1156.621826171875D0 0.22952772676944733D0 2.5299999713897705D0)) (list (list 6.0D0 1156.642822265625D0 0.22666247189044953D0 2.5399999618530274D0)) (list (list 6.0D0 1156.6575927734375D0 0.22314323484897614D0 2.549999952316284D0)) (list (list 6.0D0 1156.6258544921875D0 0.21892179548740387D0 2.559999942779541D0)) (list (list 6.0D0 1156.5662841796875D0 0.21419693529605866D0 2.569999933242798D0)) (list (list 6.0D0 1156.54541015625D0 0.20938803255558014D0 2.5799999237060547D0)) (list (list 6.0D0 1156.59619140625D0 0.20483335852622986D0 2.5899999141693116D0)) (list (list 6.0D0 1156.7327880859375D0 0.20083971321582794D0 2.5999999046325684D0)) (list (list 6.0D0 1156.9278564453125D0 0.19771723449230194D0 2.609999895095825D0)) (list (list 6.0D0 1157.1175537109375D0 0.19517923891544342D0 2.619999885559082D0)) (list (list 6.0D0 1157.2930908203125D0 0.1927236169576645D0 2.629999876022339D0)) (list (list 6.0D0 1157.458740234375D0 0.18998374044895172D0 2.6399998664855957D0)) (list (list 6.0D0 1157.622314453125D0 0.1866355538368225D0 2.6499998569488526D0)) (list (list 6.0D0 1157.79150390625D0 0.18233594298362732D0 2.6599998474121094D0)) (list (list 6.0D0 1157.9554443359375D0 0.17753249406814575D0 2.669999837875366D0)) (list (list 6.0D0 1158.097412109375D0 0.172886461019516D0 2.679999828338623D0)) (list (list 6.0D0 1158.2071533203125D0 0.16877247393131256D0 2.690000057220459D0)) (list (list 6.0D0 1158.278076171875D0 0.16547420620918274D0 2.700000047683716D0)) (list (list 6.0D0 1158.306884765625D0 0.16329307854175568D0 2.7100000381469727D0)) (list (list 6.0D0 1158.3209228515625D0 0.16206303238868713D0 2.7200000286102295D0)) (list (list 6.0D0 1158.34326171875D0 0.16127271950244904D0 2.7300000190734864D0)) (list (list 6.0D0 1158.379638671875D0 0.16055339574813843D0 2.740000009536743D0)) (list (list 6.0D0 1158.427734375D0 0.15955278277397156D0 2.75D0)) (list (list 6.0D0 1158.468994140625D0 0.1578802913427353D0 2.759999990463257D0)) (list (list 6.0D0 1158.48193359375D0 0.1555408090353012D0 2.7699999809265137D0)) (list (list 6.0D0 1158.4676513671875D0 0.15280281007289887D0 2.7799999713897705D0)) (list (list 6.0D0 1158.4290771484375D0 0.1498299390077591D0 2.7899999618530274D0)) (list (list 6.0D0 1158.373046875D0 0.1467745155096054D0 2.799999952316284D0)) (list (list 6.0D0 1158.3145751953125D0 0.14376017451286316D0 2.809999942779541D0)) (list (list 6.0D0 1158.2718505859375D0 0.1407139003276825D0 2.819999933242798D0)) (list (list 6.0D0 1158.2481689453125D0 0.13758069276809692D0 2.8299999237060547D0)) (list (list 6.0D0 1158.2513427734375D0 0.13445435464382172D0 2.8399999141693116D0)) (list (list 6.0D0 1158.28955078125D0 0.13151846826076508D0 2.8499999046325684D0)) (list (list 6.0D0 1158.3795166015625D0 0.12925012409687042D0 2.859999895095825D0)) (list (list 6.0D0 1158.50439453125D0 0.12807147204875946D0 2.869999885559082D0)) (list (list 6.0D0 1158.6263427734375D0 0.12785576283931732D0 2.879999876022339D0)) (list (list 6.0D0 1158.720703125D0 0.1285562515258789D0 2.8899998664855957D0)) (list (list 6.0D0 1158.765625D0 0.1301111876964569D0 2.8999998569488526D0)) (list (list 6.0D0 1158.7315673828125D0 0.13259895145893097D0 2.9099998474121094D0)) (list (list 6.0D0 1158.6151123046875D0 0.1357879638671875D0 2.919999837875366D0)) (list (list 6.0D0 1158.4490966796875D0 0.1390892118215561D0 2.929999828338623D0)) (list (list 6.0D0 1158.2623291015625D0 0.14210985600948334D0 2.93999981880188D0)) (list (list 6.0D0 1158.0858154296875D0 0.1445387750864029D0 2.950000047683716D0)) (list (list 6.0D0 1157.9603271484375D0 0.14617252349853516D0 2.9600000381469727D0)) (list (list 6.0D0 1157.8914794921875D0 0.14725454151630402D0 2.9700000286102295D0)) (list (list 6.0D0 1157.859375D0 0.14796026051044464D0 2.9800000190734864D0)) (list (list 6.0D0 1157.860595703125D0 0.1483377367258072D0 2.990000009536743D0)) (list (list 6.0D0 1157.8927001953125D0 0.1484435647726059D0 3.0D0)) (list (list 6.0D0 1157.952392578125D0 0.14837679266929627D0 3.009999990463257D0)) (list (list 6.0D0 1158.0015869140625D0 0.14804115891456604D0 3.0199999809265137D0)) (list (list 6.0D0 1158.01953125D0 0.14714372158050537D0 3.0299999713897705D0)) (list (list 6.0D0 1158.01416015625D0 0.1455153375864029D0 3.0399999618530274D0)) (list (list 6.0D0 1158.0045166015625D0 0.143085315823555D0 3.049999952316284D0)) (list (list 6.0D0 1158.0296630859375D0 0.13989712297916412D0 3.059999942779541D0)) (list (list 6.0D0 1158.0982666015625D0 0.1362263262271881D0 3.069999933242798D0)) (list (list 6.0D0 1158.173828125D0 0.13239392638206482D0 3.0799999237060547D0)) (list (list 6.0D0 1158.239990234375D0 0.12871162593364716D0 3.0899999141693116D0)) (list (list 6.0D0 1158.287109375D0 0.12551705539226532D0 3.0999999046325684D0)) (list (list 6.0D0 1158.31787109375D0 0.12332312017679215D0 3.109999895095825D0)) (list (list 6.0D0 1158.3336181640625D0 0.12207958847284317D0 3.119999885559082D0)) (list (list 6.0D0 1158.3321533203125D0 0.12120339274406433D0 3.129999876022339D0)) (list (list 6.0D0 1158.3179931640625D0 0.12045230716466904D0 3.1399998664855957D0)) (list (list 6.0D0 1158.2987060546875D0 0.11969564110040665D0 3.1499998569488526D0)) (list (list 6.0D0 1158.28515625D0 0.11904651671648026D0 3.1599998474121094D0)) (list (list 6.0D0 1158.2777099609375D0 0.11885199695825577D0 3.169999837875366D0)) (list (list 6.0D0 1158.2628173828125D0 0.11916474997997284D0 3.179999828338623D0)) (list (list 6.0D0 1158.228515625D0 0.12001826614141464D0 3.18999981880188D0)) (list (list 6.0D0 1158.1651611328125D0 0.12141387164592743D0 3.1999998092651367D0)) (list (list 6.0D0 1158.065673828125D0 0.12337882071733475D0 3.2100000381469727D0)) (list (list 6.0D0 1157.956787109375D0 0.12554219365119934D0 3.2200000286102295D0)) (list (list 6.0D0 1157.8681640625D0 0.12735404074192047D0 3.2300000190734864D0)) (list (list 6.0D0 1157.8170166015625D0 0.1285286843776703D0 3.240000009536743D0)) (list (list 6.0D0 1157.8101806640625D0 0.128915935754776D0 3.25D0)) (list (list 6.0D0 1157.834228515625D0 0.12854796648025513D0 3.259999990463257D0)) (list (list 6.0D0 1157.8232421875D0 0.12784717977046967D0 3.2699999809265137D0)) (list (list 6.0D0 1157.779052734375D0 0.12708021700382233D0 3.2799999713897705D0)) (list (list 6.0D0 1157.7232666015625D0 0.1263502687215805D0 3.2899999618530274D0)) (list (list 6.0D0 1157.6734619140625D0 0.12576505541801453D0 3.299999952316284D0)) (list (list 6.0D0 1157.6202392578125D0 0.12555402517318726D0 3.309999942779541D0)) (list (list 6.0D0 1157.530029296875D0 0.12614049017429352D0 3.319999933242798D0)) (list (list 6.0D0 1157.44482421875D0 0.12749703228473663D0 3.3299999237060547D0)) (list (list 6.0D0 1157.3931884765625D0 0.12945832312107086D0 3.3399999141693116D0)) (list (list 6.0D0 1157.390625D0 0.13175025582313538D0 3.3499999046325684D0)) (list (list 6.0D0 1157.4222412109375D0 0.1338982731103897D0 3.359999895095825D0)) (list (list 6.0D0 1157.4482421875D0 0.13549590110778809D0 3.369999885559082D0)) (list (list 6.0D0 1157.47314453125D0 0.1367896944284439D0 3.379999876022339D0)) (list (list 6.0D0 1157.5D0 0.1380414217710495D0 3.3899998664855957D0)) (list (list 6.0D0 1157.5255126953125D0 0.13950373232364655D0 3.3999998569488526D0)) (list (list 6.0D0 1157.525146484375D0 0.14140993356704712D0 3.4099998474121094D0)) (list (list 6.0D0 1157.478515625D0 0.14356626570224762D0 3.419999837875366D0)) (list (list 6.0D0 1157.4141845703125D0 0.1455189287662506D0 3.429999828338623D0)) (list (list 6.0D0 1157.341552734375D0 0.14691530168056488D0 3.43999981880188D0)) (list (list 6.0D0 1157.26611328125D0 0.14744096994400025D0 3.4499998092651367D0)) (list (list 6.0D0 1157.1851806640625D0 0.14670740067958832D0 3.4600000381469727D0)) (list (list 6.0D0 1157.1334228515625D0 0.14477291703224182D0 3.4700000286102295D0)) (list (list 6.0D0 1157.1368408203125D0 0.1422799825668335D0 3.4800000190734864D0)) (list (list 6.0D0 1157.185302734375D0 0.13961346447467804D0 3.490000009536743D0)) (list (list 6.0D0 1157.2513427734375D0 0.13715760409832D0 3.5D0)) (list (list 6.0D0 1157.2724609375D0 0.13540993630886078D0 3.509999990463257D0)) (list (list 6.0D0 1157.2025146484375D0 0.1347699910402298D0 3.5199999809265137D0)) (list (list 6.0D0 1157.08251953125D0 0.13484111428260803D0 3.5299999713897705D0)) (list (list 6.0D0 1156.94091796875D0 0.1352308839559555D0 3.5399999618530274D0)) (list (list 6.0D0 1156.805908203125D0 0.1355309784412384D0 3.549999952316284D0)) (list (list 6.0D0 1156.708740234375D0 0.13529549539089203D0 3.559999942779541D0)) (list (list 6.0D0 1156.683837890625D0 0.13445580005645752D0 3.569999933242798D0)) (list (list 6.0D0 1156.7203369140625D0 0.13323508203029633D0 3.5799999237060547D0)) (list (list 6.0D0 1156.8055419921875D0 0.13167059421539307D0 3.5899999141693116D0)) (list (list 6.0D0 1156.9241943359375D0 0.12979738414287567D0 3.5999999046325684D0)) (list (list 6.0D0 1157.0616455078125D0 0.12764957547187805D0 3.609999895095825D0)) (list (list 6.0D0 1157.218017578125D0 0.12553028762340546D0 3.619999885559082D0)) (list (list 6.0D0 1157.3818359375D0 0.12369421124458313D0 3.629999876022339D0)) (list (list 6.0D0 1157.5338134765625D0 0.12231451272964478D0 3.6399998664855957D0)) (list (list 6.0D0 1157.652587890625D0 0.12155842036008835D0 3.6499998569488526D0)) (list (list 6.0D0 1157.7081298828125D0 0.12170951813459397D0 3.6599998474121094D0)) (list (list 6.0D0 1157.7066650390625D0 0.1228361427783966D0 3.669999837875366D0)) (list (list 6.0D0 1157.68115234375D0 0.12425264716148377D0 3.679999828338623D0)) (list (list 6.0D0 1157.6380615234375D0 0.12552112340927124D0 3.68999981880188D0)) (list (list 6.0D0 1157.584716796875D0 0.12633711099624634D0 3.6999998092651367D0)) (list (list 6.0D0 1157.537353515625D0 0.1266290247440338D0 3.7099997997283936D0)) (list (list 6.0D0 1157.54736328125D0 0.1269819289445877D0 3.7200000286102295D0)) (list (list 6.0D0 1157.615234375D0 0.1277780681848526D0 3.7300000190734864D0)) (list (list 6.0D0 1157.719970703125D0 0.129067063331604D0 3.740000009536743D0)) (list (list 6.0D0 1157.828857421875D0 0.1307460218667984D0 3.75D0)) (list (list 6.0D0 1157.884765625D0 0.1324629932641983D0 3.759999990463257D0)) (list (list 6.0D0 1157.821044921875D0 0.13346919417381287D0 3.7699999809265137D0)) (list (list 6.0D0 1157.6812744140625D0 0.1336698681116104D0 3.7799999713897705D0)) (list (list 6.0D0 1157.5108642578125D0 0.13316610455513D0 3.7899999618530274D0)) (list (list 6.0D0 1157.35693359375D0 0.13214203715324402D0 3.799999952316284D0)) (list (list 6.0D0 1157.270263671875D0 0.13085679709911347D0 3.809999942779541D0)) (list (list 6.0D0 1157.2640380859375D0 0.12966571748256683D0 3.819999933242798D0)) (list (list 6.0D0 1157.29541015625D0 0.12874053418636322D0 3.8299999237060547D0)) (list (list 6.0D0 1157.3436279296875D0 0.12814906239509583D0 3.8399999141693116D0)) (list (list 6.0D0 1157.39208984375D0 0.12793393433094025D0 3.8499999046325684D0)) (list (list 6.0D0 1157.4300537109375D0 0.12815842032432556D0 3.859999895095825D0)) (list (list 6.0D0 1157.4384765625D0 0.12900587916374207D0 3.869999885559082D0)) (list (list 6.0D0 1157.4156494140625D0 0.13047164678573609D0 3.879999876022339D0)) (list (list 6.0D0 1157.37451171875D0 0.13256782293319702D0 3.8899998664855957D0)) (list (list 6.0D0 1157.3304443359375D0 0.13523639738559723D0 3.8999998569488526D0)) (list (list 6.0D0 1157.3006591796875D0 0.13832718133926392D0 3.9099998474121094D0)) (list (list 6.0D0 1157.260986328125D0 0.14115731418132782D0 3.919999837875366D0)) (list (list 6.0D0 1157.1951904296875D0 0.1431637406349182D0 3.929999828338623D0)) (list (list 6.0D0 1157.1190185546875D0 0.14424918591976166D0 3.93999981880188D0)) (list (list 6.0D0 1157.0565185546875D0 0.14457231760025025D0 3.9499998092651367D0)) (list (list 6.0D0 1157.0462646484375D0 0.14469832181930542D0 3.9599997997283936D0)) (list (list 6.0D0 1157.0703125D0 0.1456458419561386D0 3.9700000286102295D0)) (list (list 6.0D0 1157.066650390625D0 0.14743539690971375D0 3.9800000190734864D0)) (list (list 6.0D0 1157.027587890625D0 0.1498469114303589D0 3.990000009536743D0)) (list (list 6.0D0 1156.9642333984375D0 0.15256865322589874D0 4.0D0)) (list (list 6.0D0 1156.91796875D0 0.15516768395900726D0 4.009999752044678D0)) (list (list 6.0D0 1156.92138671875D0 0.15729394555091858D0 4.019999980926514D0)) (list (list 6.0D0 1156.9454345703125D0 0.15916292369365692D0 4.029999732971191D0)) (list (list 6.0D0 1156.97021484375D0 0.1609145849943161D0 4.039999961853027D0)) (list (list 6.0D0 1156.9796142578125D0 0.16266870498657227D0 4.049999713897705D0)) (list (list 6.0D0 1156.9608154296875D0 0.16451482474803925D0 4.059999942779541D0)) (list (list 6.0D0 1156.9228515625D0 0.1666293442249298D0 4.069999694824219D0)) (list (list 6.0D0 1156.879150390625D0 0.16904756426811218D0 4.079999923706055D0)) (list (list 6.0D0 1156.8302001953125D0 0.17164179682731629D0 4.089999675750732D0)) (list (list 6.0D0 1156.7767333984375D0 0.17419417202472687D0 4.099999904632568D0)) (list (list 6.0D0 1156.721923828125D0 0.17630672454833984D0 4.110000133514404D0)) (list (list 6.0D0 1156.675537109375D0 0.17754240334033966D0 4.119999885559082D0)) (list (list 6.0D0 1156.641357421875D0 0.17826415598392487D0 4.130000114440918D0)) (list (list 6.0D0 1156.629638671875D0 0.17891481518745422D0 4.139999866485596D0)) (list (list 6.0D0 1156.650146484375D0 0.18002545833587647D0 4.150000095367432D0)) (list (list 6.0D0 1156.7166748046875D0 0.18236619234085083D0 4.159999847412109D0)) (list (list 6.0D0 1156.8201904296875D0 0.18669086694717407D0 4.170000076293945D0)) (list (list 6.0D0 1156.9256591796875D0 0.19220228493213654D0 4.179999828338623D0)) (list (list 6.0D0 1157.005859375D0 0.19815684854984284D0 4.190000057220459D0)) (list (list 6.0D0 1157.03076171875D0 0.2037101686000824D0 4.199999809265137D0)) (list (list 6.0D0 1156.956787109375D0 0.20774225890636444D0 4.210000038146973D0)) (list (list 6.0D0 1156.7733154296875D0 0.2093723714351654D0 4.21999979019165D0)) (list (list 6.0D0 1156.58251953125D0 0.2098330706357956D0 4.230000019073486D0)) (list (list 6.0D0 1156.4381103515625D0 0.21003200113773346D0 4.239999771118164D0)) (list (list 6.0D0 1156.3740234375D0 0.21081829071044922D0 4.25D0)) (list (list 6.0D0 1156.3990478515625D0 0.2130463570356369D0 4.259999752044678D0)) (list (list 6.0D0 1156.4920654296875D0 0.21709856390953064D0 4.269999980926514D0)) (list (list 6.0D0 1156.62060546875D0 0.2220422774553299D0 4.279999732971191D0)) (list (list 6.0D0 1156.762939453125D0 0.22731727361679077D0 4.289999961853027D0)) (list (list 6.0D0 1156.8907470703125D0 0.232352614402771D0 4.299999713897705D0)) (list (list 6.0D0 1156.9595947265625D0 0.23647211492061615D0 4.309999942779541D0)) (list (list 6.0D0 1156.91650390625D0 0.23879657685756683D0 4.319999694824219D0)) (list (list 6.0D0 1156.7957763671875D0 0.23949381709098816D0 4.329999923706055D0)) (list (list 6.0D0 1156.617919921875D0 0.23859961330890656D0 4.339999675750732D0)) (list (list 6.0D0 1156.402099609375D0 0.23630551993846893D0 4.349999904632568D0)) (list (list 6.0D0 1156.1640625D0 0.23298317193984985D0 4.360000133514404D0)) (list (list 6.0D0 1155.9395751953125D0 0.22995944321155548D0 4.369999885559082D0)) (list (list 6.0D0 1155.76318359375D0 0.22800298035144806D0 4.380000114440918D0)) (list (list 6.0D0 1155.6451416015625D0 0.2270159125328064D0 4.389999866485596D0)) (list (list 6.0D0 1155.5836181640625D0 0.22666607797145844D0 4.400000095367432D0)) (list (list 6.0D0 1155.5626220703125D0 0.2263348400592804D0 4.409999847412109D0)) (list (list 6.0D0 1155.5528564453125D0 0.22574037313461304D0 4.420000076293945D0)) (list (list 6.0D0 1155.540283203125D0 0.2253870964050293D0 4.429999828338623D0)) (list (list 6.0D0 1155.5208740234375D0 0.22557678818702698D0 4.440000057220459D0)) (list (list 6.0D0 1155.4927978515625D0 0.22650155425071716D0 4.449999809265137D0)) (list (list 6.0D0 1155.45654296875D0 0.2282458394765854D0 4.460000038146973D0)) (list (list 6.0D0 1155.427001953125D0 0.2305881232023239D0 4.46999979019165D0)) (list (list 6.0D0 1155.41357421875D0 0.23294007778167725D0 4.480000019073486D0)) (list (list 6.0D0 1155.4141845703125D0 0.23500211536884308D0 4.489999771118164D0)) (list (list 6.0D0 1155.4241943359375D0 0.2365371435880661D0 4.5D0)) (list (list 6.0D0 1155.4346923828125D0 0.2373383343219757D0 4.509999752044678D0)) (list (list 6.0D0 1155.4361572265625D0 0.23721565306186676D0 4.519999980926514D0)) (list (list 6.0D0 1155.41845703125D0 0.23632203042507172D0 4.529999732971191D0)) (list (list 6.0D0 1155.37060546875D0 0.23462578654289246D0 4.539999961853027D0)) (list (list 6.0D0 1155.28857421875D0 0.23219597339630127D0 4.549999713897705D0)) (list (list 6.0D0 1155.1788330078125D0 0.22923453152179718D0 4.559999942779541D0)) (list (list 6.0D0 1155.0960693359375D0 0.22658972442150116D0 4.569999694824219D0)) (list (list 6.0D0 1155.0660400390625D0 0.2246895581483841D0 4.579999923706055D0)) (list (list 6.0D0 1155.084228515625D0 0.22348250448703766D0 4.589999675750732D0)) (list (list 6.0D0 1155.13671875D0 0.22279652953147888D0 4.599999904632568D0)) (list (list 6.0D0 1155.2000732421875D0 0.2223324030637741D0 4.610000133514404D0)) (list (list 6.0D0 1155.2532958984375D0 0.22182008624076843D0 4.619999885559082D0)) (list (list 6.0D0 1155.2926025390625D0 0.22123470902442932D0 4.630000114440918D0)) (list (list 6.0D0 1155.3140869140625D0 0.220536470413208D0 4.639999866485596D0)) (list (list 6.0D0 1155.314697265625D0 0.21968311071395874D0 4.650000095367432D0)) (list (list 6.0D0 1155.2901611328125D0 0.21861732006072998D0 4.659999847412109D0))) (list (list (list 6.0D0 1155.245849609375D0 0.21741075813770294D0 4.670000076293945D0)) (list (list 6.0D0 1155.2015380859375D0 0.21631406247615814D0 4.679999828338623D0)) (list (list 6.0D0 1155.1668701171875D0 0.21540535986423493D0 4.690000057220459D0)) (list (list 6.0D0 1155.152099609375D0 0.21471092104911804D0 4.699999809265137D0)) (list (list 6.0D0 1155.1712646484375D0 0.21420104801654816D0 4.710000038146973D0)) (list (list 6.0D0 1155.2425537109375D0 0.2140273153781891D0 4.71999979019165D0)) (list (list 6.0D0 1155.3316650390625D0 0.21440333127975464D0 4.730000019073486D0)) (list (list 6.0D0 1155.421875D0 0.21542415022850037D0 4.739999771118164D0)) (list (list 6.0D0 1155.5047607421875D0 0.21705588698387146D0 4.75D0)) (list (list 6.0D0 1155.5843505859375D0 0.21910925209522247D0 4.759999752044678D0)) (list (list 6.0D0 1155.6624755859375D0 0.22132258117198944D0 4.769999980926514D0)) (list (list 6.0D0 1155.7254638671875D0 0.2238549143075943D0 4.779999732971191D0)) (list (list 6.0D0 1155.777587890625D0 0.22693315148353577D0 4.789999961853027D0)) (list (list 6.0D0 1155.82568359375D0 0.2306336909532547D0 4.799999713897705D0)) (list (list 6.0D0 1155.879638671875D0 0.2348421961069107D0 4.809999942779541D0)) (list (list 6.0D0 1155.9210205078125D0 0.23887194693088532D0 4.819999694824219D0)) (list (list 6.0D0 1155.9427490234375D0 0.24238580465316773D0 4.829999923706055D0)) (list (list 6.0D0 1155.9556884765625D0 0.2454892098903656D0 4.839999675750732D0)) (list (list 6.0D0 1155.9737548828125D0 0.24841143190860748D0 4.849999904632568D0)) (list (list 6.0D0 1156.013916015625D0 0.25153520703315735D0 4.859999656677246D0)) (list (list 6.0D0 1156.082275390625D0 0.25520992279052735D0 4.869999885559082D0)) (list (list 6.0D0 1156.1492919921875D0 0.2587679922580719D0 4.880000114440918D0)) (list (list 6.0D0 1156.1883544921875D0 0.2615955173969269D0 4.889999866485596D0)) (list (list 6.0D0 1156.176025390625D0 0.2632545232772827D0 4.900000095367432D0)) (list (list 6.0D0 1156.090576171875D0 0.2634848356246948D0 4.909999847412109D0)) (list (list 6.0D0 1155.949951171875D0 0.2628630995750427D0 4.920000076293945D0)) (list (list 6.0D0 1155.8326416015625D0 0.262462317943573D0 4.929999828338623D0)) (list (list 6.0D0 1155.7645263671875D0 0.26253145933151245D0 4.940000057220459D0)) (list (list 6.0D0 1155.7542724609375D0 0.2631608247756958D0 4.949999809265137D0)) (list (list 6.0D0 1155.791748046875D0 0.26428279280662537D0 4.960000038146973D0)) (list (list 6.0D0 1155.8614501953125D0 0.2658746540546417D0 4.96999979019165D0)) (list (list 6.0D0 1155.937255859375D0 0.2675561010837555D0 4.980000019073486D0)) (list (list 6.0D0 1155.9814453125D0 0.26867297291755677D0 4.989999771118164D0)) (list (list 6.0D0 1155.953369140625D0 0.26841652393341065D0 5.0D0)) (list (list 6.0D0 1155.803955078125D0 0.26570409536361695D0 5.009999752044678D0)) (list (list 6.0D0 1155.50634765625D0 0.25895488262176514D0 5.019999980926514D0)) (list (list 6.0D0 1155.1676025390625D0 0.24987158179283142D0 5.029999732971191D0)) (list (list 6.0D0 1154.8504638671875D0 0.23984427750110626D0 5.039999961853027D0)) (list (list 6.0D0 1154.6129150390625D0 0.23044246435165405D0 5.049999713897705D0)) (list (list 6.0D0 1154.51220703125D0 0.22353316843509674D0 5.059999942779541D0)) (list (list 6.0D0 1154.6124267578125D0 0.22198432683944702D0 5.069999694824219D0)) (list (list 6.0D0 1154.8135986328125D0 0.22446079552173615D0 5.079999923706055D0)) (list (list 6.0D0 1155.058837890625D0 0.22993327677249909D0 5.089999675750732D0)) (list (list 6.0D0 1155.298583984375D0 0.23717640340328217D0 5.099999904632568D0)) (list (list 6.0D0 1155.4903564453125D0 0.24473972618579865D0 5.109999656677246D0)) (list (list 6.0D0 1155.585205078125D0 0.2504921555519104D0 5.119999885559082D0)) (list (list 6.0D0 1155.6058349609375D0 0.2539909780025482D0 5.130000114440918D0)) (list (list 6.0D0 1155.5697021484375D0 0.2551881968975067D0 5.139999866485596D0)) (list (list 6.0D0 1155.498291015625D0 0.25427454710006714D0 5.150000095367432D0)) (list (list 6.0D0 1155.41748046875D0 0.25166910886764527D0 5.159999847412109D0)) (list (list 6.0D0 1155.350341796875D0 0.2482244223356247D0 5.170000076293945D0)) (list (list 6.0D0 1155.2803955078125D0 0.2449253648519516D0 5.179999828338623D0)) (list (list 6.0D0 1155.1944580078125D0 0.24191147089004517D0 5.190000057220459D0)) (list (list 6.0D0 1155.087646484375D0 0.23917968571186066D0 5.199999809265137D0)) (list (list 6.0D0 1154.96337890625D0 0.23657812178134918D0 5.210000038146973D0)) (list (list 6.0D0 1154.8646240234375D0 0.23392485082149506D0 5.21999979019165D0)) (list (list 6.0D0 1154.826416015625D0 0.23120515048503876D0 5.230000019073486D0)) (list (list 6.0D0 1154.851806640625D0 0.22836850583553314D0 5.239999771118164D0)) (list (list 6.0D0 1154.9244384765625D0 0.22534793615341187D0 5.25D0)) (list (list 6.0D0 1155.0067138671875D0 0.2220543622970581D0 5.259999752044678D0)) (list (list 6.0D0 1155.01806640625D0 0.2185821682214737D0 5.269999980926514D0)) (list (list 6.0D0 1154.9703369140625D0 0.21542707085609436D0 5.279999732971191D0)) (list (list 6.0D0 1154.889404296875D0 0.21280020475387573D0 5.289999961853027D0)) (list (list 6.0D0 1154.8001708984375D0 0.21074369549751282D0 5.299999713897705D0)) (list (list 6.0D0 1154.7259521484375D0 0.20912045240402222D0 5.309999942779541D0)) (list (list 6.0D0 1154.681640625D0 0.20751795172691345D0 5.319999694824219D0)) (list (list 6.0D0 1154.6507568359375D0 0.20574559271335602D0 5.329999923706055D0)) (list (list 6.0D0 1154.630126953125D0 0.20379632711410523D0 5.339999675750732D0)) (list (list 6.0D0 1154.6197509765625D0 0.20165970921516419D0 5.349999904632568D0)) (list (list 6.0D0 1154.623046875D0 0.19931800663471222D0 5.359999656677246D0)) (list (list 6.0D0 1154.652587890625D0 0.1966635137796402D0 5.369999885559082D0)) (list (list 6.0D0 1154.711669921875D0 0.1937454789876938D0 5.380000114440918D0)) (list (list 6.0D0 1154.79736328125D0 0.19042111933231354D0 5.389999866485596D0)) (list (list 6.0D0 1154.8970947265625D0 0.18652190268039703D0 5.400000095367432D0)) (list (list 6.0D0 1154.98779296875D0 0.1818489134311676D0 5.409999847412109D0)) (list (list 6.0D0 1155.0386962890625D0 0.17634786665439606D0 5.420000076293945D0)) (list (list 6.0D0 1155.0877685546875D0 0.1709671914577484D0 5.429999828338623D0)) (list (list 6.0D0 1155.1566162109375D0 0.16620473563671112D0 5.440000057220459D0)) (list (list 6.0D0 1155.2579345703125D0 0.16236868500709534D0 5.449999809265137D0)) (list (list 6.0D0 1155.3941650390625D0 0.15957441926002503D0 5.460000038146973D0)) (list (list 6.0D0 1155.5728759765625D0 0.157795250415802D0 5.46999979019165D0)) (list (list 6.0D0 1155.774658203125D0 0.15646624565124512D0 5.480000019073486D0)) (list (list 6.0D0 1155.97314453125D0 0.15548275411128998D0 5.489999771118164D0)) (list (list 6.0D0 1156.144287109375D0 0.15479227900505066D0 5.5D0)) (list (list 6.0D0 1156.2669677734375D0 0.15439502894878388D0 5.509999752044678D0)) (list (list 6.0D0 1156.3662109375D0 0.1544976830482483D0 5.519999980926514D0)) (list (list 6.0D0 1156.4869384765625D0 0.15508705377578735D0 5.529999732971191D0)) (list (list 6.0D0 1156.61279296875D0 0.15624596178531647D0 5.539999961853027D0)) (list (list 6.0D0 1156.7230224609375D0 0.15807129442691803D0 5.549999713897705D0)) (list (list 6.0D0 1156.792236328125D0 0.16067399084568024D0 5.559999942779541D0)) (list (list 6.0D0 1156.818359375D0 0.164429172873497D0 5.569999694824219D0)) (list (list 6.0D0 1156.833740234375D0 0.16887032985687256D0 5.579999923706055D0)) (list (list 6.0D0 1156.8433837890625D0 0.1737244874238968D0 5.589999675750732D0)) (list (list 6.0D0 1156.849609375D0 0.1787385642528534D0 5.599999904632568D0)) (list (list 6.0D0 1156.8521728515625D0 0.18367502093315125D0 5.609999656677246D0)) (list (list 6.0D0 1156.8365478515625D0 0.18827907741069794D0 5.619999885559082D0)) (list (list 6.0D0 1156.78857421875D0 0.19253255426883698D0 5.62999963760376D0)) (list (list 6.0D0 1156.697998046875D0 0.19640927016735077D0 5.639999866485596D0)) (list (list 6.0D0 1156.5654296875D0 0.1999809443950653D0 5.650000095367432D0)) (list (list 6.0D0 1156.4029541015625D0 0.20341677963733673D0 5.659999847412109D0)) (list (list 6.0D0 1156.2744140625D0 0.20719027519226074D0 5.670000076293945D0)) (list (list 6.0D0 1156.2030029296875D0 0.2111363410949707D0 5.679999828338623D0)) (list (list 6.0D0 1156.160888671875D0 0.21480970084667206D0 5.690000057220459D0)) (list (list 6.0D0 1156.1168212890625D0 0.21782247722148895D0 5.699999809265137D0)) (list (list 6.0D0 1156.0364990234375D0 0.21984274685382843D0 5.710000038146973D0)) (list (list 6.0D0 1155.9237060546875D0 0.22073815762996674D0 5.71999979019165D0)) (list (list 6.0D0 1155.8353271484375D0 0.22121402621269226D0 5.730000019073486D0)) (list (list 6.0D0 1155.7845458984375D0 0.2214810699224472D0 5.739999771118164D0)) (list (list 6.0D0 1155.7701416015625D0 0.22165346145629883D0 5.75D0)) (list (list 6.0D0 1155.777587890625D0 0.22175855934619904D0 5.759999752044678D0)) (list (list 6.0D0 1155.7586669921875D0 0.2213495522737503D0 5.769999980926514D0)) (list (list 6.0D0 1155.6815185546875D0 0.21971459686756134D0 5.779999732971191D0)) (list (list 6.0D0 1155.545654296875D0 0.2163536250591278D0 5.789999961853027D0)) (list (list 6.0D0 1155.3709716796875D0 0.2111021876335144D0 5.799999713897705D0)) (list (list 6.0D0 1155.19677734375D0 0.2041245996952057D0 5.809999942779541D0)) (list (list 6.0D0 1155.141845703125D0 0.19656097888946533D0 5.819999694824219D0)) (list (list 6.0D0 1155.22705078125D0 0.1899988353252411D0 5.829999923706055D0)) (list (list 6.0D0 1155.422119140625D0 0.18486513197422028D0 5.839999675750732D0)) (list (list 6.0D0 1155.68408203125D0 0.18129496276378632D0 5.849999904632568D0)) (list (list 6.0D0 1155.9559326171875D0 0.17915312945842743D0 5.859999656677246D0)) (list (list 6.0D0 1156.158447265625D0 0.17821407318115234D0 5.869999885559082D0)) (list (list 6.0D0 1156.28515625D0 0.1776132434606552D0 5.87999963760376D0)) (list (list 6.0D0 1156.343505859375D0 0.1770007163286209D0 5.889999866485596D0)) (list (list 6.0D0 1156.3502197265625D0 0.17617201805114746D0 5.900000095367432D0)) (list (list 6.0D0 1156.332275390625D0 0.17504210770130158D0 5.909999847412109D0)) (list (list 6.0D0 1156.3492431640625D0 0.173747256398201D0 5.920000076293945D0)) (list (list 6.0D0 1156.4197998046875D0 0.17256033420562744D0 5.929999828338623D0)) (list (list 6.0D0 1156.5328369140625D0 0.17162106931209564D0 5.940000057220459D0)) (list (list 6.0D0 1156.6690673828125D0 0.17105884850025177D0 5.949999809265137D0)) (list (list 6.0D0 1156.8011474609375D0 0.1709904968738556D0 5.960000038146973D0)) (list (list 6.0D0 1156.866943359375D0 0.1715446561574936D0 5.96999979019165D0)) (list (list 6.0D0 1156.8553466796875D0 0.17237763106822968D0 5.980000019073486D0)) (list (list 6.0D0 1156.79150390625D0 0.17348115146160126D0 5.989999771118164D0)) (list (list 6.0D0 1156.7015380859375D0 0.1749338060617447D0 6.0D0)) (list (list 6.0D0 1156.6141357421875D0 0.17687475681304932D0 6.009999752044678D0)) (list (list 6.0D0 1156.5250244140625D0 0.1794794797897339D0 6.019999980926514D0)) (list (list 6.0D0 1156.4244384765625D0 0.18237702548503876D0 6.029999732971191D0)) (list (list 6.0D0 1156.3355712890625D0 0.1854989379644394D0 6.039999961853027D0)) (list (list 6.0D0 1156.27685546875D0 0.18887566030025482D0 6.049999713897705D0)) (list (list 6.0D0 1156.2626953125D0 0.19260302186012268D0 6.059999942779541D0)) (list (list 6.0D0 1156.272216796875D0 0.1966700255870819D0 6.069999694824219D0)) (list (list 6.0D0 1156.25439453125D0 0.20037099719047546D0 6.079999923706055D0)) (list (list 6.0D0 1156.1944580078125D0 0.20321623980998993D0 6.089999675750732D0)) (list (list 6.0D0 1156.0882568359375D0 0.20491251349449158D0 6.099999904632568D0)) (list (list 6.0D0 1155.9405517578125D0 0.20533280074596405D0 6.109999656677246D0)) (list (list 6.0D0 1155.767822265625D0 0.2044317126274109D0 6.119999885559082D0)) (list (list 6.0D0 1155.610595703125D0 0.2028569132089615D0 6.12999963760376D0)) (list (list 6.0D0 1155.4913330078125D0 0.20077207684516907D0 6.139999866485596D0)) (list (list 6.0D0 1155.4224853515625D0 0.1982247680425644D0 6.150000095367432D0)) (list (list 6.0D0 1155.4075927734375D0 0.19519200921058655D0 6.159999847412109D0)) (list (list 6.0D0 1155.42822265625D0 0.19141885638237D0 6.170000076293945D0)) (list (list 6.0D0 1155.4534912109375D0 0.18721911311149597D0 6.179999828338623D0)) (list (list 6.0D0 1155.497314453125D0 0.18300814926624298D0 6.190000057220459D0)) (list (list 6.0D0 1155.5748291015625D0 0.1791766732931137D0 6.199999809265137D0)) (list (list 6.0D0 1155.70068359375D0 0.17610301077365875D0 6.210000038146973D0)) (list (list 6.0D0 1155.8665771484375D0 0.17410853505134583D0 6.21999979019165D0)) (list (list 6.0D0 1156.0208740234375D0 0.17260074615478516D0 6.230000019073486D0)) (list (list 6.0D0 1156.1490478515625D0 0.1713915765285492D0 6.239999771118164D0)) (list (list 6.0D0 1156.24609375D0 0.1704404354095459D0 6.25D0)) (list (list 6.0D0 1156.3145751953125D0 0.1698029637336731D0 6.259999752044678D0)) (list (list 6.0D0 1156.36572265625D0 0.16980524361133576D0 6.269999980926514D0)) (list (list 6.0D0 1156.42626953125D0 0.1704864650964737D0 6.279999732971191D0)) (list (list 6.0D0 1156.50244140625D0 0.17196786403656006D0 6.289999961853027D0)) (list (list 6.0D0 1156.5885009765625D0 0.17438550293445587D0 6.299999713897705D0)) (list (list 6.0D0 1156.6700439453125D0 0.1778523176908493D0 6.309999942779541D0)) (list (list 6.0D0 1156.7164306640625D0 0.18240141868591309D0 6.319999694824219D0)) (list (list 6.0D0 1156.7296142578125D0 0.18684940040111542D0 6.329999923706055D0)) (list (list 6.0D0 1156.71142578125D0 0.19032733142375946D0 6.339999675750732D0)) (list (list 6.0D0 1156.658935546875D0 0.19226518273353577D0 6.349999904632568D0)) (list (list 6.0D0 1156.5672607421875D0 0.19231514632701874D0 6.359999656677246D0)) (list (list 6.0D0 1156.4166259765625D0 0.19024038314819336D0 6.369999885559082D0)) (list (list 6.0D0 1156.22412109375D0 0.18697525560855866D0 6.37999963760376D0)) (list (list 6.0D0 1156.0198974609375D0 0.18302783370018005D0 6.389999866485596D0)) (list (list 6.0D0 1155.837890625D0 0.178875133395195D0 6.399999618530273D0)) (list (list 6.0D0 1155.716064453125D0 0.17502416670322418D0 6.409999847412109D0)) (list (list 6.0D0 1155.7069091796875D0 0.17223596572875977D0 6.420000076293945D0)) (list (list 6.0D0 1155.76416015625D0 0.17021706700325012D0 6.429999828338623D0)) (list (list 6.0D0 1155.8470458984375D0 0.16857582330703735D0 6.440000057220459D0)) (list (list 6.0D0 1155.92724609375D0 0.16705001890659332D0 6.449999809265137D0)) (list (list 6.0D0 1155.9822998046875D0 0.16544070839881897D0 6.460000038146973D0)) (list (list 6.0D0 1155.9976806640625D0 0.1637234091758728D0 6.46999979019165D0)) (list (list 6.0D0 1156.007080078125D0 0.16228121519088745D0 6.480000019073486D0)) (list (list 6.0D0 1156.0328369140625D0 0.16148732602596283D0 6.489999771118164D0)) (list (list 6.0D0 1156.0794677734375D0 0.16151468455791474D0 6.5D0)) (list (list 6.0D0 1156.138671875D0 0.16235579550266266D0 6.509999752044678D0)) (list (list 6.0D0 1156.17333984375D0 0.16328947246074677D0 6.519999980926514D0)) (list (list 6.0D0 1156.180419921875D0 0.16321420669555664D0 6.529999732971191D0)) (list (list 6.0D0 1156.17138671875D0 0.161910280585289D0 6.539999961853027D0)) (list (list 6.0D0 1156.157470703125D0 0.15946367383003235D0 6.549999713897705D0)) (list (list 6.0D0 1156.152099609375D0 0.15622079372406006D0 6.559999942779541D0)) (list (list 6.0D0 1156.1942138671875D0 0.15304851531982422D0 6.569999694824219D0)) (list (list 6.0D0 1156.2901611328125D0 0.15069754421710968D0 6.579999923706055D0)) (list (list 6.0D0 1156.4178466796875D0 0.14929142594337463D0 6.589999675750732D0)) (list (list 6.0D0 1156.5577392578125D0 0.14886710047721863D0 6.599999904632568D0)) (list (list 6.0D0 1156.6905517578125D0 0.14937658607959747D0 6.609999656677246D0)) (list (list 6.0D0 1156.794189453125D0 0.15091779828071594D0 6.619999885559082D0)) (list (list 6.0D0 1156.85791015625D0 0.15308067202568054D0 6.62999963760376D0)) (list (list 6.0D0 1156.8846435546875D0 0.15550507605075836D0 6.639999866485596D0)) (list (list 6.0D0 1156.87744140625D0 0.15783070027828217D0 6.649999618530273D0)) (list (list 6.0D0 1156.8404541015625D0 0.15965357422828674D0 6.659999847412109D0)) (list (list 6.0D0 1156.7625732421875D0 0.16013887524604797D0 6.670000076293945D0)) (list (list 6.0D0 1156.6578369140625D0 0.15922676026821137D0 6.679999828338623D0)) (list (list 6.0D0 1156.5518798828125D0 0.15723563730716705D0 6.690000057220459D0)) (list (list 6.0D0 1156.4678955078125D0 0.15451863408088684D0 6.699999809265137D0)) (list (list 6.0D0 1156.42919921875D0 0.15152262151241303D0 6.710000038146973D0)) (list (list 6.0D0 1156.464599609375D0 0.14894074201583862D0 6.71999979019165D0)) (list (list 6.0D0 1156.5450439453125D0 0.14722751080989838D0 6.730000019073486D0)) (list (list 6.0D0 1156.6351318359375D0 0.14649444818496704D0 6.739999771118164D0)) (list (list 6.0D0 1156.708984375D0 0.1467292755842209D0 6.75D0)) (list (list 6.0D0 1156.7464599609375D0 0.14779570698738098D0 6.759999752044678D0)) (list (list 6.0D0 1156.74609375D0 0.14942046999931336D0 6.769999980926514D0)) (list (list 6.0D0 1156.7623291015625D0 0.15137292444705963D0 6.779999732971191D0)) (list (list 6.0D0 1156.816162109375D0 0.15390576422214508D0 6.789999961853027D0)) (list (list 6.0D0 1156.9085693359375D0 0.15728060901165009D0 6.799999713897705D0)) (list (list 6.0D0 1157.0267333984375D0 0.1617245227098465D0 6.809999942779541D0)) (list (list 6.0D0 1157.1328125D0 0.16732974350452423D0 6.819999694824219D0)) (list (list 6.0D0 1157.2158203125D0 0.17306482791900635D0 6.829999923706055D0)) (list (list 6.0D0 1157.2889404296875D0 0.1782161295413971D0 6.839999675750732D0)) (list (list 6.0D0 1157.3599853515625D0 0.18236014246940613D0 6.849999904632568D0)) (list (list 6.0D0 1157.434326171875D0 0.18524150550365448D0 6.859999656677246D0)) (list (list 6.0D0 1157.503173828125D0 0.1866331398487091D0 6.869999885559082D0)) (list (list 6.0D0 1157.544921875D0 0.18678782880306244D0 6.87999963760376D0)) (list (list 6.0D0 1157.537841796875D0 0.18566855788230896D0 6.889999866485596D0)) (list (list 6.0D0 1157.46826171875D0 0.18322576582431793D0 6.899999618530273D0)) (list (list 6.0D0 1157.331787109375D0 0.17947331070899963D0 6.909999847412109D0)) (list (list 6.0D0 1157.158935546875D0 0.1743883192539215D0 6.920000076293945D0)) (list (list 6.0D0 1157.0404052734375D0 0.1684274524450302D0 6.929999828338623D0)) (list (list 6.0D0 1157.0169677734375D0 0.16197073459625244D0 6.940000057220459D0)) (list (list 6.0D0 1157.107177734375D0 0.1554977148771286D0 6.949999809265137D0)) (list (list 6.0D0 1157.3140869140625D0 0.14961136877536774D0 6.960000038146973D0)) (list (list 6.0D0 1157.6353759765625D0 0.14554552733898163D0 6.96999979019165D0)) (list (list 6.0D0 1158.00830078125D0 0.14331185817718506D0 6.980000019073486D0)) (list (list 6.0D0 1158.3896484375D0 0.1422659307718277D0 6.989999771118164D0)) (list (list 6.0D0 1158.751953125D0 0.14181853830814362D0 7.0D0)) (list (list 6.0D0 1159.072998046875D0 0.14127372205257416D0 7.009999752044678D0)) (list (list 6.0D0 1159.3267822265625D0 0.13921216130256653D0 7.019999980926514D0)) (list (list 6.0D0 1159.5150146484375D0 0.13424481451511383D0 7.029999732971191D0)) (list (list 6.0D0 1159.6705322265625D0 0.1256849765777588D0 7.039999961853027D0)) (list (list 6.0D0 1159.8623046875D0 0.11310338973999024D0 7.049999713897705D0)) (list (list 6.0D0 1160.2100830078125D0 0.09641602635383606D0 7.059999942779541D0)) (list (list 6.0D0 1161.2099609375D0 0.0758160948753357D0 7.069999694824219D0)) (list (list 6.0D0 1163.7078857421875D0 0.05597660318017006D0 7.079999923706055D0)) (list (list 6.0D0 1166.3480224609375D0 0.040677525103092194D0 7.089999675750732D0)) (list (list 6.0D0 1167.9420166015625D0 0.03045414760708809D0 7.099999904632568D0)) (list (list 6.0D0 1167.3719482421875D0 0.024288805201649666D0 7.109999656677246D0)) (list (list 6.0D0 1163.57666015625D0 0.02165357768535614D0 7.119999885559082D0)) (list (list 6.0D0 1160.364013671875D0 0.020416222512722016D0 7.12999963760376D0)) (list (list 6.0D0 1158.3311767578125D0 0.01932108961045742D0 7.139999866485596D0)) (list (list 6.0D0 1157.3336181640625D0 0.01839330978691578D0 7.149999618530273D0)) (list (list 6.0D0 1156.8919677734375D0 0.018139874562621117D0 7.159999847412109D0)) (list (list 6.0D0 1156.8465576171875D0 0.018885664641857147D0 7.170000076293945D0)) (list (list 6.0D0 1156.9013671875D0 0.020073749125003815D0 7.179999828338623D0)) (list (list 6.0D0 1157.001220703125D0 0.021292850375175476D0 7.190000057220459D0)) (list (list 6.0D0 1157.1126708984375D0 0.022254066541790962D0 7.199999809265137D0)) (list (list 6.0D0 1157.2020263671875D0 0.02270117960870266D0 7.210000038146973D0)) (list (list 6.0D0 1157.17236328125D0 0.022221971303224564D0 7.21999979019165D0)) (list (list 6.0D0 1157.029541015625D0 0.02090665139257908D0 7.230000019073486D0)) (list (list 6.0D0 1156.85205078125D0 0.019043510779738426D0 7.239999771118164D0)) (list (list 6.0D0 1156.6961669921875D0 0.016877442598342896D0 7.25D0)) (list (list 6.0D0 1156.61767578125D0 0.01468319445848465D0 7.259999752044678D0)) (list (list 6.0D0 1156.7296142578125D0 0.012875978834927082D0 7.269999980926514D0)) (list (list 6.0D0 1157.143310546875D0 0.011617269366979599D0 7.279999732971191D0)) (list (list 6.0D0 1157.8248291015625D0 0.010790473781526089D0 7.289999961853027D0)) (list (list 6.0D0 1158.6468505859375D0 0.010266170836985112D0 7.299999713897705D0)) (list (list 6.0D0 1159.4190673828125D0 0.009878907352685929D0 7.309999942779541D0)) (list (list 6.0D0 1159.8153076171875D0 0.009407619014382363D0 7.319999694824219D0)) (list (list 6.0D0 1159.8643798828125D0 0.008791102096438408D0 7.329999923706055D0)) (list (list 6.0D0 1159.7373046875D0 0.008081326261162758D0 7.339999675750732D0)) (list (list 6.0D0 1159.546875D0 0.007313810288906097D0 7.349999904632568D0)) (list (list 6.0D0 1159.385498046875D0 0.0065236687660217285D0 7.359999656677246D0)) (list (list 6.0D0 1159.265625D0 0.0057454598136246205D0 7.369999885559082D0)) (list (list 6.0D0 1159.0902099609375D0 0.004996790084987879D0 7.37999963760376D0)) (list (list 6.0D0 1158.9156494140625D0 0.0042848121374845505D0 7.389999866485596D0)) (list (list 6.0D0 1158.8494873046875D0 0.003623012686148286D0 7.399999618530273D0)) (list (list 6.0D0 1159.0150146484375D0 0.0030268989503383637D0 7.409999847412109D0)) (list (list 6.0D0 1159.53564453125D0 0.002534576691687107D0 7.419999599456787D0)) (list (list 6.0D0 1160.158203125D0 0.0021377296652644873D0 7.429999828338623D0)) (list (list 6.0D0 1160.597412109375D0 0.0018182011554017663D0 7.440000057220459D0)) (list (list 6.0D0 1160.70947265625D0 0.0015732658794149757D0 7.449999809265137D0)) (list (list 6.0D0 1160.423828125D0 0.0014012465253472329D0 7.460000038146973D0)) (list (list 6.0D0 1159.759765625D0 0.0013071988942101598D0 7.46999979019165D0)) (list (list 6.0D0 1158.9869384765625D0 0.0012424963060766459D0 7.480000019073486D0)) (list (list 6.0D0 1158.296875D0 0.0011696817819029093D0 7.489999771118164D0)) (list (list 6.0D0 1157.784423828125D0 0.0010692777577787638D0 7.5D0)) (list (list 6.0D0 1157.501220703125D0 9.296828065998852D-4 7.509999752044678D0)) (list (list 6.0D0 1157.46728515625D0 7.475183811038733D-4 7.519999980926514D0)) (list (list 6.0D0 1157.5789794921875D0 5.501600098796189D-4 7.529999732971191D0)) (list (list 6.0D0 1157.7496337890625D0 3.6348128924146295D-4 7.539999961853027D0)) (list (list 7.0D0 871.3780517578125D0 4.8025790601968765D-4 0.0D0)) (list (list 7.0D0 871.8150024414063D0 7.895382004790008D-4 0.009999999776482582D0)) (list (list 7.0D0 872.4197387695313D0 0.0012207292020320893D0 0.019999999552965164D0)) (list (list 7.0D0 873.0465087890625D0 0.0018260566284880042D0 0.029999999329447747D0)) (list (list 7.0D0 873.4210815429688D0 0.0026160716079175473D0 0.03999999910593033D0)) (list (list 7.0D0 873.1430053710938D0 0.0035595844965428114D0 0.04999999701976776D0)) (list (list 7.0D0 871.8753051757813D0 0.0044528101570904255D0 0.05999999865889549D0)) (list (list 7.0D0 870.351806640625D0 0.005115203093737364D0 0.07000000029802323D0)) (list (list 7.0D0 868.9182739257813D0 0.005433670710772276D0 0.07999999821186066D0)) (list (list 7.0D0 867.7942504882813D0 0.005292561836540699D0 0.08999999612569809D0)) (list (list 7.0D0 867.050537109375D0 0.004575906787067652D0 0.09999999403953552D0)) (list (list 7.0D0 860.7518310546875D0 0.003298324765637517D0 0.10999999940395355D0)) (list (list 7.0D0 857.4569091796875D0 0.0026171859353780747D0 0.11999999731779099D0)) (list (list 7.0D0 857.5616455078125D0 0.0024142065085470677D0 0.12999999523162842D0)) (list (list 7.0D0 860.9979858398438D0 0.002681660931557417D0 0.14000000059604645D0)) (list (list 7.0D0 867.1793212890625D0 0.0035038709174841643D0 0.14999999105930328D0)) (list (list 7.0D0 867.1142578125D0 0.003911360166966915D0 0.1599999964237213D0)) (list (list 7.0D0 867.2489624023438D0 0.004117918666452169D0 0.17000000178813934D0)) (list (list 7.0D0 867.352783203125D0 0.004207051359117031D0 0.17999999225139618D0)) (list (list 7.0D0 867.2330322265625D0 0.004201510455459356D0 0.1899999976158142D0)) (list (list 7.0D0 866.738037109375D0 0.004070151597261429D0 0.19999998807907105D0)) (list (list 7.0D0 866.4982299804688D0 0.003754980629310012D0 0.20999999344348908D0)) (list (list 7.0D0 867.5556640625D0 0.003272156696766615D0 0.2199999988079071D0)) (list (list 7.0D0 870.9154052734375D0 0.0027840365655720234D0 0.22999998927116394D0)) (list (list 7.0D0 875.4879150390625D0 0.0024460782296955586D0 0.23999999463558197D0)) (list (list 7.0D0 878.3147583007813D0 0.0024037009570747614D0 0.25D0)) (list (list 7.0D0 878.1021728515625D0 0.00234864535741508D0 0.25999999046325684D0)) (list (list 7.0D0 876.9945068359375D0 0.002220657654106617D0 0.26999998092651367D0)) (list (list 7.0D0 877.0761108398438D0 0.0020872342865914107D0 0.2800000011920929D0)) (list (list 7.0D0 878.443115234375D0 0.002052609110251069D0 0.28999999165534973D0)) (list (list 7.0D0 879.4510498046875D0 0.0022483346983790398D0 0.29999998211860657D0)) (list (list 7.0D0 877.1840209960938D0 0.0024301165249198675D0 0.3100000023841858D0)) (list (list 7.0D0 869.9138793945313D0 0.0024571612011641264D0 0.3199999928474426D0)) (list (list 7.0D0 863.85107421875D0 0.0023179827257990837D0 0.32999998331069947D0)) (list (list 7.0D0 860.756591796875D0 0.0021237737964838744D0 0.3400000035762787D0)) (list (list 7.0D0 858.7138671875D0 0.0020909456070512534D0 0.3499999940395355D0)) (list (list 7.0D0 857.5719604492188D0 0.0023360897321254015D0 0.35999998450279236D0)) (list (list 7.0D0 858.051025390625D0 0.002485047560185194D0 0.3700000047683716D0)) (list (list 7.0D0 859.5235595703125D0 0.0024576266296207905D0 0.3799999952316284D0)) (list (list 7.0D0 862.0047607421875D0 0.0023006617557257414D0 0.38999998569488526D0)) (list (list 7.0D0 865.9403686523438D0 0.00217358092777431D0 0.3999999761581421D0)) (list (list 7.0D0 868.2752075195313D0 0.002501488896086812D0 0.4099999964237213D0)) (list (list 7.0D0 867.6467895507813D0 0.002917463658377528D0 0.41999998688697815D0)) (list (list 7.0D0 865.9996337890625D0 0.0033500625286251307D0 0.429999977350235D0)) (list (list 7.0D0 864.7824096679688D0 0.0036427625454962254D0 0.4399999976158142D0)) (list (list 7.0D0 865.0552368164063D0 0.0035739606246352196D0 0.44999998807907105D0)) (list (list 7.0D0 865.7118530273438D0 0.0031362539157271386D0 0.4599999785423279D0)) (list (list 7.0D0 865.5618286132813D0 0.002809197176247835D0 0.4699999988079071D0)) (list (list 7.0D0 865.23583984375D0 0.0026966494042426348D0 0.47999998927116394D0)) (list (list 7.0D0 865.6842041015625D0 0.002740170806646347D0 0.4899999797344208D0)) (list (list 7.0D0 868.0798950195313D0 0.0027536998968571425D0 0.5D0)) (list (list 7.0D0 871.8467407226563D0 0.0026925706770271063D0 0.5099999904632568D0)) (list (list 7.0D0 874.1304931640625D0 0.0026960507966578007D0 0.5199999809265137D0)) (list (list 7.0D0 874.9962158203125D0 0.002705171937122941D0 0.5299999713897705D0)) (list (list 7.0D0 874.6099243164063D0 0.002670967485755682D0 0.5399999618530273D0)) (list (list 7.0D0 873.3016357421875D0 0.002552255755290389D0 0.550000011920929D0)) (list (list 7.0D0 872.9890747070313D0 0.0023586375173181296D0 0.5600000023841858D0)) (list (list 7.0D0 873.0398559570313D0 0.0021016672253608704D0 0.5699999928474426D0)) (list (list 7.0D0 877.1685180664063D0 0.0017768485704436899D0 0.5799999833106995D0)) (list (list 7.0D0 883.4058837890625D0 0.001481405459344387D0 0.5899999737739563D0)) (list (list 7.0D0 885.7509155273438D0 0.0013837835285812617D0 0.5999999642372131D0)) (list (list 7.0D0 886.3734130859375D0 0.0014431221643462778D0 0.6100000143051148D0)) (list (list 7.0D0 887.5623168945313D0 0.001716763130389154D0 0.6200000047683716D0)) (list (list 7.0D0 888.8488159179688D0 0.0020413275342434645D0 0.6299999952316284D0)) (list (list 7.0D0 889.8342895507813D0 0.002262140391394496D0 0.6399999856948853D0)) (list (list 7.0D0 890.108154296875D0 0.00222639343701303D0 0.6499999761581421D0)) (list (list 7.0D0 887.6905517578125D0 0.0017921290127560497D0 0.6599999666213989D0)) (list (list 7.0D0 904.0740356445313D0 0.00161512172780931D0 0.6699999570846558D0)) (list (list 7.0D0 915.8009033203125D0 0.0015335335629060865D0 0.6800000071525574D0)) (list (list 7.0D0 918.6314697265625D0 0.001461294130422175D0 0.6899999976158142D0)) (list (list 7.0D0 921.1868286132813D0 0.0013637039810419083D0 0.699999988079071D0)) (list (list 7.0D0 922.1224365234375D0 0.0013419699389487505D0 0.7099999785423279D0)) (list (list 7.0D0 921.0000610351563D0 0.001369273872114718D0 0.7199999690055847D0)) (list (list 7.0D0 919.0651245117188D0 0.001440234249457717D0 0.7299999594688416D0)) (list (list 7.0D0 917.9837646484375D0 0.0015060018049553037D0 0.7400000095367432D0)) (list (list 7.0D0 919.6338500976563D0 0.0014923519920557738D0 0.75D0)) (list (list 7.0D0 922.474609375D0 0.0014848457649350167D0 0.7599999904632568D0)) (list (list 7.0D0 924.060791015625D0 0.001510423724539578D0 0.7699999809265137D0)) (list (list 7.0D0 924.8233032226563D0 0.0015481028240174056D0 0.7799999713897705D0)) (list (list 7.0D0 925.33154296875D0 0.001591924810782075D0 0.7899999618530273D0)) (list (list 7.0D0 926.2188110351563D0 0.0016446822555735708D0 0.7999999523162842D0)) (list (list 7.0D0 926.4190063476563D0 0.0017009055009111762D0 0.8100000023841858D0)) (list (list 7.0D0 926.1242065429688D0 0.001745859393849969D0 0.8199999928474426D0)) (list (list 7.0D0 926.6432495117188D0 0.001774354139342904D0 0.8299999833106995D0)) (list (list 7.0D0 928.3907470703125D0 0.0018110269447788597D0 0.8399999737739563D0)) (list (list 7.0D0 931.1158447265625D0 0.0018986896611750126D0 0.8499999642372131D0)) (list (list 7.0D0 932.7830200195313D0 0.0020421757362782956D0 0.85999995470047D0)) (list (list 7.0D0 933.4988403320313D0 0.0021595957223325968D0 0.8700000047683716D0)) (list (list 7.0D0 933.8307495117188D0 0.0022601119708269835D0 0.8799999952316284D0)) (list (list 7.0D0 934.2146606445313D0 0.002344642300158739D0 0.8899999856948853D0)) (list (list 7.0D0 935.0292358398438D0 0.002407558262348175D0 0.8999999761581421D0)) (list (list 7.0D0 936.6273193359375D0 0.002394111128523946D0 0.9099999666213989D0)) (list (list 7.0D0 938.01708984375D0 0.0023037204518914223D0 0.9199999570846558D0)) (list (list 7.0D0 938.66748046875D0 0.0021767630241811276D0 0.9300000071525574D0)) (list (list 7.0D0 938.5138549804688D0 0.0020594331435859204D0 0.9399999976158142D0)) (list (list 7.0D0 937.80419921875D0 0.002002089750021696D0 0.949999988079071D0)) (list (list 7.0D0 936.86328125D0 0.0020206631161272526D0 0.9599999785423279D0)) (list (list 7.0D0 936.46875D0 0.002024047775194049D0 0.9699999690055847D0)) (list (list 7.0D0 936.550048828125D0 0.0020073014311492443D0 0.9799999594688416D0)) (list (list 7.0D0 936.9140625D0 0.0019911734852939844D0 0.9899999499320984D0)) (list (list 7.0D0 937.2735595703125D0 0.0020154749508947134D0 1.0D0)) (list (list 7.0D0 937.384765625D0 0.0021771807223558426D0 1.0099999904632569D0)) (list (list 7.0D0 937.2079467773438D0 0.002463363343849778D0 1.0199999809265137D0)) (list (list 7.0D0 936.6439208984375D0 0.0027684252709150315D0 1.0299999713897705D0)) (list (list 7.0D0 935.7451171875D0 0.002997615374624729D0 1.0399999618530274D0)) (list (list 7.0D0 934.67431640625D0 0.0030615483410656453D0 1.0499999523162842D0)) (list (list 7.0D0 933.7020874023438D0 0.002899132203310728D0 1.059999942779541D0)) (list (list 7.0D0 932.7421264648438D0 0.002672901377081871D0 1.0699999332427979D0)) (list (list 7.0D0 931.421142578125D0 0.002463467651978135D0 1.0799999237060547D0)) (list (list 7.0D0 929.82470703125D0 0.002298250561580062D0 1.090000033378601D0)) (list (list 7.0D0 928.358154296875D0 0.0021754226181656123D0 1.100000023841858D0)) (list (list 7.0D0 928.2876586914063D0 0.002095856238156557D0 1.1100000143051148D0)) (list (list 7.0D0 928.33837890625D0 0.0021325850393623114D0 1.1200000047683716D0)) (list (list 7.0D0 928.349853515625D0 0.0022410538513213396D0 1.1299999952316285D0)) (list (list 7.0D0 928.2450561523438D0 0.0023492022883147D0 1.1399999856948853D0)) (list (list 7.0D0 928.002197265625D0 0.0023685283958911896D0 1.149999976158142D0)) (list (list 7.0D0 927.7614135742188D0 0.0022530765272676945D0 1.159999966621399D0)) (list (list 7.0D0 928.3745727539063D0 0.002130823442712426D0 1.1699999570846558D0)) (list (list 7.0D0 929.6085815429688D0 0.0021086076740175486D0 1.1799999475479126D0)) (list (list 7.0D0 930.9429321289063D0 0.0022111856378614903D0 1.1899999380111695D0)) (list (list 7.0D0 931.7579956054688D0 0.0024102285970002413D0 1.1999999284744263D0)) (list (list 7.0D0 932.7666625976563D0 0.002586542861536145D0 1.209999918937683D0)) (list (list 7.0D0 933.8999633789063D0 0.002738510724157095D0 1.2200000286102295D0)) (list (list 7.0D0 934.396484375D0 0.0028571540024131537D0 1.2300000190734864D0)) (list (list 7.0D0 934.1862182617188D0 0.0029279394075274468D0 1.2400000095367432D0)) (list (list 7.0D0 933.6574096679688D0 0.002934783697128296D0 1.25D0)) (list (list 7.0D0 934.3634643554688D0 0.0028552599251270295D0 1.2599999904632569D0)) (list (list 7.0D0 935.792724609375D0 0.0028106814716011286D0 1.2699999809265137D0)) (list (list 7.0D0 937.2948608398438D0 0.002827549586072564D0 1.2799999713897705D0)) (list (list 7.0D0 938.2828979492188D0 0.0028808736242353916D0 1.2899999618530274D0)) (list (list 7.0D0 938.2413940429688D0 0.0029211610089987517D0 1.2999999523162842D0)) (list (list 7.0D0 937.3380126953125D0 0.0029552015475928784D0 1.309999942779541D0)) (list (list 7.0D0 936.3175048828125D0 0.003020072355866432D0 1.3199999332427979D0)) (list (list 7.0D0 935.3871459960938D0 0.003060069400817156D0 1.3299999237060547D0)) (list (list 7.0D0 934.610107421875D0 0.0030346428975462914D0 1.3399999141693116D0)) (list (list 7.0D0 933.91943359375D0 0.00291640218347311D0 1.350000023841858D0)) (list (list 7.0D0 932.4833984375D0 0.0027424723375588656D0 1.3600000143051148D0)) (list (list 7.0D0 930.5499267578125D0 0.0026475393678992987D0 1.3700000047683716D0)) (list (list 7.0D0 928.7642211914063D0 0.002607471076771617D0 1.3799999952316285D0)) (list (list 7.0D0 927.5377197265625D0 0.002574452431872487D0 1.3899999856948853D0)) (list (list 7.0D0 927.0818481445313D0 0.0024961032904684544D0 1.399999976158142D0)) (list (list 7.0D0 926.5133666992188D0 0.002442010212689638D0 1.409999966621399D0)) (list (list 7.0D0 925.9561767578125D0 0.0024656709283590317D0 1.4199999570846558D0)) (list (list 7.0D0 925.8896484375D0 0.0024933619424700737D0 1.4299999475479126D0)) (list (list 7.0D0 926.135986328125D0 0.00246876641176641D0 1.4399999380111695D0)) (list (list 7.0D0 926.1470336914063D0 0.002344480250030756D0 1.4499999284744263D0)) (list (list 7.0D0 924.7769165039063D0 0.0020910317543894053D0 1.459999918937683D0)) (list (list 7.0D0 923.5914916992188D0 0.0018359088571742177D0 1.46999990940094D0)) (list (list 7.0D0 923.0252685546875D0 0.0016276974929496646D0 1.4800000190734864D0)) (list (list 7.0D0 922.7379760742188D0 0.001498576020821929D0 1.4900000095367432D0)) (list (list 7.0D0 922.0588989257813D0 0.0014695762656629086D0 1.5D0)) (list (list 7.0D0 920.7932739257813D0 0.0015469647478312254D0 1.5099999904632569D0)) (list (list 7.0D0 920.0909423828125D0 0.0016704484587535263D0 1.5199999809265137D0)) (list (list 7.0D0 920.5220947265625D0 0.0017744825454428792D0 1.5299999713897705D0)) (list (list 7.0D0 922.0971069335938D0 0.0018404287984594703D0 1.5399999618530274D0)) (list (list 7.0D0 924.4114990234375D0 0.0018732933094725013D0 1.5499999523162842D0)) (list (list 7.0D0 925.8024291992188D0 0.00190852175001055D0 1.559999942779541D0)) (list (list 7.0D0 926.8947143554688D0 0.0019478061003610492D0 1.5699999332427979D0)) (list (list 7.0D0 928.1439819335938D0 0.002004648558795452D0 1.5799999237060547D0)) (list (list 7.0D0 929.4501953125D0 0.002089126966893673D0 1.5899999141693116D0)) (list (list 7.0D0 930.5042724609375D0 0.002206338569521904D0 1.5999999046325684D0)) (list (list 7.0D0 931.2860717773438D0 0.0023347055539488793D0 1.6100000143051148D0)) (list (list 7.0D0 932.3709106445313D0 0.0024715394247323275D0 1.6200000047683716D0)) (list (list 7.0D0 933.2861328125D0 0.002626214176416397D0 1.6299999952316285D0)) (list (list 7.0D0 933.7486572265625D0 0.0027614908758550883D0 1.6399999856948853D0)) (list (list 7.0D0 933.6389770507813D0 0.002819224027916789D0 1.649999976158142D0)) (list (list 7.0D0 933.6232299804688D0 0.00272475671954453D0 1.659999966621399D0)) (list (list 7.0D0 934.083251953125D0 0.002555586164817214D0 1.6699999570846558D0)) (list (list 7.0D0 934.4271850585938D0 0.0023792251013219357D0 1.6799999475479126D0)) (list (list 7.0D0 934.1919555664063D0 0.002213065279647708D0 1.6899999380111695D0)) (list (list 7.0D0 933.0560913085938D0 0.002061642473563552D0 1.6999999284744263D0)) (list (list 7.0D0 931.5011596679688D0 0.001991305034607649D0 1.709999918937683D0)) (list (list 7.0D0 929.9077758789063D0 0.002044341992586851D0 1.71999990940094D0)) (list (list 7.0D0 928.0928955078125D0 0.002142957178875804D0 1.7300000190734864D0)) (list (list 7.0D0 925.915771484375D0 0.0021857041865587235D0 1.7400000095367432D0)) (list (list 7.0D0 923.2288818359375D0 0.002074209274724126D0 1.75D0)) (list (list 7.0D0 919.5189208984375D0 0.0018399093532934785D0 1.7599999904632569D0)) (list (list 7.0D0 917.2359619140625D0 0.0015404213918372989D0 1.7699999809265137D0)) (list (list 7.0D0 915.8413696289063D0 0.0011871680617332459D0 1.7799999713897705D0)) (list (list 7.0D0 914.2386474609375D0 8.733251597732306D-4 1.7899999618530274D0)) (list (list 7.0D0 912.9574584960938D0 7.1093620499596D-4 1.7999999523162842D0)) (list (list 7.0D0 929.8198852539063D0 6.927523645572364D-4 1.809999942779541D0)) (list (list 7.0D0 948.9911499023438D0 5.359187489375472D-4 1.8199999332427979D0)) (list (list 7.0D0 957.7240600585938D0 4.491833387874067D-4 1.8299999237060547D0)) (list (list 7.0D0 948.897216796875D0 5.400514928624034D-4 1.8399999141693116D0)) (list (list 7.0D0 921.3220825195313D0 8.547736215405166D-4 1.8499999046325684D0)) (list (list 7.0D0 902.0240478515625D0 0.0012683385284617544D0 1.8600000143051148D0)) (list (list 7.0D0 899.376220703125D0 0.001214473508298397D0 1.8700000047683716D0)) (list (list 7.0D0 897.435302734375D0 0.0010193081106990576D0 1.8799999952316285D0)) (list (list 7.0D0 893.6283569335938D0 8.373266900889576D-4 1.8899999856948853D0)) (list (list 7.0D0 890.1756591796875D0 7.559973746538162D-4 1.899999976158142D0)) (list (list 7.0D0 890.9995727539063D0 7.418821915052831D-4 1.909999966621399D0)) (list (list 7.0D0 892.8351440429688D0 8.649115916341543D-4 1.9199999570846558D0)) (list (list 7.0D0 894.7728271484375D0 0.0011077455710619688D0 1.9299999475479126D0)) (list (list 7.0D0 897.4141235351563D0 0.0014079586835578084D0 1.9399999380111695D0)) (list (list 7.0D0 901.6672973632813D0 0.0016581027302891016D0 1.9499999284744263D0)) (list (list 7.0D0 906.9656982421875D0 0.0015538149746134878D0 1.959999918937683D0)) (list (list 7.0D0 911.6976928710938D0 0.0012674255995079875D0 1.96999990940094D0)) (list (list 7.0D0 915.1016235351563D0 0.0010214161593466998D0 1.9799998998641968D0)) (list (list 7.0D0 916.3569946289063D0 8.916520746424794D-4 1.9900000095367432D0)) (list (list 7.0D0 915.0220336914063D0 9.079105220735073D-4 2.0D0)) (list (list 7.0D0 912.9943237304688D0 0.0011470686877146364D0 2.009999990463257D0)) (list (list 7.0D0 912.7628784179688D0 0.0013600073289126158D0 2.0199999809265137D0)) (list (list 7.0D0 915.4707641601563D0 0.0014483467675745488D0 2.0299999713897705D0)) (list (list 7.0D0 919.1453247070313D0 0.0014733790885657072D0 2.0399999618530274D0)) (list (list 7.0D0 921.0220336914063D0 0.001545995008200407D0 2.049999952316284D0)) (list (list 7.0D0 920.8522338867188D0 0.001722814398817718D0 2.059999942779541D0)) (list (list 7.0D0 919.3056640625D0 0.0019434612477198244D0 2.069999933242798D0)) (list (list 7.0D0 918.21875D0 0.0020938164088875056D0 2.0799999237060547D0)) (list (list 7.0D0 917.9880981445313D0 0.002129253698512912D0 2.0899999141693116D0)) (list (list 7.0D0 918.4854125976563D0 0.0020413014572113753D0 2.0999999046325684D0)) (list (list 7.0D0 919.2574462890625D0 0.0018890966894105077D0 2.109999895095825D0)) (list (list 7.0D0 919.5111083984375D0 0.0017320483457297087D0 2.119999885559082D0)) (list (list 7.0D0 919.3381958007813D0 0.001597812632098794D0 2.129999876022339D0)) (list (list 7.0D0 919.0679931640625D0 0.001507357694208622D0 2.1399998664855957D0)) (list (list 7.0D0 919.0213623046875D0 0.001463451306335628D0 2.1499998569488526D0)) (list (list 7.0D0 918.824462890625D0 0.001366999582387507D0 2.1599998474121094D0)) (list (list 7.0D0 914.0888061523438D0 0.0011653655674308539D0 2.169999837875366D0)) (list (list 7.0D0 909.6608276367188D0 0.0010547410929575563D0 2.180000066757202D0)) (list (list 7.0D0 906.9962158203125D0 0.0010392878903076053D0 2.190000057220459D0)) (list (list 7.0D0 906.3432006835938D0 0.0010596623178571463D0 2.200000047683716D0)) (list (list 7.0D0 906.8311767578125D0 0.001041588606312871D0 2.2100000381469727D0)) (list (list 7.0D0 911.3153076171875D0 9.619840420782566D-4 2.2200000286102295D0)) (list (list 7.0D0 915.7508544921875D0 9.95708629488945D-4 2.2300000190734864D0)) (list (list 7.0D0 918.5244140625D0 0.001128351199440658D0 2.240000009536743D0)) (list (list 7.0D0 918.8597412109375D0 0.0012716108467429877D0 2.25D0)) (list (list 7.0D0 916.6176147460938D0 0.0012410496128723026D0 2.259999990463257D0)) (list (list 7.0D0 910.0555419921875D0 0.0010971099836751819D0 2.2699999809265137D0)) (list (list 7.0D0 903.102783203125D0 0.0010717654367908836D0 2.2799999713897705D0)) (list (list 7.0D0 906.633056640625D0 9.137797169387341D-4 2.2899999618530274D0)) (list (list 7.0D0 928.2361450195313D0 4.013422585558146D-4 2.299999952316284D0)) (list (list 7.0D0 944.2493286132813D0 3.5235643736086786D-4 2.309999942779541D0)) (list (list 7.0D0 960.2625122070313D0 3.0337064526975155D-4 2.319999933242798D0)) (list (list 7.0D0 965.0140991210938D0 3.178921469952911D-4 2.3299999237060547D0)) (list (list 7.0D0 962.2702026367188D0 3.933304687961936D-4 2.3399999141693116D0)) (list (list 7.0D0 959.7069702148438D0 4.912726581096649D-4 2.3499999046325684D0)) (list (list 7.0D0 961.0313720703125D0 4.817066655959934D-4 2.359999895095825D0)) (list (list 7.0D0 942.0023803710938D0 4.923754604533315D-4 2.369999885559082D0)) (list (list 7.0D0 924.565673828125D0 5.369340651668608D-4 2.379999876022339D0)) (list (list 7.0D0 916.1723022460938D0 5.825661355629563D-4 2.3899998664855957D0)) (list (list 7.0D0 918.071533203125D0 6.026424234732986D-4 2.3999998569488526D0)) (list (list 7.0D0 918.8052368164063D0 6.866463227197528D-4 2.4099998474121094D0)) (list (list 7.0D0 917.887939453125D0 6.900211446918547D-4 2.419999837875366D0)) (list (list 7.0D0 916.1759033203125D0 6.123933126218617D-4 2.429999828338623D0)) (list (list 7.0D0 912.3071899414063D0 5.194310797378421D-4 2.440000057220459D0)) (list (list 7.0D0 906.0606689453125D0 4.7948461724445224D-4 2.450000047683716D0)) (list (list 7.0D0 906.6287231445313D0 4.65970893856138D-4 2.4600000381469727D0)) (list (list 7.0D0 905.8170776367188D0 4.5812324970029295D-4 2.4700000286102295D0)) (list (list 7.0D0 902.06982421875D0 5.122198490425944D-4 2.4800000190734864D0)) (list (list 7.0D0 896.146240234375D0 6.713962648063898D-4 2.490000009536743D0)) (list (list 7.0D0 889.5407104492188D0 9.87777253612876D-4 2.5D0)) (list (list 7.0D0 883.8839111328125D0 0.001621247036382556D0 2.509999990463257D0)) (list (list 7.0D0 883.9285888671875D0 0.002161310287192464D0 2.5199999809265137D0)) (list (list 7.0D0 886.1887817382813D0 0.002423094352707267D0 2.5299999713897705D0)) (list (list 7.0D0 888.7891235351563D0 0.0024161881301552058D0 2.5399999618530274D0)) (list (list 7.0D0 890.0322875976563D0 0.002200494287535548D0 2.549999952316284D0)) (list (list 7.0D0 887.3658447265625D0 0.0017626357730478049D0 2.559999942779541D0)) (list (list 7.0D0 903.2190551757813D0 0.001018016366288066D0 2.569999933242798D0)) (list (list 7.0D0 921.8355712890625D0 4.0486353100277484D-4 2.5799999237060547D0)) (list (list 7.0D0 928.6674194335938D0 1.0928834672085941D-4 2.5899999141693116D0)) (list (list 7.0D0 915.3063354492188D0 1.6928280820138753D-4 2.5999999046325684D0)) (list (list 7.0D0 901.9451904296875D0 2.292772551300004D-4 2.609999895095825D0)) (list (list 7.0D0 916.1853637695313D0 8.22202768176794D-4 2.619999885559082D0)) (list (list 7.0D0 920.8239135742188D0 0.001221468555741012D0 2.629999876022339D0)) (list (list 7.0D0 917.7550048828125D0 0.0014385507674887777D0 2.6399998664855957D0)) (list (list 7.0D0 916.3014526367188D0 0.0016081565991044045D0 2.6499998569488526D0)) (list (list 7.0D0 917.0054321289063D0 0.0015965471975505352D0 2.6599998474121094D0)) (list (list 7.0D0 919.4825439453125D0 0.0014306495431810618D0 2.669999837875366D0)) (list (list 7.0D0 922.4905395507813D0 0.0012623872607946396D0 2.679999828338623D0)) (list (list 7.0D0 925.2550659179688D0 0.0011793557787314058D0 2.690000057220459D0)) (list (list 7.0D0 927.1063232421875D0 0.0012289538281038404D0 2.700000047683716D0)) (list (list 7.0D0 927.3362426757813D0 0.0013488703407347203D0 2.7100000381469727D0)) (list (list 7.0D0 926.3381958007813D0 0.001424383488483727D0 2.7200000286102295D0)) (list (list 7.0D0 925.0636596679688D0 0.001468332251533866D0 2.7300000190734864D0)) (list (list 7.0D0 924.16796875D0 0.0014903881819918752D0 2.740000009536743D0)) (list (list 7.0D0 924.2608032226563D0 0.0014969834592193366D0 2.75D0)) (list (list 7.0D0 926.1504516601563D0 0.0014741754857823253D0 2.759999990463257D0)) (list (list 7.0D0 927.7078247070313D0 0.0014439160004258156D0 2.7699999809265137D0)) (list (list 7.0D0 927.625D0 0.001375449588522315D0 2.7799999713897705D0)) (list (list 7.0D0 925.8021850585938D0 0.0012822292046621442D0 2.7899999618530274D0)) (list (list 7.0D0 922.7749633789063D0 0.001181677682325244D0 2.799999952316284D0)) (list (list 7.0D0 920.4390258789063D0 0.001059738453477621D0 2.809999942779541D0)) (list (list 7.0D0 922.8643798828125D0 8.599513093940914D-4 2.819999933242798D0)) (list (list 7.0D0 926.1192626953125D0 7.524070097133517D-4 2.8299999237060547D0)) (list (list 7.0D0 928.3134155273438D0 7.589978049509227D-4 2.8399999141693116D0)) (list (list 7.0D0 928.3930053710938D0 8.647104841656983D-4 2.8499999046325684D0)) (list (list 7.0D0 927.0326538085938D0 0.0010513728484511376D0 2.859999895095825D0)) (list (list 7.0D0 926.9112548828125D0 0.001291186548769474D0 2.869999885559082D0)) (list (list 7.0D0 927.4454956054688D0 0.0015091580571606756D0 2.879999876022339D0)) (list (list 7.0D0 928.221923828125D0 0.0016489069676026702D0 2.8899998664855957D0)) (list (list 7.0D0 928.8981323242188D0 0.001665252260863781D0 2.8999998569488526D0)) (list (list 7.0D0 929.3731079101563D0 0.0015229807468131185D0 2.9099998474121094D0)) (list (list 7.0D0 929.6143798828125D0 0.0013608565786853433D0 2.919999837875366D0)) (list (list 7.0D0 929.67431640625D0 0.0012579269241541624D0 2.929999828338623D0)) (list (list 7.0D0 929.723876953125D0 0.001215598313137889D0 2.93999981880188D0)) (list (list 7.0D0 929.9027099609375D0 0.0012128921225667D0 2.950000047683716D0)) (list (list 7.0D0 930.1183471679688D0 0.0012094557750970126D0 2.9600000381469727D0)) (list (list 7.0D0 929.2044677734375D0 0.0012013083323836327D0 2.9700000286102295D0)) (list (list 7.0D0 927.8136596679688D0 0.0012326580472290516D0 2.9800000190734864D0)) (list (list 7.0D0 926.7489624023438D0 0.0013067587278783322D0 2.990000009536743D0)) (list (list 7.0D0 926.5072631835938D0 0.0014185846084728837D0 3.0D0)) (list (list 7.0D0 926.27392578125D0 0.0015706878621131182D0 3.009999990463257D0)) (list (list 7.0D0 925.15478515625D0 0.0017059247475117445D0 3.0199999809265137D0)) (list (list 7.0D0 924.2195434570313D0 0.0017346806125715375D0 3.0299999713897705D0)) (list (list 7.0D0 923.9154052734375D0 0.0016233911737799645D0 3.0399999618530274D0)) (list (list 7.0D0 924.5588989257813D0 0.0013768391218036414D0 3.049999952316284D0)) (list (list 7.0D0 926.5624389648438D0 0.0010808911174535752D0 3.059999942779541D0)) (list (list 7.0D0 929.6676635742188D0 0.0010089940624311567D0 3.069999933242798D0)) (list (list 7.0D0 930.97021484375D0 0.0011491794139146805D0 3.0799999237060547D0)) (list (list 7.0D0 929.9732666015625D0 0.0014195176772773266D0 3.0899999141693116D0)) (list (list 7.0D0 927.4058837890625D0 0.0017038730438798666D0 3.0999999046325684D0)) (list (list 7.0D0 926.7630004882813D0 0.0018218564800918103D0 3.109999895095825D0)) (list (list 7.0D0 928.0790405273438D0 0.0017047097207978368D0 3.119999885559082D0)) (list (list 7.0D0 929.8325805664063D0 0.0015757596120238305D0 3.129999876022339D0)) (list (list 7.0D0 931.3504638671875D0 0.0015100619057193399D0 3.1399998664855957D0)) (list (list 7.0D0 932.0481567382813D0 0.0015310081653296948D0 3.1499998569488526D0)) (list (list 7.0D0 931.0446166992188D0 0.0015716722700744868D0 3.1599998474121094D0)) (list (list 7.0D0 929.7554321289063D0 0.0015719594666734338D0 3.169999837875366D0)) (list (list 7.0D0 929.3978271484375D0 0.0015284960390999914D0 3.179999828338623D0)) (list (list 7.0D0 929.7569580078125D0 0.0014862255193293095D0 3.18999981880188D0)) (list (list 7.0D0 930.2763061523438D0 0.001499452511779964D0 3.1999998092651367D0)) (list (list 7.0D0 930.0863037109375D0 0.001634255750104785D0 3.2100000381469727D0)) (list (list 7.0D0 929.5440063476563D0 0.001789962057955563D0 3.2200000286102295D0)) (list (list 7.0D0 929.5383911132813D0 0.0018146018264815212D0 3.2300000190734864D0)) (list (list 7.0D0 930.237548828125D0 0.0016781743615865708D0 3.240000009536743D0)) (list (list 7.0D0 931.2560424804688D0 0.0014017370995134116D0 3.25D0)) (list (list 7.0D0 930.7051391601563D0 0.0010890854755416513D0 3.259999990463257D0)) (list (list 7.0D0 928.3651123046875D0 9.431669604964554D-4 3.2699999809265137D0)) (list (list 7.0D0 926.9851684570313D0 9.283150429837406D-4 3.2799999713897705D0)) (list (list 7.0D0 927.2703857421875D0 0.0010022381320595742D0 3.2899999618530274D0)) (list (list 7.0D0 928.8817749023438D0 0.001125719049014151D0 3.299999952316284D0)) (list (list 7.0D0 929.1768798828125D0 0.0012911472003906966D0 3.309999942779541D0)) (list (list 7.0D0 928.9441528320313D0 0.0013992716558277607D0 3.319999933242798D0)) (list (list 7.0D0 929.200439453125D0 0.001396174542605877D0 3.3299999237060547D0)) (list (list 7.0D0 929.6514892578125D0 0.0012719937367364765D0 3.3399999141693116D0)) (list (list 7.0D0 929.5819091796875D0 0.001050412654876709D0 3.3499999046325684D0)) (list (list 7.0D0 927.4307250976563D0 8.247466175816953D-4 3.359999895095825D0)) (list (list 7.0D0 925.9515991210938D0 8.082206477411091D-4 3.369999885559082D0)) (list (list 7.0D0 924.9747924804688D0 9.61717392783612D-4 3.379999876022339D0)) (list (list 7.0D0 924.3703002929688D0 0.0011878606164827943D0 3.3899998664855957D0)) (list (list 7.0D0 924.391357421875D0 0.0013757182750850916D0 3.3999998569488526D0)) (list (list 7.0D0 926.6768188476563D0 0.0013995605986565352D0 3.4099998474121094D0)) (list (list 7.0D0 927.626953125D0 0.0013733110390603543D0 3.419999837875366D0)) (list (list 7.0D0 926.2566528320313D0 0.001337741268798709D0 3.429999828338623D0)) (list (list 7.0D0 918.7899169921875D0 0.0014062586706131697D0 3.43999981880188D0)) (list (list 7.0D0 905.6051025390625D0 0.0015884828753769398D0 3.4499998092651367D0)) (list (list 7.0D0 900.65576171875D0 0.001545506645925343D0 3.4600000381469727D0)) (list (list 7.0D0 897.4642944335938D0 0.0016169275622814894D0 3.4700000286102295D0)) (list (list 7.0D0 895.1534423828125D0 0.0017264195485040546D0 3.4800000190734864D0)) (list (list 7.0D0 894.2099609375D0 0.0017453542677685619D0 3.490000009536743D0)) (list (list 7.0D0 894.7203369140625D0 0.0016130961012095213D0 3.5D0)) (list (list 7.0D0 895.230712890625D0 0.001480837818235159D0 3.509999990463257D0)) (list (list 7.0D0 895.7892456054688D0 0.0013244157889857889D0 3.5199999809265137D0)) (list (list 7.0D0 895.1219482421875D0 0.0013918159529566765D0 3.5299999713897705D0)) (list (list 7.0D0 893.8819580078125D0 0.001628525322303176D0 3.5399999618530274D0)) (list (list 7.0D0 893.2464599609375D0 0.0018336869543418289D0 3.549999952316284D0)) (list (list 7.0D0 895.2990112304688D0 0.001479991478845477D0 3.559999942779541D0)) (list (list 7.0D0 897.3516235351563D0 0.0011262961197644473D0 3.569999933242798D0)) (list (list 7.0D0 900.2260131835938D0 7.672171923331916D-4 3.5799999237060547D0)) (list (list 7.0D0 910.4186401367188D0 6.821815622970462D-4 3.5899999141693116D0)) (list (list 7.0D0 927.1763916015625D0 9.52118425630033D-4 3.5999999046325684D0)) (list (list 7.0D0 927.2588500976563D0 0.001022391370497644D0 3.609999895095825D0)) (list (list 7.0D0 929.99560546875D0 0.0010487678227946163D0 3.619999885559082D0)) (list (list 7.0D0 932.1139526367188D0 0.0011021705577149988D0 3.629999876022339D0)) (list (list 7.0D0 932.7040405273438D0 0.0011713121784850955D0 3.6399998664855957D0)) (list (list 7.0D0 931.3250732421875D0 0.0012353507336229086D0 3.6499998569488526D0)) (list (list 7.0D0 927.7632446289063D0 0.0012737002689391375D0 3.6599998474121094D0)) (list (list 7.0D0 926.4043579101563D0 0.0012119561433792115D0 3.669999837875366D0)) (list (list 7.0D0 927.793212890625D0 0.0010729486821219325D0 3.679999828338623D0)) (list (list 7.0D0 930.8883056640625D0 0.0010012834100052715D0 3.68999981880188D0)) (list (list 7.0D0 934.2531127929688D0 0.0010932438308373094D0 3.6999998092651367D0)) (list (list 7.0D0 935.9551391601563D0 0.0012942937901243568D0 3.7099997997283936D0)) (list (list 7.0D0 935.2171020507813D0 0.0013839193852618337D0 3.7200000286102295D0)) (list (list 7.0D0 934.248046875D0 0.0014170227805152536D0 3.7300000190734864D0)) (list (list 7.0D0 933.208251953125D0 0.0014304642099887133D0 3.740000009536743D0)) (list (list 7.0D0 931.9784545898438D0 0.001448479830287397D0 3.75D0)) (list (list 7.0D0 930.253173828125D0 0.0014658088330179453D0 3.759999990463257D0)) (list (list 7.0D0 928.992919921875D0 0.0014166142791509629D0 3.7699999809265137D0)) (list (list 7.0D0 928.348876953125D0 0.001362450304441154D0 3.7799999713897705D0)) (list (list 7.0D0 928.4194946289063D0 0.0013384396443143487D0 3.7899999618530274D0)) (list (list 7.0D0 929.4102172851563D0 0.0013517586048692465D0 3.799999952316284D0)) (list (list 7.0D0 931.97314453125D0 0.0013482877984642983D0 3.809999942779541D0)) (list (list 7.0D0 933.7532348632813D0 0.0012563593918457628D0 3.819999933242798D0)) (list (list 7.0D0 933.4545288085938D0 0.0010887965327128768D0 3.8299999237060547D0)) (list (list 7.0D0 931.736572265625D0 9.282359387725592D-4 3.8399999141693116D0)) (list (list 7.0D0 929.7752075195313D0 8.460591197945178D-4 3.8499999046325684D0)) (list (list 7.0D0 929.507080078125D0 8.769956766627729D-4 3.859999895095825D0)) (list (list 7.0D0 930.1475830078125D0 0.0010360087035223842D0 3.869999885559082D0)) (list (list 7.0D0 930.82958984375D0 0.0012652083532884717D0 3.879999876022339D0)) (list (list 7.0D0 931.4284057617188D0 0.001485027140006423D0 3.8899998664855957D0)) (list (list 7.0D0 931.6173706054688D0 0.0016156480414792896D0 3.8999998569488526D0)) (list (list 7.0D0 930.3247680664063D0 0.0015697118360549212D0 3.9099998474121094D0)) (list (list 7.0D0 928.6245727539063D0 0.0014564855955541134D0 3.919999837875366D0)) (list (list 7.0D0 927.6771240234375D0 0.001393676269799471D0 3.929999828338623D0)) (list (list 7.0D0 927.2920532226563D0 0.0013964419486001134D0 3.93999981880188D0)) (list (list 7.0D0 927.1986083984375D0 0.001446539186872542D0 3.9499998092651367D0)) (list (list 7.0D0 927.2819213867188D0 0.0014744405634701252D0 3.9599997997283936D0)) (list (list 7.0D0 928.5465698242188D0 0.0014009209116920829D0 3.9700000286102295D0)) (list (list 7.0D0 929.6348876953125D0 0.0013105787802487612D0 3.9800000190734864D0)) (list (list 7.0D0 930.2767944335938D0 0.0012310732854530216D0 3.990000009536743D0)) (list (list 7.0D0 930.38330078125D0 0.001159833511337638D0 4.0D0)) (list (list 7.0D0 929.9910278320313D0 0.0010356546845287085D0 4.009999752044678D0)) (list (list 7.0D0 926.2213745117188D0 8.54677869938314D-4 4.019999980926514D0)) (list (list 7.0D0 924.1622924804688D0 7.623012061230838D-4 4.029999732971191D0)) (list (list 7.0D0 924.513916015625D0 7.504064706154168D-4 4.039999961853027D0)) (list (list 7.0D0 927.4036865234375D0 7.967508281581104D-4 4.049999713897705D0)) (list (list 7.0D0 932.8472900390625D0 8.847041171975434D-4 4.059999942779541D0)) (list (list 7.0D0 931.424072265625D0 8.002276881597936D-4 4.069999694824219D0)) (list (list 7.0D0 928.4631958007813D0 6.824905867688358D-4 4.079999923706055D0)) (list (list 7.0D0 921.7819213867188D0 6.321679102256894D-4 4.089999675750732D0)) (list (list 7.0D0 912.7691040039063D0 6.815472152084112D-4 4.099999904632568D0)) (list (list 7.0D0 911.921630859375D0 7.294652168639004D-4 4.110000133514404D0)) (list (list 7.0D0 913.140869140625D0 8.439088123850524D-4 4.119999885559082D0)) (list (list 7.0D0 915.159423828125D0 9.602876962162554D-4 4.130000114440918D0)) (list (list 7.0D0 918.8842163085938D0 0.0010363170877099038D0 4.139999866485596D0)) (list (list 7.0D0 923.3421630859375D0 0.0010451186681166292D0 4.150000095367432D0)) (list (list 7.0D0 923.1690673828125D0 9.810281917452813D-4 4.159999847412109D0)) (list (list 7.0D0 918.19580078125D0 9.750572498887777D-4 4.170000076293945D0)) (list (list 7.0D0 909.3793334960938D0 0.0012501301243901253D0 4.179999828338623D0)) (list (list 7.0D0 895.5712890625D0 0.0014444490661844612D0 4.190000057220459D0)) (list (list 7.0D0 880.889404296875D0 0.0011778982589021326D0 4.199999809265137D0)) (list (list 7.0D0 880.889404296875D0 6.560674228239805D-5 4.210000038146973D0)) (list (list 8.0D0 534.0056762695313D0 0.0012339423410594464D0 0.0D0)) (list (list 8.0D0 534.8264770507813D0 0.0022190846502780915D0 0.009999999776482582D0)) (list (list 8.0D0 535.2871704101563D0 0.0035507504362612963D0 0.019999999552965164D0)) (list (list 8.0D0 535.3786010742188D0 0.005274234805256128D0 0.029999999329447747D0)) (list (list 8.0D0 535.1124267578125D0 0.007401603274047375D0 0.03999999910593033D0)) (list (list 8.0D0 534.521728515625D0 0.00991205032914877D0 0.04999999701976776D0)) (list (list 8.0D0 533.9122314453125D0 0.012916652485728264D0 0.05999999865889549D0)) (list (list 8.0D0 533.5265502929688D0 0.016598260030150414D0 0.07000000029802323D0)) (list (list 8.0D0 533.3175659179688D0 0.021472061052918434D0 0.07999999821186066D0)) (list (list 8.0D0 533.1471557617188D0 0.02810271829366684D0 0.08999999612569809D0)) (list (list 8.0D0 532.7877197265625D0 0.03709982708096504D0 0.09999999403953552D0)) (list (list 8.0D0 531.7703857421875D0 0.04967885836958885D0 0.10999999940395355D0)) (list (list 8.0D0 530.4085693359375D0 0.0643511563539505D0 0.11999999731779099D0)) (list (list 8.0D0 529.0493774414063D0 0.07996390014886856D0 0.12999999523162842D0)) (list (list 8.0D0 527.9470825195313D0 0.09515324980020523D0 0.14000000059604645D0)) (list (list 8.0D0 527.2683715820313D0 0.10834398120641709D0 0.14999999105930328D0)) (list (list 8.0D0 527.002197265625D0 0.1175299659371376D0 0.1599999964237213D0)) (list (list 8.0D0 526.8908081054688D0 0.12426801025867462D0 0.17000000178813934D0)) (list (list 8.0D0 526.8921508789063D0 0.12914259731769562D0 0.17999999225139618D0)) (list (list 8.0D0 526.977294921875D0 0.1325688511133194D0 0.1899999976158142D0)) (list (list 8.0D0 527.1276245117188D0 0.13482803106307984D0 0.19999998807907105D0)) (list (list 8.0D0 527.3312377929688D0 0.13581866025924683D0 0.20999999344348908D0)) (list (list 8.0D0 527.5791625976563D0 0.13605134189128876D0 0.2199999988079071D0)) (list (list 8.0D0 527.850341796875D0 0.13562646508216858D0 0.22999998927116394D0)) (list (list 8.0D0 528.0960693359375D0 0.13455675542354584D0 0.23999999463558197D0)) (list (list 8.0D0 528.241455078125D0 0.1327827423810959D0 0.25D0)) (list (list 8.0D0 528.1087646484375D0 0.12985460460186005D0 0.25999999046325684D0)) (list (list 8.0D0 527.7130737304688D0 0.1260751634836197D0 0.26999998092651367D0)) (list (list 8.0D0 527.0589599609375D0 0.12165674567222595D0 0.2800000011920929D0)) (list (list 8.0D0 526.1683349609375D0 0.11685661971569061D0 0.28999999165534973D0)) (list (list 8.0D0 525.0841064453125D0 0.11198440939188004D0 0.29999998211860657D0)) (list (list 8.0D0 523.9473266601563D0 0.10736200213432312D0 0.3100000023841858D0)) (list (list 8.0D0 523.0127563476563D0 0.10310254245996475D0 0.3199999928474426D0)) (list (list 8.0D0 522.3319702148438D0 0.09937769919633866D0 0.32999998331069947D0)) (list (list 8.0D0 521.8922729492188D0 0.09639138728380203D0 0.3400000035762787D0)) (list (list 8.0D0 521.6210327148438D0 0.09436395019292832D0 0.3499999940395355D0)) (list (list 8.0D0 521.396728515625D0 0.09339261800050736D0 0.35999998450279236D0)) (list (list 8.0D0 521.1614990234375D0 0.09285369515419007D0 0.3700000047683716D0)) (list (list 8.0D0 520.96435546875D0 0.09273664653301239D0 0.3799999952316284D0)) (list (list 8.0D0 520.8577880859375D0 0.09317367523908615D0 0.38999998569488526D0)) (list (list 8.0D0 520.8971557617188D0 0.09440849721431732D0 0.3999999761581421D0)) (list (list 8.0D0 521.1461791992188D0 0.09688888490200043D0 0.4099999964237213D0)) (list (list 8.0D0 521.4838256835938D0 0.09983132034540177D0 0.41999998688697815D0)) (list (list 8.0D0 521.800048828125D0 0.10262064635753632D0 0.429999977350235D0)) (list (list 8.0D0 522.0010375976563D0 0.10480011999607086D0 0.4399999976158142D0)) (list (list 8.0D0 522.006103515625D0 0.10604280978441239D0 0.44999998807907105D0)) (list (list 8.0D0 521.8005981445313D0 0.10640408098697663D0 0.4599999785423279D0)) (list (list 8.0D0 521.6212158203125D0 0.10676457732915878D0 0.4699999988079071D0)) (list (list 8.0D0 521.5913696289063D0 0.10743153840303421D0 0.47999998927116394D0)) (list (list 8.0D0 521.765869140625D0 0.10856366157531738D0 0.4899999797344208D0)) (list (list 8.0D0 522.1411743164063D0 0.11019403487443924D0 0.5D0)) (list (list 8.0D0 522.6065063476563D0 0.11210887879133225D0 0.5099999904632568D0)) (list (list 8.0D0 523.0234985351563D0 0.11377528309822083D0 0.5199999809265137D0)) (list (list 8.0D0 523.349365234375D0 0.11502143740653992D0 0.5299999713897705D0)) (list (list 8.0D0 523.5437622070313D0 0.11574476212263107D0 0.5399999618530273D0)) (list (list 8.0D0 523.5704956054688D0 0.11589910089969635D0 0.550000011920929D0)) (list (list 8.0D0 523.3850708007813D0 0.11521358788013458D0 0.5600000023841858D0)) (list (list 8.0D0 523.09765625D0 0.11368327587842941D0 0.5699999928474426D0)) (list (list 8.0D0 522.7200317382813D0 0.11121737957000733D0 0.5799999833106995D0)) (list (list 8.0D0 522.2391357421875D0 0.10783901810646057D0 0.5899999737739563D0)) (list (list 8.0D0 521.6282348632813D0 0.10369876772165299D0 0.5999999642372131D0)) (list (list 8.0D0 520.9156494140625D0 0.09942232072353363D0 0.6100000143051148D0)) (list (list 8.0D0 520.3203125D0 0.095856674015522D0 0.6200000047683716D0)) (list (list 8.0D0 519.9359130859375D0 0.0932583212852478D0 0.6299999952316284D0)) (list (list 8.0D0 519.7792358398438D0 0.09179267287254334D0 0.6399999856948853D0)) (list (list 8.0D0 519.8031616210938D0 0.09152953326702118D0 0.6499999761581421D0)) (list (list 8.0D0 519.8756713867188D0 0.0925113782286644D0 0.6599999666213989D0)) (list (list 8.0D0 519.90673828125D0 0.09410956501960755D0 0.6699999570846558D0)) (list (list 8.0D0 519.91748046875D0 0.0961449071764946D0 0.6800000071525574D0)) (list (list 8.0D0 519.9420166015625D0 0.09849443286657334D0 0.6899999976158142D0)) (list (list 8.0D0 520.0253295898438D0 0.1010509803891182D0 0.699999988079071D0)) (list (list 8.0D0 520.218017578125D0 0.10358881950378418D0 0.7099999785423279D0)) (list (list 8.0D0 520.4688110351563D0 0.10584166646003723D0 0.7199999690055847D0)) (list (list 8.0D0 520.7548828125D0 0.10772734880447388D0 0.7299999594688416D0)) (list (list 8.0D0 521.0535278320313D0 0.10924865305423737D0 0.7400000095367432D0)) (list (list 8.0D0 521.3375244140625D0 0.11048232018947602D0 0.75D0)) (list (list 8.0D0 521.504638671875D0 0.11159206926822663D0 0.7599999904632568D0)) (list (list 8.0D0 521.5425415039063D0 0.11276911199092865D0 0.7699999809265137D0)) (list (list 8.0D0 521.5317993164063D0 0.1141090840101242D0 0.7799999713897705D0)) (list (list 8.0D0 521.5496826171875D0 0.11570925265550614D0 0.7899999618530273D0)) (list (list 8.0D0 521.6723022460938D0 0.1176721453666687D0 0.7999999523162842D0)) (list (list 8.0D0 521.9237670898438D0 0.12032318115234375D0 0.8100000023841858D0)) (list (list 8.0D0 522.2132568359375D0 0.12356501072645188D0 0.8199999928474426D0)) (list (list 8.0D0 522.5359497070313D0 0.12717601656913757D0 0.8299999833106995D0)) (list (list 8.0D0 522.89404296875D0 0.13090579211711884D0 0.8399999737739563D0)) (list (list 8.0D0 523.2909545898438D0 0.1344568282365799D0 0.8499999642372131D0)) (list (list 8.0D0 523.6879272460938D0 0.13732761144638062D0 0.85999995470047D0)) (list (list 8.0D0 524.0333862304688D0 0.1394900530576706D0 0.8700000047683716D0)) (list (list 8.0D0 524.3353881835938D0 0.14110760390758515D0 0.8799999952316284D0)) (list (list 8.0D0 524.6101684570313D0 0.14239706099033356D0 0.8899999856948853D0)) (list (list 8.0D0 524.8773193359375D0 0.143631711602211D0 0.8999999761581421D0)) (list (list 8.0D0 525.0798950195313D0 0.14500366151332855D0 0.9099999666213989D0)) (list (list 8.0D0 525.1674194335938D0 0.1461401879787445D0 0.9199999570846558D0)) (list (list 8.0D0 525.1868286132813D0 0.14685632288455963D0 0.9300000071525574D0)) (list (list 8.0D0 525.1773071289063D0 0.14715713262557984D0 0.9399999976158142D0)) (list (list 8.0D0 525.173828125D0 0.1471869796514511D0 0.949999988079071D0)) (list (list 8.0D0 525.13720703125D0 0.14723967015743256D0 0.9599999785423279D0)) (list (list 8.0D0 525.0675048828125D0 0.14720043540000916D0 0.9699999690055847D0)) (list (list 8.0D0 525.0021362304688D0 0.1468576043844223D0 0.9799999594688416D0)) (list (list 8.0D0 524.9501342773438D0 0.14614950120449066D0 0.9899999499320984D0)) (list (list 8.0D0 524.9033813476563D0 0.14512701332569122D0 1.0D0)) (list (list 8.0D0 524.830078125D0 0.1440834254026413D0 1.0099999904632569D0)) (list (list 8.0D0 524.767822265625D0 0.14302927255630493D0 1.0199999809265137D0)) (list (list 8.0D0 524.7096557617188D0 0.141701802611351D0 1.0299999713897705D0)) (list (list 8.0D0 524.6151123046875D0 0.1399216204881668D0 1.0399999618530274D0)) (list (list 8.0D0 524.4235229492188D0 0.13758604228496552D0 1.0499999523162842D0)) (list (list 8.0D0 524.0634155273438D0 0.13494130969047546D0 1.059999942779541D0)) (list (list 8.0D0 523.6712646484375D0 0.13266165554523468D0 1.0699999332427979D0)) (list (list 8.0D0 523.3203735351563D0 0.13091634213924408D0 1.0799999237060547D0)) (list (list 8.0D0 523.0355834960938D0 0.12968377768993378D0 1.090000033378601D0)) (list (list 8.0D0 522.8125610351563D0 0.12880873680114746D0 1.100000023841858D0)) (list (list 8.0D0 522.6300659179688D0 0.12808901071548462D0 1.1100000143051148D0)) (list (list 8.0D0 522.5045776367188D0 0.12741754949092865D0 1.1200000047683716D0)) (list (list 8.0D0 522.443359375D0 0.12688371539115906D0 1.1299999952316285D0)) (list (list 8.0D0 522.434326171875D0 0.1266268640756607D0 1.1399999856948853D0)) (list (list 8.0D0 522.4522094726563D0 0.12682271003723145D0 1.149999976158142D0)) (list (list 8.0D0 522.47802734375D0 0.12789514660835266D0 1.159999966621399D0)) (list (list 8.0D0 522.5504150390625D0 0.12969233095645905D0 1.1699999570846558D0)) (list (list 8.0D0 522.683349609375D0 0.13188768923282623D0 1.1799999475479126D0)) (list (list 8.0D0 522.8634033203125D0 0.13421578705310822D0 1.1899999380111695D0)) (list (list 8.0D0 523.0577392578125D0 0.13642632961273193D0 1.1999999284744263D0)) (list (list 8.0D0 523.2039794921875D0 0.13838234543800354D0 1.209999918937683D0)) (list (list 8.0D0 523.3317260742188D0 0.1402256190776825D0 1.2200000286102295D0)) (list (list 8.0D0 523.492431640625D0 0.14193077385425568D0 1.2300000190734864D0)) (list (list 8.0D0 523.703857421875D0 0.1434040069580078D0 1.2400000095367432D0)) (list (list 8.0D0 523.9600830078125D0 0.14451821148395538D0 1.25D0)) (list (list 8.0D0 524.1796264648438D0 0.14506329596042633D0 1.2599999904632569D0)) (list (list 8.0D0 524.3302612304688D0 0.1452895849943161D0 1.2699999809265137D0)) (list (list 8.0D0 524.4586181640625D0 0.14536549150943756D0 1.2799999713897705D0)) (list (list 8.0D0 524.5863037109375D0 0.14530715346336365D0 1.2899999618530274D0)) (list (list 8.0D0 524.718505859375D0 0.14504073560237885D0 1.2999999523162842D0)) (list (list 8.0D0 524.7791748046875D0 0.14415036141872406D0 1.309999942779541D0)) (list (list 8.0D0 524.7173461914063D0 0.14257243275642395D0 1.3199999332427979D0)) (list (list 8.0D0 524.5381469726563D0 0.1404561698436737D0 1.3299999237060547D0)) (list (list 8.0D0 524.2428588867188D0 0.1379084587097168D0 1.3399999141693116D0)) (list (list 8.0D0 523.8367919921875D0 0.13504591584205628D0 1.350000023841858D0)) (list (list 8.0D0 523.3184204101563D0 0.13197194039821625D0 1.3600000143051148D0)) (list (list 8.0D0 522.772216796875D0 0.12896810472011566D0 1.3700000047683716D0)) (list (list 8.0D0 522.2723999023438D0 0.12629921734333038D0 1.3799999952316285D0)) (list (list 8.0D0 521.8643188476563D0 0.12420925498008728D0 1.3899999856948853D0)) (list (list 8.0D0 521.5765380859375D0 0.1229148730635643D0 1.399999976158142D0)) (list (list 8.0D0 521.4222412109375D0 0.12263727933168411D0 1.409999966621399D0)) (list (list 8.0D0 521.341064453125D0 0.1227179765701294D0 1.4199999570846558D0)) (list (list 8.0D0 521.2918090820313D0 0.12265978753566742D0 1.4299999475479126D0)) (list (list 8.0D0 521.2368774414063D0 0.12220330536365509D0 1.4399999380111695D0)) (list (list 8.0D0 521.1378173828125D0 0.12122461199760437D0 1.4499999284744263D0)) (list (list 8.0D0 520.950927734375D0 0.11986731737852097D0 1.459999918937683D0)) (list (list 8.0D0 520.7266235351563D0 0.11864795535802841D0 1.46999990940094D0)) (list (list 8.0D0 520.5098876953125D0 0.11776172369718552D0 1.4800000190734864D0)) (list (list 8.0D0 520.33056640625D0 0.11732018738985062D0 1.4900000095367432D0)) (list (list 8.0D0 520.2128295898438D0 0.11739147454500199D0 1.5D0)) (list (list 8.0D0 520.2001953125D0 0.1181892678141594D0 1.5099999904632569D0)) (list (list 8.0D0 520.2769165039063D0 0.11973131448030472D0 1.5199999809265137D0)) (list (list 8.0D0 520.4159545898438D0 0.12197694927453995D0 1.5299999713897705D0)) (list (list 8.0D0 520.6132202148438D0 0.12488137185573578D0 1.5399999618530274D0)) (list (list 8.0D0 520.873291015625D0 0.12836520373821259D0 1.5499999523162842D0)) (list (list 8.0D0 521.2293090820313D0 0.13244757056236267D0 1.559999942779541D0)) (list (list 8.0D0 521.620361328125D0 0.13685907423496246D0 1.5699999332427979D0)) (list (list 8.0D0 521.988525390625D0 0.14124584197998047D0 1.5799999237060547D0)) (list (list 8.0D0 522.3074340820313D0 0.14528435468673706D0 1.5899999141693116D0)) (list (list 8.0D0 522.5672607421875D0 0.14866529405117035D0 1.5999999046325684D0)) (list (list 8.0D0 522.7802124023438D0 0.15106527507305145D0 1.6100000143051148D0)) (list (list 8.0D0 522.9757080078125D0 0.15282230079174042D0 1.6200000047683716D0)) (list (list 8.0D0 523.1505737304688D0 0.15406928956508637D0 1.6299999952316285D0)) (list (list 8.0D0 523.29931640625D0 0.15472018718719483D0 1.6399999856948853D0)) (list (list 8.0D0 523.4172973632813D0 0.1546018272638321D0 1.649999976158142D0)) (list (list 8.0D0 523.5023193359375D0 0.15321025252342224D0 1.659999966621399D0)) (list (list 8.0D0 523.5289916992188D0 0.1508525311946869D0 1.6699999570846558D0)) (list (list 8.0D0 523.4623413085938D0 0.148079052567482D0 1.6799999475479126D0)) (list (list 8.0D0 523.2882080078125D0 0.14524447917938233D0 1.6899999380111695D0)) (list (list 8.0D0 523.010986328125D0 0.14262662827968598D0 1.6999999284744263D0)) (list (list 8.0D0 522.680908203125D0 0.1402689814567566D0 1.709999918937683D0)) (list (list 8.0D0 522.3565673828125D0 0.13763198256492615D0 1.71999990940094D0)) (list (list 8.0D0 521.9929809570313D0 0.13426733016967774D0 1.7300000190734864D0)) (list (list 8.0D0 521.5247802734375D0 0.12988822162151337D0 1.7400000095367432D0)) (list (list 8.0D0 520.8820190429688D0 0.1243554949760437D0 1.75D0)) (list (list 8.0D0 519.9911499023438D0 0.11790025234222412D0 1.7599999904632569D0)) (list (list 8.0D0 518.9961547851563D0 0.1113538146018982D0 1.7699999809265137D0)) (list (list 8.0D0 518.0226440429688D0 0.10488622635602951D0 1.7799999713897705D0)) (list (list 8.0D0 517.1262817382813D0 0.0984734520316124D0 1.7899999618530274D0)) (list (list 8.0D0 516.3328857421875D0 0.09205608814954758D0 1.7999999523162842D0)) (list (list 8.0D0 515.64892578125D0 0.08594341576099396D0 1.809999942779541D0)) (list (list 8.0D0 515.0819091796875D0 0.08079388737678528D0 1.8199999332427979D0)) (list (list 8.0D0 514.6848754882813D0 0.07658663392066956D0 1.8299999237060547D0)) (list (list 8.0D0 514.4967651367188D0 0.07318253815174103D0 1.8399999141693116D0)) (list (list 8.0D0 514.5300903320313D0 0.07035640627145767D0 1.8499999046325684D0)) (list (list 8.0D0 514.7095947265625D0 0.06799747794866562D0 1.8600000143051148D0)) (list (list 8.0D0 514.83154296875D0 0.06617225706577301D0 1.8700000047683716D0)) (list (list 8.0D0 514.9031982421875D0 0.06498076766729355D0 1.8799999952316285D0)) (list (list 8.0D0 514.9949340820313D0 0.06454679369926453D0 1.8899999856948853D0)) (list (list 8.0D0 515.1968383789063D0 0.06500580161809921D0 1.899999976158142D0)) (list (list 8.0D0 515.563720703125D0 0.06689227372407913D0 1.909999966621399D0)) (list (list 8.0D0 515.903564453125D0 0.07051607966423035D0 1.9199999570846558D0)) (list (list 8.0D0 516.1492309570313D0 0.07564422488212586D0 1.9299999475479126D0)) (list (list 8.0D0 516.3265991210938D0 0.08191625028848648D0 1.9399999380111695D0)) (list (list 8.0D0 516.5062866210938D0 0.08877430856227875D0 1.9499999284744263D0)) (list (list 8.0D0 516.8260498046875D0 0.09510831534862519D0 1.959999918937683D0)) (list (list 8.0D0 517.2438354492188D0 0.10009527206420899D0 1.96999990940094D0)) (list (list 8.0D0 517.6519775390625D0 0.10382185131311417D0 1.9799998998641968D0)) (list (list 8.0D0 518.0005493164063D0 0.1064559742808342D0 1.9900000095367432D0)) (list (list 8.0D0 518.26611328125D0 0.10827746987342835D0 2.0D0)) (list (list 8.0D0 518.4738159179688D0 0.10963508486747742D0 2.009999990463257D0)) (list (list 8.0D0 518.6741333007813D0 0.1108795702457428D0 2.0199999809265137D0)) (list (list 8.0D0 518.867431640625D0 0.11213979125022888D0 2.0299999713897705D0)) (list (list 8.0D0 519.0397338867188D0 0.11348599940538407D0 2.0399999618530274D0)) (list (list 8.0D0 519.17138671875D0 0.11496718227863312D0 2.049999952316284D0)) (list (list 8.0D0 519.2251586914063D0 0.11663290858268738D0 2.059999942779541D0)) (list (list 8.0D0 519.2352294921875D0 0.1183844655752182D0 2.069999933242798D0)) (list (list 8.0D0 519.2612915039063D0 0.12003915756940842D0 2.0799999237060547D0)) (list (list 8.0D0 519.3292846679688D0 0.12135908752679825D0 2.0899999141693116D0)) (list (list 8.0D0 519.4447021484375D0 0.1220625564455986D0 2.0999999046325684D0)) (list (list 8.0D0 519.5507202148438D0 0.12156455218791962D0 2.109999895095825D0)) (list (list 8.0D0 519.5394897460938D0 0.11980225145816803D0 2.119999885559082D0)) (list (list 8.0D0 519.3966064453125D0 0.11719969660043717D0 2.129999876022339D0)) (list (list 8.0D0 519.1359252929688D0 0.11406759917736054D0 2.1399998664855957D0)) (list (list 8.0D0 518.7884521484375D0 0.11072161048650742D0 2.1499998569488526D0)) (list (list 8.0D0 518.3890991210938D0 0.1074315756559372D0 2.1599998474121094D0)) (list (list 8.0D0 517.96240234375D0 0.10445625334978104D0 2.169999837875366D0)) (list (list 8.0D0 517.5348510742188D0 0.10192560404539108D0 2.180000066757202D0)) (list (list 8.0D0 517.1460571289063D0 0.09987190365791321D0 2.190000057220459D0)) (list (list 8.0D0 516.84130859375D0 0.09823664277791977D0 2.200000047683716D0)) (list (list 8.0D0 516.6911010742188D0 0.09673617780208588D0 2.2100000381469727D0)) (list (list 8.0D0 516.63720703125D0 0.09503279626369477D0 2.2200000286102295D0)) (list (list 8.0D0 516.6011352539063D0 0.09317190200090409D0 2.2300000190734864D0)) (list (list 8.0D0 516.569091796875D0 0.09125741571187973D0 2.240000009536743D0)) (list (list 8.0D0 516.5532836914063D0 0.0894257053732872D0 2.25D0)) (list (list 8.0D0 516.6234741210938D0 0.08787937462329865D0 2.259999990463257D0)) (list (list 8.0D0 516.7461547851563D0 0.08668716251850128D0 2.2699999809265137D0)) (list (list 8.0D0 516.8397827148438D0 0.08577511459589005D0 2.2799999713897705D0)) (list (list 8.0D0 516.8721313476563D0 0.08512633293867111D0 2.2899999618530274D0)) (list (list 8.0D0 516.8355712890625D0 0.08475395292043686D0 2.299999952316284D0)) (list (list 8.0D0 516.777099609375D0 0.0848848819732666D0 2.309999942779541D0)) (list (list 8.0D0 516.7984619140625D0 0.08575437217950821D0 2.319999933242798D0)) (list (list 8.0D0 516.9181518554688D0 0.08728744834661484D0 2.3299999237060547D0)) (list (list 8.0D0 517.1130981445313D0 0.08933981508016586D0 2.3399999141693116D0)) (list (list 8.0D0 517.3383178710938D0 0.09167326986789704D0 2.3499999046325684D0)) (list (list 8.0D0 517.5133666992188D0 0.09380718320608139D0 2.359999895095825D0)) (list (list 8.0D0 517.6222534179688D0 0.09528382122516632D0 2.369999885559082D0)) (list (list 8.0D0 517.70703125D0 0.0960666686296463D0 2.379999876022339D0)) (list (list 8.0D0 517.781005859375D0 0.09613179415464401D0 2.3899998664855957D0)) (list (list 8.0D0 517.8394775390625D0 0.09549587965011597D0 2.3999998569488526D0)) (list (list 8.0D0 517.8057861328125D0 0.09411460906267166D0 2.4099998474121094D0)) (list (list 8.0D0 517.5857543945313D0 0.09210727363824845D0 2.419999837875366D0)) (list (list 8.0D0 517.2301635742188D0 0.08958792686462403D0 2.429999828338623D0)) (list (list 8.0D0 516.8179931640625D0 0.08661103248596192D0 2.440000057220459D0)) (list (list 8.0D0 516.4412841796875D0 0.0832924172282219D0 2.450000047683716D0)) (list (list 8.0D0 516.1962280273438D0 0.08001434057950974D0 2.4600000381469727D0)) (list (list 8.0D0 516.0377807617188D0 0.07757654041051865D0 2.4700000286102295D0)) (list (list 8.0D0 515.9324340820313D0 0.07616012543439865D0 2.4800000190734864D0)) (list (list 8.0D0 515.8858642578125D0 0.07576421648263931D0 2.490000009536743D0)) (list (list 8.0D0 515.9107666015625D0 0.07626885920763016D0 2.5D0)) (list (list 8.0D0 516.0304565429688D0 0.07751145213842392D0 2.509999990463257D0)) (list (list 8.0D0 516.2188720703125D0 0.07905550301074982D0 2.5199999809265137D0)) (list (list 8.0D0 516.4334716796875D0 0.08049566298723221D0 2.5299999713897705D0)) (list (list 8.0D0 516.65380859375D0 0.08162771165370941D0 2.5399999618530274D0)) (list (list 8.0D0 516.8720703125D0 0.08237756788730622D0 2.549999952316284D0)) (list (list 8.0D0 517.1260986328125D0 0.0830397680401802D0 2.559999942779541D0)) (list (list 8.0D0 517.4681396484375D0 0.08459541946649552D0 2.569999933242798D0)) (list (list 8.0D0 517.8486328125D0 0.08733169734477997D0 2.5799999237060547D0)) (list (list 8.0D0 518.2217407226563D0 0.09112327545881272D0 2.5899999141693116D0)) (list (list 8.0D0 518.5473022460938D0 0.09559597820043564D0 2.5999999046325684D0)) (list (list 8.0D0 518.810546875D0 0.0999143198132515D0 2.609999895095825D0)) (list (list 8.0D0 519.0734252929688D0 0.10346278548240662D0 2.619999885559082D0)) (list (list 8.0D0 519.3380737304688D0 0.10648053139448166D0 2.629999876022339D0)) (list (list 8.0D0 519.592041015625D0 0.1091715395450592D0 2.6399998664855957D0)) (list (list 8.0D0 519.8257446289063D0 0.11171835660934448D0 2.6499998569488526D0)) (list (list 8.0D0 520.0576171875D0 0.11410694569349289D0 2.6599998474121094D0)) (list (list 8.0D0 520.3297119140625D0 0.11598169803619385D0 2.669999837875366D0)) (list (list 8.0D0 520.6072998046875D0 0.11726285517215729D0 2.679999828338623D0)) (list (list 8.0D0 520.8521118164063D0 0.11798753589391709D0 2.690000057220459D0)) (list (list 8.0D0 521.026611328125D0 0.11826763302087784D0 2.700000047683716D0)) (list (list 8.0D0 521.0901489257813D0 0.11828098446130753D0 2.7100000381469727D0)) (list (list 8.0D0 521.0517578125D0 0.11830806732177735D0 2.7200000286102295D0)) (list (list 8.0D0 520.9599609375D0 0.11851512640714646D0 2.7300000190734864D0)) (list (list 8.0D0 520.8600463867188D0 0.11895104497671128D0 2.740000009536743D0)) (list (list 8.0D0 520.797119140625D0 0.119583860039711D0 2.75D0)) (list (list 8.0D0 520.8153076171875D0 0.12017287313938141D0 2.759999990463257D0)) (list (list 8.0D0 520.8463745117188D0 0.12029428780078888D0 2.7699999809265137D0)) (list (list 8.0D0 520.8235473632813D0 0.12003010511398316D0 2.7799999713897705D0)) (list (list 8.0D0 520.7477416992188D0 0.11961719393730164D0 2.7899999618530274D0)) (list (list 8.0D0 520.6480102539063D0 0.11936432123184204D0 2.799999952316284D0)) (list (list 8.0D0 520.6072387695313D0 0.11973399668931961D0 2.809999942779541D0)) (list (list 8.0D0 520.6641235351563D0 0.12082941830158234D0 2.819999933242798D0)) (list (list 8.0D0 520.7788696289063D0 0.12236715853214264D0 2.8299999237060547D0)) (list (list 8.0D0 520.9365844726563D0 0.12414044141769409D0 2.8399999141693116D0)) (list (list 8.0D0 521.1275024414063D0 0.12592385709285736D0 2.8499999046325684D0)) (list (list 8.0D0 521.3570556640625D0 0.12740400433540344D0 2.859999895095825D0)) (list (list 8.0D0 521.594970703125D0 0.12848886847496033D0 2.869999885559082D0)) (list (list 8.0D0 521.804443359375D0 0.12931948900222778D0 2.879999876022339D0)) (list (list 8.0D0 521.9734497070313D0 0.12992067635059357D0 2.8899998664855957D0)) (list (list 8.0D0 522.0965576171875D0 0.13027027249336243D0 2.8999998569488526D0)) (list (list 8.0D0 522.1640625D0 0.13016082346439362D0 2.9099998474121094D0)) (list (list 8.0D0 522.1265258789063D0 0.1293591558933258D0 2.919999837875366D0)) (list (list 8.0D0 521.9873657226563D0 0.1280321329832077D0 2.929999828338623D0)) (list (list 8.0D0 521.7891235351563D0 0.12639276683330536D0 2.93999981880188D0)) (list (list 8.0D0 521.590576171875D0 0.12471042573451996D0 2.950000047683716D0)) (list (list 8.0D0 521.4766235351563D0 0.12338600307703018D0 2.9600000381469727D0)) (list (list 8.0D0 521.4172973632813D0 0.12276767194271088D0 2.9700000286102295D0)) (list (list 8.0D0 521.3502807617188D0 0.12278587371110916D0 2.9800000190734864D0)) (list (list 8.0D0 521.2759399414063D0 0.12335393577814102D0 2.990000009536743D0)) (list (list 8.0D0 521.2119750976563D0 0.12433341890573502D0 3.0D0)) (list (list 8.0D0 521.203125D0 0.12552691996097565D0 3.009999990463257D0)) (list (list 8.0D0 521.2404174804688D0 0.12663745880126953D0 3.0199999809265137D0)) (list (list 8.0D0 521.3043212890625D0 0.12748102843761444D0 3.0299999713897705D0)) (list (list 8.0D0 521.39208984375D0 0.12799310684204102D0 3.0399999618530274D0)) (list (list 8.0D0 521.4939575195313D0 0.12820692360401154D0 3.049999952316284D0)) (list (list 8.0D0 521.5653076171875D0 0.1283876895904541D0 3.059999942779541D0)) (list (list 8.0D0 521.5518188476563D0 0.12903819978237152D0 3.069999933242798D0)) (list (list 8.0D0 521.52490234375D0 0.13011682033538818D0 3.0799999237060547D0)) (list (list 8.0D0 521.5433959960938D0 0.13140469789505005D0 3.0899999141693116D0)) (list (list 8.0D0 521.6482543945313D0 0.13261932134628296D0 3.0999999046325684D0)) (list (list 8.0D0 521.8313598632813D0 0.13337670266628265D0 3.109999895095825D0)) (list (list 8.0D0 521.9962158203125D0 0.13356050848960877D0 3.119999885559082D0)) (list (list 8.0D0 522.1124877929688D0 0.13340607285499573D0 3.129999876022339D0)) (list (list 8.0D0 522.1810913085938D0 0.133040651679039D0 3.1399998664855957D0)) (list (list 8.0D0 522.2132568359375D0 0.13257473707199097D0 3.1499998569488526D0)) (list (list 8.0D0 522.2286376953125D0 0.13207541406154633D0 3.1599998474121094D0)) (list (list 8.0D0 522.232666015625D0 0.1316111832857132D0 3.169999837875366D0)) (list (list 8.0D0 522.21484375D0 0.13117410242557526D0 3.179999828338623D0)) (list (list 8.0D0 522.1793212890625D0 0.1306793987751007D0 3.18999981880188D0)) (list (list 8.0D0 522.1371459960938D0 0.13002242147922516D0 3.1999998092651367D0)) (list (list 8.0D0 522.1130981445313D0 0.12904518842697144D0 3.2100000381469727D0)) (list (list 8.0D0 522.0781860351563D0 0.1279265582561493D0 3.2200000286102295D0)) (list (list 8.0D0 521.9905395507813D0 0.1269228309392929D0 3.2300000190734864D0)) (list (list 8.0D0 521.8477783203125D0 0.12609070539474487D0 3.240000009536743D0)) (list (list 8.0D0 521.6681518554688D0 0.1254245638847351D0 3.25D0)) (list (list 8.0D0 521.5117797851563D0 0.12484186887741089D0 3.259999990463257D0)) (list (list 8.0D0 521.46337890625D0 0.12432534992694855D0 3.2699999809265137D0)) (list (list 8.0D0 521.5001220703125D0 0.12393978238105774D0 3.2799999713897705D0)) (list (list 8.0D0 521.5802001953125D0 0.12368910014629364D0 3.2899999618530274D0)) (list (list 8.0D0 521.6577758789063D0 0.1235293596982956D0 3.299999952316284D0)) (list (list 8.0D0 521.689208984375D0 0.12330470234155655D0 3.309999942779541D0)) (list (list 8.0D0 521.6931762695313D0 0.1227559894323349D0 3.319999933242798D0)) (list (list 8.0D0 521.6739501953125D0 0.1218755766749382D0 3.3299999237060547D0)) (list (list 8.0D0 521.6079711914063D0 0.1207258477807045D0 3.3399999141693116D0)) (list (list 8.0D0 521.4759521484375D0 0.11943826079368592D0 3.3499999046325684D0)) (list (list 8.0D0 521.2738037109375D0 0.11830199509859085D0 3.359999895095825D0)) (list (list 8.0D0 521.0992431640625D0 0.11774223297834397D0 3.369999885559082D0)) (list (list 8.0D0 520.9899291992188D0 0.11767907440662384D0 3.379999876022339D0)) (list (list 8.0D0 520.9251098632813D0 0.11794409900903702D0 3.3899998664855957D0)) (list (list 8.0D0 520.8678588867188D0 0.11832920461893082D0 3.3999998569488526D0)) (list (list 8.0D0 520.7582397460938D0 0.11858314275741577D0 3.4099998474121094D0)) (list (list 8.0D0 520.5949096679688D0 0.11861703544855118D0 3.419999837875366D0)) (list (list 8.0D0 520.4202270507813D0 0.11847896128892899D0 3.429999828338623D0)) (list (list 8.0D0 520.2496948242188D0 0.11819518357515335D0 3.43999981880188D0)) (list (list 8.0D0 520.0962524414063D0 0.1178378313779831D0 3.4499998092651367D0)) (list (list 8.0D0 519.9791870117188D0 0.11761606484651566D0 3.4600000381469727D0)) (list (list 8.0D0 519.9580688476563D0 0.11790980398654938D0 3.4700000286102295D0)) (list (list 8.0D0 520.0531616210938D0 0.11859668791294098D0 3.4800000190734864D0)) (list (list 8.0D0 520.2590942382813D0 0.11944358050823212D0 3.490000009536743D0)) (list (list 8.0D0 520.5518188476563D0 0.12016082555055618D0 3.5D0)) (list (list 8.0D0 520.8781127929688D0 0.12032296508550644D0 3.509999990463257D0)) (list (list 8.0D0 521.1207275390625D0 0.11972678452730179D0 3.5199999809265137D0)) (list (list 8.0D0 521.243896484375D0 0.11873359978199005D0 3.5299999713897705D0)) (list (list 8.0D0 521.2804565429688D0 0.11766141653060913D0 3.5399999618530274D0)) (list (list 8.0D0 521.2852783203125D0 0.11682228744029999D0 3.549999952316284D0)) (list (list 8.0D0 521.3453369140625D0 0.11654897034168244D0 3.559999942779541D0)) (list (list 8.0D0 521.4381103515625D0 0.1169556975364685D0 3.569999933242798D0)) (list (list 8.0D0 521.50634765625D0 0.11787217855453491D0 3.5799999237060547D0)) (list (list 8.0D0 521.5520629882813D0 0.1192665621638298D0 3.5899999141693116D0)) (list (list 8.0D0 521.5895385742188D0 0.12109299004077912D0 3.5999999046325684D0)) (list (list 8.0D0 521.6459350585938D0 0.1232997253537178D0 3.609999895095825D0)) (list (list 8.0D0 521.7532958984375D0 0.12562765181064606D0 3.619999885559082D0)) (list (list 8.0D0 521.924072265625D0 0.12777602672576904D0 3.629999876022339D0)) (list (list 8.0D0 522.1450805664063D0 0.1294923722743988D0 3.6399998664855957D0)) (list (list 8.0D0 522.3876342773438D0 0.13052774965763092D0 3.6499998569488526D0)) (list (list 8.0D0 522.5919189453125D0 0.13051532208919525D0 3.6599998474121094D0)) (list (list 8.0D0 522.6807861328125D0 0.12945404648780823D0 3.669999837875366D0)) (list (list 8.0D0 522.6635131835938D0 0.12800264358520508D0 3.679999828338623D0)) (list (list 8.0D0 522.5684814453125D0 0.1265030950307846D0 3.68999981880188D0)) (list (list 8.0D0 522.437744140625D0 0.12522101402282715D0 3.6999998092651367D0)) (list (list 8.0D0 522.337646484375D0 0.12433229386806488D0 3.7099997997283936D0)) (list (list 8.0D0 522.3006591796875D0 0.12380015105009079D0 3.7200000286102295D0)) (list (list 8.0D0 522.290771484375D0 0.12343956530094147D0 3.7300000190734864D0)) (list (list 8.0D0 522.2802734375D0 0.12318342924118042D0 3.740000009536743D0)) (list (list 8.0D0 522.2383422851563D0 0.1229892149567604D0 3.75D0)) (list (list 8.0D0 522.1192016601563D0 0.12285929173231125D0 3.759999990463257D0)) (list (list 8.0D0 521.9148559570313D0 0.12279212474822998D0 3.7699999809265137D0)) (list (list 8.0D0 521.7217407226563D0 0.12271346151828766D0 3.7799999713897705D0)) (list (list 8.0D0 521.60546875D0 0.12261444330215454D0 3.7899999618530274D0)) (list (list 8.0D0 521.6104736328125D0 0.12252410501241684D0 3.799999952316284D0)) (list (list 8.0D0 521.751953125D0 0.12255483865737915D0 3.809999942779541D0)) (list (list 8.0D0 521.9403076171875D0 0.12280510365962982D0 3.819999933242798D0)) (list (list 8.0D0 522.0877685546875D0 0.12314423173666D0 3.8299999237060547D0)) (list (list 8.0D0 522.1695556640625D0 0.12350665032863617D0 3.8399999141693116D0)) (list (list 8.0D0 522.181640625D0 0.12383066862821579D0 3.8499999046325684D0)) (list (list 8.0D0 522.146484375D0 0.12404326349496842D0 3.859999895095825D0)) (list (list 8.0D0 522.1227416992188D0 0.1239294782280922D0 3.869999885559082D0)) (list (list 8.0D0 522.1052856445313D0 0.12345574051141739D0 3.879999876022339D0)) (list (list 8.0D0 522.0651245117188D0 0.12267103046178818D0 3.8899998664855957D0)) (list (list 8.0D0 521.9739379882813D0 0.12167012691497803D0 3.8999998569488526D0)) (list (list 8.0D0 521.8035888671875D0 0.12060820311307907D0 3.9099998474121094D0)) (list (list 8.0D0 521.5629272460938D0 0.11972618103027344D0 3.919999837875366D0)) (list (list 8.0D0 521.3231201171875D0 0.11915731430053711D0 3.929999828338623D0)) (list (list 8.0D0 521.144775390625D0 0.1189199686050415D0 3.93999981880188D0)) (list (list 8.0D0 521.0752563476563D0 0.11895883083343506D0 3.9499998092651367D0)) (list (list 8.0D0 521.14697265625D0 0.11910566687583924D0 3.9599997997283936D0)) (list (list 8.0D0 521.2612915039063D0 0.1191272959113121D0 3.9700000286102295D0)) (list (list 8.0D0 521.2962036132813D0 0.11900657415390015D0 3.9800000190734864D0)) (list (list 8.0D0 521.2196655273438D0 0.1187632828950882D0 3.990000009536743D0)) (list (list 8.0D0 521.0355224609375D0 0.11842406541109085D0 4.0D0)) (list (list 8.0D0 520.7986450195313D0 0.11801038682460785D0 4.009999752044678D0)) (list (list 8.0D0 520.6260375976563D0 0.11753727495670319D0 4.019999980926514D0)) (list (list 8.0D0 520.5194702148438D0 0.1169794425368309D0 4.029999732971191D0)) (list (list 8.0D0 520.4501953125D0 0.1162511333823204D0 4.039999961853027D0)) (list (list 8.0D0 520.3856201171875D0 0.11524257063865662D0 4.049999713897705D0)) (list (list 8.0D0 520.290771484375D0 0.11376209557056427D0 4.059999942779541D0)) (list (list 8.0D0 520.1409912109375D0 0.11179770529270172D0 4.069999694824219D0)) (list (list 8.0D0 519.9590454101563D0 0.10980056971311569D0 4.079999923706055D0)) (list (list 8.0D0 519.7691040039063D0 0.1079992800951004D0 4.089999675750732D0)) (list (list 8.0D0 519.5936889648438D0 0.10651815682649613D0 4.099999904632568D0)) (list (list 8.0D0 519.4530029296875D0 0.10533127933740616D0 4.110000133514404D0)) (list (list 8.0D0 519.3561401367188D0 0.10416014492511749D0 4.119999885559082D0)) (list (list 8.0D0 519.3074951171875D0 0.1029193326830864D0 4.130000114440918D0)) (list (list 8.0D0 519.3088989257813D0 0.10163886845111847D0 4.139999866485596D0)) (list (list 8.0D0 519.3480224609375D0 0.10034377872943878D0 4.150000095367432D0)) (list (list 8.0D0 519.3864135742188D0 0.09902755171060562D0 4.159999847412109D0)) (list (list 8.0D0 519.3397216796875D0 0.09756376594305039D0 4.170000076293945D0)) (list (list 8.0D0 519.203125D0 0.09587980061769486D0 4.179999828338623D0)) (list (list 8.0D0 518.9923095703125D0 0.0938921719789505D0 4.190000057220459D0)) (list (list 8.0D0 518.7366333007813D0 0.09153339266777039D0 4.199999809265137D0)) (list (list 8.0D0 518.486083984375D0 0.08872561901807785D0 4.210000038146973D0)) (list (list 8.0D0 518.3197021484375D0 0.08566465973854065D0 4.21999979019165D0)) (list (list 8.0D0 518.2138671875D0 0.08285132050514221D0 4.230000019073486D0)) (list (list 8.0D0 518.1373901367188D0 0.08052417635917664D0 4.239999771118164D0)) (list (list 8.0D0 518.0625610351563D0 0.07877723127603531D0 4.25D0)) (list (list 8.0D0 517.9696044921875D0 0.07751376926898956D0 4.259999752044678D0)) (list (list 8.0D0 517.8289184570313D0 0.07624112814664841D0 4.269999980926514D0)) (list (list 8.0D0 517.6033325195313D0 0.07473431527614594D0 4.279999732971191D0)) (list (list 8.0D0 517.2919311523438D0 0.07299668341875076D0 4.289999961853027D0)) (list (list 8.0D0 516.9214477539063D0 0.07104698568582535D0 4.299999713897705D0)) (list (list 8.0D0 516.563720703125D0 0.06887993216514588D0 4.309999942779541D0)) (list (list 8.0D0 516.3181762695313D0 0.06635254621505737D0 4.319999694824219D0)) (list (list 8.0D0 516.142333984375D0 0.06358908861875534D0 4.329999923706055D0)) (list (list 8.0D0 516.0227661132813D0 0.060726091265678406D0 4.339999675750732D0)) (list (list 8.0D0 515.9634399414063D0 0.05790850892663002D0 4.349999904632568D0)) (list (list 8.0D0 516.0049438476563D0 0.05530524253845215D0 4.360000133514404D0)) (list (list 8.0D0 516.1742553710938D0 0.053111929446458817D0 4.369999885559082D0)) (list (list 8.0D0 516.341064453125D0 0.051365096122026444D0 4.380000114440918D0)) (list (list 8.0D0 516.4431762695313D0 0.0502130389213562D0 4.389999866485596D0)) (list (list 8.0D0 516.4667358398438D0 0.04979199171066284D0 4.400000095367432D0)) (list (list 8.0D0 516.4734497070313D0 0.05027729272842407D0 4.409999847412109D0)) (list (list 8.0D0 516.6152954101563D0 0.05152792111039162D0 4.420000076293945D0)) (list (list 8.0D0 516.8400268554688D0 0.05290811136364937D0 4.429999828338623D0)) (list (list 8.0D0 517.0552978515625D0 0.05420462414622307D0 4.440000057220459D0)) (list (list 8.0D0 517.1680908203125D0 0.05531345680356026D0 4.449999809265137D0)) (list (list 8.0D0 517.0777587890625D0 0.05626679211854935D0 4.460000038146973D0)) (list (list 8.0D0 516.780029296875D0 0.057251542806625366D0 4.46999979019165D0)) (list (list 8.0D0 516.4793701171875D0 0.05819478631019592D0 4.480000019073486D0)) (list (list 8.0D0 516.2527465820313D0 0.05888207256793976D0 4.489999771118164D0)) (list (list 8.0D0 516.13525390625D0 0.059125375002622604D0 4.5D0)) (list (list 8.0D0 516.111083984375D0 0.058754220604896545D0 4.509999752044678D0)) (list (list 8.0D0 516.1647338867188D0 0.05798006430268288D0 4.519999980926514D0)) (list (list 8.0D0 516.283447265625D0 0.05736100673675537D0 4.529999732971191D0)) (list (list 8.0D0 516.430419921875D0 0.05712714418768883D0 4.539999961853027D0)) (list (list 8.0D0 516.5708618164063D0 0.05739594250917435D0 4.549999713897705D0)) (list (list 8.0D0 516.6747436523438D0 0.058163318783044815D0 4.559999942779541D0)) (list (list 8.0D0 516.7954711914063D0 0.05913325026631355D0 4.569999694824219D0)) (list (list 8.0D0 516.934814453125D0 0.05989100784063339D0 4.579999923706055D0)) (list (list 8.0D0 517.063232421875D0 0.0602944940328598D0 4.589999675750732D0)) (list (list 8.0D0 517.1610717773438D0 0.06032382324337959D0 4.599999904632568D0)) (list (list 8.0D0 517.2254638671875D0 0.06011306494474411D0 4.610000133514404D0)) (list (list 8.0D0 517.2769165039063D0 0.06004936620593071D0 4.619999885559082D0)) (list (list 8.0D0 517.3258666992188D0 0.06017781421542168D0 4.630000114440918D0)) (list (list 8.0D0 517.3744506835938D0 0.060407884418964386D0 4.639999866485596D0)) (list (list 8.0D0 517.4202270507813D0 0.060660943388938904D0 4.650000095367432D0)) (list (list 8.0D0 517.4539794921875D0 0.060887597501277924D0 4.659999847412109D0)) (list (list 8.0D0 517.4458618164063D0 0.061190612614154816D0 4.670000076293945D0)) (list (list 8.0D0 517.4003295898438D0 0.06163047254085541D0 4.679999828338623D0)) (list (list 8.0D0 517.32763671875D0 0.06224868819117546D0 4.690000057220459D0)) (list (list 8.0D0 517.2435913085938D0 0.06310686469078064D0 4.699999809265137D0)) (list (list 8.0D0 517.17236328125D0 0.06431832164525986D0 4.710000038146973D0)) (list (list 8.0D0 517.1568603515625D0 0.06604185700416565D0 4.71999979019165D0)) (list (list 8.0D0 517.1911010742188D0 0.06787604093551636D0 4.730000019073486D0)) (list (list 8.0D0 517.2469482421875D0 0.06948654353618622D0 4.739999771118164D0)) (list (list 8.0D0 517.284912109375D0 0.07060297578573227D0 4.75D0)) (list (list 8.0D0 517.2476806640625D0 0.07101038098335266D0 4.759999752044678D0)) (list (list 8.0D0 517.13720703125D0 0.07057379931211472D0 4.769999980926514D0)) (list (list 8.0D0 517.0640258789063D0 0.06945500522851944D0 4.779999732971191D0)) (list (list 8.0D0 517.0380859375D0 0.06769121438264847D0 4.789999961853027D0)) (list (list 8.0D0 517.0360717773438D0 0.06540727615356446D0 4.799999713897705D0)) (list (list 8.0D0 516.9915161132813D0 0.06283959746360779D0 4.809999942779541D0)) (list (list 8.0D0 516.8607788085938D0 0.060274604707956314D0 4.819999694824219D0)) (list (list 8.0D0 516.697021484375D0 0.057632531970739365D0 4.829999923706055D0)) (list (list 8.0D0 516.5132446289063D0 0.05483146756887436D0 4.839999675750732D0)) (list (list 8.0D0 516.3211059570313D0 0.051833074539899826D0 4.849999904632568D0)) (list (list 8.0D0 516.1323852539063D0 0.048652712255716324D0 4.859999656677246D0)) (list (list 8.0D0 515.95849609375D0 0.04533400014042854D0 4.869999885559082D0)) (list (list 8.0D0 515.740234375D0 0.04200015962123871D0 4.880000114440918D0)) (list (list 8.0D0 515.4417114257813D0 0.038728851824998856D0 4.889999866485596D0)) (list (list 8.0D0 515.0780029296875D0 0.03558197617530823D0 4.900000095367432D0)) (list (list 8.0D0 514.7329711914063D0 0.032610174268484116D0 4.909999847412109D0)) (list (list 8.0D0 514.7089233398438D0 0.02990707941353321D0 4.920000076293945D0)) (list (list 8.0D0 514.9470825195313D0 0.02756379172205925D0 4.929999828338623D0)) (list (list 8.0D0 515.3218994140625D0 0.025671711191534996D0 4.940000057220459D0)) (list (list 8.0D0 515.723388671875D0 0.02427610754966736D0 4.949999809265137D0)) (list (list 8.0D0 516.0640258789063D0 0.02338113635778427D0 4.960000038146973D0)) (list (list 8.0D0 516.3072509765625D0 0.02292545698583126D0 4.96999979019165D0)) (list (list 8.0D0 516.40869140625D0 0.022466398775577545D0 4.980000019073486D0)) (list (list 8.0D0 516.3159790039063D0 0.02174334228038788D0 4.989999771118164D0)) (list (list 8.0D0 516.0723266601563D0 0.020624550059437752D0 5.0D0)) (list (list 8.0D0 515.8446044921875D0 0.0191261637955904D0 5.009999752044678D0)) (list (list 8.0D0 516.0764770507813D0 0.017766175791621208D0 5.019999980926514D0)) (list (list 8.0D0 516.5565185546875D0 0.016977502033114434D0 5.029999732971191D0)) (list (list 8.0D0 517.02392578125D0 0.01681697741150856D0 5.039999961853027D0)) (list (list 8.0D0 517.322021484375D0 0.017265327274799347D0 5.049999713897705D0)) (list (list 8.0D0 517.421875D0 0.018237754702568054D0 5.059999942779541D0)) (list (list 8.0D0 517.4837646484375D0 0.01972537487745285D0 5.069999694824219D0)) (list (list 8.0D0 517.45751953125D0 0.021348286420106888D0 5.079999923706055D0)) (list (list 8.0D0 517.31005859375D0 0.022798586636781693D0 5.089999675750732D0)) (list (list 8.0D0 517.050048828125D0 0.023787135258316994D0 5.099999904632568D0)) (list (list 8.0D0 516.735595703125D0 0.024025319144129753D0 5.109999656677246D0)) (list (list 8.0D0 516.4392700195313D0 0.023258782923221588D0 5.119999885559082D0)) (list (list 8.0D0 516.1355590820313D0 0.02200821414589882D0 5.130000114440918D0)) (list (list 8.0D0 515.824462890625D0 0.020495792850852013D0 5.139999866485596D0)) (list (list 8.0D0 515.53515625D0 0.018898790702223778D0 5.150000095367432D0)) (list (list 8.0D0 515.33349609375D0 0.017347227782011032D0 5.159999847412109D0)) (list (list 8.0D0 515.2559814453125D0 0.015938594937324524D0 5.170000076293945D0)) (list (list 8.0D0 515.1991577148438D0 0.014703753404319287D0 5.179999828338623D0)) (list (list 8.0D0 515.18505859375D0 0.013748131692409516D0 5.190000057220459D0)) (list (list 8.0D0 515.240966796875D0 0.013182505965232849D0 5.199999809265137D0)) (list (list 8.0D0 515.3995361328125D0 0.013133442029356957D0 5.210000038146973D0)) (list (list 8.0D0 515.6143188476563D0 0.013742263428866864D0 5.21999979019165D0)) (list (list 8.0D0 515.8068237304688D0 0.014621607959270478D0 5.230000019073486D0)) (list (list 8.0D0 515.8999633789063D0 0.015576660633087159D0 5.239999771118164D0)) (list (list 8.0D0 515.83642578125D0 0.016460496932268143D0 5.25D0)) (list (list 8.0D0 515.5785522460938D0 0.0171753391623497D0 5.259999752044678D0)) (list (list 8.0D0 515.456298828125D0 0.01783081516623497D0 5.269999980926514D0)) (list (list 8.0D0 515.6671752929688D0 0.018717093393206597D0 5.279999732971191D0)) (list (list 8.0D0 516.07275390625D0 0.019962552934885025D0 5.289999961853027D0)) (list (list 8.0D0 516.48828125D0 0.021587533876299858D0 5.299999713897705D0)) (list (list 8.0D0 516.679443359375D0 0.023498887196183205D0 5.309999942779541D0)) (list (list 8.0D0 516.5794677734375D0 0.02539045736193657D0 5.319999694824219D0)) (list (list 8.0D0 516.4312133789063D0 0.027123425155878067D0 5.329999923706055D0)) (list (list 8.0D0 516.2932739257813D0 0.028715917840600014D0 5.339999675750732D0)) (list (list 8.0D0 516.209716796875D0 0.030241359025239945D0 5.349999904632568D0)) (list (list 8.0D0 516.2117309570313D0 0.03183149918913841D0 5.359999656677246D0)) (list (list 8.0D0 516.3755493164063D0 0.03402426838874817D0 5.369999885559082D0)) (list (list 8.0D0 516.6112060546875D0 0.03711221367120743D0 5.380000114440918D0)) (list (list 8.0D0 516.8624267578125D0 0.04117188602685928D0 5.389999866485596D0)) (list (list 8.0D0 517.099853515625D0 0.046164605766534805D0 5.400000095367432D0)) (list (list 8.0D0 517.322509765625D0 0.051936276257038116D0 5.409999847412109D0)) (list (list 8.0D0 517.5801391601563D0 0.05851520597934723D0 5.420000076293945D0)) (list (list 8.0D0 517.8396606445313D0 0.06564821302890778D0 5.429999828338623D0)) (list (list 8.0D0 518.0993041992188D0 0.0731542780995369D0 5.440000057220459D0)) (list (list 8.0D0 518.37646484375D0 0.08079036325216294D0 5.449999809265137D0)) (list (list 8.0D0 518.70849609375D0 0.08825208246707916D0 5.460000038146973D0)) (list (list 8.0D0 519.1077880859375D0 0.09505131095647812D0 5.46999979019165D0)) (list (list 8.0D0 519.484130859375D0 0.10112956166267395D0 5.480000019073486D0)) (list (list 8.0D0 519.820556640625D0 0.1063508465886116D0 5.489999771118164D0)) (list (list 8.0D0 520.114990234375D0 0.11064828187227249D0 5.5D0)) (list (list 8.0D0 520.3799438476563D0 0.11402241885662079D0 5.509999752044678D0)) (list (list 8.0D0 520.587646484375D0 0.11636374890804291D0 5.519999980926514D0)) (list (list 8.0D0 520.7417602539063D0 0.11803358048200607D0 5.529999732971191D0)) (list (list 8.0D0 520.8557739257813D0 0.11909543722867966D0 5.539999961853027D0)) (list (list 8.0D0 520.9317626953125D0 0.1195916011929512D0 5.549999713897705D0)) (list (list 8.0D0 520.9602661132813D0 0.11954367905855179D0 5.559999942779541D0)) (list (list 8.0D0 520.865966796875D0 0.11873134970664978D0 5.569999694824219D0)) (list (list 8.0D0 520.6790161132813D0 0.11743694543838501D0 5.579999923706055D0)) (list (list 8.0D0 520.4317016601563D0 0.11579843610525131D0 5.589999675750732D0)) (list (list 8.0D0 520.1566772460938D0 0.11391466110944748D0 5.599999904632568D0)) (list (list 8.0D0 519.8873291015625D0 0.1118476539850235D0 5.609999656677246D0)) (list (list 8.0D0 519.6624145507813D0 0.10935913771390915D0 5.619999885559082D0)) (list (list 8.0D0 519.446533203125D0 0.10645008832216263D0 5.62999963760376D0)) (list (list 8.0D0 519.2069702148438D0 0.10315351188182831D0 5.639999866485596D0)) (list (list 8.0D0 518.9312133789063D0 0.09950165450572968D0 5.650000095367432D0)) (list (list 8.0D0 518.6264038085938D0 0.09552830457687378D0 5.659999847412109D0)) (list (list 8.0D0 518.3590087890625D0 0.09115583449602127D0 5.670000076293945D0)) (list (list 8.0D0 518.1224975585938D0 0.08669552206993103D0 5.679999828338623D0)) (list (list 8.0D0 517.873046875D0 0.08243969827890396D0 5.690000057220459D0)) (list (list 8.0D0 517.5827026367188D0 0.07865168899297714D0 5.699999809265137D0)) (list (list 8.0D0 517.238525390625D0 0.07556614279747009D0 5.710000038146973D0)) (list (list 8.0D0 516.905517578125D0 0.07340413331985474D0 5.71999979019165D0)) (list (list 8.0D0 516.6397705078125D0 0.07157257944345474D0 5.730000019073486D0)) (list (list 8.0D0 516.4563598632813D0 0.0698251873254776D0 5.739999771118164D0)) (list (list 8.0D0 516.3572998046875D0 0.06803511083126068D0 5.75D0)) (list (list 8.0D0 516.3310546875D0 0.06618388742208481D0 5.759999752044678D0)) (list (list 8.0D0 516.3065795898438D0 0.06465473026037216D0 5.769999980926514D0)) (list (list 8.0D0 516.2705688476563D0 0.06384599208831787D0 5.779999732971191D0)) (list (list 8.0D0 516.3096313476563D0 0.06402929872274399D0 5.789999961853027D0)) (list (list 8.0D0 516.4970092773438D0 0.06542851030826569D0 5.799999713897705D0)) (list (list 8.0D0 516.8925170898438D0 0.06821677833795548D0 5.809999942779541D0)) (list (list 8.0D0 517.4561767578125D0 0.07293201982975006D0 5.819999694824219D0)) (list (list 8.0D0 517.9717407226563D0 0.07884802669286728D0 5.829999923706055D0)) (list (list 8.0D0 518.3817749023438D0 0.0854005515575409D0 5.839999675750732D0)) (list (list 8.0D0 518.674072265625D0 0.09197165071964264D0 5.849999904632568D0)) (list (list 8.0D0 518.87744140625D0 0.09787075221538544D0 5.859999656677246D0)) (list (list 8.0D0 519.1005859375D0 0.10209685564041138D0 5.869999885559082D0)) (list (list 8.0D0 519.367431640625D0 0.10512958467006684D0 5.87999963760376D0)) (list (list 8.0D0 519.6409301757813D0 0.10738501697778702D0 5.889999866485596D0)) (list (list 8.0D0 519.8953857421875D0 0.10923399776220322D0 5.900000095367432D0)) (list (list 8.0D0 520.1141357421875D0 0.11103444546461106D0 5.909999847412109D0)) (list (list 8.0D0 520.2990112304688D0 0.1131492406129837D0 5.920000076293945D0)) (list (list 8.0D0 520.4578857421875D0 0.11545287072658539D0 5.929999828338623D0)) (list (list 8.0D0 520.5888671875D0 0.11764568090438843D0 5.940000057220459D0)) (list (list 8.0D0 520.6870727539063D0 0.11940117180347443D0 5.949999809265137D0)) (list (list 8.0D0 520.745849609375D0 0.12036766856908798D0 5.960000038146973D0)) (list (list 8.0D0 520.7345581054688D0 0.12007338553667069D0 5.96999979019165D0)) (list (list 8.0D0 520.664794921875D0 0.11909365653991699D0 5.980000019073486D0)) (list (list 8.0D0 520.5408935546875D0 0.11766330897808075D0 5.989999771118164D0)) (list (list 8.0D0 520.3629150390625D0 0.11588656902313233D0 6.0D0)) (list (list 8.0D0 520.1288452148438D0 0.11378074437379837D0 6.009999752044678D0)) (list (list 8.0D0 519.816162109375D0 0.11127863079309464D0 6.019999980926514D0)) (list (list 8.0D0 519.4636840820313D0 0.10879708081483841D0 6.029999732971191D0)) (list (list 8.0D0 519.1270751953125D0 0.10660658031702042D0 6.039999961853027D0)) (list (list 8.0D0 518.85205078125D0 0.10481861978769303D0 6.049999713897705D0)) (list (list 8.0D0 518.6746826171875D0 0.10340915620326996D0 6.059999942779541D0)) (list (list 8.0D0 518.5293579101563D0 0.10199122875928879D0 6.069999694824219D0)) (list (list 8.0D0 518.2800903320313D0 0.10014360398054123D0 6.079999923706055D0)) (list (list 8.0D0 517.9427490234375D0 0.09780013561248779D0 6.089999675750732D0)) (list (list 8.0D0 517.5732421875D0 0.09497294574975968D0 6.099999904632568D0)) (list (list 8.0D0 517.2611694335938D0 0.09175780415534973D0 6.109999656677246D0)) (list (list 8.0D0 517.1402587890625D0 0.08858610689640045D0 6.119999885559082D0)) (list (list 8.0D0 517.1351318359375D0 0.08608313649892807D0 6.12999963760376D0)) (list (list 8.0D0 517.17919921875D0 0.08453221619129181D0 6.139999866485596D0)) (list (list 8.0D0 517.2319946289063D0 0.08410029858350754D0 6.150000095367432D0)) (list (list 8.0D0 517.271484375D0 0.08484790474176407D0 6.159999847412109D0)) (list (list 8.0D0 517.3543090820313D0 0.08701732754707337D0 6.170000076293945D0)) (list (list 8.0D0 517.555908203125D0 0.09018893539905548D0 6.179999828338623D0)) (list (list 8.0D0 517.8771362304688D0 0.09420435130596161D0 6.190000057220459D0)) (list (list 8.0D0 518.2875366210938D0 0.09887862950563431D0 6.199999809265137D0)) (list (list 8.0D0 518.7288208007813D0 0.10395879298448563D0 6.210000038146973D0)) (list (list 8.0D0 519.102294921875D0 0.10871357470750809D0 6.21999979019165D0)) (list (list 8.0D0 519.4121704101563D0 0.11263300478458405D0 6.230000019073486D0)) (list (list 8.0D0 519.673828125D0 0.11569048464298248D0 6.239999771118164D0)) (list (list 8.0D0 519.8901977539063D0 0.11795251071453095D0 6.25D0)) (list (list 8.0D0 520.057861328125D0 0.1195795089006424D0 6.259999752044678D0)) (list (list 8.0D0 520.165771484375D0 0.12069385498762131D0 6.269999980926514D0)) (list (list 8.0D0 520.2562255859375D0 0.12150023877620697D0 6.279999732971191D0)) (list (list 8.0D0 520.330322265625D0 0.1219065934419632D0 6.289999961853027D0)) (list (list 8.0D0 520.3616943359375D0 0.12173912674188614D0 6.299999713897705D0)) (list (list 8.0D0 520.3033447265625D0 0.12077533453702927D0 6.309999942779541D0)) (list (list 8.0D0 520.03466796875D0 0.11856850981712342D0 6.319999694824219D0)) (list (list 8.0D0 519.6083374023438D0 0.1157333180308342D0 6.329999923706055D0)) (list (list 8.0D0 519.1170654296875D0 0.11276628822088242D0 6.339999675750732D0)) (list (list 8.0D0 518.6435546875D0 0.10997718572616577D0 6.349999904632568D0)) (list (list 8.0D0 518.2674560546875D0 0.10756410658359528D0 6.359999656677246D0)) (list (list 8.0D0 518.0501708984375D0 0.10557565093040467D0 6.369999885559082D0)) (list (list 8.0D0 517.9137573242188D0 0.10387024283409119D0 6.37999963760376D0)) (list (list 8.0D0 517.8373413085938D0 0.10256974399089813D0 6.389999866485596D0)) (list (list 8.0D0 517.8243408203125D0 0.10185577720403671D0 6.399999618530273D0)) (list (list 8.0D0 517.8905029296875D0 0.10194376856088638D0 6.409999847412109D0)) (list (list 8.0D0 518.051025390625D0 0.10331665724515915D0 6.420000076293945D0)) (list (list 8.0D0 518.246337890625D0 0.1056516245007515D0 6.429999828338623D0)) (list (list 8.0D0 518.4620971679688D0 0.1085735633969307D0 6.440000057220459D0)) (list (list 8.0D0 518.6871948242188D0 0.11174526065587998D0 6.449999809265137D0)) (list (list 8.0D0 518.9114990234375D0 0.11481530219316483D0 6.460000038146973D0)) (list (list 8.0D0 519.1217041015625D0 0.1173277273774147D0 6.46999979019165D0)) (list (list 8.0D0 519.3384399414063D0 0.11928822845220566D0 6.480000019073486D0)) (list (list 8.0D0 519.5542602539063D0 0.12075474113225937D0 6.489999771118164D0)) (list (list 8.0D0 519.7322387695313D0 0.12172850221395493D0 6.5D0)) (list (list 8.0D0 519.8161010742188D0 0.1221923679113388D0 6.509999752044678D0)) (list (list 8.0D0 519.7155151367188D0 0.1219654306769371D0 6.519999980926514D0)) (list (list 8.0D0 519.5367431640625D0 0.12131121009588242D0 6.529999732971191D0)) (list (list 8.0D0 519.3790283203125D0 0.12047695368528366D0 6.539999961853027D0)) (list (list 8.0D0 519.306884765625D0 0.11969588696956635D0 6.549999713897705D0)) (list (list 8.0D0 519.3634643554688D0 0.11921168118715286D0 6.559999942779541D0)) (list (list 8.0D0 519.5543823242188D0 0.1193833276629448D0 6.569999694824219D0)) (list (list 8.0D0 519.7615966796875D0 0.11996051669120789D0 6.579999923706055D0)) (list (list 8.0D0 519.9297485351563D0 0.1206497922539711D0 6.589999675750732D0)) (list (list 8.0D0 520.0361938476563D0 0.12127669155597687D0 6.599999904632568D0)) (list (list 8.0D0 520.0794677734375D0 0.12172742933034897D0 6.609999656677246D0)) (list (list 8.0D0 520.086181640625D0 0.12195669859647751D0 6.619999885559082D0)) (list (list 8.0D0 520.0673217773438D0 0.1219421848654747D0 6.62999963760376D0)) (list (list 8.0D0 519.992919921875D0 0.12158578634262085D0 6.639999866485596D0)) (list (list 8.0D0 519.8411254882813D0 0.12082072347402573D0 6.649999618530273D0)) (list (list 8.0D0 519.5994262695313D0 0.11962030827999115D0 6.659999847412109D0)) (list (list 8.0D0 519.295166015625D0 0.11806842684745789D0 6.670000076293945D0)) (list (list 8.0D0 519.05029296875D0 0.11659985780715943D0 6.679999828338623D0)) (list (list 8.0D0 518.9366455078125D0 0.1154838502407074D0 6.690000057220459D0)) (list (list 8.0D0 518.9834594726563D0 0.11492365598678589D0 6.699999809265137D0)) (list (list 8.0D0 519.185546875D0 0.11507805436849594D0 6.710000038146973D0)) (list (list 8.0D0 519.44873046875D0 0.11620214581489563D0 6.71999979019165D0)) (list (list 8.0D0 519.6599731445313D0 0.11782452464103699D0 6.730000019073486D0)) (list (list 8.0D0 519.81689453125D0 0.11943516880273819D0 6.739999771118164D0)) (list (list 8.0D0 519.9158325195313D0 0.12059255689382553D0 6.75D0)) (list (list 8.0D0 519.9534301757813D0 0.12088648229837418D0 6.759999752044678D0)) (list (list 8.0D0 519.8988037109375D0 0.11991553753614426D0 6.769999980926514D0)) (list (list 8.0D0 519.8024291992188D0 0.11839033663272858D0 6.779999732971191D0)) (list (list 8.0D0 519.688232421875D0 0.11665083467960358D0 6.789999961853027D0)) (list (list 8.0D0 519.5488891601563D0 0.1146736592054367D0 6.799999713897705D0)) (list (list 8.0D0 519.3594360351563D0 0.11222990602254868D0 6.809999942779541D0)) (list (list 8.0D0 519.053466796875D0 0.10852750390768051D0 6.819999694824219D0)) (list (list 8.0D0 518.6345825195313D0 0.10373564064502716D0 6.829999923706055D0)) (list (list 8.0D0 518.1251220703125D0 0.09843532741069794D0 6.839999675750732D0)) (list (list 8.0D0 517.5548095703125D0 0.09304895251989365D0 6.849999904632568D0)) (list (list 8.0D0 516.9672241210938D0 0.08794926106929779D0 6.859999656677246D0)) (list (list 8.0D0 516.4757080078125D0 0.08341660350561142D0 6.869999885559082D0)) (list (list 8.0D0 516.125732421875D0 0.07948315888643265D0 6.87999963760376D0)) (list (list 8.0D0 515.899658203125D0 0.0762992724776268D0 6.889999866485596D0)) (list (list 8.0D0 515.7941284179688D0 0.0740162581205368D0 6.899999618530273D0)) (list (list 8.0D0 515.8059692382813D0 0.07276229560375214D0 6.909999847412109D0)) (list (list 8.0D0 515.9408569335938D0 0.07291391491889954D0 6.920000076293945D0)) (list (list 8.0D0 516.1476440429688D0 0.07448411732912064D0 6.929999828338623D0)) (list (list 8.0D0 516.4527587890625D0 0.07745197415351868D0 6.940000057220459D0)) (list (list 8.0D0 516.8831787109375D0 0.081761933863163D0 6.949999809265137D0)) (list (list 8.0D0 517.4523315429688D0 0.08723893761634827D0 6.960000038146973D0)) (list (list 8.0D0 518.0748291015625D0 0.09341460466384888D0 6.96999979019165D0)) (list (list 8.0D0 518.5794677734375D0 0.0990472286939621D0 6.980000019073486D0)) (list (list 8.0D0 518.9307861328125D0 0.10330090671777725D0 6.989999771118164D0)) (list (list 8.0D0 519.122802734375D0 0.10563710331916809D0 7.0D0)) (list (list 8.0D0 519.1682739257813D0 0.10572921484708786D0 7.009999752044678D0)) (list (list 8.0D0 519.046630859375D0 0.10328280925750733D0 7.019999980926514D0)) (list (list 8.0D0 518.7921142578125D0 0.09967520087957382D0 7.029999732971191D0)) (list (list 8.0D0 518.459228515625D0 0.09605071693658829D0 7.039999961853027D0)) (list (list 8.0D0 518.0467529296875D0 0.09329716861248017D0 7.049999713897705D0)) (list (list 8.0D0 517.511962890625D0 0.09219160676002503D0 7.059999942779541D0)) (list (list 8.0D0 516.5587768554688D0 0.09350628405809403D0 7.069999694824219D0)) (list (list 8.0D0 514.9653930664063D0 0.0954447016119957D0 7.079999923706055D0)) (list (list 8.0D0 512.7950439453125D0 0.09578443318605423D0 7.089999675750732D0)) (list (list 8.0D0 510.2582092285156D0 0.09254001080989838D0 7.099999904632568D0)) (list (list 8.0D0 507.7030029296875D0 0.08386224508285523D0 7.109999656677246D0)) (list (list 8.0D0 505.9400939941406D0 0.06716890633106232D0 7.119999885559082D0)) (list (list 8.0D0 505.6960144042969D0 0.04727201536297798D0 7.12999963760376D0)) (list (list 8.0D0 507.4342956542969D0 0.029455946758389473D0 7.139999866485596D0)) (list (list 8.0D0 510.61370849609375D0 0.016422908753156662D0 7.149999618530273D0)) (list (list 8.0D0 514.0565795898438D0 0.009404601529240609D0 7.159999847412109D0)) (list (list 8.0D0 515.3294677734375D0 0.006568174343556166D0 7.170000076293945D0)) (list (list 8.0D0 515.0565795898438D0 0.004957428202033043D0 7.179999828338623D0)) (list (list 8.0D0 515.291259765625D0 0.003723792964592576D0 7.190000057220459D0)) (list (list 8.0D0 517.2825927734375D0 0.002695803763344884D0 7.199999809265137D0)) (list (list 8.0D0 521.3455200195313D0 0.001963168615475297D0 7.210000038146973D0)) (list (list 8.0D0 522.00048828125D0 0.001833113026805222D0 7.21999979019165D0)) (list (list 8.0D0 518.8857421875D0 0.0020468500442802906D0 7.230000019073486D0)) (list (list 8.0D0 515.3497314453125D0 0.002412153407931328D0 7.239999771118164D0)) (list (list 8.0D0 513.1648559570313D0 0.002669468754902482D0 7.25D0)) (list (list 8.0D0 513.3281860351563D0 0.0025606907438486815D0 7.259999752044678D0)) (list (list 8.0D0 515.0128173828125D0 0.002144597005099058D0 7.269999980926514D0)) (list (list 8.0D0 517.1204833984375D0 0.0017841457156464458D0 7.279999732971191D0)) (list (list 8.0D0 518.9619750976563D0 0.001567977131344378D0 7.289999961853027D0)) (list (list 8.0D0 520.073974609375D0 0.0015030467184260488D0 7.299999713897705D0)) (list (list 8.0D0 520.1437377929688D0 0.0015545266214758158D0 7.309999942779541D0)) (list (list 8.0D0 519.274169921875D0 0.0016608982114121318D0 7.319999694824219D0)) (list (list 8.0D0 518.3239135742188D0 0.0017278357408940792D0 7.329999923706055D0)) (list (list 8.0D0 517.648193359375D0 0.001726248417980969D0 7.339999675750732D0)) (list (list 8.0D0 517.2960205078125D0 0.001656632637605071D0 7.349999904632568D0)) (list (list 8.0D0 517.2005004882813D0 0.001537139411084354D0 7.359999656677246D0)) (list (list 8.0D0 517.3859252929688D0 0.001411588629707694D0 7.369999885559082D0)) (list (list 8.0D0 517.4019775390625D0 0.001320430776104331D0 7.37999963760376D0)) (list (list 8.0D0 516.921875D0 0.001258723670616746D0 7.389999866485596D0)) (list (list 8.0D0 515.9588623046875D0 0.0012120261089876295D0 7.399999618530273D0)) (list (list 8.0D0 514.7373046875D0 0.001158790080808103D0 7.409999847412109D0)) (list (list 8.0D0 514.0248413085938D0 0.0010582205140963197D0 7.419999599456787D0)) (list (list 8.0D0 513.7646484375D0 9.30763257201761D-4 7.429999828338623D0)) (list (list 8.0D0 513.7063598632813D0 8.081175037659705D-4 7.440000057220459D0)) (list (list 8.0D0 513.7125854492188D0 7.016255985945463D-4 7.449999809265137D0)) (list (list 8.0D0 513.6925048828125D0 6.131528643891215D-4 7.460000038146973D0)) (list (list 8.0D0 513.7105712890625D0 5.27026189956814D-4 7.46999979019165D0)) (list (list 8.0D0 514.0595703125D0 4.2961465078406036D-4 7.480000019073486D0)) (list (list 8.0D0 514.7141723632813D0 3.297730290796608D-4 7.489999771118164D0)) (list (list 8.0D0 515.4473876953125D0 2.3636029800400138D-4 7.5D0)) (list (list 8.0D0 515.9266967773438D0 1.5810836339369416D-4 7.509999752044678D0)) (list (list 8.0D0 515.6140747070313D0 1.0301904694642872D-4 7.519999980926514D0)) (list (list 8.0D0 514.4482421875D0 6.459894211729989D-5 7.529999732971191D0)) (list (list 9.0D0 2222.681884765625D0 1.8984534835908562D-4 0.029999999329447747D0)) (list (list 9.0D0 2224.697265625D0 2.010999305639416D-4 0.03999999910593033D0)) (list (list 9.0D0 2225.725341796875D0 2.1265634859446436D-4 0.04999999701976776D0)) (list (list 9.0D0 2222.33251953125D0 1.9609573064371944D-4 0.05999999865889549D0)) (list (list 9.0D0 2221.005615234375D0 1.8985812494065613D-4 0.07000000029802323D0)) (list (list 9.0D0 2213.646240234375D0 2.1817161177750677D-4 0.07999999821186066D0)) (list (list 9.0D0 2204.939208984375D0 5.722336354665458D-4 0.08999999612569809D0)) (list (list 9.0D0 2211.720703125D0 0.001792882103472948D0 0.09999999403953552D0)) (list (list 9.0D0 2218.502197265625D0 0.0030135316774249077D0 0.10999999940395355D0)) (list (list 9.0D0 2219.618408203125D0 0.00522872619330883D0 0.11999999731779099D0)) (list (list 9.0D0 2219.052978515625D0 0.007969505153596402D0 0.12999999523162842D0)) (list (list 9.0D0 2218.687744140625D0 0.010813410393893719D0 0.14000000059604645D0)) (list (list 9.0D0 2218.46240234375D0 0.013374590314924717D0 0.14999999105930328D0)) (list (list 9.0D0 2218.388427734375D0 0.01506663765758276D0 0.1599999964237213D0)) (list (list 9.0D0 2218.47265625D0 0.016133775934576988D0 0.17000000178813934D0)) (list (list 9.0D0 2218.744140625D0 0.016741717234253884D0 0.17999999225139618D0)) (list (list 9.0D0 2219.20263671875D0 0.01701320707798004D0 0.1899999976158142D0)) (list (list 9.0D0 2219.8173828125D0 0.01703932136297226D0 0.19999998807907105D0)) (list (list 9.0D0 2220.432373046875D0 0.017065435647964478D0 0.20999999344348908D0)) (list (list 9.0D0 2221.000244140625D0 0.017078200355172158D0 0.2199999988079071D0)) (list (list 9.0D0 2221.50927734375D0 0.01714298315346241D0 0.22999998927116394D0)) (list (list 9.0D0 2221.9033203125D0 0.017262928187847138D0 0.23999999463558197D0)) (list (list 9.0D0 2222.0859375D0 0.017385384067893028D0 0.25D0)) (list (list 9.0D0 2221.803955078125D0 0.01743813045322895D0 0.25999999046325684D0)) (list (list 9.0D0 2221.02978515625D0 0.017396463081240654D0 0.26999998092651367D0)) (list (list 9.0D0 2219.679443359375D0 0.017186645418405533D0 0.2800000011920929D0)) (list (list 9.0D0 2217.75830078125D0 0.016737941652536392D0 0.28999999165534973D0)) (list (list 9.0D0 2215.360595703125D0 0.015984490513801575D0 0.29999998211860657D0)) (list (list 9.0D0 2212.7734375D0 0.014869934879243374D0 0.3100000023841858D0)) (list (list 9.0D0 2210.73828125D0 0.013735759072005749D0 0.3199999928474426D0)) (list (list 9.0D0 2209.393798828125D0 0.0128218624740839D0 0.32999998331069947D0)) (list (list 9.0D0 2208.634521484375D0 0.012322042137384415D0 0.3400000035762787D0)) (list (list 9.0D0 2208.137939453125D0 0.012385416775941849D0 0.3499999940395355D0)) (list (list 9.0D0 2207.63720703125D0 0.012907201424241066D0 0.35999998450279236D0)) (list (list 9.0D0 2207.22802734375D0 0.013337832875549794D0 0.3700000047683716D0)) (list (list 9.0D0 2206.911376953125D0 0.013482904061675072D0 0.3799999952316284D0)) (list (list 9.0D0 2206.641845703125D0 0.013283203355967999D0 0.38999998569488526D0)) (list (list 9.0D0 2206.341796875D0 0.012800130061805249D0 0.3999999761581421D0)) (list (list 9.0D0 2206.274169921875D0 0.012381039559841156D0 0.4099999964237213D0)) (list (list 9.0D0 2206.587158203125D0 0.01232552994042635D0 0.41999998688697815D0)) (list (list 9.0D0 2207.02783203125D0 0.012615459971129895D0 0.429999977350235D0)) (list (list 9.0D0 2207.3046875D0 0.0131077216938138D0 0.4399999976158142D0)) (list (list 9.0D0 2207.098388671875D0 0.013549383729696274D0 0.44999998807907105D0)) (list (list 9.0D0 2206.498046875D0 0.013665439561009407D0 0.4599999785423279D0)) (list (list 9.0D0 2206.25537109375D0 0.013694620691239834D0 0.4699999988079071D0)) (list (list 9.0D0 2206.546630859375D0 0.013814137317240239D0 0.47999998927116394D0)) (list (list 9.0D0 2207.373779296875D0 0.014133996330201626D0 0.4899999797344208D0)) (list (list 9.0D0 2208.579833984375D0 0.014708306640386582D0 0.5D0)) (list (list 9.0D0 2209.62890625D0 0.015435515902936459D0 0.5099999904632568D0)) (list (list 9.0D0 2210.28662109375D0 0.016154546290636063D0 0.5199999809265137D0)) (list (list 9.0D0 2210.687255859375D0 0.016866520047187805D0 0.5299999713897705D0)) (list (list 9.0D0 2210.89892578125D0 0.017518946900963783D0 0.5399999618530273D0)) (list (list 9.0D0 2210.94677734375D0 0.01801474206149578D0 0.550000011920929D0)) (list (list 9.0D0 2210.6494140625D0 0.0181056410074234D0 0.5600000023841858D0)) (list (list 9.0D0 2210.082275390625D0 0.01791839674115181D0 0.5699999928474426D0)) (list (list 9.0D0 2209.298095703125D0 0.01749514415860176D0 0.5799999833106995D0)) (list (list 9.0D0 2208.295654296875D0 0.01679709553718567D0 0.5899999737739563D0)) (list (list 9.0D0 2207.0390625D0 0.01573571190237999D0 0.5999999642372131D0)) (list (list 9.0D0 2205.38720703125D0 0.014278098940849305D0 0.6100000143051148D0)) (list (list 9.0D0 2203.97900390625D0 0.012971965596079827D0 0.6200000047683716D0)) (list (list 9.0D0 2203.140380859375D0 0.011975331231951714D0 0.6299999952316284D0)) (list (list 9.0D0 2202.891845703125D0 0.011349912732839585D0 0.6399999856948853D0)) (list (list 9.0D0 2203.008056640625D0 0.011077750474214554D0 0.6499999761581421D0)) (list (list 9.0D0 2202.887451171875D0 0.011067759245634079D0 0.6599999666213989D0)) (list (list 9.0D0 2202.637939453125D0 0.01118425838649273D0 0.6699999570846558D0)) (list (list 9.0D0 2202.406982421875D0 0.01137475948780775D0 0.6800000071525574D0)) (list (list 9.0D0 2202.262939453125D0 0.011584832333028317D0 0.6899999976158142D0)) (list (list 9.0D0 2202.229736328125D0 0.011754981242120266D0 0.699999988079071D0)) (list (list 9.0D0 2202.5771484375D0 0.011825346387922764D0 0.7099999785423279D0)) (list (list 9.0D0 2203.27978515625D0 0.011927416548132897D0 0.7199999690055847D0)) (list (list 9.0D0 2204.096923828125D0 0.012147996574640274D0 0.7299999594688416D0)) (list (list 9.0D0 2204.842041015625D0 0.012503793463110924D0 0.7400000095367432D0)) (list (list 9.0D0 2205.35693359375D0 0.012951904907822609D0 0.75D0)) (list (list 9.0D0 2205.5166015625D0 0.013217444531619549D0 0.7599999904632568D0)) (list (list 9.0D0 2205.380615234375D0 0.013107145205140114D0 0.7699999809265137D0)) (list (list 9.0D0 2205.16064453125D0 0.012757930904626847D0 0.7799999713897705D0)) (list (list 9.0D0 2205.05517578125D0 0.012384085915982724D0 0.7899999618530273D0)) (list (list 9.0D0 2205.25927734375D0 0.01226763240993023D0 0.7999999523162842D0)) (list (list 9.0D0 2205.907958984375D0 0.01279477309435606D0 0.8100000023841858D0)) (list (list 9.0D0 2206.778076171875D0 0.013753560371696949D0 0.8199999928474426D0)) (list (list 9.0D0 2207.738525390625D0 0.014940573833882809D0 0.8299999833106995D0)) (list (list 9.0D0 2208.690185546875D0 0.01620466448366642D0 0.8399999737739563D0)) (list (list 9.0D0 2209.54931640625D0 0.017415158450603485D0 0.8499999642372131D0)) (list (list 9.0D0 2210.251953125D0 0.0184431504458189D0 0.85999995470047D0)) (list (list 9.0D0 2210.84326171875D0 0.019349144771695137D0 0.8700000047683716D0)) (list (list 9.0D0 2211.3671875D0 0.020177673548460007D0 0.8799999952316284D0)) (list (list 9.0D0 2211.874267578125D0 0.020946739241480828D0 0.8899999856948853D0)) (list (list 9.0D0 2212.416015625D0 0.021655116230249405D0 0.8999999761581421D0)) (list (list 9.0D0 2212.890625D0 0.022155780345201493D0 0.9099999666213989D0)) (list (list 9.0D0 2213.121337890625D0 0.022281721234321594D0 0.9199999570846558D0)) (list (list 9.0D0 2213.2421875D0 0.02214912511408329D0 0.9300000071525574D0)) (list (list 9.0D0 2213.3671875D0 0.021933067589998245D0 0.9399999976158142D0)) (list (list 9.0D0 2213.587646484375D0 0.02185334824025631D0 0.949999988079071D0)) (list (list 9.0D0 2213.668212890625D0 0.022031936794519425D0 0.9599999785423279D0)) (list (list 9.0D0 2213.451416015625D0 0.02224871888756752D0 0.9699999690055847D0)) (list (list 9.0D0 2213.13330078125D0 0.022503366693854332D0 0.9799999594688416D0)) (list (list 9.0D0 2212.822265625D0 0.022811949253082276D0 0.9899999499320984D0)) (list (list 9.0D0 2212.572265625D0 0.023192765191197396D0 1.0D0)) (list (list 9.0D0 2212.24951171875D0 0.023556122556328774D0 1.0099999904632569D0)) (list (list 9.0D0 2211.9462890625D0 0.02385525591671467D0 1.0199999809265137D0)) (list (list 9.0D0 2211.720703125D0 0.02413807436823845D0 1.0299999713897705D0)) (list (list 9.0D0 2211.498046875D0 0.02441314049065113D0 1.0399999618530274D0)) (list (list 9.0D0 2211.1181640625D0 0.024662846699357033D0 1.0499999523162842D0)) (list (list 9.0D0 2210.318359375D0 0.02477818913757801D0 1.059999942779541D0)) (list (list 9.0D0 2209.4150390625D0 0.02480648085474968D0 1.0699999332427979D0)) (list (list 9.0D0 2208.609130859375D0 0.02473258599638939D0 1.0799999237060547D0)) (list (list 9.0D0 2207.986328125D0 0.0245024673640728D0 1.090000033378601D0)) (list (list 9.0D0 2207.563720703125D0 0.024042680859565735D0 1.100000023841858D0)) (list (list 9.0D0 2207.302490234375D0 0.023234058171510697D0 1.1100000143051148D0)) (list (list 9.0D0 2207.05126953125D0 0.022335806861519814D0 1.1200000047683716D0)) (list (list 9.0D0 2206.731689453125D0 0.021555155515670777D0 1.1299999952316285D0)) (list (list 9.0D0 2206.312744140625D0 0.020998390391469002D0 1.1399999856948853D0)) (list (list 9.0D0 2205.805908203125D0 0.0207101721316576D0 1.149999976158142D0)) (list (list 9.0D0 2205.419921875D0 0.02067902870476246D0 1.159999966621399D0)) (list (list 9.0D0 2205.43701171875D0 0.02082107588648796D0 1.1699999570846558D0)) (list (list 9.0D0 2205.8291015625D0 0.02115313708782196D0 1.1799999475479126D0)) (list (list 9.0D0 2206.475341796875D0 0.021640677005052567D0 1.1899999380111695D0)) (list (list 9.0D0 2207.17822265625D0 0.022199291735887528D0 1.1999999284744263D0)) (list (list 9.0D0 2207.62548828125D0 0.022542526945471764D0 1.209999918937683D0)) (list (list 9.0D0 2207.957275390625D0 0.022668028250336647D0 1.2200000286102295D0)) (list (list 9.0D0 2208.3876953125D0 0.02278953418135643D0 1.2300000190734864D0)) (list (list 9.0D0 2208.998779296875D0 0.023098917677998543D0 1.2400000095367432D0)) (list (list 9.0D0 2209.774169921875D0 0.023772500455379486D0 1.25D0)) (list (list 9.0D0 2210.306640625D0 0.024891074746847153D0 1.2599999904632569D0)) (list (list 9.0D0 2210.418701171875D0 0.026029149070382118D0 1.2699999809265137D0)) (list (list 9.0D0 2210.3974609375D0 0.027020752429962158D0 1.2799999713897705D0)) (list (list 9.0D0 2210.422607421875D0 0.027768360450863838D0 1.2899999618530274D0)) (list (list 9.0D0 2210.6083984375D0 0.02821340039372444D0 1.2999999523162842D0)) (list (list 9.0D0 2210.743408203125D0 0.028274986892938614D0 1.309999942779541D0)) (list (list 9.0D0 2210.58203125D0 0.028118012472987175D0 1.3199999332427979D0)) (list (list 9.0D0 2210.153564453125D0 0.02786007523536682D0 1.3299999237060547D0)) (list (list 9.0D0 2209.47314453125D0 0.027508871629834175D0 1.3399999141693116D0)) (list (list 9.0D0 2208.562255859375D0 0.02701558731496334D0 1.350000023841858D0)) (list (list 9.0D0 2207.403076171875D0 0.026193493977189064D0 1.3600000143051148D0)) (list (list 9.0D0 2206.167724609375D0 0.025104621425271034D0 1.3700000047683716D0)) (list (list 9.0D0 2205.025390625D0 0.023978227749466896D0 1.3799999952316285D0)) (list (list 9.0D0 2204.102294921875D0 0.022989504039287567D0 1.3899999856948853D0)) (list (list 9.0D0 2203.5D0 0.02229723148047924D0 1.399999976158142D0)) (list (list 9.0D0 2203.3095703125D0 0.022132152691483498D0 1.409999966621399D0)) (list (list 9.0D0 2203.320068359375D0 0.022280124947428704D0 1.4199999570846558D0)) (list (list 9.0D0 2203.333740234375D0 0.022413982078433037D0 1.4299999475479126D0)) (list (list 9.0D0 2203.197265625D0 0.022273622453212738D0 1.4399999380111695D0)) (list (list 9.0D0 2202.78515625D0 0.0216436218470335D0 1.4499999284744263D0)) (list (list 9.0D0 2202.086669921875D0 0.020483853295445442D0 1.459999918937683D0)) (list (list 9.0D0 2201.389892578125D0 0.019309833645820618D0 1.46999990940094D0)) (list (list 9.0D0 2200.688232421875D0 0.018333811312913895D0 1.4800000190734864D0)) (list (list 9.0D0 2200.00390625D0 0.017653724178671837D0 1.4900000095367432D0)) (list (list 9.0D0 2199.400146484375D0 0.017305729910731316D0 1.5D0)) (list (list 9.0D0 2199.2587890625D0 0.01731914095580578D0 1.5099999904632569D0)) (list (list 9.0D0 2199.53125D0 0.017589258030056954D0 1.5199999809265137D0)) (list (list 9.0D0 2199.964111328125D0 0.017991622909903527D0 1.5299999713897705D0)) (list (list 9.0D0 2200.463134765625D0 0.01846112497150898D0 1.5399999618530274D0)) (list (list 9.0D0 2201.006591796875D0 0.018964335322380066D0 1.5499999523162842D0)) (list (list 9.0D0 2201.739501953125D0 0.01962939091026783D0 1.559999942779541D0)) (list (list 9.0D0 2202.534912109375D0 0.020451297983527184D0 1.5699999332427979D0)) (list (list 9.0D0 2203.263916015625D0 0.021223364397883415D0 1.5799999237060547D0)) (list (list 9.0D0 2203.910400390625D0 0.021842658519744873D0 1.5899999141693116D0)) (list (list 9.0D0 2204.5078125D0 0.02226831577718258D0 1.5999999046325684D0)) (list (list 9.0D0 2205.090576171875D0 0.022633574903011322D0 1.6100000143051148D0)) (list (list 9.0D0 2205.65087890625D0 0.023039815947413445D0 1.6200000047683716D0)) (list (list 9.0D0 2206.20703125D0 0.023403534665703774D0 1.6299999952316285D0)) (list (list 9.0D0 2206.745361328125D0 0.023657774552702904D0 1.6399999856948853D0)) (list (list 9.0D0 2207.225830078125D0 0.02375214919447899D0 1.649999976158142D0)) (list (list 9.0D0 2207.46875D0 0.023708002641797066D0 1.659999966621399D0)) (list (list 9.0D0 2207.346435546875D0 0.023571865633130074D0 1.6699999570846558D0)) (list (list 9.0D0 2206.910400390625D0 0.02334812842309475D0 1.6799999475479126D0)) (list (list 9.0D0 2206.28125D0 0.02306228317320347D0 1.6899999380111695D0)) (list (list 9.0D0 2205.625732421875D0 0.022763332352042198D0 1.6999999284744263D0)) (list (list 9.0D0 2205.122314453125D0 0.022602299228310585D0 1.709999918937683D0)) (list (list 9.0D0 2204.73046875D0 0.02256610058248043D0 1.71999990940094D0)) (list (list 9.0D0 2204.1943359375D0 0.022299304604530335D0 1.7300000190734864D0)) (list (list 9.0D0 2203.2109375D0 0.021455230191349983D0 1.7400000095367432D0)) (list (list 9.0D0 2201.460693359375D0 0.019755223765969277D0 1.75D0)) (list (list 9.0D0 2198.521728515625D0 0.017364386469125748D0 1.7599999904632569D0)) (list (list 9.0D0 2195.66845703125D0 0.015447825193405152D0 1.7699999809265137D0)) (list (list 9.0D0 2193.49609375D0 0.014023932628333569D0 1.7799999713897705D0)) (list (list 9.0D0 2192.08251953125D0 0.012884493917226792D0 1.7899999618530274D0)) (list (list 9.0D0 2191.19873046875D0 0.01171169988811016D0 1.7999999523162842D0)) (list (list 9.0D0 2189.922119140625D0 0.010194104164838791D0 1.809999942779541D0)) (list (list 9.0D0 2188.01904296875D0 0.00880331452935934D0 1.8199999332427979D0)) (list (list 9.0D0 2186.668701171875D0 0.007872804999351502D0 1.8299999237060547D0)) (list (list 9.0D0 2186.34765625D0 0.007429562043398619D0 1.8399999141693116D0)) (list (list 9.0D0 2187.098388671875D0 0.007335085421800613D0 1.8499999046325684D0)) (list (list 9.0D0 2187.679931640625D0 0.007204674184322357D0 1.8600000143051148D0)) (list (list 9.0D0 2186.5859375D0 0.006714340765029192D0 1.8700000047683716D0)) (list (list 9.0D0 2185.534423828125D0 0.006226860452443361D0 1.8799999952316285D0)) (list (list 9.0D0 2185.386474609375D0 0.005930735729634762D0 1.8899999856948853D0)) (list (list 9.0D0 2186.54638671875D0 0.005953097250312567D0 1.899999976158142D0)) (list (list 9.0D0 2188.192626953125D0 0.006441245321184397D0 1.909999966621399D0)) (list (list 9.0D0 2188.748779296875D0 0.007139286957681179D0 1.9199999570846558D0)) (list (list 9.0D0 2189.10400390625D0 0.008137335069477559D0 1.9299999475479126D0)) (list (list 9.0D0 2189.623046875D0 0.009477518498897553D0 1.9399999380111695D0)) (list (list 9.0D0 2190.45166015625D0 0.011137068271636963D0 1.9499999284744263D0)) (list (list 9.0D0 2191.336181640625D0 0.012854503467679024D0 1.959999918937683D0)) (list (list 9.0D0 2192.18896484375D0 0.014273644424974919D0 1.96999990940094D0)) (list (list 9.0D0 2193.032470703125D0 0.015403620898723603D0 1.9799998998641968D0)) (list (list 9.0D0 2193.83935546875D0 0.01626873016357422D0 1.9900000095367432D0)) (list (list 9.0D0 2194.564208984375D0 0.016910407692193985D0 2.0D0)) (list (list 9.0D0 2195.125732421875D0 0.017323682084679604D0 2.009999990463257D0)) (list (list 9.0D0 2195.5107421875D0 0.017555905506014824D0 2.0199999809265137D0)) (list (list 9.0D0 2195.825439453125D0 0.017733704298734665D0 2.0299999713897705D0)) (list (list 9.0D0 2196.137939453125D0 0.01794363744556904D0 2.0399999618530274D0)) (list (list 9.0D0 2196.48388671875D0 0.018239054828882218D0 2.049999952316284D0)) (list (list 9.0D0 2196.714599609375D0 0.01850447803735733D0 2.059999942779541D0)) (list (list 9.0D0 2196.791015625D0 0.0185638926923275D0 2.069999933242798D0)) (list (list 9.0D0 2196.94091796875D0 0.018554512411355973D0 2.0799999237060547D0)) (list (list 9.0D0 2197.236328125D0 0.018613984808325768D0 2.0899999141693116D0)) (list (list 9.0D0 2197.645751953125D0 0.018847964704036713D0 2.0999999046325684D0)) (list (list 9.0D0 2197.770751953125D0 0.019118577241897583D0 2.109999895095825D0)) (list (list 9.0D0 2197.282958984375D0 0.018984012305736542D0 2.119999885559082D0)) (list (list 9.0D0 2196.45703125D0 0.018503084778785706D0 2.129999876022339D0)) (list (list 9.0D0 2195.546142578125D0 0.017796417698264122D0 2.1399998664855957D0)) (list (list 9.0D0 2194.77294921875D0 0.017017493024468422D0 2.1499998569488526D0)) (list (list 9.0D0 2194.076171875D0 0.016289526596665383D0 2.1599998474121094D0)) (list (list 9.0D0 2193.240478515625D0 0.015643993392586708D0 2.169999837875366D0)) (list (list 9.0D0 2192.416015625D0 0.015118870884180069D0 2.180000066757202D0)) (list (list 9.0D0 2191.720947265625D0 0.014714433811604977D0 2.190000057220459D0)) (list (list 9.0D0 2191.241943359375D0 0.014407115988433361D0 2.200000047683716D0)) (list (list 9.0D0 2190.949462890625D0 0.014138163067400456D0 2.2100000381469727D0)) (list (list 9.0D0 2190.737060546875D0 0.013860317878425122D0 2.2200000286102295D0)) (list (list 9.0D0 2190.62353515625D0 0.013572249561548233D0 2.2300000190734864D0)) (list (list 9.0D0 2190.591064453125D0 0.013276886194944382D0 2.240000009536743D0)) (list (list 9.0D0 2190.59814453125D0 0.012969698756933213D0 2.25D0)) (list (list 9.0D0 2190.54736328125D0 0.012583550997078419D0 2.259999990463257D0)) (list (list 9.0D0 2190.461669921875D0 0.012105337344110012D0 2.2699999809265137D0)) (list (list 9.0D0 2190.42529296875D0 0.011613508686423302D0 2.2799999713897705D0)) (list (list 9.0D0 2190.452880859375D0 0.01118247676640749D0 2.2899999618530274D0)) (list (list 9.0D0 2190.517333984375D0 0.010880554094910622D0 2.299999952316284D0)) (list (list 9.0D0 2190.462646484375D0 0.01075729075819254D0 2.309999942779541D0)) (list (list 9.0D0 2190.285400390625D0 0.010773669928312302D0 2.319999933242798D0)) (list (list 9.0D0 2190.2353515625D0 0.010916630737483502D0 2.3299999237060547D0)) (list (list 9.0D0 2190.48388671875D0 0.011202776804566384D0 2.3399999141693116D0)) (list (list 9.0D0 2191.12890625D0 0.011647243984043599D0 2.3499999046325684D0)) (list (list 9.0D0 2192.041748046875D0 0.012264285236597062D0 2.359999895095825D0)) (list (list 9.0D0 2192.666259765625D0 0.012818063609302044D0 2.369999885559082D0)) (list (list 9.0D0 2192.8359375D0 0.013140908442437649D0 2.379999876022339D0)) (list (list 9.0D0 2192.679931640625D0 0.013220448046922684D0 2.3899998664855957D0)) (list (list 9.0D0 2192.43310546875D0 0.013109692372381688D0 2.3999998569488526D0)) (list (list 9.0D0 2192.37158203125D0 0.01292261853814125D0 2.4099998474121094D0)) (list (list 9.0D0 2192.25146484375D0 0.012654895894229412D0 2.419999837875366D0)) (list (list 9.0D0 2191.77197265625D0 0.012234714813530445D0 2.429999828338623D0)) (list (list 9.0D0 2190.953125D0 0.011665585450828076D0 2.440000057220459D0)) (list (list 9.0D0 2189.967529296875D0 0.010992857627570629D0 2.450000047683716D0)) (list (list 9.0D0 2189.289794921875D0 0.010340914130210877D0 2.4600000381469727D0)) (list (list 9.0D0 2189.070068359375D0 0.009778748266398907D0 2.4700000286102295D0)) (list (list 9.0D0 2189.04248046875D0 0.00931114237755537D0 2.4800000190734864D0)) (list (list 9.0D0 2189.012939453125D0 0.008965946733951569D0 2.490000009536743D0)) (list (list 9.0D0 2188.843505859375D0 0.008783281780779362D0 2.5D0)) (list (list 9.0D0 2188.637939453125D0 0.008887591771781445D0 2.509999990463257D0)) (list (list 9.0D0 2188.8193359375D0 0.009185905568301678D0 2.5199999809265137D0)) (list (list 9.0D0 2189.337890625D0 0.00946208368986845D0 2.5299999713897705D0)) (list (list 9.0D0 2189.980712890625D0 0.009614314883947373D0 2.5399999618530274D0)) (list (list 9.0D0 2190.49951171875D0 0.009601566009223462D0 2.549999952316284D0)) (list (list 9.0D0 2190.7236328125D0 0.00953606516122818D0 2.559999942779541D0)) (list (list 9.0D0 2191.0810546875D0 0.009785511530935765D0 2.569999933242798D0)) (list (list 9.0D0 2191.789306640625D0 0.010386175476014614D0 2.5799999237060547D0)) (list (list 9.0D0 2192.78076171875D0 0.011253280565142632D0 2.5899999141693116D0)) (list (list 9.0D0 2193.87255859375D0 0.012232298962771893D0 2.5999999046325684D0)) (list (list 9.0D0 2194.7080078125D0 0.013037889264523983D0 2.609999895095825D0)) (list (list 9.0D0 2195.3837890625D0 0.013716710731387139D0 2.619999885559082D0)) (list (list 9.0D0 2196.05517578125D0 0.014493611641228199D0 2.629999876022339D0)) (list (list 9.0D0 2196.737060546875D0 0.015407091937959195D0 2.6399998664855957D0)) (list (list 9.0D0 2197.41943359375D0 0.01640179567039013D0 2.6499998569488526D0)) (list (list 9.0D0 2198.121337890625D0 0.017186926677823067D0 2.6599998474121094D0)) (list (list 9.0D0 2198.904541015625D0 0.017563778907060623D0 2.669999837875366D0)) (list (list 9.0D0 2199.66943359375D0 0.017729725688695908D0 2.679999828338623D0)) (list (list 9.0D0 2200.294921875D0 0.017809230834245682D0 2.690000057220459D0)) (list (list 9.0D0 2200.652099609375D0 0.01790422759950161D0 2.700000047683716D0)) (list (list 9.0D0 2200.54248046875D0 0.018047763034701348D0 2.7100000381469727D0)) (list (list 9.0D0 2200.161376953125D0 0.018282268196344376D0 2.7200000286102295D0)) (list (list 9.0D0 2199.8837890625D0 0.01862875372171402D0 2.7300000190734864D0)) (list (list 9.0D0 2199.849609375D0 0.019040493294596672D0 2.740000009536743D0)) (list (list 9.0D0 2200.081298828125D0 0.019429603591561318D0 2.75D0)) (list (list 9.0D0 2200.338623046875D0 0.019593562930822373D0 2.759999990463257D0)) (list (list 9.0D0 2200.330322265625D0 0.019361188635230065D0 2.7699999809265137D0)) (list (list 9.0D0 2200.114501953125D0 0.01884550414979458D0 2.7799999713897705D0)) (list (list 9.0D0 2199.787841796875D0 0.018201977014541626D0 2.7899999618530274D0)) (list (list 9.0D0 2199.471923828125D0 0.017623495310544968D0 2.799999952316284D0)) (list (list 9.0D0 2199.33935546875D0 0.017403723672032356D0 2.809999942779541D0)) (list (list 9.0D0 2199.447509765625D0 0.017612777650356293D0 2.819999933242798D0)) (list (list 9.0D0 2199.692138671875D0 0.018010061234235764D0 2.8299999237060547D0)) (list (list 9.0D0 2200.02099609375D0 0.01847485639154911D0 2.8399999141693116D0)) (list (list 9.0D0 2200.4013671875D0 0.018921812996268273D0 2.8499999046325684D0)) (list (list 9.0D0 2200.873779296875D0 0.019342580810189247D0 2.859999895095825D0)) (list (list 9.0D0 2201.428466796875D0 0.019716160371899605D0 2.869999885559082D0)) (list (list 9.0D0 2201.936767578125D0 0.020019443705677986D0 2.879999876022339D0)) (list (list 9.0D0 2202.355224609375D0 0.020268535241484642D0 2.8899998664855957D0)) (list (list 9.0D0 2202.670654296875D0 0.020490366965532303D0 2.8999998569488526D0)) (list (list 9.0D0 2202.90478515625D0 0.020711984485387802D0 2.9099998474121094D0)) (list (list 9.0D0 2202.902587890625D0 0.020701300352811814D0 2.919999837875366D0)) (list (list 9.0D0 2202.583984375D0 0.020378444343805313D0 2.929999828338623D0)) (list (list 9.0D0 2202.025146484375D0 0.019831418991088867D0 2.93999981880188D0)) (list (list 9.0D0 2201.3740234375D0 0.019218413159251213D0 2.950000047683716D0)) (list (list 9.0D0 2200.907958984375D0 0.01881326362490654D0 2.9600000381469727D0)) (list (list 9.0D0 2200.65966796875D0 0.01877257600426674D0 2.9700000286102295D0)) (list (list 9.0D0 2200.447509765625D0 0.01902286894619465D0 2.9800000190734864D0)) (list (list 9.0D0 2200.2705078125D0 0.01952286995947361D0 2.990000009536743D0)) (list (list 9.0D0 2200.177978515625D0 0.02020215429365635D0 3.0D0)) (list (list 9.0D0 2200.3125D0 0.020908435806632042D0 3.009999990463257D0)) (list (list 9.0D0 2200.5107421875D0 0.021344874054193497D0 3.0199999809265137D0)) (list (list 9.0D0 2200.634765625D0 0.02143273875117302D0 3.0299999713897705D0)) (list (list 9.0D0 2200.73291015625D0 0.021246446296572685D0 3.0399999618530274D0)) (list (list 9.0D0 2200.880615234375D0 0.020927706733345986D0 3.049999952316284D0)) (list (list 9.0D0 2201.131591796875D0 0.020721469074487686D0 3.059999942779541D0)) (list (list 9.0D0 2201.25146484375D0 0.020688433200120926D0 3.069999933242798D0)) (list (list 9.0D0 2201.27685546875D0 0.02076759748160839D0 3.0799999237060547D0)) (list (list 9.0D0 2201.3291015625D0 0.020961690694093704D0 3.0899999141693116D0)) (list (list 9.0D0 2201.519775390625D0 0.021271005272865296D0 3.0999999046325684D0)) (list (list 9.0D0 2201.878662109375D0 0.02167399227619171D0 3.109999895095825D0)) (list (list 9.0D0 2202.2119140625D0 0.02191505953669548D0 3.119999885559082D0)) (list (list 9.0D0 2202.437255859375D0 0.02189074642956257D0 3.129999876022339D0)) (list (list 9.0D0 2202.557861328125D0 0.021625248715281487D0 3.1399998664855957D0)) (list (list 9.0D0 2202.605224609375D0 0.021204164251685143D0 3.1499998569488526D0)) (list (list 9.0D0 2202.647216796875D0 0.02081681601703167D0 3.1599998474121094D0)) (list (list 9.0D0 2202.67333984375D0 0.020649399608373642D0 3.169999837875366D0)) (list (list 9.0D0 2202.63720703125D0 0.020609574392437935D0 3.179999828338623D0)) (list (list 9.0D0 2202.55322265625D0 0.02061137743294239D0 3.18999981880188D0)) (list (list 9.0D0 2202.45068359375D0 0.02056925557553768D0 3.1999998092651367D0)) (list (list 9.0D0 2202.3681640625D0 0.020398585125803948D0 3.2100000381469727D0)) (list (list 9.0D0 2202.19482421875D0 0.020138515159487725D0 3.2200000286102295D0)) (list (list 9.0D0 2201.912109375D0 0.019887346774339676D0 3.2300000190734864D0)) (list (list 9.0D0 2201.56982421875D0 0.01969672366976738D0 3.240000009536743D0)) (list (list 9.0D0 2201.226806640625D0 0.019600778818130493D0 3.25D0)) (list (list 9.0D0 2200.9306640625D0 0.019613102078437805D0 3.259999990463257D0)) (list (list 9.0D0 2200.76123046875D0 0.019667183980345726D0 3.2699999809265137D0)) (list (list 9.0D0 2200.756103515625D0 0.019721897318959236D0 3.2799999713897705D0)) (list (list 9.0D0 2200.87744140625D0 0.019742796197533608D0 3.2899999618530274D0)) (list (list 9.0D0 2201.0546875D0 0.019694555550813675D0 3.299999952316284D0)) (list (list 9.0D0 2201.166015625D0 0.01952368952333927D0 3.309999942779541D0)) (list (list 9.0D0 2201.216552734375D0 0.019229546189308167D0 3.319999933242798D0)) (list (list 9.0D0 2201.208251953125D0 0.018877197057008744D0 3.3299999237060547D0)) (list (list 9.0D0 2201.053955078125D0 0.018487446010112763D0 3.3399999141693116D0)) (list (list 9.0D0 2200.687744140625D0 0.01808827742934227D0 3.3499999046325684D0)) (list (list 9.0D0 2200.119140625D0 0.017748940736055374D0 3.359999895095825D0)) (list (list 9.0D0 2199.7265625D0 0.017613304778933525D0 3.369999885559082D0)) (list (list 9.0D0 2199.615234375D0 0.01759023405611515D0 3.379999876022339D0)) (list (list 9.0D0 2199.654541015625D0 0.017567142844200135D0 3.3899998664855957D0)) (list (list 9.0D0 2199.64990234375D0 0.01743208058178425D0 3.3999998569488526D0)) (list (list 9.0D0 2199.310791015625D0 0.017072895541787148D0 3.4099998474121094D0)) (list (list 9.0D0 2198.79443359375D0 0.016696685925126076D0 3.419999837875366D0)) (list (list 9.0D0 2198.348876953125D0 0.016392255201935768D0 3.429999828338623D0)) (list (list 9.0D0 2197.9384765625D0 0.016062624752521515D0 3.43999981880188D0)) (list (list 9.0D0 2197.4853515625D0 0.015600049868226052D0 3.4499998092651367D0)) (list (list 9.0D0 2196.89892578125D0 0.01492492575198412D0 3.4600000381469727D0)) (list (list 9.0D0 2196.604248046875D0 0.01436347234994173D0 3.4700000286102295D0)) (list (list 9.0D0 2196.8427734375D0 0.014130671508610249D0 3.4800000190734864D0)) (list (list 9.0D0 2197.55908203125D0 0.014222360216081143D0 3.490000009536743D0)) (list (list 9.0D0 2198.56103515625D0 0.01453569158911705D0 3.5D0)) (list (list 9.0D0 2199.425537109375D0 0.014798512682318688D0 3.509999990463257D0)) (list (list 9.0D0 2199.782470703125D0 0.01469886302947998D0 3.5199999809265137D0)) (list (list 9.0D0 2199.747314453125D0 0.014339321292936802D0 3.5299999713897705D0)) (list (list 9.0D0 2199.52392578125D0 0.013852187432348729D0 3.5399999618530274D0)) (list (list 9.0D0 2199.3447265625D0 0.013390905223786831D0 3.549999952316284D0)) (list (list 9.0D0 2199.484130859375D0 0.013156168162822724D0 3.559999942779541D0)) (list (list 9.0D0 2199.67919921875D0 0.013301676139235497D0 3.569999933242798D0)) (list (list 9.0D0 2199.753173828125D0 0.013700793497264386D0 3.5799999237060547D0)) (list (list 9.0D0 2199.80029296875D0 0.0142885847017169D0 3.5899999141693116D0)) (list (list 9.0D0 2199.935302734375D0 0.015001504682004452D0 3.5999999046325684D0)) (list (list 9.0D0 2200.25D0 0.01578625477850437D0 3.609999895095825D0)) (list (list 9.0D0 2200.690185546875D0 0.016575248911976815D0 3.619999885559082D0)) (list (list 9.0D0 2201.267822265625D0 0.017298201099038124D0 3.629999876022339D0)) (list (list 9.0D0 2201.969970703125D0 0.017887497320771218D0 3.6399998664855957D0)) (list (list 9.0D0 2202.72314453125D0 0.018272409215569496D0 3.6499998569488526D0)) (list (list 9.0D0 2203.29931640625D0 0.018338382244110108D0 3.6599998474121094D0)) (list (list 9.0D0 2203.478271484375D0 0.018022114410996437D0 3.669999837875366D0)) (list (list 9.0D0 2203.32958984375D0 0.017494289204478264D0 3.679999828338623D0)) (list (list 9.0D0 2202.9501953125D0 0.0169085506349802D0 3.68999981880188D0)) (list (list 9.0D0 2202.46630859375D0 0.01643200032413006D0 3.6999998092651367D0)) (list (list 9.0D0 2202.0546875D0 0.016286663711071015D0 3.7099997997283936D0)) (list (list 9.0D0 2201.909912109375D0 0.01660074107348919D0 3.7200000286102295D0)) (list (list 9.0D0 2202.010009765625D0 0.017160072922706604D0 3.7300000190734864D0)) (list (list 9.0D0 2202.200439453125D0 0.017838407307863236D0 3.740000009536743D0)) (list (list 9.0D0 2202.281982421875D0 0.018500495702028275D0 3.75D0)) (list (list 9.0D0 2201.958740234375D0 0.01896282471716404D0 3.759999990463257D0)) (list (list 9.0D0 2201.266845703125D0 0.019098132848739624D0 3.7699999809265137D0)) (list (list 9.0D0 2200.697509765625D0 0.019054647535085678D0 3.7799999713897705D0)) (list (list 9.0D0 2200.46923828125D0 0.018949884921312332D0 3.7899999618530274D0)) (list (list 9.0D0 2200.684326171875D0 0.01889420486986637D0 3.799999952316284D0)) (list (list 9.0D0 2201.2822265625D0 0.01899193972349167D0 3.809999942779541D0)) (list (list 9.0D0 2201.7744140625D0 0.01906992681324482D0 3.819999933242798D0)) (list (list 9.0D0 2201.90966796875D0 0.018959997221827507D0 3.8299999237060547D0)) (list (list 9.0D0 2201.783935546875D0 0.018729444593191147D0 3.8399999141693116D0)) (list (list 9.0D0 2201.567138671875D0 0.01850624568760395D0 3.8499999046325684D0)) (list (list 9.0D0 2201.5107421875D0 0.018512435257434845D0 3.859999895095825D0)) (list (list 9.0D0 2201.59228515625D0 0.018760131672024727D0 3.869999885559082D0)) (list (list 9.0D0 2201.61279296875D0 0.018934838473796845D0 3.879999876022339D0)) (list (list 9.0D0 2201.528564453125D0 0.018899140879511833D0 3.8899998664855957D0)) (list (list 9.0D0 2201.328857421875D0 0.018602311611175537D0 3.8999998569488526D0)) (list (list 9.0D0 2201.028564453125D0 0.018129916861653328D0 3.9099998474121094D0)) (list (list 9.0D0 2200.51171875D0 0.01775578036904335D0 3.919999837875366D0)) (list (list 9.0D0 2199.917724609375D0 0.017573807388544083D0 3.929999828338623D0)) (list (list 9.0D0 2199.44580078125D0 0.017533594742417336D0 3.93999981880188D0)) (list (list 9.0D0 2199.252197265625D0 0.017552638426423073D0 3.9499998092651367D0)) (list (list 9.0D0 2199.41015625D0 0.017512375488877297D0 3.9599997997283936D0)) (list (list 9.0D0 2199.631103515625D0 0.017385587096214295D0 3.9700000286102295D0)) (list (list 9.0D0 2199.6875D0 0.017247598618268967D0 3.9800000190734864D0)) (list (list 9.0D0 2199.5263671875D0 0.017091231420636177D0 3.990000009536743D0)) (list (list 9.0D0 2199.15673828125D0 0.016887826845049858D0 4.0D0)) (list (list 9.0D0 2198.666259765625D0 0.01656866818666458D0 4.009999752044678D0)) (list (list 9.0D0 2198.323486328125D0 0.016127392649650574D0 4.019999980926514D0)) (list (list 9.0D0 2198.11669921875D0 0.01567687653005123D0 4.029999732971191D0)) (list (list 9.0D0 2197.93017578125D0 0.015238464809954167D0 4.039999961853027D0)) (list (list 9.0D0 2197.65869140625D0 0.014798285439610482D0 4.049999713897705D0)) (list (list 9.0D0 2197.235107421875D0 0.014278655871748925D0 4.059999942779541D0)) (list (list 9.0D0 2196.787109375D0 0.013657166622579098D0 4.069999694824219D0)) (list (list 9.0D0 2196.349609375D0 0.013109850697219372D0 4.079999923706055D0)) (list (list 9.0D0 2195.917724609375D0 0.012746227905154229D0 4.089999675750732D0)) (list (list 9.0D0 2195.50341796875D0 0.01261331420391798D0 4.099999904632568D0)) (list (list 9.0D0 2195.165283203125D0 0.012660352513194085D0 4.110000133514404D0)) (list (list 9.0D0 2194.9892578125D0 0.012618700042366982D0 4.119999885559082D0)) (list (list 9.0D0 2194.928955078125D0 0.012413624674081803D0 4.130000114440918D0)) (list (list 9.0D0 2194.99365234375D0 0.012110915035009385D0 4.139999866485596D0)) (list (list 9.0D0 2195.186279296875D0 0.01181140635162592D0 4.150000095367432D0)) (list (list 9.0D0 2195.505615234375D0 0.011669599451124668D0 4.159999847412109D0)) (list (list 9.0D0 2195.742431640625D0 0.011718726716935635D0 4.170000076293945D0)) (list (list 9.0D0 2195.70751953125D0 0.011688289232552052D0 4.179999828338623D0)) (list (list 9.0D0 2195.340576171875D0 0.011418369598686695D0 4.190000057220459D0)) (list (list 9.0D0 2194.641357421875D0 0.010824883356690407D0 4.199999809265137D0)) (list (list 9.0D0 2193.67822265625D0 0.00992745440453291D0 4.210000038146973D0)) (list (list 9.0D0 2192.718017578125D0 0.009075654670596123D0 4.21999979019165D0)) (list (list 9.0D0 2192.064208984375D0 0.008486837148666382D0 4.230000019073486D0)) (list (list 9.0D0 2191.818603515625D0 0.00816099438816309D0 4.239999771118164D0)) (list (list 9.0D0 2191.957763671875D0 0.008039270527660847D0 4.25D0)) (list (list 9.0D0 2192.2734375D0 0.007996168918907643D0 4.259999752044678D0)) (list (list 9.0D0 2192.300537109375D0 0.007838022895157338D0 4.269999980926514D0)) (list (list 9.0D0 2191.98583984375D0 0.007560941856354475D0 4.279999732971191D0)) (list (list 9.0D0 2191.458251953125D0 0.007232666015625D0 4.289999961853027D0)) (list (list 9.0D0 2190.891357421875D0 0.006915551610291004D0 4.299999713897705D0)) (list (list 9.0D0 2190.520751953125D0 0.006653477903455496D0 4.309999942779541D0)) (list (list 9.0D0 2190.1142578125D0 0.006360688246786594D0 4.319999694824219D0)) (list (list 9.0D0 2189.44677734375D0 0.005995409097522497D0 4.329999923706055D0)) (list (list 9.0D0 2188.66748046875D0 0.005585566628724337D0 4.339999675750732D0)) (list (list 9.0D0 2187.985595703125D0 0.00516796438023448D0 4.349999904632568D0)) (list (list 9.0D0 2187.69091796875D0 0.004787997342646122D0 4.360000133514404D0)) (list (list 9.0D0 2187.86181640625D0 0.004452497698366642D0 4.369999885559082D0)) (list (list 9.0D0 2188.10009765625D0 0.004154250957071781D0 4.380000114440918D0)) (list (list 9.0D0 2188.26416015625D0 0.003929652739316225D0 4.389999866485596D0)) (list (list 9.0D0 2188.37158203125D0 0.0038288168143481016D0 4.400000095367432D0)) (list (list 9.0D0 2188.70556640625D0 0.003936004359275103D0 4.409999847412109D0)) (list (list 9.0D0 2189.343994140625D0 0.004228116944432259D0 4.420000076293945D0)) (list (list 9.0D0 2189.57568359375D0 0.004497889429330826D0 4.429999828338623D0)) (list (list 9.0D0 2189.4775390625D0 0.004694337025284767D0 4.440000057220459D0)) (list (list 9.0D0 2189.278564453125D0 0.004810122773051262D0 4.449999809265137D0)) (list (list 9.0D0 2189.401611328125D0 0.004893830977380276D0 4.460000038146973D0)) (list (list 9.0D0 2189.64599609375D0 0.004980489145964384D0 4.46999979019165D0)) (list (list 9.0D0 2189.588134765625D0 0.005011844914406538D0 4.480000019073486D0)) (list (list 9.0D0 2189.09228515625D0 0.004953338764607906D0 4.489999771118164D0)) (list (list 9.0D0 2188.219970703125D0 0.004800917115062475D0 4.5D0)) (list (list 9.0D0 2187.324951171875D0 0.004594464786350727D0 4.509999752044678D0)) (list (list 9.0D0 2187.378173828125D0 0.004390539135783911D0 4.519999980926514D0)) (list (list 9.0D0 2187.9072265625D0 0.004223591182380915D0 4.529999732971191D0)) (list (list 9.0D0 2188.184814453125D0 0.004106298554688692D0 4.539999961853027D0)) (list (list 9.0D0 2187.877685546875D0 0.004054808523505926D0 4.549999713897705D0)) (list (list 9.0D0 2187.302978515625D0 0.004099047277122736D0 4.559999942779541D0)) (list (list 9.0D0 2187.78076171875D0 0.004153609275817871D0 4.569999694824219D0)) (list (list 9.0D0 2188.73876953125D0 0.004116720054298639D0 4.579999923706055D0)) (list (list 9.0D0 2189.364013671875D0 0.003984410781413317D0 4.589999675750732D0)) (list (list 9.0D0 2189.30712890625D0 0.00381123973056674D0 4.599999904632568D0)) (list (list 9.0D0 2188.959228515625D0 0.003740839194506407D0 4.610000133514404D0)) (list (list 9.0D0 2189.296630859375D0 0.003914408851414919D0 4.619999885559082D0)) (list (list 9.0D0 2190.010498046875D0 0.0041681863367557526D0 4.630000114440918D0)) (list (list 9.0D0 2190.5263671875D0 0.004381959792226553D0 4.639999866485596D0)) (list (list 9.0D0 2190.50390625D0 0.0044876281172037125D0 4.650000095367432D0)) (list (list 9.0D0 2189.960205078125D0 0.004489474929869175D0 4.659999847412109D0)) (list (list 9.0D0 2189.80029296875D0 0.00455542653799057D0 4.670000076293945D0)) (list (list 9.0D0 2189.964111328125D0 0.0047105588018894196D0 4.679999828338623D0)) (list (list 9.0D0 2190.07275390625D0 0.004931352566927671D0 4.690000057220459D0)) (list (list 9.0D0 2189.917236328125D0 0.005208193324506283D0 4.699999809265137D0)) (list (list 9.0D0 2189.55615234375D0 0.005560645367950201D0 4.710000038146973D0)) (list (list 9.0D0 2189.555908203125D0 0.006008567754179239D0 4.71999979019165D0)) (list (list 9.0D0 2189.931640625D0 0.006368571892380714D0 4.730000019073486D0)) (list (list 9.0D0 2190.384521484375D0 0.006553832907229662D0 4.739999771118164D0)) (list (list 9.0D0 2190.642822265625D0 0.006540648639202118D0 4.75D0)) (list (list 9.0D0 2190.476318359375D0 0.006383860949426889D0 4.759999752044678D0)) (list (list 9.0D0 2190.023681640625D0 0.006269182078540325D0 4.769999980926514D0)) (list (list 9.0D0 2189.744140625D0 0.006149762775748968D0 4.779999732971191D0)) (list (list 9.0D0 2189.629638671875D0 0.00594770722091198D0 4.789999961853027D0)) (list (list 9.0D0 2189.559326171875D0 0.005638477858155966D0 4.799999713897705D0)) (list (list 9.0D0 2189.269287109375D0 0.005272701382637024D0 4.809999942779541D0)) (list (list 9.0D0 2189.1767578125D0 0.005095901433378458D0 4.819999694824219D0)) (list (list 9.0D0 2189.4580078125D0 0.005042861681431532D0 4.829999923706055D0)) (list (list 9.0D0 2189.745361328125D0 0.004928824957460165D0 4.839999675750732D0)) (list (list 9.0D0 2189.580322265625D0 0.004608630668371916D0 4.849999904632568D0)) (list (list 9.0D0 2188.361083984375D0 0.003986355848610401D0 4.859999656677246D0)) (list (list 9.0D0 2187.593505859375D0 0.0033776923082768917D0 4.869999885559082D0)) (list (list 9.0D0 2187.845947265625D0 0.00297362613491714D0 4.880000114440918D0)) (list (list 9.0D0 2188.697998046875D0 0.002737532602623105D0 4.889999866485596D0)) (list (list 9.0D0 2189.446044921875D0 0.002576169092208147D0 4.900000095367432D0)) (list (list 9.0D0 2189.005615234375D0 0.0023275127168744803D0 4.909999847412109D0)) (list (list 9.0D0 2188.60302734375D0 0.0019359965808689595D0 4.920000076293945D0)) (list (list 9.0D0 2188.24365234375D0 0.0014687448274344206D0 4.929999828338623D0)) (list (list 9.0D0 2187.382080078125D0 9.975815191864968D-4 4.940000057220459D0)) (list (list 9.0D0 2186.692138671875D0 5.98162179812789D-4 4.949999809265137D0)) (list (list 9.0D0 2188.581787109375D0 3.5621857387013734D-4 4.960000038146973D0)) (list (list 9.0D0 2210.522216796875D0 0.0016456793528050185D0 4.96999979019165D0)) (list (list 9.0D0 2222.162109375D0 0.0017766605596989394D0 4.980000019073486D0)) (list (list 9.0D0 2230.29833984375D0 0.0014528654282912612D0 4.989999771118164D0)) (list (list 9.0D0 2230.36083984375D0 0.0011482910485938192D0 5.0D0)) (list (list 9.0D0 2200.687255859375D0 9.161711786873639D-4 5.009999752044678D0)) (list (list 9.0D0 2177.588134765625D0 0.001028484315611422D0 5.019999980926514D0)) (list (list 9.0D0 2173.538818359375D0 0.0010077778715640307D0 5.029999732971191D0)) (list (list 9.0D0 2184.496337890625D0 9.115591528825462D-4 5.039999961853027D0)) (list (list 9.0D0 2199.94482421875D0 7.606832659803331D-4 5.049999713897705D0)) (list (list 9.0D0 2201.36767578125D0 5.093727959319949D-4 5.059999942779541D0)) (list (list 9.0D0 2198.864013671875D0 4.917880869470537D-4 5.069999694824219D0)) (list (list 9.0D0 2196.278076171875D0 4.790720122400671D-4 5.079999923706055D0)) (list (list 9.0D0 2193.692626953125D0 4.663565778173506D-4 5.089999675750732D0)) (list (list 9.0D0 2190.720703125D0 5.056509398855269D-4 5.099999904632568D0)) (list (list 9.0D0 2186.465087890625D0 7.178242667578161D-4 5.109999656677246D0)) (list (list 9.0D0 2186.034912109375D0 9.235360776074231D-4 5.119999885559082D0)) (list (list 9.0D0 2186.43603515625D0 0.001023871242068708D0 5.130000114440918D0)) (list (list 9.0D0 2190.804931640625D0 9.747360018081963D-4 5.139999866485596D0)) (list (list 9.0D0 2198.530517578125D0 8.700573816895485D-4 5.150000095367432D0)) (list (list 9.0D0 2204.30615234375D0 9.730729507282376D-4 5.159999847412109D0)) (list (list 9.0D0 2206.734130859375D0 0.0012100255116820336D0 5.170000076293945D0)) (list (list 9.0D0 2206.435302734375D0 0.001281962264329195D0 5.179999828338623D0)) (list (list 9.0D0 2204.358642578125D0 0.0011651437962427736D0 5.190000057220459D0)) (list (list 9.0D0 2200.322021484375D0 8.974199881777167D-4 5.199999809265137D0)) (list (list 9.0D0 2192.7236328125D0 5.81928645260632D-4 5.210000038146973D0)) (list (list 9.0D0 2166.199462890625D0 4.237591056153178D-4 5.21999979019165D0)) (list (list 9.0D0 2174.21337890625D0 3.76397802028805D-4 5.230000019073486D0)) (list (list 9.0D0 2196.759521484375D0 4.377704462967813D-4 5.239999771118164D0)) (list (list 9.0D0 2210.890869140625D0 5.879130912944675D-4 5.25D0)) (list (list 9.0D0 2190.990966796875D0 7.868064567446709D-4 5.259999752044678D0)) (list (list 9.0D0 2195.819091796875D0 8.940845727920532D-4 5.269999980926514D0)) (list (list 9.0D0 2202.802978515625D0 8.41437722556293D-4 5.279999732971191D0)) (list (list 9.0D0 2208.055908203125D0 7.856157026253641D-4 5.289999961853027D0)) (list (list 9.0D0 2209.886474609375D0 7.788902148604393D-4 5.299999713897705D0)) (list (list 9.0D0 2208.7744140625D0 7.532474119216204D-4 5.309999942779541D0)) (list (list 9.0D0 2195.884033203125D0 8.984494488686323D-4 5.319999694824219D0)) (list (list 9.0D0 2190.575439453125D0 0.001076565939001739D0 5.329999923706055D0)) (list (list 9.0D0 2188.2158203125D0 0.0012693677563220263D0 5.339999675750732D0)) (list (list 9.0D0 2186.47705078125D0 0.0014442171668633819D0 5.349999904632568D0)) (list (list 9.0D0 2185.81494140625D0 0.001550854416564107D0 5.359999656677246D0)) (list (list 9.0D0 2186.675048828125D0 0.0015229294076561928D0 5.369999885559082D0)) (list (list 9.0D0 2187.9130859375D0 0.0015197255415841937D0 5.380000114440918D0)) (list (list 9.0D0 2189.41552734375D0 0.0016546729020774365D0 5.389999866485596D0)) (list (list 9.0D0 2190.865478515625D0 0.001990274526178837D0 5.400000095367432D0)) (list (list 9.0D0 2191.71923828125D0 0.002536654705181718D0 5.409999847412109D0)) (list (list 9.0D0 2191.22705078125D0 0.003234406001865864D0 5.420000076293945D0)) (list (list 9.0D0 2191.13671875D0 0.004076723475009203D0 5.429999828338623D0)) (list (list 9.0D0 2191.648193359375D0 0.005072706378996372D0 5.440000057220459D0)) (list (list 9.0D0 2192.694580078125D0 0.006189100909978151D0 5.449999809265137D0)) (list (list 9.0D0 2193.9423828125D0 0.007349434774369001D0 5.460000038146973D0)) (list (list 9.0D0 2194.825927734375D0 0.008252978324890137D0 5.46999979019165D0)) (list (list 9.0D0 2195.4365234375D0 0.0088888518512249D0 5.480000019073486D0)) (list (list 9.0D0 2195.986083984375D0 0.009378430433571339D0 5.489999771118164D0)) (list (list 9.0D0 2196.62548828125D0 0.009846020489931107D0 5.5D0)) (list (list 9.0D0 2197.44482421875D0 0.010417850688099862D0 5.509999752044678D0)) (list (list 9.0D0 2198.134033203125D0 0.01105817873030901D0 5.519999980926514D0)) (list (list 9.0D0 2198.50537109375D0 0.011596083641052246D0 5.529999732971191D0)) (list (list 9.0D0 2198.739990234375D0 0.012036454863846302D0 5.539999961853027D0)) (list (list 9.0D0 2198.977783203125D0 0.012400689534842968D0 5.549999713897705D0)) (list (list 9.0D0 2199.318115234375D0 0.012726454064249993D0 5.559999942779541D0)) (list (list 9.0D0 2199.349609375D0 0.012953766621649266D0 5.569999694824219D0)) (list (list 9.0D0 2198.889404296875D0 0.01305445283651352D0 5.579999923706055D0)) (list (list 9.0D0 2198.17578125D0 0.013076264411211014D0 5.589999675750732D0)) (list (list 9.0D0 2197.44091796875D0 0.01301921159029007D0 5.599999904632568D0)) (list (list 9.0D0 2196.909912109375D0 0.012836864218115807D0 5.609999656677246D0)) (list (list 9.0D0 2196.6142578125D0 0.012274723500013352D0 5.619999885559082D0)) (list (list 9.0D0 2196.177490234375D0 0.011392084881663323D0 5.62999963760376D0)) (list (list 9.0D0 2195.4375D0 0.010301748290657997D0 5.639999866485596D0)) (list (list 9.0D0 2194.3720703125D0 0.00914114248007536D0 5.650000095367432D0)) (list (list 9.0D0 2193.093994140625D0 0.00807265006005764D0 5.659999847412109D0)) (list (list 9.0D0 2192.0126953125D0 0.007261520251631737D0 5.670000076293945D0)) (list (list 9.0D0 2191.371337890625D0 0.006626846268773079D0 5.679999828338623D0)) (list (list 9.0D0 2191.062255859375D0 0.006132918875664473D0 5.690000057220459D0)) (list (list 9.0D0 2190.850341796875D0 0.005763479042798281D0 5.699999809265137D0)) (list (list 9.0D0 2190.38330078125D0 0.005518786609172821D0 5.710000038146973D0)) (list (list 9.0D0 2189.791259765625D0 0.005481270141899586D0 5.71999979019165D0)) (list (list 9.0D0 2189.542236328125D0 0.005532614421099424D0 5.730000019073486D0)) (list (list 9.0D0 2189.4462890625D0 0.005548751913011074D0 5.739999771118164D0)) (list (list 9.0D0 2189.24609375D0 0.005429850425571203D0 5.75D0)) (list (list 9.0D0 2188.624755859375D0 0.005099094472825527D0 5.759999752044678D0)) (list (list 9.0D0 2187.741455078125D0 0.004644532687962055D0 5.769999980926514D0)) (list (list 9.0D0 2187.371826171875D0 0.004322790075093508D0 5.779999732971191D0)) (list (list 9.0D0 2187.51416015625D0 0.004203091375529766D0 5.789999961853027D0)) (list (list 9.0D0 2188.072265625D0 0.004295513965189457D0 5.799999713897705D0)) (list (list 9.0D0 2188.86083984375D0 0.004556120838969946D0 5.809999942779541D0)) (list (list 9.0D0 2189.85302734375D0 0.004950664937496185D0 5.819999694824219D0)) (list (list 9.0D0 2191.093994140625D0 0.005490030627697706D0 5.829999923706055D0)) (list (list 9.0D0 2192.40576171875D0 0.006157426163554192D0 5.839999675750732D0)) (list (list 9.0D0 2193.590087890625D0 0.006901697255671024D0 5.849999904632568D0))) (list (list (list 9.0D0 2194.43212890625D0 0.007640782743692398D0 5.859999656677246D0)) (list (list 9.0D0 2195.0732421875D0 0.008363207802176476D0 5.869999885559082D0)) (list (list 9.0D0 2195.594482421875D0 0.009081895463168621D0 5.87999963760376D0)) (list (list 9.0D0 2196.01123046875D0 0.00976469088345766D0 5.889999866485596D0)) (list (list 9.0D0 2196.384521484375D0 0.010392492637038231D0 5.900000095367432D0)) (list (list 9.0D0 2196.813232421875D0 0.010958586819469929D0 5.909999847412109D0)) (list (list 9.0D0 2197.2900390625D0 0.011516382917761803D0 5.920000076293945D0)) (list (list 9.0D0 2197.65771484375D0 0.012089451774954796D0 5.929999828338623D0)) (list (list 9.0D0 2197.969482421875D0 0.012613799422979355D0 5.940000057220459D0)) (list (list 9.0D0 2198.28076171875D0 0.013000686652958393D0 5.949999809265137D0)) (list (list 9.0D0 2198.644287109375D0 0.013140796683728695D0 5.960000038146973D0)) (list (list 9.0D0 2198.796875D0 0.012870005331933499D0 5.96999979019165D0)) (list (list 9.0D0 2198.652099609375D0 0.012405325658619404D0 5.980000019073486D0)) (list (list 9.0D0 2198.309814453125D0 0.011839305981993676D0 5.989999771118164D0)) (list (list 9.0D0 2197.8115234375D0 0.011207745410501957D0 6.0D0)) (list (list 9.0D0 2197.157470703125D0 0.010507668368518353D0 6.009999752044678D0)) (list (list 9.0D0 2196.208740234375D0 0.009775671176612378D0 6.019999980926514D0)) (list (list 9.0D0 2195.17138671875D0 0.009195963852107525D0 6.029999732971191D0)) (list (list 9.0D0 2194.273681640625D0 0.008813749067485333D0 6.039999961853027D0)) (list (list 9.0D0 2193.677001953125D0 0.00861106812953949D0 6.049999713897705D0)) (list (list 9.0D0 2193.47900390625D0 0.008514790795743466D0 6.059999942779541D0)) (list (list 9.0D0 2193.31640625D0 0.008386276662349701D0 6.069999694824219D0)) (list (list 9.0D0 2192.75048828125D0 0.00816307868808508D0 6.079999923706055D0)) (list (list 9.0D0 2191.883544921875D0 0.007860579527914524D0 6.089999675750732D0)) (list (list 9.0D0 2190.844482421875D0 0.007488991133868694D0 6.099999904632568D0)) (list (list 9.0D0 2189.802490234375D0 0.007058694493025541D0 6.109999656677246D0)) (list (list 9.0D0 2189.26611328125D0 0.006615251302719116D0 6.119999885559082D0)) (list (list 9.0D0 2189.3095703125D0 0.0062943072989583016D0 6.12999963760376D0)) (list (list 9.0D0 2189.689453125D0 0.006175541318953037D0 6.139999866485596D0)) (list (list 9.0D0 2190.14892578125D0 0.006278898101300001D0 6.150000095367432D0)) (list (list 9.0D0 2190.40576171875D0 0.00657370500266552D0 6.159999847412109D0)) (list (list 9.0D0 2190.2275390625D0 0.006970082875341177D0 6.170000076293945D0)) (list (list 9.0D0 2190.25390625D0 0.0074231731705367565D0 6.179999828338623D0)) (list (list 9.0D0 2190.843017578125D0 0.00797010026872158D0 6.190000057220459D0)) (list (list 9.0D0 2192.0625D0 0.008677473291754723D0 6.199999809265137D0)) (list (list 9.0D0 2193.734619140625D0 0.009623286314308644D0 6.210000038146973D0)) (list (list 9.0D0 2194.864990234375D0 0.010693944990634919D0 6.21999979019165D0)) (list (list 9.0D0 2195.454833984375D0 0.011509241536259652D0 6.230000019073486D0)) (list (list 9.0D0 2195.822998046875D0 0.0120001882314682D0 6.239999771118164D0)) (list (list 9.0D0 2196.158447265625D0 0.012181121855974198D0 6.25D0)) (list (list 9.0D0 2196.569580078125D0 0.012141537852585316D0 6.259999752044678D0)) (list (list 9.0D0 2197.046630859375D0 0.012160923331975937D0 6.269999980926514D0)) (list (list 9.0D0 2197.527099609375D0 0.012454056181013585D0 6.279999732971191D0)) (list (list 9.0D0 2197.924072265625D0 0.012971729040145874D0 6.289999961853027D0)) (list (list 9.0D0 2198.115478515625D0 0.013565342873334885D0 6.299999713897705D0)) (list (list 9.0D0 2197.948486328125D0 0.014002872630953789D0 6.309999942779541D0)) (list (list 9.0D0 2197.054931640625D0 0.013864648528397084D0 6.319999694824219D0)) (list (list 9.0D0 2195.68701171875D0 0.01330331526696682D0 6.329999923706055D0)) (list (list 9.0D0 2194.2734375D0 0.012556730769574643D0 6.339999675750732D0)) (list (list 9.0D0 2193.113525390625D0 0.011755221523344517D0 6.349999904632568D0)) (list (list 9.0D0 2192.41796875D0 0.0109707647934556D0 6.359999656677246D0)) (list (list 9.0D0 2192.06298828125D0 0.010245267301797867D0 6.369999885559082D0)) (list (list 9.0D0 2191.673095703125D0 0.00960957258939743D0 6.37999963760376D0)) (list (list 9.0D0 2191.3017578125D0 0.009141484275460244D0 6.389999866485596D0)) (list (list 9.0D0 2191.067138671875D0 0.008903739973902703D0 6.399999618530273D0)) (list (list 9.0D0 2191.129638671875D0 0.008942043408751488D0 6.409999847412109D0)) (list (list 9.0D0 2191.65185546875D0 0.009271346963942051D0 6.420000076293945D0)) (list (list 9.0D0 2192.2900390625D0 0.009757802821695805D0 6.429999828338623D0)) (list (list 9.0D0 2192.925048828125D0 0.010336494073271752D0 6.440000057220459D0)) (list (list 9.0D0 2193.49365234375D0 0.010929121635854245D0 6.449999809265137D0)) (list (list 9.0D0 2193.966064453125D0 0.011441045440733433D0 6.460000038146973D0)) (list (list 9.0D0 2194.3369140625D0 0.011715117841959D0 6.46999979019165D0)) (list (list 9.0D0 2194.801513671875D0 0.011852799914777279D0 6.480000019073486D0)) (list (list 9.0D0 2195.411376953125D0 0.01197031419724226D0 6.489999771118164D0)) (list (list 9.0D0 2196.043212890625D0 0.012099051848053933D0 6.5D0)) (list (list 9.0D0 2196.453125D0 0.012216486036777497D0 6.509999752044678D0)) (list (list 9.0D0 2196.192138671875D0 0.012176855467259884D0 6.519999980926514D0)) (list (list 9.0D0 2195.635986328125D0 0.012011028826236725D0 6.529999732971191D0)) (list (list 9.0D0 2195.032958984375D0 0.01173355057835579D0 6.539999961853027D0)) (list (list 9.0D0 2194.59033203125D0 0.011376077309250832D0 6.549999713897705D0)) (list (list 9.0D0 2194.502685546875D0 0.010993720963597298D0 6.559999942779541D0)) (list (list 9.0D0 2195.055908203125D0 0.010787058621644974D0 6.569999694824219D0)) (list (list 9.0D0 2195.932861328125D0 0.010862471535801888D0 6.579999923706055D0)) (list (list 9.0D0 2196.708984375D0 0.01109328493475914D0 6.589999675750732D0)) (list (list 9.0D0 2197.147216796875D0 0.011361207813024521D0 6.599999904632568D0)) (list (list 9.0D0 2197.1396484375D0 0.011550159193575383D0 6.609999656677246D0)) (list (list 9.0D0 2196.985107421875D0 0.011663657613098622D0 6.619999885559082D0)) (list (list 9.0D0 2196.9306640625D0 0.011751479469239712D0 6.62999963760376D0)) (list (list 9.0D0 2196.8662109375D0 0.011726569384336472D0 6.639999866485596D0)) (list (list 9.0D0 2196.635986328125D0 0.011499490588903427D0 6.649999618530273D0)) (list (list 9.0D0 2196.0654296875D0 0.010991918854415417D0 6.659999847412109D0)) (list (list 9.0D0 2195.09716796875D0 0.01024909783154726D0 6.670000076293945D0)) (list (list 9.0D0 2194.337158203125D0 0.009579550474882126D0 6.679999828338623D0)) (list (list 9.0D0 2194.017333984375D0 0.009057790972292424D0 6.690000057220459D0)) (list (list 9.0D0 2194.176513671875D0 0.008730078116059304D0 6.699999809265137D0)) (list (list 9.0D0 2194.722412109375D0 0.008625831454992295D0 6.710000038146973D0)) (list (list 9.0D0 2195.43994140625D0 0.008853512816131115D0 6.71999979019165D0)) (list (list 9.0D0 2196.17822265625D0 0.009323491714894772D0 6.730000019073486D0)) (list (list 9.0D0 2196.765380859375D0 0.009873690083622933D0 6.739999771118164D0)) (list (list 9.0D0 2197.095458984375D0 0.010349993593990803D0 6.75D0)) (list (list 9.0D0 2197.110595703125D0 0.010601501911878586D0 6.759999752044678D0)) (list (list 9.0D0 2196.872802734375D0 0.010550753213465214D0 6.769999980926514D0)) (list (list 9.0D0 2196.61572265625D0 0.010463299229741097D0 6.779999732971191D0)) (list (list 9.0D0 2196.446044921875D0 0.010476396419107914D0 6.789999961853027D0)) (list (list 9.0D0 2196.384521484375D0 0.010573424398899079D0 6.799999713897705D0)) (list (list 9.0D0 2196.379638671875D0 0.010632048361003399D0 6.809999942779541D0)) (list (list 9.0D0 2196.02734375D0 0.010175169445574284D0 6.819999694824219D0)) (list (list 9.0D0 2194.783203125D0 0.009152806363999844D0 6.829999923706055D0)) (list (list 9.0D0 2193.026611328125D0 0.00797032006084919D0 6.839999675750732D0)) (list (list 9.0D0 2191.26318359375D0 0.006898452527821064D0 6.849999904632568D0)) (list (list 9.0D0 2190.07861328125D0 0.006139256525784731D0 6.859999656677246D0)) (list (list 9.0D0 2189.91259765625D0 0.005683500785380602D0 6.869999885559082D0)) (list (list 9.0D0 2190.00390625D0 0.005371515639126301D0 6.87999963760376D0)) (list (list 9.0D0 2189.9765625D0 0.005166877992451191D0 6.889999866485596D0)) (list (list 9.0D0 2189.771484375D0 0.005076156929135323D0 6.899999618530273D0)) (list (list 9.0D0 2189.4765625D0 0.005114489700645208D0 6.909999847412109D0)) (list (list 9.0D0 2189.136962890625D0 0.00523330457508564D0 6.920000076293945D0)) (list (list 9.0D0 2188.908447265625D0 0.005317564122378826D0 6.929999828338623D0)) (list (list 9.0D0 2189.23828125D0 0.005401224363595247D0 6.940000057220459D0)) (list (list 9.0D0 2190.35888671875D0 0.0055874986574053765D0 6.949999809265137D0)) (list (list 9.0D0 2192.326416015625D0 0.006019908934831619D0 6.960000038146973D0)) (list (list 9.0D0 2194.61572265625D0 0.006954869721084833D0 6.96999979019165D0)) (list (list 9.0D0 2196.16259765625D0 0.007983647286891938D0 6.980000019073486D0)) (list (list 9.0D0 2197.01904296875D0 0.008774344809353352D0 6.989999771118164D0)) (list (list 9.0D0 2197.432373046875D0 0.00914787594228983D0 7.0D0)) (list (list 9.0D0 2197.75048828125D0 0.009003039449453354D0 7.009999752044678D0)) (list (list 9.0D0 2198.02978515625D0 0.008212706074118615D0 7.019999980926514D0)) (list (list 9.0D0 2197.61572265625D0 0.007003262173384428D0 7.029999732971191D0)) (list (list 9.0D0 2196.453369140625D0 0.0056939623318612576D0 7.039999961853027D0)) (list (list 9.0D0 2194.838134765625D0 0.004472747445106506D0 7.049999713897705D0)) (list (list 9.0D0 2193.178955078125D0 0.0034579175990074873D0 7.059999942779541D0)) (list (list 9.0D0 2191.031982421875D0 0.002549145370721817D0 7.069999694824219D0)) (list (list 9.0D0 2187.225341796875D0 0.001768150250427425D0 7.079999923706055D0)) (list (list 9.0D0 2185.073486328125D0 0.0011403459357097745D0 7.089999675750732D0)) (list (list 9.0D0 2186.07568359375D0 6.901814485900104D-4 7.099999904632568D0)) (list (list 9.0D0 2190.633056640625D0 4.339994047768414D-4 7.109999656677246D0)) (list (list 9.0D0 2196.44677734375D0 4.042192886117846D-4 7.119999885559082D0)) (list (list 9.0D0 2198.990966796875D0 3.5076236235909164D-4 7.12999963760376D0)) (list (list 9.0D0 2188.485595703125D0 2.127092011505738D-4 7.139999866485596D0)) (list (list 9.0D0 2179.157958984375D0 8.521445124642924D-5 7.149999618530273D0)) (list (list 9.0D0 2191.409912109375D0 1.0286899487255141D-4 7.159999847412109D0)) (list (list 9.0D0 2203.662109375D0 1.2052353849867359D-4 7.170000076293945D0)) (list (list 9.0D0 2192.324462890625D0 1.3238853716757149D-4 7.179999828338623D0)) (list (list 9.0D0 2185.400146484375D0 7.379251474048943D-5 7.190000057220459D0)) (list (list 10.0D0 3472.548095703125D0 1.189873437397182D-4 0.04999999701976776D0)) (list (list 10.0D0 3474.3154296875D0 1.3154876069165766D-4 0.05999999865889549D0)) (list (list 10.0D0 3476.082763671875D0 1.4411017764359713D-4 0.07000000029802323D0)) (list (list 10.0D0 3476.13720703125D0 1.5373587666545063D-4 0.07999999821186066D0)) (list (list 10.0D0 3475.716064453125D0 1.7972549539990723D-4 0.08999999612569809D0)) (list (list 10.0D0 3478.861328125D0 2.622912870720029D-4 0.09999999403953552D0)) (list (list 10.0D0 3482.006591796875D0 3.448571660555899D-4 0.10999999940395355D0)) (list (list 10.0D0 3486.3798828125D0 4.418082826305181D-4 0.11999999731779099D0)) (list (list 10.0D0 3490.23193359375D0 5.028093582950532D-4 0.12999999523162842D0)) (list (list 10.0D0 3492.96533203125D0 5.166551563888788D-4 0.14000000059604645D0)) (list (list 10.0D0 3495.053466796875D0 5.089971818961203D-4 0.14999999105930328D0)) (list (list 10.0D0 3495.828369140625D0 5.191919626668096D-4 0.1599999964237213D0)) (list (list 10.0D0 3495.521728515625D0 5.369734135456383D-4 0.17000000178813934D0)) (list (list 10.0D0 3494.864501953125D0 5.478146485984325D-4 0.17999999225139618D0)) (list (list 10.0D0 3494.3798828125D0 5.415545892901719D-4 0.1899999976158142D0)) (list (list 10.0D0 3494.402099609375D0 5.122326547279954D-4 0.19999998807907105D0)) (list (list 10.0D0 3494.42578125D0 4.7774973791092634D-4 0.20999999344348908D0)) (list (list 10.0D0 3494.850830078125D0 4.616904188878834D-4 0.2199999988079071D0)) (list (list 10.0D0 3496.143310546875D0 4.930862342007458D-4 0.22999998927116394D0)) (list (list 10.0D0 3498.147216796875D0 5.644429475069046D-4 0.23999999463558197D0)) (list (list 10.0D0 3500.119384765625D0 6.365370936691761D-4 0.25D0)) (list (list 10.0D0 3499.351806640625D0 7.729324861429632D-4 0.25999999046325684D0)) (list (list 10.0D0 3497.799560546875D0 9.572773706167936D-4 0.26999998092651367D0)) (list (list 10.0D0 3495.965087890625D0 0.0011831872398033739D0 0.2800000011920929D0)) (list (list 10.0D0 3494.235595703125D0 0.001428602379746735D0 0.28999999165534973D0)) (list (list 10.0D0 3492.913818359375D0 0.0016571234446018935D0 0.29999998211860657D0)) (list (list 10.0D0 3492.606201171875D0 0.0018349987221881748D0 0.3100000023841858D0)) (list (list 10.0D0 3492.827880859375D0 0.002002248540520668D0 0.3199999928474426D0)) (list (list 10.0D0 3493.3125D0 0.0021583400666713715D0 0.32999998331069947D0)) (list (list 10.0D0 3493.806884765625D0 0.0022856909781694413D0 0.3400000035762787D0)) (list (list 10.0D0 3494.061767578125D0 0.002352681942284107D0 0.3499999940395355D0)) (list (list 10.0D0 3493.840087890625D0 0.002336618723347783D0 0.35999998450279236D0)) (list (list 10.0D0 3493.382568359375D0 0.0023117116652429104D0 0.3700000047683716D0)) (list (list 10.0D0 3492.839599609375D0 0.0022958156187087298D0 0.3799999952316284D0)) (list (list 10.0D0 3492.363525390625D0 0.0022879554890096188D0 0.38999998569488526D0)) (list (list 10.0D0 3492.109375D0 0.002271743956953287D0 0.3999999761581421D0)) (list (list 10.0D0 3492.173095703125D0 0.002233142266049981D0 0.4099999964237213D0)) (list (list 10.0D0 3492.315185546875D0 0.002202682662755251D0 0.41999998688697815D0)) (list (list 10.0D0 3492.368408203125D0 0.002188768470659852D0 0.429999977350235D0)) (list (list 10.0D0 3492.202880859375D0 0.0021883423905819655D0 0.4399999976158142D0)) (list (list 10.0D0 3491.722900390625D0 0.002188656711950898D0 0.44999998807907105D0)) (list (list 10.0D0 3491.047607421875D0 0.0021674896124750376D0 0.4599999785423279D0)) (list (list 10.0D0 3490.6376953125D0 0.002118533942848444D0 0.4699999988079071D0)) (list (list 10.0D0 3490.5712890625D0 0.0020500679966062308D0 0.47999998927116394D0)) (list (list 10.0D0 3490.8046875D0 0.0019780404400080443D0 0.4899999797344208D0)) (list (list 10.0D0 3491.19189453125D0 0.0019252370111644268D0 0.5D0)) (list (list 10.0D0 3491.546142578125D0 0.0019211514154449106D0 0.5099999904632568D0)) (list (list 10.0D0 3491.72216796875D0 0.0019340444123372436D0 0.5199999809265137D0)) (list (list 10.0D0 3491.738037109375D0 0.0019385924097150565D0 0.5299999713897705D0)) (list (list 10.0D0 3491.677490234375D0 0.001925234217196703D0 0.5399999618530273D0)) (list (list 10.0D0 3491.674072265625D0 0.0018976429710164667D0 0.550000011920929D0)) (list (list 10.0D0 3491.689697265625D0 0.0019125958206132055D0 0.5600000023841858D0)) (list (list 10.0D0 3491.440673828125D0 0.00201223767362535D0 0.5699999928474426D0)) (list (list 10.0D0 3491.000732421875D0 0.0021991541143506766D0 0.5799999833106995D0)) (list (list 10.0D0 3490.494140625D0 0.0024572766851633787D0 0.5899999737739563D0)) (list (list 10.0D0 3490.083740234375D0 0.0027527417987585068D0 0.5999999642372131D0)) (list (list 10.0D0 3489.748046875D0 0.0030120480805635453D0 0.6100000143051148D0)) (list (list 10.0D0 3489.510009765625D0 0.003204904729500413D0 0.6200000047683716D0)) (list (list 10.0D0 3489.497802734375D0 0.0033292786683887244D0 0.6299999952316284D0)) (list (list 10.0D0 3489.694091796875D0 0.003383411094546318D0 0.6399999856948853D0)) (list (list 10.0D0 3489.95654296875D0 0.00336720934137702D0 0.6499999761581421D0)) (list (list 10.0D0 3489.683349609375D0 0.0032530510798096657D0 0.6599999666213989D0)) (list (list 10.0D0 3488.984130859375D0 0.0031048511154949665D0 0.6699999570846558D0)) (list (list 10.0D0 3488.300048828125D0 0.002966430736705661D0 0.6800000071525574D0)) (list (list 10.0D0 3487.939697265625D0 0.002854069462046027D0 0.6899999976158142D0)) (list (list 10.0D0 3488.113525390625D0 0.0027641518972814083D0 0.699999988079071D0)) (list (list 10.0D0 3488.679443359375D0 0.0026636484544724226D0 0.7099999785423279D0)) (list (list 10.0D0 3489.019775390625D0 0.0025299021508544684D0 0.7199999690055847D0)) (list (list 10.0D0 3488.961669921875D0 0.002386848907917738D0 0.7299999594688416D0)) (list (list 10.0D0 3488.568359375D0 0.002267300384119153D0 0.7400000095367432D0)) (list (list 10.0D0 3488.0751953125D0 0.0022095295134931803D0 0.75D0)) (list (list 10.0D0 3487.671142578125D0 0.0022150627337396145D0 0.7599999904632568D0)) (list (list 10.0D0 3487.25341796875D0 0.002194181317463517D0 0.7699999809265137D0)) (list (list 10.0D0 3486.950927734375D0 0.0021201486233621836D0 0.7799999713897705D0)) (list (list 10.0D0 3486.839599609375D0 0.0019936729222536087D0 0.7899999618530273D0)) (list (list 10.0D0 3486.9375D0 0.001836236915551126D0 0.7999999523162842D0)) (list (list 10.0D0 3486.769287109375D0 0.001691315439529717D0 0.8100000023841858D0)) (list (list 10.0D0 3486.433349609375D0 0.0015642686048522592D0 0.8199999928474426D0)) (list (list 10.0D0 3486.412109375D0 0.001442541484721005D0 0.8299999833106995D0)) (list (list 10.0D0 3486.890869140625D0 0.0013217575615271926D0 0.8399999737739563D0)) (list (list 10.0D0 3487.822021484375D0 0.0012027891352772713D0 0.8499999642372131D0)) (list (list 10.0D0 3488.33349609375D0 0.0010962971718981862D0 0.85999995470047D0)) (list (list 10.0D0 3488.358642578125D0 0.001008271356113255D0 0.8700000047683716D0)) (list (list 10.0D0 3488.2412109375D0 9.368718019686639D-4 0.8799999952316284D0)) (list (list 10.0D0 3488.197998046875D0 8.759113261476159D-4 0.8899999856948853D0)) (list (list 10.0D0 3488.364013671875D0 8.157917181961238D-4 0.8999999761581421D0)) (list (list 10.0D0 3488.5498046875D0 7.485509850084782D-4 0.9099999666213989D0)) (list (list 10.0D0 3488.603271484375D0 6.848562625236809D-4 0.9199999570846558D0)) (list (list 10.0D0 3488.602783203125D0 6.325904396362603D-4 0.9300000071525574D0)) (list (list 10.0D0 3488.6708984375D0 5.965129821561277D-4 0.9399999976158142D0)) (list (list 10.0D0 3488.960693359375D0 5.787992267869413D-4 0.949999988079071D0)) (list (list 10.0D0 3489.62744140625D0 5.758351762779057D-4 0.9599999785423279D0)) (list (list 10.0D0 3490.26025390625D0 5.696278531104326D-4 0.9699999690055847D0)) (list (list 10.0D0 3490.322265625D0 5.606947233900428D-4 0.9799999594688416D0)) (list (list 10.0D0 3489.789794921875D0 5.589154316112399D-4 0.9899999499320984D0)) (list (list 10.0D0 3488.96923828125D0 5.801644874736667D-4 1.0D0)) (list (list 10.0D0 3488.352783203125D0 6.464994512498379D-4 1.0099999904632569D0)) (list (list 10.0D0 3488.094970703125D0 7.363034528680146D-4 1.0199999809265137D0)) (list (list 10.0D0 3487.764404296875D0 8.355622412636876D-4 1.0299999713897705D0)) (list (list 10.0D0 3487.099609375D0 9.361827978864312D-4 1.0399999618530274D0)) (list (list 10.0D0 3485.977294921875D0 0.0010333306854590774D0 1.0499999523162842D0)) (list (list 10.0D0 3485.072021484375D0 0.0011315721785649658D0 1.059999942779541D0)) (list (list 10.0D0 3484.9755859375D0 0.001222373335622251D0 1.0699999332427979D0)) (list (list 10.0D0 3485.2939453125D0 0.0012916470877826214D0 1.0799999237060547D0)) (list (list 10.0D0 3485.572509765625D0 0.0013232409255579114D0 1.090000033378601D0)) (list (list 10.0D0 3485.333984375D0 0.0013018252793699503D0 1.100000023841858D0)) (list (list 10.0D0 3484.714111328125D0 0.0012304760748520494D0 1.1100000143051148D0)) (list (list 10.0D0 3484.660400390625D0 0.0011736046290025115D0 1.1200000047683716D0)) (list (list 10.0D0 3484.951904296875D0 0.0011497673112899065D0 1.1299999952316285D0)) (list (list 10.0D0 3485.15478515625D0 0.001154098892584443D0 1.1399999856948853D0)) (list (list 10.0D0 3484.7373046875D0 0.0011674194829538465D0 1.149999976158142D0)) (list (list 10.0D0 3483.761474609375D0 0.0011676280992105604D0 1.159999966621399D0)) (list (list 10.0D0 3483.23876953125D0 0.0011575384996831417D0 1.1699999570846558D0)) (list (list 10.0D0 3483.2421875D0 0.0011315146693959833D0 1.1799999475479126D0)) (list (list 10.0D0 3483.590576171875D0 0.0010830068495124579D0 1.1899999380111695D0)) (list (list 10.0D0 3483.927734375D0 0.0010058146435767413D0 1.1999999284744263D0)) (list (list 10.0D0 3483.68994140625D0 8.944913279265165D-4 1.209999918937683D0)) (list (list 10.0D0 3483.007080078125D0 7.759463042020798D-4 1.2200000286102295D0)) (list (list 10.0D0 3482.509765625D0 6.679966463707387D-4 1.2300000190734864D0)) (list (list 10.0D0 3482.6279296875D0 5.829356960020959D-4 1.2400000095367432D0)) (list (list 10.0D0 3483.66650390625D0 5.29851415194571D-4 1.25D0)) (list (list 10.0D0 3485.658447265625D0 5.179778090678155D-4 1.2599999904632569D0)) (list (list 10.0D0 3487.027587890625D0 5.031598848290741D-4 1.2699999809265137D0)) (list (list 10.0D0 3487.136474609375D0 4.6467920765280724D-4 1.2799999713897705D0)) (list (list 10.0D0 3485.65234375D0 4.0720379911363125D-4 1.2899999618530274D0)) (list (list 10.0D0 3482.6533203125D0 3.5185227170586586D-4 1.2999999523162842D0)) (list (list 10.0D0 3480.95068359375D0 3.5884944372810424D-4 1.309999942779541D0)) (list (list 10.0D0 3481.910888671875D0 4.1556431096978486D-4 1.3199999332427979D0)) (list (list 10.0D0 3483.927490234375D0 5.265431827865541D-4 1.3299999237060547D0)) (list (list 10.0D0 3485.343994140625D0 6.703277467750013D-4 1.3399999141693116D0)) (list (list 10.0D0 3484.569580078125D0 8.109392365440726D-4 1.350000023841858D0)) (list (list 10.0D0 3482.093017578125D0 9.24210820812732D-4 1.3600000143051148D0)) (list (list 10.0D0 3479.94775390625D0 0.0010462442878633738D0 1.3700000047683716D0)) (list (list 10.0D0 3478.966552734375D0 0.0011528520844876767D0 1.3799999952316285D0)) (list (list 10.0D0 3479.28857421875D0 0.0012331644538789988D0 1.3899999856948853D0)) (list (list 10.0D0 3480.600341796875D0 0.001284344238229096D0 1.399999976158142D0)) (list (list 10.0D0 3481.705810546875D0 0.0013174375053495169D0 1.409999966621399D0)) (list (list 10.0D0 3481.960205078125D0 0.0013267892645671964D0 1.4199999570846558D0)) (list (list 10.0D0 3481.4814453125D0 0.0013178704539313913D0 1.4299999475479126D0)) (list (list 10.0D0 3480.52294921875D0 0.001300834002904594D0 1.4399999380111695D0)) (list (list 10.0D0 3479.48046875D0 0.0012887088814750314D0 1.4499999284744263D0)) (list (list 10.0D0 3479.22216796875D0 0.0012911335797980428D0 1.459999918937683D0)) (list (list 10.0D0 3479.43359375D0 0.001301640528254211D0 1.46999990940094D0)) (list (list 10.0D0 3479.39208984375D0 0.0013147861463949085D0 1.4800000190734864D0)) (list (list 10.0D0 3478.9326171875D0 0.001330368802882731D0 1.4900000095367432D0)) (list (list 10.0D0 3478.20068359375D0 0.001349091762676835D0 1.5D0)) (list (list 10.0D0 3477.9619140625D0 0.0013575070770457387D0 1.5099999904632569D0)) (list (list 10.0D0 3478.007080078125D0 0.001315239816904068D0 1.5199999809265137D0)) (list (list 10.0D0 3477.797119140625D0 0.0012223589001223445D0 1.5299999713897705D0)) (list (list 10.0D0 3477.279052734375D0 0.001099816639907658D0 1.5399999618530274D0)) (list (list 10.0D0 3476.668701171875D0 9.817448444664479D-4 1.5499999523162842D0)) (list (list 10.0D0 3476.74072265625D0 9.185744565911591D-4 1.559999942779541D0)) (list (list 10.0D0 3477.69091796875D0 8.925631991587579D-4 1.5699999332427979D0)) (list (list 10.0D0 3478.901611328125D0 8.741857600398362D-4 1.5799999237060547D0)) (list (list 10.0D0 3479.912841796875D0 8.43475922010839D-4 1.5899999141693116D0)) (list (list 10.0D0 3480.343505859375D0 7.860335754230619D-4 1.5999999046325684D0)) (list (list 10.0D0 3480.113037109375D0 7.092186133377254D-4 1.6100000143051148D0)) (list (list 10.0D0 3480.09765625D0 6.653845775872469D-4 1.6200000047683716D0)) (list (list 10.0D0 3480.30908203125D0 6.687347195111215D-4 1.6299999952316285D0)) (list (list 10.0D0 3480.4326171875D0 7.140490342862904D-4 1.6399999856948853D0)) (list (list 10.0D0 3480.0673828125D0 7.840808248147368D-4 1.649999976158142D0)) (list (list 10.0D0 3479.37744140625D0 8.461947436444461D-4 1.659999966621399D0)) (list (list 10.0D0 3479.078125D0 8.86453955899924D-4 1.6699999570846558D0)) (list (list 10.0D0 3479.204345703125D0 9.124273783527315D-4 1.6799999475479126D0)) (list (list 10.0D0 3479.556396484375D0 9.338994859717786D-4 1.6899999380111695D0)) (list (list 10.0D0 3479.799072265625D0 9.621738572604954D-4 1.6999999284744263D0)) (list (list 10.0D0 3479.400634765625D0 0.0010073743760585785D0 1.709999918937683D0)) (list (list 10.0D0 3478.3056640625D0 0.0010623651323840023D0 1.71999990940094D0)) (list (list 10.0D0 3476.959716796875D0 0.0011360434582456947D0 1.7300000190734864D0)) (list (list 10.0D0 3475.75732421875D0 0.001244337297976017D0 1.7400000095367432D0)) (list (list 10.0D0 3475.072021484375D0 0.0014058022061362863D0 1.75D0)) (list (list 10.0D0 3475.1630859375D0 0.0016518994234502316D0 1.7599999904632569D0)) (list (list 10.0D0 3475.35107421875D0 0.0019767580088227988D0 1.7699999809265137D0)) (list (list 10.0D0 3475.291015625D0 0.0023531692568212748D0 1.7799999713897705D0)) (list (list 10.0D0 3474.9072265625D0 0.002752888249233365D0 1.7899999618530274D0)) (list (list 10.0D0 3474.251708984375D0 0.003140049520879984D0 1.7999999523162842D0)) (list (list 10.0D0 3473.5029296875D0 0.0034378343261778355D0 1.809999942779541D0)) (list (list 10.0D0 3472.91064453125D0 0.0036126570776104927D0 1.8199999332427979D0)) (list (list 10.0D0 3472.46044921875D0 0.0036940814461559058D0 1.8299999237060547D0)) (list (list 10.0D0 3472.07177734375D0 0.003706726711243391D0 1.8399999141693116D0)) (list (list 10.0D0 3471.630126953125D0 0.00367572414688766D0 1.8499999046325684D0)) (list (list 10.0D0 3470.9912109375D0 0.0035974925849586726D0 1.8600000143051148D0)) (list (list 10.0D0 3470.310302734375D0 0.00345716648735106D0 1.8700000047683716D0)) (list (list 10.0D0 3469.707275390625D0 0.0032736684661358595D0 1.8799999952316285D0)) (list (list 10.0D0 3469.2451171875D0 0.0030754911713302136D0 1.8899999856948853D0)) (list (list 10.0D0 3468.97998046875D0 0.0028971878346055746D0 1.899999976158142D0)) (list (list 10.0D0 3469.1240234375D0 0.0027783657424151898D0 1.909999966621399D0)) (list (list 10.0D0 3469.75D0 0.0026906845159828663D0 1.9199999570846558D0)) (list (list 10.0D0 3470.666748046875D0 0.002605147659778595D0 1.9299999475479126D0)) (list (list 10.0D0 3471.654052734375D0 0.0025122829247266054D0 1.9399999380111695D0)) (list (list 10.0D0 3472.47265625D0 0.0024109098594635725D0 1.9499999284744263D0)) (list (list 10.0D0 3472.91552734375D0 0.002314037876203656D0 1.959999918937683D0)) (list (list 10.0D0 3473.017333984375D0 0.0022193333134055138D0 1.96999990940094D0)) (list (list 10.0D0 3472.980224609375D0 0.0021140689495950938D0 1.9799998998641968D0)) (list (list 10.0D0 3472.998046875D0 0.002000046195462346D0 1.9900000095367432D0)) (list (list 10.0D0 3473.250732421875D0 0.0018876442918553949D0 2.0D0)) (list (list 10.0D0 3473.803466796875D0 0.0018131702672690154D0 2.009999990463257D0)) (list (list 10.0D0 3474.14111328125D0 0.0017779340269044042D0 2.0199999809265137D0)) (list (list 10.0D0 3474.1669921875D0 0.0017508950550109148D0 2.0299999713897705D0)) (list (list 10.0D0 3474.023681640625D0 0.001712235389277339D0 2.0399999618530274D0)) (list (list 10.0D0 3473.94189453125D0 0.0016464227810502053D0 2.049999952316284D0)) (list (list 10.0D0 3474.128173828125D0 0.0015436953399330378D0 2.059999942779541D0)) (list (list 10.0D0 3474.31103515625D0 0.0014146328903734684D0 2.069999933242798D0)) (list (list 10.0D0 3474.529541015625D0 0.0012660007923841477D0 2.0799999237060547D0)) (list (list 10.0D0 3474.83056640625D0 0.0011088805040344596D0 2.0899999141693116D0)) (list (list 10.0D0 3475.190185546875D0 9.598618489690125D-4 2.0999999046325684D0)) (list (list 10.0D0 3475.060302734375D0 8.599162683822215D-4 2.109999895095825D0)) (list (list 10.0D0 3474.568115234375D0 8.399759535677731D-4 2.119999885559082D0)) (list (list 10.0D0 3474.30224609375D0 8.873965707607567D-4 2.129999876022339D0)) (list (list 10.0D0 3474.303466796875D0 9.879082208499313D-4 2.1399998664855957D0)) (list (list 10.0D0 3474.384765625D0 0.001121220993809402D0 2.1499998569488526D0)) (list (list 10.0D0 3474.009765625D0 0.001255464623682201D0 2.1599998474121094D0)) (list (list 10.0D0 3473.373291015625D0 0.0013646804727613926D0 2.169999837875366D0)) (list (list 10.0D0 3472.817138671875D0 0.0014500932302325964D0 2.180000066757202D0)) (list (list 10.0D0 3472.41455078125D0 0.0015145885990932584D0 2.190000057220459D0)) (list (list 10.0D0 3472.125732421875D0 0.0015628122491762042D0 2.200000047683716D0)) (list (list 10.0D0 3471.713623046875D0 0.0015980867901816965D0 2.2100000381469727D0)) (list (list 10.0D0 3471.37109375D0 0.0016277857357636095D0 2.2200000286102295D0)) (list (list 10.0D0 3471.20849609375D0 0.0016563902609050274D0 2.2300000190734864D0)) (list (list 10.0D0 3471.181640625D0 0.001684143440797925D0 2.240000009536743D0)) (list (list 10.0D0 3471.190185546875D0 0.0017105786828324199D0 2.25D0)) (list (list 10.0D0 3471.1220703125D0 0.0017380166100338102D0 2.259999990463257D0)) (list (list 10.0D0 3471.052978515625D0 0.0017744204960763455D0 2.2699999809265137D0)) (list (list 10.0D0 3470.870361328125D0 0.0018220823258161545D0 2.2799999713897705D0)) (list (list 10.0D0 3470.595458984375D0 0.00187701138202101D0 2.2899999618530274D0)) (list (list 10.0D0 3470.331787109375D0 0.0019306205213069916D0 2.299999952316284D0)) (list (list 10.0D0 3470.438232421875D0 0.0019590798765420914D0 2.309999942779541D0)) (list (list 10.0D0 3470.75537109375D0 0.0019461048068478704D0 2.319999933242798D0)) (list (list 10.0D0 3470.982177734375D0 0.0019034836441278458D0 2.3299999237060547D0)) (list (list 10.0D0 3471.085205078125D0 0.0018441457068547607D0 2.3399999141693116D0)) (list (list 10.0D0 3471.103515625D0 0.0017827408155426383D0 2.3499999046325684D0)) (list (list 10.0D0 3471.040283203125D0 0.0017340411432087422D0 2.359999895095825D0)) (list (list 10.0D0 3470.864501953125D0 0.0017038848018273712D0 2.369999885559082D0)) (list (list 10.0D0 3470.83740234375D0 0.0016988349379971624D0 2.379999876022339D0)) (list (list 10.0D0 3471.0341796875D0 0.0017252129036933184D0 2.3899998664855957D0)) (list (list 10.0D0 3471.406982421875D0 0.001786214066669345D0 2.3999998569488526D0)) (list (list 10.0D0 3471.5185546875D0 0.0018782210536301136D0 2.4099998474121094D0)) (list (list 10.0D0 3471.138916015625D0 0.0019849364180117846D0 2.419999837875366D0)) (list (list 10.0D0 3470.5966796875D0 0.0021091862581670285D0 2.429999828338623D0)) (list (list 10.0D0 3470.134765625D0 0.002246890217065811D0 2.440000057220459D0)) (list (list 10.0D0 3469.958251953125D0 0.002387851942330599D0 2.450000047683716D0)) (list (list 10.0D0 3470.1767578125D0 0.0025013089179992676D0 2.4600000381469727D0)) (list (list 10.0D0 3470.52392578125D0 0.002558257430791855D0 2.4700000286102295D0)) (list (list 10.0D0 3470.775634765625D0 0.002560450928285718D0 2.4800000190734864D0)) (list (list 10.0D0 3470.806396484375D0 0.0025096640456467867D0 2.490000009536743D0)) (list (list 10.0D0 3470.5302734375D0 0.0024118535220623017D0 2.5D0)) (list (list 10.0D0 3469.88525390625D0 0.0022765598259866238D0 2.509999990463257D0)) (list (list 10.0D0 3469.378173828125D0 0.0021391951013356448D0 2.5199999809265137D0)) (list (list 10.0D0 3469.284912109375D0 0.0020167501643300057D0 2.5299999713897705D0)) (list (list 10.0D0 3469.555908203125D0 0.0019150596344843507D0 2.5399999618530274D0)) (list (list 10.0D0 3470.0166015625D0 0.0018326782155781985D0 2.549999952316284D0)) (list (list 10.0D0 3470.353271484375D0 0.0017491290345788002D0 2.559999942779541D0)) (list (list 10.0D0 3470.7099609375D0 0.0016411194810643793D0 2.569999933242798D0)) (list (list 10.0D0 3471.103515625D0 0.001519393757916987D0 2.5799999237060547D0)) (list (list 10.0D0 3471.39794921875D0 0.0014022821560502053D0 2.5899999141693116D0)) (list (list 10.0D0 3471.471923828125D0 0.0013116768095642329D0 2.5999999046325684D0)) (list (list 10.0D0 3471.44873046875D0 0.0012803567806258798D0 2.609999895095825D0)) (list (list 10.0D0 3471.725341796875D0 0.001289419480599463D0 2.619999885559082D0)) (list (list 10.0D0 3472.20703125D0 0.0013004745123907924D0 2.629999876022339D0)) (list (list 10.0D0 3472.7060546875D0 0.0013010998954996467D0 2.6399998664855957D0)) (list (list 10.0D0 3473.044677734375D0 0.0012891578953713179D0 2.6499998569488526D0)) (list (list 10.0D0 3473.224609375D0 0.0012837555259466172D0 2.6599998474121094D0)) (list (list 10.0D0 3473.484130859375D0 0.0012919609434902668D0 2.669999837875366D0)) (list (list 10.0D0 3473.791259765625D0 0.0012902773451060057D0 2.679999828338623D0)) (list (list 10.0D0 3474.03564453125D0 0.0012613451108336449D0 2.690000057220459D0)) (list (list 10.0D0 3474.101806640625D0 0.0011925010476261378D0 2.700000047683716D0)) (list (list 10.0D0 3473.914306640625D0 0.0010795817943289876D0 2.7100000381469727D0)) (list (list 10.0D0 3474.01806640625D0 9.474268299527466D-4 2.7200000286102295D0)) (list (list 10.0D0 3474.677001953125D0 8.156747207976878D-4 2.7300000190734864D0)) (list (list 10.0D0 3475.56982421875D0 6.9762411294505D-4 2.740000009536743D0)) (list (list 10.0D0 3476.205810546875D0 6.046618218533695D-4 2.75D0)) (list (list 10.0D0 3475.93017578125D0 5.496067460626364D-4 2.759999990463257D0)) (list (list 10.0D0 3475.483642578125D0 5.400812951847911D-4 2.7699999809265137D0)) (list (list 10.0D0 3475.412841796875D0 5.553180235438049D-4 2.7799999713897705D0)) (list (list 10.0D0 3475.732666015625D0 5.809517460875213D-4 2.7899999618530274D0)) (list (list 10.0D0 3476.222900390625D0 6.034045363776386D-4 2.799999952316284D0)) (list (list 10.0D0 3476.167724609375D0 6.100032478570938D-4 2.809999942779541D0)) (list (list 10.0D0 3475.154541015625D0 6.10019254963845D-4 2.819999933242798D0)) (list (list 10.0D0 3474.13134765625D0 6.262398674152792D-4 2.8299999237060547D0)) (list (list 10.0D0 3473.760986328125D0 6.630966090597212D-4 2.8399999141693116D0)) (list (list 10.0D0 3474.4248046875D0 7.200103136710823D-4 2.8499999046325684D0)) (list (list 10.0D0 3475.6533203125D0 7.960054790601134D-4 2.859999895095825D0)) (list (list 10.0D0 3476.00390625D0 8.62636195961386D-4 2.869999885559082D0)) (list (list 10.0D0 3475.802978515625D0 9.113143896684051D-4 2.879999876022339D0)) (list (list 10.0D0 3475.49267578125D0 9.469372453168035D-4 2.8899998664855957D0)) (list (list 10.0D0 3475.48388671875D0 9.782090783119202D-4 2.8999998569488526D0)) (list (list 10.0D0 3475.921630859375D0 0.0010159374214708806D0 2.9099998474121094D0)) (list (list 10.0D0 3476.162109375D0 0.0010548923164606095D0 2.919999837875366D0)) (list (list 10.0D0 3475.90478515625D0 0.0010761874727904797D0 2.929999828338623D0)) (list (list 10.0D0 3475.198974609375D0 0.0010713341180235148D0 2.93999981880188D0)) (list (list 10.0D0 3474.23486328125D0 0.0010367210488766432D0 2.950000047683716D0)) (list (list 10.0D0 3473.4228515625D0 9.740781970322132D-4 2.9600000381469727D0)) (list (list 10.0D0 3473.03564453125D0 9.055013069882989D-4 2.9700000286102295D0)) (list (list 10.0D0 3473.01513671875D0 8.534853695891798D-4 2.9800000190734864D0)) (list (list 10.0D0 3473.358642578125D0 8.298672619275749D-4 2.990000009536743D0)) (list (list 10.0D0 3474.007080078125D0 8.415114716626704D-4 3.0D0)) (list (list 10.0D0 3474.716552734375D0 8.905185968615115D-4 3.009999990463257D0)) (list (list 10.0D0 3474.700927734375D0 9.455080726183951D-4 3.0199999809265137D0)) (list (list 10.0D0 3474.082763671875D0 9.86692844890058D-4 3.0299999713897705D0)) (list (list 10.0D0 3473.39501953125D0 0.0010055439779534936D0 3.0399999618530274D0)) (list (list 10.0D0 3473.20556640625D0 9.966794168576599D-4 3.049999952316284D0)) (list (list 10.0D0 3473.94921875D0 9.53233044128865D-4 3.059999942779541D0)) (list (list 10.0D0 3474.59033203125D0 8.941079140640795D-4 3.069999933242798D0)) (list (list 10.0D0 3474.8232421875D0 8.250823593698442D-4 3.0799999237060547D0)) (list (list 10.0D0 3474.95458984375D0 7.49587663449347D-4 3.0899999141693116D0)) (list (list 10.0D0 3475.31689453125D0 6.734649068675935D-4 3.0999999046325684D0)) (list (list 10.0D0 3475.92529296875D0 6.125499494373798D-4 3.109999895095825D0)) (list (list 10.0D0 3475.970458984375D0 5.855460185557604D-4 3.119999885559082D0)) (list (list 10.0D0 3475.53125D0 5.857941578142345D-4 3.129999876022339D0)) (list (list 10.0D0 3474.992919921875D0 6.071049720048904D-4 3.1399998664855957D0)) (list (list 10.0D0 3474.705810546875D0 6.419557030312717D-4 3.1499998569488526D0)) (list (list 10.0D0 3474.68798828125D0 6.821989663876593D-4 3.1599998474121094D0)) (list (list 10.0D0 3474.368896484375D0 7.18392024282366D-4 3.169999837875366D0)) (list (list 10.0D0 3473.908447265625D0 7.503158994950354D-4 3.179999828338623D0)) (list (list 10.0D0 3473.58837890625D0 7.826960063539445D-4 3.18999981880188D0)) (list (list 10.0D0 3473.642578125D0 8.206281345337629D-4 3.1999998092651367D0)) (list (list 10.0D0 3474.10009765625D0 8.682216284796596D-4 3.2100000381469727D0)) (list (list 10.0D0 3474.281005859375D0 9.075519628822804D-4 3.2200000286102295D0)) (list (list 10.0D0 3473.9443359375D0 9.232232114300132D-4 3.2300000190734864D0)) (list (list 10.0D0 3473.274169921875D0 9.136500302702189D-4 3.240000009536743D0)) (list (list 10.0D0 3472.58544921875D0 8.810659637674689D-4 3.25D0)) (list (list 10.0D0 3472.382568359375D0 8.281008340418339D-4 3.259999990463257D0)) (list (list 10.0D0 3472.744384765625D0 7.616793154738843D-4 3.2699999809265137D0)) (list (list 10.0D0 3473.20458984375D0 6.974698626436293D-4 3.2799999713897705D0)) (list (list 10.0D0 3473.427978515625D0 6.511452374979854D-4 3.2899999618530274D0)) (list (list 10.0D0 3473.20703125D0 6.375767407007515D-4 3.299999952316284D0)) (list (list 10.0D0 3472.64306640625D0 6.744638667441905D-4 3.309999942779541D0)) (list (list 10.0D0 3472.295166015625D0 7.369134691543877D-4 3.319999933242798D0)) (list (list 10.0D0 3472.387939453125D0 7.881658966653049D-4 3.3299999237060547D0)) (list (list 10.0D0 3472.69677734375D0 8.163727470673621D-4 3.3399999141693116D0)) (list (list 10.0D0 3472.924072265625D0 8.146999753080308D-4 3.3499999046325684D0)) (list (list 10.0D0 3472.7607421875D0 7.754286052659154D-4 3.359999895095825D0)) (list (list 10.0D0 3472.261474609375D0 7.11343134753406D-4 3.369999885559082D0)) (list (list 10.0D0 3471.98095703125D0 6.564612849615514D-4 3.379999876022339D0)) (list (list 10.0D0 3472.050048828125D0 6.300623062998056D-4 3.3899998664855957D0)) (list (list 10.0D0 3472.4404296875D0 6.442114245146513D-4 3.3999998569488526D0)) (list (list 10.0D0 3472.85986328125D0 7.011034176684916D-4 3.4099998474121094D0)) (list (list 10.0D0 3472.75732421875D0 7.744609611108899D-4 3.419999837875366D0)) (list (list 10.0D0 3472.43212890625D0 8.454911294393241D-4 3.429999828338623D0)) (list (list 10.0D0 3472.089111328125D0 9.002055157907307D-4 3.43999981880188D0)) (list (list 10.0D0 3471.892822265625D0 9.266709676012397D-4 3.4499998092651367D0)) (list (list 10.0D0 3471.9326171875D0 9.12735122255981D-4 3.4600000381469727D0)) (list (list 10.0D0 3471.820068359375D0 8.688716916367412D-4 3.4700000286102295D0)) (list (list 10.0D0 3471.49560546875D0 8.204151527024806D-4 3.4800000190734864D0)) (list (list 10.0D0 3471.16845703125D0 7.794394623488188D-4 3.490000009536743D0)) (list (list 10.0D0 3471.0673828125D0 7.548751309514046D-4 3.5D0)) (list (list 10.0D0 3471.399658203125D0 7.536957855336368D-4 3.509999990463257D0)) (list (list 10.0D0 3471.52587890625D0 7.802999462001026D-4 3.5199999809265137D0)) (list (list 10.0D0 3471.258056640625D0 8.207341306842864D-4 3.5299999713897705D0)) (list (list 10.0D0 3470.784423828125D0 8.606006158515811D-4 3.5399999618530274D0)) (list (list 10.0D0 3470.349609375D0 8.839581860229373D-4 3.549999952316284D0)) (list (list 10.0D0 3470.218017578125D0 8.682043990120292D-4 3.559999942779541D0)) (list (list 10.0D0 3470.3740234375D0 8.266803924925625D-4 3.569999933242798D0)) (list (list 10.0D0 3470.823486328125D0 7.990616140887141D-4 3.5799999237060547D0)) (list (list 10.0D0 3471.4599609375D0 8.023951668292284D-4 3.5899999141693116D0)) (list (list 10.0D0 3472.091552734375D0 8.425057749263942D-4 3.5999999046325684D0)) (list (list 10.0D0 3472.3271484375D0 9.064031182788312D-4 3.609999895095825D0)) (list (list 10.0D0 3472.29248046875D0 9.57577838562429D-4 3.619999885559082D0)) (list (list 10.0D0 3472.431884765625D0 9.830654598772526D-4 3.629999876022339D0)) (list (list 10.0D0 3472.71044921875D0 9.778460953384638D-4 3.6399998664855957D0)) (list (list 10.0D0 3472.998046875D0 9.420363930985332D-4 3.6499998569488526D0)) (list (list 10.0D0 3473.061279296875D0 8.823487441986799D-4 3.6599998474121094D0)) (list (list 10.0D0 3473.066650390625D0 8.315664599649608D-4 3.669999837875366D0)) (list (list 10.0D0 3473.058349609375D0 8.008995209820569D-4 3.679999828338623D0)) (list (list 10.0D0 3472.835205078125D0 7.855486473999918D-4 3.68999981880188D0)) (list (list 10.0D0 3472.351318359375D0 7.800399325788021D-4 3.6999998092651367D0)) (list (list 10.0D0 3472.03369140625D0 7.840978214517236D-4 3.7099997997283936D0)) (list (list 10.0D0 3472.59521484375D0 8.058082894422114D-4 3.7200000286102295D0)) (list (list 10.0D0 3473.4560546875D0 8.37378844153136D-4 3.7300000190734864D0)) (list (list 10.0D0 3474.034423828125D0 8.640065789222717D-4 3.740000009536743D0)) (list (list 10.0D0 3474.039794921875D0 8.73707584105432D-4 3.75D0)) (list (list 10.0D0 3473.89501953125D0 8.618941064924002D-4 3.759999990463257D0)) (list (list 10.0D0 3474.15478515625D0 8.351977448910475D-4 3.7699999809265137D0)) (list (list 10.0D0 3474.04443359375D0 7.901510107330978D-4 3.7799999713897705D0)) (list (list 10.0D0 3473.21484375D0 7.317736162804067D-4 3.7899999618530274D0)) (list (list 10.0D0 3471.81396484375D0 6.714279297739267D-4 3.799999952316284D0)) (list (list 10.0D0 3471.09521484375D0 6.343525601550937D-4 3.809999942779541D0)) (list (list 10.0D0 3471.630859375D0 6.286284187808633D-4 3.819999933242798D0)) (list (list 10.0D0 3472.090576171875D0 6.420254940167069D-4 3.8299999237060547D0)) (list (list 10.0D0 3472.0703125D0 6.670454749837518D-4 3.8399999141693116D0)) (list (list 10.0D0 3471.58984375D0 7.008541142567992D-4 3.8499999046325684D0)) (list (list 10.0D0 3471.455810546875D0 7.529549184255302D-4 3.859999895095825D0)) (list (list 10.0D0 3471.831298828125D0 8.145762258209288D-4 3.869999885559082D0)) (list (list 10.0D0 3472.13525390625D0 8.57872364576906D-4 3.879999876022339D0)) (list (list 10.0D0 3472.193359375D0 8.775594760663807D-4 3.8899998664855957D0)) (list (list 10.0D0 3471.963134765625D0 8.787409169599414D-4 3.8999998569488526D0)) (list (list 10.0D0 3471.59130859375D0 8.84274544660002D-4 3.9099998474121094D0)) (list (list 10.0D0 3471.34423828125D0 9.13610914722085D-4 3.919999837875366D0)) (list (list 10.0D0 3471.143310546875D0 9.400791022926569D-4 3.929999828338623D0)) (list (list 10.0D0 3470.982421875D0 9.475428378209472D-4 3.93999981880188D0)) (list (list 10.0D0 3470.931884765625D0 9.289178415201604D-4 3.9499998092651367D0)) (list (list 10.0D0 3471.246826171875D0 8.931343327276409D-4 3.9599997997283936D0)) (list (list 10.0D0 3471.9345703125D0 8.780687348917127D-4 3.9700000286102295D0)) (list (list 10.0D0 3472.35498046875D0 8.848370052874088D-4 3.9800000190734864D0)) (list (list 10.0D0 3472.12890625D0 9.0520188678056D-4 3.990000009536743D0)) (list (list 10.0D0 3471.214599609375D0 9.350920445285738D-4 4.0D0)) (list (list 10.0D0 3470.222900390625D0 9.836923563852907D-4 4.009999752044678D0)) (list (list 10.0D0 3469.932373046875D0 0.0010477062314748764D0 4.019999980926514D0)) (list (list 10.0D0 3470.082763671875D0 0.0011111448984593153D0 4.029999732971191D0)) (list (list 10.0D0 3470.37646484375D0 0.001169938244856894D0 4.039999961853027D0)) (list (list 10.0D0 3470.593017578125D0 0.0012226556427776814D0 4.049999713897705D0)) (list (list 10.0D0 3470.689208984375D0 0.0012708314461633563D0 4.059999942779541D0)) (list (list 10.0D0 3470.81494140625D0 0.001315539120696485D0 4.069999694824219D0)) (list (list 10.0D0 3470.8828125D0 0.0013533546589314938D0 4.079999923706055D0)) (list (list 10.0D0 3470.772705078125D0 0.0013811020180583D0 4.089999675750732D0)) (list (list 10.0D0 3470.438720703125D0 0.0013977735070511699D0 4.099999904632568D0)) (list (list 10.0D0 3469.979736328125D0 0.0014057240914553404D0 4.110000133514404D0)) (list (list 10.0D0 3469.751708984375D0 0.001408165437169373D0 4.119999885559082D0)) (list (list 10.0D0 3469.763916015625D0 0.00140868267044425D0 4.130000114440918D0)) (list (list 10.0D0 3469.95068359375D0 0.001412977115251124D0 4.139999866485596D0)) (list (list 10.0D0 3470.231689453125D0 0.0014277069130912424D0 4.150000095367432D0)) (list (list 10.0D0 3470.51953125D0 0.0014625948388129473D0 4.159999847412109D0)) (list (list 10.0D0 3470.62548828125D0 0.001525606494396925D0 4.170000076293945D0)) (list (list 10.0D0 3470.49951171875D0 0.0016036805463954807D0 4.179999828338623D0)) (list (list 10.0D0 3470.222412109375D0 0.0016880376497283578D0 4.190000057220459D0)) (list (list 10.0D0 3469.891845703125D0 0.001767247449606657D0 4.199999809265137D0)) (list (list 10.0D0 3469.616455078125D0 0.001822888501919806D0 4.210000038146973D0)) (list (list 10.0D0 3469.529296875D0 0.0018370861653238535D0 4.21999979019165D0)) (list (list 10.0D0 3469.529541015625D0 0.001827129744924605D0 4.230000019073486D0)) (list (list 10.0D0 3469.52880859375D0 0.0018086207564920187D0 4.239999771118164D0)) (list (list 10.0D0 3469.4755859375D0 0.0018006598111242056D0 4.25D0)) (list (list 10.0D0 3469.38623046875D0 0.001831277273595333D0 4.259999752044678D0)) (list (list 10.0D0 3469.476318359375D0 0.001946527510881424D0 4.269999980926514D0)) (list (list 10.0D0 3469.7763671875D0 0.002132825553417206D0 4.279999732971191D0)) (list (list 10.0D0 3470.21875D0 0.0023650219663977623D0 4.289999961853027D0)) (list (list 10.0D0 3470.67822265625D0 0.00260644662193954D0 4.299999713897705D0)) (list (list 10.0D0 3470.9287109375D0 0.0027994185220450163D0 4.309999942779541D0)) (list (list 10.0D0 3470.7392578125D0 0.0028781879227608443D0 4.319999694824219D0)) (list (list 10.0D0 3470.3330078125D0 0.0028759478591382504D0 4.329999923706055D0)) (list (list 10.0D0 3469.795654296875D0 0.002804678864777088D0 4.339999675750732D0)) (list (list 10.0D0 3469.14697265625D0 0.002675859024748206D0 4.349999904632568D0)) (list (list 10.0D0 3468.28369140625D0 0.0024970066733658314D0 4.360000133514404D0)) (list (list 10.0D0 3467.3994140625D0 0.00232356577180326D0 4.369999885559082D0)) (list (list 10.0D0 3466.88671875D0 0.0021834017243236304D0 4.380000114440918D0)) (list (list 10.0D0 3466.83349609375D0 0.0020652625244110823D0 4.389999866485596D0)) (list (list 10.0D0 3467.110107421875D0 0.0019519319757819176D0 4.400000095367432D0)) (list (list 10.0D0 3467.240478515625D0 0.0018196505261585117D0 4.409999847412109D0)) (list (list 10.0D0 3466.6708984375D0 0.0016701403073966504D0 4.420000076293945D0)) (list (list 10.0D0 3465.969482421875D0 0.0015429395716637373D0 4.429999828338623D0)) (list (list 10.0D0 3465.456787109375D0 0.001446470501832664D0 4.440000057220459D0)) (list (list 10.0D0 3465.256591796875D0 0.0013822810724377633D0 4.449999809265137D0)) (list (list 10.0D0 3465.1884765625D0 0.0013455805601552129D0 4.460000038146973D0)) (list (list 10.0D0 3465.083984375D0 0.0013284556334838272D0 4.46999979019165D0)) (list (list 10.0D0 3465.216796875D0 0.0013296166434884072D0 4.480000019073486D0)) (list (list 10.0D0 3465.527099609375D0 0.0013575945049524308D0 4.489999771118164D0)) (list (list 10.0D0 3465.8525390625D0 0.001417276682332158D0 4.5D0)) (list (list 10.0D0 3465.88037109375D0 0.0015089260414242745D0 4.509999752044678D0)) (list (list 10.0D0 3465.7109375D0 0.0016095710452646017D0 4.519999980926514D0)) (list (list 10.0D0 3465.71923828125D0 0.0016908753896132112D0 4.529999732971191D0)) (list (list 10.0D0 3465.9326171875D0 0.0017389501444995404D0 4.539999961853027D0)) (list (list 10.0D0 3466.2802734375D0 0.0017412003362551332D0 4.549999713897705D0)) (list (list 10.0D0 3466.562744140625D0 0.001681892666965723D0 4.559999942779541D0)) (list (list 10.0D0 3466.27099609375D0 0.0015417474787682295D0 4.569999694824219D0)) (list (list 10.0D0 3465.38916015625D0 0.0013861050829291344D0 4.579999923706055D0)) (list (list 10.0D0 3464.396484375D0 0.0012685763649642468D0 4.589999675750732D0)) (list (list 10.0D0 3463.759033203125D0 0.0012233295710757375D0 4.599999904632568D0)) (list (list 10.0D0 3463.917724609375D0 0.001259245676919818D0 4.610000133514404D0)) (list (list 10.0D0 3464.814697265625D0 0.0013239695690572262D0 4.619999885559082D0)) (list (list 10.0D0 3465.481201171875D0 0.0013657708186656237D0 4.630000114440918D0)) (list (list 10.0D0 3465.806884765625D0 0.0013835076242685318D0 4.639999866485596D0)) (list (list 10.0D0 3465.836669921875D0 0.0013863509520888329D0 4.650000095367432D0)) (list (list 10.0D0 3465.785400390625D0 0.0013957037590444088D0 4.659999847412109D0)) (list (list 10.0D0 3465.8671875D0 0.0014126928290352226D0 4.670000076293945D0)) (list (list 10.0D0 3465.94140625D0 0.001417346764355898D0 4.679999828338623D0)) (list (list 10.0D0 3465.97412109375D0 0.0014091067714616657D0 4.690000057220459D0)) (list (list 10.0D0 3466.00732421875D0 0.0013953994493931532D0 4.699999809265137D0)) (list (list 10.0D0 3466.19482421875D0 0.0013948817504569889D0 4.710000038146973D0)) (list (list 10.0D0 3466.635009765625D0 0.001425910391844809D0 4.71999979019165D0)) (list (list 10.0D0 3466.9814453125D0 0.001463935594074428D0 4.730000019073486D0)) (list (list 10.0D0 3467.09033203125D0 0.0014982903376221657D0 4.739999771118164D0)) (list (list 10.0D0 3466.9345703125D0 0.0015241567743942142D0 4.75D0)) (list (list 10.0D0 3466.637939453125D0 0.001544225844554603D0 4.759999752044678D0)) (list (list 10.0D0 3466.536376953125D0 0.0015660992357879878D0 4.769999980926514D0)) (list (list 10.0D0 3466.69287109375D0 0.0015954216942191124D0 4.779999732971191D0)) (list (list 10.0D0 3466.947998046875D0 0.0016384463524445892D0 4.789999961853027D0)) (list (list 10.0D0 3467.128662109375D0 0.001700452878139913D0 4.799999713897705D0)) (list (list 10.0D0 3467.04736328125D0 0.0017864962574094534D0 4.809999942779541D0)) (list (list 10.0D0 3467.021484375D0 0.001905631273984909D0 4.819999694824219D0)) (list (list 10.0D0 3467.332275390625D0 0.002043187152594328D0 4.829999923706055D0)) (list (list 10.0D0 3467.8837890625D0 0.0021977771539241076D0 4.839999675750732D0)) (list (list 10.0D0 3468.506591796875D0 0.002367044799029827D0 4.849999904632568D0)) (list (list 10.0D0 3468.940673828125D0 0.002547183074057102D0 4.859999656677246D0)) (list (list 10.0D0 3469.0888671875D0 0.002703671110793948D0 4.869999885559082D0)) (list (list 10.0D0 3469.03759765625D0 0.0028115224558860064D0 4.880000114440918D0)) (list (list 10.0D0 3468.830322265625D0 0.0028791038785129786D0 4.889999866485596D0)) (list (list 10.0D0 3468.5D0 0.0029230813961476088D0 4.900000095367432D0)) (list (list 10.0D0 3468.0634765625D0 0.0029696456622332335D0 4.909999847412109D0)) (list (list 10.0D0 3467.61181640625D0 0.003012258093804121D0 4.920000076293945D0)) (list (list 10.0D0 3467.322998046875D0 0.0030217627063393593D0 4.929999828338623D0)) (list (list 10.0D0 3467.236328125D0 0.002993005560711026D0 4.940000057220459D0)) (list (list 10.0D0 3467.333251953125D0 0.0029337939340621233D0 4.949999809265137D0)) (list (list 10.0D0 3467.5283203125D0 0.0028677002992480994D0 4.960000038146973D0)) (list (list 10.0D0 3467.618408203125D0 0.0028614692855626345D0 4.96999979019165D0)) (list (list 10.0D0 3467.77001953125D0 0.0029254795517772436D0 4.980000019073486D0)) (list (list 10.0D0 3467.989990234375D0 0.0030133419204503298D0 4.989999771118164D0)) (list (list 10.0D0 3468.112548828125D0 0.003051160601899028D0 5.0D0)) (list (list 10.0D0 3467.73828125D0 0.0029262874741107226D0 5.009999752044678D0)) (list (list 10.0D0 3465.924072265625D0 0.0025477732997387648D0 5.019999980926514D0)) (list (list 10.0D0 3463.775146484375D0 0.002140561817213893D0 5.029999732971191D0)) (list (list 10.0D0 3461.982421875D0 0.0017806811956688762D0 5.039999961853027D0)) (list (list 10.0D0 3461.08837890625D0 0.001515379874035716D0 5.049999713897705D0)) (list (list 10.0D0 3461.497802734375D0 0.0013633602065965534D0 5.059999942779541D0)) (list (list 10.0D0 3463.328369140625D0 0.0013860537437722087D0 5.069999694824219D0)) (list (list 10.0D0 3465.489501953125D0 0.0015591521514579654D0 5.079999923706055D0)) (list (list 10.0D0 3467.3173828125D0 0.0018395797815173865D0 5.089999675750732D0)) (list (list 10.0D0 3468.35205078125D0 0.0021628765389323235D0 5.099999904632568D0)) (list (list 10.0D0 3468.345703125D0 0.0024379699025303126D0 5.109999656677246D0)) (list (list 10.0D0 3467.578369140625D0 0.002576818922534585D0 5.119999885559082D0)) (list (list 10.0D0 3466.77880859375D0 0.002632844028994441D0 5.130000114440918D0)) (list (list 10.0D0 3466.236572265625D0 0.0026436978951096535D0 5.139999866485596D0)) (list (list 10.0D0 3466.082275390625D0 0.00264514097943902D0 5.150000095367432D0)) (list (list 10.0D0 3466.277099609375D0 0.002671306487172842D0 5.159999847412109D0)) (list (list 10.0D0 3466.388427734375D0 0.0027275593020021916D0 5.170000076293945D0)) (list (list 10.0D0 3466.16796875D0 0.0027681610081344843D0 5.179999828338623D0)) (list (list 10.0D0 3465.70263671875D0 0.002786396536976099D0 5.190000057220459D0)) (list (list 10.0D0 3465.14990234375D0 0.0027800467796623707D0 5.199999809265137D0)) (list (list 10.0D0 3464.747314453125D0 0.0027508800849318505D0 5.210000038146973D0)) (list (list 10.0D0 3464.7314453125D0 0.002661314094439149D0 5.21999979019165D0)) (list (list 10.0D0 3464.70703125D0 0.0025101369246840477D0 5.230000019073486D0)) (list (list 10.0D0 3464.4560546875D0 0.002326891990378499D0 5.239999771118164D0)) (list (list 10.0D0 3464.01171875D0 0.0021544673945754767D0 5.25D0)) (list (list 10.0D0 3463.6923828125D0 0.002051628427579999D0 5.259999752044678D0)) (list (list 10.0D0 3464.18798828125D0 0.002061599399894476D0 5.269999980926514D0)) (list (list 10.0D0 3464.830810546875D0 0.002106185769662261D0 5.279999732971191D0)) (list (list 10.0D0 3465.0986328125D0 0.0021282366942614317D0 5.289999961853027D0)) (list (list 10.0D0 3464.7744140625D0 0.0020924920681864024D0 5.299999713897705D0)) (list (list 10.0D0 3463.973388671875D0 0.0019869711250066758D0 5.309999942779541D0)) (list (list 10.0D0 3463.489013671875D0 0.0018436383688822389D0 5.319999694824219D0)) (list (list 10.0D0 3463.47314453125D0 0.0017109359614551068D0 5.329999923706055D0)) (list (list 10.0D0 3463.68798828125D0 0.0016001136973500252D0 5.339999675750732D0)) (list (list 10.0D0 3463.892333984375D0 0.001510669942945242D0 5.349999904632568D0)) (list (list 10.0D0 3463.8427734375D0 0.001429834170266986D0 5.359999656677246D0)) (list (list 10.0D0 3463.82470703125D0 0.0013453688006848097D0 5.369999885559082D0)) (list (list 10.0D0 3464.103515625D0 0.0012621467467397452D0 5.380000114440918D0)) (list (list 10.0D0 3464.561279296875D0 0.0011790728894993663D0 5.389999866485596D0)) (list (list 10.0D0 3465.02197265625D0 0.0010899081826210022D0 5.400000095367432D0)) (list (list 10.0D0 3465.2490234375D0 9.829039918258787D-4 5.409999847412109D0)) (list (list 10.0D0 3465.22607421875D0 8.614767575636506D-4 5.420000076293945D0)) (list (list 10.0D0 3465.48046875D0 7.73782841861248D-4 5.429999828338623D0)) (list (list 10.0D0 3466.152099609375D0 7.430784753523767D-4 5.440000057220459D0)) (list (list 10.0D0 3467.171630859375D0 7.7585328835994D-4 5.449999809265137D0)) (list (list 10.0D0 3468.254150390625D0 8.61545093357563D-4 5.460000038146973D0)) (list (list 10.0D0 3468.5888671875D0 9.498511208221316D-4 5.46999979019165D0)) (list (list 10.0D0 3468.5615234375D0 0.0010186616564169527D0 5.480000019073486D0)) (list (list 10.0D0 3468.41259765625D0 0.001068541663698852D0 5.489999771118164D0)) (list (list 10.0D0 3468.344482421875D0 0.0010981808882206679D0 5.5D0)) (list (list 10.0D0 3468.522705078125D0 0.0011042846599593759D0 5.509999752044678D0)) (list (list 10.0D0 3469.135009765625D0 0.0010704140877351165D0 5.519999980926514D0)) (list (list 10.0D0 3470.032958984375D0 0.001012832042761147D0 5.529999732971191D0)) (list (list 10.0D0 3471.1201171875D0 9.499222505837679D-4 5.539999961853027D0)) (list (list 10.0D0 3472.143310546875D0 8.997563854791224D-4 5.549999713897705D0)) (list (list 10.0D0 3472.695556640625D0 8.800376090221107D-4 5.559999942779541D0)) (list (list 10.0D0 3472.252197265625D0 9.182484936900437D-4 5.569999694824219D0)) (list (list 10.0D0 3471.71484375D0 0.001003177254460752D0 5.579999923706055D0)) (list (list 10.0D0 3471.3359375D0 0.001115256454795599D0 5.589999675750732D0)) (list (list 10.0D0 3471.14697265625D0 0.001230814727023244D0 5.599999904632568D0)) (list (list 10.0D0 3470.96435546875D0 0.0013220750261098147D0 5.609999656677246D0)) (list (list 10.0D0 3470.41845703125D0 0.0013580670347437263D0 5.619999885559082D0)) (list (list 10.0D0 3469.7041015625D0 0.001374817336909473D0 5.62999963760376D0)) (list (list 10.0D0 3468.953369140625D0 0.0013948569539934397D0 5.639999866485596D0)) (list (list 10.0D0 3468.3173828125D0 0.0014299378963187337D0 5.650000095367432D0)) (list (list 10.0D0 3467.965087890625D0 0.0014816068578511477D0 5.659999847412109D0)) (list (list 10.0D0 3468.167724609375D0 0.0015298211947083474D0 5.670000076293945D0)) (list (list 10.0D0 3468.584716796875D0 0.0015679617645218969D0 5.679999828338623D0)) (list (list 10.0D0 3468.8857421875D0 0.0016036636661738158D0 5.690000057220459D0)) (list (list 10.0D0 3468.90966796875D0 0.0016449602553620935D0 5.699999809265137D0)) (list (list 10.0D0 3468.6533203125D0 0.0017001326195895672D0 5.710000038146973D0)) (list (list 10.0D0 3468.494140625D0 0.0017558190738782287D0 5.71999979019165D0)) (list (list 10.0D0 3468.29541015625D0 0.0017742908094078303D0 5.730000019073486D0)) (list (list 10.0D0 3467.81396484375D0 0.001747505972161889D0 5.739999771118164D0)) (list (list 10.0D0 3467.056884765625D0 0.0016829896485432983D0 5.75D0)) (list (list 10.0D0 3466.261962890625D0 0.0016026367666199804D0 5.759999752044678D0)) (list (list 10.0D0 3466.119384765625D0 0.0015215822495520115D0 5.769999980926514D0)) (list (list 10.0D0 3466.32861328125D0 0.0014241487951949239D0 5.779999732971191D0)) (list (list 10.0D0 3466.35205078125D0 0.0012996020959690214D0 5.789999961853027D0)) (list (list 10.0D0 3465.9365234375D0 0.0011529792100191117D0 5.799999713897705D0)) (list (list 10.0D0 3465.087646484375D0 0.0010038211476057768D0 5.809999942779541D0)) (list (list 10.0D0 3464.7880859375D0 9.075654088519514D-4 5.819999694824219D0)) (list (list 10.0D0 3465.31591796875D0 8.591616642661393D-4 5.829999923706055D0)) (list (list 10.0D0 3466.300048828125D0 8.493722416460514D-4 5.839999675750732D0)) (list (list 10.0D0 3467.3935546875D0 8.659270242787898D-4 5.849999904632568D0)) (list (list 10.0D0 3468.2587890625D0 8.930608164519072D-4 5.859999656677246D0)) (list (list 10.0D0 3468.7392578125D0 9.128257515840232D-4 5.869999885559082D0)) (list (list 10.0D0 3469.091064453125D0 9.191381395794451D-4 5.87999963760376D0)) (list (list 10.0D0 3469.47705078125D0 9.165916708298028D-4 5.889999866485596D0)) (list (list 10.0D0 3469.9365234375D0 9.114930289797485D-4 5.900000095367432D0)) (list (list 10.0D0 3470.405029296875D0 9.117710287682712D-4 5.909999847412109D0)) (list (list 10.0D0 3470.647216796875D0 9.223255328834057D-4 5.920000076293945D0)) (list (list 10.0D0 3470.8583984375D0 9.325472638010979D-4 5.929999828338623D0)) (list (list 10.0D0 3471.02392578125D0 9.341055410914123D-4 5.940000057220459D0)) (list (list 10.0D0 3471.066162109375D0 9.25154541619122D-4 5.949999809265137D0)) (list (list 10.0D0 3470.867919921875D0 9.098813170567155D-4 5.960000038146973D0)) (list (list 10.0D0 3470.707763671875D0 9.264008840546012D-4 5.96999979019165D0)) (list (list 10.0D0 3470.71142578125D0 9.831348434090615D-4 5.980000019073486D0)) (list (list 10.0D0 3470.677490234375D0 0.0010626695584505797D0 5.989999771118164D0)) (list (list 10.0D0 3470.4501953125D0 0.0011460045352578164D0 6.0D0)) (list (list 10.0D0 3469.912109375D0 0.001212234841659665D0 6.009999752044678D0)) (list (list 10.0D0 3469.13037109375D0 0.0012521905591711402D0 6.019999980926514D0)) (list (list 10.0D0 3468.50732421875D0 0.0012832221109420062D0 6.029999732971191D0)) (list (list 10.0D0 3468.1845703125D0 0.001310210325755179D0 6.039999961853027D0)) (list (list 10.0D0 3468.2255859375D0 0.0013396547874435783D0 6.049999713897705D0)) (list (list 10.0D0 3468.62109375D0 0.0013796902494505048D0 6.059999942779541D0)) (list (list 10.0D0 3469.08349609375D0 0.001445268397219479D0 6.069999694824219D0)) (list (list 10.0D0 3469.23828125D0 0.001509688445366919D0 6.079999923706055D0)) (list (list 10.0D0 3468.985595703125D0 0.0015484921168535948D0 6.089999675750732D0)) (list (list 10.0D0 3468.37744140625D0 0.0015487759374082089D0 6.099999904632568D0)) (list (list 10.0D0 3467.588134765625D0 0.0015070230001583696D0 6.109999656677246D0)) (list (list 10.0D0 3466.71533203125D0 0.0014346846146509052D0 6.119999885559082D0)) (list (list 10.0D0 3466.121337890625D0 0.0013665534788742662D0 6.12999963760376D0)) (list (list 10.0D0 3466.09814453125D0 0.001307657570578158D0 6.139999866485596D0)) (list (list 10.0D0 3466.659912109375D0 0.0012568256352096796D0 6.150000095367432D0)) (list (list 10.0D0 3467.575927734375D0 0.0012071318924427033D0 6.159999847412109D0)) (list (list 10.0D0 3467.66455078125D0 0.0011191857047379017D0 6.170000076293945D0)) (list (list 10.0D0 3466.933349609375D0 0.0010092109441757203D0 6.179999828338623D0)) (list (list 10.0D0 3466.28662109375D0 9.195025195367634D-4 6.190000057220459D0)) (list (list 10.0D0 3466.260498046875D0 8.802601369097829D-4 6.199999809265137D0)) (list (list 10.0D0 3467.107666015625D0 9.124937932938337D-4 6.210000038146973D0)) (list (list 10.0D0 3468.023193359375D0 0.0010165157727897168D0 6.21999979019165D0)) (list (list 10.0D0 3468.3095703125D0 0.0011044885031878949D0 6.230000019073486D0)) (list (list 10.0D0 3468.371337890625D0 0.0011512825731188059D0 6.239999771118164D0)) (list (list 10.0D0 3468.524169921875D0 0.0011559322010725737D0 6.25D0)) (list (list 10.0D0 3469.019287109375D0 0.0011360649950802327D0 6.259999752044678D0)) (list (list 10.0D0 3469.54150390625D0 0.001135629485361278D0 6.269999980926514D0)) (list (list 10.0D0 3469.906005859375D0 0.0011587621411308647D0 6.279999732971191D0)) (list (list 10.0D0 3470.256103515625D0 0.0011966472957283259D0 6.289999961853027D0)) (list (list 10.0D0 3470.535888671875D0 0.001242473372258246D0 6.299999713897705D0)) (list (list 10.0D0 3470.562255859375D0 0.0012905150651931763D0 6.309999942779541D0)) (list (list 10.0D0 3470.21484375D0 0.0013474636944010854D0 6.319999694824219D0)) (list (list 10.0D0 3470.01318359375D0 0.0014110194751992822D0 6.329999923706055D0)) (list (list 10.0D0 3469.873046875D0 0.0014669490046799183D0 6.339999675750732D0)) (list (list 10.0D0 3469.677490234375D0 0.0015040304278954864D0 6.349999904632568D0)) (list (list 10.0D0 3469.302978515625D0 0.001513338997028768D0 6.359999656677246D0)) (list (list 10.0D0 3469.07763671875D0 0.0014928416348993779D0 6.369999885559082D0)) (list (list 10.0D0 3468.8447265625D0 0.0014409077120944858D0 6.37999963760376D0)) (list (list 10.0D0 3468.169189453125D0 0.0013599301455542446D0 6.389999866485596D0)) (list (list 10.0D0 3467.169921875D0 0.0012667702976614237D0 6.399999618530273D0)) (list (list 10.0D0 3466.348876953125D0 0.0011887629516422749D0 6.409999847412109D0)) (list (list 10.0D0 3466.728515625D0 0.0011555837700143457D0 6.420000076293945D0)) (list (list 10.0D0 3467.456298828125D0 0.0011709098471328617D0 6.429999828338623D0)) (list (list 10.0D0 3467.910400390625D0 0.0012181384954601527D0 6.440000057220459D0)) (list (list 10.0D0 3468.080810546875D0 0.0012835252564400435D0 6.449999809265137D0)) (list (list 10.0D0 3468.330322265625D0 0.001352489460259676D0 6.460000038146973D0)) (list (list 10.0D0 3469.000732421875D0 0.0013930624118074775D0 6.46999979019165D0)) (list (list 10.0D0 3469.369384765625D0 0.001395990140736103D0 6.480000019073486D0)) (list (list 10.0D0 3469.356201171875D0 0.001377455540932715D0 6.489999771118164D0)) (list (list 10.0D0 3469.03076171875D0 0.0013509156415238977D0 6.5D0)) (list (list 10.0D0 3468.576904296875D0 0.001328661572188139D0 6.509999752044678D0)) (list (list 10.0D0 3468.375D0 0.001307364902459085D0 6.519999980926514D0)) (list (list 10.0D0 3468.44482421875D0 0.0012824428267776967D0 6.529999732971191D0)) (list (list 10.0D0 3468.499755859375D0 0.0012534792767837644D0 6.539999961853027D0)) (list (list 10.0D0 3468.396240234375D0 0.0012201311765238643D0 6.549999713897705D0)) (list (list 10.0D0 3468.105224609375D0 0.001183337066322565D0 6.559999942779541D0)) (list (list 10.0D0 3468.23583984375D0 0.0011630738154053688D0 6.569999694824219D0)) (list (list 10.0D0 3468.863037109375D0 0.0011840867809951306D0 6.579999923706055D0)) (list (list 10.0D0 3469.614501953125D0 0.0012391427299007774D0 6.589999675750732D0)) (list (list 10.0D0 3470.18603515625D0 0.0013098753988742829D0 6.599999904632568D0)) (list (list 10.0D0 3470.32763671875D0 0.0013703848235309124D0 6.609999656677246D0)) (list (list 10.0D0 3470.227783203125D0 0.001402888330630958D0 6.619999885559082D0)) (list (list 10.0D0 3470.284423828125D0 0.0014367105904966593D0 6.62999963760376D0)) (list (list 10.0D0 3470.424560546875D0 0.0014837011694908143D0 6.639999866485596D0)) (list (list 10.0D0 3470.521484375D0 0.0015388267347589136D0 6.649999618530273D0)) (list (list 10.0D0 3470.4208984375D0 0.0015857823891565204D0 6.659999847412109D0)) (list (list 10.0D0 3470.083984375D0 0.0015820263652130962D0 6.670000076293945D0)) (list (list 10.0D0 3469.740234375D0 0.0015257721533998847D0 6.679999828338623D0)) (list (list 10.0D0 3469.467529296875D0 0.001437247614376247D0 6.690000057220459D0)) (list (list 10.0D0 3469.35986328125D0 0.0013397077564150095D0 6.699999809265137D0)) (list (list 10.0D0 3469.513427734375D0 0.001261032186448574D0 6.710000038146973D0)) (list (list 10.0D0 3469.961669921875D0 0.001246831496246159D0 6.71999979019165D0)) (list (list 10.0D0 3470.35302734375D0 0.0012830387568101287D0 6.730000019073486D0)) (list (list 10.0D0 3470.52978515625D0 0.0013350126100704074D0 6.739999771118164D0)) (list (list 10.0D0 3470.48291015625D0 0.0013819466112181545D0 6.75D0)) (list (list 10.0D0 3470.302490234375D0 0.001410264172591269D0 6.759999752044678D0)) (list (list 10.0D0 3470.292724609375D0 0.0014263185439631343D0 6.769999980926514D0)) (list (list 10.0D0 3470.54296875D0 0.0014565973542630673D0 6.779999732971191D0)) (list (list 10.0D0 3470.879638671875D0 0.0015089301159605384D0 6.789999961853027D0)) (list (list 10.0D0 3471.111328125D0 0.0015810868935659528D0 6.799999713897705D0)) (list (list 10.0D0 3471.049072265625D0 0.0016640695976093412D0 6.809999942779541D0)) (list (list 10.0D0 3470.727783203125D0 0.0017394596943631769D0 6.819999694824219D0)) (list (list 10.0D0 3470.53466796875D0 0.0018037070985883475D0 6.829999923706055D0)) (list (list 10.0D0 3470.50244140625D0 0.0018678972264751792D0 6.839999675750732D0)) (list (list 10.0D0 3470.62646484375D0 0.0019407891668379307D0 6.849999904632568D0)) (list (list 10.0D0 3470.875732421875D0 0.0020288066007196904D0 6.859999656677246D0)) (list (list 10.0D0 3471.232177734375D0 0.0021215081214904785D0 6.869999885559082D0)) (list (list 10.0D0 3471.462158203125D0 0.0021822804119437933D0 6.87999963760376D0)) (list (list 10.0D0 3471.525634765625D0 0.002209952101111412D0 6.889999866485596D0)) (list (list 10.0D0 3471.54296875D0 0.002216400345787406D0 6.899999618530273D0)) (list (list 10.0D0 3471.707275390625D0 0.0022206143476068974D0 6.909999847412109D0)) (list (list 10.0D0 3472.076904296875D0 0.0022313438821583987D0 6.920000076293945D0)) (list (list 10.0D0 3472.26953125D0 0.002198845613747835D0 6.929999828338623D0)) (list (list 10.0D0 3472.389404296875D0 0.0021154589485377074D0 6.940000057220459D0)) (list (list 10.0D0 3472.60791015625D0 0.001997247338294983D0 6.949999809265137D0)) (list (list 10.0D0 3473.11279296875D0 0.0018755339551717043D0 6.960000038146973D0)) (list (list 10.0D0 3473.855224609375D0 0.0018030331702902914D0 6.96999979019165D0)) (list (list 10.0D0 3474.708984375D0 0.001765805296599865D0 6.980000019073486D0)) (list (list 10.0D0 3475.724853515625D0 0.001742148189805448D0 6.989999771118164D0)) (list (list 10.0D0 3476.76953125D0 0.0017217753920704127D0 7.0D0)) (list (list 10.0D0 3477.59912109375D0 0.001697516068816185D0 7.009999752044678D0)) (list (list 10.0D0 3477.7275390625D0 0.0016499740304425359D0 7.019999980926514D0)) (list (list 10.0D0 3477.34375D0 0.0015682782977819443D0 7.029999732971191D0)) (list (list 10.0D0 3476.8818359375D0 0.0014474266208708287D0 7.039999961853027D0)) (list (list 10.0D0 3476.634765625D0 0.0012868726626038552D0 7.049999713897705D0)) (list (list 10.0D0 3476.802978515625D0 0.0010912681464105845D0 7.059999942779541D0)) (list (list 10.0D0 3477.175537109375D0 8.768304251134396D-4 7.069999694824219D0)) (list (list 10.0D0 3477.023681640625D0 6.689451402053237D-4 7.079999923706055D0)) (list (list 10.0D0 3476.465087890625D0 4.904051893390715D-4 7.089999675750732D0)) (list (list 10.0D0 3475.818359375D0 3.5681543522514403D-4 7.099999904632568D0)) (list (list 10.0D0 3475.445068359375D0 2.779125643428415D-4 7.109999656677246D0)) (list (list 10.0D0 3475.035888671875D0 2.5129481218755245D-4 7.119999885559082D0)) (list (list 10.0D0 3474.474365234375D0 2.4093348474707455D-4 7.12999963760376D0)) (list (list 10.0D0 3474.0185546875D0 2.3421377409249544D-4 7.139999866485596D0)) (list (list 10.0D0 3473.7412109375D0 2.272371348226443D-4 7.149999618530273D0)) (list (list 10.0D0 3473.63720703125D0 2.191788807976991D-4 7.159999847412109D0)) (list (list 10.0D0 3473.739990234375D0 2.0723987836390734D-4 7.170000076293945D0)) (list (list 10.0D0 3474.070556640625D0 1.896264438983053D-4 7.179999828338623D0)) (list (list 10.0D0 3474.460205078125D0 1.682098809396848D-4 7.190000057220459D0)) (list (list 10.0D0 3474.775390625D0 1.4394854952115566D-4 7.199999809265137D0)) (list (list 10.0D0 3474.891845703125D0 1.175682118628174D-4 7.210000038146973D0)) (list (list 10.0D0 3474.66455078125D0 8.881601388566196D-5 7.21999979019165D0)) (list (list 10.0D0 3472.726318359375D0 6.0549551562871784D-5 7.230000019073486D0)) (list (list 10.0D0 3471.758544921875D0 2.6147386961383745D-5 7.239999771118164D0)) (list (list 11.0D0 1598.851806640625D0 7.501199434045702D-5 0.04999999701976776D0)) (list (list 11.0D0 1592.8858642578125D0 1.23670426546596D-4 0.05999999865889549D0)) (list (list 11.0D0 1586.9197998046875D0 1.7232884420081973D-4 0.07000000029802323D0)) (list (list 11.0D0 1584.9122314453125D0 3.768625610973686D-4 0.07999999821186066D0)) (list (list 11.0D0 1586.8095703125D0 7.351650856435299D-4 0.08999999612569809D0)) (list (list 11.0D0 1588.6956787109375D0 0.0010997322387993336D0 0.09999999403953552D0)) (list (list 11.0D0 1588.109375D0 0.002839610679075122D0 0.10999999940395355D0)) (list (list 11.0D0 1587.52294921875D0 0.004579487722367048D0 0.11999999731779099D0)) (list (list 11.0D0 1585.7781982421875D0 0.006717777345329523D0 0.12999999523162842D0)) (list (list 11.0D0 1583.267578125D0 0.009285107254981995D0 0.14000000059604645D0)) (list (list 11.0D0 1581.8287353515625D0 0.011966299265623093D0 0.14999999105930328D0)) (list (list 11.0D0 1581.459228515625D0 0.014507398940622807D0 0.1599999964237213D0)) (list (list 11.0D0 1581.4376220703125D0 0.016830891370773316D0 0.17000000178813934D0)) (list (list 11.0D0 1581.549560546875D0 0.01883121393620968D0 0.17999999225139618D0)) (list (list 11.0D0 1581.6864013671875D0 0.02042839489877224D0 0.1899999976158142D0)) (list (list 11.0D0 1581.836181640625D0 0.021569591015577317D0 0.19999998807907105D0)) (list (list 11.0D0 1582.227294921875D0 0.02228524349629879D0 0.20999999344348908D0)) (list (list 11.0D0 1582.8331298828125D0 0.02280455268919468D0 0.2199999988079071D0)) (list (list 11.0D0 1583.5711669921875D0 0.023037860170006752D0 0.22999998927116394D0)) (list (list 11.0D0 1584.316650390625D0 0.02282838709652424D0 0.23999999463558197D0)) (list (list 11.0D0 1584.9013671875D0 0.021960116922855377D0 0.25D0)) (list (list 11.0D0 1584.9039306640625D0 0.019970543682575226D0 0.25999999046325684D0)) (list (list 11.0D0 1584.4627685546875D0 0.017261667177081108D0 0.26999998092651367D0)) (list (list 11.0D0 1583.547607421875D0 0.013976769521832466D0 0.2800000011920929D0)) (list (list 11.0D0 1581.4954833984375D0 0.010324490256607533D0 0.28999999165534973D0)) (list (list 11.0D0 1577.1116943359375D0 0.006602336652576923D0 0.29999998211860657D0)) (list (list 11.0D0 1569.8455810546875D0 0.004569672513753176D0 0.3100000023841858D0)) (list (list 11.0D0 1566.6256103515625D0 0.0034598088823258877D0 0.3199999928474426D0)) (list (list 11.0D0 1566.4776611328125D0 0.002924143336713314D0 0.32999998331069947D0)) (list (list 11.0D0 1568.007080078125D0 0.0027517545968294144D0 0.3400000035762787D0)) (list (list 11.0D0 1569.3616943359375D0 0.0028263588901609183D0 0.3499999940395355D0)) (list (list 11.0D0 1566.996826171875D0 0.0026879210490733385D0 0.35999998450279236D0)) (list (list 11.0D0 1564.0908203125D0 0.0026530770119279623D0 0.3700000047683716D0)) (list (list 11.0D0 1562.6192626953125D0 0.0027689957059919834D0 0.3799999952316284D0)) (list (list 11.0D0 1563.1422119140625D0 0.0030384135898202658D0 0.38999998569488526D0)) (list (list 11.0D0 1565.0103759765625D0 0.0034197301138192416D0 0.3999999761581421D0)) (list (list 11.0D0 1565.5880126953125D0 0.003613104345276952D0 0.4099999964237213D0)) (list (list 11.0D0 1564.8416748046875D0 0.0035717766731977463D0 0.41999998688697815D0)) (list (list 11.0D0 1564.187744140625D0 0.003537555690854788D0 0.429999977350235D0)) (list (list 11.0D0 1564.291259765625D0 0.003661043243482709D0 0.4399999976158142D0)) (list (list 11.0D0 1565.2080078125D0 0.004018520005047321D0 0.44999998807907105D0)) (list (list 11.0D0 1565.81005859375D0 0.004469742998480797D0 0.4599999785423279D0)) (list (list 11.0D0 1565.5693359375D0 0.00481279194355011D0 0.4699999988079071D0)) (list (list 11.0D0 1565.42138671875D0 0.005168223287910223D0 0.47999998927116394D0)) (list (list 11.0D0 1565.9619140625D0 0.0056599644012749195D0 0.4899999797344208D0)) (list (list 11.0D0 1567.5098876953125D0 0.006415863987058401D0 0.5D0)) (list (list 11.0D0 1569.401123046875D0 0.007549976464360952D0 0.5099999904632568D0)) (list (list 11.0D0 1570.4508056640625D0 0.008499891497194767D0 0.5199999809265137D0)) (list (list 11.0D0 1570.9796142578125D0 0.009063946083188057D0 0.5299999713897705D0)) (list (list 11.0D0 1571.1865234375D0 0.00916423462331295D0 0.5399999618530273D0)) (list (list 11.0D0 1571.1851806640625D0 0.008824442513287068D0 0.550000011920929D0)) (list (list 11.0D0 1570.572509765625D0 0.008038880303502083D0 0.5600000023841858D0)) (list (list 11.0D0 1569.348876953125D0 0.007044993340969086D0 0.5699999928474426D0)) (list (list 11.0D0 1567.66845703125D0 0.005956523586064577D0 0.5799999833106995D0)) (list (list 11.0D0 1565.52685546875D0 0.0048772781156003475D0 0.5899999737739563D0)) (list (list 11.0D0 1562.8402099609375D0 0.003912386484444141D0 0.5999999642372131D0)) (list (list 11.0D0 1560.2135009765625D0 0.0032868203707039357D0 0.6100000143051148D0)) (list (list 11.0D0 1559.26904296875D0 0.0028533637523651123D0 0.6200000047683716D0)) (list (list 11.0D0 1560.031494140625D0 0.0026010230649262667D0 0.6299999952316284D0)) (list (list 11.0D0 1561.6932373046875D0 0.0025298374239355326D0 0.6399999856948853D0)) (list (list 11.0D0 1562.79736328125D0 0.002634274074807763D0 0.6499999761581421D0)) (list (list 11.0D0 1562.1871337890625D0 0.0026927602011710406D0 0.6599999666213989D0)) (list (list 11.0D0 1561.156005859375D0 0.002613632008433342D0 0.6699999570846558D0)) (list (list 11.0D0 1560.095947265625D0 0.0024960634764283896D0 0.6800000071525574D0)) (list (list 11.0D0 1559.1507568359375D0 0.0024929738137871027D0 0.6899999976158142D0)) (list (list 11.0D0 1558.325439453125D0 0.0027966543566435576D0 0.699999988079071D0)) (list (list 11.0D0 1558.405517578125D0 0.003555978648364544D0 0.7099999785423279D0)) (list (list 11.0D0 1559.9549560546875D0 0.004361220635473728D0 0.7199999690055847D0)) (list (list 11.0D0 1562.080322265625D0 0.005085830111056566D0 0.7299999594688416D0)) (list (list 11.0D0 1564.154541015625D0 0.005677029024809599D0 0.7400000095367432D0)) (list (list 11.0D0 1565.6951904296875D0 0.006128103472292423D0 0.75D0)) (list (list 11.0D0 1566.2811279296875D0 0.006299410481005907D0 0.7599999904632568D0)) (list (list 11.0D0 1565.72607421875D0 0.006139907520264387D0 0.7699999809265137D0)) (list (list 11.0D0 1564.4925537109375D0 0.005860650911927223D0 0.7799999713897705D0)) (list (list 11.0D0 1563.35546875D0 0.0056874374859035015D0 0.7899999618530273D0)) (list (list 11.0D0 1563.3275146484375D0 0.00587095320224762D0 0.7999999523162842D0)) (list (list 11.0D0 1565.30078125D0 0.006819652859121561D0 0.8100000023841858D0)) (list (list 11.0D0 1567.3778076171875D0 0.008518251590430737D0 0.8199999928474426D0)) (list (list 11.0D0 1568.9022216796875D0 0.010583636350929737D0 0.8299999833106995D0)) (list (list 11.0D0 1569.9122314453125D0 0.012761909514665604D0 0.8399999737739563D0)) (list (list 11.0D0 1570.893798828125D0 0.01485670916736126D0 0.8499999642372131D0)) (list (list 11.0D0 1572.050537109375D0 0.016594232991337776D0 0.85999995470047D0)) (list (list 11.0D0 1572.990234375D0 0.017846671864390373D0 0.8700000047683716D0)) (list (list 11.0D0 1573.6114501953125D0 0.01877603307366371D0 0.8799999952316284D0)) (list (list 11.0D0 1574.052001953125D0 0.019628562033176422D0 0.8899999856948853D0)) (list (list 11.0D0 1574.6065673828125D0 0.02071298472583294D0 0.8999999761581421D0)) (list (list 11.0D0 1575.445068359375D0 0.02218119613826275D0 0.9099999666213989D0)) (list (list 11.0D0 1575.866455078125D0 0.02342066541314125D0 0.9199999570846558D0)) (list (list 11.0D0 1575.87060546875D0 0.024376701563596726D0 0.9300000071525574D0)) (list (list 11.0D0 1575.6263427734375D0 0.025171419605612755D0 0.9399999976158142D0)) (list (list 11.0D0 1575.4130859375D0 0.026027372106909752D0 0.949999988079071D0)) (list (list 11.0D0 1575.27392578125D0 0.02677752450108528D0 0.9599999785423279D0)) (list (list 11.0D0 1575.0767822265625D0 0.026957528665661812D0 0.9699999690055847D0)) (list (list 11.0D0 1574.95458984375D0 0.026606041938066483D0 0.9799999594688416D0)) (list (list 11.0D0 1574.970458984375D0 0.025882812216877938D0 0.9899999499320984D0)) (list (list 11.0D0 1575.1292724609375D0 0.025042148306965828D0 1.0D0)) (list (list 11.0D0 1575.1343994140625D0 0.024286100640892983D0 1.0099999904632569D0)) (list (list 11.0D0 1574.90966796875D0 0.023432591930031777D0 1.0199999809265137D0)) (list (list 11.0D0 1574.5936279296875D0 0.02229311130940914D0 1.0299999713897705D0)) (list (list 11.0D0 1574.16796875D0 0.02071639709174633D0 1.0399999618530274D0)) (list (list 11.0D0 1573.5029296875D0 0.018599333241581917D0 1.0499999523162842D0)) (list (list 11.0D0 1571.96875D0 0.016118301078677178D0 1.059999942779541D0)) (list (list 11.0D0 1570.1795654296875D0 0.014159951359033585D0 1.0699999332427979D0)) (list (list 11.0D0 1568.7928466796875D0 0.012820988893508912D0 1.0799999237060547D0)) (list (list 11.0D0 1568.0323486328125D0 0.012046221643686295D0 1.090000033378601D0)) (list (list 11.0D0 1567.84765625D0 0.011672448366880417D0 1.100000023841858D0)) (list (list 11.0D0 1567.83154296875D0 0.011644395999610424D0 1.1100000143051148D0)) (list (list 11.0D0 1567.8631591796875D0 0.011730934493243695D0 1.1200000047683716D0)) (list (list 11.0D0 1567.917724609375D0 0.011794466525316239D0 1.1299999952316285D0)) (list (list 11.0D0 1567.88623046875D0 0.011801660060882569D0 1.1399999856948853D0)) (list (list 11.0D0 1567.635009765625D0 0.011795314028859139D0 1.149999976158142D0)) (list (list 11.0D0 1567.37939453125D0 0.012145369313657284D0 1.159999966621399D0)) (list (list 11.0D0 1567.546875D0 0.012902275659143925D0 1.1699999570846558D0)) (list (list 11.0D0 1568.128662109375D0 0.013861751183867455D0 1.1799999475479126D0)) (list (list 11.0D0 1568.9378662109375D0 0.014889579266309739D0 1.1899999380111695D0)) (list (list 11.0D0 1569.672119140625D0 0.01588495820760727D0 1.1999999284744263D0)) (list (list 11.0D0 1570.031494140625D0 0.016892477869987488D0 1.209999918937683D0)) (list (list 11.0D0 1570.2071533203125D0 0.018023408949375153D0 1.2200000286102295D0)) (list (list 11.0D0 1570.556884765625D0 0.019299045205116272D0 1.2300000190734864D0)) (list (list 11.0D0 1571.2584228515625D0 0.02075868658721447D0 1.2400000095367432D0)) (list (list 11.0D0 1572.3546142578125D0 0.022433502599596977D0 1.25D0)) (list (list 11.0D0 1573.337890625D0 0.024213163182139397D0 1.2599999904632569D0)) (list (list 11.0D0 1573.6793212890625D0 0.025461208075284958D0 1.2699999809265137D0)) (list (list 11.0D0 1573.66748046875D0 0.02616991475224495D0 1.2799999713897705D0)) (list (list 11.0D0 1573.6165771484375D0 0.026498135179281235D0 1.2899999618530274D0)) (list (list 11.0D0 1573.8541259765625D0 0.02670411579310894D0 1.2999999523162842D0)) (list (list 11.0D0 1574.415283203125D0 0.026876626536250115D0 1.309999942779541D0)) (list (list 11.0D0 1574.65234375D0 0.02651498280465603D0 1.3199999332427979D0)) (list (list 11.0D0 1574.3046875D0 0.025366872549057007D0 1.3299999237060547D0)) (list (list 11.0D0 1573.3304443359375D0 0.02347748912870884D0 1.3399999141693116D0)) (list (list 11.0D0 1571.8338623046875D0 0.02109396830201149D0 1.350000023841858D0)) (list (list 11.0D0 1570.0550537109375D0 0.018696947023272515D0 1.3600000143051148D0)) (list (list 11.0D0 1568.508056640625D0 0.016486721113324166D0 1.3700000047683716D0)) (list (list 11.0D0 1567.1767578125D0 0.014508623629808426D0 1.3799999952316285D0)) (list (list 11.0D0 1566.0323486328125D0 0.012851006351411343D0 1.3899999856948853D0)) (list (list 11.0D0 1565.057373046875D0 0.011605102568864823D0 1.399999976158142D0)) (list (list 11.0D0 1564.61279296875D0 0.010811964981257916D0 1.409999966621399D0)) (list (list 11.0D0 1564.4019775390625D0 0.01012383308261633D0 1.4199999570846558D0)) (list (list 11.0D0 1563.945556640625D0 0.009409179911017418D0 1.4299999475479126D0)) (list (list 11.0D0 1563.154052734375D0 0.008686005137860775D0 1.4399999380111695D0)) (list (list 11.0D0 1562.1756591796875D0 0.008053048513829708D0 1.4499999284744263D0)) (list (list 11.0D0 1561.765380859375D0 0.007762763183563948D0 1.459999918937683D0)) (list (list 11.0D0 1561.868896484375D0 0.00775483762845397D0 1.46999990940094D0)) (list (list 11.0D0 1561.9764404296875D0 0.007812063209712505D0 1.4800000190734864D0)) (list (list 11.0D0 1561.75439453125D0 0.007812217343598604D0 1.4900000095367432D0)) (list (list 11.0D0 1561.01904296875D0 0.007697497960180044D0 1.5D0)) (list (list 11.0D0 1560.451904296875D0 0.0077263363637030125D0 1.5099999904632569D0)) (list (list 11.0D0 1560.453857421875D0 0.008032703772187233D0 1.5199999809265137D0)) (list (list 11.0D0 1560.7796630859375D0 0.008457638323307038D0 1.5299999713897705D0)) (list (list 11.0D0 1561.2669677734375D0 0.008886782452464104D0 1.5399999618530274D0)) (list (list 11.0D0 1561.8291015625D0 0.009250747039914132D0 1.5499999523162842D0)) (list (list 11.0D0 1563.0411376953125D0 0.009849835187196732D0 1.559999942779541D0)) (list (list 11.0D0 1564.89794921875D0 0.011228698305785656D0 1.5699999332427979D0)) (list (list 11.0D0 1566.6806640625D0 0.013280516490340233D0 1.5799999237060547D0)) (list (list 11.0D0 1568.010986328125D0 0.015683187171816826D0 1.5899999141693116D0)) (list (list 11.0D0 1568.7039794921875D0 0.01799280382692814D0 1.5999999046325684D0)) (list (list 11.0D0 1569.095458984375D0 0.019819317385554314D0 1.6100000143051148D0)) (list (list 11.0D0 1569.5841064453125D0 0.02131170779466629D0 1.6200000047683716D0)) (list (list 11.0D0 1570.1011962890625D0 0.022572629153728485D0 1.6299999952316285D0)) (list (list 11.0D0 1570.55859375D0 0.02356112189590931D0 1.6399999856948853D0)) (list (list 11.0D0 1570.8670654296875D0 0.02417328581213951D0 1.649999976158142D0)) (list (list 11.0D0 1571.02587890625D0 0.024094557389616966D0 1.659999966621399D0)) (list (list 11.0D0 1571.0235595703125D0 0.023280039429664612D0 1.6699999570846558D0)) (list (list 11.0D0 1570.703369140625D0 0.02183924801647663D0 1.6799999475479126D0)) (list (list 11.0D0 1569.977294921875D0 0.019936611875891686D0 1.6899999380111695D0)) (list (list 11.0D0 1568.8427734375D0 0.017807917669415474D0 1.6999999284744263D0)) (list (list 11.0D0 1567.6815185546875D0 0.015821261331439018D0 1.709999918937683D0)) (list (list 11.0D0 1566.9219970703125D0 0.013828686438500882D0 1.71999990940094D0)) (list (list 11.0D0 1566.178955078125D0 0.011615258641541005D0 1.7300000190734864D0)) (list (list 11.0D0 1564.8212890625D0 0.009199594147503376D0 1.7400000095367432D0)) (list (list 11.0D0 1562.2657470703125D0 0.006771747954189777D0 1.75D0)) (list (list 11.0D0 1559.2196044921875D0 0.005199137143790722D0 1.7599999904632569D0)) (list (list 11.0D0 1557.405029296875D0 0.004371872171759605D0 1.7699999809265137D0)) (list (list 11.0D0 1555.434326171875D0 0.0036821053363382817D0 1.7799999713897705D0)) (list (list 11.0D0 1552.033447265625D0 0.003005254315212369D0 1.7899999618530274D0)) (list (list 11.0D0 1548.565185546875D0 0.002450131345540285D0 1.7999999523162842D0)) (list (list 11.0D0 1570.1448974609375D0 0.0027207352686673403D0 1.809999942779541D0)) (list (list 11.0D0 1573.390380859375D0 0.00276174140162766D0 1.8199999332427979D0)) (list (list 11.0D0 1573.07763671875D0 0.002696806564927101D0 1.8299999237060547D0)) (list (list 11.0D0 1572.124267578125D0 0.0024791760370135308D0 1.8399999141693116D0)) (list (list 11.0D0 1569.6632080078125D0 0.0020505290012806654D0 1.8499999046325684D0)) (list (list 11.0D0 1566.90576171875D0 0.0017199417343363166D0 1.8600000143051148D0)) (list (list 11.0D0 1565.712646484375D0 0.0015446451725438238D0 1.8700000047683716D0)) (list (list 11.0D0 1564.820068359375D0 0.0014575489331036807D0 1.8799999952316285D0)) (list (list 11.0D0 1563.6309814453125D0 0.0014178950805217028D0 1.8899999856948853D0)) (list (list 11.0D0 1561.4024658203125D0 0.0013807275099679828D0 1.899999976158142D0)) (list (list 11.0D0 1554.2335205078125D0 0.001228598295710981D0 1.909999966621399D0)) (list (list 11.0D0 1551.8089599609375D0 0.0011794771999120713D0 1.9199999570846558D0)) (list (list 11.0D0 1552.1292724609375D0 0.0012685158289968968D0 1.9299999475479126D0)) (list (list 11.0D0 1553.779296875D0 0.0015177056193351746D0 1.9399999380111695D0)) (list (list 11.0D0 1555.20263671875D0 0.0019060727208852768D0 1.9499999284744263D0)) (list (list 11.0D0 1553.2542724609375D0 0.0021697578486055136D0 1.959999918937683D0)) (list (list 11.0D0 1551.786376953125D0 0.0023853934835642577D0 1.96999990940094D0)) (list (list 11.0D0 1551.393798828125D0 0.0027091337833553553D0 1.9799998998641968D0)) (list (list 11.0D0 1552.2562255859375D0 0.0032493206672370434D0 1.9900000095367432D0)) (list (list 11.0D0 1554.2362060546875D0 0.004082994069904089D0 2.0D0)) (list (list 11.0D0 1556.325927734375D0 0.005238018464297056D0 2.009999990463257D0)) (list (list 11.0D0 1557.3740234375D0 0.006296497769653797D0 2.0199999809265137D0)) (list (list 11.0D0 1557.8199462890625D0 0.007045713718980551D0 2.0299999713897705D0)) (list (list 11.0D0 1557.8382568359375D0 0.007424045819789171D0 2.0399999618530274D0)) (list (list 11.0D0 1557.5625D0 0.00745775830000639D0 2.049999952316284D0)) (list (list 11.0D0 1557.183349609375D0 0.007317605894058943D0 2.059999942779541D0)) (list (list 11.0D0 1557.16552734375D0 0.007313162088394165D0 2.069999933242798D0)) (list (list 11.0D0 1557.66162109375D0 0.007468050345778465D0 2.0799999237060547D0)) (list (list 11.0D0 1558.5694580078125D0 0.007709136698395014D0 2.0899999141693116D0)) (list (list 11.0D0 1559.62353515625D0 0.007899301126599312D0 2.0999999046325684D0)) (list (list 11.0D0 1560.1412353515625D0 0.007704335730522871D0 2.109999895095825D0)) (list (list 11.0D0 1559.5042724609375D0 0.007059341296553612D0 2.119999885559082D0)) (list (list 11.0D0 1558.3153076171875D0 0.006268689874559641D0 2.129999876022339D0)) (list (list 11.0D0 1556.9510498046875D0 0.0054601277224719525D0 2.1399998664855957D0)) (list (list 11.0D0 1555.68359375D0 0.004696339834481478D0 2.1499998569488526D0)) (list (list 11.0D0 1554.345947265625D0 0.003908931743353605D0 2.1599998474121094D0)) (list (list 11.0D0 1553.2320556640625D0 0.0032527013681828976D0 2.169999837875366D0)) (list (list 11.0D0 1552.37890625D0 0.0028577246703207493D0 2.180000066757202D0)) (list (list 11.0D0 1551.6343994140625D0 0.002728020306676626D0 2.190000057220459D0)) (list (list 11.0D0 1550.82421875D0 0.0027928799390792847D0 2.200000047683716D0)) (list (list 11.0D0 1550.082275390625D0 0.002833408070728183D0 2.2100000381469727D0)) (list (list 11.0D0 1550.18310546875D0 0.0027214132715016604D0 2.2200000286102295D0)) (list (list 11.0D0 1550.6007080078125D0 0.0025285747833549977D0 2.2300000190734864D0)) (list (list 11.0D0 1550.6009521484375D0 0.0023052245378494263D0 2.240000009536743D0)) (list (list 11.0D0 1549.5582275390625D0 0.0021062837913632393D0 2.25D0)) (list (list 11.0D0 1547.9295654296875D0 0.002035238081589341D0 2.259999990463257D0)) (list (list 11.0D0 1548.1761474609375D0 0.0020018196664750576D0 2.2699999809265137D0)) (list (list 11.0D0 1549.8199462890625D0 0.0019867666997015477D0 2.2799999713897705D0)) (list (list 11.0D0 1551.51708984375D0 0.001969920704141259D0 2.2899999618530274D0)) (list (list 11.0D0 1551.8155517578125D0 0.0019354597898200155D0 2.299999952316284D0)) (list (list 11.0D0 1550.343505859375D0 0.0019002765184268356D0 2.309999942779541D0)) (list (list 11.0D0 1549.68359375D0 0.0019832991529256106D0 2.319999933242798D0)) (list (list 11.0D0 1550.28857421875D0 0.002146050101146102D0 2.3299999237060547D0)) (list (list 11.0D0 1551.6712646484375D0 0.0023816495668143034D0 2.3399999141693116D0)) (list (list 11.0D0 1552.950439453125D0 0.002687217202037573D0 2.3499999046325684D0)) (list (list 11.0D0 1552.7083740234375D0 0.003064231714233756D0 2.359999895095825D0)) (list (list 11.0D0 1552.6395263671875D0 0.003595128422603011D0 2.369999885559082D0)) (list (list 11.0D0 1552.9368896484375D0 0.004108536522835493D0 2.379999876022339D0)) (list (list 11.0D0 1553.3758544921875D0 0.0044215526431798935D0 2.3899998664855957D0)) (list (list 11.0D0 1553.655029296875D0 0.004377531353384256D0 2.3999998569488526D0)) (list (list 11.0D0 1553.7427978515625D0 0.0039406707510352135D0 2.4099998474121094D0)) (list (list 11.0D0 1553.7413330078125D0 0.003440083470195532D0 2.419999837875366D0)) (list (list 11.0D0 1553.125244140625D0 0.0029757656157016754D0 2.429999828338623D0)) (list (list 11.0D0 1551.984375D0 0.00257241353392601D0 2.440000057220459D0)) (list (list 11.0D0 1550.639404296875D0 0.002228934783488512D0 2.450000047683716D0)) (list (list 11.0D0 1549.6651611328125D0 0.0019228653982281685D0 2.4600000381469727D0)) (list (list 11.0D0 1548.3648681640625D0 0.0016281898133456707D0 2.4700000286102295D0)) (list (list 11.0D0 1547.2537841796875D0 0.0013318763813003898D0 2.4800000190734864D0)) (list (list 11.0D0 1546.6405029296875D0 0.0010293982923030854D0 2.490000009536743D0)) (list (list 11.0D0 1546.7940673828125D0 7.28155137039721D-4 2.5D0)) (list (list 11.0D0 1548.2083740234375D0 4.91085578687489D-4 2.509999990463257D0)) (list (list 11.0D0 1548.9234619140625D0 4.508148122113198D-4 2.5199999809265137D0)) (list (list 11.0D0 1550.0733642578125D0 6.290454766713083D-4 2.5299999713897705D0)) (list (list 11.0D0 1550.8023681640625D0 9.823540458455682D-4 2.5399999618530274D0)) (list (list 11.0D0 1550.2322998046875D0 0.0014403655659407378D0 2.549999952316284D0)) (list (list 11.0D0 1549.8741455078125D0 0.001934993895702064D0 2.559999942779541D0)) (list (list 11.0D0 1550.9019775390625D0 0.0025297394022345543D0 2.569999933242798D0)) (list (list 11.0D0 1552.9697265625D0 0.0033046004828065634D0 2.5799999237060547D0)) (list (list 11.0D0 1555.10888671875D0 0.004217039793729782D0 2.5899999141693116D0)) (list (list 11.0D0 1556.36572265625D0 0.005161358509212732D0 2.5999999046325684D0)) (list (list 11.0D0 1556.7159423828125D0 0.005889683496206999D0 2.609999895095825D0)) (list (list 11.0D0 1557.3865966796875D0 0.006417327094823122D0 2.619999885559082D0)) (list (list 11.0D0 1558.2781982421875D0 0.006853499449789524D0 2.629999876022339D0)) (list (list 11.0D0 1559.1331787109375D0 0.00724646495655179D0 2.6399998664855957D0)) (list (list 11.0D0 1559.728515625D0 0.007633581757545471D0 2.6499998569488526D0)) (list (list 11.0D0 1560.207763671875D0 0.008048037998378277D0 2.6599998474121094D0)) (list (list 11.0D0 1560.9111328125D0 0.008490447886288166D0 2.669999837875366D0)) (list (list 11.0D0 1561.7371826171875D0 0.008961111307144165D0 2.679999828338623D0)) (list (list 11.0D0 1562.5052490234375D0 0.009440604597330094D0 2.690000057220459D0)) (list (list 11.0D0 1563.0260009765625D0 0.009887725114822388D0 2.700000047683716D0)) (list (list 11.0D0 1563.1348876953125D0 0.01017401460558176D0 2.7100000381469727D0)) (list (list 11.0D0 1563.0096435546875D0 0.010186402127146721D0 2.7200000286102295D0)) (list (list 11.0D0 1562.8399658203125D0 0.010021019726991654D0 2.7300000190734864D0)) (list (list 11.0D0 1562.70263671875D0 0.00978339184075594D0 2.740000009536743D0)) (list (list 11.0D0 1562.6448974609375D0 0.009580506943166256D0 2.75D0)) (list (list 11.0D0 1562.6925048828125D0 0.009492160752415657D0 2.759999990463257D0)) (list (list 11.0D0 1562.625244140625D0 0.009342208504676819D0 2.7699999809265137D0)) (list (list 11.0D0 1562.177001953125D0 0.009084564633667469D0 2.7799999713897705D0)) (list (list 11.0D0 1561.55908203125D0 0.008859745226800442D0 2.7899999618530274D0)) (list (list 11.0D0 1561.1444091796875D0 0.008860291913151741D0 2.799999952316284D0)) (list (list 11.0D0 1561.5765380859375D0 0.009362886659801007D0 2.809999942779541D0)) (list (list 11.0D0 1562.5421142578125D0 0.010279490612447262D0 2.819999933242798D0)) (list (list 11.0D0 1563.207275390625D0 0.011191356927156449D0 2.8299999237060547D0)) (list (list 11.0D0 1563.5081787109375D0 0.011921493336558342D0 2.8399999141693116D0)) (list (list 11.0D0 1563.636962890625D0 0.01239631325006485D0 2.8499999046325684D0)) (list (list 11.0D0 1564.1807861328125D0 0.012750770896673203D0 2.859999895095825D0)) (list (list 11.0D0 1565.0550537109375D0 0.01325740572065115D0 2.869999885559082D0)) (list (list 11.0D0 1565.8485107421875D0 0.013816756196320057D0 2.879999876022339D0)) (list (list 11.0D0 1566.4552001953125D0 0.014289382845163346D0 2.8899998664855957D0)) (list (list 11.0D0 1566.8497314453125D0 0.014540421776473523D0 2.8999998569488526D0)) (list (list 11.0D0 1567.0548095703125D0 0.0144597003236413D0 2.9099998474121094D0)) (list (list 11.0D0 1566.69970703125D0 0.014039210975170136D0 2.919999837875366D0)) (list (list 11.0D0 1565.9307861328125D0 0.013446308672428131D0 2.929999828338623D0)) (list (list 11.0D0 1565.07373046875D0 0.012776502408087254D0 2.93999981880188D0)) (list (list 11.0D0 1564.4422607421875D0 0.012118714861571789D0 2.950000047683716D0)) (list (list 11.0D0 1564.1402587890625D0 0.011571809649467469D0 2.9600000381469727D0)) (list (list 11.0D0 1563.8529052734375D0 0.011285705491900444D0 2.9700000286102295D0)) (list (list 11.0D0 1563.74609375D0 0.011205248534679413D0 2.9800000190734864D0)) (list (list 11.0D0 1563.856201171875D0 0.011275672353804112D0 2.990000009536743D0)) (list (list 11.0D0 1564.1168212890625D0 0.011434840969741345D0 3.0D0)) (list (list 11.0D0 1564.176513671875D0 0.011628669686615467D0 3.009999990463257D0)) (list (list 11.0D0 1564.0838623046875D0 0.011765326373279095D0 3.0199999809265137D0)) (list (list 11.0D0 1564.12353515625D0 0.011816825717687607D0 3.0299999713897705D0)) (list (list 11.0D0 1564.2694091796875D0 0.011817102320492268D0 3.0399999618530274D0)) (list (list 11.0D0 1564.3953857421875D0 0.011827334761619568D0 3.049999952316284D0)) (list (list 11.0D0 1564.20263671875D0 0.011967429891228676D0 3.059999942779541D0)) (list (list 11.0D0 1563.8883056640625D0 0.01229561772197485D0 3.069999933242798D0)) (list (list 11.0D0 1563.934814453125D0 0.012758376076817513D0 3.0799999237060547D0)) (list (list 11.0D0 1564.4127197265625D0 0.013351035304367543D0 3.0899999141693116D0)) (list (list 11.0D0 1565.220703125D0 0.014055585488677025D0 3.0999999046325684D0)) (list (list 11.0D0 1565.9490966796875D0 0.014800849370658398D0 3.109999895095825D0)) (list (list 11.0D0 1566.2371826171875D0 0.015313740819692612D0 3.119999885559082D0)) (list (list 11.0D0 1566.2923583984375D0 0.015564599074423314D0 3.129999876022339D0)) (list (list 11.0D0 1566.283203125D0 0.015581317245960236D0 3.1399998664855957D0)) (list (list 11.0D0 1566.3677978515625D0 0.015427104197442532D0 3.1499998569488526D0)) (list (list 11.0D0 1566.6829833984375D0 0.015211089514195919D0 3.1599998474121094D0)) (list (list 11.0D0 1566.977783203125D0 0.015100352466106415D0 3.169999837875366D0)) (list (list 11.0D0 1566.9970703125D0 0.015041107311844826D0 3.179999828338623D0)) (list (list 11.0D0 1566.7562255859375D0 0.014984061941504479D0 3.18999981880188D0)) (list (list 11.0D0 1566.38720703125D0 0.014892900362610817D0 3.1999998092651367D0)) (list (list 11.0D0 1566.2479248046875D0 0.014775436371564865D0 3.2100000381469727D0)) (list (list 11.0D0 1566.3055419921875D0 0.014596513472497464D0 3.2200000286102295D0)) (list (list 11.0D0 1566.1356201171875D0 0.014245910570025444D0 3.2300000190734864D0)) (list (list 11.0D0 1565.6248779296875D0 0.01372544839978218D0 3.240000009536743D0)) (list (list 11.0D0 1564.8355712890625D0 0.013114729896187783D0 3.25D0)) (list (list 11.0D0 1564.2255859375D0 0.012683610431849957D0 3.259999990463257D0)) (list (list 11.0D0 1564.1527099609375D0 0.01257403939962387D0 3.2699999809265137D0)) (list (list 11.0D0 1564.4219970703125D0 0.012603025883436203D0 3.2799999713897705D0)) (list (list 11.0D0 1564.7978515625D0 0.012657547369599343D0 3.2899999618530274D0)) (list (list 11.0D0 1565.0645751953125D0 0.012656811624765396D0 3.299999952316284D0)) (list (list 11.0D0 1565.1044921875D0 0.01259665284305811D0 3.309999942779541D0)) (list (list 11.0D0 1565.101806640625D0 0.012526244856417179D0 3.319999933242798D0)) (list (list 11.0D0 1565.109619140625D0 0.012323449365794659D0 3.3299999237060547D0)) (list (list 11.0D0 1564.9312744140625D0 0.011893345974385739D0 3.3399999141693116D0)) (list (list 11.0D0 1564.390625D0 0.0112231420353055D0 3.3499999046325684D0)) (list (list 11.0D0 1563.4473876953125D0 0.010518863797187806D0 3.359999895095825D0)) (list (list 11.0D0 1562.9608154296875D0 0.010253647342324257D0 3.369999885559082D0)) (list (list 11.0D0 1562.998779296875D0 0.010318096727132798D0 3.379999876022339D0)) (list (list 11.0D0 1563.2359619140625D0 0.010508937761187554D0 3.3899998664855957D0)) (list (list 11.0D0 1563.302490234375D0 0.01059279777109623D0 3.3999998569488526D0)) (list (list 11.0D0 1562.86572265625D0 0.010280651040375233D0 3.4099998474121094D0)) (list (list 11.0D0 1562.2784423828125D0 0.009621820412576199D0 3.419999837875366D0)) (list (list 11.0D0 1561.5325927734375D0 0.008885684423148632D0 3.429999828338623D0)) (list (list 11.0D0 1560.6207275390625D0 0.0082519156858325D0 3.43999981880188D0)) (list (list 11.0D0 1559.6422119140625D0 0.007866812869906426D0 3.4499998092651367D0)) (list (list 11.0D0 1559.021728515625D0 0.007845131680369378D0 3.4600000381469727D0)) (list (list 11.0D0 1559.13037109375D0 0.008083738386631012D0 3.4700000286102295D0)) (list (list 11.0D0 1559.5999755859375D0 0.008484737016260624D0 3.4800000190734864D0)) (list (list 11.0D0 1560.337646484375D0 0.008997486904263497D0 3.490000009536743D0)) (list (list 11.0D0 1561.2908935546875D0 0.009555920958518982D0 3.5D0)) (list (list 11.0D0 1562.47314453125D0 0.010040728375315667D0 3.509999990463257D0)) (list (list 11.0D0 1563.5462646484375D0 0.010271686129271984D0 3.5199999809265137D0)) (list (list 11.0D0 1564.1751708984375D0 0.010228028520941735D0 3.5299999713897705D0)) (list (list 11.0D0 1564.31689453125D0 0.010004069656133652D0 3.5399999618530274D0)) (list (list 11.0D0 1564.090087890625D0 0.009751292876899243D0 3.549999952316284D0)) (list (list 11.0D0 1563.9176025390625D0 0.009736091829836369D0 3.559999942779541D0)) (list (list 11.0D0 1564.035888671875D0 0.010054679587483406D0 3.569999933242798D0)) (list (list 11.0D0 1564.154296875D0 0.0104976249858737D0 3.5799999237060547D0)) (list (list 11.0D0 1564.253173828125D0 0.010972884483635426D0 3.5899999141693116D0)) (list (list 11.0D0 1564.412353515625D0 0.011433913372457028D0 3.5999999046325684D0)) (list (list 11.0D0 1564.9176025390625D0 0.011928687803447247D0 3.609999895095825D0)) (list (list 11.0D0 1565.7757568359375D0 0.012606809847056866D0 3.619999885559082D0)) (list (list 11.0D0 1566.6177978515625D0 0.01340116374194622D0 3.629999876022339D0)) (list (list 11.0D0 1567.3009033203125D0 0.01418646052479744D0 3.6399998664855957D0)) (list (list 11.0D0 1567.7645263671875D0 0.014824455603957177D0 3.6499998569488526D0)) (list (list 11.0D0 1568.0731201171875D0 0.01513945683836937D0 3.6599998474121094D0)) (list (list 11.0D0 1568.214111328125D0 0.015076398849487305D0 3.669999837875366D0)) (list (list 11.0D0 1568.13330078125D0 0.014809079468250275D0 3.679999828338623D0)) (list (list 11.0D0 1567.830322265625D0 0.014403263106942177D0 3.68999981880188D0)) (list (list 11.0D0 1567.3564453125D0 0.013908843509852887D0 3.6999998092651367D0)) (list (list 11.0D0 1566.8587646484375D0 0.013346829451620579D0 3.7099997997283936D0)) (list (list 11.0D0 1566.6240234375D0 0.012904639355838299D0 3.7200000286102295D0)) (list (list 11.0D0 1566.6522216796875D0 0.012768393382430077D0 3.7300000190734864D0)) (list (list 11.0D0 1566.809326171875D0 0.012937154620885849D0 3.740000009536743D0)) (list (list 11.0D0 1566.88427734375D0 0.013309972360730172D0 3.75D0)) (list (list 11.0D0 1566.486572265625D0 0.01360576506704092D0 3.759999990463257D0)) (list (list 11.0D0 1565.619140625D0 0.013621782884001732D0 3.7699999809265137D0)) (list (list 11.0D0 1564.872314453125D0 0.013512766920030117D0 3.7799999713897705D0)) (list (list 11.0D0 1564.4781494140625D0 0.013338891789317131D0 3.7899999618530274D0)) (list (list 11.0D0 1564.5428466796875D0 0.013149105943739415D0 3.799999952316284D0)) (list (list 11.0D0 1565.008544921875D0 0.012984461151063443D0 3.809999942779541D0)) (list (list 11.0D0 1565.6419677734375D0 0.012888624332845211D0 3.819999933242798D0)) (list (list 11.0D0 1566.2510986328125D0 0.01290234737098217D0 3.8299999237060547D0)) (list (list 11.0D0 1566.6881103515625D0 0.013025548309087754D0 3.8399999141693116D0)) (list (list 11.0D0 1566.857666015625D0 0.013227419927716256D0 3.8499999046325684D0)) (list (list 11.0D0 1566.7486572265625D0 0.013421425595879555D0 3.859999895095825D0)) (list (list 11.0D0 1566.78076171875D0 0.01354548241943121D0 3.869999885559082D0)) (list (list 11.0D0 1566.9451904296875D0 0.013635723851621151D0 3.879999876022339D0)) (list (list 11.0D0 1566.978759765625D0 0.013600001111626625D0 3.8899998664855957D0)) (list (list 11.0D0 1566.60888671875D0 0.013304151594638825D0 3.8999998569488526D0)) (list (list 11.0D0 1565.545654296875D0 0.012501979246735573D0 3.9099998474121094D0)) (list (list 11.0D0 1564.2308349609375D0 0.011345885694026947D0 3.919999837875366D0)) (list (list 11.0D0 1563.35791015625D0 0.010355022735893727D0 3.929999828338623D0)) (list (list 11.0D0 1563.0899658203125D0 0.009754464030265808D0 3.93999981880188D0)) (list (list 11.0D0 1563.4122314453125D0 0.009627248160541058D0 3.9499998092651367D0)) (list (list 11.0D0 1564.082275390625D0 0.009844140149652958D0 3.9599997997283936D0)) (list (list 11.0D0 1564.2607421875D0 0.009884361177682877D0 3.9700000286102295D0)) (list (list 11.0D0 1563.978271484375D0 0.00969079602509737D0 3.9800000190734864D0)) (list (list 11.0D0 1563.3660888671875D0 0.009367107413709164D0 3.990000009536743D0)) (list (list 11.0D0 1562.586181640625D0 0.009026763029396534D0 4.0D0)) (list (list 11.0D0 1561.82763671875D0 0.008769387379288674D0 4.009999752044678D0)) (list (list 11.0D0 1561.5704345703125D0 0.00859131384640932D0 4.019999980926514D0)) (list (list 11.0D0 1561.5318603515625D0 0.008461047895252705D0 4.029999732971191D0)) (list (list 11.0D0 1561.3768310546875D0 0.008345130831003189D0 4.039999961853027D0)) (list (list 11.0D0 1560.88232421875D0 0.00820979569107294D0 4.049999713897705D0)) (list (list 11.0D0 1560.0494384765625D0 0.00801828783005476D0 4.059999942779541D0)) (list (list 11.0D0 1559.3619384765625D0 0.007754874881356955D0 4.069999694824219D0)) (list (list 11.0D0 1559.021728515625D0 0.007456758059561253D0 4.079999923706055D0)) (list (list 11.0D0 1558.9473876953125D0 0.007155728526413441D0 4.089999675750732D0)) (list (list 11.0D0 1558.969970703125D0 0.006879869382828474D0 4.099999904632568D0)) (list (list 11.0D0 1558.787353515625D0 0.006653456948697567D0 4.110000133514404D0)) (list (list 11.0D0 1558.2545166015625D0 0.006474669557064772D0 4.119999885559082D0)) (list (list 11.0D0 1557.7769775390625D0 0.00632129143923521D0 4.130000114440918D0)) (list (list 11.0D0 1557.5037841796875D0 0.006175316404551268D0 4.139999866485596D0)) (list (list 11.0D0 1557.5089111328125D0 0.006018014624714851D0 4.150000095367432D0)) (list (list 11.0D0 1557.781005859375D0 0.0058269202709198D0 4.159999847412109D0)) (list (list 11.0D0 1557.9945068359375D0 0.005535397678613663D0 4.170000076293945D0)) (list (list 11.0D0 1557.8341064453125D0 0.005119623616337776D0 4.179999828338623D0)) (list (list 11.0D0 1557.1240234375D0 0.004584933165460825D0 4.190000057220459D0)) (list (list 11.0D0 1555.79736328125D0 0.003971443045884371D0 4.199999809265137D0)) (list (list 11.0D0 1553.9222412109375D0 0.003379163332283497D0 4.210000038146973D0)) (list (list 11.0D0 1552.8837890625D0 0.002990999259054661D0 4.21999979019165D0)) (list (list 11.0D0 1553.024169921875D0 0.002792040351778269D0 4.230000019073486D0)) (list (list 11.0D0 1554.1409912109375D0 0.002759545110166073D0 4.239999771118164D0)) (list (list 11.0D0 1555.7349853515625D0 0.0028227197472006083D0 4.25D0)) (list (list 11.0D0 1556.8214111328125D0 0.002822804730385542D0 4.259999752044678D0)) (list (list 11.0D0 1555.9989013671875D0 0.002500746166333556D0 4.269999980926514D0)) (list (list 11.0D0 1553.1663818359375D0 0.0020709827076643706D0 4.279999732971191D0)) (list (list 11.0D0 1549.8973388671875D0 0.001703352201730013D0 4.289999961853027D0)) (list (list 11.0D0 1547.498779296875D0 0.0015006845351308585D0 4.299999713897705D0)) (list (list 11.0D0 1546.630615234375D0 0.0014570866478607059D0 4.309999942779541D0)) (list (list 11.0D0 1548.4322509765625D0 0.0014571271603927017D0 4.319999694824219D0)) (list (list 11.0D0 1551.364013671875D0 0.0014662937028333545D0 4.329999923706055D0)) (list (list 11.0D0 1553.8839111328125D0 0.001445694942958653D0 4.339999675750732D0)) (list (list 11.0D0 1554.8685302734375D0 0.001358300563879311D0 4.349999904632568D0)) (list (list 11.0D0 1553.829345703125D0 0.0011636768467724324D0 4.360000133514404D0)) (list (list 11.0D0 1551.986572265625D0 9.262652602046728D-4 4.369999885559082D0)) (list (list 11.0D0 1548.198486328125D0 6.921458407305181D-4 4.380000114440918D0)) (list (list 11.0D0 1539.857666015625D0 4.4922143570147455D-4 4.389999866485596D0)) (list (list 11.0D0 1529.5147705078125D0 2.0478088117670268D-4 4.400000095367432D0)) (list (list 11.0D0 1529.5147705078125D0 9.737740583659616D-6 4.409999847412109D0)) (list (list 12.0D0 2412.85009765625D0 2.8590590227395296D-4 0.07999999821186066D0)) (list (list 12.0D0 2419.130126953125D0 2.797705528791994D-4 0.08999999612569809D0)) (list (list 12.0D0 2426.184814453125D0 3.14334814902395D-4 0.09999999403953552D0)) (list (list 12.0D0 2423.806396484375D0 2.950614143628627D-4 0.10999999940395355D0)) (list (list 12.0D0 2422.38916015625D0 2.7482080622576177D-4 0.11999999731779099D0)) (list (list 12.0D0 2417.685302734375D0 2.6374697335995734D-4 0.12999999523162842D0)) (list (list 12.0D0 2411.978759765625D0 2.6399485068395734D-4 0.14000000059604645D0)) (list (list 12.0D0 2413.487060546875D0 2.69397598458454D-4 0.14999999105930328D0)) (list (list 12.0D0 2402.26904296875D0 1.5703561075497419D-4 0.1599999964237213D0)) (list (list 12.0D0 2398.517578125D0 1.2184586375951767D-4 0.17000000178813934D0)) (list (list 12.0D0 2402.003173828125D0 1.6498728655278683D-4 0.17999999225139618D0)) (list (list 12.0D0 2406.44189453125D0 2.633639960549772D-4 0.1899999976158142D0)) (list (list 12.0D0 2400.215087890625D0 3.7089388933964074D-4 0.19999998807907105D0)) (list (list 12.0D0 2400.7177734375D0 4.4360029278323055D-4 0.20999999344348908D0)) (list (list 12.0D0 2403.02490234375D0 4.999415832571685D-4 0.2199999988079071D0)) (list (list 12.0D0 2404.355712890625D0 5.409047589637339D-4 0.22999998927116394D0)) (list (list 12.0D0 2407.91162109375D0 5.669848178513348D-4 0.23999999463558197D0)) (list (list 12.0D0 2421.9873046875D0 5.786322290077806D-4 0.25D0)) (list (list 12.0D0 2436.062744140625D0 5.902795819565654D-4 0.25999999046325684D0)) (list (list 12.0D0 2439.930908203125D0 7.34077300876379D-4 0.26999998092651367D0)) (list (list 12.0D0 2441.16650390625D0 9.15582466404885D-4 0.2800000011920929D0)) (list (list 12.0D0 2442.70458984375D0 0.0010754066752269864D0 0.28999999165534973D0)) (list (list 12.0D0 2443.622802734375D0 0.0011822201777249575D0 0.29999998211860657D0)) (list (list 12.0D0 2445.85107421875D0 0.0011557331308722496D0 0.3100000023841858D0)) (list (list 12.0D0 2449.798095703125D0 0.0011492709163576365D0 0.3199999928474426D0)) (list (list 12.0D0 2452.882080078125D0 0.0012106964131817222D0 0.32999998331069947D0)) (list (list 12.0D0 2453.9794921875D0 0.001317343208938837D0 0.3400000035762787D0)) (list (list 12.0D0 2453.2099609375D0 0.0013863254571333528D0 0.3499999940395355D0)) (list (list 12.0D0 2452.319091796875D0 0.001344185438938439D0 0.35999998450279236D0)) (list (list 12.0D0 2453.0615234375D0 0.0012224483070895076D0 0.3700000047683716D0)) (list (list 12.0D0 2453.79296875D0 0.0011095368536189199D0 0.3799999952316284D0)) (list (list 12.0D0 2453.2392578125D0 0.001061909832060337D0 0.38999998569488526D0)) (list (list 12.0D0 2450.453857421875D0 0.0011122029973194004D0 0.3999999761581421D0)) (list (list 12.0D0 2446.87646484375D0 0.0013688498875126243D0 0.4099999964237213D0)) (list (list 12.0D0 2446.03271484375D0 0.001606551231816411D0 0.41999998688697815D0)) (list (list 12.0D0 2446.342041015625D0 0.0017741702031344176D0 0.429999977350235D0)) (list (list 12.0D0 2446.660400390625D0 0.0018349544843658805D0 0.4399999976158142D0)) (list (list 12.0D0 2446.16357421875D0 0.0017661137972027064D0 0.44999998807907105D0)) (list (list 12.0D0 2445.13818359375D0 0.0016098871128633619D0 0.4599999785423279D0)) (list (list 12.0D0 2444.953369140625D0 0.001482923049479723D0 0.4699999988079071D0)) (list (list 12.0D0 2445.386962890625D0 0.0014090772019699216D0 0.47999998927116394D0)) (list (list 12.0D0 2445.97802734375D0 0.001388462958857417D0 0.4899999797344208D0)) (list (list 12.0D0 2446.0673828125D0 0.0014020875096321106D0 0.5D0)) (list (list 12.0D0 2445.322265625D0 0.0014529640320688487D0 0.5099999904632568D0)) (list (list 12.0D0 2444.577392578125D0 0.001560795702971518D0 0.5199999809265137D0)) (list (list 12.0D0 2444.15673828125D0 0.001686164177954197D0 0.5299999713897705D0)) (list (list 12.0D0 2444.2919921875D0 0.0017767871031537652D0 0.5399999618530273D0)) (list (list 12.0D0 2445.132080078125D0 0.0017703762277960778D0 0.550000011920929D0)) (list (list 12.0D0 2446.494384765625D0 0.0016413336852565408D0 0.5600000023841858D0)) (list (list 12.0D0 2447.2568359375D0 0.001518963952548802D0 0.5699999928474426D0)) (list (list 12.0D0 2447.14404296875D0 0.0014537923270836473D0 0.5799999833106995D0)) (list (list 12.0D0 2446.138427734375D0 0.001466567860916257D0 0.5899999737739563D0)) (list (list 12.0D0 2444.501220703125D0 0.001551171182654798D0 0.5999999642372131D0)) (list (list 12.0D0 2444.619384765625D0 0.0015713418833911419D0 0.6100000143051148D0)) (list (list 12.0D0 2447.990478515625D0 0.0014950376935303212D0 0.6200000047683716D0)) (list (list 12.0D0 2451.985595703125D0 0.0014802791411057115D0 0.6299999952316284D0)) (list (list 12.0D0 2454.428955078125D0 0.0015234932070598007D0 0.6399999856948853D0)) (list (list 12.0D0 2453.516845703125D0 0.0015107583021745086D0 0.6499999761581421D0)) (list (list 12.0D0 2451.068603515625D0 0.0014925921568647027D0 0.6599999666213989D0)) (list (list 12.0D0 2449.8125D0 0.0014649295480921865D0 0.6699999570846558D0)) (list (list 12.0D0 2448.9775390625D0 0.0014229457592591644D0 0.6800000071525574D0)) (list (list 12.0D0 2447.791748046875D0 0.0013923877850174904D0 0.6899999976158142D0)) (list (list 12.0D0 2445.537841796875D0 0.0014184771571308375D0 0.699999988079071D0)) (list (list 12.0D0 2443.906005859375D0 0.0014783524675294757D0 0.7099999785423279D0)) (list (list 12.0D0 2444.143798828125D0 0.0014337144093587995D0 0.7199999690055847D0)) (list (list 12.0D0 2445.060791015625D0 0.0013513582525774837D0 0.7299999594688416D0)) (list (list 12.0D0 2445.808349609375D0 0.0012985109351575375D0 0.7400000095367432D0)) (list (list 12.0D0 2445.737060546875D0 0.0013438023161143065D0 0.75D0)) (list (list 12.0D0 2444.61865234375D0 0.0015141071053221822D0 0.7599999904632568D0)) (list (list 12.0D0 2443.46044921875D0 0.0016345647163689137D0 0.7699999809265137D0)) (list (list 12.0D0 2443.212890625D0 0.0016253680223599077D0 0.7799999713897705D0)) (list (list 12.0D0 2443.755615234375D0 0.0014940877445042134D0 0.7899999618530273D0)) (list (list 12.0D0 2444.221435546875D0 0.0013127567945048213D0 0.7999999523162842D0)) (list (list 12.0D0 2443.319091796875D0 0.0012195882154628635D0 0.8100000023841858D0)) (list (list 12.0D0 2442.126953125D0 0.0011867849389091134D0 0.8199999928474426D0)) (list (list 12.0D0 2441.684326171875D0 0.0011254814453423024D0 0.8299999833106995D0)) (list (list 12.0D0 2441.834228515625D0 0.0010088648414239288D0 0.8399999737739563D0)) (list (list 12.0D0 2441.65380859375D0 8.539064438082278D-4 0.8499999642372131D0)) (list (list 12.0D0 2440.662109375D0 7.728257332928479D-4 0.85999995470047D0)) (list (list 12.0D0 2440.068359375D0 7.810663664713502D-4 0.8700000047683716D0)) (list (list 12.0D0 2439.74853515625D0 8.336543687619269D-4 0.8799999952316284D0)) (list (list 12.0D0 2439.31494140625D0 8.925125584937632D-4 0.8899999856948853D0)) (list (list 12.0D0 2438.2294921875D0 9.217046317644417D-4 0.8999999761581421D0)) (list (list 12.0D0 2436.544189453125D0 8.970602066256106D-4 0.9099999666213989D0)) (list (list 12.0D0 2436.382080078125D0 8.363972883671522D-4 0.9199999570846558D0)) (list (list 12.0D0 2437.666259765625D0 7.805192726664245D-4 0.9300000071525574D0)) (list (list 12.0D0 2439.511962890625D0 7.533268071711063D-4 0.9399999976158142D0)) (list (list 12.0D0 2440.468994140625D0 7.660651463083923D-4 0.949999988079071D0)) (list (list 12.0D0 2438.982421875D0 7.731271325610578D-4 0.9599999785423279D0)) (list (list 12.0D0 2438.150634765625D0 7.978236535564065D-4 0.9699999690055847D0)) (list (list 12.0D0 2438.35791015625D0 8.708900422789156D-4 0.9799999594688416D0)) (list (list 12.0D0 2439.2548828125D0 0.001002226839773357D0 0.9899999499320984D0)) (list (list 12.0D0 2439.99169921875D0 0.0011829781578853727D0 1.0D0)) (list (list 12.0D0 2439.270751953125D0 0.0013161199167370797D0 1.0099999904632569D0)) (list (list 12.0D0 2438.208984375D0 0.0013876936864107848D0 1.0199999809265137D0)) (list (list 12.0D0 2437.395263671875D0 0.0014565325109288097D0 1.0299999713897705D0)) (list (list 12.0D0 2436.960693359375D0 0.0015587800880894065D0 1.0399999618530274D0)) (list (list 12.0D0 2436.797119140625D0 0.0017138110706582666D0 1.0499999523162842D0)) (list (list 12.0D0 2437.2490234375D0 0.0018559511518105865D0 1.059999942779541D0)) (list (list 12.0D0 2438.14990234375D0 0.001953268190845847D0 1.0699999332427979D0)) (list (list 12.0D0 2439.078857421875D0 0.002015815582126379D0 1.0799999237060547D0)) (list (list 12.0D0 2439.947265625D0 0.0020325027871876955D0 1.090000033378601D0)) (list (list 12.0D0 2440.811767578125D0 0.001980646513402462D0 1.100000023841858D0)) (list (list 12.0D0 2441.15283203125D0 0.0018087649950757623D0 1.1100000143051148D0)) (list (list 12.0D0 2440.5859375D0 0.0016308848280459643D0 1.1200000047683716D0)) (list (list 12.0D0 2439.791259765625D0 0.0015368721215054393D0 1.1299999952316285D0)) (list (list 12.0D0 2439.22900390625D0 0.0015429152408614755D0 1.1399999856948853D0)) (list (list 12.0D0 2439.188232421875D0 0.0016195428324863315D0 1.149999976158142D0)) (list (list 12.0D0 2438.802734375D0 0.0016952528385445476D0 1.159999966621399D0)) (list (list 12.0D0 2437.705810546875D0 0.0017578399274498225D0 1.1699999570846558D0)) (list (list 12.0D0 2436.446044921875D0 0.0018004858866333962D0 1.1799999475479126D0)) (list (list 12.0D0 2435.480224609375D0 0.001784909749403596D0 1.1899999380111695D0)) (list (list 12.0D0 2435.212158203125D0 0.0016610787715762854D0 1.1999999284744263D0)) (list (list 12.0D0 2435.740234375D0 0.0014367267722263933D0 1.209999918937683D0)) (list (list 12.0D0 2436.466064453125D0 0.001276994007639587D0 1.2200000286102295D0)) (list (list 12.0D0 2437.169189453125D0 0.001240001991391182D0 1.2300000190734864D0)) (list (list 12.0D0 2437.58056640625D0 0.0013175745261833072D0 1.2400000095367432D0)) (list (list 12.0D0 2437.452392578125D0 0.001459132763557136D0 1.25D0)) (list (list 12.0D0 2437.224609375D0 0.00157534412574023D0 1.2599999904632569D0)) (list (list 12.0D0 2437.2412109375D0 0.0016998144565150142D0 1.2699999809265137D0)) (list (list 12.0D0 2437.065673828125D0 0.0018471407238394022D0 1.2799999713897705D0)) (list (list 12.0D0 2436.43408203125D0 0.001991432160139084D0 1.2899999618530274D0)) (list (list 12.0D0 2435.235595703125D0 0.0020827020052820444D0 1.2999999523162842D0)) (list (list 12.0D0 2434.19775390625D0 0.002028893446549773D0 1.309999942779541D0)) (list (list 12.0D0 2433.4365234375D0 0.0019471333362162114D0 1.3199999332427979D0)) (list (list 12.0D0 2432.981201171875D0 0.001930853701196611D0 1.3299999237060547D0)) (list (list 12.0D0 2432.971923828125D0 0.0019941905047744513D0 1.3399999141693116D0)) (list (list 12.0D0 2433.576904296875D0 0.002103968523442745D0 1.350000023841858D0)) (list (list 12.0D0 2434.864990234375D0 0.002142606070265174D0 1.3600000143051148D0)) (list (list 12.0D0 2436.124267578125D0 0.0021271200384944678D0 1.3700000047683716D0)) (list (list 12.0D0 2437.251953125D0 0.002140060067176819D0 1.3799999952316285D0)) (list (list 12.0D0 2438.01708984375D0 0.0022295124363154173D0 1.3899999856948853D0)) (list (list 12.0D0 2438.156494140625D0 0.002419120632112026D0 1.399999976158142D0)) (list (list 12.0D0 2437.663330078125D0 0.0026408107951283455D0 1.409999966621399D0)) (list (list 12.0D0 2437.267333984375D0 0.0027919956482946873D0 1.4199999570846558D0)) (list (list 12.0D0 2437.201416015625D0 0.0028703645803034306D0 1.4299999475479126D0)) (list (list 12.0D0 2437.39013671875D0 0.0029074540361762047D0 1.4399999380111695D0)) (list (list 12.0D0 2437.620361328125D0 0.002948837587609887D0 1.4499999284744263D0)) (list (list 12.0D0 2437.9013671875D0 0.0029755968134850264D0 1.459999918937683D0)) (list (list 12.0D0 2438.04150390625D0 0.002881385153159499D0 1.46999990940094D0)) (list (list 12.0D0 2437.938720703125D0 0.0026701404713094235D0 1.4800000190734864D0)) (list (list 12.0D0 2437.624755859375D0 0.0023929779417812825D0 1.4900000095367432D0)) (list (list 12.0D0 2437.224609375D0 0.002130397828295827D0 1.5D0)) (list (list 12.0D0 2437.109619140625D0 0.00198820186778903D0 1.5099999904632569D0)) (list (list 12.0D0 2437.15283203125D0 0.0018847821047529579D0 1.5199999809265137D0)) (list (list 12.0D0 2437.14990234375D0 0.0017460103845223785D0 1.5299999713897705D0)) (list (list 12.0D0 2436.937255859375D0 0.0015543618937954307D0 1.5399999618530274D0)) (list (list 12.0D0 2436.363037109375D0 0.0013270104536786676D0 1.5499999523162842D0)) (list (list 12.0D0 2435.1884765625D0 0.0011793272569775582D0 1.559999942779541D0)) (list (list 12.0D0 2433.881103515625D0 0.001162356580607593D0 1.5699999332427979D0)) (list (list 12.0D0 2433.47412109375D0 0.0012203098740428687D0 1.5799999237060547D0)) (list (list 12.0D0 2433.893798828125D0 0.001320594223216176D0 1.5899999141693116D0)) (list (list 12.0D0 2434.525634765625D0 0.0014356968458741904D0 1.5999999046325684D0)) (list (list 12.0D0 2434.375D0 0.0015374742215499282D0 1.6100000143051148D0)) (list (list 12.0D0 2433.841796875D0 0.001588008482940495D0 1.6200000047683716D0)) (list (list 12.0D0 2433.25634765625D0 0.0015956007409840823D0 1.6299999952316285D0)) (list (list 12.0D0 2432.720703125D0 0.0015870252391323448D0 1.6399999856948853D0)) (list (list 12.0D0 2432.2861328125D0 0.00159973104018718D0 1.649999976158142D0)) (list (list 12.0D0 2432.39501953125D0 0.00168077670969069D0 1.659999966621399D0)) (list (list 12.0D0 2432.921630859375D0 0.0018071854719892145D0 1.6699999570846558D0)) (list (list 12.0D0 2433.170166015625D0 0.0019330631475895644D0 1.6799999475479126D0)) (list (list 12.0D0 2433.0693359375D0 0.002036395715549588D0 1.6899999380111695D0)) (list (list 12.0D0 2432.87060546875D0 0.0021073482930660248D0 1.6999999284744263D0)) (list (list 12.0D0 2433.46630859375D0 0.002163247438147664D0 1.709999918937683D0)) (list (list 12.0D0 2434.648193359375D0 0.0023012948222458363D0 1.71999990940094D0)) (list (list 12.0D0 2435.833740234375D0 0.002554693492129445D0 1.7300000190734864D0)) (list (list 12.0D0 2436.736083984375D0 0.002894106786698103D0 1.7400000095367432D0)) (list (list 12.0D0 2437.243896484375D0 0.003248381894081831D0 1.75D0)) (list (list 12.0D0 2437.823974609375D0 0.003435073420405388D0 1.7599999904632569D0)) (list (list 12.0D0 2439.08056640625D0 0.0033828639425337315D0 1.7699999809265137D0)) (list (list 12.0D0 2440.406982421875D0 0.003179487306624651D0 1.7799999713897705D0)) (list (list 12.0D0 2441.645263671875D0 0.002871860982850194D0 1.7899999618530274D0)) (list (list 12.0D0 2442.824951171875D0 0.002502906834706664D0 1.7999999523162842D0)) (list (list 12.0D0 2444.2236328125D0 0.002134746639057994D0 1.809999942779541D0)) (list (list 12.0D0 2445.145263671875D0 0.0018458939157426358D0 1.8199999332427979D0)) (list (list 12.0D0 2445.102783203125D0 0.001621074159629643D0 1.8299999237060547D0)) (list (list 12.0D0 2443.636474609375D0 0.001442856271751225D0 1.8399999141693116D0)) (list (list 12.0D0 2440.590087890625D0 0.0012955148704349995D0 1.8499999046325684D0)) (list (list 12.0D0 2437.802001953125D0 0.0012187706306576729D0 1.8600000143051148D0)) (list (list 12.0D0 2437.16455078125D0 0.0011723892530426383D0 1.8700000047683716D0)) (list (list 12.0D0 2438.06640625D0 0.001172694843262434D0 1.8799999952316285D0)) (list (list 12.0D0 2439.314453125D0 0.0012281193630769849D0 1.8899999856948853D0)) (list (list 12.0D0 2439.555908203125D0 0.0013364043552428484D0 1.899999976158142D0)) (list (list 12.0D0 2438.414794921875D0 0.0014536173548549414D0 1.909999966621399D0)) (list (list 12.0D0 2437.81005859375D0 0.0015657816547900439D0 1.9199999570846558D0)) (list (list 12.0D0 2438.26220703125D0 0.0016728234477341175D0 1.9299999475479126D0)) (list (list 12.0D0 2439.297607421875D0 0.0018167996313422919D0 1.9399999380111695D0)) (list (list 12.0D0 2440.0791015625D0 0.002044282155111432D0 1.9499999284744263D0)) (list (list 12.0D0 2439.979736328125D0 0.002327689668163657D0 1.959999918937683D0)) (list (list 12.0D0 2439.086181640625D0 0.002523405011743307D0 1.96999990940094D0)) (list (list 12.0D0 2437.83544921875D0 0.0025832343380898238D0 1.9799998998641968D0)) (list (list 12.0D0 2436.487548828125D0 0.002518195891752839D0 1.9900000095367432D0)) (list (list 12.0D0 2435.34326171875D0 0.0023676143027842045D0 2.0D0)) (list (list 12.0D0 2435.353271484375D0 0.002175937406718731D0 2.009999990463257D0)) (list (list 12.0D0 2435.599609375D0 0.002021076623350382D0 2.0199999809265137D0)) (list (list 12.0D0 2435.36083984375D0 0.0019380555022507906D0 2.0299999713897705D0)) (list (list 12.0D0 2434.66455078125D0 0.0019349224166944623D0 2.0399999618530274D0)) (list (list 12.0D0 2433.90185546875D0 0.0019971542060375214D0 2.049999952316284D0)) (list (list 12.0D0 2434.221923828125D0 0.002038788516074419D0 2.059999942779541D0)) (list (list 12.0D0 2435.730712890625D0 0.0020347172394394875D0 2.069999933242798D0)) (list (list 12.0D0 2437.08984375D0 0.0020405708346515894D0 2.0799999237060547D0)) (list (list 12.0D0 2437.552001953125D0 0.0020632087253034115D0 2.0899999141693116D0)) (list (list 12.0D0 2436.715576171875D0 0.002097023418173194D0 2.0999999046325684D0)) (list (list 12.0D0 2435.176025390625D0 0.0021609754767268896D0 2.109999895095825D0)) (list (list 12.0D0 2434.783935546875D0 0.0022316076792776585D0 2.119999885559082D0)) (list (list 12.0D0 2435.0791015625D0 0.0022975625470280648D0 2.129999876022339D0)) (list (list 12.0D0 2435.787841796875D0 0.002349637681618333D0 2.1399998664855957D0)) (list (list 12.0D0 2436.675048828125D0 0.002382318489253521D0 2.1499998569488526D0)) (list (list 12.0D0 2437.653564453125D0 0.0024078097194433213D0 2.1599998474121094D0)) (list (list 12.0D0 2438.661376953125D0 0.002450535772368312D0 2.169999837875366D0)) (list (list 12.0D0 2439.275390625D0 0.002462050411850214D0 2.180000066757202D0)) (list (list 12.0D0 2439.18212890625D0 0.002408563159406185D0 2.190000057220459D0)) (list (list 12.0D0 2438.259765625D0 0.002275828504934907D0 2.200000047683716D0)) (list (list 12.0D0 2437.2431640625D0 0.002134359208866954D0 2.2100000381469727D0)) (list (list 12.0D0 2437.109619140625D0 0.001993071287870407D0 2.2200000286102295D0)) (list (list 12.0D0 2437.96240234375D0 0.0018371079349890352D0 2.2300000190734864D0)) (list (list 12.0D0 2439.1728515625D0 0.00166642339900136D0 2.240000009536743D0)) (list (list 12.0D0 2439.86181640625D0 0.0014908559387549758D0 2.25D0)) (list (list 12.0D0 2439.11572265625D0 0.001352748367935419D0 2.259999990463257D0)) (list (list 12.0D0 2438.145263671875D0 0.001338008209131658D0 2.2699999809265137D0)) (list (list 12.0D0 2437.898193359375D0 0.0014159237034618855D0 2.2799999713897705D0)) (list (list 12.0D0 2438.4287109375D0 0.0015407925238832832D0 2.2899999618530274D0)) (list (list 12.0D0 2439.3486328125D0 0.0016510830027982593D0 2.299999952316284D0)) (list (list 12.0D0 2439.268798828125D0 0.001635775901377201D0 2.309999942779541D0)) (list (list 12.0D0 2437.74267578125D0 0.001511892769485712D0 2.319999933242798D0)) (list (list 12.0D0 2435.702880859375D0 0.0013818584848195315D0 2.3299999237060547D0)) (list (list 12.0D0 2433.87158203125D0 0.0012732264585793019D0 2.3399999141693116D0)) (list (list 12.0D0 2432.9736328125D0 0.0011899565579369665D0 2.3499999046325684D0)) (list (list 12.0D0 2434.089111328125D0 0.0011161098955199123D0 2.359999895095825D0)) (list (list 12.0D0 2435.06494140625D0 0.0011183080496266485D0 2.369999885559082D0)) (list (list 12.0D0 2435.319580078125D0 0.001194880693219602D0 2.379999876022339D0)) (list (list 12.0D0 2435.359130859375D0 0.001333090360276401D0 2.3899998664855957D0)) (list (list 12.0D0 2435.8720703125D0 0.0015096142888069153D0 2.3999998569488526D0)) (list (list 12.0D0 2436.805419921875D0 0.0016800243174657226D0 2.4099998474121094D0)) (list (list 12.0D0 2437.03466796875D0 0.0017633975949138403D0 2.419999837875366D0)) (list (list 12.0D0 2436.7421875D0 0.0017628370551392436D0 2.429999828338623D0)) (list (list 12.0D0 2436.537841796875D0 0.0017214437248185277D0 2.440000057220459D0)) (list (list 12.0D0 2437.05029296875D0 0.001692041871137917D0 2.450000047683716D0)) (list (list 12.0D0 2438.351318359375D0 0.001705594127997756D0 2.4600000381469727D0)) (list (list 12.0D0 2439.519775390625D0 0.0016558535862714053D0 2.4700000286102295D0)) (list (list 12.0D0 2440.0400390625D0 0.0015016301767900587D0 2.4800000190734864D0)) (list (list 12.0D0 2439.902587890625D0 0.0012930940138176084D0 2.490000009536743D0)) (list (list 12.0D0 2439.22119140625D0 0.001113473903387785D0 2.5D0)) (list (list 12.0D0 2437.867431640625D0 0.0010854447027668357D0 2.509999990463257D0)) (list (list 12.0D0 2436.2568359375D0 0.0011595720425248146D0 2.5199999809265137D0)) (list (list 12.0D0 2435.65625D0 0.001206741202622652D0 2.5299999713897705D0)) (list (list 12.0D0 2435.8330078125D0 0.0011849917937070132D0 2.5399999618530274D0)) (list (list 12.0D0 2436.138671875D0 0.0010871757986024023D0 2.549999952316284D0)) (list (list 12.0D0 2435.856689453125D0 9.651161381043494D-4 2.559999942779541D0)) (list (list 12.0D0 2434.63427734375D0 8.613902027718723D-4 2.569999933242798D0)) (list (list 12.0D0 2432.949951171875D0 8.015728672035039D-4 2.5799999237060547D0)) (list (list 12.0D0 2431.8232421875D0 8.085482404567301D-4 2.5899999141693116D0)) (list (list 12.0D0 2432.2255859375D0 9.034721297211945D-4 2.5999999046325684D0)) (list (list 12.0D0 2434.343994140625D0 0.0011246075155213476D0 2.609999895095825D0)) (list (list 12.0D0 2435.852783203125D0 0.00140818499494344D0 2.619999885559082D0)) (list (list 12.0D0 2436.173095703125D0 0.0016013255808502436D0 2.629999876022339D0)) (list (list 12.0D0 2435.40771484375D0 0.0016474326839670539D0 2.6399998664855957D0)) (list (list 12.0D0 2433.935546875D0 0.0015332936309278012D0 2.6499998569488526D0)) (list (list 12.0D0 2432.41455078125D0 0.001314318971708417D0 2.6599998474121094D0)) (list (list 12.0D0 2431.56640625D0 0.001122120302170515D0 2.669999837875366D0)) (list (list 12.0D0 2431.056396484375D0 0.001000498654320836D0 2.679999828338623D0)) (list (list 12.0D0 2430.785400390625D0 9.720250382088125D-4 2.690000057220459D0)) (list (list 12.0D0 2430.82421875D0 0.0010463678045198322D0 2.700000047683716D0)) (list (list 12.0D0 2431.951416015625D0 0.0012214119778946042D0 2.7100000381469727D0)) (list (list 12.0D0 2433.656494140625D0 0.0014638251159340144D0 2.7200000286102295D0)) (list (list 12.0D0 2434.564697265625D0 0.001690826378762722D0 2.7300000190734864D0)) (list (list 12.0D0 2434.370849609375D0 0.001854952541179955D0 2.740000009536743D0)) (list (list 12.0D0 2433.14990234375D0 0.0019322859589010477D0 2.75D0)) (list (list 12.0D0 2431.41943359375D0 0.0019599618390202523D0 2.759999990463257D0)) (list (list 12.0D0 2430.831787109375D0 0.0019294631201773882D0 2.7699999809265137D0)) (list (list 12.0D0 2431.71533203125D0 0.0018275154288858176D0 2.7799999713897705D0)) (list (list 12.0D0 2433.235595703125D0 0.0016669004689902068D0 2.7899999618530274D0)) (list (list 12.0D0 2434.15478515625D0 0.0014678053557872773D0 2.799999952316284D0)) (list (list 12.0D0 2432.596923828125D0 0.0012422946747392416D0 2.809999942779541D0)) (list (list 12.0D0 2431.158935546875D0 0.001123611000366509D0 2.819999933242798D0)) (list (list 12.0D0 2431.57568359375D0 0.001079412642866373D0 2.8299999237060547D0)) (list (list 12.0D0 2433.319091796875D0 0.0011137438705191017D0 2.8399999141693116D0)) (list (list 12.0D0 2435.156982421875D0 0.0012195272138342262D0 2.8499999046325684D0)) (list (list 12.0D0 2434.999755859375D0 0.0013285529566928745D0 2.859999895095825D0)) (list (list 12.0D0 2433.6015625D0 0.0013699998380616308D0 2.869999885559082D0)) (list (list 12.0D0 2431.87060546875D0 0.0013277630787342787D0 2.879999876022339D0)) (list (list 12.0D0 2431.011474609375D0 0.0012230012798681856D0 2.8899998664855957D0)) (list (list 12.0D0 2431.76953125D0 0.0011098767863586545D0 2.8999998569488526D0)) (list (list 12.0D0 2432.82421875D0 0.0011440347880125046D0 2.9099998474121094D0)) (list (list 12.0D0 2433.021484375D0 0.0013207035372033716D0 2.919999837875366D0)) (list (list 12.0D0 2432.26513671875D0 0.0014655394479632378D0 2.929999828338623D0)) (list (list 12.0D0 2431.075439453125D0 0.0015257344348356128D0 2.93999981880188D0)) (list (list 12.0D0 2429.97412109375D0 0.0015015419339761138D0 2.950000047683716D0)) (list (list 12.0D0 2428.876220703125D0 0.001505115069448948D0 2.9600000381469727D0)) (list (list 12.0D0 2428.595703125D0 0.0015906412154436112D0 2.9700000286102295D0)) (list (list 12.0D0 2429.697509765625D0 0.001653304323554039D0 2.9800000190734864D0)) (list (list 12.0D0 2431.50439453125D0 0.0016611649189144373D0 2.990000009536743D0)) (list (list 12.0D0 2433.03466796875D0 0.0016135891200974584D0 3.0D0)) (list (list 12.0D0 2433.09814453125D0 0.0015732866013422609D0 3.009999990463257D0)) (list (list 12.0D0 2432.251953125D0 0.0016320670256391168D0 3.0199999809265137D0)) (list (list 12.0D0 2430.91162109375D0 0.001720754662528634D0 3.0299999713897705D0)) (list (list 12.0D0 2429.6884765625D0 0.0017398756463080645D0 3.0399999618530274D0)) (list (list 12.0D0 2429.2275390625D0 0.001609687926247716D0 3.049999952316284D0)) (list (list 12.0D0 2430.24072265625D0 0.0013302202569320798D0 3.059999942779541D0)) (list (list 12.0D0 2430.962890625D0 0.001144617097452283D0 3.069999933242798D0)) (list (list 12.0D0 2431.304443359375D0 0.0010798198636621237D0 3.0799999237060547D0)) (list (list 12.0D0 2431.795166015625D0 0.0010814714478328824D0 3.0899999141693116D0)) (list (list 12.0D0 2432.790771484375D0 0.0010789318475872279D0 3.0999999046325684D0)) (list (list 12.0D0 2433.591064453125D0 0.0010034634033218027D0 3.109999895095825D0)) (list (list 12.0D0 2432.3134765625D0 9.381569689139724D-4 3.119999885559082D0)) (list (list 12.0D0 2429.864013671875D0 9.690634324215353D-4 3.129999876022339D0)) (list (list 12.0D0 2427.87353515625D0 0.0010568788275122643D0 3.1399998664855957D0)) (list (list 12.0D0 2427.8544921875D0 0.00113205355592072D0 3.1499998569488526D0)) (list (list 12.0D0 2430.64111328125D0 0.0010952851735055447D0 3.1599998474121094D0)) (list (list 12.0D0 2432.46923828125D0 0.0010473494185134769D0 3.169999837875366D0)) (list (list 12.0D0 2432.3125D0 0.0010220970725640655D0 3.179999828338623D0)) (list (list 12.0D0 2430.76220703125D0 0.001049962593242526D0 3.18999981880188D0)) (list (list 12.0D0 2428.9794921875D0 0.0011387033155187965D0 3.1999998092651367D0)) (list (list 12.0D0 2429.078369140625D0 0.001225884654559195D0 3.2100000381469727D0)) (list (list 12.0D0 2429.748779296875D0 0.001266436418518424D0 3.2200000286102295D0)) (list (list 12.0D0 2429.6982421875D0 0.0012872989755123854D0 3.2300000190734864D0)) (list (list 12.0D0 2428.677001953125D0 0.0012828876497223974D0 3.240000009536743D0)) (list (list 12.0D0 2426.97998046875D0 0.0012385498266667128D0 3.25D0)) (list (list 12.0D0 2426.11962890625D0 0.0011168477358296514D0 3.259999990463257D0)) (list (list 12.0D0 2427.04052734375D0 9.597818134352565D-4 3.2699999809265137D0)) (list (list 12.0D0 2428.2978515625D0 8.502122364006937D-4 3.2799999713897705D0)) (list (list 12.0D0 2429.926025390625D0 7.929039420560002D-4 3.2899999618530274D0)) (list (list 12.0D0 2431.9111328125D0 7.747067138552666D-4 3.299999952316284D0)) (list (list 12.0D0 2433.373046875D0 7.7048409730196D-4 3.309999942779541D0)) (list (list 12.0D0 2433.01513671875D0 7.699948037043214D-4 3.319999933242798D0)) (list (list 12.0D0 2431.218994140625D0 7.932805456221104D-4 3.3299999237060547D0)) (list (list 12.0D0 2429.256103515625D0 8.28662421554327D-4 3.3399999141693116D0)) (list (list 12.0D0 2428.503662109375D0 8.49267584271729D-4 3.3499999046325684D0)) (list (list 12.0D0 2430.375732421875D0 7.910426938906312D-4 3.359999895095825D0)) (list (list 12.0D0 2432.477294921875D0 6.981015321798623D-4 3.369999885559082D0)) (list (list 12.0D0 2432.69580078125D0 6.088456138968468D-4 3.379999876022339D0)) (list (list 12.0D0 2431.6025390625D0 5.621535237878561D-4 3.3899998664855957D0)) (list (list 12.0D0 2430.290771484375D0 5.871813627891243D-4 3.3999998569488526D0)) (list (list 12.0D0 2430.198486328125D0 6.926614441908896D-4 3.4099998474121094D0)) (list (list 12.0D0 2430.62744140625D0 8.198892464861274D-4 3.419999837875366D0)) (list (list 12.0D0 2431.079833984375D0 9.170138509944081D-4 3.429999828338623D0)) (list (list 12.0D0 2431.5810546875D0 9.737160289660096D-4 3.43999981880188D0)) (list (list 12.0D0 2432.1337890625D0 9.970840765163303D-4 3.4499998092651367D0)) (list (list 12.0D0 2432.4443359375D0 0.0010252799838781357D0 3.4600000381469727D0)) (list (list 12.0D0 2431.87890625D0 0.0010688714683055878D0 3.4700000286102295D0)) (list (list 12.0D0 2430.731689453125D0 0.001085445866920054D0 3.4800000190734864D0)) (list (list 12.0D0 2429.95263671875D0 0.0010515403700992465D0 3.490000009536743D0)) (list (list 12.0D0 2430.451416015625D0 9.598181932233274D-4 3.5D0)) (list (list 12.0D0 2432.924072265625D0 8.351809810847044D-4 3.509999990463257D0)) (list (list 12.0D0 2434.672119140625D0 7.600896642543376D-4 3.5199999809265137D0)) (list (list 12.0D0 2434.1201171875D0 6.871602381579578D-4 3.5299999713897705D0)) (list (list 12.0D0 2431.203369140625D0 6.15860044490546D-4 3.5399999618530274D0)) (list (list 12.0D0 2426.35009765625D0 5.508727044798434D-4 3.549999952316284D0)) (list (list 12.0D0 2420.50927734375D0 4.958618665114045D-4 3.559999942779541D0)) (list (list 12.0D0 2421.830322265625D0 4.190714389551431D-4 3.569999933242798D0)) (list (list 12.0D0 2409.416259765625D0 3.5900328657589853D-4 3.5799999237060547D0)) (list (list 12.0D0 2397.633544921875D0 3.230650327168405D-4 3.5899999141693116D0)) (list (list 12.0D0 2397.420166015625D0 3.1223142286762595D-4 3.5999999046325684D0)) (list (list 12.0D0 2398.181396484375D0 3.2416972680948675D-4 3.609999895095825D0)) (list (list 12.0D0 2420.68994140625D0 8.479485404677689D-4 3.619999885559082D0)) (list (list 12.0D0 2429.016357421875D0 0.001025776844471693D0 3.629999876022339D0)) (list (list 12.0D0 2429.665283203125D0 9.771203622221947D-4 3.6399998664855957D0)) (list (list 12.0D0 2430.849365234375D0 8.918538806028664D-4 3.6499998569488526D0)) (list (list 12.0D0 2431.013427734375D0 8.163232705555856D-4 3.6599998474121094D0)) (list (list 12.0D0 2429.918212890625D0 8.102558786049485D-4 3.669999837875366D0)) (list (list 12.0D0 2429.070556640625D0 8.694785065017641D-4 3.679999828338623D0)) (list (list 12.0D0 2428.71630859375D0 9.640954667702317D-4 3.68999981880188D0)) (list (list 12.0D0 2428.6123046875D0 0.0010537822963669897D0 3.6999998092651367D0)) (list (list 12.0D0 2427.58837890625D0 0.0010779391741380096D0 3.7099997997283936D0)) (list (list 12.0D0 2426.063232421875D0 0.0010372854303568602D0 3.7200000286102295D0)) (list (list 12.0D0 2425.113037109375D0 9.69978456851095D-4 3.7300000190734864D0)) (list (list 12.0D0 2425.029541015625D0 8.776510367169976D-4 3.740000009536743D0)) (list (list 12.0D0 2425.89111328125D0 7.636136724613607D-4 3.75D0)) (list (list 12.0D0 2427.581787109375D0 6.427697371691465D-4 3.759999990463257D0)) (list (list 12.0D0 2429.215576171875D0 5.847442662343383D-4 3.7699999809265137D0)) (list (list 12.0D0 2430.47314453125D0 6.290083401836455D-4 3.7799999713897705D0)) (list (list 12.0D0 2430.77490234375D0 7.3145522037521D-4 3.7899999618530274D0)) (list (list 12.0D0 2429.589599609375D0 8.267264347523451D-4 3.799999952316284D0)) (list (list 12.0D0 2426.361083984375D0 8.169026696123183D-4 3.809999942779541D0)) (list (list 12.0D0 2424.8681640625D0 6.861345609650016D-4 3.819999933242798D0)) (list (list 12.0D0 2425.1796875D0 5.522439605556428D-4 3.8299999237060547D0)) (list (list 12.0D0 2426.890869140625D0 4.903482040390372D-4 3.8399999141693116D0)) (list (list 12.0D0 2429.29052734375D0 5.405250121839345D-4 3.8499999046325684D0)) (list (list 12.0D0 2431.124267578125D0 6.799473776482046D-4 3.859999895095825D0)) (list (list 12.0D0 2429.897216796875D0 8.010891615413129D-4 3.869999885559082D0)) (list (list 12.0D0 2428.538818359375D0 9.303808328695595D-4 3.879999876022339D0)) (list (list 12.0D0 2427.52734375D0 0.0010352830868214369D0 3.8899998664855957D0)) (list (list 12.0D0 2427.20263671875D0 0.0010656202211976052D0 3.8999998569488526D0)) (list (list 12.0D0 2428.248291015625D0 9.306258289143443D-4 3.9099998474121094D0)) (list (list 12.0D0 2444.71240234375D0 7.119614747352898D-4 3.919999837875366D0)) (list (list 12.0D0 2451.109375D0 5.652076215483248D-4 3.929999828338623D0)) (list (list 12.0D0 2451.647705078125D0 4.4627388706430793D-4 3.93999981880188D0)) (list (list 12.0D0 2448.015380859375D0 3.602210490498692D-4 3.9499998092651367D0)) (list (list 12.0D0 2428.349609375D0 4.8255553701892495D-4 3.9599997997283936D0)) (list (list 12.0D0 2427.46484375D0 6.390149937942624D-4 3.9700000286102295D0)) (list (list 12.0D0 2429.205078125D0 7.487928960472345D-4 3.9800000190734864D0)) (list (list 12.0D0 2431.42431640625D0 7.960857474245131D-4 3.990000009536743D0)) (list (list 12.0D0 2432.933837890625D0 7.804196211509407D-4 4.0D0)) (list (list 12.0D0 2431.764404296875D0 7.151309982873499D-4 4.009999752044678D0)) (list (list 12.0D0 2429.4755859375D0 7.353013497777283D-4 4.019999980926514D0)) (list (list 12.0D0 2428.240478515625D0 8.088374743238092D-4 4.029999732971191D0)) (list (list 12.0D0 2428.345703125D0 8.862366667017341D-4 4.039999961853027D0)) (list (list 12.0D0 2429.45263671875D0 9.298804216086865D-4 4.049999713897705D0)) (list (list 12.0D0 2430.287109375D0 9.285854175686836D-4 4.059999942779541D0)) (list (list 12.0D0 2431.87109375D0 8.571466896682978D-4 4.069999694824219D0)) (list (list 12.0D0 2432.069580078125D0 7.534320466220379D-4 4.079999923706055D0)) (list (list 12.0D0 2430.47265625D0 6.686510751023889D-4 4.089999675750732D0)) (list (list 12.0D0 2427.791748046875D0 6.450684159062803D-4 4.099999904632568D0)) (list (list 12.0D0 2426.79833984375D0 7.105152471922338D-4 4.110000133514404D0)) (list (list 12.0D0 2431.3154296875D0 7.831654511392117D-4 4.119999885559082D0)) (list (list 12.0D0 2433.357421875D0 8.60478961840272D-4 4.130000114440918D0)) (list (list 12.0D0 2432.964111328125D0 8.991694776341319D-4 4.139999866485596D0)) (list (list 12.0D0 2431.402099609375D0 8.759248885326088D-4 4.150000095367432D0)) (list (list 12.0D0 2431.10498046875D0 8.101085550151765D-4 4.159999847412109D0)) (list (list 12.0D0 2432.54296875D0 7.311938679777086D-4 4.170000076293945D0)) (list (list 12.0D0 2433.223388671875D0 7.009105174802244D-4 4.179999828338623D0)) (list (list 12.0D0 2432.9453125D0 7.353862165473402D-4 4.190000057220459D0)) (list (list 12.0D0 2431.89990234375D0 8.309832774102688D-4 4.199999809265137D0)) (list (list 12.0D0 2430.6572265625D0 9.566349908709526D-4 4.210000038146973D0)) (list (list 12.0D0 2427.8271484375D0 9.561357437632978D-4 4.21999979019165D0)) (list (list 12.0D0 2416.55908203125D0 9.45493346080184D-4 4.230000019073486D0)) (list (list 12.0D0 2405.05859375D0 9.312191978096962D-4 4.239999771118164D0)) (list (list 12.0D0 2398.743408203125D0 8.994758827611804D-4 4.25D0)) (list (list 12.0D0 2395.736572265625D0 8.084789151325822D-4 4.259999752044678D0)) (list (list 12.0D0 2394.3720703125D0 7.73691339418292D-4 4.269999980926514D0)) (list (list 12.0D0 2392.475341796875D0 7.270253845490515D-4 4.279999732971191D0)) (list (list 12.0D0 2388.18017578125D0 6.996403681114316D-4 4.289999961853027D0)) (list (list 12.0D0 2386.392578125D0 6.931693060323596D-4 4.299999713897705D0)) (list (list 12.0D0 2405.89892578125D0 6.387847242876887D-4 4.309999942779541D0)) (list (list 12.0D0 2403.683837890625D0 6.747249281033874D-4 4.319999694824219D0)) (list (list 12.0D0 2402.858154296875D0 7.076404290273786D-4 4.329999923706055D0)) (list (list 12.0D0 2403.717041015625D0 7.45793164242059D-4 4.339999675750732D0)) (list (list 12.0D0 2404.728515625D0 8.069357718341053D-4 4.349999904632568D0)) (list (list 12.0D0 2403.677001953125D0 9.171247365884483D-4 4.360000133514404D0)) (list (list 12.0D0 2401.169677734375D0 0.0010421370388939977D0 4.369999885559082D0)) (list (list 12.0D0 2400.93603515625D0 0.0010814620181918145D0 4.380000114440918D0)) (list (list 12.0D0 2401.966552734375D0 0.0010632808553054929D0 4.389999866485596D0)) (list (list 12.0D0 2403.14013671875D0 0.0010187516454607249D0 4.400000095367432D0)) (list (list 12.0D0 2403.670654296875D0 9.677279158495367D-4 4.409999847412109D0)) (list (list 12.0D0 2405.450439453125D0 8.657829603180289D-4 4.420000076293945D0)) (list (list 12.0D0 2409.27783203125D0 7.811042596586049D-4 4.429999828338623D0)) (list (list 12.0D0 2413.5029296875D0 7.453798898495734D-4 4.440000057220459D0)) (list (list 12.0D0 2415.19091796875D0 7.362404139712453D-4 4.449999809265137D0)) (list (list 12.0D0 2409.006103515625D0 6.377068930305541D-4 4.460000038146973D0)) (list (list 12.0D0 2428.43017578125D0 6.33178511634469D-4 4.46999979019165D0)) (list (list 12.0D0 2434.5810546875D0 2.7697018231265247D-4 4.480000019073486D0)) (list (list 13.0D0 1061.7391357421875D0 2.6822328800335527D-4 0.07999999821186066D0)) (list (list 13.0D0 1064.701416015625D0 4.702532896772027D-4 0.08999999612569809D0)) (list (list 13.0D0 1062.647216796875D0 8.567104814574122D-4 0.09999999403953552D0)) (list (list 13.0D0 1060.593017578125D0 0.0012431680224835873D0 0.10999999940395355D0)) (list (list 13.0D0 1058.0469970703125D0 0.001884675002656877D0 0.11999999731779099D0)) (list (list 13.0D0 1056.255859375D0 0.00259683676995337D0 0.12999999523162842D0)) (list (list 13.0D0 1055.3583984375D0 0.003297205548733473D0 0.14000000059604645D0)) (list (list 13.0D0 1054.4700927734375D0 0.0039949859492480755D0 0.14999999105930328D0)) (list (list 13.0D0 1054.9002685546875D0 0.004315037280321121D0 0.1599999964237213D0)) (list (list 13.0D0 1055.0792236328125D0 0.004456748254597187D0 0.17000000178813934D0)) (list (list 13.0D0 1055.06298828125D0 0.00448736734688282D0 0.17999999225139618D0)) (list (list 13.0D0 1054.919189453125D0 0.004468952305614948D0 0.1899999976158142D0)) (list (list 13.0D0 1054.7325439453125D0 0.004460107535123825D0 0.19999998807907105D0)) (list (list 13.0D0 1055.0262451171875D0 0.00448247604072094D0 0.20999999344348908D0)) (list (list 13.0D0 1055.73828125D0 0.004508905578404665D0 0.2199999988079071D0)) (list (list 13.0D0 1056.359130859375D0 0.004506981931626797D0 0.22999998927116394D0)) (list (list 13.0D0 1056.6514892578125D0 0.004461640026420355D0 0.23999999463558197D0)) (list (list 13.0D0 1056.6173095703125D0 0.004373136442154646D0 0.25D0)) (list (list 13.0D0 1056.238037109375D0 0.004220221657305956D0 0.25999999046325684D0)) (list (list 13.0D0 1055.2655029296875D0 0.003991198260337114D0 0.26999998092651367D0)) (list (list 13.0D0 1053.8072509765625D0 0.0036082486622035504D0 0.2800000011920929D0)) (list (list 13.0D0 1052.06298828125D0 0.003101492067798972D0 0.28999999165534973D0)) (list (list 13.0D0 1050.31396484375D0 0.002595739671960473D0 0.29999998211860657D0)) (list (list 13.0D0 1048.212890625D0 0.0021627831738442183D0 0.3100000023841858D0)) (list (list 13.0D0 1046.333251953125D0 0.0019993684254586697D0 0.3199999928474426D0)) (list (list 13.0D0 1044.99658203125D0 0.0020228070206940174D0 0.32999998331069947D0)) (list (list 13.0D0 1044.1422119140625D0 0.002143825637176633D0 0.3400000035762787D0)) (list (list 13.0D0 1043.3841552734375D0 0.002263463567942381D0 0.3499999940395355D0)) (list (list 13.0D0 1042.588134765625D0 0.0023241632152348757D0 0.35999998450279236D0)) (list (list 13.0D0 1041.8487548828125D0 0.002381318947300315D0 0.3700000047683716D0)) (list (list 13.0D0 1041.2652587890625D0 0.0024377924855798483D0 0.3799999952316284D0)) (list (list 13.0D0 1041.0858154296875D0 0.0024780991952866316D0 0.38999998569488526D0)) (list (list 13.0D0 1041.6640625D0 0.002474374370649457D0 0.3999999761581421D0)) (list (list 13.0D0 1042.5889892578125D0 0.0025377608835697174D0 0.4099999964237213D0)) (list (list 13.0D0 1043.4443359375D0 0.002687425585463643D0 0.41999998688697815D0)) (list (list 13.0D0 1043.5909423828125D0 0.0028605982661247254D0 0.429999977350235D0)) (list (list 13.0D0 1043.135498046875D0 0.0029923985712230206D0 0.4399999976158142D0)) (list (list 13.0D0 1042.7728271484375D0 0.003017328679561615D0 0.44999998807907105D0)) (list (list 13.0D0 1042.3533935546875D0 0.0029912360478192568D0 0.4599999785423279D0)) (list (list 13.0D0 1042.4407958984375D0 0.0030241827480494976D0 0.4699999988079071D0)) (list (list 13.0D0 1042.853759765625D0 0.0031217446085065604D0 0.47999998927116394D0)) (list (list 13.0D0 1043.71337890625D0 0.003254743991419673D0 0.4899999797344208D0)) (list (list 13.0D0 1045.3214111328125D0 0.003364673350006342D0 0.5D0)) (list (list 13.0D0 1046.176513671875D0 0.0033738596830517054D0 0.5099999904632568D0)) (list (list 13.0D0 1046.809814453125D0 0.0033799943048506976D0 0.5199999809265137D0)) (list (list 13.0D0 1047.3485107421875D0 0.003403580281883478D0 0.5299999713897705D0)) (list (list 13.0D0 1047.84033203125D0 0.0034694173373281956D0 0.5399999618530273D0)) (list (list 13.0D0 1048.262451171875D0 0.0036012197379022837D0 0.550000011920929D0)) (list (list 13.0D0 1048.0155029296875D0 0.003667903831228614D0 0.5600000023841858D0)) (list (list 13.0D0 1047.47216796875D0 0.0036152503453195095D0 0.5699999928474426D0)) (list (list 13.0D0 1047.066650390625D0 0.0034392548259347678D0 0.5799999833106995D0)) (list (list 13.0D0 1046.5577392578125D0 0.0031201259698718787D0 0.5899999737739563D0)) (list (list 13.0D0 1045.2227783203125D0 0.002635751385241747D0 0.5999999642372131D0)) (list (list 13.0D0 1042.827392578125D0 0.0021459839772433043D0 0.6100000143051148D0)) (list (list 13.0D0 1039.7408447265625D0 0.0018653530860319734D0 0.6200000047683716D0)) (list (list 13.0D0 1037.4327392578125D0 0.0017423169920220972D0 0.6299999952316284D0)) (list (list 13.0D0 1036.56396484375D0 0.0017294600838795305D0 0.6399999856948853D0)) (list (list 13.0D0 1037.173583984375D0 0.0017778974724933505D0 0.6499999761581421D0)) (list (list 13.0D0 1038.1026611328125D0 0.001900829141959548D0 0.6599999666213989D0)) (list (list 13.0D0 1038.708251953125D0 0.0020352795254439116D0 0.6699999570846558D0)) (list (list 13.0D0 1039.207275390625D0 0.0022001920733600855D0 0.6800000071525574D0)) (list (list 13.0D0 1039.7586669921875D0 0.0023667418863624335D0 0.6899999976158142D0)) (list (list 13.0D0 1040.4530029296875D0 0.002475978573784232D0 0.699999988079071D0)) (list (list 13.0D0 1040.3648681640625D0 0.002586488611996174D0 0.7099999785423279D0)) (list (list 13.0D0 1040.8145751953125D0 0.0027082173619419337D0 0.7199999690055847D0)) (list (list 13.0D0 1041.4111328125D0 0.0028949843253940344D0 0.7299999594688416D0)) (list (list 13.0D0 1042.10400390625D0 0.0031304406002163887D0 0.7400000095367432D0)) (list (list 13.0D0 1043.0135498046875D0 0.0033458631951361895D0 0.75D0)) (list (list 13.0D0 1042.968017578125D0 0.00339361559599638D0 0.7599999904632568D0)) (list (list 13.0D0 1043.1556396484375D0 0.0033861843403428793D0 0.7699999809265137D0)) (list (list 13.0D0 1043.1954345703125D0 0.0034137920010834933D0 0.7799999713897705D0)) (list (list 13.0D0 1043.2034912109375D0 0.0035307672806084156D0 0.7899999618530273D0)) (list (list 13.0D0 1043.592529296875D0 0.0037617527414113283D0 0.7999999523162842D0)) (list (list 13.0D0 1043.98388671875D0 0.003981734160333872D0 0.8100000023841858D0)) (list (list 13.0D0 1044.8543701171875D0 0.004163837991654873D0 0.8199999928474426D0)) (list (list 13.0D0 1045.89111328125D0 0.0042592259123921395D0 0.8299999833106995D0)) (list (list 13.0D0 1046.9476318359375D0 0.0042777578346431256D0 0.8399999737739563D0)) (list (list 13.0D0 1047.948974609375D0 0.00426659919321537D0 0.8499999642372131D0)) (list (list 13.0D0 1048.2847900390625D0 0.004196120426058769D0 0.85999995470047D0)) (list (list 13.0D0 1048.352783203125D0 0.004187011159956455D0 0.8700000047683716D0)) (list (list 13.0D0 1048.4560546875D0 0.004237128887325525D0 0.8799999952316284D0)) (list (list 13.0D0 1048.8333740234375D0 0.004316895268857479D0 0.8899999856948853D0)) (list (list 13.0D0 1049.65869140625D0 0.004378274083137512D0 0.8999999761581421D0)) (list (list 13.0D0 1050.503662109375D0 0.004402935039252043D0 0.9099999666213989D0)) (list (list 13.0D0 1051.145751953125D0 0.0043728952296078205D0 0.9199999570846558D0)) (list (list 13.0D0 1051.3560791015625D0 0.004363260697573423D0 0.9300000071525574D0)) (list (list 13.0D0 1051.2044677734375D0 0.004399867728352547D0 0.9399999976158142D0)) (list (list 13.0D0 1050.9505615234375D0 0.004476519767194986D0 0.949999988079071D0)) (list (list 13.0D0 1050.6939697265625D0 0.004539764020591974D0 0.9599999785423279D0)) (list (list 13.0D0 1050.30322265625D0 0.004613501951098442D0 0.9699999690055847D0)) (list (list 13.0D0 1050.0718994140625D0 0.004683478269726038D0 0.9799999594688416D0)) (list (list 13.0D0 1050.0567626953125D0 0.004750227555632591D0 0.9899999499320984D0)) (list (list 13.0D0 1050.1676025390625D0 0.004817776847630739D0 1.0D0)) (list (list 13.0D0 1050.2366943359375D0 0.004790946841239929D0 1.0099999904632569D0)) (list (list 13.0D0 1049.9833984375D0 0.004690988454967737D0 1.0199999809265137D0)) (list (list 13.0D0 1049.4097900390625D0 0.004610071890056133D0 1.0299999713897705D0)) (list (list 13.0D0 1048.6405029296875D0 0.004575165454298258D0 1.0399999618530274D0)) (list (list 13.0D0 1047.869384765625D0 0.004577218554913998D0 1.0499999523162842D0)) (list (list 13.0D0 1046.996337890625D0 0.004625271540135145D0 1.059999942779541D0)) (list (list 13.0D0 1046.20703125D0 0.004594124853610992D0 1.0699999332427979D0)) (list (list 13.0D0 1045.530517578125D0 0.004536557011306286D0 1.0799999237060547D0)) (list (list 13.0D0 1045.00732421875D0 0.0044716824777424336D0 1.090000033378601D0)) (list (list 13.0D0 1044.6953125D0 0.004404050298035145D0 1.100000023841858D0)) (list (list 13.0D0 1044.923583984375D0 0.004375111777335405D0 1.1100000143051148D0)) (list (list 13.0D0 1045.419189453125D0 0.004422110505402088D0 1.1200000047683716D0)) (list (list 13.0D0 1045.675537109375D0 0.004488288424909115D0 1.1299999952316285D0)) (list (list 13.0D0 1045.49267578125D0 0.004552826751023531D0 1.1399999856948853D0)) (list (list 13.0D0 1044.8843994140625D0 0.004609810654073954D0 1.149999976158142D0)) (list (list 13.0D0 1044.5396728515625D0 0.004607022739946842D0 1.159999966621399D0)) (list (list 13.0D0 1045.2413330078125D0 0.0046217008493840695D0 1.1699999570846558D0)) (list (list 13.0D0 1046.3482666015625D0 0.004646760411560535D0 1.1799999475479126D0)) (list (list 13.0D0 1047.3709716796875D0 0.00467931991443038D0 1.1899999380111695D0)) (list (list 13.0D0 1047.9039306640625D0 0.004708712920546532D0 1.1999999284744263D0)) (list (list 13.0D0 1048.0457763671875D0 0.004580220673233271D0 1.209999918937683D0)) (list (list 13.0D0 1048.1365966796875D0 0.004327328875660896D0 1.2200000286102295D0)) (list (list 13.0D0 1048.109619140625D0 0.004085487686097622D0 1.2300000190734864D0)) (list (list 13.0D0 1048.0390625D0 0.003950402606278658D0 1.2400000095367432D0)) (list (list 13.0D0 1048.061279296875D0 0.003994023893028498D0 1.25D0)) (list (list 13.0D0 1048.0906982421875D0 0.0042273420840501785D0 1.2599999904632569D0)) (list (list 13.0D0 1048.3948974609375D0 0.004378532525151968D0 1.2699999809265137D0)) (list (list 13.0D0 1048.837646484375D0 0.004453081171959639D0 1.2799999713897705D0)) (list (list 13.0D0 1049.27880859375D0 0.004479540511965752D0 1.2899999618530274D0)) (list (list 13.0D0 1049.564208984375D0 0.00449622655287385D0 1.2999999523162842D0)) (list (list 13.0D0 1049.481201171875D0 0.004459988791495562D0 1.309999942779541D0)) (list (list 13.0D0 1048.8587646484375D0 0.004399414174258709D0 1.3199999332427979D0)) (list (list 13.0D0 1048.25830078125D0 0.004339813254773617D0 1.3299999237060547D0)) (list (list 13.0D0 1047.7540283203125D0 0.00430922769010067D0 1.3399999141693116D0)) (list (list 13.0D0 1047.1966552734375D0 0.004331609699875116D0 1.350000023841858D0)) (list (list 13.0D0 1046.5316162109375D0 0.0043579894118011D0 1.3600000143051148D0)) (list (list 13.0D0 1045.752197265625D0 0.004287518560886383D0 1.3700000047683716D0)) (list (list 13.0D0 1044.906982421875D0 0.004180510528385639D0 1.3799999952316285D0)) (list (list 13.0D0 1044.036376953125D0 0.004061490762978792D0 1.3899999856948853D0)) (list (list 13.0D0 1043.2095947265625D0 0.00394630990922451D0 1.399999976158142D0)) (list (list 13.0D0 1042.8602294921875D0 0.003921829164028168D0 1.409999966621399D0)) (list (list 13.0D0 1042.483154296875D0 0.003845775267109275D0 1.4199999570846558D0)) (list (list 13.0D0 1042.2745361328125D0 0.003723744535818696D0 1.4299999475479126D0)) (list (list 13.0D0 1042.047607421875D0 0.00356388371437788D0 1.4399999380111695D0)) (list (list 13.0D0 1041.4893798828125D0 0.0033872928470373154D0 1.4499999284744263D0)) (list (list 13.0D0 1040.9599609375D0 0.0033268036786466837D0 1.459999918937683D0)) (list (list 13.0D0 1040.4681396484375D0 0.0033273405861109495D0 1.46999990940094D0)) (list (list 13.0D0 1040.440673828125D0 0.003329874249175191D0 1.4800000190734864D0)) (list (list 13.0D0 1040.705078125D0 0.0033082878217101097D0 1.4900000095367432D0)) (list (list 13.0D0 1040.8275146484375D0 0.0032572178170084954D0 1.5D0)) (list (list 13.0D0 1040.663330078125D0 0.0032486123964190483D0 1.5099999904632569D0)) (list (list 13.0D0 1040.333740234375D0 0.0032849377021193505D0 1.5199999809265137D0)) (list (list 13.0D0 1040.40771484375D0 0.0033091362565755844D0 1.5299999713897705D0)) (list (list 13.0D0 1041.0479736328125D0 0.0032968134619295597D0 1.5399999618530274D0)) (list (list 13.0D0 1042.2110595703125D0 0.0032445096876472235D0 1.5499999523162842D0)) (list (list 13.0D0 1043.7330322265625D0 0.0032207253389060498D0 1.559999942779541D0)) (list (list 13.0D0 1045.09130859375D0 0.0032997794914990664D0 1.5699999332427979D0)) (list (list 13.0D0 1046.151611328125D0 0.0034361074212938547D0 1.5799999237060547D0)) (list (list 13.0D0 1046.685302734375D0 0.003609495935961604D0 1.5899999141693116D0)) (list (list 13.0D0 1046.5184326171875D0 0.0038040324579924345D0 1.5999999046325684D0)) (list (list 13.0D0 1046.2806396484375D0 0.0039744991809129715D0 1.6100000143051148D0)) (list (list 13.0D0 1046.311279296875D0 0.004170720931142569D0 1.6200000047683716D0)) (list (list 13.0D0 1046.6458740234375D0 0.004338262137025595D0 1.6299999952316285D0)) (list (list 13.0D0 1047.1251220703125D0 0.004435342736542225D0 1.6399999856948853D0)) (list (list 13.0D0 1047.47021484375D0 0.0044305045157670975D0 1.649999976158142D0)) (list (list 13.0D0 1047.1435546875D0 0.004325925838202238D0 1.659999966621399D0)) (list (list 13.0D0 1046.6744384765625D0 0.004174893721938133D0 1.6699999570846558D0)) (list (list 13.0D0 1046.1708984375D0 0.00406121788546443D0 1.6799999475479126D0)) (list (list 13.0D0 1045.7650146484375D0 0.0039936755783855915D0 1.6899999380111695D0)) (list (list 13.0D0 1045.5513916015625D0 0.003954969346523285D0 1.6999999284744263D0)) (list (list 13.0D0 1045.1536865234375D0 0.003980104811489582D0 1.709999918937683D0)) (list (list 13.0D0 1044.6861572265625D0 0.004090217873454094D0 1.71999990940094D0)) (list (list 13.0D0 1043.936279296875D0 0.004170716740190983D0 1.7300000190734864D0)) (list (list 13.0D0 1042.9014892578125D0 0.004153389949351549D0 1.7400000095367432D0)) (list (list 13.0D0 1041.607666015625D0 0.003979265224188566D0 1.75D0)) (list (list 13.0D0 1039.427490234375D0 0.003485583933070302D0 1.7599999904632569D0)) (list (list 13.0D0 1036.932861328125D0 0.00290451617911458D0 1.7699999809265137D0)) (list (list 13.0D0 1034.5301513671875D0 0.002405970823019743D0 1.7799999713897705D0)) (list (list 13.0D0 1032.715087890625D0 0.002007650211453438D0 1.7899999618530274D0)) (list (list 13.0D0 1031.9019775390625D0 0.0016731818905100227D0 1.7999999523162842D0)) (list (list 13.0D0 1031.5684814453125D0 0.0014285098295658827D0 1.809999942779541D0)) (list (list 13.0D0 1030.38671875D0 0.0012479736469686032D0 1.8199999332427979D0)) (list (list 13.0D0 1029.0220947265625D0 0.0011275135912001133D0 1.8299999237060547D0)) (list (list 13.0D0 1028.39013671875D0 0.0010693817166611553D0 1.8399999141693116D0)) (list (list 13.0D0 1029.1513671875D0 0.0010706883622333408D0 1.8499999046325684D0)) (list (list 13.0D0 1028.9327392578125D0 0.0010969657450914383D0 1.8600000143051148D0)) (list (list 13.0D0 1028.7247314453125D0 0.0011349418200552464D0 1.8700000047683716D0)) (list (list 13.0D0 1028.7674560546875D0 0.0011827480047941208D0 1.8799999952316285D0)) (list (list 13.0D0 1029.158447265625D0 0.0012370130280032754D0 1.8899999856948853D0)) (list (list 13.0D0 1030.028076171875D0 0.0013015603180974722D0 1.899999976158142D0)) (list (list 13.0D0 1032.3641357421875D0 0.0014513847418129445D0 1.909999966621399D0)) (list (list 13.0D0 1033.611328125D0 0.001646785531193018D0 1.9199999570846558D0)) (list (list 13.0D0 1033.531005859375D0 0.0019111690344288946D0 1.9299999475479126D0)) (list (list 13.0D0 1033.002685546875D0 0.0022201777901500464D0 1.9399999380111695D0)) (list (list 13.0D0 1033.22900390625D0 0.0025293699000030756D0 1.9499999284744263D0)) (list (list 13.0D0 1034.4595947265625D0 0.002791986335068941D0 1.959999918937683D0)) (list (list 13.0D0 1035.370849609375D0 0.0029875158797949553D0 1.96999990940094D0)) (list (list 13.0D0 1035.6409912109375D0 0.003090077079832554D0 1.9799998998641968D0)) (list (list 13.0D0 1035.4320068359375D0 0.003098157001659274D0 1.9900000095367432D0)) (list (list 13.0D0 1035.166015625D0 0.003023456782102585D0 2.0D0)) (list (list 13.0D0 1035.797119140625D0 0.0028719697147607804D0 2.009999990463257D0)) (list (list 13.0D0 1037.146728515625D0 0.0027818242087960244D0 2.0199999809265137D0)) (list (list 13.0D0 1038.7174072265625D0 0.002789864083752036D0 2.0299999713897705D0)) (list (list 13.0D0 1039.8719482421875D0 0.0028766861651092768D0 2.0399999618530274D0)) (list (list 13.0D0 1040.072265625D0 0.0029995639342814684D0 2.049999952316284D0)) (list (list 13.0D0 1039.8671875D0 0.003117278218269348D0 2.059999942779541D0)) (list (list 13.0D0 1039.4832763671875D0 0.003176336409524083D0 2.069999933242798D0)) (list (list 13.0D0 1039.07080078125D0 0.0031947523821145296D0 2.0799999237060547D0)) (list (list 13.0D0 1038.671142578125D0 0.0032143397256731987D0 2.0899999141693116D0)) (list (list 13.0D0 1038.2943115234375D0 0.0032815870363265276D0 2.0999999046325684D0)) (list (list 13.0D0 1037.9580078125D0 0.003413147060200572D0 2.109999895095825D0)) (list (list 13.0D0 1037.853759765625D0 0.0034898363519459963D0 2.119999885559082D0)) (list (list 13.0D0 1037.8857421875D0 0.0034633418545126915D0 2.129999876022339D0)) (list (list 13.0D0 1037.8837890625D0 0.0033302493393421173D0 2.1399998664855957D0)) (list (list 13.0D0 1037.6002197265625D0 0.0031181368976831436D0 2.1499998569488526D0)) (list (list 13.0D0 1036.41162109375D0 0.0029330914840102196D0 2.1599998474121094D0)) (list (list 13.0D0 1034.9210205078125D0 0.002882725326344371D0 2.169999837875366D0)) (list (list 13.0D0 1034.0604248046875D0 0.00290313852019608D0 2.180000066757202D0)) (list (list 13.0D0 1033.9534912109375D0 0.002946083899587393D0 2.190000057220459D0)) (list (list 13.0D0 1034.4019775390625D0 0.0029624630697071553D0 2.200000047683716D0)) (list (list 13.0D0 1034.9061279296875D0 0.0028861737810075283D0 2.2100000381469727D0)) (list (list 13.0D0 1034.421142578125D0 0.00272960402071476D0 2.2200000286102295D0)) (list (list 13.0D0 1033.042724609375D0 0.0025053995195776224D0 2.2300000190734864D0)) (list (list 13.0D0 1031.3145751953125D0 0.002293696627020836D0 2.240000009536743D0)) (list (list 13.0D0 1030.0050048828125D0 0.0021717743948101998D0 2.25D0)) (list (list 13.0D0 1030.296142578125D0 0.002059947233647108D0 2.259999990463257D0)) (list (list 13.0D0 1032.3240966796875D0 0.0020088960882276297D0 2.2699999809265137D0)) (list (list 13.0D0 1033.8623046875D0 0.0019909131806343794D0 2.2799999713897705D0)) (list (list 13.0D0 1034.3505859375D0 0.0019792753737419844D0 2.2899999618530274D0)) (list (list 13.0D0 1033.8927001953125D0 0.0019578137435019017D0 2.299999952316284D0)) (list (list 13.0D0 1033.62646484375D0 0.0019853224512189627D0 2.309999942779541D0)) (list (list 13.0D0 1034.344970703125D0 0.0020733787678182125D0 2.319999933242798D0)) (list (list 13.0D0 1034.87451171875D0 0.002211296232417226D0 2.3299999237060547D0)) (list (list 13.0D0 1035.0223388671875D0 0.0023258915171027184D0 2.3399999141693116D0)) (list (list 13.0D0 1034.8448486328125D0 0.002337004989385605D0 2.3499999046325684D0)) (list (list 13.0D0 1034.2076416015625D0 0.0022254635114222765D0 2.359999895095825D0)) (list (list 13.0D0 1034.5980224609375D0 0.0020390423014760018D0 2.369999885559082D0)) (list (list 13.0D0 1035.3095703125D0 0.0018944191979244352D0 2.379999876022339D0)) (list (list 13.0D0 1036.229736328125D0 0.0018165806541219354D0 2.3899998664855957D0)) (list (list 13.0D0 1037.1114501953125D0 0.001804078696295619D0 2.3999998569488526D0)) (list (list 13.0D0 1036.0374755859375D0 0.001860963529907167D0 2.4099998474121094D0)) (list (list 13.0D0 1034.80419921875D0 0.001947277458384633D0 2.419999837875366D0)) (list (list 13.0D0 1033.6097412109375D0 0.0020175999961793423D0 2.429999828338623D0)) (list (list 13.0D0 1032.6839599609375D0 0.0020120982080698014D0 2.440000057220459D0)) (list (list 13.0D0 1032.1656494140625D0 0.0018978567095473409D0 2.450000047683716D0)) (list (list 13.0D0 1031.682861328125D0 0.0018007480539381504D0 2.4600000381469727D0)) (list (list 13.0D0 1031.8233642578125D0 0.0017462436808273197D0 2.4700000286102295D0)) (list (list 13.0D0 1032.5274658203125D0 0.0017345608212053776D0 2.4800000190734864D0)) (list (list 13.0D0 1032.9539794921875D0 0.001756827812641859D0 2.490000009536743D0)) (list (list 13.0D0 1032.282958984375D0 0.0018049683421850205D0 2.5D0)) (list (list 13.0D0 1030.8768310546875D0 0.0019021726911887527D0 2.509999990463257D0)) (list (list 13.0D0 1030.6417236328125D0 0.002081383252516389D0 2.5199999809265137D0)) (list (list 13.0D0 1031.19921875D0 0.002206556499004364D0 2.5299999713897705D0)) (list (list 13.0D0 1032.1380615234375D0 0.0022532695438712836D0 2.5399999618530274D0)) (list (list 13.0D0 1033.0955810546875D0 0.002223415533080697D0 2.549999952316284D0)) (list (list 13.0D0 1034.2015380859375D0 0.002092922106385231D0 2.559999942779541D0)) (list (list 13.0D0 1035.2410888671875D0 0.0020479196682572365D0 2.569999933242798D0)) (list (list 13.0D0 1036.6676025390625D0 0.002100749406963587D0 2.5799999237060547D0)) (list (list 13.0D0 1038.0091552734375D0 0.002231005346402526D0 2.5899999141693116D0)) (list (list 13.0D0 1038.7713623046875D0 0.0024100281298160553D0 2.5999999046325684D0)) (list (list 13.0D0 1039.471923828125D0 0.002633793046697974D0 2.609999895095825D0)) (list (list 13.0D0 1039.7977294921875D0 0.0028120647184550763D0 2.619999885559082D0)) (list (list 13.0D0 1039.9720458984375D0 0.0029374368023127318D0 2.629999876022339D0)) (list (list 13.0D0 1039.8841552734375D0 0.0029813051223754883D0 2.6399998664855957D0)) (list (list 13.0D0 1039.5440673828125D0 0.0029303766787052155D0 2.6499998569488526D0)) (list (list 13.0D0 1039.90283203125D0 0.0028496035374701023D0 2.6599998474121094D0)) (list (list 13.0D0 1040.309326171875D0 0.0027100155130028725D0 2.669999837875366D0)) (list (list 13.0D0 1040.85693359375D0 0.002570641925558448D0 2.679999828338623D0)) (list (list 13.0D0 1041.2802734375D0 0.0024395284708589316D0 2.690000057220459D0)) (list (list 13.0D0 1041.424560546875D0 0.0023351358249783516D0 2.700000047683716D0)) (list (list 13.0D0 1042.06591796875D0 0.0023881972301751376D0 2.7100000381469727D0)) (list (list 13.0D0 1042.447265625D0 0.0025773250963538885D0 2.7200000286102295D0)) (list (list 13.0D0 1042.4178466796875D0 0.0028273581992834807D0 2.7300000190734864D0)) (list (list 13.0D0 1042.100830078125D0 0.0030650414992123843D0 2.740000009536743D0)) (list (list 13.0D0 1041.7117919921875D0 0.0032169248443096876D0 2.75D0)) (list (list 13.0D0 1041.548095703125D0 0.003202977357432246D0 2.759999990463257D0)) (list (list 13.0D0 1041.1875D0 0.003106603166088462D0 2.7699999809265137D0)) (list (list 13.0D0 1040.501220703125D0 0.0029958789236843586D0 2.7799999713897705D0)) (list (list 13.0D0 1040.050537109375D0 0.0029093879275023938D0 2.7899999618530274D0)) (list (list 13.0D0 1040.3870849609375D0 0.0028669405728578568D0 2.799999952316284D0)) (list (list 13.0D0 1041.4293212890625D0 0.002833556616678834D0 2.809999942779541D0)) (list (list 13.0D0 1042.5419921875D0 0.0028845081105828286D0 2.819999933242798D0)) (list (list 13.0D0 1043.1817626953125D0 0.0029438566416502D0 2.8299999237060547D0)) (list (list 13.0D0 1043.4083251953125D0 0.0029971827752888203D0 2.8399999141693116D0)) (list (list 13.0D0 1043.448974609375D0 0.003030776511877775D0 2.8499999046325684D0)) (list (list 13.0D0 1043.6475830078125D0 0.0029759446624666453D0 2.859999895095825D0)) (list (list 13.0D0 1044.23095703125D0 0.0029985050205141306D0 2.869999885559082D0)) (list (list 13.0D0 1044.7255859375D0 0.0031621872913092375D0 2.879999876022339D0)) (list (list 13.0D0 1044.85107421875D0 0.0034094913862645626D0 2.8899998664855957D0)) (list (list 13.0D0 1044.4344482421875D0 0.0036472694482654333D0 2.8999998569488526D0)) (list (list 13.0D0 1043.509521484375D0 0.0037462161853909493D0 2.9099998474121094D0)) (list (list 13.0D0 1042.7080078125D0 0.0036060514394193888D0 2.919999837875366D0)) (list (list 13.0D0 1042.4112548828125D0 0.003403756069019437D0 2.929999828338623D0)) (list (list 13.0D0 1042.626220703125D0 0.003213734133169055D0 2.93999981880188D0)) (list (list 13.0D0 1043.1898193359375D0 0.003093753242865205D0 2.950000047683716D0)) (list (list 13.0D0 1043.6326904296875D0 0.0031168365385383368D0 2.9600000381469727D0)) (list (list 13.0D0 1043.60986328125D0 0.0031364469323307276D0 2.9700000286102295D0)) (list (list 13.0D0 1043.4259033203125D0 0.003081161994487047D0 2.9800000190734864D0)) (list (list 13.0D0 1043.1751708984375D0 0.002979715121909976D0 2.990000009536743D0)) (list (list 13.0D0 1042.8985595703125D0 0.0028849097434431315D0 3.0D0)) (list (list 13.0D0 1042.550048828125D0 0.0028662884142249823D0 3.009999990463257D0)) (list (list 13.0D0 1042.637451171875D0 0.0030194094870239497D0 3.0199999809265137D0)) (list (list 13.0D0 1042.993896484375D0 0.0032104915007948876D0 3.0299999713897705D0)) (list (list 13.0D0 1043.3056640625D0 0.00338649470359087D0 3.0399999618530274D0)) (list (list 13.0D0 1043.264892578125D0 0.0034947178792208433D0 3.049999952316284D0)) (list (list 13.0D0 1042.662109375D0 0.0034186362754553557D0 3.059999942779541D0)) (list (list 13.0D0 1042.3292236328125D0 0.0032270727679133416D0 3.069999933242798D0)) (list (list 13.0D0 1042.56201171875D0 0.0030673497822135687D0 3.0799999237060547D0)) (list (list 13.0D0 1043.2041015625D0 0.0030070689972490073D0 3.0899999141693116D0)) (list (list 13.0D0 1043.9752197265625D0 0.0030785403214395047D0 3.0999999046325684D0)) (list (list 13.0D0 1044.4913330078125D0 0.003254143986850977D0 3.109999895095825D0)) (list (list 13.0D0 1044.9849853515625D0 0.0033335895277559758D0 3.119999885559082D0)) (list (list 13.0D0 1045.334716796875D0 0.0033630887046456337D0 3.129999876022339D0)) (list (list 13.0D0 1045.471435546875D0 0.003359730588272214D0 3.1399998664855957D0)) (list (list 13.0D0 1045.348876953125D0 0.003342266893014312D0 3.1499998569488526D0)) (list (list 13.0D0 1044.915771484375D0 0.0033473351504653693D0 3.1599998474121094D0)) (list (list 13.0D0 1044.3978271484375D0 0.003367476398125291D0 3.169999837875366D0)) (list (list 13.0D0 1044.0672607421875D0 0.0033417176455259323D0 3.179999828338623D0)) (list (list 13.0D0 1043.9007568359375D0 0.0032837404869496823D0 3.18999981880188D0)) (list (list 13.0D0 1043.7938232421875D0 0.0032099103555083275D0 3.1999998092651367D0)) (list (list 13.0D0 1043.5413818359375D0 0.003095547202974558D0 3.2100000381469727D0)) (list (list 13.0D0 1043.3199462890625D0 0.0030291536822915078D0 3.2200000286102295D0))) (list (list (list 13.0D0 1043.4505615234375D0 0.003004683880135417D0 3.2300000190734864D0)) (list (list 13.0D0 1043.7978515625D0 0.0030003516003489495D0 3.240000009536743D0)) (list (list 13.0D0 1044.034912109375D0 0.0029807467944920063D0 3.25D0)) (list (list 13.0D0 1043.40673828125D0 0.0028706230223178864D0 3.259999990463257D0)) (list (list 13.0D0 1042.385009765625D0 0.0026496832724660635D0 3.2699999809265137D0)) (list (list 13.0D0 1041.89111328125D0 0.0024846564047038555D0 3.2799999713897705D0)) (list (list 13.0D0 1041.9295654296875D0 0.0024034867528826D0 3.2899999618530274D0)) (list (list 13.0D0 1042.289306640625D0 0.0024094139225780964D0 3.299999952316284D0)) (list (list 13.0D0 1042.57568359375D0 0.002510436810553074D0 3.309999942779541D0)) (list (list 13.0D0 1042.704345703125D0 0.0026046461425721646D0 3.319999933242798D0)) (list (list 13.0D0 1042.90771484375D0 0.002725560450926423D0 3.3299999237060547D0)) (list (list 13.0D0 1043.03857421875D0 0.0028599253855645657D0 3.3399999141693116D0)) (list (list 13.0D0 1042.9102783203125D0 0.0029668763745576144D0 3.3499999046325684D0)) (list (list 13.0D0 1042.3505859375D0 0.0029314851853996516D0 3.359999895095825D0)) (list (list 13.0D0 1041.8271484375D0 0.002779327565804124D0 3.369999885559082D0)) (list (list 13.0D0 1041.31298828125D0 0.0025884059723466635D0 3.379999876022339D0)) (list (list 13.0D0 1040.94482421875D0 0.0024543735198676586D0 3.3899998664855957D0)) (list (list 13.0D0 1040.8297119140625D0 0.00243091001175344D0 3.3999998569488526D0)) (list (list 13.0D0 1040.940185546875D0 0.002440273528918624D0 3.4099998474121094D0)) (list (list 13.0D0 1041.1431884765625D0 0.0024285209365189076D0 3.419999837875366D0)) (list (list 13.0D0 1040.7823486328125D0 0.0023686059284955263D0 3.429999828338623D0)) (list (list 13.0D0 1040.07421875D0 0.0023000582586973906D0 3.43999981880188D0)) (list (list 13.0D0 1039.424072265625D0 0.0022538085468113423D0 3.4499998092651367D0)) (list (list 13.0D0 1039.4471435546875D0 0.0022052160929888487D0 3.4600000381469727D0)) (list (list 13.0D0 1040.041748046875D0 0.0021621151827275753D0 3.4700000286102295D0)) (list (list 13.0D0 1040.5615234375D0 0.0021866029128432274D0 3.4800000190734864D0)) (list (list 13.0D0 1040.9249267578125D0 0.0022794068790972233D0 3.490000009536743D0)) (list (list 13.0D0 1041.2130126953125D0 0.002422675723209977D0 3.5D0)) (list (list 13.0D0 1041.7724609375D0 0.002576602855697274D0 3.509999990463257D0)) (list (list 13.0D0 1042.216064453125D0 0.0026109800674021244D0 3.5199999809265137D0)) (list (list 13.0D0 1042.4085693359375D0 0.0026285164058208466D0 3.5299999713897705D0)) (list (list 13.0D0 1042.4783935546875D0 0.0026224760804325343D0 3.5399999618530274D0)) (list (list 13.0D0 1042.578125D0 0.0025785390753299D0 3.549999952316284D0)) (list (list 13.0D0 1042.826416015625D0 0.002494626212865114D0 3.559999942779541D0)) (list (list 13.0D0 1043.1739501953125D0 0.002363269915804267D0 3.569999933242798D0)) (list (list 13.0D0 1043.7447509765625D0 0.002286792267113924D0 3.5799999237060547D0)) (list (list 13.0D0 1044.5228271484375D0 0.0023138129618018866D0 3.5899999141693116D0)) (list (list 13.0D0 1045.4134521484375D0 0.0024558748118579388D0 3.5999999046325684D0)) (list (list 13.0D0 1046.1649169921875D0 0.002654027659446001D0 3.609999895095825D0)) (list (list 13.0D0 1045.696044921875D0 0.00285652675665915D0 3.619999885559082D0)) (list (list 13.0D0 1044.788818359375D0 0.0030292735900729895D0 3.629999876022339D0)) (list (list 13.0D0 1043.820556640625D0 0.0031643579714000225D0 3.6399998664855957D0)) (list (list 13.0D0 1043.16064453125D0 0.00325973192229867D0 3.6499998569488526D0)) (list (list 13.0D0 1043.330078125D0 0.0033143104519695044D0 3.6599998474121094D0)) (list (list 13.0D0 1044.1785888671875D0 0.0033303748350590468D0 3.669999837875366D0)) (list (list 13.0D0 1044.7410888671875D0 0.003352878149598837D0 3.679999828338623D0)) (list (list 13.0D0 1044.9090576171875D0 0.003342582378536463D0 3.68999981880188D0)) (list (list 13.0D0 1044.744140625D0 0.0032686968334019184D0 3.6999998092651367D0)) (list (list 13.0D0 1044.4571533203125D0 0.00314118480309844D0 3.7099997997283936D0)) (list (list 13.0D0 1044.3583984375D0 0.0029761281330138445D0 3.7200000286102295D0)) (list (list 13.0D0 1044.275634765625D0 0.002822672249749303D0 3.7300000190734864D0)) (list (list 13.0D0 1044.140869140625D0 0.0027447438333183527D0 3.740000009536743D0)) (list (list 13.0D0 1044.031005859375D0 0.002774275606498122D0 3.75D0)) (list (list 13.0D0 1044.393798828125D0 0.0028680928517132998D0 3.759999990463257D0)) (list (list 13.0D0 1044.7452392578125D0 0.0029696535784751177D0 3.7699999809265137D0)) (list (list 13.0D0 1044.6790771484375D0 0.00299839093349874D0 3.7799999713897705D0)) (list (list 13.0D0 1044.3050537109375D0 0.002958109136670828D0 3.7899999618530274D0)) (list (list 13.0D0 1043.8734130859375D0 0.0028717631939798594D0 3.799999952316284D0)) (list (list 13.0D0 1043.84765625D0 0.002781587652862072D0 3.809999942779541D0)) (list (list 13.0D0 1044.43115234375D0 0.0026812374126166106D0 3.819999933242798D0)) (list (list 13.0D0 1044.687744140625D0 0.0026551743503659964D0 3.8299999237060547D0)) (list (list 13.0D0 1044.5938720703125D0 0.0026935802306979895D0 3.8399999141693116D0)) (list (list 13.0D0 1044.2520751953125D0 0.0027719440404325724D0 3.8499999046325684D0)) (list (list 13.0D0 1043.8128662109375D0 0.002859163796529174D0 3.859999895095825D0)) (list (list 13.0D0 1043.734619140625D0 0.002912268741056323D0 3.869999885559082D0)) (list (list 13.0D0 1043.8404541015625D0 0.0029558606911450625D0 3.879999876022339D0)) (list (list 13.0D0 1043.886962890625D0 0.0030215212609618903D0 3.8899998664855957D0)) (list (list 13.0D0 1043.718505859375D0 0.0031000946182757616D0 3.8999998569488526D0)) (list (list 13.0D0 1043.388916015625D0 0.003080235095694661D0 3.9099998474121094D0)) (list (list 13.0D0 1042.6451416015625D0 0.002949379151687026D0 3.919999837875366D0)) (list (list 13.0D0 1042.0111083984375D0 0.0027914242818951607D0 3.929999828338623D0)) (list (list 13.0D0 1041.797607421875D0 0.0026836784090846777D0 3.93999981880188D0)) (list (list 13.0D0 1042.147216796875D0 0.002687625354155898D0 3.9499998092651367D0)) (list (list 13.0D0 1042.91796875D0 0.002843185793608427D0 3.9599997997283936D0)) (list (list 13.0D0 1043.459716796875D0 0.002968157408758998D0 3.9700000286102295D0)) (list (list 13.0D0 1043.5096435546875D0 0.002977323019877076D0 3.9800000190734864D0)) (list (list 13.0D0 1043.25439453125D0 0.00283072586171329D0 3.990000009536743D0)) (list (list 13.0D0 1042.7664794921875D0 0.0025456042494624853D0 4.0D0)) (list (list 13.0D0 1041.7193603515625D0 0.0022459584288299084D0 4.009999752044678D0)) (list (list 13.0D0 1040.1439208984375D0 0.0020528642926365137D0 4.019999980926514D0)) (list (list 13.0D0 1039.045654296875D0 0.0020112351048737765D0 4.029999732971191D0)) (list (list 13.0D0 1038.827880859375D0 0.0020840861834585667D0 4.039999961853027D0)) (list (list 13.0D0 1039.3929443359375D0 0.0022224143613129855D0 4.049999713897705D0)) (list (list 13.0D0 1039.708984375D0 0.002374619012698531D0 4.059999942779541D0)) (list (list 13.0D0 1039.1417236328125D0 0.0024517541751265526D0 4.069999694824219D0)) (list (list 13.0D0 1038.4405517578125D0 0.0024548049550503493D0 4.079999923706055D0)) (list (list 13.0D0 1038.154541015625D0 0.0024075510445982218D0 4.089999675750732D0)) (list (list 13.0D0 1038.364990234375D0 0.002333212411031127D0 4.099999904632568D0)) (list (list 13.0D0 1038.204345703125D0 0.002246101852506399D0 4.110000133514404D0)) (list (list 13.0D0 1038.682373046875D0 0.0021382346749305725D0 4.119999885559082D0)) (list (list 13.0D0 1039.4564208984375D0 0.0019636929500848055D0 4.130000114440918D0)) (list (list 13.0D0 1040.193359375D0 0.0017908111913129688D0 4.139999866485596D0)) (list (list 13.0D0 1040.378662109375D0 0.001678661908954382D0 4.150000095367432D0)) (list (list 13.0D0 1039.0296630859375D0 0.0016546057304367423D0 4.159999847412109D0)) (list (list 13.0D0 1037.921875D0 0.0018260637298226357D0 4.170000076293945D0)) (list (list 13.0D0 1037.0372314453125D0 0.002007199451327324D0 4.179999828338623D0)) (list (list 13.0D0 1036.70751953125D0 0.002157124225050211D0 4.190000057220459D0)) (list (list 13.0D0 1036.8232421875D0 0.0022552614100277424D0 4.199999809265137D0)) (list (list 13.0D0 1036.33447265625D0 0.0022947669494897127D0 4.210000038146973D0)) (list (list 13.0D0 1036.6971435546875D0 0.0022253638599067927D0 4.21999979019165D0)) (list (list 13.0D0 1036.7164306640625D0 0.002068158471956849D0 4.230000019073486D0)) (list (list 13.0D0 1036.6395263671875D0 0.0018867230974137783D0 4.239999771118164D0)) (list (list 13.0D0 1036.5479736328125D0 0.0017511495389044285D0 4.25D0)) (list (list 13.0D0 1035.9693603515625D0 0.0017449682345613838D0 4.259999752044678D0)) (list (list 13.0D0 1036.00146484375D0 0.001857378170825541D0 4.269999980926514D0)) (list (list 13.0D0 1035.0390625D0 0.0019954624585807324D0 4.279999732971191D0)) (list (list 13.0D0 1033.96240234375D0 0.0021025408059358597D0 4.289999961853027D0)) (list (list 13.0D0 1033.4747314453125D0 0.002145158126950264D0 4.299999713897705D0)) (list (list 13.0D0 1033.6607666015625D0 0.0021239386405795813D0 4.309999942779541D0)) (list (list 13.0D0 1034.1917724609375D0 0.001970884157344699D0 4.319999694824219D0)) (list (list 13.0D0 1033.4334716796875D0 0.001776481862179935D0 4.329999923706055D0)) (list (list 13.0D0 1032.06982421875D0 0.001551701221615076D0 4.339999675750732D0)) (list (list 13.0D0 1030.8201904296875D0 0.001327480305917561D0 4.349999904632568D0)) (list (list 13.0D0 1030.206298828125D0 0.0011844814289361239D0 4.360000133514404D0)) (list (list 13.0D0 1029.8863525390625D0 0.0011512083001434803D0 4.369999885559082D0)) (list (list 13.0D0 1030.3875732421875D0 0.0011434713378548623D0 4.380000114440918D0)) (list (list 13.0D0 1031.518310546875D0 0.001137788174673915D0 4.389999866485596D0)) (list (list 13.0D0 1032.7589111328125D0 0.0011067005107179285D0 4.400000095367432D0)) (list (list 13.0D0 1033.0499267578125D0 0.0010050662094727159D0 4.409999847412109D0)) (list (list 13.0D0 1032.4697265625D0 9.978843154385686D-4 4.420000076293945D0)) (list (list 13.0D0 1033.7430419921875D0 0.0010484226513653994D0 4.429999828338623D0)) (list (list 13.0D0 1035.4744873046875D0 0.0011580022983253003D0 4.440000057220459D0)) (list (list 13.0D0 1036.6572265625D0 0.0013078247429803014D0 4.449999809265137D0)) (list (list 13.0D0 1037.369873046875D0 0.0014412675518542529D0 4.460000038146973D0)) (list (list 13.0D0 1036.2587890625D0 0.0014966257149353624D0 4.46999979019165D0)) (list (list 13.0D0 1035.188720703125D0 0.0015045914333313704D0 4.480000019073486D0)) (list (list 13.0D0 1033.69140625D0 0.0014921427937224508D0 4.489999771118164D0)) (list (list 13.0D0 1031.86083984375D0 0.0014801399083808065D0 4.5D0)) (list (list 13.0D0 1031.001708984375D0 0.0014794481685385108D0 4.509999752044678D0)) (list (list 13.0D0 1031.3338623046875D0 0.001471867086365819D0 4.519999980926514D0)) (list (list 13.0D0 1032.3028564453125D0 0.0013581888051703573D0 4.529999732971191D0)) (list (list 13.0D0 1032.4481201171875D0 0.0011923110578209162D0 4.539999961853027D0)) (list (list 13.0D0 1031.507568359375D0 0.0010410785907879472D0 4.549999713897705D0)) (list (list 13.0D0 1031.28857421875D0 9.82794095762074D-4 4.559999942779541D0)) (list (list 13.0D0 1033.89697265625D0 0.0010778040159493685D0 4.569999694824219D0)) (list (list 13.0D0 1035.2977294921875D0 0.0012192355934530497D0 4.579999923706055D0)) (list (list 13.0D0 1034.959228515625D0 0.0013277791440486908D0 4.589999675750732D0)) (list (list 13.0D0 1033.400146484375D0 0.0013677866663783789D0 4.599999904632568D0)) (list (list 13.0D0 1032.540283203125D0 0.00136873300652951D0 4.610000133514404D0)) (list (list 13.0D0 1034.1337890625D0 0.0013378850417211652D0 4.619999885559082D0)) (list (list 13.0D0 1035.3165283203125D0 0.0013566425768658519D0 4.630000114440918D0)) (list (list 13.0D0 1035.980712890625D0 0.001414650003425777D0 4.639999866485596D0)) (list (list 13.0D0 1036.1248779296875D0 0.0014925672439858318D0 4.650000095367432D0)) (list (list 13.0D0 1035.672607421875D0 0.0015641883946955204D0 4.659999847412109D0)) (list (list 13.0D0 1035.8170166015625D0 0.0015772224869579077D0 4.670000076293945D0)) (list (list 13.0D0 1035.7130126953125D0 0.0015484474133700133D0 4.679999828338623D0)) (list (list 13.0D0 1035.693603515625D0 0.0015268424758687616D0 4.690000057220459D0)) (list (list 13.0D0 1035.777587890625D0 0.001545298146083951D0 4.699999809265137D0)) (list (list 13.0D0 1035.4088134765625D0 0.0016124380053952337D0 4.710000038146973D0)) (list (list 13.0D0 1034.3814697265625D0 0.0016070439014583826D0 4.71999979019165D0)) (list (list 13.0D0 1032.8101806640625D0 0.0015303489053621889D0 4.730000019073486D0)) (list (list 13.0D0 1031.945068359375D0 0.001423065667040646D0 4.739999771118164D0)) (list (list 13.0D0 1032.32568359375D0 0.001351996441371739D0 4.75D0)) (list (list 13.0D0 1033.4105224609375D0 0.0014261020114645362D0 4.759999752044678D0)) (list (list 13.0D0 1035.0615234375D0 0.0016114404425024987D0 4.769999980926514D0)) (list (list 13.0D0 1035.6153564453125D0 0.0018105373019352556D0 4.779999732971191D0)) (list (list 13.0D0 1036.2247314453125D0 0.0019947392866015435D0 4.789999961853027D0)) (list (list 13.0D0 1037.119384765625D0 0.002119319746270776D0 4.799999713897705D0)) (list (list 13.0D0 1037.000732421875D0 0.0021067375782877207D0 4.809999942779541D0)) (list (list 13.0D0 1036.37060546875D0 0.0018799648387357593D0 4.819999694824219D0)) (list (list 13.0D0 1034.69921875D0 0.0015890945214778185D0 4.829999923706055D0)) (list (list 13.0D0 1033.314208984375D0 0.0013031522976234556D0 4.839999675750732D0)) (list (list 13.0D0 1032.62451171875D0 0.0010743880411610008D0 4.849999904632568D0)) (list (list 13.0D0 1031.6453857421875D0 9.392545325681567D-4 4.859999656677246D0)) (list (list 13.0D0 1033.7371826171875D0 7.147025316953659D-4 4.869999885559082D0)) (list (list 13.0D0 1038.236328125D0 5.230006645433605D-4 4.880000114440918D0)) (list (list 13.0D0 1043.444580078125D0 4.5541394501924515D-4 4.889999866485596D0)) (list (list 13.0D0 1047.8486328125D0 5.212132236920297D-4 4.900000095367432D0)) (list (list 13.0D0 1050.16455078125D0 6.21192273683846D-4 4.909999847412109D0)) (list (list 13.0D0 1048.8773193359375D0 6.566785159520805D-4 4.920000076293945D0)) (list (list 13.0D0 1044.7156982421875D0 6.649440620094538D-4 4.929999828338623D0)) (list (list 13.0D0 1037.7493896484375D0 6.633205921389163D-4 4.940000057220459D0)) (list (list 13.0D0 1029.878662109375D0 6.594849401153624D-4 4.949999809265137D0)) (list (list 13.0D0 1025.5687255859375D0 6.486594211310148D-4 4.960000038146973D0)) (list (list 13.0D0 1023.84765625D0 5.743760848417878D-4 4.96999979019165D0)) (list (list 13.0D0 1022.01123046875D0 4.715340619441122D-4 4.980000019073486D0)) (list (list 13.0D0 1021.1710205078125D0 3.906912752427161D-4 4.989999771118164D0)) (list (list 13.0D0 1021.4378662109375D0 3.6390835884958506D-4 5.0D0)) (list (list 13.0D0 1021.4856567382813D0 4.007754323538393D-4 5.009999752044678D0)) (list (list 13.0D0 1004.006103515625D0 6.027685012668371D-4 5.019999980926514D0)) (list (list 13.0D0 1002.323486328125D0 6.200305069796741D-4 5.029999732971191D0)) (list (list 13.0D0 1004.5527954101563D0 5.48214593436569D-4 5.039999961853027D0)) (list (list 13.0D0 1004.1558837890625D0 4.648776084650308D-4 5.049999713897705D0)) (list (list 13.0D0 1002.79443359375D0 4.109168949071318D-4 5.059999942779541D0)) (list (list 13.0D0 999.9525756835938D0 3.641681978479028D-4 5.069999694824219D0)) (list (list 13.0D0 988.270751953125D0 3.589477273635566D-4 5.079999923706055D0)) (list (list 13.0D0 981.3701171875D0 3.456645936239511D-4 5.089999675750732D0)) (list (list 13.0D0 982.7173461914063D0 2.9952687327750027D-4 5.099999904632568D0)) (list (list 13.0D0 982.6224365234375D0 2.280624321429059D-4 5.109999656677246D0)) (list (list 13.0D0 1000.4342651367188D0 2.3303394846152514D-4 5.119999885559082D0)) (list (list 13.0D0 1022.2046508789063D0 4.2531589861027897D-4 5.130000114440918D0)) (list (list 13.0D0 1049.0103759765625D0 7.104535470716655D-4 5.139999866485596D0)) (list (list 13.0D0 1073.522216796875D0 9.530395036563277D-4 5.150000095367432D0)) (list (list 13.0D0 1077.4642333984375D0 9.682949748821557D-4 5.159999847412109D0)) (list (list 13.0D0 1078.717041015625D0 8.899261592887342D-4 5.170000076293945D0)) (list (list 13.0D0 1078.6270751953125D0 8.324069203808904D-4 5.179999828338623D0)) (list (list 13.0D0 1077.1793212890625D0 8.078547543846071D-4 5.190000057220459D0)) (list (list 13.0D0 1074.41015625D0 7.95326370280236D-4 5.199999809265137D0)) (list (list 13.0D0 1070.412109375D0 7.361799362115562D-4 5.210000038146973D0)) (list (list 13.0D0 1067.6322021484375D0 5.357861518859863D-4 5.21999979019165D0)) (list (list 13.0D0 1063.99755859375D0 4.432520072441548D-4 5.230000019073486D0)) (list (list 13.0D0 1069.142578125D0 4.1770111420191825D-4 5.239999771118164D0)) (list (list 13.0D0 1080.0013427734375D0 4.3560712947510183D-4 5.25D0)) (list (list 13.0D0 1078.5638427734375D0 4.99133428093046D-4 5.259999752044678D0)) (list (list 13.0D0 1077.126220703125D0 5.62662782613188D-4 5.269999980926514D0)) (list (list 13.0D0 1079.53125D0 5.907651502639055D-4 5.279999732971191D0)) (list (list 13.0D0 1086.4154052734375D0 5.856312927789986D-4 5.289999961853027D0)) (list (list 13.0D0 1095.5972900390625D0 5.752373253926635D-4 5.299999713897705D0)) (list (list 13.0D0 1101.7601318359375D0 6.16502424236387D-4 5.309999942779541D0)) (list (list 13.0D0 1104.7991943359375D0 6.186629761941731D-4 5.319999694824219D0)) (list (list 13.0D0 1107.809814453125D0 6.204660749062896D-4 5.329999923706055D0)) (list (list 13.0D0 1113.262939453125D0 5.999347195029259D-4 5.339999675750732D0)) (list (list 13.0D0 1117.1392822265625D0 5.400883965194225D-4 5.349999904632568D0)) (list (list 13.0D0 1108.22119140625D0 4.294926766306162D-4 5.359999656677246D0)) (list (list 13.0D0 1108.9835205078125D0 3.7360750138759613D-4 5.369999885559082D0)) (list (list 13.0D0 1115.355224609375D0 4.167692386545241D-4 5.380000114440918D0)) (list (list 13.0D0 1116.6451416015625D0 3.9132594247348607D-4 5.389999866485596D0)) (list (list 13.0D0 1111.7825927734375D0 3.0604374478571117D-4 5.400000095367432D0)) (list (list 13.0D0 1109.9989013671875D0 3.5984645364806056D-4 5.409999847412109D0)) (list (list 13.0D0 1101.0494384765625D0 4.757792630698532D-4 5.420000076293945D0)) (list (list 13.0D0 1091.6676025390625D0 5.244304775260389D-4 5.429999828338623D0)) (list (list 13.0D0 1082.14892578125D0 5.500839906744659D-4 5.440000057220459D0)) (list (list 13.0D0 1072.6307373046875D0 5.757362814620137D-4 5.449999809265137D0)) (list (list 13.0D0 1063.1121826171875D0 6.013897946104407D-4 5.460000038146973D0)) (list (list 13.0D0 1063.405517578125D0 6.069759256206453D-4 5.46999979019165D0)) (list (list 13.0D0 1074.688232421875D0 4.5254346332512796D-4 5.480000019073486D0)) (list (list 13.0D0 1080.1082763671875D0 3.665636177174747D-4 5.489999771118164D0)) (list (list 13.0D0 1075.933837890625D0 4.0339131373912096D-4 5.5D0)) (list (list 13.0D0 1071.759521484375D0 4.402172635309398D-4 5.509999752044678D0)) (list (list 13.0D0 1067.5849609375D0 4.770449595525861D-4 5.519999980926514D0)) (list (list 13.0D0 1066.543701171875D0 1.941546070156619D-4 5.529999732971191D0)) (list (list 14.0D0 636.316162109375D0 0.0014066013973206282D0 0.14000000059604645D0)) (list (list 14.0D0 637.720947265625D0 0.0018180799670517445D0 0.14999999105930328D0)) (list (list 14.0D0 638.0670166015625D0 0.002078711288049817D0 0.1599999964237213D0)) (list (list 14.0D0 638.2225341796875D0 0.0021710044238716364D0 0.17000000178813934D0)) (list (list 14.0D0 638.353515625D0 0.0021488568745553494D0 0.17999999225139618D0)) (list (list 14.0D0 638.4234008789063D0 0.0020625970792025328D0 0.1899999976158142D0)) (list (list 14.0D0 638.2197265625D0 0.0019611413590610028D0 0.19999998807907105D0)) (list (list 14.0D0 638.3187255859375D0 0.0019205881981179119D0 0.20999999344348908D0)) (list (list 14.0D0 638.2393798828125D0 0.0019244145369157196D0 0.2199999988079071D0)) (list (list 14.0D0 637.8850708007813D0 0.001978215528652072D0 0.22999998927116394D0)) (list (list 14.0D0 637.4310302734375D0 0.00208543729968369D0 0.23999999463558197D0)) (list (list 14.0D0 637.2894897460938D0 0.0022467474918812514D0 0.25D0)) (list (list 14.0D0 637.2111206054688D0 0.002446206286549568D0 0.25999999046325684D0)) (list (list 14.0D0 637.527099609375D0 0.002655992517247796D0 0.26999998092651367D0)) (list (list 14.0D0 638.0031127929688D0 0.0028631528839468956D0 0.2800000011920929D0)) (list (list 14.0D0 638.5198974609375D0 0.00305002904497087D0 0.28999999165534973D0)) (list (list 14.0D0 639.0568237304688D0 0.003195130033418536D0 0.29999998211860657D0)) (list (list 14.0D0 639.8925170898438D0 0.0033004237338900566D0 0.3100000023841858D0)) (list (list 14.0D0 640.8281860351563D0 0.00334453908726573D0 0.3199999928474426D0)) (list (list 14.0D0 641.6265258789063D0 0.003364519216120243D0 0.32999998331069947D0)) (list (list 14.0D0 642.2346801757813D0 0.0033791803289204836D0 0.3400000035762787D0)) (list (list 14.0D0 642.7481079101563D0 0.0033927131444215775D0 0.3499999940395355D0)) (list (list 14.0D0 642.8028564453125D0 0.0033988957293331623D0 0.35999998450279236D0)) (list (list 14.0D0 643.002685546875D0 0.003405582159757614D0 0.3700000047683716D0)) (list (list 14.0D0 643.2408447265625D0 0.0033928791526705027D0 0.3799999952316284D0)) (list (list 14.0D0 643.4701538085938D0 0.0033552679233253D0 0.38999998569488526D0)) (list (list 14.0D0 643.6849365234375D0 0.0032988570164889098D0 0.3999999761581421D0)) (list (list 14.0D0 643.5880126953125D0 0.0032102414406836033D0 0.4099999964237213D0)) (list (list 14.0D0 643.5178833007813D0 0.0031541045755147934D0 0.41999998688697815D0)) (list (list 14.0D0 643.259521484375D0 0.003132421988993883D0 0.429999977350235D0)) (list (list 14.0D0 642.8253173828125D0 0.0031480533070862294D0 0.4399999976158142D0)) (list (list 14.0D0 642.4067993164063D0 0.0032024739775806666D0 0.44999998807907105D0)) (list (list 14.0D0 641.9762573242188D0 0.0032401876524090767D0 0.4599999785423279D0)) (list (list 14.0D0 641.9183959960938D0 0.003242152975872159D0 0.4699999988079071D0)) (list (list 14.0D0 641.8623657226563D0 0.003217508317902684D0 0.47999998927116394D0)) (list (list 14.0D0 641.7129516601563D0 0.0031750118359923363D0 0.4899999797344208D0)) (list (list 14.0D0 641.5718994140625D0 0.0031247094739228487D0 0.5D0)) (list (list 14.0D0 641.030517578125D0 0.0031048583332449198D0 0.5099999904632568D0)) (list (list 14.0D0 640.7448120117188D0 0.0031010028906166554D0 0.5199999809265137D0)) (list (list 14.0D0 640.4508056640625D0 0.0031216952484101057D0 0.5299999713897705D0)) (list (list 14.0D0 640.122802734375D0 0.003149830736219883D0 0.5399999618530273D0)) (list (list 14.0D0 639.9098510742188D0 0.0031500046607106924D0 0.550000011920929D0)) (list (list 14.0D0 639.8869018554688D0 0.003153910394757986D0 0.5600000023841858D0)) (list (list 14.0D0 640.2838134765625D0 0.0031662089750170708D0 0.5699999928474426D0)) (list (list 14.0D0 640.7609252929688D0 0.003212856827303767D0 0.5799999833106995D0)) (list (list 14.0D0 641.2255859375D0 0.0032874569296836853D0 0.5899999737739563D0)) (list (list 14.0D0 641.7506713867188D0 0.00335864769294858D0 0.5999999642372131D0)) (list (list 14.0D0 642.11474609375D0 0.003383037867024541D0 0.6100000143051148D0)) (list (list 14.0D0 642.5485229492188D0 0.003378467168658972D0 0.6200000047683716D0)) (list (list 14.0D0 642.834228515625D0 0.0033500096760690213D0 0.6299999952316284D0)) (list (list 14.0D0 642.9639892578125D0 0.0033207449596375227D0 0.6399999856948853D0)) (list (list 14.0D0 643.07568359375D0 0.0033262912184000016D0 0.6499999761581421D0)) (list (list 14.0D0 643.101806640625D0 0.003360270755365491D0 0.6599999666213989D0)) (list (list 14.0D0 643.2841796875D0 0.0034273017663508654D0 0.6699999570846558D0)) (list (list 14.0D0 643.47412109375D0 0.0034878526348620653D0 0.6800000071525574D0)) (list (list 14.0D0 643.5775756835938D0 0.00353318196721375D0 0.6899999976158142D0)) (list (list 14.0D0 643.5296630859375D0 0.0035747564397752285D0 0.699999988079071D0)) (list (list 14.0D0 643.0908203125D0 0.003598799230530858D0 0.7099999785423279D0)) (list (list 14.0D0 642.6849975585938D0 0.0036516280379146338D0 0.7199999690055847D0)) (list (list 14.0D0 642.2998657226563D0 0.0037041124887764454D0 0.7299999594688416D0)) (list (list 14.0D0 641.9501953125D0 0.00373181258328259D0 0.7400000095367432D0)) (list (list 14.0D0 641.6616821289063D0 0.0037123458459973336D0 0.75D0)) (list (list 14.0D0 641.2736206054688D0 0.0036069743800908327D0 0.7599999904632568D0)) (list (list 14.0D0 641.0501098632813D0 0.0034582754597067833D0 0.7699999809265137D0)) (list (list 14.0D0 640.8392333984375D0 0.0032861540094017983D0 0.7799999713897705D0)) (list (list 14.0D0 640.6192016601563D0 0.0031101370695978403D0 0.7899999618530273D0)) (list (list 14.0D0 640.4395751953125D0 0.0029522727709263563D0 0.7999999523162842D0)) (list (list 14.0D0 640.0628051757813D0 0.0028704057913273573D0 0.8100000023841858D0)) (list (list 14.0D0 639.9682006835938D0 0.002820155583322048D0 0.8199999928474426D0)) (list (list 14.0D0 639.8597412109375D0 0.0027790663298219443D0 0.8299999833106995D0)) (list (list 14.0D0 639.7142333984375D0 0.0027129079680889845D0 0.8399999737739563D0)) (list (list 14.0D0 639.6555786132813D0 0.0025831444654613734D0 0.8499999642372131D0)) (list (list 14.0D0 639.256591796875D0 0.0024445820599794388D0 0.85999995470047D0)) (list (list 14.0D0 638.7692260742188D0 0.0022902528289705515D0 0.8700000047683716D0)) (list (list 14.0D0 638.2593383789063D0 0.002174058463424444D0 0.8799999952316284D0)) (list (list 14.0D0 637.7870483398438D0 0.0021026604808866978D0 0.8899999856948853D0)) (list (list 14.0D0 637.4127197265625D0 0.0020528233144432307D0 0.8999999761581421D0)) (list (list 14.0D0 637.228515625D0 0.002011053031310439D0 0.9099999666213989D0)) (list (list 14.0D0 637.42919921875D0 0.0019847475923597813D0 0.9199999570846558D0)) (list (list 14.0D0 637.759033203125D0 0.0019470487022772432D0 0.9300000071525574D0)) (list (list 14.0D0 638.1718139648438D0 0.0019115892937406898D0 0.9399999976158142D0)) (list (list 14.0D0 638.700927734375D0 0.001914250198751688D0 0.949999988079071D0)) (list (list 14.0D0 638.6192626953125D0 0.001940918155014515D0 0.9599999785423279D0)) (list (list 14.0D0 638.475830078125D0 0.002030539559200406D0 0.9699999690055847D0)) (list (list 14.0D0 638.4088745117188D0 0.002151735592633486D0 0.9799999594688416D0)) (list (list 14.0D0 638.3682861328125D0 0.0022658882662653923D0 0.9899999499320984D0)) (list (list 14.0D0 638.2066040039063D0 0.002331435913220048D0 1.0D0)) (list (list 14.0D0 638.0689697265625D0 0.00236987741664052D0 1.0099999904632569D0)) (list (list 14.0D0 637.7308349609375D0 0.002372885588556528D0 1.0199999809265137D0)) (list (list 14.0D0 637.612548828125D0 0.002409260021522641D0 1.0299999713897705D0)) (list (list 14.0D0 637.769775390625D0 0.0024983775801956654D0 1.0399999618530274D0)) (list (list 14.0D0 638.0354614257813D0 0.0026299296878278256D0 1.0499999523162842D0)) (list (list 14.0D0 638.0928344726563D0 0.0027813371270895005D0 1.059999942779541D0)) (list (list 14.0D0 638.1299438476563D0 0.002918507205322385D0 1.0699999332427979D0)) (list (list 14.0D0 638.2172241210938D0 0.0030083179008215666D0 1.0799999237060547D0)) (list (list 14.0D0 638.3660278320313D0 0.003062922041863203D0 1.090000033378601D0)) (list (list 14.0D0 638.5524291992188D0 0.003115873085334897D0 1.100000023841858D0)) (list (list 14.0D0 638.7374267578125D0 0.00310267205350101D0 1.1100000143051148D0)) (list (list 14.0D0 638.7946166992188D0 0.0030798010993748904D0 1.1200000047683716D0)) (list (list 14.0D0 638.8477172851563D0 0.0030372391920536757D0 1.1299999952316285D0)) (list (list 14.0D0 638.8716430664063D0 0.002987251151353121D0 1.1399999856948853D0)) (list (list 14.0D0 638.766845703125D0 0.002952812472358346D0 1.149999976158142D0)) (list (list 14.0D0 638.5100708007813D0 0.0029209088534116745D0 1.159999966621399D0)) (list (list 14.0D0 638.42041015625D0 0.0028413578402251006D0 1.1699999570846558D0)) (list (list 14.0D0 638.4135131835938D0 0.002725142752751708D0 1.1799999475479126D0)) (list (list 14.0D0 638.4069213867188D0 0.0025678284000605345D0 1.1899999380111695D0)) (list (list 14.0D0 638.3069458007813D0 0.002365345600992441D0 1.1999999284744263D0)) (list (list 14.0D0 637.914306640625D0 0.0022120976354926825D0 1.209999918937683D0)) (list (list 14.0D0 637.6102905273438D0 0.0020609796047210694D0 1.2200000286102295D0)) (list (list 14.0D0 637.5353393554688D0 0.0019501653732731939D0 1.2300000190734864D0)) (list (list 14.0D0 637.5921020507813D0 0.001889237784780562D0 1.2400000095367432D0)) (list (list 14.0D0 637.5609130859375D0 0.0018722258973866702D0 1.25D0)) (list (list 14.0D0 637.3627319335938D0 0.001904807984828949D0 1.2599999904632569D0)) (list (list 14.0D0 637.4381713867188D0 0.001962103182449937D0 1.2699999809265137D0)) (list (list 14.0D0 637.5646362304688D0 0.0019947802647948265D0 1.2799999713897705D0)) (list (list 14.0D0 637.6756591796875D0 0.0020122011192142964D0 1.2899999618530274D0)) (list (list 14.0D0 637.740966796875D0 0.002049542497843504D0 1.2999999523162842D0)) (list (list 14.0D0 637.2199096679688D0 0.002084961859509349D0 1.309999942779541D0)) (list (list 14.0D0 636.908203125D0 0.0021601661574095488D0 1.3199999332427979D0)) (list (list 14.0D0 637.0093994140625D0 0.002263359259814024D0 1.3299999237060547D0)) (list (list 14.0D0 637.3744506835938D0 0.0023796414025127888D0 1.3399999141693116D0)) (list (list 14.0D0 637.6649169921875D0 0.002492340048775077D0 1.350000023841858D0)) (list (list 14.0D0 637.55419921875D0 0.0026025334373116494D0 1.3600000143051148D0)) (list (list 14.0D0 637.1943359375D0 0.00264019425958395D0 1.3700000047683716D0)) (list (list 14.0D0 637.0570068359375D0 0.0026603401638567448D0 1.3799999952316285D0)) (list (list 14.0D0 637.306884765625D0 0.0026764199137687683D0 1.3899999856948853D0)) (list (list 14.0D0 637.9241333007813D0 0.002688184380531311D0 1.399999976158142D0)) (list (list 14.0D0 638.4793090820313D0 0.002750389976426959D0 1.409999966621399D0)) (list (list 14.0D0 638.7223510742188D0 0.0028341826982796193D0 1.4199999570846558D0)) (list (list 14.0D0 638.7371215820313D0 0.0029016730841249228D0 1.4299999475479126D0)) (list (list 14.0D0 638.5849609375D0 0.0029352621641010046D0 1.4399999380111695D0)) (list (list 14.0D0 638.3604736328125D0 0.002926566870883107D0 1.4499999284744263D0)) (list (list 14.0D0 638.5214233398438D0 0.002858186373487115D0 1.459999918937683D0)) (list (list 14.0D0 638.6487426757813D0 0.0028265786822885275D0 1.46999990940094D0)) (list (list 14.0D0 638.85546875D0 0.0028246804140508175D0 1.4800000190734864D0)) (list (list 14.0D0 639.0088500976563D0 0.0028440384194254876D0 1.4900000095367432D0)) (list (list 14.0D0 638.9235229492188D0 0.002869257004931569D0 1.5D0)) (list (list 14.0D0 639.09765625D0 0.0028310336638242007D0 1.5099999904632569D0)) (list (list 14.0D0 638.9280395507813D0 0.0027710271533578635D0 1.5199999809265137D0)) (list (list 14.0D0 638.7761840820313D0 0.0026864514220505953D0 1.5299999713897705D0)) (list (list 14.0D0 638.5929565429688D0 0.0025918015744537115D0 1.5399999618530274D0)) (list (list 14.0D0 638.2084350585938D0 0.0025055084843188525D0 1.5499999523162842D0)) (list (list 14.0D0 638.0478515625D0 0.0023926859721541405D0 1.559999942779541D0)) (list (list 14.0D0 637.7416381835938D0 0.0022924470249563456D0 1.5699999332427979D0)) (list (list 14.0D0 637.4004516601563D0 0.002180808922275901D0 1.5799999237060547D0)) (list (list 14.0D0 637.1676025390625D0 0.002062208252027631D0 1.5899999141693116D0)) (list (list 14.0D0 637.1906127929688D0 0.0019537038169801236D0 1.5999999046325684D0)) (list (list 14.0D0 637.5028076171875D0 0.0018760935636237264D0 1.6100000143051148D0)) (list (list 14.0D0 637.8822021484375D0 0.0017962093697860837D0 1.6200000047683716D0)) (list (list 14.0D0 637.9740600585938D0 0.0017393735470250249D0 1.6299999952316285D0)) (list (list 14.0D0 637.6974487304688D0 0.001690157107077539D0 1.6399999856948853D0)) (list (list 14.0D0 637.1558227539063D0 0.001624717260710895D0 1.649999976158142D0)) (list (list 14.0D0 637.0492553710938D0 0.0016130157746374608D0 1.659999966621399D0)) (list (list 14.0D0 637.1305541992188D0 0.0016118260100483895D0 1.6699999570846558D0)) (list (list 14.0D0 637.055908203125D0 0.0016459142789244652D0 1.6799999475479126D0)) (list (list 14.0D0 636.7530517578125D0 0.001713421894237399D0 1.6899999380111695D0)) (list (list 14.0D0 636.30224609375D0 0.001801020698621869D0 1.6999999284744263D0)) (list (list 14.0D0 636.157958984375D0 0.0019048431422561408D0 1.709999918937683D0)) (list (list 14.0D0 636.571533203125D0 0.002091655507683754D0 1.71999990940094D0)) (list (list 14.0D0 637.082275390625D0 0.0023124513681977988D0 1.7300000190734864D0)) (list (list 14.0D0 637.4637451171875D0 0.0025400256272405386D0 1.7400000095367432D0)) (list (list 14.0D0 637.6416015625D0 0.002744448371231556D0 1.75D0)) (list (list 14.0D0 638.1895751953125D0 0.0028081866912543774D0 1.7599999904632569D0)) (list (list 14.0D0 638.7164306640625D0 0.0027949344366788864D0 1.7699999809265137D0)) (list (list 14.0D0 639.362060546875D0 0.002762220101431012D0 1.7799999713897705D0)) (list (list 14.0D0 640.0155639648438D0 0.00272137182764709D0 1.7899999618530274D0)) (list (list 14.0D0 640.51513671875D0 0.0026669458020478487D0 1.7999999523162842D0)) (list (list 14.0D0 641.1290283203125D0 0.002584123285487294D0 1.809999942779541D0)) (list (list 14.0D0 641.6766967773438D0 0.00243344041518867D0 1.8199999332427979D0)) (list (list 14.0D0 641.9932250976563D0 0.002271342324092984D0 1.8299999237060547D0)) (list (list 14.0D0 642.1398315429688D0 0.00211448036134243D0 1.8399999141693116D0)) (list (list 14.0D0 642.265380859375D0 0.0019654559437185526D0 1.8499999046325684D0)) (list (list 14.0D0 642.4666137695313D0 0.0018231383292004466D0 1.8600000143051148D0)) (list (list 14.0D0 642.5052490234375D0 0.0016680468106642366D0 1.8700000047683716D0)) (list (list 14.0D0 642.498046875D0 0.0015169699909165502D0 1.8799999952316285D0)) (list (list 14.0D0 642.3945922851563D0 0.0013963705860078335D0 1.8899999856948853D0)) (list (list 14.0D0 642.1215209960938D0 0.0013321501901373268D0 1.899999976158142D0)) (list (list 14.0D0 641.8697509765625D0 0.0013234814396128059D0 1.909999966621399D0)) (list (list 14.0D0 641.4330444335938D0 0.0013499469496309758D0 1.9199999570846558D0)) (list (list 14.0D0 641.2440795898438D0 0.0013821780448779464D0 1.9299999475479126D0)) (list (list 14.0D0 641.2677001953125D0 0.001414477126672864D0 1.9399999380111695D0)) (list (list 14.0D0 641.3058471679688D0 0.0014513549394905568D0 1.9499999284744263D0)) (list (list 14.0D0 641.2254028320313D0 0.0015185798984020949D0 1.959999918937683D0)) (list (list 14.0D0 640.863037109375D0 0.001606982434168458D0 1.96999990940094D0)) (list (list 14.0D0 640.4483032226563D0 0.001719149760901928D0 1.9799998998641968D0)) (list (list 14.0D0 639.9684448242188D0 0.0018356418004259468D0 1.9900000095367432D0)) (list (list 14.0D0 639.4172973632813D0 0.0019320931751281023D0 2.0D0)) (list (list 14.0D0 639.4387817382813D0 0.0020103103015571833D0 2.009999990463257D0)) (list (list 14.0D0 639.2872314453125D0 0.002054699929431081D0 2.0199999809265137D0)) (list (list 14.0D0 639.236083984375D0 0.002069934504106641D0 2.0299999713897705D0)) (list (list 14.0D0 639.0553588867188D0 0.0020588976331055165D0 2.0399999618530274D0)) (list (list 14.0D0 638.4932250976563D0 0.002028855960816145D0 2.049999952316284D0)) (list (list 14.0D0 638.356689453125D0 0.0020113782957196236D0 2.059999942779541D0)) (list (list 14.0D0 638.2186889648438D0 0.0020247010979801417D0 2.069999933242798D0)) (list (list 14.0D0 638.4860229492188D0 0.0020363368093967438D0 2.0799999237060547D0)) (list (list 14.0D0 638.8213500976563D0 0.002042263513430953D0 2.0899999141693116D0)) (list (list 14.0D0 638.76611328125D0 0.0020481594838202D0 2.0999999046325684D0)) (list (list 14.0D0 638.778076171875D0 0.0020655528642237187D0 2.109999895095825D0)) (list (list 14.0D0 638.447021484375D0 0.0021129597444087267D0 2.119999885559082D0)) (list (list 14.0D0 638.461181640625D0 0.0021602879278361798D0 2.129999876022339D0)) (list (list 14.0D0 638.6453857421875D0 0.0021982919424772263D0 2.1399998664855957D0)) (list (list 14.0D0 638.6520385742188D0 0.0022223626729100943D0 2.1499998569488526D0)) (list (list 14.0D0 638.8612060546875D0 0.0022144627291709185D0 2.1599998474121094D0)) (list (list 14.0D0 638.9778442382813D0 0.0021675522439181805D0 2.169999837875366D0)) (list (list 14.0D0 639.4866333007813D0 0.0021084616892039776D0 2.180000066757202D0)) (list (list 14.0D0 640.1161499023438D0 0.0020474581979215145D0 2.190000057220459D0)) (list (list 14.0D0 640.435546875D0 0.001993027050048113D0 2.200000047683716D0)) (list (list 14.0D0 640.53466796875D0 0.001971577759832144D0 2.2100000381469727D0)) (list (list 14.0D0 640.5735473632813D0 0.0019541869405657053D0 2.2200000286102295D0)) (list (list 14.0D0 640.7029418945313D0 0.001947783282957971D0 2.2300000190734864D0)) (list (list 14.0D0 640.8010864257813D0 0.001938863075338304D0 2.240000009536743D0)) (list (list 14.0D0 640.7076416015625D0 0.0019097283948212862D0 2.25D0)) (list (list 14.0D0 640.5267944335938D0 0.0018543472979217768D0 2.259999990463257D0)) (list (list 14.0D0 640.5408325195313D0 0.0018085193587467075D0 2.2699999809265137D0)) (list (list 14.0D0 640.6151733398438D0 0.0017728224629536272D0 2.2799999713897705D0)) (list (list 14.0D0 640.614013671875D0 0.0017414161702618003D0 2.2899999618530274D0)) (list (list 14.0D0 640.4004516601563D0 0.0017002540407702327D0 2.299999952316284D0)) (list (list 14.0D0 639.821533203125D0 0.0015955223934724927D0 2.309999942779541D0)) (list (list 14.0D0 639.8131103515625D0 0.001490184455178678D0 2.319999933242798D0)) (list (list 14.0D0 639.9744262695313D0 0.0014080469263717533D0 2.3299999237060547D0)) (list (list 14.0D0 640.1619262695313D0 0.0013720783172175289D0 2.3399999141693116D0)) (list (list 14.0D0 640.2420043945313D0 0.0013941312208771706D0 2.3499999046325684D0)) (list (list 14.0D0 639.74365234375D0 0.0014327571261674166D0 2.359999895095825D0)) (list (list 14.0D0 639.4379272460938D0 0.0014863461256027222D0 2.369999885559082D0)) (list (list 14.0D0 639.1088256835938D0 0.0015362289268523455D0 2.379999876022339D0)) (list (list 14.0D0 638.8817749023438D0 0.0015773384366184473D0 2.3899998664855957D0)) (list (list 14.0D0 638.9035034179688D0 0.0016072021098807455D0 2.3999998569488526D0)) (list (list 14.0D0 638.9423828125D0 0.0016149544389918447D0 2.4099998474121094D0)) (list (list 14.0D0 639.1317138671875D0 0.0016193784540519119D0 2.419999837875366D0)) (list (list 14.0D0 639.3424682617188D0 0.0016308263875544072D0 2.429999828338623D0)) (list (list 14.0D0 639.6031494140625D0 0.001643829746171832D0 2.440000057220459D0)) (list (list 14.0D0 639.9620361328125D0 0.0016487294342368842D0 2.450000047683716D0)) (list (list 14.0D0 640.36865234375D0 0.0016354027902707458D0 2.4600000381469727D0)) (list (list 14.0D0 640.6677856445313D0 0.0015857829712331295D0 2.4700000286102295D0)) (list (list 14.0D0 640.8245849609375D0 0.0015310072340071202D0 2.4800000190734864D0)) (list (list 14.0D0 640.8706665039063D0 0.001472688396461308D0 2.490000009536743D0)) (list (list 14.0D0 640.8635864257813D0 0.0014113120269030333D0 2.5D0)) (list (list 14.0D0 640.8714599609375D0 0.0013805152848362923D0 2.509999990463257D0)) (list (list 14.0D0 640.7114868164063D0 0.0013536876067519188D0 2.5199999809265137D0)) (list (list 14.0D0 640.4164428710938D0 0.0013578576035797596D0 2.5299999713897705D0)) (list (list 14.0D0 640.0760498046875D0 0.0013870566617697478D0 2.5399999618530274D0)) (list (list 14.0D0 639.8046264648438D0 0.0014255850110203028D0 2.549999952316284D0)) (list (list 14.0D0 639.7573852539063D0 0.0014559851260855794D0 2.559999942779541D0)) (list (list 14.0D0 639.542724609375D0 0.0014288804959505797D0 2.569999933242798D0)) (list (list 14.0D0 639.1497192382813D0 0.0013699651462957263D0 2.5799999237060547D0)) (list (list 14.0D0 638.7161865234375D0 0.0013018258614465595D0 2.5899999141693116D0)) (list (list 14.0D0 638.4224243164063D0 0.001249582041054964D0 2.5999999046325684D0)) (list (list 14.0D0 638.4752197265625D0 0.0012515423586592079D0 2.609999895095825D0)) (list (list 14.0D0 638.6316528320313D0 0.0013042839709669352D0 2.619999885559082D0)) (list (list 14.0D0 638.7671508789063D0 0.0013921988429501653D0 2.629999876022339D0)) (list (list 14.0D0 638.8056030273438D0 0.001498108496889472D0 2.6399998664855957D0)) (list (list 14.0D0 638.689697265625D0 0.0016036003362387419D0 2.6499998569488526D0)) (list (list 14.0D0 638.375D0 0.0016925276722759009D0 2.6599998474121094D0)) (list (list 14.0D0 637.7931518554688D0 0.0017698698211461306D0 2.669999837875366D0)) (list (list 14.0D0 637.4052124023438D0 0.0018328657606616617D0 2.679999828338623D0)) (list (list 14.0D0 637.23681640625D0 0.0018853673245757819D0 2.690000057220459D0)) (list (list 14.0D0 637.2445068359375D0 0.0019274817313998938D0 2.700000047683716D0)) (list (list 14.0D0 637.5809326171875D0 0.0019290547352284193D0 2.7100000381469727D0)) (list (list 14.0D0 637.6588745117188D0 0.001949206693097949D0 2.7200000286102295D0)) (list (list 14.0D0 637.7546997070313D0 0.001973635284230113D0 2.7300000190734864D0)) (list (list 14.0D0 637.7415771484375D0 0.0020220004953444004D0 2.740000009536743D0)) (list (list 14.0D0 637.5157470703125D0 0.002105834661051631D0 2.75D0)) (list (list 14.0D0 637.4671020507813D0 0.0021687487605959177D0 2.759999990463257D0)) (list (list 14.0D0 637.2665405273438D0 0.0022205819841474295D0 2.7699999809265137D0)) (list (list 14.0D0 637.1727905273438D0 0.0022297848481684924D0 2.7799999713897705D0)) (list (list 14.0D0 637.173095703125D0 0.0022091867867857218D0 2.7899999618530274D0)) (list (list 14.0D0 637.2100219726563D0 0.002178959548473358D0 2.799999952316284D0)) (list (list 14.0D0 637.3034057617188D0 0.0021424342412501574D0 2.809999942779541D0)) (list (list 14.0D0 637.3726196289063D0 0.002101202728226781D0 2.819999933242798D0)) (list (list 14.0D0 637.2820434570313D0 0.002056546974927187D0 2.8299999237060547D0)) (list (list 14.0D0 637.1611938476563D0 0.0019976773764938116D0 2.8399999141693116D0)) (list (list 14.0D0 637.1422119140625D0 0.0019246569136157632D0 2.8499999046325684D0)) (list (list 14.0D0 637.1206665039063D0 0.0018953090766444803D0 2.859999895095825D0)) (list (list 14.0D0 637.431884765625D0 0.0018629655241966248D0 2.869999885559082D0)) (list (list 14.0D0 637.6721801757813D0 0.001846268423832953D0 2.879999876022339D0)) (list (list 14.0D0 637.77392578125D0 0.001818457618355751D0 2.8899998664855957D0)) (list (list 14.0D0 637.6950073242188D0 0.0017625715117901564D0 2.8999998569488526D0)) (list (list 14.0D0 637.1790161132813D0 0.0017415765905752778D0 2.9099998474121094D0)) (list (list 14.0D0 636.5678100585938D0 0.0017592845251783729D0 2.919999837875366D0)) (list (list 14.0D0 636.0344848632813D0 0.0018048923229798675D0 2.929999828338623D0)) (list (list 14.0D0 635.7979736328125D0 0.001859059790149331D0 2.93999981880188D0)) (list (list 14.0D0 636.0044555664063D0 0.0018972745165228844D0 2.950000047683716D0)) (list (list 14.0D0 636.53466796875D0 0.001880514551885426D0 2.9600000381469727D0)) (list (list 14.0D0 637.0195922851563D0 0.0018632803112268448D0 2.9700000286102295D0)) (list (list 14.0D0 637.3757934570313D0 0.0018010131316259504D0 2.9800000190734864D0)) (list (list 14.0D0 637.4359741210938D0 0.0017162651056423784D0 2.990000009536743D0)) (list (list 14.0D0 637.1295776367188D0 0.0016362571623176337D0 3.0D0)) (list (list 14.0D0 636.7772216796875D0 0.0015521751483902336D0 3.009999990463257D0)) (list (list 14.0D0 636.4824829101563D0 0.0015219735214486719D0 3.0199999809265137D0)) (list (list 14.0D0 636.3817749023438D0 0.0015213089063763619D0 3.0299999713897705D0)) (list (list 14.0D0 636.3888549804688D0 0.0015404319856315852D0 3.0399999618530274D0)) (list (list 14.0D0 636.3649291992188D0 0.0015769921010360122D0 3.049999952316284D0)) (list (list 14.0D0 636.1334228515625D0 0.0016543918754905463D0 3.059999942779541D0)) (list (list 14.0D0 636.1288452148438D0 0.0017084460705518723D0 3.069999933242798D0)) (list (list 14.0D0 636.4562377929688D0 0.0017599553102627397D0 3.0799999237060547D0)) (list (list 14.0D0 636.9002685546875D0 0.0017755139851942659D0 3.0899999141693116D0)) (list (list 14.0D0 637.1822509765625D0 0.0017299276078119874D0 3.0999999046325684D0)) (list (list 14.0D0 636.9951171875D0 0.0016563021345064044D0 3.109999895095825D0)) (list (list 14.0D0 636.8114624023438D0 0.0015493228565901518D0 3.119999885559082D0)) (list (list 14.0D0 636.6990966796875D0 0.0014478211523965002D0 3.129999876022339D0)) (list (list 14.0D0 636.5198364257813D0 0.0013754419051110745D0 3.1399998664855957D0)) (list (list 14.0D0 636.1376342773438D0 0.001341243158094585D0 3.1499998569488526D0)) (list (list 14.0D0 635.5286865234375D0 0.0013149944134056569D0 3.1599998474121094D0)) (list (list 14.0D0 635.4688110351563D0 0.001307532424107194D0 3.169999837875366D0)) (list (list 14.0D0 635.372314453125D0 0.001270126085728407D0 3.179999828338623D0)) (list (list 14.0D0 635.403076171875D0 0.0012297267094254494D0 3.18999981880188D0)) (list (list 14.0D0 635.7269287109375D0 0.0012181425699964166D0 3.1999998092651367D0)) (list (list 14.0D0 636.11572265625D0 0.0012424991000443697D0 3.2100000381469727D0)) (list (list 14.0D0 636.2006225585938D0 0.001295732450671494D0 3.2200000286102295D0)) (list (list 14.0D0 636.2210083007813D0 0.00135729368776083D0 3.2300000190734864D0)) (list (list 14.0D0 636.239501953125D0 0.001389026059769094D0 3.240000009536743D0)) (list (list 14.0D0 636.287841796875D0 0.0013720893766731024D0 3.25D0)) (list (list 14.0D0 636.3848266601563D0 0.0013597911456599832D0 3.259999990463257D0)) (list (list 14.0D0 636.2359008789063D0 0.001335036475211382D0 3.2699999809265137D0)) (list (list 14.0D0 636.004150390625D0 0.0013420253526419402D0 3.2799999713897705D0)) (list (list 14.0D0 635.81396484375D0 0.0013652639463543892D0 3.2899999618530274D0)) (list (list 14.0D0 635.7440795898438D0 0.0013816773425787688D0 3.299999952316284D0)) (list (list 14.0D0 635.7485961914063D0 0.0013740345602855087D0 3.309999942779541D0)) (list (list 14.0D0 635.7136840820313D0 0.0013745891628786922D0 3.319999933242798D0)) (list (list 14.0D0 635.52978515625D0 0.001371066435240209D0 3.3299999237060547D0)) (list (list 14.0D0 635.3778076171875D0 0.0013915547169744969D0 3.3399999141693116D0)) (list (list 14.0D0 635.4005126953125D0 0.0014480637619271875D0 3.3499999046325684D0)) (list (list 14.0D0 635.4866943359375D0 0.0014834527391940356D0 3.359999895095825D0)) (list (list 14.0D0 635.9337768554688D0 0.001502321450971067D0 3.369999885559082D0)) (list (list 14.0D0 636.5078735351563D0 0.0014966009184718132D0 3.379999876022339D0)) (list (list 14.0D0 636.9385375976563D0 0.0014820527285337449D0 3.3899998664855957D0)) (list (list 14.0D0 637.0135498046875D0 0.001479815924540162D0 3.3999998569488526D0)) (list (list 14.0D0 636.6799926757813D0 0.0015184672083705664D0 3.4099998474121094D0)) (list (list 14.0D0 636.856201171875D0 0.001547598047181964D0 3.419999837875366D0)) (list (list 14.0D0 637.1365966796875D0 0.0015831890050321818D0 3.429999828338623D0)) (list (list 14.0D0 637.4160766601563D0 0.0016077283071354032D0 3.43999981880188D0)) (list (list 14.0D0 637.52880859375D0 0.0016142843523994089D0 3.4499998092651367D0)) (list (list 14.0D0 636.9588623046875D0 0.0016420797910541296D0 3.4600000381469727D0)) (list (list 14.0D0 637.0051879882813D0 0.0016511207213625312D0 3.4700000286102295D0)) (list (list 14.0D0 637.28564453125D0 0.0016717331018298865D0 3.4800000190734864D0)) (list (list 14.0D0 637.6488037109375D0 0.0016850020037963987D0 3.490000009536743D0)) (list (list 14.0D0 637.8438720703125D0 0.0016744121676310897D0 3.5D0)) (list (list 14.0D0 637.1970825195313D0 0.0016477920580655337D0 3.509999990463257D0)) (list (list 14.0D0 636.419677734375D0 0.0016325839096680284D0 3.5199999809265137D0)) (list (list 14.0D0 635.873046875D0 0.001640180591493845D0 3.5299999713897705D0)) (list (list 14.0D0 635.6116943359375D0 0.0016643420094624162D0 3.5399999618530274D0)) (list (list 14.0D0 635.588623046875D0 0.0016844489146023989D0 3.549999952316284D0)) (list (list 14.0D0 635.611572265625D0 0.0016430314863100648D0 3.559999942779541D0)) (list (list 14.0D0 635.5909423828125D0 0.0015972888795658946D0 3.569999933242798D0)) (list (list 14.0D0 635.3223266601563D0 0.0015253240708261729D0 3.5799999237060547D0)) (list (list 14.0D0 635.095458984375D0 0.0014465799322351814D0 3.5899999141693116D0)) (list (list 14.0D0 635.15869140625D0 0.0013738484121859074D0 3.5999999046325684D0)) (list (list 14.0D0 635.4971313476563D0 0.0012853349326178432D0 3.609999895095825D0)) (list (list 14.0D0 635.9143676757813D0 0.001198666519485414D0 3.619999885559082D0)) (list (list 14.0D0 636.151123046875D0 0.0011444929987192154D0 3.629999876022339D0)) (list (list 14.0D0 636.0256958007813D0 0.0011076434748247266D0 3.6399998664855957D0)) (list (list 14.0D0 635.5222778320313D0 0.0010842877672985197D0 3.6499998569488526D0)) (list (list 14.0D0 635.0130615234375D0 0.0011218830477446318D0 3.6599998474121094D0)) (list (list 14.0D0 634.3963623046875D0 0.0011739752953872085D0 3.669999837875366D0)) (list (list 14.0D0 634.233154296875D0 0.0012298463843762875D0 3.679999828338623D0)) (list (list 14.0D0 634.3756103515625D0 0.0012733584735542536D0 3.68999981880188D0)) (list (list 14.0D0 634.5289306640625D0 0.0012900886358693242D0 3.6999998092651367D0)) (list (list 14.0D0 634.2241821289063D0 0.0012680987128987909D0 3.7099997997283936D0)) (list (list 14.0D0 634.8529052734375D0 0.0012617910979315639D0 3.7200000286102295D0)) (list (list 14.0D0 635.3497924804688D0 0.0012452889932319522D0 3.7300000190734864D0)) (list (list 14.0D0 635.51806640625D0 0.0012291392777115107D0 3.740000009536743D0)) (list (list 14.0D0 635.3723754882813D0 0.0012264616088941694D0 3.75D0)) (list (list 14.0D0 635.1959228515625D0 0.0012484153266996146D0 3.759999990463257D0)) (list (list 14.0D0 635.3980712890625D0 0.0012899464927613736D0 3.7699999809265137D0)) (list (list 14.0D0 636.01513671875D0 0.0013507292605936528D0 3.7799999713897705D0)) (list (list 14.0D0 636.6006469726563D0 0.001385771087370813D0 3.7899999618530274D0)) (list (list 14.0D0 636.77587890625D0 0.0013703249860554934D0 3.799999952316284D0)) (list (list 14.0D0 636.4215087890625D0 0.0013385458150878549D0 3.809999942779541D0)) (list (list 14.0D0 635.6883544921875D0 0.0012742338003590703D0 3.819999933242798D0)) (list (list 14.0D0 635.0645141601563D0 0.0012082492467015982D0 3.8299999237060547D0)) (list (list 14.0D0 634.7517700195313D0 0.0011508868774399162D0 3.8399999141693116D0)) (list (list 14.0D0 634.7133178710938D0 0.0011076353257521987D0 3.8499999046325684D0)) (list (list 14.0D0 634.4138793945313D0 0.0010789779480546713D0 3.859999895095825D0)) (list (list 14.0D0 634.6859130859375D0 0.0011233167024329305D0 3.869999885559082D0)) (list (list 14.0D0 634.9403076171875D0 0.0011707728262990714D0 3.879999876022339D0)) (list (list 14.0D0 635.3040771484375D0 0.0012109000235795975D0 3.8899998664855957D0)) (list (list 14.0D0 635.7919921875D0 0.0012364801950752736D0 3.8999998569488526D0)) (list (list 14.0D0 635.97998046875D0 0.0012318824883550406D0 3.9099998474121094D0)) (list (list 14.0D0 635.6886596679688D0 0.001198965241201222D0 3.919999837875366D0)) (list (list 14.0D0 635.4745483398438D0 0.0011727402452379466D0 3.929999828338623D0)) (list (list 14.0D0 635.4590454101563D0 0.0011314363218843937D0 3.93999981880188D0)) (list (list 14.0D0 635.6962890625D0 0.0010736273834481836D0 3.9499998092651367D0)) (list (list 14.0D0 636.211669921875D0 0.0010581763926893473D0 3.9599997997283936D0)) (list (list 14.0D0 636.5265502929688D0 0.0010596195934340358D0 3.9700000286102295D0)) (list (list 14.0D0 636.5409545898438D0 0.0010868803365156055D0 3.9800000190734864D0)) (list (list 14.0D0 636.3671875D0 0.0011199585860595107D0 3.990000009536743D0)) (list (list 14.0D0 636.1439819335938D0 0.0011407629353925586D0 4.0D0)) (list (list 14.0D0 636.0192260742188D0 0.0011402539676055313D0 4.009999752044678D0)) (list (list 14.0D0 636.0140991210938D0 0.0011561656137928367D0 4.019999980926514D0)) (list (list 14.0D0 636.0997924804688D0 0.0011619632132351399D0 4.029999732971191D0)) (list (list 14.0D0 636.1378784179688D0 0.001178204664029181D0 4.039999961853027D0)) (list (list 14.0D0 636.1384887695313D0 0.00120874447748065D0 4.049999713897705D0)) (list (list 14.0D0 636.4713745117188D0 0.0012114652199670673D0 4.059999942779541D0)) (list (list 14.0D0 636.5945434570313D0 0.001238514669239521D0 4.069999694824219D0)) (list (list 14.0D0 636.8551025390625D0 0.0012595136649906636D0 4.079999923706055D0)) (list (list 14.0D0 637.016357421875D0 0.0012882706942036748D0 4.089999675750732D0)) (list (list 14.0D0 637.001220703125D0 0.001333775231614709D0 4.099999904632568D0)) (list (list 14.0D0 637.176025390625D0 0.0013882427010685206D0 4.110000133514404D0)) (list (list 14.0D0 637.3004150390625D0 0.0014425348490476609D0 4.119999885559082D0)) (list (list 14.0D0 637.30908203125D0 0.0014764064690098167D0 4.130000114440918D0)) (list (list 14.0D0 637.2247314453125D0 0.001483169267885387D0 4.139999866485596D0)) (list (list 14.0D0 637.0916137695313D0 0.0014676154823973775D0 4.150000095367432D0)) (list (list 14.0D0 636.9798583984375D0 0.00145451829303056D0 4.159999847412109D0)) (list (list 14.0D0 637.2720947265625D0 0.0014478068333119154D0 4.170000076293945D0)) (list (list 14.0D0 637.4471435546875D0 0.0014721935149282217D0 4.179999828338623D0)) (list (list 14.0D0 637.718994140625D0 0.0015208187978714705D0 4.190000057220459D0)) (list (list 14.0D0 638.1458740234375D0 0.0015819902764633298D0 4.199999809265137D0)) (list (list 14.0D0 638.3572387695313D0 0.0016401737229898572D0 4.210000038146973D0)) (list (list 14.0D0 638.5532836914063D0 0.001629092963412404D0 4.21999979019165D0)) (list (list 14.0D0 638.2053833007813D0 0.0015825483715161682D0 4.230000019073486D0)) (list (list 14.0D0 637.8331298828125D0 0.0015357687370851636D0 4.239999771118164D0)) (list (list 14.0D0 637.76904296875D0 0.0015200705965980888D0 4.25D0)) (list (list 14.0D0 637.8451538085938D0 0.0015624770894646645D0 4.259999752044678D0)) (list (list 14.0D0 638.3107299804688D0 0.001639683498069644D0 4.269999980926514D0)) (list (list 14.0D0 638.510498046875D0 0.0017142946599051357D0 4.279999732971191D0)) (list (list 14.0D0 638.7119140625D0 0.0017767497338354588D0 4.289999961853027D0)) (list (list 14.0D0 639.08544921875D0 0.0018217564793303609D0 4.299999713897705D0)) (list (list 14.0D0 639.5030517578125D0 0.001846824074164033D0 4.309999942779541D0)) (list (list 14.0D0 640.0528564453125D0 0.0018607847159728408D0 4.319999694824219D0)) (list (list 14.0D0 640.3328857421875D0 0.0018479343270882965D0 4.329999923706055D0)) (list (list 14.0D0 640.3255615234375D0 0.0017958636162802577D0 4.339999675750732D0)) (list (list 14.0D0 640.0972900390625D0 0.0017008815193548799D0 4.349999904632568D0)) (list (list 14.0D0 639.8075561523438D0 0.0015713932225480676D0 4.360000133514404D0)) (list (list 14.0D0 639.7064819335938D0 0.0014368938282132149D0 4.369999885559082D0)) (list (list 14.0D0 639.62109375D0 0.0013199232053011656D0 4.380000114440918D0)) (list (list 14.0D0 639.399658203125D0 0.001208689995110035D0 4.389999866485596D0)) (list (list 14.0D0 639.055419921875D0 0.00110009522177279D0 4.400000095367432D0)) (list (list 14.0D0 638.8998413085938D0 0.0010117533383890987D0 4.409999847412109D0)) (list (list 14.0D0 638.5878295898438D0 9.708160650916398D-4 4.420000076293945D0)) (list (list 14.0D0 638.4798583984375D0 9.720076923258603D-4 4.429999828338623D0)) (list (list 14.0D0 638.3922119140625D0 9.886428015306592D-4 4.440000057220459D0)) (list (list 14.0D0 638.2866821289063D0 0.0010025743395090104D0 4.449999809265137D0)) (list (list 14.0D0 638.4492797851563D0 0.0010129801230505109D0 4.460000038146973D0)) (list (list 14.0D0 638.4142456054688D0 0.001041922951117158D0 4.46999979019165D0)) (list (list 14.0D0 638.730712890625D0 0.0010947625851258636D0 4.480000019073486D0)) (list (list 14.0D0 639.1249389648438D0 0.001148875686340034D0 4.489999771118164D0)) (list (list 14.0D0 639.3831787109375D0 0.001185696106404066D0 4.5D0)) (list (list 14.0D0 639.4636840820313D0 0.0011946874437853694D0 4.509999752044678D0)) (list (list 14.0D0 639.3236694335938D0 0.00117738195694983D0 4.519999980926514D0)) (list (list 14.0D0 639.2229614257813D0 0.0011604116298258305D0 4.529999732971191D0)) (list (list 14.0D0 639.0905151367188D0 0.0011449350276961923D0 4.539999961853027D0)) (list (list 14.0D0 638.8922729492188D0 0.0011333016445860267D0 4.549999713897705D0)) (list (list 14.0D0 638.682373046875D0 0.0011326277162879706D0 4.559999942779541D0)) (list (list 14.0D0 638.6243286132813D0 0.0011593381641432643D0 4.569999694824219D0)) (list (list 14.0D0 638.5037841796875D0 0.0011993309017270804D0 4.579999923706055D0)) (list (list 14.0D0 638.4611206054688D0 0.0012404139852151275D0 4.589999675750732D0)) (list (list 14.0D0 638.4945678710938D0 0.0012716372730210424D0 4.599999904632568D0)) (list (list 14.0D0 638.3381958007813D0 0.0012829090701416135D0 4.610000133514404D0)) (list (list 14.0D0 638.0371704101563D0 0.0012790706241503358D0 4.619999885559082D0)) (list (list 14.0D0 637.5867919921875D0 0.0012639618944376707D0 4.630000114440918D0)) (list (list 14.0D0 637.46044921875D0 0.00124077417422086D0 4.639999866485596D0)) (list (list 14.0D0 637.7379150390625D0 0.0012183379149064422D0 4.650000095367432D0)) (list (list 14.0D0 637.84765625D0 0.0012151000555604697D0 4.659999847412109D0)) (list (list 14.0D0 637.9873657226563D0 0.001255712122656405D0 4.670000076293945D0)) (list (list 14.0D0 637.9827270507813D0 0.001310689258389175D0 4.679999828338623D0)) (list (list 14.0D0 638.0579833984375D0 0.0013631780166178942D0 4.690000057220459D0)) (list (list 14.0D0 638.180419921875D0 0.0013986510457471013D0 4.699999809265137D0)) (list (list 14.0D0 637.8817138671875D0 0.0014038715744391084D0 4.710000038146973D0)) (list (list 14.0D0 638.0027465820313D0 0.0013966497499495745D0 4.71999979019165D0)) (list (list 14.0D0 638.1722412109375D0 0.0013993523316457868D0 4.730000019073486D0)) (list (list 14.0D0 638.4063110351563D0 0.0014194229152053595D0 4.739999771118164D0)) (list (list 14.0D0 638.536376953125D0 0.0014525690348818899D0 4.75D0)) (list (list 14.0D0 638.0719604492188D0 0.0014779346529394389D0 4.759999752044678D0)) (list (list 14.0D0 638.11865234375D0 0.0014941563131287694D0 4.769999980926514D0)) (list (list 14.0D0 638.338623046875D0 0.0015140218893066049D0 4.779999732971191D0)) (list (list 14.0D0 638.6434326171875D0 0.0015489826910197735D0 4.789999961853027D0)) (list (list 14.0D0 638.8667602539063D0 0.0015971144894137979D0 4.799999713897705D0)) (list (list 14.0D0 638.70166015625D0 0.001637136097997427D0 4.809999942779541D0)) (list (list 14.0D0 638.817626953125D0 0.001646544085815549D0 4.819999694824219D0)) (list (list 14.0D0 638.7132568359375D0 0.001616167719475925D0 4.829999923706055D0)) (list (list 14.0D0 638.5338134765625D0 0.001561474404297769D0 4.839999675750732D0)) (list (list 14.0D0 638.4556274414063D0 0.001497523277066648D0 4.849999904632568D0)) (list (list 14.0D0 638.6766967773438D0 0.0014374348102137447D0 4.859999656677246D0)) (list (list 14.0D0 639.5267333984375D0 0.0013790219090878964D0 4.869999885559082D0)) (list (list 14.0D0 640.1044921875D0 0.0013021085178479553D0 4.880000114440918D0)) (list (list 14.0D0 640.356689453125D0 0.0012087798677384854D0 4.889999866485596D0)) (list (list 14.0D0 640.40966796875D0 0.001110686338506639D0 4.900000095367432D0)) (list (list 14.0D0 640.5997314453125D0 0.0010321775916963816D0 4.909999847412109D0)) (list (list 14.0D0 641.1807250976563D0 9.602018399164081D-4 4.920000076293945D0)) (list (list 14.0D0 641.3111572265625D0 8.71418509632349D-4 4.929999828338623D0)) (list (list 14.0D0 640.8369140625D0 7.560882950201631D-4 4.940000057220459D0)) (list (list 14.0D0 639.9241333007813D0 6.217235932126641D-4 4.949999809265137D0)) (list (list 14.0D0 639.1386108398438D0 4.984414554201067D-4 4.960000038146973D0)) (list (list 14.0D0 639.639892578125D0 4.222880816087127D-4 4.96999979019165D0)) (list (list 14.0D0 640.5919799804688D0 3.99081502109766D-4 4.980000019073486D0)) (list (list 14.0D0 641.3299560546875D0 4.051043651998043D-4 4.989999771118164D0)) (list (list 14.0D0 641.37646484375D0 4.1048243292607367D-4 5.0D0)) (list (list 14.0D0 640.4603271484375D0 3.7742042331956327D-4 5.009999752044678D0)) (list (list 14.0D0 637.7131958007813D0 3.0369500746019185D-4 5.019999980926514D0)) (list (list 14.0D0 636.0460815429688D0 2.4659105110913515D-4 5.029999732971191D0)) (list (list 14.0D0 636.3788452148438D0 2.1808194287586957D-4 5.039999961853027D0)) (list (list 14.0D0 638.6472778320313D0 2.223884512204677D-4 5.049999713897705D0)) (list (list 14.0D0 641.6339721679688D0 2.563260495662689D-4 5.059999942779541D0)) (list (list 14.0D0 639.4918823242188D0 2.767818223219365D-4 5.069999694824219D0)) (list (list 14.0D0 637.8187255859375D0 3.1958226463757456D-4 5.079999923706055D0)) (list (list 14.0D0 637.6730346679688D0 3.851340734399855D-4 5.089999675750732D0)) (list (list 14.0D0 639.0791015625D0 4.6659045619890094D-4 5.099999904632568D0)) (list (list 14.0D0 640.9229125976563D0 5.492231575772166D-4 5.109999656677246D0)) (list (list 14.0D0 640.8926391601563D0 5.736075690947473D-4 5.119999885559082D0)) (list (list 14.0D0 640.0623779296875D0 5.538454279303551D-4 5.130000114440918D0)) (list (list 14.0D0 639.3690795898438D0 5.168553325347602D-4 5.139999866485596D0)) (list (list 14.0D0 639.356201171875D0 4.815306456293911D-4 5.150000095367432D0)) (list (list 14.0D0 640.113037109375D0 4.5692609273828566D-4 5.159999847412109D0)) (list (list 14.0D0 640.791259765625D0 4.42248594481498D-4 5.170000076293945D0)) (list (list 14.0D0 640.6942749023438D0 4.171179316472262D-4 5.179999828338623D0)) (list (list 14.0D0 640.2802124023438D0 3.8283132016658783D-4 5.190000057220459D0)) (list (list 14.0D0 639.8197021484375D0 3.424742608331144D-4 5.199999809265137D0)) (list (list 14.0D0 639.3372802734375D0 3.007290360983461D-4 5.210000038146973D0)) (list (list 14.0D0 638.2661743164063D0 2.764462842606008D-4 5.21999979019165D0)) (list (list 14.0D0 637.29736328125D0 2.731202694121748D-4 5.230000019073486D0)) (list (list 14.0D0 637.053466796875D0 2.8107367688789964D-4 5.239999771118164D0)) (list (list 14.0D0 637.7070922851563D0 2.954454394057393D-4 5.25D0)) (list (list 14.0D0 638.9269409179688D0 3.1728873727843166D-4 5.259999752044678D0)) (list (list 14.0D0 639.26953125D0 3.5268269130028784D-4 5.269999980926514D0)) (list (list 14.0D0 639.4710693359375D0 3.9510667556896806D-4 5.279999732971191D0)) (list (list 14.0D0 639.4324951171875D0 4.3117691529914737D-4 5.289999961853027D0)) (list (list 14.0D0 639.2047729492188D0 4.564200935419649D-4 5.299999713897705D0)) (list (list 14.0D0 639.0176391601563D0 4.7635994269512594D-4 5.309999942779541D0)) (list (list 14.0D0 639.0401611328125D0 5.0257338443771D-4 5.319999694824219D0)) (list (list 14.0D0 639.165771484375D0 5.492549971677363D-4 5.329999923706055D0)) (list (list 14.0D0 639.237060546875D0 6.099445163272321D-4 5.339999675750732D0)) (list (list 14.0D0 639.151611328125D0 6.782537675462663D-4 5.349999904632568D0)) (list (list 14.0D0 638.865234375D0 7.481208303943276D-4 5.359999656677246D0)) (list (list 14.0D0 638.5426635742188D0 8.001782698556781D-4 5.369999885559082D0)) (list (list 14.0D0 638.2275390625D0 8.504794677719474D-4 5.380000114440918D0)) (list (list 14.0D0 638.0496215820313D0 9.035486727952957D-4 5.389999866485596D0)) (list (list 14.0D0 637.9183349609375D0 9.64056933298707D-4 5.400000095367432D0)) (list (list 14.0D0 637.5067138671875D0 0.0010369779774919153D0 5.409999847412109D0)) (list (list 14.0D0 637.167724609375D0 0.0011156806722283364D0 5.420000076293945D0)) (list (list 14.0D0 637.0811767578125D0 0.0012098660226911307D0 5.429999828338623D0)) (list (list 14.0D0 637.2962036132813D0 0.0013022623024880886D0 5.440000057220459D0)) (list (list 14.0D0 637.6483154296875D0 0.0013824364868924022D0 5.449999809265137D0)) (list (list 14.0D0 637.7517700195313D0 0.0014471856411546469D0 5.460000038146973D0)) (list (list 14.0D0 637.4271850585938D0 0.001480656093917787D0 5.46999979019165D0)) (list (list 14.0D0 637.2381591796875D0 0.0015241538640111685D0 5.480000019073486D0)) (list (list 14.0D0 637.1122436523438D0 0.00157310557551682D0 5.489999771118164D0)) (list (list 14.0D0 636.9857788085938D0 0.0016195137286558748D0 5.5D0)) (list (list 14.0D0 636.8058471679688D0 0.0016520330682396889D0 5.509999752044678D0)) (list (list 14.0D0 636.2974853515625D0 0.0016933889128267765D0 5.519999980926514D0)) (list (list 14.0D0 636.1742553710938D0 0.0017297560116276145D0 5.529999732971191D0)) (list (list 14.0D0 636.2671508789063D0 0.0017883460968732834D0 5.539999961853027D0)) (list (list 14.0D0 636.4285888671875D0 0.0018625807715579868D0 5.549999713897705D0)) (list (list 14.0D0 636.5324096679688D0 0.0019126350525766612D0 5.559999942779541D0)) (list (list 14.0D0 636.389404296875D0 0.0019528454868122936D0 5.569999694824219D0)) (list (list 14.0D0 636.5209350585938D0 0.0019345910986885429D0 5.579999923706055D0)) (list (list 14.0D0 636.7006225585938D0 0.001898514456115663D0 5.589999675750732D0)) (list (list 14.0D0 636.8394775390625D0 0.001870516105554998D0 5.599999904632568D0)) (list (list 14.0D0 636.9794921875D0 0.0018624814692884684D0 5.609999656677246D0)) (list (list 14.0D0 637.1072387695313D0 0.001900681876577437D0 5.619999885559082D0)) (list (list 14.0D0 637.3256225585938D0 0.0019489254336804152D0 5.62999963760376D0)) (list (list 14.0D0 637.5241088867188D0 0.001984261441975832D0 5.639999866485596D0)) (list (list 14.0D0 637.62548828125D0 0.0019961919169873D0 5.650000095367432D0)) (list (list 14.0D0 637.5860595703125D0 0.0019857988227158785D0 5.659999847412109D0)) (list (list 14.0D0 637.7739868164063D0 0.001935233362019062D0 5.670000076293945D0)) (list (list 14.0D0 637.896240234375D0 0.001876148977316916D0 5.679999828338623D0)) (list (list 14.0D0 638.0516357421875D0 0.0018161245388910175D0 5.690000057220459D0)) (list (list 14.0D0 638.2250366210938D0 0.0017675184644758702D0 5.699999809265137D0)) (list (list 14.0D0 638.301513671875D0 0.0017470914172008634D0 5.710000038146973D0)) (list (list 14.0D0 638.6058349609375D0 0.0017722880002111197D0 5.71999979019165D0)) (list (list 14.0D0 638.7925415039063D0 0.0018159258179366589D0 5.730000019073486D0)) (list (list 14.0D0 638.9196166992188D0 0.0018560229800641537D0 5.739999771118164D0)) (list (list 14.0D0 638.9910888671875D0 0.0018777692457661033D0 5.75D0)) (list (list 14.0D0 638.9655151367188D0 0.0018727063434198499D0 5.759999752044678D0)) (list (list 14.0D0 638.8892211914063D0 0.0018417948158457876D0 5.769999980926514D0)) (list (list 14.0D0 638.8615112304688D0 0.0018080173758789897D0 5.779999732971191D0)) (list (list 14.0D0 638.7508544921875D0 0.0017715052235871554D0 5.789999961853027D0)) (list (list 14.0D0 638.5136108398438D0 0.001734306919388473D0 5.799999713897705D0)) (list (list 14.0D0 638.1796264648438D0 0.0017002313397824765D0 5.809999942779541D0)) (list (list 14.0D0 637.586181640625D0 0.001677348162047565D0 5.819999694824219D0)) (list (list 14.0D0 637.3550415039063D0 0.0016666918527334929D0 5.829999923706055D0)) (list (list 14.0D0 637.238037109375D0 0.0016811086097732187D0 5.839999675750732D0)) (list (list 14.0D0 637.20458984375D0 0.0017218041466549039D0 5.849999904632568D0)) (list (list 14.0D0 637.39599609375D0 0.0017799937631934882D0 5.859999656677246D0)) (list (list 14.0D0 637.5284423828125D0 0.001859304727986455D0 5.869999885559082D0)) (list (list 14.0D0 637.4974365234375D0 0.0019227872835472227D0 5.87999963760376D0)) (list (list 14.0D0 637.2908325195313D0 0.0019730341155081988D0 5.889999866485596D0)) (list (list 14.0D0 636.9977416992188D0 0.002011322882026434D0 5.900000095367432D0)) (list (list 14.0D0 636.7952880859375D0 0.0020381908398121596D0 5.909999847412109D0)) (list (list 14.0D0 636.8909301757813D0 0.002053528558462858D0 5.920000076293945D0)) (list (list 14.0D0 636.8562622070313D0 0.002067670924589038D0 5.929999828338623D0)) (list (list 14.0D0 636.76953125D0 0.002064148196950555D0 5.940000057220459D0)) (list (list 14.0D0 636.6150512695313D0 0.0020515802316367627D0 5.949999809265137D0)) (list (list 14.0D0 636.3158569335938D0 0.002057400532066822D0 5.960000038146973D0)) (list (list 14.0D0 636.293701171875D0 0.0020398458000272513D0 5.96999979019165D0)) (list (list 14.0D0 636.3234252929688D0 0.0020335123408585787D0 5.980000019073486D0)) (list (list 14.0D0 636.492919921875D0 0.002001461572945118D0 5.989999771118164D0)) (list (list 14.0D0 636.6838989257813D0 0.0019451772095635534D0 6.0D0)) (list (list 14.0D0 636.6259765625D0 0.0018953571561723948D0 6.009999752044678D0)) (list (list 14.0D0 636.5357055664063D0 0.0018448187038302422D0 6.019999980926514D0)) (list (list 14.0D0 636.4513549804688D0 0.0018225142266601324D0 6.029999732971191D0)) (list (list 14.0D0 636.6552734375D0 0.0018229829147458077D0 6.039999961853027D0)) (list (list 14.0D0 637.1193237304688D0 0.0018447377951815725D0 6.049999713897705D0)) (list (list 14.0D0 637.571533203125D0 0.001888178288936615D0 6.059999942779541D0)) (list (list 14.0D0 637.58984375D0 0.0019408257212489844D0 6.069999694824219D0)) (list (list 14.0D0 637.5703125D0 0.0019772634841501713D0 6.079999923706055D0)) (list (list 14.0D0 637.6936645507813D0 0.00200307066552341D0 6.089999675750732D0)) (list (list 14.0D0 638.044189453125D0 0.0020203455351293087D0 6.099999904632568D0)) (list (list 14.0D0 638.6181030273438D0 0.002028779359534383D0 6.109999656677246D0)) (list (list 14.0D0 638.8905029296875D0 0.002019014675170183D0 6.119999885559082D0)) (list (list 14.0D0 638.876220703125D0 0.0019856037106364966D0 6.12999963760376D0)) (list (list 14.0D0 638.5418090820313D0 0.0019349950598552823D0 6.139999866485596D0)) (list (list 14.0D0 637.9969482421875D0 0.001877596485428512D0 6.150000095367432D0)) (list (list 14.0D0 637.466552734375D0 0.0018276023911312223D0 6.159999847412109D0)) (list (list 14.0D0 637.2210693359375D0 0.0018060528673231602D0 6.170000076293945D0)) (list (list 14.0D0 637.1705322265625D0 0.0018069043289870024D0 6.179999828338623D0)) (list (list 14.0D0 637.1652221679688D0 0.001815181109122932D0 6.190000057220459D0)) (list (list 14.0D0 637.2177124023438D0 0.0018240894423797727D0 6.199999809265137D0)) (list (list 14.0D0 637.4320068359375D0 0.001832305919378996D0 6.210000038146973D0)) (list (list 14.0D0 637.4129638671875D0 0.0018465544562786818D0 6.21999979019165D0)) (list (list 14.0D0 637.4467163085938D0 0.0018628931138664484D0 6.230000019073486D0)) (list (list 14.0D0 637.3057861328125D0 0.001887961640022695D0 6.239999771118164D0)) (list (list 14.0D0 637.0491943359375D0 0.0019201735267415643D0 6.25D0)) (list (list 14.0D0 636.91259765625D0 0.0019531596917659045D0 6.259999752044678D0)) (list (list 14.0D0 636.5750122070313D0 0.0020083060953766108D0 6.269999980926514D0)) (list (list 14.0D0 636.5103759765625D0 0.0020253737457096577D0 6.279999732971191D0)) (list (list 14.0D0 636.4533081054688D0 0.002037360332906246D0 6.289999961853027D0)) (list (list 14.0D0 636.4232788085938D0 0.002047979272902012D0 6.299999713897705D0)) (list (list 14.0D0 636.6024169921875D0 0.002044736873358488D0 6.309999942779541D0)) (list (list 14.0D0 636.6455688476563D0 0.0020741864573210478D0 6.319999694824219D0)) (list (list 14.0D0 636.8947143554688D0 0.0020814230665564537D0 6.329999923706055D0)) (list (list 14.0D0 637.1032104492188D0 0.0020808649715036154D0 6.339999675750732D0)) (list (list 14.0D0 637.3543090820313D0 0.002074743155390024D0 6.349999904632568D0)) (list (list 14.0D0 637.904296875D0 0.002058374462649226D0 6.359999656677246D0)) (list (list 14.0D0 638.1597290039063D0 0.002035283949226141D0 6.369999885559082D0)) (list (list 14.0D0 638.2200927734375D0 0.002004211535677314D0 6.37999963760376D0)) (list (list 14.0D0 638.0636596679688D0 0.0019691013731062413D0 6.389999866485596D0)) (list (list 14.0D0 637.8181762695313D0 0.0019313094671815634D0 6.399999618530273D0)) (list (list 14.0D0 637.6954956054688D0 0.0018905795877799392D0 6.409999847412109D0)) (list (list 14.0D0 637.49755859375D0 0.0018418285762891174D0 6.420000076293945D0)) (list (list 14.0D0 637.498046875D0 0.001792649389244616D0 6.429999828338623D0)) (list (list 14.0D0 637.6273803710938D0 0.0017595802200958133D0 6.440000057220459D0)) (list (list 14.0D0 637.7412109375D0 0.001750389114022255D0 6.449999809265137D0)) (list (list 14.0D0 637.6460571289063D0 0.0017667573411017657D0 6.460000038146973D0)) (list (list 14.0D0 637.2172241210938D0 0.0018047415651381016D0 6.46999979019165D0)) (list (list 14.0D0 636.8003540039063D0 0.0018395569641143084D0 6.480000019073486D0)) (list (list 14.0D0 636.6771240234375D0 0.0018544336780905724D0 6.489999771118164D0)) (list (list 14.0D0 636.7591552734375D0 0.0018480838043615222D0 6.5D0)) (list (list 14.0D0 636.7532958984375D0 0.001828206004574895D0 6.509999752044678D0)) (list (list 14.0D0 636.8191528320313D0 0.0017864430556073785D0 6.519999980926514D0)) (list (list 14.0D0 636.6966552734375D0 0.0017766411183401943D0 6.529999732971191D0)) (list (list 14.0D0 636.7611694335938D0 0.001773154130205512D0 6.539999961853027D0)) (list (list 14.0D0 636.894775390625D0 0.0017697382718324662D0 6.549999713897705D0)) (list (list 14.0D0 636.7420043945313D0 0.0017673849361017347D0 6.559999942779541D0)) (list (list 14.0D0 636.8367919921875D0 0.001709101372398436D0 6.569999694824219D0)) (list (list 14.0D0 636.6314697265625D0 0.0016663211863487959D0 6.579999923706055D0)) (list (list 14.0D0 636.5187377929688D0 0.0016287392936646939D0 6.589999675750732D0)) (list (list 14.0D0 636.538818359375D0 0.0016065494855865837D0 6.599999904632568D0)) (list (list 14.0D0 636.561279296875D0 0.001618655165657401D0 6.609999656677246D0)) (list (list 14.0D0 636.8844604492188D0 0.0016443487256765366D0 6.619999885559082D0)) (list (list 14.0D0 637.0641479492188D0 0.001690897042863071D0 6.62999963760376D0)) (list (list 14.0D0 637.1424560546875D0 0.0017397934570908547D0 6.639999866485596D0)) (list (list 14.0D0 637.1453247070313D0 0.0017795729218050838D0 6.649999618530273D0)) (list (list 14.0D0 637.0936279296875D0 0.0018029308412224055D0 6.659999847412109D0)) (list (list 14.0D0 636.9677124023438D0 0.0018135667778551579D0 6.670000076293945D0)) (list (list 14.0D0 637.094482421875D0 0.0018054910469800234D0 6.679999828338623D0)) (list (list 14.0D0 637.1820068359375D0 0.0018001549178734422D0 6.690000057220459D0)) (list (list 14.0D0 637.2568359375D0 0.0017960192635655404D0 6.699999809265137D0)) (list (list 14.0D0 637.460693359375D0 0.0017807974945753813D0 6.710000038146973D0)) (list (list 14.0D0 637.1503295898438D0 0.0017610685899853707D0 6.71999979019165D0)) (list (list 14.0D0 637.2301025390625D0 0.0017128324834629894D0 6.730000019073486D0)) (list (list 14.0D0 637.169189453125D0 0.0016889956314116717D0 6.739999771118164D0)) (list (list 14.0D0 636.9879150390625D0 0.0017021942185238004D0 6.75D0)) (list (list 14.0D0 636.94677734375D0 0.0017447093268856407D0 6.759999752044678D0)) (list (list 14.0D0 636.6775512695313D0 0.001822862890549004D0 6.769999980926514D0)) (list (list 14.0D0 636.9022827148438D0 0.0018692831508815289D0 6.779999732971191D0)) (list (list 14.0D0 637.1717529296875D0 0.0019119230564683676D0 6.789999961853027D0)) (list (list 14.0D0 637.424560546875D0 0.0019538330379873515D0 6.799999713897705D0)) (list (list 14.0D0 637.741455078125D0 0.001986575312912464D0 6.809999942779541D0)) (list (list 14.0D0 637.6002197265625D0 0.0020066676661372185D0 6.819999694824219D0)) (list (list 14.0D0 637.6725463867188D0 0.0020203415770083666D0 6.829999923706055D0)) (list (list 14.0D0 637.8765258789063D0 0.002038729377090931D0 6.839999675750732D0)) (list (list 14.0D0 638.300048828125D0 0.002071839291602373D0 6.849999904632568D0)) (list (list 14.0D0 639.0646362304688D0 0.0021267703268676997D0 6.859999656677246D0)) (list (list 14.0D0 639.7667236328125D0 0.0021818438544869423D0 6.869999885559082D0)) (list (list 14.0D0 640.3934936523438D0 0.002223141025751829D0 6.87999963760376D0)) (list (list 14.0D0 640.8251953125D0 0.002219425980001688D0 6.889999866485596D0)) (list (list 14.0D0 641.029541015625D0 0.0021742614917457104D0 6.899999618530273D0)) (list (list 14.0D0 641.023193359375D0 0.0021071303635835648D0 6.909999847412109D0)) (list (list 14.0D0 640.7915649414063D0 0.002004284644499421D0 6.920000076293945D0)) (list (list 14.0D0 640.502197265625D0 0.0019173802575096488D0 6.929999828338623D0)) (list (list 14.0D0 640.2608032226563D0 0.0018354656640440226D0 6.940000057220459D0)) (list (list 14.0D0 640.13720703125D0 0.001764995395205915D0 6.949999809265137D0)) (list (list 14.0D0 640.1687622070313D0 0.0017163394950330258D0 6.960000038146973D0)) (list (list 14.0D0 640.2230834960938D0 0.0016567434649914504D0 6.96999979019165D0)) (list (list 14.0D0 640.3162841796875D0 0.0016024071956053377D0 6.980000019073486D0)) (list (list 14.0D0 640.3947143554688D0 0.0015630597481504083D0 6.989999771118164D0)) (list (list 14.0D0 640.39013671875D0 0.001545731327496469D0 7.0D0)) (list (list 14.0D0 640.2381591796875D0 0.0015530951786786318D0 7.009999752044678D0)) (list (list 14.0D0 639.9829711914063D0 0.0015607792884111405D0 7.019999980926514D0)) (list (list 14.0D0 639.5347900390625D0 0.0015264085959643126D0 7.029999732971191D0)) (list (list 14.0D0 639.290283203125D0 0.0014498955570161343D0 7.039999961853027D0)) (list (list 14.0D0 639.1941528320313D0 0.0013292401563376189D0 7.049999713897705D0)) (list (list 14.0D0 639.0457153320313D0 0.0011664845515042544D0 7.059999942779541D0)) (list (list 14.0D0 639.2811889648438D0 9.901338489726186D-4 7.069999694824219D0)) (list (list 14.0D0 638.9697875976563D0 7.902743527665734D-4 7.079999923706055D0)) (list (list 14.0D0 637.5888061523438D0 6.02061627432704D-4 7.089999675750732D0)) (list (list 14.0D0 635.1355590820313D0 4.4999420060776174D-4 7.099999904632568D0)) (list (list 14.0D0 632.13134765625D0 3.5062668030150235D-4 7.109999656677246D0)) (list (list 14.0D0 631.7592163085938D0 2.902433043345809D-4 7.119999885559082D0)) (list (list 14.0D0 634.4209594726563D0 2.3123501159716398D-4 7.12999963760376D0)) (list (list 14.0D0 637.8141479492188D0 1.940036308951676D-4 7.139999866485596D0)) (list (list 14.0D0 640.2965698242188D0 1.743955654092133D-4 7.149999618530273D0)) (list (list 14.0D0 640.6652221679688D0 1.6019531176425517D-4 7.159999847412109D0)) (list (list 14.0D0 639.8856811523438D0 1.7020564700942487D-4 7.170000076293945D0)) (list (list 14.0D0 639.1088256835938D0 1.8626854580361396D-4 7.179999828338623D0)) (list (list 14.0D0 638.6611938476563D0 2.0072337065357715D-4 7.190000057220459D0)) (list (list 14.0D0 638.4085083007813D0 2.1168796229176223D-4 7.199999809265137D0)) (list (list 14.0D0 638.0546875D0 2.1929910872131586D-4 7.210000038146973D0)) (list (list 14.0D0 637.65185546875D0 2.204023185186088D-4 7.21999979019165D0)) (list (list 14.0D0 637.7569580078125D0 2.1346425637602806D-4 7.230000019073486D0)) (list (list 14.0D0 637.9817504882813D0 2.0054378546774388D-4 7.239999771118164D0)) (list (list 14.0D0 638.0645141601563D0 1.8418820400256664D-4 7.25D0)) (list (list 14.0D0 637.8177490234375D0 1.6749634232837707D-4 7.259999752044678D0)) (list (list 14.0D0 637.3563232421875D0 1.5380949480459094D-4 7.269999980926514D0)) (list (list 14.0D0 637.2564086914063D0 1.430458651157096D-4 7.279999732971191D0)) (list (list 14.0D0 637.1536254882813D0 1.350034144707024D-4 7.289999961853027D0)) (list (list 14.0D0 636.95751953125D0 1.2912544480059296D-4 7.299999713897705D0)) (list (list 14.0D0 636.7374877929688D0 1.243144943146035D-4 7.309999942779541D0)) (list (list 14.0D0 637.1043090820313D0 1.1718479072442278D-4 7.319999694824219D0)) (list (list 14.0D0 638.2754516601563D0 1.0749060311354697D-4 7.329999923706055D0)) (list (list 14.0D0 639.3060302734375D0 9.761886758496985D-5 7.339999675750732D0)) (list (list 14.0D0 639.7197265625D0 8.848591096466407D-5 7.349999904632568D0)) (list (list 14.0D0 639.2369995117188D0 8.048657036852092D-5 7.359999656677246D0)) (list (list 14.0D0 637.7041015625D0 7.40186806069687D-5 7.369999885559082D0)) (list (list 14.0D0 636.5020751953125D0 6.751125329174102D-5 7.37999963760376D0)) (list (list 14.0D0 635.6048583984375D0 5.920063267694786D-5 7.389999866485596D0)) (list (list 14.0D0 635.2001342773438D0 4.86317730974406D-5 7.399999618530273D0)) (list (list 14.0D0 635.4144897460938D0 3.4625194530235604D-5 7.409999847412109D0)) (list (list 14.0D0 635.4144897460938D0 4.861095931119053D-6 7.419999599456787D0)) (list (list 15.0D0 2361.9326171875D0 0.0019084956729784608D0 0.2800000011920929D0)) (list (list 15.0D0 2368.679443359375D0 0.0012658539926633239D0 0.28999999165534973D0)) (list (list 15.0D0 2375.609130859375D0 6.340671679936349D-4 0.29999998211860657D0)) (list (list 15.0D0 2395.806396484375D0 7.892922149039805D-4 0.3100000023841858D0)) (list (list 15.0D0 2376.666748046875D0 0.0011095276568084956D0 0.3199999928474426D0)) (list (list 15.0D0 2363.57568359375D0 0.0014056881191208959D0 0.32999998331069947D0)) (list (list 15.0D0 2366.612548828125D0 0.0016279536066576839D0 0.3400000035762787D0)) (list (list 15.0D0 2366.777099609375D0 0.00183926394674927D0 0.3499999940395355D0)) (list (list 15.0D0 2363.709716796875D0 0.0019193676998838783D0 0.35999998450279236D0)) (list (list 15.0D0 2370.79345703125D0 0.0014746953966096044D0 0.3700000047683716D0)) (list (list 15.0D0 2378.061279296875D0 0.0011368620907887817D0 0.3799999952316284D0)) (list (list 15.0D0 2382.176025390625D0 0.001063498086296022D0 0.38999998569488526D0)) (list (list 15.0D0 2385.09765625D0 0.0010304757161065937D0 0.3999999761581421D0)) (list (list 15.0D0 2387.9150390625D0 9.19168465770781D-4 0.4099999964237213D0)) (list (list 15.0D0 2386.110107421875D0 0.0010039281332865358D0 0.41999998688697815D0)) (list (list 15.0D0 2382.914306640625D0 0.0011476813815534115D0 0.429999977350235D0)) (list (list 15.0D0 2379.718505859375D0 0.0012914352118968964D0 0.4399999976158142D0)) (list (list 15.0D0 2376.531494140625D0 0.0014346563257277012D0 0.44999998807907105D0)) (list (list 15.0D0 2373.767822265625D0 0.0015523269539698959D0 0.4599999785423279D0)) (list (list 15.0D0 2372.1611328125D0 0.0014850678853690625D0 0.4699999988079071D0)) (list (list 15.0D0 2371.655029296875D0 0.001333867316134274D0 0.47999998927116394D0)) (list (list 15.0D0 2372.11962890625D0 0.001155592268332839D0 0.4899999797344208D0)) (list (list 15.0D0 2373.313232421875D0 9.785377187654376D-4 0.5D0)) (list (list 15.0D0 2374.011474609375D0 9.076409041881561D-4 0.5099999904632568D0)) (list (list 15.0D0 2373.935302734375D0 8.74001532793045D-4 0.5199999809265137D0)) (list (list 15.0D0 2371.97607421875D0 8.781105279922485D-4 0.5299999713897705D0)) (list (list 15.0D0 2367.06884765625D0 9.98968374915421D-4 0.5399999618530273D0)) (list (list 15.0D0 2358.546142578125D0 0.0013622669503092766D0 0.550000011920929D0)) (list (list 15.0D0 2357.9033203125D0 0.0016537676565349102D0 0.5600000023841858D0)) (list (list 15.0D0 2360.62939453125D0 0.0017270150128751994D0 0.5699999928474426D0)) (list (list 15.0D0 2364.795654296875D0 0.001683354377746582D0 0.5799999833106995D0)) (list (list 15.0D0 2368.78173828125D0 0.0015212349826470018D0 0.5899999737739563D0)) (list (list 15.0D0 2371.2548828125D0 0.0011758822947740555D0 0.5999999642372131D0)) (list (list 15.0D0 2375.604248046875D0 8.286225493066013D-4 0.6100000143051148D0)) (list (list 15.0D0 2377.091552734375D0 8.177991257980466D-4 0.6200000047683716D0)) (list (list 15.0D0 2377.498046875D0 0.0010769448708742857D0 0.6299999952316284D0)) (list (list 15.0D0 2376.652099609375D0 0.0014272747794166208D0 0.6399999856948853D0)) (list (list 15.0D0 2372.94580078125D0 0.0015982914483174682D0 0.6499999761581421D0)) (list (list 15.0D0 2361.674072265625D0 0.001314350520260632D0 0.6599999666213989D0)) (list (list 15.0D0 2355.69482421875D0 0.0010940905194729567D0 0.6699999570846558D0)) (list (list 15.0D0 2362.645263671875D0 7.482193759642541D-4 0.6800000071525574D0)) (list (list 15.0D0 2381.01220703125D0 4.624261928256601D-4 0.6899999976158142D0)) (list (list 15.0D0 2401.94970703125D0 6.538217421621084D-4 0.699999988079071D0)) (list (list 15.0D0 2399.99853515625D0 8.12674465123564D-4 0.7099999785423279D0)) (list (list 15.0D0 2397.08154296875D0 9.419986163266003D-4 0.7199999690055847D0)) (list (list 15.0D0 2394.47216796875D0 9.927176870405674D-4 0.7299999594688416D0)) (list (list 15.0D0 2391.4853515625D0 9.256922057829797D-4 0.7400000095367432D0)) (list (list 15.0D0 2386.239990234375D0 7.204276625998318D-4 0.75D0)) (list (list 15.0D0 2380.184326171875D0 6.12641975749284D-4 0.7599999904632568D0)) (list (list 15.0D0 2378.487548828125D0 5.83596236538142D-4 0.7699999809265137D0)) (list (list 15.0D0 2380.52001953125D0 6.657366757281125D-4 0.7799999713897705D0)) (list (list 15.0D0 2383.431640625D0 8.450755849480629D-4 0.7899999618530273D0)) (list (list 15.0D0 2382.807861328125D0 0.0010694630909711123D0 0.7999999523162842D0)) (list (list 15.0D0 2375.9619140625D0 0.0012024047318845988D0 0.8100000023841858D0)) (list (list 15.0D0 2363.591064453125D0 0.0016132834134623409D0 0.8199999928474426D0)) (list (list 15.0D0 2356.27587890625D0 0.0018711457960307599D0 0.8299999833106995D0)) (list (list 15.0D0 2355.652587890625D0 0.001827517058700323D0 0.8399999737739563D0)) (list (list 15.0D0 2357.64501953125D0 0.0015226512914523483D0 0.8499999642372131D0)) (list (list 15.0D0 2360.028564453125D0 0.0011754228034988046D0 0.85999995470047D0)) (list (list 15.0D0 2371.863525390625D0 9.737361106090248D-4 0.8700000047683716D0)) (list (list 15.0D0 2379.074462890625D0 9.107622900046408D-4 0.8799999952316284D0)) (list (list 15.0D0 2379.7568359375D0 9.387229802086949D-4 0.8899999856948853D0)) (list (list 15.0D0 2379.281494140625D0 9.769139578565956D-4 0.8999999761581421D0)) (list (list 15.0D0 2376.345947265625D0 9.223303059116006D-4 0.9099999666213989D0)) (list (list 15.0D0 2372.713134765625D0 7.465463131666184D-4 0.9199999570846558D0)) (list (list 15.0D0 2369.65478515625D0 5.479492829181254D-4 0.9300000071525574D0)) (list (list 15.0D0 2366.949462890625D0 3.745047142729163D-4 0.9399999976158142D0)) (list (list 15.0D0 2364.0048828125D0 2.462700940668583D-4 0.949999988079071D0)) (list (list 15.0D0 2371.19775390625D0 1.860136108007282D-4 0.9599999785423279D0)) (list (list 15.0D0 2360.246337890625D0 4.534405597951263D-4 0.9699999690055847D0)) (list (list 15.0D0 2352.992431640625D0 7.391746039502323D-4 0.9799999594688416D0)) (list (list 15.0D0 2354.169189453125D0 8.928737370297313D-4 0.9899999499320984D0)) (list (list 15.0D0 2358.653076171875D0 8.647245704196394D-4 1.0D0)) (list (list 15.0D0 2363.136962890625D0 8.365755784325302D-4 1.0099999904632569D0)) (list (list 15.0D0 2364.00732421875D0 7.454160950146616D-4 1.0199999809265137D0)) (list (list 15.0D0 2365.64599609375D0 6.724007544107735D-4 1.0299999713897705D0)) (list (list 15.0D0 2368.83740234375D0 6.698443321511149D-4 1.0399999618530274D0)) (list (list 15.0D0 2372.1796875D0 7.719072164036334D-4 1.0499999523162842D0)) (list (list 15.0D0 2371.623291015625D0 9.788727620616556D-4 1.059999942779541D0)) (list (list 15.0D0 2370.55419921875D0 0.0012057928834110499D0 1.0699999332427979D0)) (list (list 15.0D0 2369.24951171875D0 0.0014104772126302123D0 1.0799999237060547D0)) (list (list 15.0D0 2366.810546875D0 0.0015262108063325286D0 1.090000033378601D0)) (list (list 15.0D0 2361.976318359375D0 0.0014834387693554163D0 1.100000023841858D0)) (list (list 15.0D0 2358.19140625D0 0.0013874885626137257D0 1.1100000143051148D0)) (list (list 15.0D0 2355.313720703125D0 0.0012211542343720794D0 1.1200000047683716D0)) (list (list 15.0D0 2352.74658203125D0 0.0010943188099190593D0 1.1299999952316285D0)) (list (list 15.0D0 2358.17919921875D0 9.570193942636251D-4 1.1399999856948853D0)) (list (list 15.0D0 2379.72802734375D0 7.088736165314913D-4 1.149999976158142D0)) (list (list 15.0D0 2360.40478515625D0 8.428493747487664D-4 1.159999966621399D0)) (list (list 15.0D0 2358.0986328125D0 9.417735273018479D-4 1.1699999570846558D0)) (list (list 15.0D0 2356.45556640625D0 0.0010467319516465068D0 1.1799999475479126D0)) (list (list 15.0D0 2351.971435546875D0 0.001163517590612173D0 1.1899999380111695D0)) (list (list 15.0D0 2347.70166015625D0 0.0012798192910850048D0 1.1999999284744263D0)) (list (list 15.0D0 2347.158935546875D0 0.0013877147575840354D0 1.209999918937683D0)) (list (list 15.0D0 2348.3291015625D0 0.0014983784640207887D0 1.2200000286102295D0)) (list (list 15.0D0 2349.91455078125D0 0.0016097113257274032D0 1.2300000190734864D0)) (list (list 15.0D0 2350.998046875D0 0.001667471369728446D0 1.2400000095367432D0)) (list (list 15.0D0 2350.952880859375D0 0.0015906683402135969D0 1.25D0)) (list (list 15.0D0 2351.064453125D0 0.001295376685447991D0 1.2599999904632569D0)) (list (list 15.0D0 2351.176025390625D0 0.001000085030682385D0 1.2699999809265137D0)) (list (list 15.0D0 2360.899658203125D0 6.83149672113359D-4 1.2799999713897705D0)) (list (list 15.0D0 2372.239501953125D0 4.4521098607219756D-4 1.2899999618530274D0)) (list (list 15.0D0 2369.5751953125D0 4.416391020640731D-4 1.2999999523162842D0)) (list (list 15.0D0 2358.2861328125D0 7.369196973741055D-4 1.309999942779541D0)) (list (list 15.0D0 2357.401611328125D0 9.295480558648706D-4 1.3199999332427979D0)) (list (list 15.0D0 2361.551025390625D0 9.653035667724907D-4 1.3299999237060547D0)) (list (list 15.0D0 2368.013427734375D0 8.775092428550124D-4 1.3399999141693116D0)) (list (list 15.0D0 2374.81201171875D0 7.532789604738355D-4 1.350000023841858D0)) (list (list 15.0D0 2377.172119140625D0 7.272855727933347D-4 1.3600000143051148D0)) (list (list 15.0D0 2379.327392578125D0 8.061893749982119D-4 1.3700000047683716D0)) (list (list 15.0D0 2377.569091796875D0 8.59884254168719D-4 1.3799999952316285D0)) (list (list 15.0D0 2373.332763671875D0 8.368593407794833D-4 1.3899999856948853D0)) (list (list 15.0D0 2370.184326171875D0 7.277543772943318D-4 1.399999976158142D0)) (list (list 15.0D0 2365.888916015625D0 5.853134207427502D-4 1.409999966621399D0)) (list (list 15.0D0 2365.135009765625D0 6.271837628446519D-4 1.4199999570846558D0)) (list (list 15.0D0 2365.18994140625D0 7.111536106094718D-4 1.4299999475479126D0)) (list (list 15.0D0 2365.244873046875D0 7.951234001666307D-4 1.4399999380111695D0)) (list (list 15.0D0 2365.403564453125D0 8.717086166143417D-4 1.4499999284744263D0)) (list (list 15.0D0 2367.035888671875D0 8.433744078502059D-4 1.459999918937683D0)) (list (list 15.0D0 2365.62841796875D0 8.736344170756638D-4 1.46999990940094D0)) (list (list 15.0D0 2362.766845703125D0 0.0010643337154760957D0 1.4800000190734864D0)) (list (list 15.0D0 2362.349609375D0 0.0012130102841183544D0 1.4900000095367432D0)) (list (list 15.0D0 2368.45263671875D0 0.0010294747771695257D0 1.5D0)) (list (list 15.0D0 2374.555419921875D0 8.459393866360188D-4 1.5099999904632569D0)) (list (list 15.0D0 2376.3681640625D0 8.916913066059351D-4 1.5199999809265137D0)) (list (list 15.0D0 2364.377197265625D0 0.0017298165475949645D0 1.5299999713897705D0)) (list (list 15.0D0 2349.701171875D0 0.0026015248149633408D0 1.5399999618530274D0)) (list (list 15.0D0 2350.0029296875D0 0.0023338710889220238D0 1.5499999523162842D0)) (list (list 15.0D0 2350.168701171875D0 0.0018493449315428734D0 1.559999942779541D0)) (list (list 15.0D0 2349.499755859375D0 0.001457384554669261D0 1.5699999332427979D0)) (list (list 15.0D0 2360.83447265625D0 0.0010728093329817057D0 1.5799999237060547D0)) (list (list 15.0D0 2372.582275390625D0 8.158250129781663D-4 1.5899999141693116D0)) (list (list 15.0D0 2366.454345703125D0 8.426127606071532D-4 1.5999999046325684D0)) (list (list 15.0D0 2366.735107421875D0 8.036430226638913D-4 1.6100000143051148D0)) (list (list 15.0D0 2366.537109375D0 8.606310002505779D-4 1.6200000047683716D0)) (list (list 15.0D0 2366.81689453125D0 9.827865287661553D-4 1.6299999952316285D0)) (list (list 15.0D0 2367.098876953125D0 0.0011269773822277785D0 1.6399999856948853D0)) (list (list 15.0D0 2366.45947265625D0 0.0012349359458312393D0 1.649999976158142D0)) (list (list 15.0D0 2365.491943359375D0 0.0011800951324403286D0 1.659999966621399D0)) (list (list 15.0D0 2364.81591796875D0 0.0011313332943245769D0 1.6699999570846558D0)) (list (list 15.0D0 2365.174072265625D0 0.0012074117548763752D0 1.6799999475479126D0)) (list (list 15.0D0 2367.172607421875D0 0.00143291219137609D0 1.6899999380111695D0)) (list (list 15.0D0 2370.969970703125D0 0.001772145158611238D0 1.6999999284744263D0)) (list (list 15.0D0 2373.487548828125D0 0.0020295167341828347D0 1.709999918937683D0)) (list (list 15.0D0 2374.59228515625D0 0.0020656061824411154D0 1.71999990940094D0)) (list (list 15.0D0 2374.414306640625D0 0.0019339558202773333D0 1.7300000190734864D0)) (list (list 15.0D0 2371.926513671875D0 0.0017237943829968572D0 1.7400000095367432D0)) (list (list 15.0D0 2366.399658203125D0 0.001546549377962947D0 1.75D0)) (list (list 15.0D0 2363.2353515625D0 0.0015089066000655294D0 1.7599999904632569D0)) (list (list 15.0D0 2361.2548828125D0 0.0012950928648933769D0 1.7699999809265137D0)) (list (list 15.0D0 2356.265380859375D0 0.001076075597666204D0 1.7799999713897705D0)) (list (list 15.0D0 2349.607666015625D0 0.0010436867596581579D0 1.7899999618530274D0)) (list (list 15.0D0 2344.872802734375D0 0.0013051576679572463D0 1.7999999523162842D0)) (list (list 15.0D0 2346.273193359375D0 0.001137573504820466D0 1.809999942779541D0)) (list (list 15.0D0 2346.0966796875D0 0.0011077780509367586D0 1.8199999332427979D0)) (list (list 15.0D0 2345.78173828125D0 0.0011669619707390666D0 1.8299999237060547D0)) (list (list 15.0D0 2353.521484375D0 0.001279151882044971D0 1.8399999141693116D0)) (list (list 15.0D0 2375.01953125D0 0.0014145197346806527D0 1.8499999046325684D0)) (list (list 15.0D0 2373.651611328125D0 0.001602241420187056D0 1.8600000143051148D0)) (list (list 15.0D0 2374.368408203125D0 0.001565348356962204D0 1.8700000047683716D0)) (list (list 15.0D0 2377.127197265625D0 0.0014844732359051705D0 1.8799999952316285D0)) (list (list 15.0D0 2379.85107421875D0 0.0014446305576711893D0 1.8899999856948853D0)) (list (list 15.0D0 2381.15087890625D0 0.0014703454216942192D0 1.899999976158142D0)) (list (list 15.0D0 2392.34130859375D0 0.0013383616460487247D0 1.909999966621399D0)) (list (list 15.0D0 2403.53173828125D0 0.001206377986818552D0 1.9199999570846558D0)) (list (list 15.0D0 2407.82080078125D0 0.001165910274721682D0 1.9299999475479126D0)) (list (list 15.0D0 2402.222412109375D0 0.0012155062286183238D0 1.9399999380111695D0)) (list (list 15.0D0 2388.4990234375D0 0.0013012822018936277D0 1.9499999284744263D0)) (list (list 15.0D0 2392.8056640625D0 0.0012397323735058308D0 1.959999918937683D0)) (list (list 15.0D0 2393.407470703125D0 0.0010830772807821632D0 1.96999990940094D0)) (list (list 15.0D0 2393.866455078125D0 9.085184428840876D-4 1.9799998998641968D0)) (list (list 15.0D0 2397.121826171875D0 7.562263053841889D-4 1.9900000095367432D0)) (list (list 15.0D0 2404.702880859375D0 6.55806390568614D-4 2.0D0)) (list (list 15.0D0 2408.96435546875D0 6.469934014603496D-4 2.009999990463257D0)) (list (list 15.0D0 2396.77734375D0 6.884373724460602D-4 2.0199999809265137D0)) (list (list 15.0D0 2381.486572265625D0 7.39364477340132D-4 2.0299999713897705D0)) (list (list 15.0D0 2371.586181640625D0 8.339238120242953D-4 2.0399999618530274D0)) (list (list 15.0D0 2371.00244140625D0 0.0010216383961960674D0 2.049999952316284D0)) (list (list 15.0D0 2360.316650390625D0 0.0013006278313696385D0 2.059999942779541D0)) (list (list 15.0D0 2356.7626953125D0 0.001660074107348919D0 2.069999933242798D0)) (list (list 15.0D0 2356.4169921875D0 0.0018976600840687752D0 2.0799999237060547D0)) (list (list 15.0D0 2357.578369140625D0 0.0019116481998935342D0 2.0899999141693116D0)) (list (list 15.0D0 2359.60595703125D0 0.0016698581166565419D0 2.0999999046325684D0)) (list (list 15.0D0 2365.89990234375D0 0.0013489641714841128D0 2.109999895095825D0)) (list (list 15.0D0 2370.498291015625D0 0.0010710529750213027D0 2.119999885559082D0)) (list (list 15.0D0 2373.827392578125D0 0.0010069225681945682D0 2.129999876022339D0)) (list (list 15.0D0 2375.206787109375D0 0.001148810493759811D0 2.1399998664855957D0)) (list (list 15.0D0 2372.114990234375D0 0.0014474284835159779D0 2.1499998569488526D0)) (list (list 15.0D0 2350.28173828125D0 0.002035886514931917D0 2.1599998474121094D0)) (list (list 15.0D0 2359.086181640625D0 0.0018709403229877353D0 2.169999837875366D0)) (list (list 15.0D0 2367.447998046875D0 0.0015384830767288804D0 2.180000066757202D0)) (list (list 15.0D0 2371.47705078125D0 0.001214577117934823D0 2.190000057220459D0)) (list (list 15.0D0 2374.903076171875D0 9.801507694646717D-4 2.200000047683716D0)) (list (list 15.0D0 2378.86083984375D0 0.0010428096866235137D0 2.2100000381469727D0)) (list (list 15.0D0 2379.074951171875D0 0.0012702660169452429D0 2.2200000286102295D0)) (list (list 15.0D0 2376.7958984375D0 0.0015738256042823196D0 2.2300000190734864D0)) (list (list 15.0D0 2373.25244140625D0 0.0018324698321521283D0 2.240000009536743D0)) (list (list 15.0D0 2369.870849609375D0 0.001902859890833497D0 2.25D0)) (list (list 15.0D0 2368.660888671875D0 0.001553835580125451D0 2.259999990463257D0)) (list (list 15.0D0 2366.61767578125D0 0.0012186096282675863D0 2.2699999809265137D0)) (list (list 15.0D0 2378.759521484375D0 9.686339762993157D-4 2.2799999713897705D0)) (list (list 15.0D0 2391.570068359375D0 8.584019378758967D-4 2.2899999618530274D0)) (list (list 15.0D0 2387.492919921875D0 9.345500147901475D-4 2.299999952316284D0)) (list (list 15.0D0 2375.800048828125D0 0.0012741150567308069D0 2.309999942779541D0)) (list (list 15.0D0 2364.107177734375D0 0.0016136800404638052D0 2.319999933242798D0)) (list (list 15.0D0 2359.627685546875D0 0.0017261169850826264D0 2.3299999237060547D0)) (list (list 15.0D0 2359.463134765625D0 0.0015795350773259998D0 2.3399999141693116D0)) (list (list 15.0D0 2360.113525390625D0 0.0012160326587036252D0 2.3499999046325684D0)) (list (list 15.0D0 2373.438232421875D0 7.173483609221876D-4 2.359999895095825D0)) (list (list 15.0D0 2364.8486328125D0 4.4046706170774996D-4 2.369999885559082D0)) (list (list 15.0D0 2351.6865234375D0 4.962310194969177D-4 2.379999876022339D0)) (list (list 15.0D0 2350.434326171875D0 7.083526579663158D-4 2.3899998664855957D0)) (list (list 15.0D0 2371.557861328125D0 8.662298205308616D-4 2.3999998569488526D0)) (list (list 15.0D0 2392.509765625D0 0.0010861073387786746D0 2.4099998474121094D0)) (list (list 15.0D0 2388.814208984375D0 0.0011535114608705044D0 2.419999837875366D0)) (list (list 15.0D0 2385.18359375D0 0.0010623307898640633D0 2.429999828338623D0)) (list (list 15.0D0 2383.887939453125D0 8.555576205253601D-4 2.440000057220459D0)) (list (list 15.0D0 2382.227294921875D0 6.100905011408031D-4 2.450000047683716D0)) (list (list 15.0D0 2381.679443359375D0 4.825661308132112D-4 2.4600000381469727D0)) (list (list 15.0D0 2362.80224609375D0 5.112357321195304D-4 2.4700000286102295D0)) (list (list 15.0D0 2357.135009765625D0 4.985092091374099D-4 2.4800000190734864D0)) (list (list 15.0D0 2362.344970703125D0 4.8426733701489866D-4 2.490000009536743D0)) (list (list 15.0D0 2368.21923828125D0 5.434449994936585D-4 2.5D0)) (list (list 15.0D0 2370.39404296875D0 6.193998851813376D-4 2.509999990463257D0)) (list (list 15.0D0 2377.052734375D0 6.846773321740329D-4 2.5199999809265137D0)) (list (list 15.0D0 2379.765869140625D0 7.327229832299054D-4 2.5299999713897705D0)) (list (list 15.0D0 2379.452880859375D0 7.731913356110454D-4 2.5399999618530274D0)) (list (list 15.0D0 2379.273681640625D0 8.165095932781696D-4 2.549999952316284D0)) (list (list 15.0D0 2381.546630859375D0 8.526527672074735D-4 2.559999942779541D0)) (list (list 15.0D0 2383.879638671875D0 9.003966697491705D-4 2.569999933242798D0)) (list (list 15.0D0 2384.520751953125D0 9.646749822422862D-4 2.5799999237060547D0)) (list (list 15.0D0 2382.85205078125D0 0.0010489295236766339D0 2.5899999141693116D0)) (list (list 15.0D0 2379.17041015625D0 0.0011386508122086525D0 2.5999999046325684D0)) (list (list 15.0D0 2376.56494140625D0 0.0011298957979306579D0 2.609999895095825D0)) (list (list 15.0D0 2355.91796875D0 0.001144774374552071D0 2.619999885559082D0)) (list (list 15.0D0 2347.692626953125D0 0.0011059418320655823D0 2.629999876022339D0)) (list (list 15.0D0 2348.79345703125D0 0.0010318509303033352D0 2.6399998664855957D0)) (list (list 15.0D0 2349.633056640625D0 9.522986365482211D-4 2.6499998569488526D0)) (list (list 15.0D0 2348.559814453125D0 8.327570394612849D-4 2.6599998474121094D0)) (list (list 15.0D0 2349.04345703125D0 9.335688082501292D-4 2.669999837875366D0)) (list (list 15.0D0 2348.876220703125D0 0.0010610215831547976D0 2.679999828338623D0)) (list (list 15.0D0 2357.635009765625D0 0.0010902286740019918D0 2.690000057220459D0)) (list (list 15.0D0 2379.8359375D0 9.67814470641315D-4 2.700000047683716D0)) (list (list 15.0D0 2383.8193359375D0 9.032408124767244D-4 2.7100000381469727D0)) (list (list 15.0D0 2382.8212890625D0 6.876251427456737D-4 2.7200000286102295D0)) (list (list 15.0D0 2378.0283203125D0 5.117198452353478D-4 2.7300000190734864D0)) (list (list 15.0D0 2368.157958984375D0 5.635143024846911D-4 2.740000009536743D0)) (list (list 15.0D0 2355.08544921875D0 9.19080339372158D-4 2.75D0)) (list (list 15.0D0 2357.39208984375D0 0.0011705816723406315D0 2.759999990463257D0)) (list (list 15.0D0 2359.69873046875D0 0.001422083005309105D0 2.7699999809265137D0)) (list (list 15.0D0 2362.541748046875D0 0.0013944169040769339D0 2.7799999713897705D0)) (list (list 15.0D0 2365.42822265625D0 0.0011714380234479905D0 2.7899999618530274D0)) (list (list 15.0D0 2367.890380859375D0 9.135173750109971D-4 2.799999952316284D0)) (list (list 15.0D0 2370.58837890625D0 7.390426471829414D-4 2.809999942779541D0)) (list (list 15.0D0 2372.078125D0 6.77943869959563D-4 2.819999933242798D0)) (list (list 15.0D0 2372.297119140625D0 6.629464332945645D-4 2.8299999237060547D0)) (list (list 15.0D0 2371.319091796875D0 7.109545986168087D-4 2.8399999141693116D0)) (list (list 15.0D0 2369.3740234375D0 8.368579437956214D-4 2.8499999046325684D0)) (list (list 15.0D0 2366.931396484375D0 9.892700472846628D-4 2.859999895095825D0)) (list (list 15.0D0 2359.2890625D0 0.0010746424086391926D0 2.869999885559082D0)) (list (list 15.0D0 2354.052490234375D0 0.0011203957255929709D0 2.879999876022339D0)) (list (list 15.0D0 2351.52294921875D0 0.0011681951582431794D0 2.8899998664855957D0)) (list (list 15.0D0 2350.38818359375D0 0.0012808017199859024D0 2.8999998569488526D0)) (list (list 15.0D0 2349.029296875D0 0.0016077547334134579D0 2.9099998474121094D0)) (list (list 15.0D0 2346.340576171875D0 0.0019453165587037802D0 2.919999837875366D0)) (list (list 15.0D0 2345.857421875D0 0.001973754493519664D0 2.929999828338623D0)) (list (list 15.0D0 2348.7607421875D0 0.001730009214952588D0 2.93999981880188D0)) (list (list 15.0D0 2355.0478515625D0 0.0013828427763655782D0 2.950000047683716D0)) (list (list 15.0D0 2362.37939453125D0 0.0013233936624601484D0 2.9600000381469727D0)) (list (list 15.0D0 2363.6787109375D0 0.0011966797756031156D0 2.9700000286102295D0)) (list (list 15.0D0 2362.89990234375D0 0.0010072302538901568D0 2.9800000190734864D0)) (list (list 15.0D0 2361.990234375D0 8.418799261562526D-4 2.990000009536743D0)) (list (list 15.0D0 2362.7998046875D0 7.828412926755846D-4 3.0D0)) (list (list 15.0D0 2368.34619140625D0 8.410041918978095D-4 3.009999990463257D0)) (list (list 15.0D0 2369.365234375D0 0.0010934188030660153D0 3.0199999809265137D0)) (list (list 15.0D0 2367.341064453125D0 0.0014450433664023877D0 3.0299999713897705D0)) (list (list 15.0D0 2362.46728515625D0 0.001881100470200181D0 3.0399999618530274D0)) (list (list 15.0D0 2356.28662109375D0 0.0023080683313310147D0 3.049999952316284D0)) (list (list 15.0D0 2356.18603515625D0 0.0022644000127911568D0 3.059999942779541D0)) (list (list 15.0D0 2360.50244140625D0 0.0016730736242607236D0 3.069999933242798D0)) (list (list 15.0D0 2366.966796875D0 0.001157597522251308D0 3.0799999237060547D0)) (list (list 15.0D0 2372.6376953125D0 8.31560930237174D-4 3.0899999141693116D0)) (list (list 15.0D0 2375.055908203125D0 6.903773173689842D-4 3.0999999046325684D0)) (list (list 15.0D0 2373.779052734375D0 6.460127769969404D-4 3.109999895095825D0)) (list (list 15.0D0 2359.96337890625D0 7.947000558488071D-4 3.119999885559082D0)) (list (list 15.0D0 2355.534912109375D0 9.867773624137044D-4 3.129999876022339D0)) (list (list 15.0D0 2354.785888671875D0 0.0012041253503412009D0 3.1399998664855957D0)) (list (list 15.0D0 2350.56201171875D0 0.0014359942870214582D0 3.1499998569488526D0)) (list (list 15.0D0 2347.95458984375D0 0.001622878247871995D0 3.1599998474121094D0)) (list (list 15.0D0 2350.521728515625D0 0.0014953732024878264D0 3.169999837875366D0)) (list (list 15.0D0 2352.10400390625D0 0.0012419066624715925D0 3.179999828338623D0)) (list (list 15.0D0 2351.684814453125D0 9.860373102128506D-4 3.18999981880188D0)) (list (list 15.0D0 2349.93798828125D0 8.349871495738626D-4 3.1999998092651367D0)) (list (list 15.0D0 2350.459228515625D0 8.810825529508293D-4 3.2100000381469727D0)) (list (list 15.0D0 2354.47021484375D0 0.001060974202118814D0 3.2200000286102295D0)) (list (list 15.0D0 2354.833984375D0 0.0012031069491058588D0 3.2300000190734864D0)) (list (list 15.0D0 2353.07470703125D0 0.0012227805564180017D0 3.240000009536743D0)) (list (list 15.0D0 2351.654296875D0 0.0011133661027997733D0 3.25D0)) (list (list 15.0D0 2351.3544921875D0 0.0010772532550618053D0 3.259999990463257D0)) (list (list 15.0D0 2352.044677734375D0 0.0011675131972879172D0 3.2699999809265137D0)) (list (list 15.0D0 2351.86279296875D0 0.0013890822883695364D0 3.2799999713897705D0)) (list (list 15.0D0 2351.083740234375D0 0.0016209527384489775D0 3.2899999618530274D0)) (list (list 15.0D0 2350.218017578125D0 0.0017278019804507494D0 3.299999952316284D0)) (list (list 15.0D0 2349.39990234375D0 0.0015784070128574968D0 3.309999942779541D0)) (list (list 15.0D0 2347.066162109375D0 0.0011985859600827098D0 3.319999933242798D0)) (list (list 15.0D0 2347.02490234375D0 8.440540404990315D-4 3.3299999237060547D0)) (list (list 15.0D0 2349.3837890625D0 7.441169582307339D-4 3.3399999141693116D0)) (list (list 15.0D0 2353.313720703125D0 0.001034196699038148D0 3.3499999046325684D0)) (list (list 15.0D0 2357.022216796875D0 0.0016087231924757362D0 3.359999895095825D0)) (list (list 15.0D0 2356.8759765625D0 0.0018207629909738899D0 3.369999885559082D0)) (list (list 15.0D0 2358.933349609375D0 0.0017738150199875236D0 3.379999876022339D0)) (list (list 15.0D0 2362.09716796875D0 0.0015799204120412469D0 3.3899998664855957D0)) (list (list 15.0D0 2364.590087890625D0 0.0013503156369552017D0 3.3999998569488526D0)) (list (list 15.0D0 2365.71630859375D0 0.001169297262094915D0 3.4099998474121094D0)) (list (list 15.0D0 2364.8994140625D0 0.0010364992776885629D0 3.419999837875366D0)) (list (list 15.0D0 2362.9287109375D0 9.653856977820396D-4 3.429999828338623D0)) (list (list 15.0D0 2359.49755859375D0 9.807562455534935D-4 3.43999981880188D0)) (list (list 15.0D0 2355.004150390625D0 0.0010762476595118642D0 3.4499998092651367D0)) (list (list 15.0D0 2352.3701171875D0 0.0011561698047444225D0 3.4600000381469727D0)) (list (list 15.0D0 2349.5087890625D0 0.0012024847092106939D0 3.4700000286102295D0)) (list (list 15.0D0 2353.156982421875D0 0.0010911696590483189D0 3.4800000190734864D0)) (list (list 15.0D0 2360.20703125D0 8.995753596536815D-4 3.490000009536743D0)) (list (list 15.0D0 2366.217529296875D0 7.302339654415846D-4 3.5D0)) (list (list 15.0D0 2366.719482421875D0 6.788251339457929D-4 3.509999990463257D0)) (list (list 15.0D0 2347.775390625D0 0.0014543402940034867D0 3.5199999809265137D0)) (list (list 15.0D0 2342.9736328125D0 0.0016772261587902904D0 3.5299999713897705D0)) (list (list 15.0D0 2346.461669921875D0 0.0015727486461400986D0 3.5399999618530274D0)) (list (list 15.0D0 2349.94970703125D0 0.0014682711334899068D0 3.549999952316284D0)) (list (list 15.0D0 2353.437744140625D0 0.001363793620839715D0 3.559999942779541D0)) (list (list 15.0D0 2356.73779296875D0 0.001403394970111549D0 3.569999933242798D0)) (list (list 15.0D0 2358.121337890625D0 0.0013131466694176197D0 3.5799999237060547D0)) (list (list 15.0D0 2357.6767578125D0 0.001151462085545063D0 3.5899999141693116D0)) (list (list 15.0D0 2355.989990234375D0 0.0010237038368359209D0 3.5999999046325684D0)) (list (list 15.0D0 2354.201904296875D0 0.0010555405169725419D0 3.609999895095825D0)) (list (list 15.0D0 2358.41162109375D0 0.0010454074945300818D0 3.619999885559082D0)) (list (list 15.0D0 2366.2314453125D0 0.0012821380514651537D0 3.629999876022339D0)) (list (list 15.0D0 2372.356201171875D0 0.0015683954115957022D0 3.6399998664855957D0)) (list (list 15.0D0 2373.757080078125D0 0.0016826535575091839D0 3.6499998569488526D0)) (list (list 15.0D0 2374.325439453125D0 0.0014783756341785193D0 3.6599998474121094D0)) (list (list 15.0D0 2366.57470703125D0 0.0012384996516630054D0 3.669999837875366D0)) (list (list 15.0D0 2361.81201171875D0 0.001219606609083712D0 3.679999828338623D0)) (list (list 15.0D0 2358.97509765625D0 0.001345900003798306D0 3.68999981880188D0)) (list (list 15.0D0 2356.852294921875D0 0.001459807506762445D0 3.6999998092651367D0)) (list (list 15.0D0 2357.921142578125D0 0.0012832547072321177D0 3.7099997997283936D0)) (list (list 15.0D0 2354.625244140625D0 9.371087071485817D-4 3.7200000286102295D0)) (list (list 15.0D0 2351.36328125D0 8.143215673044324D-4 3.7300000190734864D0)) (list (list 15.0D0 2349.328369140625D0 9.730789461173117D-4 3.740000009536743D0)) (list (list 15.0D0 2348.434814453125D0 0.0013813129626214505D0 3.75D0)) (list (list 15.0D0 2346.234375D0 0.0019026134395971895D0 3.759999990463257D0)) (list (list 15.0D0 2347.456298828125D0 0.0017271599499508739D0 3.7699999809265137D0)) (list (list 15.0D0 2348.972900390625D0 0.0014916376676410437D0 3.7799999713897705D0)) (list (list 15.0D0 2350.48974609375D0 0.0012561155017465353D0 3.7899999618530274D0)) (list (list 15.0D0 2355.04052734375D0 0.0010002768831327558D0 3.799999952316284D0)) (list (list 15.0D0 2374.163818359375D0 6.468620267696679D-4 3.809999942779541D0)) (list (list 15.0D0 2360.423095703125D0 8.867031428962946D-4 3.819999933242798D0)) (list (list 15.0D0 2350.873779296875D0 0.0011224361369386316D0 3.8299999237060547D0)) (list (list 15.0D0 2346.783447265625D0 0.0013711395440623165D0 3.8399999141693116D0)) (list (list 15.0D0 2345.76220703125D0 0.0016828799853101373D0 3.8499999046325684D0)) (list (list 15.0D0 2345.79638671875D0 0.002042226493358612D0 3.859999895095825D0)) (list (list 15.0D0 2346.216064453125D0 0.002322807442396879D0 3.869999885559082D0)) (list (list 15.0D0 2348.319580078125D0 0.0023429172579199076D0 3.879999876022339D0)) (list (list 15.0D0 2353.8056640625D0 0.0021815202198922634D0 3.8899998664855957D0)) (list (list 15.0D0 2362.09033203125D0 0.0019713544752448798D0 3.8999998569488526D0)) (list (list 15.0D0 2367.177978515625D0 0.0019073165021836758D0 3.9099998474121094D0)) (list (list 15.0D0 2369.173828125D0 0.0015379885444417596D0 3.919999837875366D0)) (list (list 15.0D0 2371.742919921875D0 0.0010967191774398089D0 3.929999828338623D0)) (list (list 15.0D0 2376.71826171875D0 7.454173755832017D-4 3.93999981880188D0)) (list (list 15.0D0 2383.548583984375D0 5.859059165231884D-4 3.9499998092651367D0)) (list (list 15.0D0 2386.54345703125D0 6.161024211905897D-4 3.9599997997283936D0)) (list (list 15.0D0 2387.764404296875D0 6.296526989899576D-4 3.9700000286102295D0)) (list (list 15.0D0 2387.861328125D0 6.65078463498503D-4 3.9800000190734864D0)) (list (list 15.0D0 2387.332763671875D0 7.422229391522706D-4 3.990000009536743D0)) (list (list 15.0D0 2387.463134765625D0 8.485580328851938D-4 4.0D0)) (list (list 15.0D0 2391.520263671875D0 9.027431369759142D-4 4.009999752044678D0)) (list (list 15.0D0 2370.09130859375D0 0.0012120716273784638D0 4.019999980926514D0)) (list (list 15.0D0 2359.17822265625D0 0.00109376001637429D0 4.029999732971191D0)) (list (list 15.0D0 2362.8720703125D0 9.164145449176431D-4 4.039999961853027D0)) (list (list 15.0D0 2375.267822265625D0 9.824000298976899D-4 4.049999713897705D0)) (list (list 15.0D0 2374.8515625D0 0.0012656544568017126D0 4.059999942779541D0)) (list (list 15.0D0 2371.54931640625D0 0.001495279953815043D0 4.069999694824219D0)) (list (list 15.0D0 2370.91845703125D0 0.0015592516865581274D0 4.079999923706055D0)) (list (list 15.0D0 2371.115478515625D0 0.0015136374859139324D0 4.089999675750732D0)) (list (list 15.0D0 2369.8671875D0 0.0014580539427697659D0 4.099999904632568D0)) (list (list 15.0D0 2365.107177734375D0 0.0015579487662762404D0 4.110000133514404D0)) (list (list 15.0D0 2360.95458984375D0 0.0017686154460534454D0 4.119999885559082D0)) (list (list 15.0D0 2351.2001953125D0 0.001763886888511479D0 4.130000114440918D0)) (list (list 15.0D0 2345.075927734375D0 0.001562157878652215D0 4.139999866485596D0)) (list (list 15.0D0 2346.864990234375D0 0.0012326145078986884D0 4.150000095367432D0)) (list (list 15.0D0 2348.426513671875D0 8.809898281469941D-4 4.159999847412109D0)) (list (list 15.0D0 2352.124755859375D0 9.96585818938911D-4 4.170000076293945D0)) (list (list 15.0D0 2355.097412109375D0 0.0013260666746646166D0 4.179999828338623D0)) (list (list 15.0D0 2355.31982421875D0 0.0016556374030187726D0 4.190000057220459D0)) (list (list 15.0D0 2352.226318359375D0 0.0018617738969624043D0 4.199999809265137D0)) (list (list 15.0D0 2347.810546875D0 0.0019902552012354136D0 4.210000038146973D0)) (list (list 15.0D0 2343.92138671875D0 0.0022931674029678107D0 4.21999979019165D0)) (list (list 15.0D0 2341.183837890625D0 0.002637195400893688D0 4.230000019073486D0)) (list (list 15.0D0 2338.945556640625D0 0.002994663082063198D0 4.239999771118164D0)) (list (list 15.0D0 2337.144775390625D0 0.003228596178814769D0 4.25D0)) (list (list 15.0D0 2337.177734375D0 0.0029450447764247656D0 4.259999752044678D0)) (list (list 15.0D0 2345.21142578125D0 0.0019298825645819307D0 4.269999980926514D0)) (list (list 15.0D0 2353.7255859375D0 8.708004606887698D-4 4.279999732971191D0)) (list (list 15.0D0 2355.13671875D0 7.854862487874925D-4 4.289999961853027D0)) (list (list 15.0D0 2347.66943359375D0 0.0019173651235178113D0 4.299999713897705D0)) (list (list 15.0D0 2340.20166015625D0 0.003049297956749797D0 4.309999942779541D0)) (list (list 15.0D0 2352.533935546875D0 0.002415187656879425D0 4.319999694824219D0)) (list (list 15.0D0 2366.006103515625D0 0.0016794289695098997D0 4.329999923706055D0)) (list (list 15.0D0 2366.168701171875D0 0.0011793950106948615D0 4.339999675750732D0)) (list (list 15.0D0 2352.98046875D0 9.853080846369267D-4 4.349999904632568D0)) (list (list 15.0D0 2352.546142578125D0 8.483438286930323D-4 4.360000133514404D0)) (list (list 15.0D0 2362.4111328125D0 9.536739089526236D-4 4.369999885559082D0)) (list (list 15.0D0 2366.0419921875D0 0.0011532226344570518D0 4.380000114440918D0)) (list (list 15.0D0 2367.128173828125D0 0.001340927672572434D0 4.389999866485596D0)) (list (list 15.0D0 2368.968017578125D0 0.0014473381452262402D0 4.400000095367432D0)) (list (list 15.0D0 2371.898681640625D0 0.001457822392694652D0 4.409999847412109D0)) (list (list 15.0D0 2373.237548828125D0 0.0014382870867848397D0 4.420000076293945D0)) (list (list 15.0D0 2372.714111328125D0 0.001424693618901074D0 4.429999828338623D0)) (list (list 15.0D0 2371.310791015625D0 0.001429751981049776D0 4.440000057220459D0)) (list (list 15.0D0 2370.003662109375D0 0.0014298191526904703D0 4.449999809265137D0)) (list (list 15.0D0 2369.651611328125D0 0.0013358661672100425D0 4.460000038146973D0)) (list (list 15.0D0 2368.222900390625D0 0.0010954441968351603D0 4.46999979019165D0)) (list (list 15.0D0 2367.194091796875D0 8.729093824513257D-4 4.480000019073486D0)) (list (list 15.0D0 2366.787109375D0 7.407721132040024D-4 4.489999771118164D0)) (list (list 15.0D0 2366.562744140625D0 7.31589796487242D-4 4.5D0)) (list (list 15.0D0 2365.029296875D0 8.272082195617259D-4 4.509999752044678D0)) (list (list 15.0D0 2364.355224609375D0 9.386599413119257D-4 4.519999980926514D0)) (list (list 15.0D0 2363.990234375D0 0.0011471351608633995D0 4.529999732971191D0)) (list (list 15.0D0 2362.68359375D0 0.0014765547821298242D0 4.539999961853027D0)) (list (list 15.0D0 2361.423828125D0 0.001777825178578496D0 4.549999713897705D0)) (list (list 15.0D0 2365.18505859375D0 0.0016002504853531719D0 4.559999942779541D0)) (list (list 15.0D0 2368.94580078125D0 0.0014226841740310193D0 4.569999694824219D0)) (list (list 15.0D0 2369.318359375D0 0.001125579816289246D0 4.579999923706055D0)) (list (list 15.0D0 2373.69189453125D0 7.70827173255384D-4 4.589999675750732D0)) (list (list 15.0D0 2380.279541015625D0 5.305319209583104D-4 4.599999904632568D0)) (list (list 15.0D0 2371.01416015625D0 7.61499919462949D-4 4.610000133514404D0)) (list (list 15.0D0 2361.749267578125D0 9.92456916719675D-4 4.619999885559082D0)) (list (list 15.0D0 2352.48388671875D0 0.0012234249152243138D0 4.630000114440918D0)) (list (list 15.0D0 2353.507080078125D0 0.001143579138442874D0 4.639999866485596D0)) (list (list 15.0D0 2363.344482421875D0 7.414935389533639D-4 4.650000095367432D0)) (list (list 15.0D0 2361.024169921875D0 4.972873139195144D-4 4.659999847412109D0)) (list (list 15.0D0 2353.05126953125D0 5.438943626359105D-4 4.670000076293945D0)) (list (list 15.0D0 2349.115234375D0 5.698777385987341D-4 4.679999828338623D0)) (list (list 15.0D0 2344.280517578125D0 6.408791523426771D-4 4.690000057220459D0)) (list (list 15.0D0 2338.423095703125D0 7.363270269706845D-4 4.699999809265137D0)) (list (list 15.0D0 2340.035888671875D0 6.729547749273479D-4 4.710000038146973D0)) (list (list 15.0D0 2341.648681640625D0 6.095854914747179D-4 4.71999979019165D0)) (list (list 15.0D0 2341.63427734375D0 6.309238960966468D-4 4.730000019073486D0)) (list (list 15.0D0 2341.233154296875D0 7.609366439282894D-4 4.739999771118164D0)) (list (list 15.0D0 2341.33251953125D0 0.0010005430085584522D0 4.75D0)) (list (list 15.0D0 2342.148193359375D0 0.0013256219681352377D0 4.759999752044678D0)) (list (list 15.0D0 2364.068359375D0 0.0012825486483052373D0 4.769999980926514D0)) (list (list 15.0D0 2369.595703125D0 0.0013427619123831392D0 4.779999732971191D0)) (list (list 15.0D0 2369.069580078125D0 0.0014219023287296296D0 4.789999961853027D0)) (list (list 15.0D0 2369.266845703125D0 0.001447062473744154D0 4.799999713897705D0)) (list (list 15.0D0 2369.091552734375D0 0.0013892020797356964D0 4.809999942779541D0)) (list (list 15.0D0 2348.048095703125D0 0.002287443494424224D0 4.819999694824219D0)) (list (list 15.0D0 2341.72998046875D0 0.002394355833530426D0 4.829999923706055D0)) (list (list 15.0D0 2348.396728515625D0 0.0018209306290373207D0 4.839999675750732D0)) (list (list 15.0D0 2359.966064453125D0 0.0011247097281739116D0 4.849999904632568D0)) (list (list 15.0D0 2361.02978515625D0 0.0014305389486253262D0 4.859999656677246D0)) (list (list 15.0D0 2343.39306640625D0 0.002774025546386838D0 4.869999885559082D0)) (list (list 15.0D0 2340.2236328125D0 0.002808840712532401D0 4.880000114440918D0)) (list (list 15.0D0 2344.0751953125D0 0.0021470170468091965D0 4.889999866485596D0)) (list (list 15.0D0 2352.192626953125D0 0.0014093770878389478D0 4.900000095367432D0)) (list (list 15.0D0 2370.509765625D0 0.001105588162317872D0 4.909999847412109D0)) (list (list 15.0D0 2368.50537109375D0 0.0017241677269339562D0 4.920000076293945D0)) (list (list 15.0D0 2366.87841796875D0 0.002405526814982295D0 4.929999828338623D0)) (list (list 15.0D0 2366.436279296875D0 0.002831301186233759D0 4.940000057220459D0)) (list (list 15.0D0 2366.78857421875D0 0.002834700047969818D0 4.949999809265137D0)) (list (list 15.0D0 2366.728759765625D0 0.002413384383544326D0 4.960000038146973D0)) (list (list 15.0D0 2363.831298828125D0 0.001869764644652605D0 4.96999979019165D0)) (list (list 15.0D0 2345.359375D0 0.0030703500378876925D0 4.980000019073486D0)) (list (list 15.0D0 2339.875D0 0.003138083964586258D0 4.989999771118164D0)) (list (list 15.0D0 2351.899658203125D0 0.0016348836943507195D0 5.0D0)) (list (list 15.0D0 2352.920654296875D0 0.001503383624367416D0 5.009999752044678D0)) (list (list 15.0D0 2355.948974609375D0 0.0016166087007150054D0 5.019999980926514D0)) (list (list 15.0D0 2359.966064453125D0 0.0018273283494636417D0 5.029999732971191D0)) (list (list 15.0D0 2364.167724609375D0 0.002091405214741826D0 5.039999961853027D0)) (list (list 15.0D0 2367.373291015625D0 0.002368829445913434D0 5.049999713897705D0)) (list (list 15.0D0 2367.842041015625D0 0.0026214541867375374D0 5.059999942779541D0)) (list (list 15.0D0 2367.793212890625D0 0.0024226552341133356D0 5.069999694824219D0)) (list (list 15.0D0 2367.733642578125D0 0.002214441541582346D0 5.079999923706055D0)) (list (list 15.0D0 2367.674072265625D0 0.0020062378607690335D0 5.089999675750732D0)) (list (list 15.0D0 2368.18701171875D0 0.0017464354168623686D0 5.099999904632568D0)) (list (list 15.0D0 2370.602294921875D0 0.001315165776759386D0 5.109999656677246D0)) (list (list 15.0D0 2373.017822265625D0 8.83875647559762D-4 5.119999885559082D0)) (list (list 15.0D0 2352.2236328125D0 0.001486586406826973D0 5.130000114440918D0)) (list (list 15.0D0 2337.40234375D0 0.0018559439340606332D0 5.139999866485596D0)) (list (list 15.0D0 2337.67431640625D0 0.0016996832564473153D0 5.150000095367432D0)) (list (list 15.0D0 2336.71484375D0 0.0019651325419545174D0 5.159999847412109D0)) (list (list 15.0D0 2335.755615234375D0 0.002230594400316477D0 5.170000076293945D0)) (list (list 15.0D0 2336.3291015625D0 0.002217121422290802D0 5.179999828338623D0)) (list (list 15.0D0 2338.89404296875D0 0.0019649479072541D0 5.190000057220459D0)) (list (list 15.0D0 2342.536376953125D0 0.0016672802157700062D0 5.199999809265137D0)) (list (list 15.0D0 2344.72998046875D0 0.0016963949892669917D0 5.210000038146973D0)) (list (list 15.0D0 2346.67578125D0 0.0018635628512129188D0 5.21999979019165D0)) (list (list 15.0D0 2350.028076171875D0 0.0018585746875032783D0 5.230000019073486D0)) (list (list 15.0D0 2354.14501953125D0 0.0016912298742681742D0 5.239999771118164D0)) (list (list 15.0D0 2358.85009765625D0 0.0015016344841569663D0 5.25D0)) (list (list 15.0D0 2364.556884765625D0 0.001578018069267273D0 5.259999752044678D0)) (list (list 15.0D0 2363.65478515625D0 0.0014734823489561677D0 5.269999980926514D0)) (list (list 15.0D0 2374.952392578125D0 0.00139883894007653D0 5.279999732971191D0)) (list (list 15.0D0 2383.273193359375D0 0.0014214040711522103D0 5.289999961853027D0)) (list (list 15.0D0 2383.75830078125D0 0.001504356856457889D0 5.299999713897705D0)) (list (list 15.0D0 2383.538330078125D0 0.001495255739428103D0 5.309999942779541D0)) (list (list 15.0D0 2384.763427734375D0 0.0014048535376787186D0 5.319999694824219D0)) (list (list 15.0D0 2386.511474609375D0 0.0012732623144984246D0 5.329999923706055D0)) (list (list 15.0D0 2387.339111328125D0 0.0011152754304930568D0 5.339999675750732D0)) (list (list 15.0D0 2386.72021484375D0 9.619619231671095D-4 5.349999904632568D0)) (list (list 15.0D0 2385.124755859375D0 8.629113435745239D-4 5.359999656677246D0)) (list (list 15.0D0 2385.13671875D0 7.765478221699595D-4 5.369999885559082D0)) (list (list 15.0D0 2387.5263671875D0 6.966134533286095D-4 5.380000114440918D0)) (list (list 15.0D0 2389.257080078125D0 6.68198976200074D-4 5.389999866485596D0)) (list (list 15.0D0 2389.057861328125D0 7.202838896773756D-4 5.400000095367432D0)) (list (list 15.0D0 2387.556640625D0 8.649829542264342D-4 5.409999847412109D0)) (list (list 15.0D0 2385.09228515625D0 0.0010225414298474789D0 5.420000076293945D0)) (list (list 15.0D0 2383.046630859375D0 0.0010850515682250262D0 5.429999828338623D0)) (list (list 15.0D0 2381.14697265625D0 0.0010784979676827789D0 5.440000057220459D0)) (list (list 15.0D0 2378.891357421875D0 0.001027080463245511D0 5.449999809265137D0)) (list (list 15.0D0 2375.544921875D0 9.522814652882516D-4 5.460000038146973D0)) (list (list 15.0D0 2370.994384765625D0 8.854563347995281D-4 5.46999979019165D0)) (list (list 15.0D0 2369.305908203125D0 7.878350443206728D-4 5.480000019073486D0)) (list (list 15.0D0 2368.874755859375D0 7.065703393891454D-4 5.489999771118164D0)) (list (list 15.0D0 2368.70458984375D0 6.66618172544986D-4 5.5D0)) (list (list 15.0D0 2368.433837890625D0 6.702365935780108D-4 5.509999752044678D0)) (list (list 15.0D0 2345.0595703125D0 9.358000825159252D-4 5.519999980926514D0)) (list (list 15.0D0 2350.193603515625D0 8.540247799828649D-4 5.529999732971191D0)) (list (list 15.0D0 2366.23876953125D0 7.980628288350999D-4 5.539999961853027D0)) (list (list 15.0D0 2375.227294921875D0 8.723283535800874D-4 5.549999713897705D0)) (list (list 15.0D0 2358.984619140625D0 9.156535961665213D-4 5.559999942779541D0)) (list (list 15.0D0 2342.742431640625D0 9.589768014848232D-4 5.569999694824219D0)) (list (list 15.0D0 2338.7275390625D0 3.8542464608326555D-4 5.579999923706055D0)) (list (list 16.0D0 856.586669921875D0 0.003306685946881771D0 0.6800000071525574D0)) (list (list 16.0D0 856.6524658203125D0 0.003280075266957283D0 0.6899999976158142D0)) (list (list 16.0D0 855.0294189453125D0 0.0029564693104475737D0 0.699999988079071D0)) (list (list 16.0D0 854.0493774414063D0 0.0027730606961995364D0 0.7099999785423279D0)) (list (list 16.0D0 855.6000366210938D0 0.0027512963861227036D0 0.7199999690055847D0)) (list (list 16.0D0 860.4765625D0 0.0029367797542363406D0 0.7299999594688416D0)) (list (list 16.0D0 866.2135009765625D0 0.0030790739692747593D0 0.7400000095367432D0)) (list (list 16.0D0 868.5126953125D0 0.002745496341958642D0 0.75D0)) (list (list 16.0D0 876.4041137695313D0 0.0022103816736489535D0 0.7599999904632568D0)) (list (list 16.0D0 880.5599365234375D0 0.0022519982885569334D0 0.7699999809265137D0)) (list (list 16.0D0 881.8494873046875D0 0.0024725347757339478D0 0.7799999713897705D0)) (list (list 16.0D0 881.1952514648438D0 0.002648298628628254D0 0.7899999618530273D0)) (list (list 16.0D0 879.7019653320313D0 0.002653385978192091D0 0.7999999523162842D0)) (list (list 16.0D0 878.8323364257813D0 0.002284423680976033D0 0.8100000023841858D0)) (list (list 16.0D0 879.1478881835938D0 0.0017852077726274729D0 0.8199999928474426D0)) (list (list 16.0D0 880.2171020507813D0 0.0013711623614653945D0 0.8299999833106995D0)) (list (list 16.0D0 881.801025390625D0 0.0011104282457381487D0 0.8399999737739563D0)) (list (list 16.0D0 883.8287963867188D0 9.733512997627258D-4 0.8499999642372131D0)) (list (list 16.0D0 888.1535034179688D0 8.601074223406613D-4 0.85999995470047D0)) (list (list 16.0D0 887.346923828125D0 8.339212508872151D-4 0.8700000047683716D0)) (list (list 16.0D0 893.6105346679688D0 6.436685216613114D-4 0.8799999952316284D0)) (list (list 16.0D0 901.5783081054688D0 5.149064236320555D-4 0.8899999856948853D0)) (list (list 16.0D0 896.1074829101563D0 9.272206225432456D-4 0.8999999761581421D0)) (list (list 16.0D0 890.63671875D0 0.0013395347632467747D0 0.9099999666213989D0)) (list (list 16.0D0 889.6603393554688D0 0.0013743554009124637D0 0.9199999570846558D0)) (list (list 16.0D0 879.1533813476563D0 0.0018492507515475154D0 0.9300000071525574D0)) (list (list 16.0D0 865.5652465820313D0 0.002505307085812092D0 0.9399999976158142D0)) (list (list 16.0D0 866.3847045898438D0 0.002498873043805361D0 0.949999988079071D0)) (list (list 16.0D0 866.2160034179688D0 0.002545185387134552D0 0.9599999785423279D0)) (list (list 16.0D0 866.2492065429688D0 0.0026785237714648247D0 0.9699999690055847D0)) (list (list 16.0D0 866.28369140625D0 0.002787400735542178D0 0.9799999594688416D0)) (list (list 16.0D0 866.2039184570313D0 0.0027247127145528794D0 0.9899999499320984D0)) (list (list 16.0D0 866.4412841796875D0 0.0023469259031116963D0 1.0D0)) (list (list 16.0D0 876.9549560546875D0 0.0019901804625988007D0 1.0099999904632569D0)) (list (list 16.0D0 881.248291015625D0 0.0021576681174337864D0 1.0199999809265137D0)) (list (list 16.0D0 881.5404052734375D0 0.0023191922809928656D0 1.0299999713897705D0)) (list (list 16.0D0 878.4219970703125D0 0.002339147264137864D0 1.0399999618530274D0)) (list (list 16.0D0 872.122802734375D0 0.002311455551534891D0 1.0499999523162842D0)) (list (list 16.0D0 869.112548828125D0 0.0025170850567519665D0 1.059999942779541D0)) (list (list 16.0D0 867.1378784179688D0 0.002988572930917144D0 1.0699999332427979D0)) (list (list 16.0D0 865.95166015625D0 0.003477451391518116D0 1.0799999237060547D0)) (list (list 16.0D0 865.0831298828125D0 0.003805311629548669D0 1.090000033378601D0)) (list (list 16.0D0 864.0010375976563D0 0.0038346396759152413D0 1.100000023841858D0)) (list (list 16.0D0 864.0001831054688D0 0.003530356101691723D0 1.1100000143051148D0)) (list (list 16.0D0 866.3731689453125D0 0.0032195502426475287D0 1.1200000047683716D0)) (list (list 16.0D0 869.3566284179688D0 0.0031888727098703385D0 1.1299999952316285D0)) (list (list 16.0D0 871.4139404296875D0 0.0033377192448824644D0 1.1399999856948853D0)) (list (list 16.0D0 871.3008422851563D0 0.003340495517477393D0 1.149999976158142D0)) (list (list 16.0D0 871.3618774414063D0 0.002795160049572587D0 1.159999966621399D0)) (list (list 16.0D0 876.8681030273438D0 0.002272391924634576D0 1.1699999570846558D0)) (list (list 16.0D0 881.0707397460938D0 0.00199563754722476D0 1.1799999475479126D0)) (list (list 16.0D0 883.0408325195313D0 0.0018598546739667654D0 1.1899999380111695D0)) (list (list 16.0D0 884.758056640625D0 0.001591874985024333D0 1.1999999284744263D0)) (list (list 16.0D0 886.0438232421875D0 0.0011438309447839857D0 1.209999918937683D0)) (list (list 16.0D0 884.0308227539063D0 9.212990989908576D-4 1.2200000286102295D0)) (list (list 16.0D0 891.9623413085938D0 9.215926402248442D-4 1.2300000190734864D0)) (list (list 16.0D0 902.223876953125D0 0.0010339494328945876D0 1.2400000095367432D0)) (list (list 16.0D0 898.2855224609375D0 0.0010953395394608379D0 1.25D0)) (list (list 16.0D0 894.3472290039063D0 0.0011567296460270882D0 1.2599999904632569D0)) (list (list 16.0D0 890.4088745117188D0 0.0012181197525933385D0 1.2699999809265137D0)) (list (list 16.0D0 895.6700439453125D0 9.885268518701196D-4 1.2799999713897705D0)) (list (list 16.0D0 904.724853515625D0 6.733123445883393D-4 1.2899999618530274D0)) (list (list 16.0D0 905.8617553710938D0 6.5057777101174D-4 1.2999999523162842D0)) (list (list 16.0D0 905.8617553710938D0 1.0409635433461517D-4 1.309999942779541D0)) (list (list 17.0D0 2729.87890625D0 0.0010149140143767D0 0.7400000095367432D0)) (list (list 17.0D0 2730.964599609375D0 0.0012242668308317662D0 0.75D0)) (list (list 17.0D0 2730.44384765625D0 0.001332332962192595D0 0.7599999904632568D0)) (list (list 17.0D0 2729.349365234375D0 0.0014119931729510427D0 0.7699999809265137D0)) (list (list 17.0D0 2728.455322265625D0 0.0015173937426880002D0 0.7799999713897705D0)) (list (list 17.0D0 2727.872314453125D0 0.0016519289929419756D0 0.7899999618530273D0)) (list (list 17.0D0 2727.343505859375D0 0.0017829225398600102D0 0.7999999523162842D0)) (list (list 17.0D0 2728.25D0 0.0018198227044194937D0 0.8100000023841858D0)) (list (list 17.0D0 2729.980712890625D0 0.0017965651350095869D0 0.8199999928474426D0)) (list (list 17.0D0 2732.201904296875D0 0.001805752282962203D0 0.8299999833106995D0)) (list (list 17.0D0 2734.191650390625D0 0.001903796917758882D0 0.8399999737739563D0)) (list (list 17.0D0 2735.0029296875D0 0.002122825011610985D0 0.8499999642372131D0)) (list (list 17.0D0 2734.9169921875D0 0.0024670003913342953D0 0.85999995470047D0)) (list (list 17.0D0 2735.110595703125D0 0.0027949016075581313D0 0.8700000047683716D0)) (list (list 17.0D0 2735.755859375D0 0.0030032109934836626D0 0.8799999952316284D0)) (list (list 17.0D0 2736.8330078125D0 0.0030665199737995863D0 0.8899999856948853D0)) (list (list 17.0D0 2738.163330078125D0 0.00301900552585721D0 0.8999999761581421D0)) (list (list 17.0D0 2739.101318359375D0 0.00305117666721344D0 0.9099999666213989D0)) (list (list 17.0D0 2739.50390625D0 0.00320658297277987D0 0.9199999570846558D0)) (list (list 17.0D0 2739.445068359375D0 0.0034184271935373545D0 0.9300000071525574D0)) (list (list 17.0D0 2739.0888671875D0 0.0036388151347637177D0 0.9399999976158142D0)) (list (list 17.0D0 2738.6689453125D0 0.003829189343377948D0 0.949999988079071D0)) (list (list 17.0D0 2738.261474609375D0 0.003981316927820444D0 0.9599999785423279D0)) (list (list 17.0D0 2737.826171875D0 0.004104492720216513D0 0.9699999690055847D0)) (list (list 17.0D0 2737.53173828125D0 0.004192341584712267D0 0.9799999594688416D0)) (list (list 17.0D0 2737.457275390625D0 0.004244407173246145D0 0.9899999499320984D0)) (list (list 17.0D0 2737.604248046875D0 0.004264619201421738D0 1.0D0)) (list (list 17.0D0 2737.5927734375D0 0.0042439112439751625D0 1.0099999904632569D0)) (list (list 17.0D0 2737.3330078125D0 0.004161021672189236D0 1.0199999809265137D0)) (list (list 17.0D0 2737.0615234375D0 0.004020545165985823D0 1.0299999713897705D0)) (list (list 17.0D0 2736.8642578125D0 0.003828188171610236D0 1.0399999618530274D0)) (list (list 17.0D0 2736.70947265625D0 0.0035880659706890583D0 1.0499999523162842D0)) (list (list 17.0D0 2735.9189453125D0 0.003212474985048175D0 1.059999942779541D0)) (list (list 17.0D0 2733.2333984375D0 0.0027263695374131203D0 1.0699999332427979D0)) (list (list 17.0D0 2730.2783203125D0 0.002286535454913974D0 1.0799999237060547D0)) (list (list 17.0D0 2728.098876953125D0 0.001951262354850769D0 1.090000033378601D0)) (list (list 17.0D0 2727.406982421875D0 0.0017265790374949575D0 1.100000023841858D0)) (list (list 17.0D0 2728.12353515625D0 0.0016671125777065754D0 1.1100000143051148D0)) (list (list 17.0D0 2728.9951171875D0 0.0017390360590070486D0 1.1200000047683716D0)) (list (list 17.0D0 2729.63037109375D0 0.0018660614732652903D0 1.1299999952316285D0)) (list (list 17.0D0 2729.557861328125D0 0.00198168377391994D0 1.1399999856948853D0)) (list (list 17.0D0 2728.37353515625D0 0.002027477603405714D0 1.149999976158142D0)) (list (list 17.0D0 2727.349853515625D0 0.002050516428425908D0 1.159999966621399D0)) (list (list 17.0D0 2727.91162109375D0 0.0021553572732955218D0 1.1699999570846558D0)) (list (list 17.0D0 2729.474609375D0 0.0024205120280385018D0 1.1799999475479126D0)) (list (list 17.0D0 2731.286865234375D0 0.0028366693295538426D0 1.1899999380111695D0)) (list (list 17.0D0 2732.496826171875D0 0.003331381594762206D0 1.1999999284744263D0)) (list (list 17.0D0 2732.986083984375D0 0.003686286276206374D0 1.209999918937683D0)) (list (list 17.0D0 2733.21630859375D0 0.0038593614008277655D0 1.2200000286102295D0)) (list (list 17.0D0 2733.273193359375D0 0.003928603604435921D0 1.2300000190734864D0)) (list (list 17.0D0 2733.249755859375D0 0.003974671009927988D0 1.2400000095367432D0)) (list (list 17.0D0 2733.2578125D0 0.004083707462996244D0 1.25D0)) (list (list 17.0D0 2733.48486328125D0 0.004310880787670612D0 1.2599999904632569D0)) (list (list 17.0D0 2733.942626953125D0 0.00451939832419157D0 1.2699999809265137D0)) (list (list 17.0D0 2734.65625D0 0.00461810315027833D0 1.2799999713897705D0)) (list (list 17.0D0 2735.47412109375D0 0.004583960864692926D0 1.2899999618530274D0)) (list (list 17.0D0 2736.127685546875D0 0.004437900148332119D0 1.2999999523162842D0)) (list (list 17.0D0 2736.110595703125D0 0.004271288868039846D0 1.309999942779541D0)) (list (list 17.0D0 2735.604736328125D0 0.004136659670621157D0 1.3199999332427979D0)) (list (list 17.0D0 2734.801025390625D0 0.003978545777499676D0 1.3299999237060547D0)) (list (list 17.0D0 2733.725341796875D0 0.003757717553526163D0 1.3399999141693116D0)) (list (list 17.0D0 2732.331787109375D0 0.0034549771808087826D0 1.350000023841858D0)) (list (list 17.0D0 2730.427978515625D0 0.0032014662865549326D0 1.3600000143051148D0)) (list (list 17.0D0 2728.87548828125D0 0.003099339082837105D0 1.3700000047683716D0)) (list (list 17.0D0 2727.72900390625D0 0.0030440783593803645D0 1.3799999952316285D0)) (list (list 17.0D0 2726.70361328125D0 0.002972290851175785D0 1.3899999856948853D0)) (list (list 17.0D0 2725.420654296875D0 0.002844857284799218D0 1.399999976158142D0)) (list (list 17.0D0 2724.602783203125D0 0.002728508086875081D0 1.409999966621399D0)) (list (list 17.0D0 2724.626220703125D0 0.0026750594843178988D0 1.4199999570846558D0)) (list (list 17.0D0 2724.77490234375D0 0.0026469037402421236D0 1.4299999475479126D0)) (list (list 17.0D0 2724.42919921875D0 0.0026082578115165234D0 1.4399999380111695D0)) (list (list 17.0D0 2723.110595703125D0 0.0025293135549873114D0 1.4499999284744263D0)) (list (list 17.0D0 2721.65869140625D0 0.002461688593029976D0 1.459999918937683D0)) (list (list 17.0D0 2721.1015625D0 0.002390608424320817D0 1.46999990940094D0)) (list (list 17.0D0 2721.222900390625D0 0.0022932025603950024D0 1.4800000190734864D0)) (list (list 17.0D0 2721.61767578125D0 0.002160001778975129D0 1.4900000095367432D0)) (list (list 17.0D0 2721.77490234375D0 0.0019900661427527666D0 1.5D0)) (list (list 17.0D0 2721.355224609375D0 0.001796323573216796D0 1.5099999904632569D0)) (list (list 17.0D0 2720.46337890625D0 0.0016139342915266753D0 1.5199999809265137D0)) (list (list 17.0D0 2719.845947265625D0 0.0014811282744631172D0 1.5299999713897705D0)) (list (list 17.0D0 2719.9912109375D0 0.0014427764108404518D0 1.5399999618530274D0)) (list (list 17.0D0 2721.2001953125D0 0.001547434600070119D0 1.5499999523162842D0)) (list (list 17.0D0 2723.086669921875D0 0.0018881603609770537D0 1.559999942779541D0)) (list (list 17.0D0 2724.640625D0 0.002327683148905635D0 1.5699999332427979D0)) (list (list 17.0D0 2725.92578125D0 0.002792746527120471D0 1.5799999237060547D0)) (list (list 17.0D0 2726.958251953125D0 0.0032700938172638417D0 1.5899999141693116D0)) (list (list 17.0D0 2727.738525390625D0 0.0037625059485435486D0 1.5999999046325684D0)) (list (list 17.0D0 2728.120849609375D0 0.004197153728455305D0 1.6100000143051148D0)) (list (list 17.0D0 2728.8046875D0 0.004453002009540796D0 1.6200000047683716D0)) (list (list 17.0D0 2729.741455078125D0 0.004538786597549915D0 1.6299999952316285D0)) (list (list 17.0D0 2730.5859375D0 0.0044805025681853295D0 1.6399999856948853D0)) (list (list 17.0D0 2730.89404296875D0 0.004325446207076311D0 1.649999976158142D0)) (list (list 17.0D0 2730.5673828125D0 0.004165435675531626D0 1.659999966621399D0)) (list (list 17.0D0 2730.326171875D0 0.004077135119587183D0 1.6699999570846558D0)) (list (list 17.0D0 2730.173583984375D0 0.004031847696751356D0 1.6799999475479126D0)) (list (list 17.0D0 2729.98095703125D0 0.003994034603238106D0 1.6899999380111695D0)) (list (list 17.0D0 2729.570068359375D0 0.003917487803846598D0 1.6999999284744263D0)) (list (list 17.0D0 2728.810791015625D0 0.0036988831125199795D0 1.709999918937683D0)) (list (list 17.0D0 2727.4609375D0 0.003304604906588793D0 1.71999990940094D0)) (list (list 17.0D0 2725.5302734375D0 0.002852792851626873D0 1.7300000190734864D0)) (list (list 17.0D0 2723.259765625D0 0.0024286331608891487D0 1.7400000095367432D0)) (list (list 17.0D0 2720.9560546875D0 0.002095918171107769D0 1.75D0)) (list (list 17.0D0 2718.408447265625D0 0.0018074611434713006D0 1.7599999904632569D0)) (list (list 17.0D0 2716.49169921875D0 0.0014627283671870828D0 1.7699999809265137D0)) (list (list 17.0D0 2716.517333984375D0 0.0010859558824449778D0 1.7799999713897705D0)) (list (list 17.0D0 2719.19189453125D0 7.549499860033393D-4 1.7899999618530274D0)) (list (list 17.0D0 2724.5224609375D0 5.672949482686818D-4 1.7999999523162842D0)) (list (list 17.0D0 2729.30078125D0 6.151077104732394D-4 1.809999942779541D0)) (list (list 17.0D0 2729.558349609375D0 6.336232181638479D-4 1.8199999332427979D0)) (list (list 17.0D0 2727.453369140625D0 6.438617710955441D-4 1.8299999237060547D0)) (list (list 17.0D0 2724.309326171875D0 6.524041527882218D-4 1.8399999141693116D0)) (list (list 17.0D0 2720.83642578125D0 6.669408758170903D-4 1.8499999046325684D0)) (list (list 17.0D0 2713.7724609375D0 7.46941426768899D-4 1.8600000143051148D0)) (list (list 17.0D0 2710.70703125D0 7.884105434641242D-4 1.8700000047683716D0)) (list (list 17.0D0 2710.372802734375D0 7.271131034940481D-4 1.8799999952316285D0)) (list (list 17.0D0 2713.201904296875D0 5.811635055579245D-4 1.8899999856948853D0)) (list (list 17.0D0 2717.933837890625D0 4.049631825182587D-4 1.899999976158142D0)) (list (list 17.0D0 2705.299560546875D0 2.6866604457609356D-4 1.909999966621399D0)) (list (list 17.0D0 2700.5927734375D0 3.3321609953418374D-4 1.9199999570846558D0)) (list (list 17.0D0 2697.013427734375D0 4.736944392789155D-4 1.9299999475479126D0)) (list (list 17.0D0 2698.169921875D0 6.200398784130812D-4 1.9399999380111695D0)) (list (list 17.0D0 2708.4384765625D0 7.346418569795787D-4 1.9499999284744263D0)) (list (list 17.0D0 2711.015380859375D0 9.250299772247672D-4 1.959999918937683D0)) (list (list 17.0D0 2711.76904296875D0 0.001175410347059369D0 1.96999990940094D0)) (list (list 17.0D0 2711.609619140625D0 0.0014227573992684484D0 1.9799998998641968D0)) (list (list 17.0D0 2711.217529296875D0 0.001614741631783545D0 1.9900000095367432D0)) (list (list 17.0D0 2711.171630859375D0 0.001703859306871891D0 2.0D0)) (list (list 17.0D0 2711.48974609375D0 0.0016415915451943875D0 2.009999990463257D0)) (list (list 17.0D0 2712.6435546875D0 0.001511436770670116D0 2.0199999809265137D0)) (list (list 17.0D0 2714.6845703125D0 0.0014383501838892699D0 2.0299999713897705D0)) (list (list 17.0D0 2716.91748046875D0 0.0014811583096161485D0 2.0399999618530274D0)) (list (list 17.0D0 2718.353515625D0 0.0016561617376282812D0 2.049999952316284D0)) (list (list 17.0D0 2717.850341796875D0 0.0018523144535720349D0 2.059999942779541D0)) (list (list 17.0D0 2716.997314453125D0 0.001999635249376297D0 2.069999933242798D0)) (list (list 17.0D0 2716.599365234375D0 0.0020703114569187165D0 2.0799999237060547D0)) (list (list 17.0D0 2716.71240234375D0 0.002059475053101778D0 2.0899999141693116D0)) (list (list 17.0D0 2717.086669921875D0 0.001975701656192541D0 2.0999999046325684D0)) (list (list 17.0D0 2717.123291015625D0 0.001837285002693534D0 2.109999895095825D0)) (list (list 17.0D0 2716.8505859375D0 0.0016890739789232612D0 2.119999885559082D0)) (list (list 17.0D0 2716.38525390625D0 0.0015426308382302523D0 2.129999876022339D0)) (list (list 17.0D0 2715.596435546875D0 0.001401153509505093D0 2.1399998664855957D0)) (list (list 17.0D0 2714.32470703125D0 0.0012695061741396785D0 2.1499998569488526D0)) (list (list 17.0D0 2712.617919921875D0 0.0011842361418530345D0 2.1599998474121094D0)) (list (list 17.0D0 2710.764892578125D0 0.0011395051842555404D0 2.169999837875366D0)) (list (list 17.0D0 2709.2548828125D0 0.0010675628436729312D0 2.180000066757202D0)) (list (list 17.0D0 2708.3095703125D0 9.519383893348277D-4 2.190000057220459D0)) (list (list 17.0D0 2707.991943359375D0 8.023068075999618D-4 2.200000047683716D0)) (list (list 17.0D0 2708.014404296875D0 6.917231366969645D-4 2.2100000381469727D0)) (list (list 17.0D0 2707.67431640625D0 6.248299614526331D-4 2.2200000286102295D0)) (list (list 17.0D0 2704.984375D0 5.72538876440376D-4 2.2300000190734864D0)) (list (list 17.0D0 2701.31884765625D0 5.456823855638504D-4 2.240000009536743D0)) (list (list 17.0D0 2699.09326171875D0 5.54271275177598D-4 2.25D0)) (list (list 17.0D0 2700.727294921875D0 5.363401141948998D-4 2.259999990463257D0)) (list (list 17.0D0 2706.0986328125D0 5.78742939978838D-4 2.2699999809265137D0)) (list (list 17.0D0 2709.976806640625D0 6.552101112902165D-4 2.2799999713897705D0)) (list (list 17.0D0 2712.348388671875D0 7.165719289332628D-4 2.2899999618530274D0)) (list (list 17.0D0 2715.39013671875D0 7.084526005201042D-4 2.299999952316284D0)) (list (list 17.0D0 2725.747314453125D0 5.845973500981927D-4 2.309999942779541D0)) (list (list 17.0D0 2713.748046875D0 4.588457231875509D-4 2.319999933242798D0)) (list (list 17.0D0 2707.68603515625D0 4.5007767039351166D-4 2.3299999237060547D0)) (list (list 17.0D0 2709.852783203125D0 5.658413283526897D-4 2.3399999141693116D0)) (list (list 17.0D0 2714.768310546875D0 7.622125558555126D-4 2.3499999046325684D0)) (list (list 17.0D0 2714.130126953125D0 9.051404194906354D-4 2.359999895095825D0)) (list (list 17.0D0 2713.1435546875D0 9.39193123485893D-4 2.369999885559082D0)) (list (list 17.0D0 2711.58203125D0 9.039886645041406D-4 2.379999876022339D0)) (list (list 17.0D0 2709.753173828125D0 8.195550180971623D-4 2.3899998664855957D0)) (list (list 17.0D0 2708.171630859375D0 7.049476262181997D-4 2.3999998569488526D0)) (list (list 17.0D0 2707.6494140625D0 5.813881871290505D-4 2.4099998474121094D0)) (list (list 17.0D0 2706.61328125D0 5.090409540571272D-4 2.419999837875366D0)) (list (list 17.0D0 2705.004638671875D0 4.933011368848383D-4 2.429999828338623D0)) (list (list 17.0D0 2703.30078125D0 5.191300879232585D-4 2.440000057220459D0)) (list (list 17.0D0 2702.133544921875D0 5.632951506413519D-4 2.450000047683716D0)) (list (list 17.0D0 2702.16748046875D0 6.019255379214883D-4 2.4600000381469727D0)) (list (list 17.0D0 2703.330810546875D0 6.326744332909584D-4 2.4700000286102295D0)) (list (list 17.0D0 2705.454833984375D0 6.485602352768183D-4 2.4800000190734864D0)) (list (list 17.0D0 2707.81103515625D0 6.402822909876704D-4 2.490000009536743D0)) (list (list 17.0D0 2709.456787109375D0 6.02001033257693D-4 2.5D0)) (list (list 17.0D0 2709.14013671875D0 5.426813731901348D-4 2.509999990463257D0)) (list (list 17.0D0 2707.37060546875D0 5.141095607541502D-4 2.5199999809265137D0)) (list (list 17.0D0 2701.043212890625D0 5.219326703809202D-4 2.5299999713897705D0)) (list (list 17.0D0 2694.264404296875D0 5.466065485961735D-4 2.5399999618530274D0)) (list (list 17.0D0 2691.45263671875D0 5.586814368143678D-4 2.549999952316284D0)) (list (list 17.0D0 2688.86279296875D0 5.135479150339961D-4 2.559999942779541D0)) (list (list 17.0D0 2686.977294921875D0 4.3821954750455916D-4 2.569999933242798D0)) (list (list 17.0D0 2684.813720703125D0 3.6025940789841116D-4 2.5799999237060547D0)) (list (list 17.0D0 2682.605712890625D0 2.906968002207577D-4 2.5899999141693116D0)) (list (list 17.0D0 2680.71435546875D0 2.358885685680434D-4 2.5999999046325684D0)) (list (list 17.0D0 2678.66259765625D0 1.9953155424445868D-4 2.609999895095825D0)) (list (list 17.0D0 2679.4033203125D0 1.8379434186499566D-4 2.619999885559082D0)) (list (list 17.0D0 2665.34765625D0 1.932840677909553D-4 2.629999876022339D0)) (list (list 17.0D0 2652.612548828125D0 2.053643693216145D-4 2.6399998664855957D0)) (list (list 17.0D0 2658.309326171875D0 2.033593918895349D-4 2.6499998569488526D0)) (list (list 17.0D0 2665.502685546875D0 2.3575889645144344D-4 2.6599998474121094D0)) (list (list 17.0D0 2667.41796875D0 2.4353851040359587D-4 2.669999837875366D0)) (list (list 17.0D0 2664.90087890625D0 2.272130805067718D-4 2.679999828338623D0)) (list (list 17.0D0 2667.0322265625D0 1.9543217786122114D-4 2.690000057220459D0)) (list (list 17.0D0 2679.903076171875D0 1.6969787247944623D-4 2.700000047683716D0)) (list (list 17.0D0 2686.55126953125D0 2.2348009224515408D-4 2.7100000381469727D0)) (list (list 17.0D0 2693.199462890625D0 2.772622974589467D-4 2.7200000286102295D0)) (list (list 17.0D0 2699.94189453125D0 3.9757907507009804D-4 2.7300000190734864D0)) (list (list 17.0D0 2706.7412109375D0 5.580582073889673D-4 2.740000009536743D0)) (list (list 17.0D0 2713.54052734375D0 7.18537368811667D-4 2.75D0)) (list (list 17.0D0 2720.33984375D0 8.790164720267057D-4 2.759999990463257D0)) (list (list 17.0D0 2721.187744140625D0 2.692203561309725D-4 2.7699999809265137D0)) (list (list 18.0D0 855.9080200195313D0 0.0020216687116771937D0 1.1799999475479126D0)) (list (list 18.0D0 857.5228271484375D0 0.0017913125921040774D0 1.1899999380111695D0)) (list (list 18.0D0 861.5143432617188D0 0.0017671327805146575D0 1.1999999284744263D0)) (list (list 18.0D0 862.4606323242188D0 0.0018790018511936069D0 1.209999918937683D0)) (list (list 18.0D0 862.6749267578125D0 0.002058636164292693D0 1.2200000286102295D0)) (list (list 18.0D0 863.4564819335938D0 0.0024828098248690367D0 1.2300000190734864D0)) (list (list 18.0D0 864.5664672851563D0 0.003123415168374777D0 1.2400000095367432D0)) (list (list 18.0D0 864.95458984375D0 0.0038114534690976143D0 1.25D0)) (list (list 18.0D0 863.4072265625D0 0.004008676391094923D0 1.2599999904632569D0)) (list (list 18.0D0 863.0640869140625D0 0.0037889466620981694D0 1.2699999809265137D0)) (list (list 18.0D0 864.1506958007813D0 0.003488302230834961D0 1.2799999713897705D0)) (list (list 18.0D0 866.2222290039063D0 0.0033565335907042027D0 1.2899999618530274D0)) (list (list 18.0D0 868.39990234375D0 0.003554361639544368D0 1.2999999523162842D0)) (list (list 18.0D0 869.421630859375D0 0.003496745368465781D0 1.309999942779541D0)) (list (list 18.0D0 875.650634765625D0 0.002872225595638156D0 1.3199999332427979D0)) (list (list 18.0D0 880.147216796875D0 0.0022028686944395304D0 1.3299999237060547D0)) (list (list 18.0D0 879.7486572265625D0 0.0016905548982322216D0 1.3399999141693116D0)) (list (list 18.0D0 874.9498901367188D0 0.001382284564897418D0 1.350000023841858D0)) (list (list 18.0D0 890.2026977539063D0 0.001226027961820364D0 1.3600000143051148D0)) (list (list 18.0D0 878.5374755859375D0 0.0028392323292791844D0 1.3700000047683716D0)) (list (list 18.0D0 871.539794921875D0 0.003971030004322529D0 1.3799999952316285D0)) (list (list 18.0D0 872.0963134765625D0 0.004203424323350191D0 1.3899999856948853D0)) (list (list 18.0D0 870.63134765625D0 0.0039727287366986275D0 1.399999976158142D0)) (list (list 18.0D0 869.6280517578125D0 0.003566926345229149D0 1.409999966621399D0)) (list (list 18.0D0 870.2425537109375D0 0.00325752142816782D0 1.4199999570846558D0)) (list (list 18.0D0 871.4426879882813D0 0.0030766213312745095D0 1.4299999475479126D0)) (list (list 18.0D0 872.580078125D0 0.0029381918720901013D0 1.4399999380111695D0)) (list (list 18.0D0 873.2632446289063D0 0.0026969958562403918D0 1.4499999284744263D0)) (list (list 18.0D0 874.5730590820313D0 0.002219381043687463D0 1.459999918937683D0)) (list (list 18.0D0 878.9620361328125D0 0.0016993622994050384D0 1.46999990940094D0)) (list (list 18.0D0 881.11572265625D0 0.0012996821897104383D0 1.4800000190734864D0)) (list (list 18.0D0 874.1358032226563D0 0.0013930114218965173D0 1.4900000095367432D0)) (list (list 18.0D0 854.3783569335938D0 0.0023026568815112114D0 1.5D0)) (list (list 18.0D0 862.6957397460938D0 0.0027976271230727434D0 1.5099999904632569D0)) (list (list 18.0D0 867.557861328125D0 0.003222437808290124D0 1.5199999809265137D0)) (list (list 18.0D0 870.8685302734375D0 0.003365494078025222D0 1.5299999713897705D0)) (list (list 18.0D0 873.0986938476563D0 0.003216051496565342D0 1.5399999618530274D0)) (list (list 18.0D0 874.1570434570313D0 0.002869224175810814D0 1.5499999523162842D0)) (list (list 18.0D0 873.3842163085938D0 0.0024721515364944935D0 1.559999942779541D0)) (list (list 18.0D0 872.1670532226563D0 0.0021772452164441347D0 1.5699999332427979D0)) (list (list 18.0D0 872.4130249023438D0 0.0019180780509486795D0 1.5799999237060547D0)) (list (list 18.0D0 874.2137451171875D0 0.0017076220829039813D0 1.5899999141693116D0)) (list (list 18.0D0 876.6017456054688D0 0.0015757734654471279D0 1.5999999046325684D0)) (list (list 18.0D0 876.1463623046875D0 0.001408943673595786D0 1.6100000143051148D0)) (list (list 18.0D0 871.2760009765625D0 0.0012206335086375475D0 1.6200000047683716D0)) (list (list 18.0D0 860.9480590820313D0 0.001275582704693079D0 1.6299999952316285D0)) (list (list 18.0D0 852.2710571289063D0 0.001493635238148272D0 1.6399999856948853D0)) (list (list 18.0D0 854.24658203125D0 0.0016977502964437008D0 1.649999976158142D0)) (list (list 18.0D0 859.0651245117188D0 0.0022729241754859686D0 1.659999966621399D0)) (list (list 18.0D0 862.5531616210938D0 0.003154315520077944D0 1.6699999570846558D0)) (list (list 18.0D0 863.243896484375D0 0.0038117787335067988D0 1.6799999475479126D0)) (list (list 18.0D0 861.9667358398438D0 0.004156116396188736D0 1.6899999380111695D0)) (list (list 18.0D0 860.5155029296875D0 0.0042922841385006905D0 1.6999999284744263D0)) (list (list 18.0D0 859.8367309570313D0 0.0044196113012731075D0 1.709999918937683D0)) (list (list 18.0D0 860.6974487304688D0 0.004435041453689337D0 1.71999990940094D0)) (list (list 18.0D0 863.1417236328125D0 0.004290095530450344D0 1.7300000190734864D0)) (list (list 18.0D0 866.8319702148438D0 0.003985273651778698D0 1.7400000095367432D0)) (list (list 18.0D0 870.9182739257813D0 0.0035289942752569914D0 1.75D0)) (list (list 18.0D0 871.9072265625D0 0.0027340841479599476D0 1.7599999904632569D0)) (list (list 18.0D0 867.6249389648438D0 0.002045596716925502D0 1.7699999809265137D0)) (list (list 18.0D0 862.6908569335938D0 0.0018805422587320209D0 1.7799999713897705D0)) (list (list 18.0D0 859.5477294921875D0 0.0021059291902929545D0 1.7899999618530274D0)) (list (list 18.0D0 859.5465698242188D0 0.0023711344692856074D0 1.7999999523162842D0)) (list (list 18.0D0 861.2216796875D0 0.002449075458571315D0 1.809999942779541D0)) (list (list 18.0D0 862.1430053710938D0 0.0023887455463409424D0 1.8199999332427979D0)) (list (list 18.0D0 862.7555541992188D0 0.0021746307611465454D0 1.8299999237060547D0)) (list (list 18.0D0 863.1552124023438D0 0.0018264466198161245D0 1.8399999141693116D0)) (list (list 18.0D0 863.2296752929688D0 0.0013957605697214604D0 1.8499999046325684D0)) (list (list 18.0D0 861.9512939453125D0 0.0010235295630991459D0 1.8600000143051148D0)) (list (list 18.0D0 858.0462646484375D0 9.199354099109769D-4 1.8700000047683716D0)) (list (list 18.0D0 853.9656372070313D0 0.0011080690892413259D0 1.8799999952316285D0)) (list (list 18.0D0 851.3406982421875D0 0.001413747319020331D0 1.8899999856948853D0)) (list (list 18.0D0 851.9541015625D0 0.0015952738467603922D0 1.899999976158142D0)) (list (list 18.0D0 861.4929809570313D0 0.00154313410166651D0 1.909999966621399D0)) (list (list 18.0D0 864.6314086914063D0 0.0017594932578504086D0 1.9199999570846558D0)) (list (list 18.0D0 864.6539306640625D0 0.002103561768308282D0 1.9299999475479126D0)) (list (list 18.0D0 862.7454223632813D0 0.0025141476653516293D0 1.9399999380111695D0)) (list (list 18.0D0 859.8394165039063D0 0.002906515495851636D0 1.9499999284744263D0)) (list (list 18.0D0 859.1605834960938D0 0.0028365193866193295D0 1.959999918937683D0)) (list (list 18.0D0 855.7500610351563D0 0.002298507606610656D0 1.96999990940094D0)) (list (list 18.0D0 852.0989990234375D0 0.0018823606660589576D0 1.9799998998641968D0)) (list (list 18.0D0 849.5214233398438D0 0.0017008985159918666D0 1.9900000095367432D0)) (list (list 18.0D0 848.9768676757813D0 0.0016848152736201883D0 2.0D0)) (list (list 18.0D0 851.7740478515625D0 0.0016283461591228843D0 2.009999990463257D0)) (list (list 18.0D0 854.3541259765625D0 0.0015626586973667145D0 2.0199999809265137D0)) (list (list 18.0D0 865.3561401367188D0 0.0018626401433721185D0 2.0299999713897705D0)) (list (list 18.0D0 875.4668579101563D0 0.0024317861534655094D0 2.0399999618530274D0)) (list (list 18.0D0 872.9939575195313D0 0.0029874711763113737D0 2.049999952316284D0)) (list (list 18.0D0 873.8244018554688D0 0.0031162973027676344D0 2.059999942779541D0)) (list (list 18.0D0 874.770751953125D0 0.0028304620645940304D0 2.069999933242798D0)) (list (list 18.0D0 874.628173828125D0 0.0023772979620844126D0 2.0799999237060547D0)) (list (list 18.0D0 872.5830078125D0 0.0019491369603201747D0 2.0899999141693116D0)) (list (list 18.0D0 867.9791259765625D0 0.001751438365317881D0 2.0999999046325684D0)) (list (list 18.0D0 859.7274780273438D0 0.0021757790818810463D0 2.109999895095825D0)) (list (list 18.0D0 859.110107421875D0 0.002314446261152625D0 2.119999885559082D0)) (list (list 18.0D0 861.151123046875D0 0.0022316945251077414D0 2.129999876022339D0)) (list (list 18.0D0 863.16357421875D0 0.002092562150210142D0 2.1399998664855957D0)) (list (list 18.0D0 863.22900390625D0 0.0020859837532043457D0 2.1499998569488526D0)) (list (list 18.0D0 860.7071533203125D0 0.0022917124442756176D0 2.1599998474121094D0)) (list (list 18.0D0 858.3107299804688D0 0.002582778688520193D0 2.169999837875366D0)) (list (list 18.0D0 858.0164184570313D0 0.0026609061751514674D0 2.180000066757202D0)) (list (list 18.0D0 859.5167846679688D0 0.0025507938116788864D0 2.190000057220459D0)) (list (list 18.0D0 861.6890869140625D0 0.002392824273556471D0 2.200000047683716D0)) (list (list 18.0D0 863.19189453125D0 0.002395171672105789D0 2.2100000381469727D0)) (list (list 18.0D0 864.2376098632813D0 0.0023749512620270253D0 2.2200000286102295D0)) (list (list 18.0D0 862.5341186523438D0 0.002108751330524683D0 2.2300000190734864D0)) (list (list 18.0D0 858.8304443359375D0 0.0017424169927835465D0 2.240000009536743D0)) (list (list 18.0D0 855.0974731445313D0 0.0015498473076149822D0 2.25D0)) (list (list 18.0D0 854.8038940429688D0 0.0019025392830371857D0 2.259999990463257D0)) (list (list 18.0D0 856.9795532226563D0 0.002791855949908495D0 2.2699999809265137D0)) (list (list 18.0D0 858.5083618164063D0 0.0038527115248143673D0 2.2799999713897705D0)) (list (list 18.0D0 858.8082275390625D0 0.004769590217620134D0 2.2899999618530274D0)) (list (list 18.0D0 858.1861572265625D0 0.0052707563154399395D0 2.299999952316284D0)) (list (list 18.0D0 857.8424072265625D0 0.005273866932839155D0 2.309999942779541D0)) (list (list 18.0D0 858.4925537109375D0 0.005043637938797474D0 2.319999933242798D0)) (list (list 18.0D0 860.1258544921875D0 0.0047007473185658455D0 2.3299999237060547D0)) (list (list 18.0D0 862.6360473632813D0 0.004210998769849539D0 2.3399999141693116D0)) (list (list 18.0D0 865.7719116210938D0 0.003511973889544606D0 2.3499999046325684D0)) (list (list 18.0D0 868.9033813476563D0 0.002563668182119727D0 2.359999895095825D0)) (list (list 18.0D0 872.4609985351563D0 0.0019651094917207957D0 2.369999885559082D0)) (list (list 18.0D0 875.36328125D0 0.0017614177195355297D0 2.379999876022339D0)) (list (list 18.0D0 877.2607421875D0 0.0017884827684611082D0 2.3899998664855957D0)) (list (list 18.0D0 878.4210205078125D0 0.0018023527227342129D0 2.3999998569488526D0)) (list (list 18.0D0 881.4031982421875D0 0.0015103832120075822D0 2.4099998474121094D0)) (list (list 18.0D0 884.29345703125D0 0.0012243898818269372D0 2.419999837875366D0)) (list (list 18.0D0 884.2163696289063D0 0.0010201522381976247D0 2.429999828338623D0)) (list (list 18.0D0 879.3290405273438D0 0.0013017174787819386D0 2.440000057220459D0)) (list (list 18.0D0 869.259033203125D0 0.0023532421328127385D0 2.450000047683716D0)) (list (list 18.0D0 859.1890258789063D0 0.0034047665540128947D0 2.4600000381469727D0)) (list (list 18.0D0 856.7598266601563D0 0.003830771893262863D0 2.4700000286102295D0)) (list (list 18.0D0 855.856689453125D0 0.00396555894985795D0 2.4800000190734864D0)) (list (list 18.0D0 855.7293090820313D0 0.0038417482282966376D0 2.490000009536743D0)) (list (list 18.0D0 856.787841796875D0 0.003451573196798563D0 2.5D0)) (list (list 18.0D0 859.0734252929688D0 0.0028701971750706435D0 2.509999990463257D0)) (list (list 18.0D0 858.0114135742188D0 0.0022705979645252228D0 2.5199999809265137D0)) (list (list 18.0D0 855.3838500976563D0 0.00205294624902308D0 2.5299999713897705D0)) (list (list 18.0D0 852.6356811523438D0 0.002309879520907998D0 2.5399999618530274D0)) (list (list 18.0D0 851.159912109375D0 0.002966713858768344D0 2.549999952316284D0)) (list (list 18.0D0 852.3538818359375D0 0.0035804000217467547D0 2.559999942779541D0)) (list (list 18.0D0 853.7377319335938D0 0.0038463324308395386D0 2.569999933242798D0)) (list (list 18.0D0 855.4004516601563D0 0.003685230854898691D0 2.5799999237060547D0)) (list (list 18.0D0 857.1050415039063D0 0.0031994676683098078D0 2.5899999141693116D0)) (list (list 18.0D0 858.5380249023438D0 0.0025818676222115755D0 2.5999999046325684D0)) (list (list 18.0D0 859.3952026367188D0 0.0021724069956690073D0 2.609999895095825D0)) (list (list 18.0D0 860.726806640625D0 0.00195773015730083D0 2.619999885559082D0)) (list (list 18.0D0 866.5341796875D0 0.0017514231149107218D0 2.629999876022339D0)) (list (list 18.0D0 873.2613525390625D0 0.001645795302465558D0 2.6399998664855957D0)) (list (list 18.0D0 876.2466430664063D0 0.0017192368395626545D0 2.6499998569488526D0)) (list (list 18.0D0 874.1957397460938D0 0.0016840497264638544D0 2.6599998474121094D0)) (list (list 18.0D0 867.4993286132813D0 0.002007857896387577D0 2.669999837875366D0)) (list (list 18.0D0 864.30322265625D0 0.0024875334929674864D0 2.679999828338623D0)) (list (list 18.0D0 864.3419189453125D0 0.0029417863115668297D0 2.690000057220459D0)) (list (list 18.0D0 865.7530517578125D0 0.0032072237227112055D0 2.700000047683716D0)) (list (list 18.0D0 868.7584228515625D0 0.0031842507887631655D0 2.7100000381469727D0)) (list (list 18.0D0 872.0469360351563D0 0.003099164692685008D0 2.7200000286102295D0)) (list (list 18.0D0 874.15478515625D0 0.00324766687117517D0 2.7300000190734864D0)) (list (list 18.0D0 874.5342407226563D0 0.003623396623879671D0 2.740000009536743D0)) (list (list 18.0D0 873.0125732421875D0 0.00412219250574708D0 2.75D0)) (list (list 18.0D0 869.7789306640625D0 0.004536466673016548D0 2.759999990463257D0)) (list (list 18.0D0 867.6240234375D0 0.004408395849168301D0 2.7699999809265137D0)) (list (list 18.0D0 866.877197265625D0 0.0037147062830626965D0 2.7799999713897705D0)) (list (list 18.0D0 868.6311645507813D0 0.0027373037301003933D0 2.7899999618530274D0)) (list (list 18.0D0 873.01953125D0 0.0018629812402650714D0 2.799999952316284D0)) (list (list 18.0D0 875.5784301757813D0 0.0016035906737670303D0 2.809999942779541D0)) (list (list 18.0D0 877.8323364257813D0 0.0018197896424680949D0 2.819999933242798D0)) (list (list 18.0D0 878.617919921875D0 0.0021350292954593897D0 2.8299999237060547D0)) (list (list 18.0D0 876.9497680664063D0 0.0023621295113116503D0 2.8399999141693116D0)) (list (list 18.0D0 872.7804565429688D0 0.0024185290094465018D0 2.8499999046325684D0)) (list (list 18.0D0 869.55224609375D0 0.0025130489375442267D0 2.859999895095825D0)) (list (list 18.0D0 868.7460327148438D0 0.002569749718531966D0 2.869999885559082D0)) (list (list 18.0D0 867.67236328125D0 0.002742909360677004D0 2.879999876022339D0)) (list (list 18.0D0 865.84326171875D0 0.003077554050832987D0 2.8899998664855957D0)) (list (list 18.0D0 863.3169555664063D0 0.003516293363645673D0 2.8999998569488526D0)) (list (list 18.0D0 860.5283813476563D0 0.003674779785797D0 2.9099998474121094D0)) (list (list 18.0D0 857.732177734375D0 0.0033611191902309656D0 2.919999837875366D0)) (list (list 18.0D0 856.0985717773438D0 0.002909997710958123D0 2.929999828338623D0)) (list (list 18.0D0 856.430419921875D0 0.002455452224239707D0 2.93999981880188D0)) (list (list 18.0D0 859.2230834960938D0 0.0021375524811446667D0 2.950000047683716D0)) (list (list 18.0D0 864.5050659179688D0 0.002290229080244899D0 2.9600000381469727D0)) (list (list 18.0D0 866.2897338867188D0 0.002486309502273798D0 2.9700000286102295D0)) (list (list 18.0D0 868.0576171875D0 0.0025753488298505545D0 2.9800000190734864D0)) (list (list 18.0D0 870.2573852539063D0 0.002537741092965007D0 2.990000009536743D0)) (list (list 18.0D0 872.4701538085938D0 0.0023826458491384983D0 3.0D0)) (list (list 18.0D0 872.9576416015625D0 0.0021074537653476D0 3.009999990463257D0)) (list (list 18.0D0 870.60986328125D0 0.0018865468446165324D0 3.0199999809265137D0)) (list (list 18.0D0 867.78759765625D0 0.0019240223336964846D0 3.0299999713897705D0)) (list (list 18.0D0 865.3733520507813D0 0.002148200524970889D0 3.0399999618530274D0)) (list (list 18.0D0 863.8277587890625D0 0.0024142174515873194D0 3.049999952316284D0)) (list (list 18.0D0 863.0538940429688D0 0.002512711565941572D0 3.059999942779541D0)) (list (list 18.0D0 862.5307006835938D0 0.002456593792885542D0 3.069999933242798D0)) (list (list 18.0D0 862.239990234375D0 0.0024177527520805598D0 3.0799999237060547D0)) (list (list 18.0D0 862.5216064453125D0 0.0024017449468374253D0 3.0899999141693116D0)) (list (list 18.0D0 864.2125244140625D0 0.002370651112869382D0 3.0999999046325684D0)) (list (list 18.0D0 870.1317138671875D0 0.0022263561841100455D0 3.109999895095825D0)) (list (list 18.0D0 875.5559692382813D0 0.002093206625431776D0 3.119999885559082D0)) (list (list 18.0D0 884.4329833984375D0 0.0019317197147756815D0 3.129999876022339D0)) (list (list 18.0D0 891.9585571289063D0 0.0017616769764572382D0 3.1399998664855957D0)) (list (list 18.0D0 894.010498046875D0 0.0015974149573594332D0 3.1499998569488526D0)) (list (list 18.0D0 894.0167846679688D0 0.001393220154568553D0 3.1599998474121094D0)) (list (list 18.0D0 891.2841186523438D0 0.001267656683921814D0 3.169999837875366D0)) (list (list 18.0D0 889.4044189453125D0 0.0012562412302941084D0 3.179999828338623D0)) (list (list 18.0D0 879.1005249023438D0 0.0022961858194321394D0 3.18999981880188D0)) (list (list 18.0D0 858.5677490234375D0 0.004599707666784525D0 3.1999998092651367D0)) (list (list 18.0D0 859.8346557617188D0 0.005365630611777306D0 3.2100000381469727D0)) (list (list 18.0D0 861.4246826171875D0 0.005700820591300726D0 3.2200000286102295D0)) (list (list 18.0D0 863.198486328125D0 0.0057548638433218D0 3.2300000190734864D0)) (list (list 18.0D0 864.7955932617188D0 0.005614093970507383D0 3.240000009536743D0)) (list (list 18.0D0 865.7403564453125D0 0.0053270673379302025D0 3.25D0)) (list (list 18.0D0 865.1680908203125D0 0.00479521369561553D0 3.259999990463257D0)) (list (list 18.0D0 863.8431396484375D0 0.0041395677253603935D0 3.2699999809265137D0)) (list (list 18.0D0 863.056884765625D0 0.0035391042474657297D0 3.2799999713897705D0)) (list (list 18.0D0 862.96240234375D0 0.0031322198919951916D0 3.2899999618530274D0)) (list (list 18.0D0 863.4834594726563D0 0.0030274551827460528D0 3.299999952316284D0)) (list (list 18.0D0 864.4779663085938D0 0.00330427591688931D0 3.309999942779541D0)) (list (list 18.0D0 865.8590087890625D0 0.0037751125637441874D0 3.319999933242798D0)) (list (list 18.0D0 866.2371826171875D0 0.004126733634620905D0 3.3299999237060547D0)) (list (list 18.0D0 865.1249389648438D0 0.00423339894041419D0 3.3399999141693116D0)) (list (list 18.0D0 862.3965454101563D0 0.004070536233484745D0 3.3499999046325684D0)) (list (list 18.0D0 858.3851928710938D0 0.0038139510434120894D0 3.359999895095825D0)) (list (list 18.0D0 857.7219848632813D0 0.0032664055470377207D0 3.369999885559082D0)) (list (list 18.0D0 859.1721801757813D0 0.002622975269332528D0 3.379999876022339D0)) (list (list 18.0D0 860.6630249023438D0 0.0020103377755731345D0 3.3899998664855957D0)) (list (list 18.0D0 860.2493286132813D0 0.001546595012769103D0 3.3999998569488526D0)) (list (list 18.0D0 856.6015625D0 0.001372527563944459D0 3.4099998474121094D0)) (list (list 18.0D0 857.5486450195313D0 0.0015984335914254189D0 3.419999837875366D0)) (list (list 18.0D0 861.4812622070313D0 0.002210644306614995D0 3.429999828338623D0)) (list (list 18.0D0 864.8025512695313D0 0.0029361280612647534D0 3.43999981880188D0)) (list (list 18.0D0 865.3319702148438D0 0.0034710674080997706D0 3.4499998092651367D0)) (list (list 18.0D0 866.0191040039063D0 0.0035134642384946347D0 3.4600000381469727D0)) (list (list 18.0D0 867.3070678710938D0 0.003321870928630233D0 3.4700000286102295D0)) (list (list 18.0D0 868.85791015625D0 0.0031962862703949213D0 3.4800000190734864D0)) (list (list 18.0D0 870.1433715820313D0 0.0031649749726057053D0 3.490000009536743D0)) (list (list 18.0D0 870.5104370117188D0 0.0031958050094544888D0 3.5D0)) (list (list 18.0D0 868.8541870117188D0 0.0031915875151753426D0 3.509999990463257D0)) (list (list 18.0D0 866.1845703125D0 0.003270265180617571D0 3.5199999809265137D0)) (list (list 18.0D0 863.3802490234375D0 0.0035217516124248505D0 3.5299999713897705D0)) (list (list 18.0D0 861.5978393554688D0 0.003818641183897853D0 3.5399999618530274D0)) (list (list 18.0D0 861.688720703125D0 0.0040004439651966095D0 3.549999952316284D0)) (list (list 18.0D0 863.76220703125D0 0.003877508221194148D0 3.559999942779541D0)) (list (list 18.0D0 866.0046997070313D0 0.003450823947787285D0 3.569999933242798D0)) (list (list 18.0D0 864.6239624023438D0 0.002765174023807049D0 3.5799999237060547D0)) (list (list 18.0D0 861.314453125D0 0.0022333275992423296D0 3.5899999141693116D0)) (list (list 18.0D0 858.3643188476563D0 0.002157567534595728D0 3.5999999046325684D0)) (list (list 18.0D0 857.7771606445313D0 0.002443250734359026D0 3.609999895095825D0)) (list (list 18.0D0 860.3380126953125D0 0.002575271064415574D0 3.619999885559082D0)) (list (list 18.0D0 863.3997192382813D0 0.002406410640105605D0 3.629999876022339D0)) (list (list 18.0D0 866.60693359375D0 0.002018736442551017D0 3.6399998664855957D0)) (list (list 18.0D0 869.9447021484375D0 0.0015979550080373884D0 3.6499998569488526D0)) (list (list 18.0D0 873.6388549804688D0 0.0015373049536719919D0 3.6599998474121094D0)) (list (list 18.0D0 879.896728515625D0 0.001963710878044367D0 3.669999837875366D0)) (list (list 18.0D0 881.7495727539063D0 0.002248988952487707D0 3.679999828338623D0)) (list (list 18.0D0 881.2837524414063D0 0.0023172376677393914D0 3.68999981880188D0)) (list (list 18.0D0 880.9666137695313D0 0.0022251287009567023D0 3.6999998092651367D0)) (list (list 18.0D0 881.37548828125D0 0.0021977974101901055D0 3.7099997997283936D0)) (list (list 18.0D0 880.7860107421875D0 0.0023031258024275303D0 3.7200000286102295D0)) (list (list 18.0D0 875.5150146484375D0 0.0024649486877024174D0 3.7300000190734864D0)) (list (list 18.0D0 869.0877075195313D0 0.002766466001048684D0 3.740000009536743D0)) (list (list 18.0D0 864.4971923828125D0 0.00311258970759809D0 3.75D0)) (list (list 18.0D0 861.3287353515625D0 0.0028824289329349995D0 3.759999990463257D0)) (list (list 18.0D0 858.4439086914063D0 0.002327475929632783D0 3.7699999809265137D0)) (list (list 18.0D0 857.102294921875D0 0.0018060082802549005D0 3.7799999713897705D0)) (list (list 18.0D0 858.6521606445313D0 0.0014045728603377939D0 3.7899999618530274D0)) (list (list 18.0D0 862.6864013671875D0 0.001182552776299417D0 3.799999952316284D0)) (list (list 18.0D0 864.5125122070313D0 0.0012301979586482048D0 3.809999942779541D0)) (list (list 18.0D0 862.7540893554688D0 0.0015708556165918708D0 3.819999933242798D0)) (list (list 18.0D0 862.2915649414063D0 0.0023401505313813687D0 3.8299999237060547D0)) (list (list 18.0D0 863.979248046875D0 0.0034065216314047575D0 3.8399999141693116D0)) (list (list 18.0D0 867.2310791015625D0 0.0045356787741184235D0 3.8499999046325684D0)) (list (list 18.0D0 869.0375366210938D0 0.0053123412653803826D0 3.859999895095825D0)) (list (list 18.0D0 870.3292236328125D0 0.0053370120003819466D0 3.869999885559082D0)) (list (list 18.0D0 871.0786743164063D0 0.004949336405843496D0 3.879999876022339D0)) (list (list 18.0D0 871.0567626953125D0 0.004351309034973383D0 3.8899998664855957D0)) (list (list 18.0D0 870.1781005859375D0 0.00373152201063931D0 3.8999998569488526D0)) (list (list 18.0D0 868.6384887695313D0 0.0032714297994971276D0 3.9099998474121094D0)) (list (list 18.0D0 868.2711181640625D0 0.002998501993715763D0 3.919999837875366D0)) (list (list 18.0D0 868.3262939453125D0 0.002875485923141241D0 3.929999828338623D0)) (list (list 18.0D0 867.6630249023438D0 0.0029391807038336993D0 3.93999981880188D0)) (list (list 18.0D0 865.85595703125D0 0.003235996700823307D0 3.9499998092651367D0)) (list (list 18.0D0 864.1576538085938D0 0.003852790454402566D0 3.9599997997283936D0)) (list (list 18.0D0 864.0718994140625D0 0.00433339225128293D0 3.9700000286102295D0)) (list (list 18.0D0 863.7271728515625D0 0.004328117240220308D0 3.9800000190734864D0)) (list (list 18.0D0 862.1984252929688D0 0.003859021235257387D0 3.990000009536743D0)) (list (list 18.0D0 859.819580078125D0 0.003085310338065028D0 4.0D0)) (list (list 18.0D0 859.5950927734375D0 0.0023695717100054026D0 4.009999752044678D0)) (list (list 18.0D0 863.5353393554688D0 0.002057286212220788D0 4.019999980926514D0)) (list (list 18.0D0 869.0598754882813D0 0.002260673325508833D0 4.029999732971191D0)) (list (list 18.0D0 872.8905029296875D0 0.002529979683458805D0 4.039999961853027D0)) (list (list 18.0D0 873.4970092773438D0 0.0025503786746412516D0 4.049999713897705D0))) (list (list (list 18.0D0 873.094482421875D0 0.0023968343157321215D0 4.059999942779541D0)) (list (list 18.0D0 872.2860107421875D0 0.0023308219388127327D0 4.069999694824219D0)) (list (list 18.0D0 871.5764770507813D0 0.0023423717357218266D0 4.079999923706055D0)) (list (list 18.0D0 870.9078369140625D0 0.0023044839035719633D0 4.089999675750732D0)) (list (list 18.0D0 869.3723754882813D0 0.0020898545626550913D0 4.099999904632568D0)) (list (list 18.0D0 864.1423950195313D0 0.0015687561826780439D0 4.110000133514404D0)) (list (list 18.0D0 857.0957641601563D0 0.0014751380076631904D0 4.119999885559082D0)) (list (list 18.0D0 854.1283569335938D0 0.0017650711815804244D0 4.130000114440918D0)) (list (list 18.0D0 854.23095703125D0 0.002354952273890376D0 4.139999866485596D0)) (list (list 18.0D0 855.9733276367188D0 0.003097670152783394D0 4.150000095367432D0)) (list (list 18.0D0 858.383056640625D0 0.0037320309784263373D0 4.159999847412109D0)) (list (list 18.0D0 858.9949340820313D0 0.0036469644401222468D0 4.170000076293945D0)) (list (list 18.0D0 858.7574462890625D0 0.0031574489548802376D0 4.179999828338623D0)) (list (list 18.0D0 858.5149536132813D0 0.002562121255323291D0 4.190000057220459D0)) (list (list 18.0D0 860.90380859375D0 0.002080509439110756D0 4.199999809265137D0)) (list (list 18.0D0 872.7191162109375D0 0.0017825962277129293D0 4.210000038146973D0)) (list (list 18.0D0 878.079833984375D0 0.0018911657389253378D0 4.21999979019165D0)) (list (list 18.0D0 881.9005737304688D0 0.0018460656283423305D0 4.230000019073486D0)) (list (list 18.0D0 884.0057373046875D0 0.0016903149662539363D0 4.239999771118164D0)) (list (list 18.0D0 883.9998779296875D0 0.0014947683084756136D0 4.25D0)) (list (list 18.0D0 881.5394897460938D0 0.0012951840180903674D0 4.259999752044678D0)) (list (list 18.0D0 865.2803955078125D0 0.001607127021998167D0 4.269999980926514D0)) (list (list 18.0D0 856.6651000976563D0 0.0021985110361129046D0 4.279999732971191D0)) (list (list 18.0D0 853.2930297851563D0 0.002698073862120509D0 4.289999961853027D0)) (list (list 18.0D0 851.3153686523438D0 0.0028143017552793026D0 4.299999713897705D0)) (list (list 18.0D0 847.3245239257813D0 0.002388240536674857D0 4.309999942779541D0)) (list (list 18.0D0 843.9082641601563D0 0.0019967504777014256D0 4.319999694824219D0)) (list (list 18.0D0 842.4078979492188D0 0.0019060216145589948D0 4.329999923706055D0)) (list (list 18.0D0 843.3728637695313D0 0.0020726006478071213D0 4.339999675750732D0)) (list (list 18.0D0 846.6947631835938D0 0.0024253367446362973D0 4.349999904632568D0)) (list (list 18.0D0 851.3248901367188D0 0.0028960653580725193D0 4.360000133514404D0)) (list (list 18.0D0 853.771484375D0 0.003191455267369747D0 4.369999885559082D0)) (list (list 18.0D0 855.9735107421875D0 0.003296164097264409D0 4.380000114440918D0)) (list (list 18.0D0 859.0589599609375D0 0.0033822031691670418D0 4.389999866485596D0)) (list (list 18.0D0 862.9857177734375D0 0.003586516482755542D0 4.400000095367432D0)) (list (list 18.0D0 865.6721801757813D0 0.003972240723669529D0 4.409999847412109D0)) (list (list 18.0D0 866.2468872070313D0 0.003992072306573391D0 4.420000076293945D0)) (list (list 18.0D0 866.622314453125D0 0.003643664065748453D0 4.429999828338623D0)) (list (list 18.0D0 868.297607421875D0 0.003028599312528968D0 4.440000057220459D0)) (list (list 18.0D0 871.0634765625D0 0.002339288592338562D0 4.449999809265137D0)) (list (list 18.0D0 871.7091064453125D0 0.0019215844804421068D0 4.460000038146973D0)) (list (list 18.0D0 867.8032836914063D0 0.0019641814287751913D0 4.46999979019165D0)) (list (list 18.0D0 859.9724731445313D0 0.0027851921040564776D0 4.480000019073486D0)) (list (list 18.0D0 855.1871948242188D0 0.0036111706867814064D0 4.489999771118164D0)) (list (list 18.0D0 855.9646606445313D0 0.003928062971681356D0 4.5D0)) (list (list 18.0D0 856.7809448242188D0 0.0037362424191087485D0 4.509999752044678D0)) (list (list 18.0D0 859.2821044921875D0 0.0030441938433796168D0 4.519999980926514D0)) (list (list 18.0D0 863.6502685546875D0 0.0023904640693217516D0 4.529999732971191D0)) (list (list 18.0D0 866.9397583007813D0 0.0019825210329145193D0 4.539999961853027D0)) (list (list 18.0D0 867.8710327148438D0 0.0019514834275469184D0 4.549999713897705D0)) (list (list 18.0D0 868.1193237304688D0 0.0023602559231221676D0 4.559999942779541D0)) (list (list 18.0D0 868.0484619140625D0 0.0029838248156011105D0 4.569999694824219D0)) (list (list 18.0D0 866.9404296875D0 0.003439679043367505D0 4.579999923706055D0)) (list (list 18.0D0 865.1693115234375D0 0.0036945135798305273D0 4.589999675750732D0)) (list (list 18.0D0 863.436279296875D0 0.0037287145387381316D0 4.599999904632568D0)) (list (list 18.0D0 862.9263305664063D0 0.0034988883417099715D0 4.610000133514404D0)) (list (list 18.0D0 865.2236938476563D0 0.00301724742166698D0 4.619999885559082D0)) (list (list 18.0D0 867.274169921875D0 0.002645421540364623D0 4.630000114440918D0)) (list (list 18.0D0 868.6826171875D0 0.0023701901081949473D0 4.639999866485596D0)) (list (list 18.0D0 870.0714111328125D0 0.002164414618164301D0 4.650000095367432D0)) (list (list 18.0D0 873.5452880859375D0 0.0020111463963985443D0 4.659999847412109D0)) (list (list 18.0D0 876.4109497070313D0 0.002149580279365182D0 4.670000076293945D0)) (list (list 18.0D0 877.4706420898438D0 0.0023326254449784756D0 4.679999828338623D0)) (list (list 18.0D0 876.47705078125D0 0.0024699177592992783D0 4.690000057220459D0)) (list (list 18.0D0 874.0404052734375D0 0.0025273102801293135D0 4.699999809265137D0)) (list (list 18.0D0 871.9924926757813D0 0.002543129026889801D0 4.710000038146973D0)) (list (list 18.0D0 870.0621948242188D0 0.002475524554029107D0 4.71999979019165D0)) (list (list 18.0D0 867.0225219726563D0 0.002422662917524576D0 4.730000019073486D0)) (list (list 18.0D0 863.6190185546875D0 0.002353542484343052D0 4.739999771118164D0)) (list (list 18.0D0 860.0140380859375D0 0.002242586575448513D0 4.75D0)) (list (list 18.0D0 855.334228515625D0 0.002077478216961026D0 4.759999752044678D0)) (list (list 18.0D0 852.3677978515625D0 0.00201548938639462D0 4.769999980926514D0)) (list (list 18.0D0 851.3935546875D0 0.00209012720733881D0 4.779999732971191D0)) (list (list 18.0D0 851.8858642578125D0 0.00234755827113986D0 4.789999961853027D0)) (list (list 18.0D0 853.0774536132813D0 0.0027859925758093596D0 4.799999713897705D0)) (list (list 18.0D0 853.9024047851563D0 0.003341255011036992D0 4.809999942779541D0)) (list (list 18.0D0 854.4539184570313D0 0.0037905455101281405D0 4.819999694824219D0)) (list (list 18.0D0 855.4042358398438D0 0.004075048957020044D0 4.829999923706055D0)) (list (list 18.0D0 856.6196899414063D0 0.004053070209920406D0 4.839999675750732D0)) (list (list 18.0D0 856.1224365234375D0 0.0036601207684725523D0 4.849999904632568D0)) (list (list 18.0D0 849.1281127929688D0 0.002927385503426194D0 4.859999656677246D0)) (list (list 18.0D0 847.3714599609375D0 0.002806834178045392D0 4.869999885559082D0)) (list (list 18.0D0 849.3499755859375D0 0.0028939596377313137D0 4.880000114440918D0)) (list (list 18.0D0 853.3021850585938D0 0.003269096137955785D0 4.889999866485596D0)) (list (list 18.0D0 856.8211669921875D0 0.0037091821432113648D0 4.900000095367432D0)) (list (list 18.0D0 856.507080078125D0 0.00353402947075665D0 4.909999847412109D0)) (list (list 18.0D0 852.6409912109375D0 0.0028503788635134697D0 4.920000076293945D0)) (list (list 18.0D0 849.8782958984375D0 0.002311802702024579D0 4.929999828338623D0)) (list (list 18.0D0 850.0654907226563D0 0.0019127650884911418D0 4.940000057220459D0)) (list (list 18.0D0 853.7732543945313D0 0.0017178207635879517D0 4.949999809265137D0)) (list (list 18.0D0 860.0950927734375D0 0.0019263426074758172D0 4.960000038146973D0)) (list (list 18.0D0 861.398193359375D0 0.0018419102998450399D0 4.96999979019165D0)) (list (list 18.0D0 863.4180297851563D0 0.0016093527665361762D0 4.980000019073486D0)) (list (list 18.0D0 864.5943603515625D0 0.0013478515902534128D0 4.989999771118164D0)) (list (list 18.0D0 864.4068603515625D0 0.001158935367129743D0 5.0D0)) (list (list 18.0D0 863.9312133789063D0 0.0011267156805843115D0 5.009999752044678D0)) (list (list 18.0D0 866.217529296875D0 0.001337137771770358D0 5.019999980926514D0)) (list (list 18.0D0 868.2418212890625D0 0.001561795244924724D0 5.029999732971191D0)) (list (list 18.0D0 867.7681884765625D0 0.00162495207041502D0 5.039999961853027D0)) (list (list 18.0D0 865.5072021484375D0 0.0014869250589981676D0 5.049999713897705D0)) (list (list 18.0D0 865.948974609375D0 0.0012761005200445652D0 5.059999942779541D0)) (list (list 18.0D0 868.647216796875D0 0.0013659781543537975D0 5.069999694824219D0)) (list (list 18.0D0 873.8018798828125D0 0.0016814743867143989D0 5.079999923706055D0)) (list (list 18.0D0 877.6721801757813D0 0.0019580123480409384D0 5.089999675750732D0)) (list (list 18.0D0 878.3489990234375D0 0.002047513611614704D0 5.099999904632568D0)) (list (list 18.0D0 876.2192993164063D0 0.0019462427590042353D0 5.109999656677246D0)) (list (list 18.0D0 868.7400512695313D0 0.00314328377135098D0 5.119999885559082D0)) (list (list 18.0D0 861.1618041992188D0 0.004364347551018D0 5.130000114440918D0)) (list (list 18.0D0 857.9295654296875D0 0.005150194745510817D0 5.139999866485596D0)) (list (list 18.0D0 859.7298583984375D0 0.005135909654200077D0 5.150000095367432D0)) (list (list 18.0D0 862.7799072265625D0 0.0040244003757834435D0 5.159999847412109D0)) (list (list 18.0D0 873.51904296875D0 0.003465175861492753D0 5.170000076293945D0)) (list (list 18.0D0 877.1414184570313D0 0.003211986506357789D0 5.179999828338623D0)) (list (list 18.0D0 876.057861328125D0 0.003031659172847867D0 5.190000057220459D0)) (list (list 18.0D0 871.5714721679688D0 0.002882362110540271D0 5.199999809265137D0)) (list (list 18.0D0 863.2451782226563D0 0.0029519328381866217D0 5.210000038146973D0)) (list (list 18.0D0 862.5057373046875D0 0.0027069286443293095D0 5.21999979019165D0)) (list (list 18.0D0 863.2360229492188D0 0.0024773606564849615D0 5.230000019073486D0)) (list (list 18.0D0 863.300537109375D0 0.0024933272507041693D0 5.239999771118164D0)) (list (list 18.0D0 860.8856811523438D0 0.0028711995109915734D0 5.25D0)) (list (list 18.0D0 854.4154052734375D0 0.003605013247579336D0 5.259999752044678D0)) (list (list 18.0D0 852.367919921875D0 0.004061720799654722D0 5.269999980926514D0)) (list (list 18.0D0 851.3324584960938D0 0.003974780905991793D0 5.279999732971191D0)) (list (list 18.0D0 851.0073852539063D0 0.0034088275860995055D0 5.289999961853027D0)) (list (list 18.0D0 853.9193725585938D0 0.002600794890895486D0 5.299999713897705D0)) (list (list 18.0D0 865.8417358398438D0 0.001976786879822612D0 5.309999942779541D0)) (list (list 18.0D0 868.8106079101563D0 0.0020207581110298634D0 5.319999694824219D0)) (list (list 18.0D0 868.5736083984375D0 0.0020512861665338278D0 5.329999923706055D0)) (list (list 18.0D0 866.4924926757813D0 0.002138886833563447D0 5.339999675750732D0)) (list (list 18.0D0 863.7679443359375D0 0.002238296903669834D0 5.349999904632568D0)) (list (list 18.0D0 861.4674682617188D0 0.0021686581894755364D0 5.359999656677246D0)) (list (list 18.0D0 849.7017211914063D0 0.0020556023810058833D0 5.369999885559082D0)) (list (list 18.0D0 846.1419067382813D0 0.002106643281877041D0 5.380000114440918D0)) (list (list 18.0D0 847.8085327148438D0 0.0023023104295134545D0 5.389999866485596D0)) (list (list 18.0D0 852.4022827148438D0 0.002741278847679496D0 5.400000095367432D0)) (list (list 18.0D0 858.5239868164063D0 0.0036528294440358878D0 5.409999847412109D0)) (list (list 18.0D0 860.2162475585938D0 0.0039806971326470375D0 5.420000076293945D0)) (list (list 18.0D0 863.2796630859375D0 0.00382458558306098D0 5.429999828338623D0)) (list (list 18.0D0 866.1538696289063D0 0.0035265940241515637D0 5.440000057220459D0)) (list (list 18.0D0 867.5443725585938D0 0.0033223594073206187D0 5.449999809265137D0)) (list (list 18.0D0 866.4635009765625D0 0.003335795598104596D0 5.460000038146973D0)) (list (list 18.0D0 864.6573486328125D0 0.0039233434945344925D0 5.46999979019165D0)) (list (list 18.0D0 864.4503173828125D0 0.004454608540982008D0 5.480000019073486D0)) (list (list 18.0D0 865.1255493164063D0 0.004617240279912949D0 5.489999771118164D0)) (list (list 18.0D0 866.0170288085938D0 0.004244417417794466D0 5.5D0)) (list (list 18.0D0 866.52001953125D0 0.003316007787361741D0 5.509999752044678D0)) (list (list 18.0D0 868.4375D0 0.002277354709804058D0 5.519999980926514D0)) (list (list 18.0D0 870.5408325195313D0 0.0017347767716273666D0 5.529999732971191D0)) (list (list 18.0D0 872.4200439453125D0 0.0016472371062263847D0 5.539999961853027D0)) (list (list 18.0D0 873.0271606445313D0 0.0018350455211475492D0 5.549999713897705D0)) (list (list 18.0D0 870.697021484375D0 0.0019819997251033783D0 5.559999942779541D0)) (list (list 18.0D0 867.5591430664063D0 0.001911692670546472D0 5.569999694824219D0)) (list (list 18.0D0 864.8883666992188D0 0.001755611039698124D0 5.579999923706055D0)) (list (list 18.0D0 864.6572875976563D0 0.0015794854843989015D0 5.589999675750732D0)) (list (list 18.0D0 866.6580810546875D0 0.0015410012565553189D0 5.599999904632568D0)) (list (list 18.0D0 868.5729370117188D0 0.0018850899068638683D0 5.609999656677246D0)) (list (list 18.0D0 866.8800659179688D0 0.002613228978589177D0 5.619999885559082D0)) (list (list 18.0D0 863.21484375D0 0.0034566442482173443D0 5.62999963760376D0)) (list (list 18.0D0 860.2877807617188D0 0.004037754610180855D0 5.639999866485596D0)) (list (list 18.0D0 857.7359008789063D0 0.004071612376719713D0 5.650000095367432D0)) (list (list 18.0D0 852.3648681640625D0 0.0033706040121614933D0 5.659999847412109D0)) (list (list 18.0D0 847.408203125D0 0.0030870235059410334D0 5.670000076293945D0)) (list (list 18.0D0 845.802001953125D0 0.003046354278922081D0 5.679999828338623D0)) (list (list 18.0D0 846.3141479492188D0 0.0031819900032132864D0 5.690000057220459D0)) (list (list 18.0D0 847.9343872070313D0 0.003387128235772252D0 5.699999809265137D0)) (list (list 18.0D0 849.8372802734375D0 0.003514719195663929D0 5.710000038146973D0)) (list (list 18.0D0 852.6993408203125D0 0.0032886741682887078D0 5.71999979019165D0)) (list (list 18.0D0 855.630126953125D0 0.0028960404451936484D0 5.730000019073486D0)) (list (list 18.0D0 858.44091796875D0 0.0023143095895648003D0 5.739999771118164D0)) (list (list 18.0D0 861.1654663085938D0 0.0016505182720720768D0 5.75D0)) (list (list 18.0D0 863.9962768554688D0 0.001130523975007236D0 5.759999752044678D0)) (list (list 18.0D0 863.871337890625D0 0.0010520685464143753D0 5.769999980926514D0)) (list (list 18.0D0 865.4985961914063D0 0.0012941008899360896D0 5.779999732971191D0)) (list (list 18.0D0 868.7054443359375D0 0.0018792019691318274D0 5.789999961853027D0)) (list (list 18.0D0 871.4781494140625D0 0.002709147287532687D0 5.799999713897705D0)) (list (list 18.0D0 870.2761840820313D0 0.003575902432203293D0 5.809999942779541D0)) (list (list 18.0D0 868.5177612304688D0 0.004309469368308783D0 5.819999694824219D0)) (list (list 18.0D0 866.44873046875D0 0.004571107216179371D0 5.829999923706055D0)) (list (list 18.0D0 865.6015014648438D0 0.004176261834800243D0 5.839999675750732D0)) (list (list 18.0D0 866.4650268554688D0 0.0032480249647051096D0 5.849999904632568D0)) (list (list 18.0D0 868.6080322265625D0 0.0021860969718545676D0 5.859999656677246D0)) (list (list 18.0D0 869.632568359375D0 0.0017155326204374433D0 5.869999885559082D0)) (list (list 18.0D0 870.1879272460938D0 0.001589508494362235D0 5.87999963760376D0)) (list (list 18.0D0 869.755615234375D0 0.0015944564947858453D0 5.889999866485596D0)) (list (list 18.0D0 868.4178466796875D0 0.0016638576053082943D0 5.900000095367432D0)) (list (list 18.0D0 866.7841186523438D0 0.001849812688305974D0 5.909999847412109D0)) (list (list 18.0D0 866.3345336914063D0 0.0023939209058880806D0 5.920000076293945D0)) (list (list 18.0D0 867.5333251953125D0 0.003149003954604268D0 5.929999828338623D0)) (list (list 18.0D0 868.726806640625D0 0.003968832083046436D0 5.940000057220459D0)) (list (list 18.0D0 868.8771362304688D0 0.004617832135409117D0 5.949999809265137D0)) (list (list 18.0D0 867.3896484375D0 0.004787455778568983D0 5.960000038146973D0)) (list (list 18.0D0 862.4986572265625D0 0.00427565211430192D0 5.96999979019165D0)) (list (list 18.0D0 857.9138793945313D0 0.003581754397600889D0 5.980000019073486D0)) (list (list 18.0D0 852.9411010742188D0 0.002832787809893489D0 5.989999771118164D0)) (list (list 18.0D0 848.6895141601563D0 0.0021468617487698794D0 6.0D0)) (list (list 18.0D0 847.7434692382813D0 0.0016406927024945617D0 6.009999752044678D0)) (list (list 18.0D0 855.4080810546875D0 0.0015017696423456073D0 6.019999980926514D0)) (list (list 18.0D0 863.4524536132813D0 0.002170451683923602D0 6.029999732971191D0)) (list (list 18.0D0 866.5599365234375D0 0.0026666177436709404D0 6.039999961853027D0)) (list (list 18.0D0 865.6495361328125D0 0.002717883326113224D0 6.049999713897705D0)) (list (list 18.0D0 866.2510986328125D0 0.0025789765641093254D0 6.059999942779541D0)) (list (list 18.0D0 866.7808837890625D0 0.002525443211197853D0 6.069999694824219D0)) (list (list 18.0D0 866.0918579101563D0 0.002415996277704835D0 6.079999923706055D0)) (list (list 18.0D0 865.7295532226563D0 0.002152833854779601D0 6.089999675750732D0)) (list (list 18.0D0 866.5402221679688D0 0.0017661834135651589D0 6.099999904632568D0)) (list (list 18.0D0 868.8167114257813D0 0.0013873276766389609D0 6.109999656677246D0)) (list (list 18.0D0 871.065673828125D0 0.0012458855053409934D0 6.119999885559082D0)) (list (list 18.0D0 880.16357421875D0 0.001168163144029677D0 6.12999963760376D0)) (list (list 18.0D0 884.961669921875D0 0.001095607178285718D0 6.139999866485596D0)) (list (list 18.0D0 883.2876586914063D0 0.0010326268384233118D0 6.150000095367432D0)) (list (list 18.0D0 878.8458862304688D0 0.001054265652783215D0 6.159999847412109D0)) (list (list 18.0D0 858.638427734375D0 0.0020561597775667906D0 6.170000076293945D0)) (list (list 18.0D0 852.2208862304688D0 0.002641921164467931D0 6.179999828338623D0)) (list (list 18.0D0 850.9017333984375D0 0.003175589721649885D0 6.190000057220459D0)) (list (list 18.0D0 851.327880859375D0 0.003717864630743861D0 6.199999809265137D0)) (list (list 18.0D0 853.5684814453125D0 0.004119951277971268D0 6.210000038146973D0)) (list (list 18.0D0 858.513427734375D0 0.004071837291121483D0 6.21999979019165D0)) (list (list 18.0D0 865.7713623046875D0 0.0035989503376185894D0 6.230000019073486D0)) (list (list 18.0D0 870.6251831054688D0 0.0030401109252125025D0 6.239999771118164D0)) (list (list 18.0D0 871.6751708984375D0 0.0025731357745826245D0 6.25D0)) (list (list 18.0D0 869.7130737304688D0 0.0022906328085809946D0 6.259999752044678D0)) (list (list 18.0D0 863.5374755859375D0 0.002678290940821171D0 6.269999980926514D0)) (list (list 18.0D0 860.3228149414063D0 0.002974588656798005D0 6.279999732971191D0)) (list (list 18.0D0 858.3838500976563D0 0.002941013313829899D0 6.289999961853027D0)) (list (list 18.0D0 856.7760620117188D0 0.0025978744961321354D0 6.299999713897705D0)) (list (list 18.0D0 855.0084228515625D0 0.0021456871181726456D0 6.309999942779541D0)) (list (list 18.0D0 853.7091064453125D0 0.0017734316643327475D0 6.319999694824219D0)) (list (list 18.0D0 852.225341796875D0 0.0013881850754842163D0 6.329999923706055D0)) (list (list 18.0D0 848.4564208984375D0 0.0010813390836119652D0 6.339999675750732D0)) (list (list 18.0D0 843.6570434570313D0 9.458321728743613D-4 6.349999904632568D0)) (list (list 18.0D0 841.2312622070313D0 0.0010611684992909432D0 6.359999656677246D0)) (list (list 18.0D0 842.8668212890625D0 0.0012129306560382247D0 6.369999885559082D0)) (list (list 18.0D0 848.485595703125D0 0.001373609178699553D0 6.37999963760376D0)) (list (list 18.0D0 855.048583984375D0 0.0015644889790564776D0 6.389999866485596D0)) (list (list 18.0D0 861.8173828125D0 0.0017254482954740525D0 6.399999618530273D0)) (list (list 18.0D0 869.2135009765625D0 0.0017536409432068468D0 6.409999847412109D0)) (list (list 18.0D0 873.5698852539063D0 0.0017442165408283472D0 6.420000076293945D0)) (list (list 18.0D0 876.8418579101563D0 0.002061567036435008D0 6.429999828338623D0)) (list (list 18.0D0 877.9837646484375D0 0.002496846951544285D0 6.440000057220459D0)) (list (list 18.0D0 877.0420532226563D0 0.0029211787041276694D0 6.449999809265137D0)) (list (list 18.0D0 874.8607788085938D0 0.0032454864121973515D0 6.460000038146973D0)) (list (list 18.0D0 873.34521484375D0 0.0033772767055779696D0 6.46999979019165D0)) (list (list 18.0D0 872.0155639648438D0 0.0032080691307783127D0 6.480000019073486D0)) (list (list 18.0D0 871.1465454101563D0 0.0027529147919267416D0 6.489999771118164D0)) (list (list 18.0D0 870.5524291992188D0 0.002117398427799344D0 6.5D0)) (list (list 18.0D0 869.73779296875D0 0.0014853531029075385D0 6.509999752044678D0)) (list (list 18.0D0 867.818359375D0 0.0012480991426855326D0 6.519999980926514D0)) (list (list 18.0D0 866.1666259765625D0 0.0013761862646788359D0 6.529999732971191D0)) (list (list 18.0D0 865.3253173828125D0 0.0016075177118182183D0 6.539999961853027D0)) (list (list 18.0D0 863.5745239257813D0 0.0017628538189455867D0 6.549999713897705D0)) (list (list 18.0D0 858.2145385742188D0 0.0017367434920743108D0 6.559999942779541D0)) (list (list 18.0D0 852.8607177734375D0 0.002053455915302038D0 6.569999694824219D0)) (list (list 18.0D0 851.2981567382813D0 0.002379549201577902D0 6.579999923706055D0)) (list (list 18.0D0 851.4818725585938D0 0.002483935561031103D0 6.589999675750732D0)) (list (list 18.0D0 855.5797119140625D0 0.0023461722303181887D0 6.599999904632568D0)) (list (list 18.0D0 866.8052368164063D0 0.0020835574250668288D0 6.609999656677246D0)) (list (list 18.0D0 868.1333618164063D0 0.002024770947173238D0 6.619999885559082D0)) (list (list 18.0D0 867.4578857421875D0 0.0022385979536920786D0 6.62999963760376D0)) (list (list 18.0D0 865.6153564453125D0 0.00265651848167181D0 6.639999866485596D0)) (list (list 18.0D0 862.3479614257813D0 0.0030495552346110344D0 6.649999618530273D0)) (list (list 18.0D0 857.0552368164063D0 0.003117517801001668D0 6.659999847412109D0)) (list (list 18.0D0 852.0429077148438D0 0.0029930605087429285D0 6.670000076293945D0)) (list (list 18.0D0 848.7003173828125D0 0.0027398536913096905D0 6.679999828338623D0)) (list (list 18.0D0 846.7582397460938D0 0.002507711760699749D0 6.690000057220459D0)) (list (list 18.0D0 846.8005981445313D0 0.0023323846980929375D0 6.699999809265137D0)) (list (list 18.0D0 850.3676147460938D0 0.002228611381724477D0 6.710000038146973D0)) (list (list 18.0D0 868.0169677734375D0 0.002801674883812666D0 6.71999979019165D0)) (list (list 18.0D0 869.7179565429688D0 0.002868754556402564D0 6.730000019073486D0)) (list (list 18.0D0 867.6773681640625D0 0.002448620740324259D0 6.739999771118164D0)) (list (list 18.0D0 865.4432373046875D0 0.0017937241354957223D0 6.75D0)) (list (list 18.0D0 862.6153564453125D0 0.0012950040400028229D0 6.759999752044678D0)) (list (list 18.0D0 860.89453125D0 0.0012449974892660976D0 6.769999980926514D0)) (list (list 18.0D0 856.0995483398438D0 0.0012170005356892944D0 6.779999732971191D0)) (list (list 18.0D0 849.707763671875D0 0.0011537575628608466D0 6.789999961853027D0)) (list (list 18.0D0 843.7605590820313D0 0.0011100765550509096D0 6.799999713897705D0)) (list (list 18.0D0 840.5800170898438D0 0.0011862991377711296D0 6.809999942779541D0)) (list (list 18.0D0 841.1854858398438D0 0.0013268383918330074D0 6.819999694824219D0)) (list (list 18.0D0 860.7692260742188D0 0.0021148929372429848D0 6.829999923706055D0)) (list (list 18.0D0 870.3541870117188D0 0.002666946267709136D0 6.839999675750732D0)) (list (list 18.0D0 869.3734130859375D0 0.002736511407420039D0 6.849999904632568D0)) (list (list 18.0D0 870.2723999023438D0 0.0024035079404711724D0 6.859999656677246D0)) (list (list 18.0D0 872.9161376953125D0 0.0019355008844286204D0 6.869999885559082D0)) (list (list 18.0D0 874.7302856445313D0 0.0017739305039867759D0 6.87999963760376D0)) (list (list 18.0D0 874.2716064453125D0 0.0018074222607538104D0 6.889999866485596D0)) (list (list 18.0D0 868.8585205078125D0 0.0020481187384575606D0 6.899999618530273D0)) (list (list 18.0D0 856.9048461914063D0 0.0025193498004227877D0 6.909999847412109D0)) (list (list 18.0D0 856.51318359375D0 0.0028058907482773066D0 6.920000076293945D0)) (list (list 18.0D0 857.8198852539063D0 0.0026641536969691515D0 6.929999828338623D0)) (list (list 18.0D0 860.2920532226563D0 0.002561715664342046D0 6.940000057220459D0)) (list (list 18.0D0 863.1949462890625D0 0.0026784297078847885D0 6.949999809265137D0)) (list (list 18.0D0 865.3059692382813D0 0.003005861770361662D0 6.960000038146973D0)) (list (list 18.0D0 861.3756103515625D0 0.002826012670993805D0 6.96999979019165D0)) (list (list 18.0D0 856.8141479492188D0 0.002667204476892948D0 6.980000019073486D0)) (list (list 18.0D0 854.554931640625D0 0.00249499105848372D0 6.989999771118164D0)) (list (list 18.0D0 854.9675903320313D0 0.002290453063324094D0 7.0D0)) (list (list 18.0D0 856.9908447265625D0 0.002032664604485035D0 7.009999752044678D0)) (list (list 18.0D0 857.3856201171875D0 0.001588483457453549D0 7.019999980926514D0)) (list (list 18.0D0 856.7138671875D0 0.001113365520723164D0 7.029999732971191D0)) (list (list 18.0D0 858.6967163085938D0 9.173034923151135D-4 7.039999961853027D0)) (list (list 18.0D0 862.8515625D0 0.0012577793095260859D0 7.049999713897705D0)) (list (list 18.0D0 866.4848022460938D0 0.002286028116941452D0 7.059999942779541D0)) (list (list 18.0D0 863.6773681640625D0 0.0034030808601528406D0 7.069999694824219D0)) (list (list 18.0D0 861.5672607421875D0 0.004279377404600382D0 7.079999923706055D0)) (list (list 18.0D0 859.9071655273438D0 0.004571208730340004D0 7.089999675750732D0)) (list (list 18.0D0 858.464599609375D0 0.004178311675786972D0 7.099999904632568D0)) (list (list 18.0D0 857.0369873046875D0 0.0031681046821177006D0 7.109999656677246D0)) (list (list 18.0D0 855.9542236328125D0 0.0019582072272896767D0 7.119999885559082D0)) (list (list 18.0D0 856.282470703125D0 0.0010517797200009227D0 7.12999963760376D0)) (list (list 18.0D0 858.8692626953125D0 4.905206733383238D-4 7.139999866485596D0)) (list (list 18.0D0 863.760986328125D0 2.265705115860328D-4 7.149999618530273D0)) (list (list 18.0D0 869.971923828125D0 1.514495088486001D-4 7.159999847412109D0)) (list (list 18.0D0 870.5321655273438D0 1.1236433783778921D-4 7.170000076293945D0)) (list (list 18.0D0 870.00146484375D0 9.747788135427982D-5 7.179999828338623D0)) (list (list 18.0D0 867.7034301757813D0 9.921763557940722D-5 7.190000057220459D0)) (list (list 18.0D0 864.6233520507813D0 1.0858487075893209D-4 7.199999809265137D0)) (list (list 18.0D0 862.5750732421875D0 1.1415340850362554D-4 7.210000038146973D0)) (list (list 18.0D0 864.2616577148438D0 9.509443043498323D-5 7.21999979019165D0)) (list (list 18.0D0 870.5215454101563D0 6.655776815023273D-5 7.230000019073486D0)) (list (list 18.0D0 876.336181640625D0 4.849085962632671D-5 7.239999771118164D0)) (list (list 18.0D0 873.4871826171875D0 4.442257704795338D-5 7.25D0)) (list (list 18.0D0 856.8384399414063D0 5.144775059306994D-5 7.259999752044678D0)) (list (list 18.0D0 861.154541015625D0 7.056135655147955D-5 7.269999980926514D0)) (list (list 18.0D0 864.5357055664063D0 8.034571510506794D-5 7.279999732971191D0)) (list (list 18.0D0 867.1166381835938D0 8.080235420493409D-5 7.289999961853027D0)) (list (list 18.0D0 868.8450317382813D0 7.59302856749855D-5 7.299999713897705D0)) (list (list 18.0D0 869.5668334960938D0 7.100913353497163D-5 7.309999942779541D0)) (list (list 18.0D0 868.3448486328125D0 6.484117329819128D-5 7.319999694824219D0)) (list (list 18.0D0 865.5611572265625D0 5.4097941756481305D-5 7.329999923706055D0)) (list (list 18.0D0 855.3585205078125D0 4.555114355753176D-5 7.339999675750732D0)) (list (list 18.0D0 845.9268188476563D0 4.0063558117253706D-5 7.349999904632568D0)) (list (list 18.0D0 848.2125244140625D0 3.622966323746368D-5 7.359999656677246D0)) (list (list 18.0D0 850.4984130859375D0 3.2395586458733305D-5 7.369999885559082D0)) (list (list 18.0D0 851.5253295898438D0 3.214440948795527D-5 7.37999963760376D0)) (list (list 18.0D0 851.847900390625D0 1.7194915926666D-5 7.389999866485596D0)) (list (list 19.0D0 1902.0556640625D0 0.0013935897732153535D0 1.3799999952316285D0)) (list (list 19.0D0 1902.956298828125D0 0.001329806400462985D0 1.3899999856948853D0)) (list (list 19.0D0 1906.083251953125D0 0.0013362603494897485D0 1.399999976158142D0)) (list (list 19.0D0 1910.391357421875D0 0.0013318636920303107D0 1.409999966621399D0)) (list (list 19.0D0 1914.6995849609375D0 0.0013274670345708728D0 1.4199999570846558D0)) (list (list 19.0D0 1919.0076904296875D0 0.001323070377111435D0 1.4299999475479126D0)) (list (list 19.0D0 1922.15283203125D0 0.0014249341329559684D0 1.4399999380111695D0)) (list (list 19.0D0 1922.764892578125D0 0.0017570593627169729D0 1.4499999284744263D0)) (list (list 19.0D0 1923.28955078125D0 0.0020805206149816513D0 1.459999918937683D0)) (list (list 19.0D0 1922.80078125D0 0.0020521916449069977D0 1.46999990940094D0)) (list (list 19.0D0 1920.454833984375D0 0.0017352921422570944D0 1.4800000190734864D0)) (list (list 19.0D0 1917.3812255859375D0 0.001289618550799787D0 1.4900000095367432D0)) (list (list 19.0D0 1914.5487060546875D0 9.372919448651373D-4 1.5D0)) (list (list 19.0D0 1899.7899169921875D0 9.444383904337883D-4 1.5099999904632569D0)) (list (list 19.0D0 1896.43603515625D0 0.001162138069048524D0 1.5199999809265137D0)) (list (list 19.0D0 1907.3955078125D0 0.001431009266525507D0 1.5299999713897705D0)) (list (list 19.0D0 1919.4029541015625D0 0.00157788279466331D0 1.5399999618530274D0)) (list (list 19.0D0 1914.8651123046875D0 0.0014480334939435125D0 1.5499999523162842D0)) (list (list 19.0D0 1913.086669921875D0 0.0011874876217916608D0 1.559999942779541D0)) (list (list 19.0D0 1911.5880126953125D0 0.0011664389166980982D0 1.5699999332427979D0)) (list (list 19.0D0 1910.748779296875D0 0.0012999040773138404D0 1.5799999237060547D0)) (list (list 19.0D0 1911.3468017578125D0 0.001466285204514861D0 1.5899999141693116D0)) (list (list 19.0D0 1913.898193359375D0 0.0015350194880738855D0 1.5999999046325684D0)) (list (list 19.0D0 1914.8212890625D0 0.0015337294898927212D0 1.6100000143051148D0)) (list (list 19.0D0 1914.357666015625D0 0.001629658741876483D0 1.6200000047683716D0)) (list (list 19.0D0 1912.6766357421875D0 0.001853550085797906D0 1.6299999952316285D0)) (list (list 19.0D0 1910.5743408203125D0 0.0021454612724483013D0 1.6399999856948853D0)) (list (list 19.0D0 1909.1353759765625D0 0.0023907374124974013D0 1.649999976158142D0)) (list (list 19.0D0 1909.152099609375D0 0.0023568428587168455D0 1.659999966621399D0)) (list (list 19.0D0 1909.5595703125D0 0.0021536860149353743D0 1.6699999570846558D0)) (list (list 19.0D0 1909.660888671875D0 0.0018865971360355616D0 1.6799999475479126D0)) (list (list 19.0D0 1907.5787353515625D0 0.0015946772182360292D0 1.6899999380111695D0)) (list (list 19.0D0 1901.89306640625D0 0.001307702506892383D0 1.6999999284744263D0)) (list (list 19.0D0 1899.918212890625D0 0.001181748230010271D0 1.709999918937683D0)) (list (list 19.0D0 1901.921142578125D0 0.0010957077611237765D0 1.71999990940094D0)) (list (list 19.0D0 1906.5150146484375D0 0.0012117238948121667D0 1.7300000190734864D0)) (list (list 19.0D0 1911.0244140625D0 0.001448224880732596D0 1.7400000095367432D0)) (list (list 19.0D0 1912.9080810546875D0 0.0016347048804163933D0 1.75D0)) (list (list 19.0D0 1916.7733154296875D0 0.001734270015731454D0 1.7599999904632569D0)) (list (list 19.0D0 1919.95166015625D0 0.0020086728036403656D0 1.7699999809265137D0)) (list (list 19.0D0 1921.5025634765625D0 0.0023345795925706625D0 1.7799999713897705D0)) (list (list 19.0D0 1922.0595703125D0 0.0026053753681480885D0 1.7899999618530274D0)) (list (list 19.0D0 1922.9715576171875D0 0.002711548237130046D0 1.7999999523162842D0)) (list (list 19.0D0 1926.05224609375D0 0.002475999528542161D0 1.809999942779541D0)) (list (list 19.0D0 1929.9698486328125D0 0.002156658563762903D0 1.8199999332427979D0)) (list (list 19.0D0 1931.4290771484375D0 0.0017423799727112055D0 1.8299999237060547D0)) (list (list 19.0D0 1929.7054443359375D0 0.0013290580827742815D0 1.8399999141693116D0)) (list (list 19.0D0 1925.654541015625D0 0.0010460582561790944D0 1.8499999046325684D0)) (list (list 19.0D0 1924.622314453125D0 9.448868222534657D-4 1.8600000143051148D0)) (list (list 19.0D0 1910.0948486328125D0 9.929729858413339D-4 1.8700000047683716D0)) (list (list 19.0D0 1903.5245361328125D0 0.0010355714475736022D0 1.8799999952316285D0)) (list (list 19.0D0 1904.927978515625D0 0.001027173944748938D0 1.8899999856948853D0)) (list (list 19.0D0 1908.193603515625D0 9.844086598604918D-4 1.899999976158142D0)) (list (list 19.0D0 1922.1617431640625D0 0.0011252047261223197D0 1.909999966621399D0)) (list (list 19.0D0 1922.9892578125D0 0.001182071166113019D0 1.9199999570846558D0)) (list (list 19.0D0 1921.252685546875D0 0.0012225606478750706D0 1.9299999475479126D0)) (list (list 19.0D0 1919.5159912109375D0 0.0012630501296371222D0 1.9399999380111695D0)) (list (list 19.0D0 1919.5404052734375D0 0.00130102364346385D0 1.9499999284744263D0)) (list (list 19.0D0 1937.718505859375D0 0.0013130620354786516D0 1.959999918937683D0)) (list (list 19.0D0 1942.04541015625D0 0.001439173356629908D0 1.96999990940094D0)) (list (list 19.0D0 1944.50146484375D0 0.001632233615964651D0 1.9799998998641968D0)) (list (list 19.0D0 1947.0618896484375D0 0.0018770887982100249D0 1.9900000095367432D0)) (list (list 19.0D0 1948.7882080078125D0 0.0021436421666294337D0 2.0D0)) (list (list 19.0D0 1950.7821044921875D0 0.002230551792308688D0 2.009999990463257D0)) (list (list 19.0D0 1952.79443359375D0 0.002240421250462532D0 2.0199999809265137D0)) (list (list 19.0D0 1954.79345703125D0 0.002280149143189192D0 2.0299999713897705D0)) (list (list 19.0D0 1956.718017578125D0 0.0023770644329488278D0 2.0399999618530274D0)) (list (list 19.0D0 1958.4061279296875D0 0.0025288627948611975D0 2.049999952316284D0)) (list (list 19.0D0 1958.96923828125D0 0.0027182730846107006D0 2.059999942779541D0)) (list (list 19.0D0 1958.62744140625D0 0.0029106514994055033D0 2.069999933242798D0)) (list (list 19.0D0 1958.1517333984375D0 0.003081709146499634D0 2.0799999237060547D0)) (list (list 19.0D0 1958.0731201171875D0 0.003181789768859744D0 2.0899999141693116D0)) (list (list 19.0D0 1958.725830078125D0 0.003166705835610628D0 2.0999999046325684D0)) (list (list 19.0D0 1959.5726318359375D0 0.0030697069596499205D0 2.109999895095825D0)) (list (list 19.0D0 1959.0904541015625D0 0.003028654493391514D0 2.119999885559082D0)) (list (list 19.0D0 1957.21728515625D0 0.0030962578020989895D0 2.129999876022339D0)) (list (list 19.0D0 1954.8056640625D0 0.0032113876659423113D0 2.1399998664855957D0)) (list (list 19.0D0 1953.1484375D0 0.0032450552098453045D0 2.1499998569488526D0)) (list (list 19.0D0 1954.3072509765625D0 0.0028576627373695374D0 2.1599998474121094D0)) (list (list 19.0D0 1955.47265625D0 0.0022813782561570406D0 2.169999837875366D0)) (list (list 19.0D0 1952.177001953125D0 0.0016434678109362722D0 2.180000066757202D0)) (list (list 19.0D0 1952.9613037109375D0 0.0010846912628039718D0 2.190000057220459D0)) (list (list 19.0D0 1963.8504638671875D0 8.10010067652911D-4 2.200000047683716D0)) (list (list 19.0D0 1947.0103759765625D0 0.001455186284147203D0 2.2100000381469727D0)) (list (list 19.0D0 1939.1429443359375D0 0.002327705966308713D0 2.2200000286102295D0)) (list (list 19.0D0 1937.630126953125D0 0.0029451679438352585D0 2.2300000190734864D0)) (list (list 19.0D0 1939.8382568359375D0 0.003042066702619195D0 2.240000009536743D0)) (list (list 19.0D0 1943.0965576171875D0 0.00250596203841269D0 2.25D0)) (list (list 19.0D0 1946.67333984375D0 0.001669954159297049D0 2.259999990463257D0)) (list (list 19.0D0 1952.221435546875D0 0.0011417848290875555D0 2.2699999809265137D0)) (list (list 19.0D0 1954.8494873046875D0 8.92182404641062D-4 2.2799999713897705D0)) (list (list 19.0D0 1954.4063720703125D0 8.569419151172042D-4 2.2899999618530274D0)) (list (list 19.0D0 1952.5740966796875D0 9.508873336017132D-4 2.299999952316284D0)) (list (list 19.0D0 1953.338134765625D0 0.0011171050136908889D0 2.309999942779541D0)) (list (list 19.0D0 1952.923583984375D0 0.0013042987557128072D0 2.319999933242798D0)) (list (list 19.0D0 1950.1739501953125D0 0.0014888151781633497D0 2.3299999237060547D0)) (list (list 19.0D0 1946.5924072265625D0 0.0016293313819915057D0 2.3399999141693116D0)) (list (list 19.0D0 1944.25537109375D0 0.0016772677190601826D0 2.3499999046325684D0)) (list (list 19.0D0 1943.869384765625D0 0.0015546862268820405D0 2.359999895095825D0)) (list (list 19.0D0 1944.396728515625D0 0.0015052729286253453D0 2.369999885559082D0)) (list (list 19.0D0 1947.0360107421875D0 0.001542799174785614D0 2.379999876022339D0)) (list (list 19.0D0 1950.7100830078125D0 0.0016403528861701489D0 2.3899998664855957D0)) (list (list 19.0D0 1953.6947021484375D0 0.001731780357658863D0 2.3999998569488526D0)) (list (list 19.0D0 1954.4132080078125D0 0.0016003190539777279D0 2.4099998474121094D0)) (list (list 19.0D0 1955.2392578125D0 0.0013055936433374882D0 2.419999837875366D0)) (list (list 19.0D0 1961.2191162109375D0 0.0010477218311280013D0 2.429999828338623D0)) (list (list 19.0D0 1968.64697265625D0 9.074782719835639D-4 2.440000057220459D0)) (list (list 19.0D0 1971.82421875D0 8.818735950626433D-4 2.450000047683716D0)) (list (list 19.0D0 1967.053955078125D0 6.810621707700193D-4 2.4600000381469727D0)) (list (list 19.0D0 1962.0721435546875D0 5.198038998059928D-4 2.4700000286102295D0)) (list (list 19.0D0 1945.876953125D0 7.304922328330576D-4 2.4800000190734864D0)) (list (list 19.0D0 1931.0457763671875D0 7.183472043834627D-4 2.490000009536743D0)) (list (list 20.0D0 1921.079833984375D0 0.0022163570392876864D0 2.319999933242798D0)) (list (list 20.0D0 1919.393310546875D0 0.0021441758144646883D0 2.3299999237060547D0)) (list (list 20.0D0 1917.2454833984375D0 0.001871079090051353D0 2.3399999141693116D0)) (list (list 20.0D0 1914.84423828125D0 0.001533998642116785D0 2.3499999046325684D0)) (list (list 20.0D0 1909.91162109375D0 0.001399725559167564D0 2.359999895095825D0)) (list (list 20.0D0 1904.9791259765625D0 0.0012654525926336646D0 2.369999885559082D0)) (list (list 20.0D0 1900.046630859375D0 0.0011311795096844435D0 2.379999876022339D0)) (list (list 20.0D0 1897.7750244140625D0 0.0010727309854701162D0 2.3899998664855957D0)) (list (list 20.0D0 1900.27001953125D0 0.0011500973487272859D0 2.3999998569488526D0)) (list (list 20.0D0 1902.764892578125D0 0.0012274638283997775D0 2.4099998474121094D0)) (list (list 20.0D0 1905.259765625D0 0.0013048301916569472D0 2.419999837875366D0)) (list (list 20.0D0 1907.59716796875D0 0.0014103205176070333D0 2.429999828338623D0)) (list (list 20.0D0 1909.2880859375D0 0.0015007918700575829D0 2.440000057220459D0)) (list (list 20.0D0 1909.9013671875D0 0.0015182043425738812D0 2.450000047683716D0)) (list (list 20.0D0 1909.638671875D0 0.0014194527175277472D0 2.4600000381469727D0)) (list (list 20.0D0 1910.25927734375D0 0.0013242701534181834D0 2.4700000286102295D0)) (list (list 20.0D0 1911.587158203125D0 0.0013568317517638207D0 2.4800000190734864D0)) (list (list 20.0D0 1913.837646484375D0 0.0015418552793562413D0 2.490000009536743D0)) (list (list 20.0D0 1916.7666015625D0 0.001834313035942614D0 2.5D0)) (list (list 20.0D0 1917.247802734375D0 0.0019791461527347565D0 2.509999990463257D0)) (list (list 20.0D0 1918.551025390625D0 0.0018586624646559358D0 2.5199999809265137D0)) (list (list 20.0D0 1921.62548828125D0 0.0017409579595550895D0 2.5299999713897705D0)) (list (list 20.0D0 1924.899169921875D0 0.0017627502093091608D0 2.5399999618530274D0)) (list (list 20.0D0 1926.4376220703125D0 0.001965304370969534D0 2.549999952316284D0)) (list (list 20.0D0 1925.754150390625D0 0.0020666765049099923D0 2.559999942779541D0)) (list (list 20.0D0 1918.97412109375D0 0.001997382612898946D0 2.569999933242798D0)) (list (list 20.0D0 1914.611328125D0 0.0019338418496772647D0 2.5799999237060547D0)) (list (list 20.0D0 1912.31982421875D0 0.00187654176261276D0 2.5899999141693116D0)) (list (list 20.0D0 1909.1622314453125D0 0.0017903422703966499D0 2.5999999046325684D0)) (list (list 20.0D0 1899.729248046875D0 0.0016646520234644413D0 2.609999895095825D0)) (list (list 20.0D0 1895.077880859375D0 0.0018213531002402306D0 2.619999885559082D0)) (list (list 20.0D0 1894.535400390625D0 0.0018992314580827952D0 2.629999876022339D0)) (list (list 20.0D0 1898.0264892578125D0 0.0019448063103482128D0 2.6399998664855957D0)) (list (list 20.0D0 1904.5482177734375D0 0.0020668511278927327D0 2.6499998569488526D0)) (list (list 20.0D0 1908.8980712890625D0 0.002217683242633939D0 2.6599998474121094D0)) (list (list 20.0D0 1912.3236083984375D0 0.0021762296091765166D0 2.669999837875366D0)) (list (list 20.0D0 1914.5487060546875D0 0.0020306447986513377D0 2.679999828338623D0)) (list (list 20.0D0 1915.2926025390625D0 0.001800375059247017D0 2.690000057220459D0)) (list (list 20.0D0 1914.497314453125D0 0.0015151947736740113D0 2.700000047683716D0)) (list (list 20.0D0 1912.75390625D0 0.001303795026615262D0 2.7100000381469727D0)) (list (list 20.0D0 1912.10888671875D0 0.001284777419641614D0 2.7200000286102295D0)) (list (list 20.0D0 1912.2291259765625D0 0.001414406462572515D0 2.7300000190734864D0)) (list (list 20.0D0 1912.602294921875D0 0.0016315742395818234D0 2.740000009536743D0)) (list (list 20.0D0 1912.7315673828125D0 0.0018584545468911529D0 2.75D0)) (list (list 20.0D0 1912.4696044921875D0 0.0019809079822152853D0 2.759999990463257D0)) (list (list 20.0D0 1913.3553466796875D0 0.0019947881810367108D0 2.7699999809265137D0)) (list (list 20.0D0 1915.3638916015625D0 0.00196402077563107D0 2.7799999713897705D0)) (list (list 20.0D0 1917.663330078125D0 0.001866938779130578D0 2.7899999618530274D0)) (list (list 20.0D0 1918.9979248046875D0 0.001655178377404809D0 2.799999952316284D0)) (list (list 20.0D0 1916.9183349609375D0 0.0012116098077967763D0 2.809999942779541D0)) (list (list 20.0D0 1911.5462646484375D0 8.932859054766595D-4 2.819999933242798D0)) (list (list 20.0D0 1907.19482421875D0 7.951386505737901D-4 2.8299999237060547D0)) (list (list 20.0D0 1903.97509765625D0 8.782491786405444D-4 2.8399999141693116D0)) (list (list 20.0D0 1901.958740234375D0 0.0010407379595562816D0 2.8499999046325684D0)) (list (list 20.0D0 1905.22607421875D0 0.0010610019089654088D0 2.859999895095825D0)) (list (list 20.0D0 1908.6324462890625D0 0.0011038377415388823D0 2.869999885559082D0)) (list (list 20.0D0 1910.7376708984375D0 0.0012013777159154416D0 2.879999876022339D0)) (list (list 20.0D0 1911.4813232421875D0 0.0012705116532742978D0 2.8899998664855957D0)) (list (list 20.0D0 1912.68310546875D0 0.0012422138825058937D0 2.8999998569488526D0)) (list (list 20.0D0 1923.2135009765625D0 0.0012001522118225694D0 2.9099998474121094D0)) (list (list 20.0D0 1933.7440185546875D0 0.0011580904247239232D0 2.919999837875366D0)) (list (list 20.0D0 1935.3232421875D0 0.0014186282642185688D0 2.929999828338623D0)) (list (list 20.0D0 1931.4486083984375D0 0.001732365693897009D0 2.93999981880188D0)) (list (list 20.0D0 1926.837158203125D0 0.0018489642534404993D0 2.950000047683716D0)) (list (list 20.0D0 1920.124755859375D0 0.0019658319652080536D0 2.9600000381469727D0)) (list (list 20.0D0 1917.0009765625D0 0.002121752593666315D0 2.9700000286102295D0)) (list (list 20.0D0 1914.9849853515625D0 0.0022424720227718354D0 2.9800000190734864D0)) (list (list 20.0D0 1912.9859619140625D0 0.002304586349055171D0 2.990000009536743D0)) (list (list 20.0D0 1910.6361083984375D0 0.0022995758336037398D0 3.0D0)) (list (list 20.0D0 1909.6033935546875D0 0.002226955723017454D0 3.009999990463257D0)) (list (list 20.0D0 1910.245849609375D0 0.0021678581833839417D0 3.0199999809265137D0)) (list (list 20.0D0 1910.9989013671875D0 0.0021497688721865416D0 3.0299999713897705D0)) (list (list 20.0D0 1910.5618896484375D0 0.0020929838065057993D0 3.0399999618530274D0)) (list (list 20.0D0 1908.5367431640625D0 0.0019166707061231137D0 3.049999952316284D0)) (list (list 20.0D0 1907.7471923828125D0 0.0015963884070515633D0 3.059999942779541D0)) (list (list 20.0D0 1910.494384765625D0 0.0013492809375748039D0 3.069999933242798D0)) (list (list 20.0D0 1911.9842529296875D0 0.001374108251184225D0 3.0799999237060547D0)) (list (list 20.0D0 1908.4537353515625D0 0.001663308939896524D0 3.0899999141693116D0)) (list (list 20.0D0 1899.8868408203125D0 0.002144507598131895D0 3.0999999046325684D0)) (list (list 20.0D0 1899.37060546875D0 0.0026884316466748715D0 3.109999895095825D0)) (list (list 20.0D0 1899.59765625D0 0.0026799754705280066D0 3.119999885559082D0)) (list (list 20.0D0 1902.1583251953125D0 0.002287838375195861D0 3.129999876022339D0)) (list (list 20.0D0 1907.2042236328125D0 0.0017883729888126254D0 3.1399998664855957D0)) (list (list 20.0D0 1913.8260498046875D0 0.0014199378201738D0 3.1499998569488526D0)) (list (list 20.0D0 1918.4393310546875D0 0.0011942387791350484D0 3.1599998474121094D0)) (list (list 20.0D0 1941.0166015625D0 9.642562363296747D-4 3.169999837875366D0)) (list (list 20.0D0 1949.7684326171875D0 8.901074179448187D-4 3.179999828338623D0)) (list (list 20.0D0 1949.6104736328125D0 9.066998609341681D-4 3.18999981880188D0)) (list (list 20.0D0 1946.708251953125D0 9.42436745390296D-4 3.1999998092651367D0)) (list (list 20.0D0 1928.36962890625D0 0.0010520642390474678D0 3.2100000381469727D0)) (list (list 20.0D0 1925.6910400390625D0 0.0011318956967443228D0 3.2200000286102295D0)) (list (list 20.0D0 1924.6915283203125D0 0.0011410259176045657D0 3.2300000190734864D0)) (list (list 20.0D0 1923.4998779296875D0 0.0011189328506588936D0 3.240000009536743D0)) (list (list 20.0D0 1921.9886474609375D0 0.001105982344597578D0 3.25D0)) (list (list 20.0D0 1919.621826171875D0 0.0010968790156766773D0 3.259999990463257D0)) (list (list 20.0D0 1915.1026611328125D0 0.0010407054796814919D0 3.2699999809265137D0)) (list (list 20.0D0 1909.53466796875D0 0.0010968056740239263D0 3.2799999713897705D0)) (list (list 20.0D0 1906.12255859375D0 0.0012320700334385038D0 3.2899999618530274D0)) (list (list 20.0D0 1907.079345703125D0 0.0013868866953998805D0 3.299999952316284D0)) (list (list 20.0D0 1910.6844482421875D0 0.0015209033153951168D0 3.309999942779541D0)) (list (list 20.0D0 1911.37255859375D0 0.0016350734513252974D0 3.319999933242798D0)) (list (list 20.0D0 1909.93310546875D0 0.0016763311577960849D0 3.3299999237060547D0)) (list (list 20.0D0 1907.1651611328125D0 0.0016917994944378734D0 3.3399999141693116D0)) (list (list 20.0D0 1904.0906982421875D0 0.0017107189632952214D0 3.3499999046325684D0)) (list (list 20.0D0 1902.30712890625D0 0.001647695666179061D0 3.359999895095825D0)) (list (list 20.0D0 1895.7054443359375D0 0.001364485826343298D0 3.369999885559082D0)) (list (list 20.0D0 1892.3726806640625D0 0.0011760025518015027D0 3.379999876022339D0)) (list (list 20.0D0 1882.794921875D0 9.410977945663035D-4 3.3899998664855957D0)) (list (list 20.0D0 1861.17919921875D0 5.63848007004708D-4 3.3999998569488526D0)) (list (list 20.0D0 1840.46533203125D0 2.923749852925539D-4 3.4099998474121094D0)) (list (list 20.0D0 1842.0853271484375D0 2.878957602661103D-4 3.419999837875366D0)) (list (list 20.0D0 1844.294189453125D0 3.207121917512268D-4 3.429999828338623D0)) (list (list 20.0D0 1856.5555419921875D0 6.993741844780743D-4 3.43999981880188D0)) (list (list 20.0D0 1880.7568359375D0 0.0014213980175554753D0 3.4499998092651367D0)) (list (list 20.0D0 1882.683349609375D0 0.0013033850118517876D0 3.4600000381469727D0)) (list (list 20.0D0 1884.6097412109375D0 0.001185374683700502D0 3.4700000286102295D0)) (list (list 20.0D0 1886.5361328125D0 0.001067364471964538D0 3.4800000190734864D0)) (list (list 20.0D0 1885.4127197265625D0 9.212118457071483D-4 3.490000009536743D0)) (list (list 20.0D0 1877.595947265625D0 7.475671591237187D-4 3.5D0)) (list (list 20.0D0 1857.7425537109375D0 6.44475279841572D-4 3.509999990463257D0)) (list (list 20.0D0 1849.476806640625D0 6.740630487911403D-4 3.5199999809265137D0)) (list (list 20.0D0 1847.88720703125D0 6.593450671061873D-4 3.5299999713897705D0)) (list (list 20.0D0 1849.62646484375D0 6.411371286958456D-4 3.5399999618530274D0)) (list (list 20.0D0 1854.5263671875D0 6.842723814770579D-4 3.549999952316284D0)) (list (list 20.0D0 1872.2803955078125D0 8.511912892572582D-4 3.559999942779541D0)) (list (list 20.0D0 1871.3123779296875D0 8.111160132102668D-4 3.569999933242798D0)) (list (list 20.0D0 1871.948486328125D0 7.825130014680326D-4 3.5799999237060547D0)) (list (list 20.0D0 1876.57470703125D0 8.655692799948156D-4 3.5899999141693116D0)) (list (list 20.0D0 1884.125732421875D0 0.0010785036720335484D0 3.5999999046325684D0)) (list (list 20.0D0 1890.292236328125D0 0.0012600760674104095D0 3.609999895095825D0)) (list (list 20.0D0 1896.458740234375D0 0.0014416485792025924D0 3.619999885559082D0)) (list (list 20.0D0 1898.664794921875D0 0.0014967330498620868D0 3.629999876022339D0)) (list (list 20.0D0 1900.387451171875D0 0.0014722442720085383D0 3.6399998664855957D0)) (list (list 20.0D0 1904.26806640625D0 0.0014441211242228747D0 3.6499998569488526D0)) (list (list 20.0D0 1908.244384765625D0 0.0015091104432940484D0 3.6599998474121094D0)) (list (list 20.0D0 1910.27099609375D0 0.0016158497892320157D0 3.669999837875366D0)) (list (list 20.0D0 1911.57861328125D0 0.0017568976618349553D0 3.679999828338623D0)) (list (list 20.0D0 1911.31640625D0 0.0018722820095717907D0 3.68999981880188D0)) (list (list 20.0D0 1909.2120361328125D0 0.0019383879844099284D0 3.6999998092651367D0)) (list (list 20.0D0 1906.9749755859375D0 0.0020435010083019734D0 3.7099997997283936D0)) (list (list 20.0D0 1905.5284423828125D0 0.0021622939966619015D0 3.7200000286102295D0)) (list (list 20.0D0 1905.04541015625D0 0.0021458996925503016D0 3.7300000190734864D0)) (list (list 20.0D0 1904.9818115234375D0 0.0019702499266713858D0 3.740000009536743D0)) (list (list 20.0D0 1904.725830078125D0 0.0016621130052953959D0 3.75D0)) (list (list 20.0D0 1903.68115234375D0 0.001327004749327898D0 3.759999990463257D0)) (list (list 20.0D0 1904.233642578125D0 0.0010665085865184665D0 3.7699999809265137D0)) (list (list 20.0D0 1907.9560546875D0 9.189833072014153D-4 3.7799999713897705D0)) (list (list 20.0D0 1918.4990234375D0 0.0010478614130988717D0 3.7899999618530274D0)) (list (list 20.0D0 1933.0001220703125D0 0.0014544028090313077D0 3.799999952316284D0)) (list (list 20.0D0 1931.382080078125D0 0.001718143350444734D0 3.809999942779541D0)) (list (list 20.0D0 1929.3944091796875D0 0.0019208949524909258D0 3.819999933242798D0)) (list (list 20.0D0 1914.909912109375D0 0.0023378205951303244D0 3.8299999237060547D0)) (list (list 20.0D0 1904.1844482421875D0 0.0025959329213947058D0 3.8399999141693116D0)) (list (list 20.0D0 1906.203125D0 0.0024030457716435194D0 3.8499999046325684D0)) (list (list 20.0D0 1905.5189208984375D0 0.0017805929528549314D0 3.859999895095825D0)) (list (list 20.0D0 1906.0103759765625D0 0.0014050366589799524D0 3.869999885559082D0)) (list (list 20.0D0 1908.10009765625D0 0.0014357935870066286D0 3.879999876022339D0)) (list (list 20.0D0 1909.8695068359375D0 0.0016521983779966832D0 3.8899998664855957D0)) (list (list 20.0D0 1909.9647216796875D0 0.0018121912144124508D0 3.8999998569488526D0)) (list (list 20.0D0 1908.7916259765625D0 0.0017080806428566575D0 3.9099998474121094D0)) (list (list 20.0D0 1908.2423095703125D0 0.001635613152757287D0 3.919999837875366D0)) (list (list 20.0D0 1907.7667236328125D0 0.0017786954995244742D0 3.929999828338623D0)) (list (list 20.0D0 1907.6494140625D0 0.0020730539690703154D0 3.93999981880188D0)) (list (list 20.0D0 1908.0194091796875D0 0.002391238696873188D0 3.9499998092651367D0)) (list (list 20.0D0 1908.5048828125D0 0.0025126056279987097D0 3.9599997997283936D0)) (list (list 20.0D0 1907.1300048828125D0 0.0023578302934765816D0 3.9700000286102295D0)) (list (list 20.0D0 1905.5269775390625D0 0.0022155367769300938D0 3.9800000190734864D0)) (list (list 20.0D0 1904.3961181640625D0 0.0021204203367233277D0 3.990000009536743D0)) (list (list 20.0D0 1904.3992919921875D0 0.0020375677850097418D0 4.0D0)) (list (list 20.0D0 1906.459716796875D0 0.001822305959649384D0 4.009999752044678D0)) (list (list 20.0D0 1909.435791015625D0 0.0015745662385597825D0 4.019999980926514D0)) (list (list 20.0D0 1910.9542236328125D0 0.0015161349438130856D0 4.029999732971191D0)) (list (list 20.0D0 1918.3902587890625D0 0.0016013184795156122D0 4.039999961853027D0)) (list (list 20.0D0 1935.2340087890625D0 0.0017277369042858482D0 4.049999713897705D0)) (list (list 20.0D0 1955.3450927734375D0 0.0017206271877512336D0 4.059999942779541D0)) (list (list 20.0D0 1957.18603515625D0 0.0015024499734863639D0 4.069999694824219D0)) (list (list 20.0D0 1941.5609130859375D0 0.0015004302840679884D0 4.079999923706055D0)) (list (list 20.0D0 1920.566650390625D0 0.001534251612611115D0 4.089999675750732D0)) (list (list 20.0D0 1906.5841064453125D0 0.0015485635958611966D0 4.099999904632568D0)) (list (list 20.0D0 1911.50634765625D0 0.001877858187071979D0 4.110000133514404D0)) (list (list 20.0D0 1912.9881591796875D0 0.0017754548462107778D0 4.119999885559082D0)) (list (list 20.0D0 1913.9786376953125D0 0.0014516599476337433D0 4.130000114440918D0)) (list (list 20.0D0 1913.8148193359375D0 0.00115160399582237D0 4.139999866485596D0)) (list (list 20.0D0 1912.357177734375D0 0.0010907768737524748D0 4.150000095367432D0)) (list (list 20.0D0 1911.065185546875D0 0.0014453723561018706D0 4.159999847412109D0)) (list (list 20.0D0 1913.50439453125D0 0.001892362255603075D0 4.170000076293945D0)) (list (list 20.0D0 1914.6693115234375D0 0.0020747443195432425D0 4.179999828338623D0)) (list (list 20.0D0 1914.3450927734375D0 0.001948116929270327D0 4.190000057220459D0)) (list (list 20.0D0 1913.4151611328125D0 0.001623003394342959D0 4.199999809265137D0)) (list (list 20.0D0 1914.2679443359375D0 0.001466386835090816D0 4.210000038146973D0)) (list (list 20.0D0 1898.152587890625D0 0.0016099174972623587D0 4.21999979019165D0)) (list (list 20.0D0 1902.7432861328125D0 0.0022941227070987225D0 4.230000019073486D0)) (list (list 20.0D0 1910.14306640625D0 0.00296054407954216D0 4.239999771118164D0)) (list (list 20.0D0 1909.2257080078125D0 0.0032071222085505724D0 4.25D0)) (list (list 20.0D0 1909.9207763671875D0 0.0030185470823198557D0 4.259999752044678D0)) (list (list 20.0D0 1910.6571044921875D0 0.002606424270197749D0 4.269999980926514D0)) (list (list 20.0D0 1910.098388671875D0 0.0021362588740885258D0 4.279999732971191D0)) (list (list 20.0D0 1908.22216796875D0 0.0016821179306134582D0 4.289999961853027D0)) (list (list 20.0D0 1905.861083984375D0 0.0013072366127744317D0 4.299999713897705D0)) (list (list 20.0D0 1905.3414306640625D0 0.0010750675573945046D0 4.309999942779541D0)) (list (list 20.0D0 1906.305908203125D0 0.001114216516725719D0 4.319999694824219D0)) (list (list 20.0D0 1908.9693603515625D0 0.0013121722731739283D0 4.329999923706055D0)) (list (list 20.0D0 1915.94970703125D0 0.0016312043881043792D0 4.339999675750732D0)) (list (list 20.0D0 1924.6593017578125D0 0.0019406990613788367D0 4.349999904632568D0)) (list (list 20.0D0 1922.194091796875D0 0.0019160510273650289D0 4.360000133514404D0)) (list (list 20.0D0 1920.4981689453125D0 0.001678002648986876D0 4.369999885559082D0)) (list (list 20.0D0 1916.599365234375D0 0.001490703783929348D0 4.380000114440918D0)) (list (list 20.0D0 1909.842041015625D0 0.0014930714387446642D0 4.389999866485596D0)) (list (list 20.0D0 1902.023193359375D0 0.0016619269736111165D0 4.400000095367432D0)) (list (list 20.0D0 1899.246826171875D0 0.0016978203784674406D0 4.409999847412109D0)) (list (list 20.0D0 1898.0501708984375D0 0.0015874030068516732D0 4.420000076293945D0)) (list (list 20.0D0 1899.6617431640625D0 0.0013516645412892104D0 4.429999828338623D0)) (list (list 20.0D0 1910.15087890625D0 0.0013203341513872147D0 4.440000057220459D0)) (list (list 20.0D0 1924.9810791015625D0 0.001574173104017973D0 4.449999809265137D0)) (list (list 20.0D0 1919.8790283203125D0 0.0017308956012129784D0 4.460000038146973D0)) (list (list 20.0D0 1917.4083251953125D0 0.001709412899799645D0 4.46999979019165D0)) (list (list 20.0D0 1916.2225341796875D0 0.0016724785091355443D0 4.480000019073486D0)) (list (list 20.0D0 1917.0452880859375D0 0.0016316951951012016D0 4.489999771118164D0)) (list (list 20.0D0 1919.415771484375D0 0.001596342772245407D0 4.5D0)) (list (list 20.0D0 1920.672119140625D0 0.0015872936928644777D0 4.509999752044678D0)) (list (list 20.0D0 1917.621337890625D0 0.001461832202039659D0 4.519999980926514D0)) (list (list 20.0D0 1914.2877197265625D0 0.0014374008169397712D0 4.529999732971191D0)) (list (list 20.0D0 1913.1953125D0 0.0014210700755938888D0 4.539999961853027D0)) (list (list 20.0D0 1914.7064208984375D0 0.0013467048993334175D0 4.549999713897705D0)) (list (list 20.0D0 1915.7869873046875D0 0.001216492964886129D0 4.559999942779541D0)) (list (list 20.0D0 1911.25732421875D0 0.0010923598892986775D0 4.569999694824219D0)) (list (list 20.0D0 1911.1907958984375D0 0.0010095176985487342D0 4.579999923706055D0)) (list (list 20.0D0 1902.3209228515625D0 0.0012316785287111998D0 4.589999675750732D0)) (list (list 20.0D0 1885.4073486328125D0 0.0016390609089285136D0 4.599999904632568D0)) (list (list 20.0D0 1886.2554931640625D0 0.0014559628907591105D0 4.610000133514404D0)) (list (list 20.0D0 1901.2506103515625D0 0.0014140484854578972D0 4.619999885559082D0)) (list (list 20.0D0 1907.4014892578125D0 0.0014184017200022936D0 4.630000114440918D0)) (list (list 20.0D0 1910.637451171875D0 0.001492839539423585D0 4.639999866485596D0)) (list (list 20.0D0 1914.156005859375D0 0.0016301126452162862D0 4.650000095367432D0)) (list (list 20.0D0 1914.5701904296875D0 0.0017672255635261536D0 4.659999847412109D0)) (list (list 20.0D0 1914.1551513671875D0 0.0018650427227839828D0 4.670000076293945D0)) (list (list 20.0D0 1914.038818359375D0 0.0019823797047138214D0 4.679999828338623D0)) (list (list 20.0D0 1913.8138427734375D0 0.002081702696159482D0 4.690000057220459D0)) (list (list 20.0D0 1913.168212890625D0 0.0021370635367929936D0 4.699999809265137D0)) (list (list 20.0D0 1912.0118408203125D0 0.002144039375707507D0 4.710000038146973D0)) (list (list 20.0D0 1912.1104736328125D0 0.0021755541674792767D0 4.71999979019165D0)) (list (list 20.0D0 1913.351318359375D0 0.0022625846322625876D0 4.730000019073486D0)) (list (list 20.0D0 1915.04345703125D0 0.002372059738263488D0 4.739999771118164D0)) (list (list 20.0D0 1916.36181640625D0 0.002441544085741043D0 4.75D0)) (list (list 20.0D0 1916.264404296875D0 0.0023627972695976496D0 4.759999752044678D0)) (list (list 20.0D0 1914.871337890625D0 0.0021623389329761267D0 4.769999980926514D0)) (list (list 20.0D0 1913.619873046875D0 0.0019517111359164119D0 4.779999732971191D0)) (list (list 20.0D0 1914.439208984375D0 0.001714563462883234D0 4.789999961853027D0)) (list (list 20.0D0 1917.6199951171875D0 0.001508675399236381D0 4.799999713897705D0)) (list (list 20.0D0 1921.100830078125D0 0.001514227595180273D0 4.809999942779541D0)) (list (list 20.0D0 1919.1190185546875D0 0.0014548104954883457D0 4.819999694824219D0)) (list (list 20.0D0 1913.9036865234375D0 0.0014583291485905648D0 4.829999923706055D0)) (list (list 20.0D0 1912.70751953125D0 0.001395698171108961D0 4.839999675750732D0)) (list (list 20.0D0 1916.8985595703125D0 0.0012971364194527269D0 4.849999904632568D0)) (list (list 20.0D0 1919.29052734375D0 0.0014384299283847213D0 4.859999656677246D0)) (list (list 20.0D0 1915.1722412109375D0 0.0016983243403956294D0 4.869999885559082D0)) (list (list 20.0D0 1907.31787109375D0 0.0022876497823745013D0 4.880000114440918D0)) (list (list 20.0D0 1902.250244140625D0 0.0026836434844881296D0 4.889999866485596D0)) (list (list 20.0D0 1903.0069580078125D0 0.0025825309567153454D0 4.900000095367432D0)) (list (list 20.0D0 1907.85888671875D0 0.0019935881718993187D0 4.909999847412109D0)) (list (list 20.0D0 1912.7110595703125D0 0.001404617098160088D0 4.920000076293945D0)) (list (list 20.0D0 1903.443359375D0 8.252933039329946D-4 4.929999828338623D0)) (list (list 20.0D0 1888.3082275390625D0 5.492326454259455D-4 4.940000057220459D0)) (list (list 20.0D0 1876.8045654296875D0 6.032849778421223D-4 4.949999809265137D0)) (list (list 20.0D0 1879.639404296875D0 6.487869541160762D-4 4.960000038146973D0)) (list (list 20.0D0 1883.7841796875D0 6.560460897162557D-4 4.96999979019165D0)) (list (list 20.0D0 1888.4520263671875D0 6.078608566895127D-4 4.980000019073486D0)) (list (list 20.0D0 1892.136962890625D0 6.215627654455602D-4 4.989999771118164D0)) (list (list 20.0D0 1894.01806640625D0 7.431143312714994D-4 5.0D0)) (list (list 20.0D0 1894.127685546875D0 9.23012150451541D-4 5.009999752044678D0)) (list (list 20.0D0 1895.1922607421875D0 0.0010340947192162276D0 5.019999980926514D0)) (list (list 20.0D0 1895.18603515625D0 0.0010198132367804647D0 5.029999732971191D0)) (list (list 20.0D0 1894.430419921875D0 9.415850508958101D-4 5.039999961853027D0)) (list (list 20.0D0 1893.2923583984375D0 8.748329128138721D-4 5.049999713897705D0)) (list (list 20.0D0 1892.1168212890625D0 9.115717839449644D-4 5.059999942779541D0)) (list (list 20.0D0 1892.5286865234375D0 9.78004070930183D-4 5.069999694824219D0)) (list (list 20.0D0 1892.05908203125D0 9.608001564629376D-4 5.079999923706055D0)) (list (list 20.0D0 1890.30712890625D0 9.246360859833658D-4 5.089999675750732D0)) (list (list 20.0D0 1888.114501953125D0 9.319324744865298D-4 5.099999904632568D0)) (list (list 20.0D0 1887.8482666015625D0 0.0010399469174444676D0 5.109999656677246D0)) (list (list 20.0D0 1897.129638671875D0 0.0011559315025806427D0 5.119999885559082D0)) (list (list 20.0D0 1900.19384765625D0 0.0012142093619331718D0 5.130000114440918D0)) (list (list 20.0D0 1900.1087646484375D0 0.00113580166362226D0 5.139999866485596D0)) (list (list 20.0D0 1898.960693359375D0 9.606120293028653D-4 5.150000095367432D0)) (list (list 20.0D0 1897.1802978515625D0 8.737285388633609D-4 5.159999847412109D0)) (list (list 20.0D0 1897.76953125D0 0.0010153630282729865D0 5.170000076293945D0)) (list (list 20.0D0 1901.0723876953125D0 0.0013078292831778527D0 5.179999828338623D0)) (list (list 20.0D0 1904.3966064453125D0 0.001670900615863502D0 5.190000057220459D0)) (list (list 20.0D0 1906.385498046875D0 0.0019864647183567286D0 5.199999809265137D0)) (list (list 20.0D0 1907.29638671875D0 0.0020881532691419125D0 5.210000038146973D0)) (list (list 20.0D0 1906.0113525390625D0 0.0018199969781562686D0 5.21999979019165D0)) (list (list 20.0D0 1904.9833984375D0 0.0014765175292268396D0 5.230000019073486D0)) (list (list 20.0D0 1905.41455078125D0 0.0012038584100082517D0 5.239999771118164D0)) (list (list 20.0D0 1907.7120361328125D0 0.0011240490712225438D0 5.25D0)) (list (list 20.0D0 1911.4189453125D0 0.001338932546786964D0 5.259999752044678D0)) (list (list 20.0D0 1915.296142578125D0 0.001670842175371945D0 5.269999980926514D0)) (list (list 20.0D0 1922.3140869140625D0 0.0018308013677597046D0 5.279999732971191D0)) (list (list 20.0D0 1927.56689453125D0 0.0017359884222969413D0 5.289999961853027D0)) (list (list 20.0D0 1928.8529052734375D0 0.0014080628752708435D0 5.299999713897705D0)) (list (list 20.0D0 1927.060302734375D0 9.808249305933714D-4 5.309999942779541D0)) (list (list 20.0D0 1925.0101318359375D0 8.855609339661896D-4 5.319999694824219D0)) (list (list 20.0D0 1927.3253173828125D0 9.316950454376638D-4 5.329999923706055D0)) (list (list 20.0D0 1931.579345703125D0 0.0011273650452494622D0 5.339999675750732D0)) (list (list 20.0D0 1936.2161865234375D0 0.001457776059396565D0 5.349999904632568D0)) (list (list 20.0D0 1940.70556640625D0 0.0018823338905349374D0 5.359999656677246D0)) (list (list 20.0D0 1941.9754638671875D0 0.002042028121650219D0 5.369999885559082D0)) (list (list 20.0D0 1942.641845703125D0 0.0018142523476853967D0 5.380000114440918D0)) (list (list 20.0D0 1936.1627197265625D0 0.0014624730683863163D0 5.389999866485596D0)) (list (list 20.0D0 1925.2001953125D0 0.0012380979023873806D0 5.400000095367432D0)) (list (list 20.0D0 1922.3199462890625D0 0.001378690474666655D0 5.409999847412109D0)) (list (list 20.0D0 1921.3194580078125D0 0.0015396203380078078D0 5.420000076293945D0)) (list (list 20.0D0 1919.7127685546875D0 0.0017579904524609447D0 5.429999828338623D0)) (list (list 20.0D0 1918.494140625D0 0.0019097588956356049D0 5.440000057220459D0)) (list (list 20.0D0 1917.7227783203125D0 0.0018900614231824875D0 5.449999809265137D0)) (list (list 20.0D0 1916.46875D0 0.001614019158296287D0 5.460000038146973D0)) (list (list 20.0D0 1914.5689697265625D0 0.0014006220735609532D0 5.46999979019165D0)) (list (list 20.0D0 1913.6781005859375D0 0.0013861428014934063D0 5.480000019073486D0)) (list (list 20.0D0 1912.8841552734375D0 0.0014504112768918276D0 5.489999771118164D0)) (list (list 20.0D0 1911.724609375D0 0.0015114328125491739D0 5.5D0)) (list (list 20.0D0 1910.1993408203125D0 0.001526763429865241D0 5.509999752044678D0)) (list (list 20.0D0 1910.3609619140625D0 0.0015657093608751893D0 5.519999980926514D0)) (list (list 20.0D0 1911.25927734375D0 0.0016503974329680205D0 5.529999732971191D0)) (list (list 20.0D0 1911.5263671875D0 0.00171105086337775D0 5.539999961853027D0)) (list (list 20.0D0 1910.6256103515625D0 0.001688129035755992D0 5.549999713897705D0)) (list (list 20.0D0 1908.8448486328125D0 0.0015325655695050955D0 5.559999942779541D0)) (list (list 20.0D0 1906.8568115234375D0 0.0012390055926516653D0 5.569999694824219D0)) (list (list 20.0D0 1906.0069580078125D0 0.0010327842319384218D0 5.579999923706055D0)) (list (list 20.0D0 1906.174560546875D0 0.0010316780535504222D0 5.589999675750732D0)) (list (list 20.0D0 1908.0311279296875D0 0.0012742754770442844D0 5.599999904632568D0)) (list (list 20.0D0 1912.9676513671875D0 0.0017210402293130756D0 5.609999656677246D0)) (list (list 20.0D0 1914.4608154296875D0 0.0020895551424473524D0 5.619999885559082D0)) (list (list 20.0D0 1913.8157958984375D0 0.0021686190739274025D0 5.62999963760376D0)) (list (list 20.0D0 1912.154541015625D0 0.0020894217304885388D0 5.639999866485596D0)) (list (list 20.0D0 1910.685302734375D0 0.001955428859218955D0 5.650000095367432D0)) (list (list 20.0D0 1910.7010498046875D0 0.0018452223157510162D0 5.659999847412109D0)) (list (list 20.0D0 1912.5760498046875D0 0.0017510408069938422D0 5.670000076293945D0)) (list (list 20.0D0 1912.32666015625D0 0.0015950301894918085D0 5.679999828338623D0)) (list (list 20.0D0 1910.4984130859375D0 0.0014525927836075426D0 5.690000057220459D0)) (list (list 20.0D0 1908.4505615234375D0 0.0013493633596226573D0 5.699999809265137D0)) (list (list 20.0D0 1908.438720703125D0 0.0012680268846452237D0 5.710000038146973D0)) (list (list 20.0D0 1927.01904296875D0 0.0014313053106889129D0 5.71999979019165D0)) (list (list 20.0D0 1926.1376953125D0 0.001322539639659226D0 5.730000019073486D0)) (list (list 20.0D0 1920.9677734375D0 0.0011046298313885928D0 5.739999771118164D0)) (list (list 20.0D0 1918.12841796875D0 9.291222086176276D-4 5.75D0)) (list (list 20.0D0 1916.8177490234375D0 9.39465593546629D-4 5.759999752044678D0)) (list (list 20.0D0 1916.359130859375D0 0.0011980886338278652D0 5.769999980926514D0)) (list (list 20.0D0 1915.2314453125D0 0.0015386256854981184D0 5.779999732971191D0)) (list (list 20.0D0 1913.6304931640625D0 0.0018184046493843198D0 5.789999961853027D0)) (list (list 20.0D0 1911.663330078125D0 0.0019320860737934709D0 5.799999713897705D0)) (list (list 20.0D0 1909.3798828125D0 0.0018074724357575179D0 5.809999942779541D0)) (list (list 20.0D0 1907.5234375D0 0.0014508749591186643D0 5.819999694824219D0)) (list (list 20.0D0 1901.2686767578125D0 0.0010713249212130905D0 5.829999923706055D0)) (list (list 20.0D0 1894.047607421875D0 8.077747188508511D-4 5.839999675750732D0)) (list (list 20.0D0 1889.0611572265625D0 6.52769289445132D-4 5.849999904632568D0)) (list (list 20.0D0 1889.276611328125D0 4.7917457413859666D-4 5.859999656677246D0)) (list (list 20.0D0 1891.512451171875D0 4.3611490400508046D-4 5.869999885559082D0)) (list (list 20.0D0 1875.4951171875D0 5.188881768845022D-4 5.87999963760376D0)) (list (list 20.0D0 1865.9644775390625D0 6.17471057921648D-4 5.889999866485596D0)) (list (list 20.0D0 1867.6527099609375D0 6.773444474674761D-4 5.900000095367432D0)) (list (list 20.0D0 1869.1990966796875D0 6.88403844833374D-4 5.909999847412109D0)) (list (list 20.0D0 1868.9266357421875D0 6.718571530655026D-4 5.920000076293945D0)) (list (list 20.0D0 1866.783447265625D0 6.710272282361984D-4 5.929999828338623D0)) (list (list 20.0D0 1863.669677734375D0 6.714421324431896D-4 5.940000057220459D0)) (list (list 20.0D0 1859.9913330078125D0 6.653604796156287D-4 5.949999809265137D0)) (list (list 20.0D0 1855.82763671875D0 6.509640952572227D-4 5.960000038146973D0)) (list (list 20.0D0 1852.731201171875D0 6.624105153605342D-4 5.96999979019165D0)) (list (list 20.0D0 1850.81640625D0 6.440915749408305D-4 5.980000019073486D0)) (list (list 20.0D0 1848.63037109375D0 5.88859140407294D-4 5.989999771118164D0)) (list (list 20.0D0 1846.090576171875D0 5.213131662458181D-4 6.0D0)) (list (list 20.0D0 1844.6768798828125D0 4.903147928416729D-4 6.009999752044678D0)) (list (list 20.0D0 1866.7603759765625D0 4.8447426524944604D-4 6.019999980926514D0)) (list (list 20.0D0 1869.43017578125D0 5.456634098663926D-4 6.029999732971191D0)) (list (list 20.0D0 1866.4075927734375D0 6.265113479457796D-4 6.039999961853027D0)) (list (list 20.0D0 1863.3851318359375D0 7.073554443195462D-4 6.049999713897705D0)) (list (list 20.0D0 1860.4378662109375D0 7.704952731728554D-4 6.059999942779541D0)) (list (list 20.0D0 1860.4378662109375D0 1.4128746988717467D-4 6.069999694824219D0)) (list (list 21.0D0 1669.4617919921875D0 0.0012988046510145069D0 2.5799999237060547D0)) (list (list 21.0D0 1670.734375D0 0.001320874784141779D0 2.5899999141693116D0)) (list (list 21.0D0 1672.60546875D0 0.0013573578326031566D0 2.5999999046325684D0)) (list (list 21.0D0 1674.2149658203125D0 0.001455088728107512D0 2.609999895095825D0)) (list (list 21.0D0 1674.7823486328125D0 0.001534785726107657D0 2.619999885559082D0)) (list (list 21.0D0 1674.9066162109375D0 0.0015588445821776987D0 2.629999876022339D0)) (list (list 21.0D0 1675.1878662109375D0 0.001519052661024034D0 2.6399998664855957D0)) (list (list 21.0D0 1676.17041015625D0 0.0014258482260629535D0 2.6499998569488526D0)) (list (list 21.0D0 1678.1376953125D0 0.001332337036728859D0 2.6599998474121094D0)) (list (list 21.0D0 1680.1866455078125D0 0.0012798730749636889D0 2.669999837875366D0)) (list (list 21.0D0 1681.26611328125D0 0.0012505975319072605D0 2.679999828338623D0)) (list (list 21.0D0 1681.4180908203125D0 0.0012294594198465348D0 2.690000057220459D0)) (list (list 21.0D0 1681.038330078125D0 0.0011976388050243259D0 2.700000047683716D0)) (list (list 21.0D0 1680.8333740234375D0 0.0011168774217367173D0 2.7100000381469727D0)) (list (list 21.0D0 1681.72509765625D0 9.752012556418777D-4 2.7200000286102295D0)) (list (list 21.0D0 1682.1873779296875D0 8.537054527550936D-4 2.7300000190734864D0)) (list (list 21.0D0 1681.798095703125D0 7.866346277296543D-4 2.740000009536743D0)) (list (list 21.0D0 1680.6195068359375D0 7.882039644755423D-4 2.75D0)) (list (list 21.0D0 1679.725830078125D0 8.383711101487279D-4 2.759999990463257D0)) (list (list 21.0D0 1679.81005859375D0 9.084709454327822D-4 2.7699999809265137D0)) (list (list 21.0D0 1679.110595703125D0 0.0010127878049388528D0 2.7799999713897705D0)) (list (list 21.0D0 1677.3154296875D0 0.0011498956009745598D0 2.7899999618530274D0)) (list (list 21.0D0 1674.9261474609375D0 0.0012989090755581856D0 2.799999952316284D0)) (list (list 21.0D0 1674.6478271484375D0 0.0013699440751224757D0 2.809999942779541D0)) (list (list 21.0D0 1674.8675537109375D0 0.0014455463970080018D0 2.819999933242798D0)) (list (list 21.0D0 1675.175537109375D0 0.0016019621398299933D0 2.8299999237060547D0)) (list (list 21.0D0 1676.0242919921875D0 0.0018240801291540265D0 2.8399999141693116D0)) (list (list 21.0D0 1677.7344970703125D0 0.00206935522146523D0 2.8499999046325684D0)) (list (list 21.0D0 1679.3961181640625D0 0.0022691020276397467D0 2.859999895095825D0)) (list (list 21.0D0 1680.0203857421875D0 0.002370578935369849D0 2.869999885559082D0)) (list (list 21.0D0 1680.3682861328125D0 0.002389682922512293D0 2.879999876022339D0)) (list (list 21.0D0 1680.86328125D0 0.0023236453998833895D0 2.8899998664855957D0)) (list (list 21.0D0 1681.6639404296875D0 0.0021790522150695324D0 2.8999998569488526D0)) (list (list 21.0D0 1682.059326171875D0 0.00199553812853992D0 2.9099998474121094D0)) (list (list 21.0D0 1681.794189453125D0 0.0018705379916355014D0 2.919999837875366D0)) (list (list 21.0D0 1681.180908203125D0 0.0018363078124821186D0 2.929999828338623D0)) (list (list 21.0D0 1680.3553466796875D0 0.0018692046869546175D0 2.93999981880188D0)) (list (list 21.0D0 1679.42724609375D0 0.0019412381807342172D0 2.950000047683716D0)) (list (list 21.0D0 1678.474853515625D0 0.002069039735943079D0 2.9600000381469727D0)) (list (list 21.0D0 1678.0849609375D0 0.002276497660204768D0 2.9700000286102295D0)) (list (list 21.0D0 1678.21533203125D0 0.0025164412800222636D0 2.9800000190734864D0)) (list (list 21.0D0 1678.6087646484375D0 0.002745256293565035D0 2.990000009536743D0)) (list (list 21.0D0 1678.9437255859375D0 0.0029224050231277943D0 3.0D0)) (list (list 21.0D0 1678.8448486328125D0 0.0030125747434794903D0 3.009999990463257D0)) (list (list 21.0D0 1678.538818359375D0 0.003071070183068514D0 3.0199999809265137D0)) (list (list 21.0D0 1678.3914794921875D0 0.00309076439589262D0 3.0299999713897705D0)) (list (list 21.0D0 1678.648193359375D0 0.0030589995440095663D0 3.0399999618530274D0)) (list (list 21.0D0 1679.364501953125D0 0.002975210314616561D0 3.049999952316284D0)) (list (list 21.0D0 1680.0059814453125D0 0.0028788684867322445D0 3.059999942779541D0)) (list (list 21.0D0 1680.1463623046875D0 0.0028497104067355395D0 3.069999933242798D0)) (list (list 21.0D0 1679.9857177734375D0 0.002882142784073949D0 3.0799999237060547D0)) (list (list 21.0D0 1679.6903076171875D0 0.0029612521175295115D0 3.0899999141693116D0)) (list (list 21.0D0 1679.43896484375D0 0.003070923499763012D0 3.0999999046325684D0)) (list (list 21.0D0 1679.4591064453125D0 0.0032079066149890423D0 3.109999895095825D0)) (list (list 21.0D0 1679.8802490234375D0 0.0033574632834643126D0 3.119999885559082D0)) (list (list 21.0D0 1680.27783203125D0 0.003515121527016163D0 3.129999876022339D0)) (list (list 21.0D0 1680.4776611328125D0 0.0036683990620076657D0 3.1399998664855957D0)) (list (list 21.0D0 1680.4422607421875D0 0.0038048960268497467D0 3.1499998569488526D0)) (list (list 21.0D0 1680.4578857421875D0 0.003915503155440092D0 3.1599998474121094D0)) (list (list 21.0D0 1680.5264892578125D0 0.003991486970335245D0 3.169999837875366D0)) (list (list 21.0D0 1680.4234619140625D0 0.004028488881886005D0 3.179999828338623D0)) (list (list 21.0D0 1680.241455078125D0 0.004025277681648731D0 3.18999981880188D0)) (list (list 21.0D0 1680.14794921875D0 0.003980785608291626D0 3.1999998092651367D0)) (list (list 21.0D0 1680.4007568359375D0 0.0038824535440653563D0 3.2100000381469727D0)) (list (list 21.0D0 1680.4705810546875D0 0.0037680943496525288D0 3.2200000286102295D0)) (list (list 21.0D0 1680.2181396484375D0 0.003667207667604089D0 3.2300000190734864D0)) (list (list 21.0D0 1679.8602294921875D0 0.003598930547013879D0 3.240000009536743D0)) (list (list 21.0D0 1679.6126708984375D0 0.003565883031114936D0 3.25D0)) (list (list 21.0D0 1679.4864501953125D0 0.003523728810250759D0 3.259999990463257D0)) (list (list 21.0D0 1679.115478515625D0 0.0033523712772876025D0 3.2699999809265137D0)) (list (list 21.0D0 1678.9195556640625D0 0.0030715358443558216D0 3.2799999713897705D0)) (list (list 21.0D0 1678.996337890625D0 0.0027517396956682206D0 3.2899999618530274D0)) (list (list 21.0D0 1679.2916259765625D0 0.0024798454251140356D0 3.299999952316284D0)) (list (list 21.0D0 1679.4365234375D0 0.0023739179596304894D0 3.309999942779541D0)) (list (list 21.0D0 1679.6470947265625D0 0.0023253876715898514D0 3.319999933242798D0)) (list (list 21.0D0 1680.160888671875D0 0.0022228744346648455D0 3.3299999237060547D0)) (list (list 21.0D0 1680.624267578125D0 0.0020739815663546324D0 3.3399999141693116D0)) (list (list 21.0D0 1680.6673583984375D0 0.0019224820425733924D0 3.3499999046325684D0)) (list (list 21.0D0 1680.1044921875D0 0.001872990746051073D0 3.359999895095825D0)) (list (list 21.0D0 1679.764404296875D0 0.0019489775877445937D0 3.369999885559082D0)) (list (list 21.0D0 1679.8035888671875D0 0.002035708399489522D0 3.379999876022339D0)) (list (list 21.0D0 1679.7410888671875D0 0.002093715826049447D0 3.3899998664855957D0)) (list (list 21.0D0 1679.141845703125D0 0.0020993247162550688D0 3.3999998569488526D0)) (list (list 21.0D0 1677.9517822265625D0 0.0020381957292556763D0 3.4099998474121094D0)) (list (list 21.0D0 1677.3115234375D0 0.0018928187200799585D0 3.419999837875366D0)) (list (list 21.0D0 1677.6046142578125D0 0.001668735290877521D0 3.429999828338623D0)) (list (list 21.0D0 1678.1727294921875D0 0.0014102180721238256D0 3.43999981880188D0)) (list (list 21.0D0 1678.2518310546875D0 0.0011677000438794494D0 3.4499998092651367D0)) (list (list 21.0D0 1677.15625D0 9.93296387605369D-4 3.4600000381469727D0)) (list (list 21.0D0 1675.6690673828125D0 8.938852115534246D-4 3.4700000286102295D0)) (list (list 21.0D0 1674.9893798828125D0 8.008287404663861D-4 3.4800000190734864D0)) (list (list 21.0D0 1674.908203125D0 7.0602772757411D-4 3.490000009536743D0)) (list (list 21.0D0 1674.9873046875D0 6.197323673404753D-4 3.5D0)) (list (list 21.0D0 1674.707763671875D0 5.865958519279957D-4 3.509999990463257D0)) (list (list 21.0D0 1672.7779541015625D0 5.895646172575653D-4 3.5199999809265137D0)) (list (list 21.0D0 1659.364013671875D0 7.656194502487779D-4 3.5299999713897705D0)) (list (list 21.0D0 1648.5582275390625D0 8.656059508211911D-4 3.5399999618530274D0)) (list (list 21.0D0 1650.340087890625D0 7.286044419743121D-4 3.549999952316284D0)) (list (list 21.0D0 1654.5206298828125D0 5.799519130960107D-4 3.559999942779541D0)) (list (list 21.0D0 1654.47607421875D0 5.589957581833005D-4 3.569999933242798D0)) (list (list 21.0D0 1653.8662109375D0 6.170521955937147D-4 3.5799999237060547D0)) (list (list 21.0D0 1653.1771240234375D0 7.091083680279553D-4 3.5899999141693116D0)) (list (list 21.0D0 1656.030029296875D0 8.911911863833666D-4 3.5999999046325684D0)) (list (list 21.0D0 1677.0389404296875D0 0.0015347275184467435D0 3.609999895095825D0)) (list (list 21.0D0 1679.26171875D0 0.0017823749221861363D0 3.619999885559082D0)) (list (list 21.0D0 1679.95458984375D0 0.001860818825662136D0 3.629999876022339D0)) (list (list 21.0D0 1680.8831787109375D0 0.0017942744307219983D0 3.6399998664855957D0)) (list (list 21.0D0 1681.932861328125D0 0.0016079341294243932D0 3.6499998569488526D0)) (list (list 21.0D0 1682.7860107421875D0 0.0013747522607445717D0 3.6599998474121094D0)) (list (list 21.0D0 1682.405517578125D0 0.0012240172363817692D0 3.669999837875366D0)) (list (list 21.0D0 1681.635498046875D0 0.0012173366267234087D0 3.679999828338623D0)) (list (list 21.0D0 1681.0587158203125D0 0.0013270177878439427D0 3.68999981880188D0)) (list (list 21.0D0 1681.0128173828125D0 0.0015040615107864142D0 3.6999998092651367D0)) (list (list 21.0D0 1681.302490234375D0 0.0016819360898807645D0 3.7099997997283936D0)) (list (list 21.0D0 1681.1448974609375D0 0.0018169982358813286D0 3.7200000286102295D0)) (list (list 21.0D0 1680.7890625D0 0.0019119670614600182D0 3.7300000190734864D0)) (list (list 21.0D0 1680.3160400390625D0 0.0019581897649914027D0 3.740000009536743D0)) (list (list 21.0D0 1679.7547607421875D0 0.001953009981662035D0 3.75D0)) (list (list 21.0D0 1679.0263671875D0 0.0019048990216106177D0 3.759999990463257D0)) (list (list 21.0D0 1678.151123046875D0 0.0019567685667425394D0 3.7699999809265137D0)) (list (list 21.0D0 1677.6025390625D0 0.0021318553481251D0 3.7799999713897705D0)) (list (list 21.0D0 1677.639892578125D0 0.0023700499441474676D0 3.7899999618530274D0)) (list (list 21.0D0 1678.334228515625D0 0.0025866487994790078D0 3.799999952316284D0)) (list (list 21.0D0 1679.41845703125D0 0.0026536372024565935D0 3.809999942779541D0)) (list (list 21.0D0 1679.8092041015625D0 0.002531454199925065D0 3.819999933242798D0)) (list (list 21.0D0 1679.880126953125D0 0.0023659532889723778D0 3.8299999237060547D0)) (list (list 21.0D0 1679.916259765625D0 0.002210318809375167D0 3.8399999141693116D0)) (list (list 21.0D0 1679.9940185546875D0 0.0020961519330739975D0 3.8499999046325684D0)) (list (list 21.0D0 1679.6763916015625D0 0.0020290042739361525D0 3.859999895095825D0)) (list (list 21.0D0 1678.980224609375D0 0.0020476358477026224D0 3.869999885559082D0)) (list (list 21.0D0 1678.797607421875D0 0.0021548040676862D0 3.879999876022339D0)) (list (list 21.0D0 1679.146728515625D0 0.002319740829989314D0 3.8899998664855957D0)) (list (list 21.0D0 1679.7681884765625D0 0.0024920720607042313D0 3.8999998569488526D0)) (list (list 21.0D0 1679.96337890625D0 0.002582249231636524D0 3.9099998474121094D0)) (list (list 21.0D0 1679.5565185546875D0 0.002562621608376503D0 3.919999837875366D0)) (list (list 21.0D0 1678.954345703125D0 0.002519916743040085D0 3.929999828338623D0)) (list (list 21.0D0 1678.35546875D0 0.0024735250044614077D0 3.93999981880188D0)) (list (list 21.0D0 1677.9163818359375D0 0.002416375558823347D0 3.9499998092651367D0)) (list (list 21.0D0 1677.7576904296875D0 0.0022904188372194767D0 3.9599997997283936D0)) (list (list 21.0D0 1677.4827880859375D0 0.00207528960891068D0 3.9700000286102295D0)) (list (list 21.0D0 1677.2069091796875D0 0.0018755783094093204D0 3.9800000190734864D0)) (list (list 21.0D0 1677.28369140625D0 0.0017147560138255358D0 3.990000009536743D0)) (list (list 21.0D0 1677.853515625D0 0.001593396533280611D0 4.0D0)) (list (list 21.0D0 1678.5687255859375D0 0.0014803684316575528D0 4.009999752044678D0)) (list (list 21.0D0 1678.562744140625D0 0.0012980708852410317D0 4.019999980926514D0)) (list (list 21.0D0 1678.4744873046875D0 0.001090019242838025D0 4.029999732971191D0)) (list (list 21.0D0 1678.6988525390625D0 8.865546551533043D-4 4.039999961853027D0)) (list (list 21.0D0 1679.302001953125D0 7.111401064321399D-4 4.049999713897705D0)) (list (list 21.0D0 1679.6905517578125D0 5.775783210992813D-4 4.059999942779541D0)) (list (list 21.0D0 1678.3634033203125D0 4.6391424257308245D-4 4.069999694824219D0)) (list (list 21.0D0 1674.089111328125D0 3.6077285767532885D-4 4.079999923706055D0)) (list (list 21.0D0 1667.8607177734375D0 3.033145912922919D-4 4.089999675750732D0)) (list (list 21.0D0 1666.3975830078125D0 3.034389519598335D-4 4.099999904632568D0)) (list (list 21.0D0 1689.5128173828125D0 3.201622748747468D-4 4.110000133514404D0)) (list (list 21.0D0 1688.3304443359375D0 4.8496562521904707D-4 4.119999885559082D0)) (list (list 21.0D0 1684.32373046875D0 6.744248676113784D-4 4.130000114440918D0)) (list (list 21.0D0 1680.5804443359375D0 8.499857503920794D-4 4.139999866485596D0)) (list (list 21.0D0 1678.15234375D0 9.864028543233872D-4 4.150000095367432D0)) (list (list 21.0D0 1676.9652099609375D0 0.0010678075486794115D0 4.159999847412109D0)) (list (list 21.0D0 1676.1268310546875D0 0.0010887651005759836D0 4.170000076293945D0)) (list (list 21.0D0 1675.2403564453125D0 0.0010859689209610224D0 4.179999828338623D0)) (list (list 21.0D0 1674.8658447265625D0 0.0010845822980627418D0 4.190000057220459D0)) (list (list 21.0D0 1675.2275390625D0 0.0011157543631270528D0 4.199999809265137D0)) (list (list 21.0D0 1675.7763671875D0 0.001229382585734129D0 4.210000038146973D0)) (list (list 21.0D0 1675.2774658203125D0 0.001394383143633604D0 4.21999979019165D0)) (list (list 21.0D0 1674.1217041015625D0 0.0014702753396704793D0 4.230000019073486D0)) (list (list 21.0D0 1673.72412109375D0 0.0014032371109351516D0 4.239999771118164D0)) (list (list 21.0D0 1674.6217041015625D0 0.0011986589524894953D0 4.25D0)) (list (list 21.0D0 1675.5452880859375D0 9.556895238347352D-4 4.259999752044678D0)) (list (list 21.0D0 1674.2919921875D0 7.516268524341285D-4 4.269999980926514D0)) (list (list 21.0D0 1664.7222900390625D0 7.43251119274646D-4 4.279999732971191D0)) (list (list 21.0D0 1657.985107421875D0 7.886078674346209D-4 4.289999961853027D0)) (list (list 21.0D0 1660.1214599609375D0 7.807037909515202D-4 4.299999713897705D0)) (list (list 21.0D0 1665.634765625D0 7.158430526033044D-4 4.309999942779541D0)) (list (list 21.0D0 1670.96337890625D0 8.636988350190222D-4 4.319999694824219D0)) (list (list 21.0D0 1673.4827880859375D0 0.0010461068013682962D0 4.329999923706055D0)) (list (list 21.0D0 1673.8349609375D0 0.0012005099561065436D0 4.339999675750732D0)) (list (list 21.0D0 1672.96923828125D0 0.0012899176217615605D0 4.349999904632568D0)) (list (list 21.0D0 1671.9139404296875D0 0.0013049945700913668D0 4.360000133514404D0)) (list (list 21.0D0 1672.170166015625D0 0.0012361924163997174D0 4.369999885559082D0)) (list (list 21.0D0 1672.9256591796875D0 0.0011614549439400435D0 4.380000114440918D0)) (list (list 21.0D0 1673.4610595703125D0 0.001110403100028634D0 4.389999866485596D0)) (list (list 21.0D0 1673.2677001953125D0 0.0010987232672050596D0 4.400000095367432D0)) (list (list 21.0D0 1672.140625D0 0.0011255978606641293D0 4.409999847412109D0)) (list (list 21.0D0 1670.4605712890625D0 0.001122974674217403D0 4.420000076293945D0)) (list (list 21.0D0 1668.43115234375D0 0.0010217997478321195D0 4.429999828338623D0)) (list (list 21.0D0 1667.7681884765625D0 8.182215970009565D-4 4.440000057220459D0)) (list (list 21.0D0 1668.7220458984375D0 5.502945859916508D-4 4.449999809265137D0)) (list (list 21.0D0 1668.8387451171875D0 3.2102857949212194D-4 4.460000038146973D0)) (list (list 21.0D0 1651.6016845703125D0 4.993414040654898D-4 4.46999979019165D0)) (list (list 21.0D0 1647.2032470703125D0 6.239542854018509D-4 4.480000019073486D0)) (list (list 21.0D0 1647.6837158203125D0 6.942168110981584D-4 4.489999771118164D0)) (list (list 21.0D0 1646.0062255859375D0 7.220609113574028D-4 4.5D0)) (list (list 21.0D0 1640.2078857421875D0 6.927231443114579D-4 4.509999752044678D0)) (list (list 21.0D0 1631.0838623046875D0 7.548119174316526D-4 4.519999980926514D0)) (list (list 21.0D0 1625.427734375D0 7.344245095737279D-4 4.529999732971191D0)) (list (list 21.0D0 1621.6629638671875D0 7.181554683484137D-4 4.539999961853027D0)) (list (list 21.0D0 1619.1387939453125D0 7.66161538194865D-4 4.549999713897705D0)) (list (list 21.0D0 1619.6583251953125D0 8.757777977734804D-4 4.559999942779541D0)) (list (list 21.0D0 1623.2564697265625D0 9.958652080968023D-4 4.569999694824219D0)) (list (list 21.0D0 1623.450439453125D0 0.0010913163423538208D0 4.579999923706055D0)) (list (list 21.0D0 1621.6475830078125D0 0.0012084252666682005D0 4.589999675750732D0)) (list (list 21.0D0 1619.2520751953125D0 0.0013448589015752078D0 4.599999904632568D0)) (list (list 21.0D0 1616.9951171875D0 0.0014107153983786703D0 4.610000133514404D0)) (list (list 21.0D0 1615.6868896484375D0 0.0011720111360773445D0 4.619999885559082D0)) (list (list 21.0D0 1614.7508544921875D0 8.512363419868052D-4 4.630000114440918D0)) (list (list 21.0D0 1615.1531982421875D0 5.938000977039337D-4 4.639999866485596D0)) (list (list 21.0D0 1619.444580078125D0 5.102264694869518D-4 4.650000095367432D0)) (list (list 21.0D0 1633.011474609375D0 6.754424539394677D-4 4.659999847412109D0)) (list (list 21.0D0 1633.333984375D0 6.809879560023546D-4 4.670000076293945D0)) (list (list 21.0D0 1633.9691162109375D0 6.386265740729868D-4 4.679999828338623D0)) (list (list 21.0D0 1633.8145751953125D0 6.087124929763377D-4 4.690000057220459D0)) (list (list 21.0D0 1632.1292724609375D0 6.387306493707001D-4 4.699999809265137D0)) (list (list 21.0D0 1629.64404296875D0 7.646116428077221D-4 4.710000038146973D0)) (list (list 21.0D0 1629.885009765625D0 9.245248511433601D-4 4.71999979019165D0)) (list (list 21.0D0 1629.440185546875D0 0.0010900046909227968D0 4.730000019073486D0)) (list (list 21.0D0 1623.040771484375D0 0.001216745818965137D0 4.739999771118164D0)) (list (list 21.0D0 1612.7449951171875D0 0.0012738852528855205D0 4.75D0)) (list (list 21.0D0 1611.9056396484375D0 0.0012471005320549012D0 4.759999752044678D0)) (list (list 21.0D0 1612.145263671875D0 0.0010395213030278683D0 4.769999980926514D0)) (list (list 21.0D0 1613.70654296875D0 8.815414039418101D-4 4.779999732971191D0)) (list (list 21.0D0 1615.9871826171875D0 8.099784608930349D-4 4.789999961853027D0)) (list (list 21.0D0 1618.1724853515625D0 8.318804320879281D-4 4.799999713897705D0)) (list (list 21.0D0 1619.14794921875D0 9.260982624255121D-4 4.809999942779541D0)) (list (list 21.0D0 1618.6231689453125D0 0.0011095742229372263D0 4.819999694824219D0)) (list (list 21.0D0 1616.812744140625D0 0.001280604163184762D0 4.829999923706055D0)) (list (list 21.0D0 1614.67822265625D0 0.0013387169456109405D0 4.839999675750732D0)) (list (list 21.0D0 1613.610107421875D0 0.0012301640817895532D0 4.849999904632568D0)) (list (list 21.0D0 1615.68505859375D0 9.591475827619433D-4 4.859999656677246D0)) (list (list 21.0D0 1616.26416015625D0 7.940925424918532D-4 4.869999885559082D0)) (list (list 21.0D0 1627.7265625D0 7.094841566868126D-4 4.880000114440918D0)) (list (list 21.0D0 1634.3712158203125D0 6.945669883862138D-4 4.889999866485596D0)) (list (list 21.0D0 1631.5322265625D0 6.978990859352052D-4 4.900000095367432D0)) (list (list 21.0D0 1630.960205078125D0 6.089878152124584D-4 4.909999847412109D0)) (list (list 21.0D0 1629.87890625D0 4.888480762019753D-4 4.920000076293945D0)) (list (list 21.0D0 1615.4580078125D0 4.992909380234778D-4 4.929999828338623D0)) (list (list 21.0D0 1599.753662109375D0 6.132958806119859D-4 4.940000057220459D0)) (list (list 21.0D0 1591.34765625D0 7.373937987722456D-4 4.949999809265137D0)) (list (list 21.0D0 1593.53125D0 6.919828592799604D-4 4.960000038146973D0)) (list (list 21.0D0 1598.956298828125D0 5.140876164659858D-4 4.96999979019165D0)) (list (list 21.0D0 1601.787353515625D0 4.470646381378174D-4 4.980000019073486D0)) (list (list 21.0D0 1601.7413330078125D0 5.091319908387959D-4 4.989999771118164D0)) (list (list 21.0D0 1598.957763671875D0 7.039141491986811D-4 5.0D0)) (list (list 21.0D0 1593.8348388671875D0 0.0010291110957041383D0 5.009999752044678D0)) (list (list 21.0D0 1593.4256591796875D0 0.0011839080834761262D0 5.019999980926514D0)) (list (list 21.0D0 1590.225830078125D0 0.0010808206861838699D0 5.029999732971191D0)) (list (list 21.0D0 1585.5684814453125D0 8.906934526748955D-4 5.039999961853027D0)) (list (list 21.0D0 1581.901123046875D0 7.312456145882607D-4 5.049999713897705D0)) (list (list 21.0D0 1582.9351806640625D0 6.460454314947128D-4 5.059999942779541D0)) (list (list 21.0D0 1587.6318359375D0 7.610416505485773D-4 5.069999694824219D0)) (list (list 21.0D0 1589.6845703125D0 8.98465805221349D-4 5.079999923706055D0)) (list (list 21.0D0 1589.540283203125D0 9.591232519596815D-4 5.089999675750732D0)) (list (list 21.0D0 1587.52294921875D0 9.05925699044019D-4 5.099999904632568D0)) (list (list 21.0D0 1583.55712890625D0 7.741328445263207D-4 5.109999656677246D0)) (list (list 21.0D0 1580.432861328125D0 7.042379584163427D-4 5.119999885559082D0)) (list (list 21.0D0 1582.066162109375D0 6.447430932894349D-4 5.130000114440918D0)) (list (list 21.0D0 1585.8681640625D0 6.969374953769147D-4 5.139999866485596D0)) (list (list 21.0D0 1589.403076171875D0 8.682276238687336D-4 5.150000095367432D0)) (list (list 21.0D0 1590.5281982421875D0 0.0010498742340132595D0 5.159999847412109D0)) (list (list 21.0D0 1592.4727783203125D0 0.0011068613966926933D0 5.170000076293945D0)) (list (list 21.0D0 1594.7276611328125D0 0.001142357476055622D0 5.179999828338623D0)) (list (list 21.0D0 1596.5594482421875D0 0.001149429241195321D0 5.190000057220459D0)) (list (list 21.0D0 1598.0638427734375D0 0.0011130977654829622D0 5.199999809265137D0)) (list (list 21.0D0 1600.3306884765625D0 0.0010096343467012048D0 5.210000038146973D0)) (list (list 21.0D0 1606.1414794921875D0 9.232845040969551D-4 5.21999979019165D0)) (list (list 21.0D0 1608.7022705078125D0 8.391797891817987D-4 5.230000019073486D0)) (list (list 21.0D0 1608.3831787109375D0 7.415782893076539D-4 5.239999771118164D0)) (list (list 21.0D0 1605.7191162109375D0 6.541425827890635D-4 5.25D0)) (list (list 21.0D0 1601.2779541015625D0 6.470920634455979D-4 5.259999752044678D0)) (list (list 21.0D0 1597.8133544921875D0 7.391109247691929D-4 5.269999980926514D0)) (list (list 21.0D0 1594.7913818359375D0 9.253867319785059D-4 5.279999732971191D0)) (list (list 21.0D0 1592.9725341796875D0 0.0011518695391714573D0 5.289999961853027D0)) (list (list 21.0D0 1593.0426025390625D0 0.0013373260153457523D0 5.299999713897705D0)) (list (list 21.0D0 1595.622802734375D0 0.0013689602492377162D0 5.309999942779541D0)) (list (list 21.0D0 1597.9571533203125D0 0.001205136184580624D0 5.319999694824219D0)) (list (list 21.0D0 1600.78466796875D0 9.138124878518283D-4 5.329999923706055D0)) (list (list 21.0D0 1609.3331298828125D0 6.1156036099419D-4 5.339999675750732D0)) (list (list 21.0D0 1624.5338134765625D0 3.942149633076042D-4 5.349999904632568D0)) (list (list 21.0D0 1642.61865234375D0 3.3599886228330434D-4 5.359999656677246D0)) (list (list 21.0D0 1643.0711669921875D0 3.5695527913048864D-4 5.369999885559082D0)) (list (list 21.0D0 1643.73828125D0 4.077309858985245D-4 5.380000114440918D0)) (list (list 21.0D0 1654.3648681640625D0 9.380499250255525D-4 5.389999866485596D0)) (list (list 21.0D0 1669.9100341796875D0 0.0017064018175005913D0 5.400000095367432D0)) (list (list 21.0D0 1669.572265625D0 0.0017279466846957803D0 5.409999847412109D0)) (list (list 21.0D0 1669.1075439453125D0 0.0015353038907051087D0 5.420000076293945D0)) (list (list 21.0D0 1667.7755126953125D0 0.0012795573566108942D0 5.429999828338623D0)) (list (list 21.0D0 1666.304931640625D0 0.001039771013893187D0 5.440000057220459D0)) (list (list 21.0D0 1665.972900390625D0 8.499919204041362D-4 5.449999809265137D0)) (list (list 21.0D0 1668.6256103515625D0 6.978687597438693D-4 5.460000038146973D0)) (list (list 21.0D0 1672.9385986328125D0 6.967163062654436D-4 5.46999979019165D0)) (list (list 21.0D0 1674.9925537109375D0 7.218513055704534D-4 5.480000019073486D0)) (list (list 21.0D0 1677.1181640625D0 7.287777843885124D-4 5.489999771118164D0)) (list (list 21.0D0 1680.322509765625D0 7.177215302363038D-4 5.5D0)) (list (list 21.0D0 1684.2548828125D0 7.339726435020566D-4 5.509999752044678D0)) (list (list 21.0D0 1683.87158203125D0 7.129767327569425D-4 5.519999980926514D0)) (list (list 21.0D0 1679.814208984375D0 6.894759717397392D-4 5.529999732971191D0)) (list (list 21.0D0 1675.3985595703125D0 6.762800039723516D-4 5.539999961853027D0)) (list (list 21.0D0 1673.431396484375D0 6.45172840449959D-4 5.549999713897705D0)) (list (list 21.0D0 1676.1893310546875D0 5.280046025291085D-4 5.559999942779541D0)) (list (list 21.0D0 1678.862060546875D0 4.874337464570999D-4 5.569999694824219D0)) (list (list 21.0D0 1681.2052001953125D0 5.130651989020407D-4 5.579999923706055D0)) (list (list 21.0D0 1682.190673828125D0 5.679766181856394D-4 5.589999675750732D0)) (list (list 21.0D0 1681.6798095703125D0 6.241115042939782D-4 5.599999904632568D0)) (list (list 21.0D0 1680.3966064453125D0 6.61917554680258D-4 5.609999656677246D0)) (list (list 21.0D0 1679.522705078125D0 6.89369160681963D-4 5.619999885559082D0)) (list (list 21.0D0 1678.8143310546875D0 7.265713647939265D-4 5.62999963760376D0)) (list (list 21.0D0 1677.850341796875D0 8.097861427813768D-4 5.639999866485596D0)) (list (list 21.0D0 1676.56201171875D0 9.600904304534197D-4 5.650000095367432D0)) (list (list 21.0D0 1675.2156982421875D0 0.001183368032798171D0 5.659999847412109D0)) (list (list 21.0D0 1674.6883544921875D0 0.0013852486154064537D0 5.670000076293945D0)) (list (list 21.0D0 1674.00341796875D0 0.001503614941611886D0 5.679999828338623D0)) (list (list 21.0D0 1673.061767578125D0 0.0015556493308395148D0 5.690000057220459D0)) (list (list 21.0D0 1672.035400390625D0 0.001569489249959588D0 5.699999809265137D0)) (list (list 21.0D0 1671.3426513671875D0 0.001584713812917471D0 5.710000038146973D0)) (list (list 21.0D0 1671.061767578125D0 0.0017016066703945399D0 5.71999979019165D0)) (list (list 21.0D0 1671.4156494140625D0 0.0018962800968438387D0 5.730000019073486D0)) (list (list 21.0D0 1672.0106201171875D0 0.0021164852660149336D0 5.739999771118164D0)) (list (list 21.0D0 1672.4893798828125D0 0.002310951007530093D0 5.75D0)) (list (list 21.0D0 1672.5277099609375D0 0.0024287281557917595D0 5.759999752044678D0)) (list (list 21.0D0 1672.4158935546875D0 0.0024456812534481287D0 5.769999980926514D0)) (list (list 21.0D0 1672.3077392578125D0 0.0024085501208901406D0 5.779999732971191D0)) (list (list 21.0D0 1672.0277099609375D0 0.002300870604813099D0 5.789999961853027D0)) (list (list 21.0D0 1671.6065673828125D0 0.0021162896882742644D0 5.799999713897705D0)) (list (list 21.0D0 1671.2587890625D0 0.0018588750390335918D0 5.809999942779541D0)) (list (list 21.0D0 1671.4581298828125D0 0.0015767839504405857D0 5.819999694824219D0)) (list (list 21.0D0 1671.58349609375D0 0.0013332873350009323D0 5.829999923706055D0)) (list (list 21.0D0 1671.7825927734375D0 0.0011263902997598052D0 5.839999675750732D0)) (list (list 21.0D0 1672.5035400390625D0 9.563998901285231D-4 5.849999904632568D0)) (list (list 21.0D0 1674.431396484375D0 8.256206638179719D-4 5.859999656677246D0)) (list (list 21.0D0 1677.28076171875D0 7.81725044362247D-4 5.869999885559082D0)) (list (list 21.0D0 1678.527099609375D0 7.500128704123199D-4 5.87999963760376D0)) (list (list 21.0D0 1678.3692626953125D0 7.082297815941274D-4 5.889999866485596D0)) (list (list 21.0D0 1676.986083984375D0 6.528680678457022D-4 5.900000095367432D0)) (list (list 21.0D0 1674.5848388671875D0 5.960588459856808D-4 5.909999847412109D0)) (list (list 21.0D0 1671.8297119140625D0 5.647602374665439D-4 5.920000076293945D0)) (list (list 21.0D0 1670.606689453125D0 5.382899544201791D-4 5.929999828338623D0)) (list (list 21.0D0 1671.1151123046875D0 4.951591836288571D-4 5.940000057220459D0)) (list (list 21.0D0 1673.658935546875D0 4.380496102385223D-4 5.949999809265137D0)) (list (list 21.0D0 1678.4052734375D0 3.885695477947593D-4 5.960000038146973D0)) (list (list 21.0D0 1677.2852783203125D0 3.435922844801098D-4 5.96999979019165D0)) (list (list 21.0D0 1673.9591064453125D0 3.393223159946501D-4 5.980000019073486D0)) (list (list 21.0D0 1671.6844482421875D0 3.5137368831783533D-4 5.989999771118164D0)) (list (list 21.0D0 1665.54638671875D0 3.5406529786996544D-4 6.0D0)) (list (list 21.0D0 1645.3846435546875D0 3.2284934422932565D-4 6.009999752044678D0)) (list (list 21.0D0 1646.6727294921875D0 3.566188970580697D-4 6.019999980926514D0)) (list (list 21.0D0 1646.3258056640625D0 4.2207265505567193D-4 6.029999732971191D0)) (list (list 21.0D0 1645.1805419921875D0 5.018885713070631D-4 6.039999961853027D0)) (list (list 21.0D0 1646.9871826171875D0 5.763027002103627D-4 6.049999713897705D0)) (list (list 21.0D0 1657.369873046875D0 6.242544041015208D-4 6.059999942779541D0)) (list (list 21.0D0 1667.7520751953125D0 6.722038378939033D-4 6.069999694824219D0)) (list (list 21.0D0 1668.800537109375D0 7.371462415903807D-4 6.079999923706055D0)) (list (list 21.0D0 1668.62744140625D0 7.582930265925825D-4 6.089999675750732D0)) (list (list 21.0D0 1670.0478515625D0 7.603450212627649D-4 6.099999904632568D0)) (list (list 21.0D0 1672.1148681640625D0 8.311727433465421D-4 6.109999656677246D0)) (list (list 21.0D0 1673.0762939453125D0 0.0010430843103677035D0 6.119999885559082D0)) (list (list 21.0D0 1672.6234130859375D0 0.0012476297561079264D0 6.12999963760376D0)) (list (list 21.0D0 1672.025146484375D0 0.0013941822107881308D0 6.139999866485596D0)) (list (list 21.0D0 1671.880615234375D0 0.0014694263227283955D0 6.150000095367432D0)) (list (list 21.0D0 1672.2899169921875D0 0.001488995854742825D0 6.159999847412109D0)) (list (list 21.0D0 1671.9771728515625D0 0.0014974175719544292D0 6.170000076293945D0)) (list (list 21.0D0 1670.736328125D0 0.0014431726885959506D0 6.179999828338623D0)) (list (list 21.0D0 1669.8671875D0 0.0012881021248176694D0 6.190000057220459D0)) (list (list 21.0D0 1670.1231689453125D0 0.0010485644452273846D0 6.199999809265137D0)) (list (list 21.0D0 1671.8026123046875D0 7.863372447900474D-4 6.210000038146973D0)) (list (list 21.0D0 1672.873291015625D0 6.841542781330645D-4 6.21999979019165D0)) (list (list 21.0D0 1673.480224609375D0 6.912182434462011D-4 6.230000019073486D0)) (list (list 21.0D0 1673.8758544921875D0 7.181291002780199D-4 6.239999771118164D0)) (list (list 21.0D0 1674.4678955078125D0 7.130109588615596D-4 6.25D0)) (list (list 21.0D0 1675.724365234375D0 6.502930773422122D-4 6.259999752044678D0)) (list (list 21.0D0 1676.590087890625D0 5.869633750990033D-4 6.269999980926514D0)) (list (list 21.0D0 1677.686279296875D0 5.665338831022382D-4 6.279999732971191D0)) (list (list 21.0D0 1679.5867919921875D0 5.727277020923793D-4 6.289999961853027D0)) (list (list 21.0D0 1681.38916015625D0 5.787740228697658D-4 6.299999713897705D0)) (list (list 21.0D0 1681.1591796875D0 5.516743985936046D-4 6.309999942779541D0)) (list (list 21.0D0 1676.22802734375D0 5.103420116938651D-4 6.319999694824219D0)) (list (list 21.0D0 1672.246337890625D0 5.560984718613327D-4 6.329999923706055D0)) (list (list 21.0D0 1671.1932373046875D0 5.969002959318459D-4 6.339999675750732D0)) (list (list 21.0D0 1672.1759033203125D0 6.149309338070452D-4 6.349999904632568D0)) (list (list 21.0D0 1672.46240234375D0 6.395005621016026D-4 6.359999656677246D0)) (list (list 21.0D0 1671.6580810546875D0 7.160569075495005D-4 6.369999885559082D0)) (list (list 21.0D0 1671.5546875D0 8.46745737362653D-4 6.37999963760376D0)) (list (list 21.0D0 1672.382080078125D0 9.940647287294269D-4 6.389999866485596D0)) (list (list 21.0D0 1673.784423828125D0 0.0011334593873471022D0 6.399999618530273D0)) (list (list 21.0D0 1674.9884033203125D0 0.0012488042702898384D0 6.409999847412109D0)) (list (list 21.0D0 1674.9334716796875D0 0.0013594760093837977D0 6.420000076293945D0)) (list (list 21.0D0 1674.25439453125D0 0.001496236422099173D0 6.429999828338623D0)) (list (list 21.0D0 1673.48583984375D0 0.0016213087365031243D0 6.440000057220459D0)) (list (list 21.0D0 1673.2537841796875D0 0.0016926752869039774D0 6.449999809265137D0)) (list (list 21.0D0 1674.1961669921875D0 0.0016715277452021838D0 6.460000038146973D0)) (list (list 21.0D0 1675.8182373046875D0 0.0016372549580410123D0 6.46999979019165D0)) (list (list 21.0D0 1676.838134765625D0 0.0016651790356263519D0 6.480000019073486D0)) (list (list 21.0D0 1676.922119140625D0 0.0017340658232569695D0 6.489999771118164D0)) (list (list 21.0D0 1676.2388916015625D0 0.001829467830248177D0 6.5D0)) (list (list 21.0D0 1675.2921142578125D0 0.001936935936100781D0 6.509999752044678D0)) (list (list 21.0D0 1674.5572509765625D0 0.0020089701283723116D0 6.519999980926514D0)) (list (list 21.0D0 1674.234375D0 0.0019845881033688784D0 6.529999732971191D0)) (list (list 21.0D0 1674.4061279296875D0 0.0018830890767276287D0 6.539999961853027D0)) (list (list 21.0D0 1674.8326416015625D0 0.0017501335823908449D0 6.549999713897705D0)) (list (list 21.0D0 1675.0823974609375D0 0.0016496360767632723D0 6.559999942779541D0)) (list (list 21.0D0 1675.037353515625D0 0.0016296872636303306D0 6.569999694824219D0)) (list (list 21.0D0 1675.479736328125D0 0.0016041792696341873D0 6.579999923706055D0)) (list (list 21.0D0 1676.3978271484375D0 0.001541123609058559D0 6.589999675750732D0)) (list (list 21.0D0 1677.41259765625D0 0.0014399327337741852D0 6.599999904632568D0)) (list (list 21.0D0 1677.931884765625D0 0.0013198922388255597D0 6.609999656677246D0)) (list (list 21.0D0 1677.6324462890625D0 0.0012157266028225422D0 6.619999885559082D0)) (list (list 21.0D0 1677.4232177734375D0 0.0011682972544804216D0 6.62999963760376D0)) (list (list 21.0D0 1677.536376953125D0 0.0011837206548079849D0 6.639999866485596D0)) (list (list 21.0D0 1677.7552490234375D0 0.0012574087595567108D0 6.649999618530273D0)) (list (list 21.0D0 1677.6053466796875D0 0.0013732417719438672D0 6.659999847412109D0)) (list (list 21.0D0 1676.5989990234375D0 0.0014732393901795149D0 6.670000076293945D0)) (list (list 21.0D0 1675.526123046875D0 0.0015167536912485958D0 6.679999828338623D0)) (list (list 21.0D0 1674.6531982421875D0 0.0014985891757532955D0 6.690000057220459D0)) (list (list 21.0D0 1674.210205078125D0 0.0014275931753218174D0 6.699999809265137D0)) (list (list 21.0D0 1674.422607421875D0 0.0013252292992547155D0 6.710000038146973D0)) (list (list 21.0D0 1675.8758544921875D0 0.0012446976033970714D0 6.71999979019165D0)) (list (list 21.0D0 1677.2677001953125D0 0.0012576609151437879D0 6.730000019073486D0)) (list (list 21.0D0 1677.726806640625D0 0.0013301513390615583D0 6.739999771118164D0)) (list (list 21.0D0 1677.336181640625D0 0.001424818648956716D0 6.75D0)) (list (list 21.0D0 1676.7353515625D0 0.0014961790293455124D0 6.759999752044678D0)) (list (list 21.0D0 1676.9921875D0 0.0014562677824869752D0 6.769999980926514D0)) (list (list 21.0D0 1677.00830078125D0 0.0013556004269048572D0 6.779999732971191D0)) (list (list 21.0D0 1676.7742919921875D0 0.0012367437593638897D0 6.789999961853027D0)) (list (list 21.0D0 1677.2008056640625D0 0.0011099966941401363D0 6.799999713897705D0)) (list (list 21.0D0 1679.4449462890625D0 9.776236256584526D-4 6.809999942779541D0)) (list (list 21.0D0 1681.5887451171875D0 9.339082753285766D-4 6.819999694824219D0)) (list (list 21.0D0 1680.7257080078125D0 9.435953688807786D-4 6.829999923706055D0)) (list (list 21.0D0 1678.2459716796875D0 0.0010601626709103585D0 6.839999675750732D0)) (list (list 21.0D0 1675.9158935546875D0 0.001266156556084752D0 6.849999904632568D0)) (list (list 21.0D0 1675.5242919921875D0 0.0015068897046148777D0 6.859999656677246D0)) (list (list 21.0D0 1675.4697265625D0 0.0017588408663868905D0 6.869999885559082D0)) (list (list 21.0D0 1674.779541015625D0 0.0020228379871696234D0 6.87999963760376D0)) (list (list 21.0D0 1673.9456787109375D0 0.0022652042098343373D0 6.889999866485596D0)) (list (list 21.0D0 1673.184326171875D0 0.002459797775372863D0 6.899999618530273D0)) (list (list 21.0D0 1672.57177734375D0 0.0025863696355372668D0 6.909999847412109D0)) (list (list 21.0D0 1671.899169921875D0 0.002640344202518463D0 6.920000076293945D0)) (list (list 21.0D0 1671.556884765625D0 0.0026096159126609564D0 6.929999828338623D0)) (list (list 21.0D0 1671.8310546875D0 0.002477438887581229D0 6.940000057220459D0)) (list (list 21.0D0 1672.6546630859375D0 0.0022638197988271714D0 6.949999809265137D0)) (list (list 21.0D0 1673.75244140625D0 0.0020148861221969128D0 6.960000038146973D0)) (list (list 21.0D0 1674.662109375D0 0.00182431866414845D0 6.96999979019165D0)) (list (list 21.0D0 1675.78955078125D0 0.001717902603559196D0 6.980000019073486D0)) (list (list 21.0D0 1677.3006591796875D0 0.0016936450265347958D0 6.989999771118164D0)) (list (list 21.0D0 1678.7823486328125D0 0.0017525526927784086D0 7.0D0)) (list (list 21.0D0 1679.5316162109375D0 0.001889940002001822D0 7.009999752044678D0)) (list (list 21.0D0 1678.64794921875D0 0.0020758050959557295D0 7.019999980926514D0)) (list (list 21.0D0 1676.810791015625D0 0.0022792129311710596D0 7.029999732971191D0)) (list (list 21.0D0 1674.74755859375D0 0.0024568899534642697D0 7.039999961853027D0)) (list (list 21.0D0 1672.6766357421875D0 0.0025790464133024216D0 7.049999713897705D0)) (list (list 21.0D0 1670.5128173828125D0 0.0026243687607347966D0 7.059999942779541D0)) (list (list 21.0D0 1667.0322265625D0 0.0025843975599855185D0 7.069999694824219D0)) (list (list 21.0D0 1661.1298828125D0 0.0025299026165157557D0 7.079999923706055D0)) (list (list 21.0D0 1654.5689697265625D0 0.002491281135007739D0 7.089999675750732D0)) (list (list 21.0D0 1648.121826171875D0 0.0023944899439811707D0 7.099999904632568D0)) (list (list 21.0D0 1641.7515869140625D0 0.002119649201631546D0 7.109999656677246D0)) (list (list 21.0D0 1630.6568603515625D0 0.0015185291413217783D0 7.119999885559082D0)) (list (list 21.0D0 1626.036865234375D0 8.992251823656261D-4 7.12999963760376D0)) (list (list 21.0D0 1625.9462890625D0 4.2726355604827404D-4 7.139999866485596D0)) (list (list 21.0D0 1622.3621826171875D0 1.7710495740175247D-4 7.149999618530273D0)) (list (list 21.0D0 1608.217529296875D0 1.544154220027849D-4 7.159999847412109D0)) (list (list 21.0D0 1613.6588134765625D0 1.2585753574967384D-4 7.170000076293945D0)) (list (list 21.0D0 1615.74853515625D0 9.801850683288649D-5 7.179999828338623D0)) (list (list 21.0D0 1602.5504150390625D0 7.969051512191072D-5 7.190000057220459D0)) (list (list 21.0D0 1579.25048828125D0 8.630246156826616D-5 7.199999809265137D0)) (list (list 21.0D0 1559.028564453125D0 1.2453919043764472D-4 7.210000038146973D0)) (list (list 21.0D0 1560.0980224609375D0 9.567053348291665D-5 7.21999979019165D0)) (list (list 21.0D0 1581.7864990234375D0 5.441248868010007D-5 7.230000019073486D0)) (list (list 21.0D0 1604.09375D0 4.635184450307861D-5 7.239999771118164D0)) (list (list 21.0D0 1623.4654541015625D0 6.99964293744415D-5 7.25D0)) (list (list 21.0D0 1642.4754638671875D0 1.0444696090416983D-4 7.259999752044678D0)) (list (list 21.0D0 1663.37255859375D0 1.3143045362085104D-4 7.269999980926514D0)) (list (list 21.0D0 1669.3360595703125D0 1.776600256562233D-4 7.279999732971191D0)) (list (list 21.0D0 1671.08349609375D0 2.1208588441368193D-4 7.289999961853027D0)) (list (list 21.0D0 1671.781494140625D0 2.242255723103881D-4 7.299999713897705D0)) (list (list 21.0D0 1671.84228515625D0 2.1232407016213983D-4 7.309999942779541D0)) (list (list 21.0D0 1669.60302734375D0 1.7782529175747186D-4 7.319999694824219D0)) (list (list 21.0D0 1665.752685546875D0 1.540986995678395D-4 7.329999923706055D0)) (list (list 21.0D0 1661.6209716796875D0 1.457772305002436D-4 7.339999675750732D0)) (list (list 21.0D0 1657.69384765625D0 1.4657799329143018D-4 7.349999904632568D0)) (list (list 21.0D0 1654.268798828125D0 1.4459405792877078D-4 7.359999656677246D0)) (list (list 21.0D0 1652.52490234375D0 1.1986288882326335D-4 7.369999885559082D0)) (list (list 21.0D0 1651.3572998046875D0 9.383517317473889D-5 7.37999963760376D0)) (list (list 21.0D0 1651.1553955078125D0 7.602555706398562D-5 7.389999866485596D0)) (list (list 21.0D0 1652.0679931640625D0 6.695988849969581D-5 7.399999618530273D0)) (list (list 21.0D0 1653.7364501953125D0 6.283461698330939D-5 7.409999847412109D0)) (list (list 21.0D0 1652.697265625D0 5.376923945732415D-5 7.419999599456787D0)) (list (list 21.0D0 1651.90673828125D0 4.448104300536215D-5 7.429999828338623D0)) (list (list 21.0D0 1662.7369384765625D0 4.343019099906087D-5 7.440000057220459D0)) (list (list 21.0D0 1674.730224609375D0 4.748428182210773D-5 7.449999809265137D0)) (list (list 21.0D0 1673.4395751953125D0 4.920797437080182D-5 7.460000038146973D0)) (list (list 21.0D0 1675.9854736328125D0 4.1328006773255766D-5 7.46999979019165D0)) (list (list 21.0D0 1676.3953857421875D0 1.3159888112568297D-5 7.480000019073486D0)) (list (list 22.0D0 2339.917236328125D0 0.0014125360175967217D0 4.389999866485596D0)) (list (list 22.0D0 2340.438232421875D0 0.001746298628859222D0 4.400000095367432D0)) (list (list 22.0D0 2339.30322265625D0 0.002158320974558592D0 4.409999847412109D0)) (list (list 22.0D0 2338.259521484375D0 0.0024207509122788906D0 4.420000076293945D0)) (list (list 22.0D0 2337.82958984375D0 0.002389442641288042D0 4.429999828338623D0)) (list (list 22.0D0 2337.659912109375D0 0.0022360109724104405D0 4.440000057220459D0)) (list (list 22.0D0 2337.490234375D0 0.002082586521282792D0 4.449999809265137D0)) (list (list 22.0D0 2337.320556640625D0 0.0019291548524051905D0 4.460000038146973D0)) (list (list 22.0D0 2335.4453125D0 0.0018785097636282444D0 4.46999979019165D0)) (list (list 22.0D0 2334.87158203125D0 0.001958319218829274D0 4.480000019073486D0)) (list (list 22.0D0 2334.88427734375D0 0.0020910808816552163D0 4.489999771118164D0)) (list (list 22.0D0 2334.89697265625D0 0.002223848830908537D0 4.5D0)) (list (list 22.0D0 2334.90966796875D0 0.0023566107265651226D0 4.509999752044678D0)) (list (list 22.0D0 2335.546142578125D0 0.0023250735830515623D0 4.519999980926514D0)) (list (list 22.0D0 2338.05615234375D0 0.0023514200001955033D0 4.529999732971191D0)) (list (list 22.0D0 2341.336669921875D0 0.00240523018874228D0 4.539999961853027D0)) (list (list 22.0D0 2344.6171875D0 0.0024590378161519766D0 4.549999713897705D0)) (list (list 22.0D0 2347.89794921875D0 0.0025128480046987534D0 4.559999942779541D0)) (list (list 22.0D0 2346.018310546875D0 0.0026238905265927315D0 4.569999694824219D0)) (list (list 22.0D0 2343.424072265625D0 0.0029556930530816317D0 4.579999923706055D0)) (list (list 22.0D0 2342.837158203125D0 0.00317011377774179D0 4.589999675750732D0)) (list (list 22.0D0 2344.861572265625D0 0.0031388988718390465D0 4.599999904632568D0)) (list (list 22.0D0 2346.88623046875D0 0.003107683965936303D0 4.610000133514404D0)) (list (list 22.0D0 2349.536376953125D0 0.002565607661381364D0 4.619999885559082D0)) (list (list 22.0D0 2355.60888671875D0 0.0018378003733232618D0 4.630000114440918D0)) (list (list 22.0D0 2359.63525390625D0 8.898320375010371D-4 4.639999866485596D0)) (list (list 23.0D0 2283.91357421875D0 0.0032121583353728056D0 4.880000114440918D0)) (list (list 23.0D0 2279.966552734375D0 0.003226822940632701D0 4.889999866485596D0)) (list (list 23.0D0 2273.7236328125D0 0.002797030145302415D0 4.900000095367432D0)) (list (list 23.0D0 2268.21337890625D0 0.0025113795418292284D0 4.909999847412109D0)) (list (list 23.0D0 2265.813720703125D0 0.002590124262496829D0 4.920000076293945D0)) (list (list 23.0D0 2263.249755859375D0 0.0026799123734235764D0 4.929999828338623D0)) (list (list 23.0D0 2260.601806640625D0 0.002618903061375022D0 4.940000057220459D0)) (list (list 23.0D0 2258.719482421875D0 0.002322582760825753D0 4.949999809265137D0)) (list (list 23.0D0 2259.43603515625D0 0.0017927957233041525D0 4.960000038146973D0)) (list (list 23.0D0 2262.010498046875D0 0.0013848397647961975D0 4.96999979019165D0)) (list (list 23.0D0 2268.1689453125D0 0.001343197887763381D0 4.980000019073486D0)) (list (list 23.0D0 2272.8369140625D0 0.0016227003652602435D0 4.989999771118164D0)) (list (list 23.0D0 2274.301513671875D0 0.002116661285981536D0 5.0D0)) (list (list 23.0D0 2275.44921875D0 0.0026524376589804888D0 5.009999752044678D0)) (list (list 23.0D0 2277.1171875D0 0.002703143283724785D0 5.019999980926514D0)) (list (list 23.0D0 2278.56298828125D0 0.0023271418176591397D0 5.029999732971191D0)) (list (list 23.0D0 2288.652587890625D0 0.0025147192645817995D0 5.039999961853027D0)) (list (list 23.0D0 2301.25048828125D0 0.003150645177811384D0 5.049999713897705D0)) (list (list 23.0D0 2290.249755859375D0 0.0026575203519314528D0 5.059999942779541D0)) (list (list 23.0D0 2279.24951171875D0 0.0021644190419465304D0 5.069999694824219D0)) (list (list 23.0D0 2268.248779296875D0 0.001671294216066599D0 5.079999923706055D0)) (list (list 23.0D0 2263.33251953125D0 0.0013815746642649174D0 5.089999675750732D0)) (list (list 23.0D0 2264.645263671875D0 0.0012655702885240317D0 5.099999904632568D0)) (list (list 23.0D0 2264.817138671875D0 9.967200458049775D-4 5.109999656677246D0)) (list (list 23.0D0 2281.03759765625D0 0.001199081540107727D0 5.119999885559082D0)) (list (list 23.0D0 2285.45751953125D0 5.195625708438456D-4 5.130000114440918D0)) (list (list 24.0D0 2309.48779296875D0 0.00492003932595253D0 5.039999961853027D0)) (list (list 24.0D0 2310.839599609375D0 0.00466382410377264D0 5.049999713897705D0)) (list (list 24.0D0 2312.191162109375D0 0.0044075967743992806D0 5.059999942779541D0)) (list (list 24.0D0 2313.54296875D0 0.004151381552219391D0 5.069999694824219D0)) (list (list 24.0D0 2312.541748046875D0 0.004701811820268631D0 5.079999923706055D0)) (list (list 24.0D0 2311.530029296875D0 0.005593530833721161D0 5.089999675750732D0)) (list (list 24.0D0 2311.8330078125D0 0.006519284099340439D0 5.099999904632568D0)) (list (list 24.0D0 2313.42138671875D0 0.007403021212667227D0 5.109999656677246D0)) (list (list 24.0D0 2313.736328125D0 0.007993612438440323D0 5.119999885559082D0)) (list (list 24.0D0 2312.850830078125D0 0.008303830400109291D0 5.130000114440918D0)) (list (list 24.0D0 2311.73046875D0 0.0084464056417346D0 5.139999866485596D0)) (list (list 24.0D0 2310.974365234375D0 0.00845956988632679D0 5.150000095367432D0)) (list (list 24.0D0 2310.728759765625D0 0.008284009993076325D0 5.159999847412109D0)) (list (list 24.0D0 2309.983154296875D0 0.008167334832251072D0 5.170000076293945D0)) (list (list 24.0D0 2309.1181640625D0 0.008430670015513897D0 5.179999828338623D0)) (list (list 24.0D0 2308.802001953125D0 0.008945904672145844D0 5.190000057220459D0)) (list (list 24.0D0 2309.33935546875D0 0.009528490714728833D0 5.199999809265137D0)) (list (list 24.0D0 2310.616455078125D0 0.009934171102941037D0 5.210000038146973D0)) (list (list 24.0D0 2311.374755859375D0 0.00983345229178667D0 5.21999979019165D0)) (list (list 24.0D0 2311.253662109375D0 0.00926961936056614D0 5.230000019073486D0)) (list (list 24.0D0 2310.09130859375D0 0.008526050485670567D0 5.239999771118164D0)) (list (list 24.0D0 2308.26416015625D0 0.007986951619386673D0 5.25D0)) (list (list 24.0D0 2306.762939453125D0 0.00815932359546423D0 5.259999752044678D0)) (list (list 24.0D0 2306.8837890625D0 0.009010710753500462D0 5.269999980926514D0)) (list (list 24.0D0 2308.54638671875D0 0.00969898421317339D0 5.279999732971191D0)) (list (list 24.0D0 2310.783203125D0 0.009952732361853123D0 5.289999961853027D0)) (list (list 24.0D0 2312.790771484375D0 0.009637833572924137D0 5.299999713897705D0)) (list (list 24.0D0 2313.951904296875D0 0.008757767267525196D0 5.309999942779541D0)) (list (list 24.0D0 2313.1953125D0 0.007573358714580536D0 5.319999694824219D0)) (list (list 24.0D0 2310.93505859375D0 0.0067498693242669106D0 5.329999923706055D0)) (list (list 24.0D0 2308.7294921875D0 0.006462499964982271D0 5.339999675750732D0)) (list (list 24.0D0 2307.598388671875D0 0.006660541519522667D0 5.349999904632568D0)) (list (list 24.0D0 2307.97607421875D0 0.007055078633129597D0 5.359999656677246D0)) (list (list 24.0D0 2309.1337890625D0 0.007369637954980135D0 5.369999885559082D0)) (list (list 24.0D0 2309.867919921875D0 0.007384106982499361D0 5.380000114440918D0)) (list (list 24.0D0 2310.0712890625D0 0.007188630755990744D0 5.389999866485596D0)) (list (list 24.0D0 2309.93359375D0 0.006953690201044083D0 5.400000095367432D0)) (list (list 24.0D0 2309.95166015625D0 0.00693377573043108D0 5.409999847412109D0)) (list (list 24.0D0 2310.9267578125D0 0.0073143853805959225D0 5.420000076293945D0)) (list (list 24.0D0 2311.9716796875D0 0.00781270768493414D0 5.429999828338623D0)) (list (list 24.0D0 2312.53564453125D0 0.008217777125537396D0 5.440000057220459D0)) (list (list 24.0D0 2312.411376953125D0 0.008407174609601498D0 5.449999809265137D0)) (list (list 24.0D0 2311.7451171875D0 0.008349496871232987D0 5.460000038146973D0)) (list (list 24.0D0 2311.288330078125D0 0.00814911350607872D0 5.46999979019165D0)) (list (list 24.0D0 2311.56494140625D0 0.007961715571582318D0 5.480000019073486D0)) (list (list 24.0D0 2312.312255859375D0 0.00787811167538166D0 5.489999771118164D0)) (list (list 24.0D0 2313.109619140625D0 0.007926205173134804D0 5.5D0)) (list (list 24.0D0 2313.38134765625D0 0.008070418611168862D0 5.509999752044678D0)) (list (list 24.0D0 2313.415283203125D0 0.008304130285978318D0 5.519999980926514D0)) (list (list 24.0D0 2313.957275390625D0 0.008662707172334195D0 5.529999732971191D0)) (list (list 24.0D0 2314.72216796875D0 0.00909323152154684D0 5.539999961853027D0)) (list (list 24.0D0 2315.28564453125D0 0.009468981064856053D0 5.549999713897705D0)) (list (list 24.0D0 2315.09033203125D0 0.009591378271579743D0 5.559999942779541D0)) (list (list 24.0D0 2314.59375D0 0.00949783157557249D0 5.569999694824219D0)) (list (list 24.0D0 2314.631103515625D0 0.00956454873085022D0 5.579999923706055D0)) (list (list 24.0D0 2314.957763671875D0 0.009854048490524292D0 5.589999675750732D0)) (list (list 24.0D0 2315.21826171875D0 0.01030398067086935D0 5.599999904632568D0)) (list (list 24.0D0 2314.9521484375D0 0.010730648413300515D0 5.609999656677246D0)) (list (list 24.0D0 2314.19091796875D0 0.010873761959373951D0 5.619999885559082D0)) (list (list 24.0D0 2313.580078125D0 0.010796230286359787D0 5.62999963760376D0)) (list (list 24.0D0 2313.10693359375D0 0.010460065677762032D0 5.639999866485596D0)) (list (list 24.0D0 2312.62451171875D0 0.009876763448119164D0 5.650000095367432D0)) (list (list 24.0D0 2311.862060546875D0 0.009108572266995907D0 5.659999847412109D0)) (list (list 24.0D0 2310.901611328125D0 0.008563349954783917D0 5.670000076293945D0)) (list (list 24.0D0 2310.309814453125D0 0.008333565667271614D0 5.679999828338623D0)) (list (list 24.0D0 2310.213623046875D0 0.008307985961437226D0 5.690000057220459D0)) (list (list 24.0D0 2310.58984375D0 0.008437706157565117D0 5.699999809265137D0)) (list (list 24.0D0 2311.27197265625D0 0.0087286913767457D0 5.710000038146973D0)) (list (list 24.0D0 2311.837646484375D0 0.009291265159845353D0 5.71999979019165D0)) (list (list 24.0D0 2311.7470703125D0 0.009666156955063343D0 5.730000019073486D0)) (list (list 24.0D0 2310.958740234375D0 0.009655247442424298D0 5.739999771118164D0)) (list (list 24.0D0 2309.947509765625D0 0.009273541159927845D0 5.75D0)) (list (list 24.0D0 2309.653076171875D0 0.008734037168323994D0 5.759999752044678D0)) (list (list 24.0D0 2310.614013671875D0 0.008626550436019898D0 5.769999980926514D0)) (list (list 24.0D0 2311.839111328125D0 0.008976485580205918D0 5.779999732971191D0)) (list (list 24.0D0 2312.5361328125D0 0.009363468736410141D0 5.789999961853027D0)) (list (list 24.0D0 2312.39892578125D0 0.009468338452279568D0 5.799999713897705D0)) (list (list 24.0D0 2311.5546875D0 0.009060008451342583D0 5.809999942779541D0)) (list (list 24.0D0 2310.9248046875D0 0.008279666304588318D0 5.819999694824219D0)) (list (list 24.0D0 2310.931396484375D0 0.007699514273554087D0 5.829999923706055D0)) (list (list 24.0D0 2311.281982421875D0 0.007495241239666939D0 5.839999675750732D0)) (list (list 24.0D0 2311.72607421875D0 0.007644089870154858D0 5.849999904632568D0)) (list (list 24.0D0 2312.0419921875D0 0.007948622107505799D0 5.859999656677246D0)) (list (list 24.0D0 2312.177490234375D0 0.008117763325572014D0 5.869999885559082D0)) (list (list 24.0D0 2312.36962890625D0 0.008289895951747895D0 5.87999963760376D0)) (list (list 24.0D0 2312.74462890625D0 0.008532100357115269D0 5.889999866485596D0)) (list (list 24.0D0 2313.301025390625D0 0.008848716504871846D0 5.900000095367432D0)) (list (list 24.0D0 2313.923095703125D0 0.00919352751225233D0 5.909999847412109D0)) (list (list 24.0D0 2314.108642578125D0 0.009613201953470707D0 5.920000076293945D0)) (list (list 24.0D0 2314.02685546875D0 0.010251134634017945D0 5.929999828338623D0)) (list (list 24.0D0 2313.8359375D0 0.010959027335047722D0 5.940000057220459D0)) (list (list 24.0D0 2313.669189453125D0 0.011509335599839688D0 5.949999809265137D0)) (list (list 24.0D0 2313.647705078125D0 0.011610092595219612D0 5.960000038146973D0)) (list (list 24.0D0 2313.93115234375D0 0.01110648550093174D0 5.96999979019165D0)) (list (list 24.0D0 2314.197265625D0 0.010681064799427987D0 5.980000019073486D0)) (list (list 24.0D0 2314.21826171875D0 0.010500465519726277D0 5.989999771118164D0)) (list (list 24.0D0 2313.859375D0 0.010515982285141945D0 6.0D0)) (list (list 24.0D0 2313.080322265625D0 0.010502524673938752D0 6.009999752044678D0)) (list (list 24.0D0 2312.5947265625D0 0.010065135546028614D0 6.019999980926514D0)) (list (list 24.0D0 2312.594970703125D0 0.009443764574825764D0 6.029999732971191D0)) (list (list 24.0D0 2312.8154296875D0 0.00892147608101368D0 6.039999961853027D0)) (list (list 24.0D0 2312.97314453125D0 0.008654522709548474D0 6.049999713897705D0)) (list (list 24.0D0 2312.76513671875D0 0.008701245300471783D0 6.059999942779541D0)) (list (list 24.0D0 2312.10888671875D0 0.008999012410640717D0 6.069999694824219D0)) (list (list 24.0D0 2311.47265625D0 0.009345319122076035D0 6.079999923706055D0)) (list (list 24.0D0 2311.1162109375D0 0.00965871848165989D0 6.089999675750732D0)) (list (list 24.0D0 2311.14501953125D0 0.009886153973639012D0 6.099999904632568D0)) (list (list 24.0D0 2311.5380859375D0 0.00999393966048956D0 6.109999656677246D0)) (list (list 24.0D0 2312.007568359375D0 0.009908734820783139D0 6.119999885559082D0)) (list (list 24.0D0 2312.041259765625D0 0.009625120088458062D0 6.12999963760376D0)) (list (list 24.0D0 2311.49267578125D0 0.009187157265841961D0 6.139999866485596D0)) (list (list 24.0D0 2310.53662109375D0 0.008717208169400692D0 6.150000095367432D0)) (list (list 24.0D0 2309.62548828125D0 0.008401237428188324D0 6.159999847412109D0)) (list (list 24.0D0 2310.035888671875D0 0.008457569405436516D0 6.170000076293945D0)) (list (list 24.0D0 2311.233154296875D0 0.008960585109889508D0 6.179999828338623D0)) (list (list 24.0D0 2312.343994140625D0 0.009759983979165554D0 6.190000057220459D0)) (list (list 24.0D0 2312.889404296875D0 0.010635444894433022D0 6.199999809265137D0)) (list (list 24.0D0 2312.67431640625D0 0.011306999251246453D0 6.210000038146973D0)) (list (list 24.0D0 2312.109375D0 0.011577506549656392D0 6.21999979019165D0)) (list (list 24.0D0 2311.761962890625D0 0.011691207997500897D0 6.230000019073486D0)) (list (list 24.0D0 2311.6982421875D0 0.011794978752732277D0 6.239999771118164D0)) (list (list 24.0D0 2311.908203125D0 0.01193452812731266D0 6.25D0)) (list (list 24.0D0 2312.319580078125D0 0.012082838453352452D0 6.259999752044678D0)) (list (list 24.0D0 2312.857177734375D0 0.012033721432089806D0 6.269999980926514D0)) (list (list 24.0D0 2313.523193359375D0 0.011890368536114693D0 6.279999732971191D0)) (list (list 24.0D0 2314.21142578125D0 0.011836494319140911D0 6.289999961853027D0)) (list (list 24.0D0 2314.717529296875D0 0.011950566433370114D0 6.299999713897705D0)) (list (list 24.0D0 2314.771728515625D0 0.012239099480211735D0 6.309999942779541D0)) (list (list 24.0D0 2314.150634765625D0 0.012662602588534356D0 6.319999694824219D0)) (list (list 24.0D0 2313.50146484375D0 0.013184729032218457D0 6.329999923706055D0)) (list (list 24.0D0 2312.9736328125D0 0.01371228601783514D0 6.339999675750732D0)) (list (list 24.0D0 2312.620361328125D0 0.014122262597084046D0 6.349999904632568D0)) (list (list 24.0D0 2312.42626953125D0 0.014268690720200539D0 6.359999656677246D0)) (list (list 24.0D0 2312.279296875D0 0.013966316357254982D0 6.369999885559082D0)) (list (list 24.0D0 2312.02978515625D0 0.013346566818654538D0 6.37999963760376D0)) (list (list 24.0D0 2311.557861328125D0 0.012496588751673699D0 6.389999866485596D0)) (list (list 24.0D0 2310.920166015625D0 0.011532875709235669D0 6.399999618530273D0)) (list (list 24.0D0 2310.31591796875D0 0.01061243936419487D0 6.409999847412109D0)) (list (list 24.0D0 2310.483154296875D0 0.01012328825891018D0 6.420000076293945D0)) (list (list 24.0D0 2311.234375D0 0.010254365392029286D0 6.429999828338623D0)) (list (list 24.0D0 2312.0634765625D0 0.010849026031792164D0 6.440000057220459D0)) (list (list 24.0D0 2312.5810546875D0 0.011658466421067715D0 6.449999809265137D0)) (list (list 24.0D0 2312.489501953125D0 0.01235374715179205D0 6.460000038146973D0)) (list (list 24.0D0 2312.12158203125D0 0.012596623040735722D0 6.46999979019165D0)) (list (list 24.0D0 2312.12890625D0 0.01255023293197155D0 6.480000019073486D0)) (list (list 24.0D0 2312.512451171875D0 0.012457042932510376D0 6.489999771118164D0)) (list (list 24.0D0 2313.10400390625D0 0.012487649917602539D0 6.5D0)) (list (list 24.0D0 2313.608642578125D0 0.01275999192148447D0 6.509999752044678D0)) (list (list 24.0D0 2313.56103515625D0 0.013084963895380497D0 6.519999980926514D0)) (list (list 24.0D0 2312.938720703125D0 0.013027656823396683D0 6.529999732971191D0)) (list (list 24.0D0 2312.0888671875D0 0.012599856592714787D0 6.539999961853027D0)) (list (list 24.0D0 2311.4189453125D0 0.011939012445509434D0 6.549999713897705D0)) (list (list 24.0D0 2311.363037109375D0 0.011281552724540234D0 6.559999942779541D0)) (list (list 24.0D0 2311.935302734375D0 0.011022085323929787D0 6.569999694824219D0)) (list (list 24.0D0 2312.408447265625D0 0.011030693538486958D0 6.579999923706055D0)) (list (list 24.0D0 2312.69287109375D0 0.011140601709485054D0 6.589999675750732D0)) (list (list 24.0D0 2312.9072265625D0 0.011309093795716763D0 6.599999904632568D0)) (list (list 24.0D0 2313.279296875D0 0.011556217446923256D0 6.609999656677246D0)) (list (list 24.0D0 2313.780029296875D0 0.011918038129806519D0 6.619999885559082D0)) (list (list 24.0D0 2314.048095703125D0 0.01233772374689579D0 6.62999963760376D0)) (list (list 24.0D0 2314.19384765625D0 0.012822822667658329D0 6.639999866485596D0)) (list (list 24.0D0 2314.2880859375D0 0.013315023854374886D0 6.649999618530273D0)) (list (list 24.0D0 2314.366943359375D0 0.013697655871510506D0 6.659999847412109D0)) (list (list 24.0D0 2314.1025390625D0 0.013536354526877404D0 6.670000076293945D0)) (list (list 24.0D0 2313.397705078125D0 0.01287103071808815D0 6.679999828338623D0)) (list (list 24.0D0 2312.622314453125D0 0.012014105916023255D0 6.690000057220459D0)) (list (list 24.0D0 2312.186279296875D0 0.011181985959410668D0 6.699999809265137D0)) (list (list 24.0D0 2312.493896484375D0 0.010562007315456868D0 6.710000038146973D0)) (list (list 24.0D0 2313.4248046875D0 0.01046701893210411D0 6.71999979019165D0)) (list (list 24.0D0 2313.979248046875D0 0.010790823958814145D0 6.730000019073486D0)) (list (list 24.0D0 2314.1064453125D0 0.011317356489598751D0 6.739999771118164D0)) (list (list 24.0D0 2313.95556640625D0 0.011870439164340496D0 6.75D0)) (list (list 24.0D0 2313.78759765625D0 0.012280892580747605D0 6.759999752044678D0)) (list (list 24.0D0 2313.685791015625D0 0.012374251149594784D0 6.769999980926514D0)) (list (list 24.0D0 2313.7080078125D0 0.012388475239276886D0 6.779999732971191D0)) (list (list 24.0D0 2313.82568359375D0 0.012495568953454495D0 6.789999961853027D0)) (list (list 24.0D0 2313.9619140625D0 0.012736694887280465D0 6.799999713897705D0)) (list (list 24.0D0 2314.021484375D0 0.013079533353447914D0 6.809999942779541D0)) (list (list 24.0D0 2314.08203125D0 0.013418990187346936D0 6.819999694824219D0)) (list (list 24.0D0 2314.281982421875D0 0.013774801976978779D0 6.829999923706055D0)) (list (list 24.0D0 2314.22802734375D0 0.014049457386136055D0 6.839999675750732D0)) (list (list 24.0D0 2313.6689453125D0 0.014164179563522339D0 6.849999904632568D0)) (list (list 24.0D0 2312.512451171875D0 0.014072403311729432D0 6.859999656677246D0)) (list (list 24.0D0 2311.74267578125D0 0.013984891586005688D0 6.869999885559082D0)) (list (list 24.0D0 2312.02685546875D0 0.014137736521661282D0 6.87999963760376D0)) (list (list 24.0D0 2312.927978515625D0 0.01465813722461462D0 6.889999866485596D0)) (list (list 24.0D0 2313.963134765625D0 0.01547104399651289D0 6.899999618530273D0)) (list (list 24.0D0 2314.6201171875D0 0.016368944197893143D0 6.909999847412109D0)) (list (list 24.0D0 2314.755859375D0 0.016905473545193672D0 6.920000076293945D0)) (list (list 24.0D0 2314.99365234375D0 0.017031719908118248D0 6.929999828338623D0)) (list (list 24.0D0 2315.48486328125D0 0.016878612339496613D0 6.940000057220459D0)) (list (list 24.0D0 2316.149658203125D0 0.016604317352175713D0 6.949999809265137D0)) (list (list 24.0D0 2316.783203125D0 0.01639425754547119D0 6.960000038146973D0)) (list (list 24.0D0 2317.07568359375D0 0.016418946906924248D0 6.96999979019165D0)) (list (list 24.0D0 2317.250732421875D0 0.016544638201594353D0 6.980000019073486D0)) (list (list 24.0D0 2317.30908203125D0 0.016599271446466446D0 6.989999771118164D0)) (list (list 24.0D0 2317.170654296875D0 0.016484612599015236D0 7.0D0)) (list (list 24.0D0 2316.75048828125D0 0.016135623678565026D0 7.009999752044678D0)) (list (list 24.0D0 2316.243408203125D0 0.015451882034540177D0 7.019999980926514D0)) (list (list 24.0D0 2315.96044921875D0 0.014299855567514897D0 7.029999732971191D0)) (list (list 24.0D0 2315.694091796875D0 0.012733920477330685D0 7.039999961853027D0)) (list (list 24.0D0 2315.20361328125D0 0.010924468748271466D0 7.049999713897705D0)) (list (list 24.0D0 2314.237060546875D0 0.009116815403103829D0 7.059999942779541D0)) (list (list 24.0D0 2312.592041015625D0 0.007583671249449253D0 7.069999694824219D0)) (list (list 24.0D0 2309.67431640625D0 0.0061538368463516236D0 7.079999923706055D0)) (list (list 24.0D0 2304.77978515625D0 0.004725995473563671D0 7.089999675750732D0)) (list (list 24.0D0 2297.390625D0 0.0033521198201924563D0 7.099999904632568D0)) (list (list 24.0D0 2287.754638671875D0 0.002140512689948082D0 7.109999656677246D0)) (list (list 24.0D0 2282.212646484375D0 0.0011314526200294495D0 7.119999885559082D0)) (list (list 24.0D0 2281.813232421875D0 4.8547759070061147D-4 7.12999963760376D0)) (list (list 24.0D0 2297.53662109375D0 3.3426377922296524D-4 7.139999866485596D0)) (list (list 24.0D0 2315.916259765625D0 4.417901218403131D-4 7.149999618530273D0)) (list (list 24.0D0 2316.52197265625D0 4.164140555076301D-4 7.159999847412109D0)) (list (list 24.0D0 2316.52197265625D0 6.190258864080534D-5 7.170000076293945D0)) (list (list 25.0D0 852.1275634765625D0 0.0034070853143930436D0 5.119999885559082D0)) (list (list 25.0D0 853.82080078125D0 0.003708122530952096D0 5.130000114440918D0)) (list (list 25.0D0 855.3780517578125D0 0.00380916241556406D0 5.139999866485596D0)) (list (list 25.0D0 856.9354248046875D0 0.0039102076552808285D0 5.150000095367432D0)) (list (list 25.0D0 858.4927368164063D0 0.004011247772723436D0 5.159999847412109D0)) (list (list 25.0D0 858.5174560546875D0 8.520974079146981D-4 5.170000076293945D0)) (list (list 26.0D0 1555.8817138671875D0 0.0023236351553350687D0 5.429999828338623D0)) (list (list 26.0D0 1556.772705078125D0 0.003211319912225008D0 5.440000057220459D0)) (list (list 26.0D0 1556.5299072265625D0 0.0041250744834542275D0 5.449999809265137D0)) (list (list 26.0D0 1556.0792236328125D0 0.004991876892745495D0 5.460000038146973D0)) (list (list 26.0D0 1556.5291748046875D0 0.00585729768499732D0 5.46999979019165D0)) (list (list 26.0D0 1557.692138671875D0 0.006786229554563761D0 5.480000019073486D0)) (list (list 26.0D0 1559.1925048828125D0 0.007750340271741152D0 5.489999771118164D0)) (list (list 26.0D0 1560.625D0 0.008681850507855416D0 5.5D0)) (list (list 26.0D0 1561.5552978515625D0 0.009473150596022606D0 5.509999752044678D0)) (list (list 26.0D0 1562.056640625D0 0.010013013146817685D0 5.519999980926514D0)) (list (list 26.0D0 1562.443359375D0 0.010422027669847012D0 5.529999732971191D0)) (list (list 26.0D0 1562.712158203125D0 0.010757749900221825D0 5.539999961853027D0)) (list (list 26.0D0 1562.85302734375D0 0.011044759303331375D0 5.549999713897705D0)) (list (list 26.0D0 1562.847900390625D0 0.011274576187133789D0 5.559999942779541D0)) (list (list 26.0D0 1562.64013671875D0 0.011175103485584259D0 5.569999694824219D0)) (list (list 26.0D0 1562.298583984375D0 0.01067392062395811D0 5.579999923706055D0)) (list (list 26.0D0 1561.759521484375D0 0.009867030195891858D0 5.589999675750732D0)) (list (list 26.0D0 1560.981201171875D0 0.008899728767573834D0 5.599999904632568D0)) (list (list 26.0D0 1559.9476318359375D0 0.00796589907258749D0 5.609999656677246D0)) (list (list 26.0D0 1559.2735595703125D0 0.007180290296673775D0 5.619999885559082D0)) (list (list 26.0D0 1558.9930419921875D0 0.006378981750458479D0 5.62999963760376D0)) (list (list 26.0D0 1558.4049072265625D0 0.005541649181395769D0 5.639999866485596D0)) (list (list 26.0D0 1557.0859375D0 0.004726422019302845D0 5.650000095367432D0)) (list (list 26.0D0 1554.8856201171875D0 0.004064899403601885D0 5.659999847412109D0)) (list (list 26.0D0 1553.3984375D0 0.0036784678231924773D0 5.670000076293945D0)) (list (list 26.0D0 1552.7388916015625D0 0.003297447692602873D0 5.679999828338623D0)) (list (list 26.0D0 1551.989013671875D0 0.0028918583411723376D0 5.690000057220459D0)) (list (list 26.0D0 1550.7769775390625D0 0.0025012828409671784D0 5.699999809265137D0)) (list (list 26.0D0 1549.239501953125D0 0.002229671459645033D0 5.710000038146973D0)) (list (list 26.0D0 1549.1217041015625D0 0.002279412467032671D0 5.71999979019165D0)) (list (list 26.0D0 1550.109375D0 0.0024747182615101338D0 5.730000019073486D0)) (list (list 26.0D0 1551.7362060546875D0 0.002629342954605818D0 5.739999771118164D0)) (list (list 26.0D0 1553.2373046875D0 0.002587444381788373D0 5.75D0)) (list (list 26.0D0 1553.561767578125D0 0.0022230083122849465D0 5.759999752044678D0)) (list (list 26.0D0 1551.0623779296875D0 0.0017274976707994938D0 5.769999980926514D0)) (list (list 26.0D0 1549.2113037109375D0 0.0015777075896039606D0 5.779999732971191D0)) (list (list 26.0D0 1548.610595703125D0 0.001766106695868075D0 5.789999961853027D0)) (list (list 26.0D0 1549.2713623046875D0 0.002223920775577426D0 5.799999713897705D0)) (list (list 26.0D0 1550.6695556640625D0 0.0028221262618899346D0 5.809999942779541D0)) (list (list 26.0D0 1551.837158203125D0 0.00334845669567585D0 5.819999694824219D0)) (list (list 26.0D0 1553.535888671875D0 0.00382772134616971D0 5.829999923706055D0)) (list (list 26.0D0 1555.416259765625D0 0.0043411413207650185D0 5.839999675750732D0)) (list (list 26.0D0 1557.0274658203125D0 0.00490058958530426D0 5.849999904632568D0)) (list (list 26.0D0 1557.8392333984375D0 0.005459272302687168D0 5.859999656677246D0)) (list (list 26.0D0 1558.1729736328125D0 0.005959261208772659D0 5.869999885559082D0)) (list (list 26.0D0 1558.5936279296875D0 0.0064665027894079685D0 5.87999963760376D0)) (list (list 26.0D0 1559.13330078125D0 0.007005009334534407D0 5.889999866485596D0)) (list (list 26.0D0 1559.7208251953125D0 0.007577478885650635D0 5.900000095367432D0)) (list (list 26.0D0 1560.2017822265625D0 0.008169115521013737D0 5.909999847412109D0)) (list (list 26.0D0 1560.578857421875D0 0.008785517886281014D0 5.920000076293945D0)) (list (list 26.0D0 1561.137451171875D0 0.009478204883635044D0 5.929999828338623D0)) (list (list 26.0D0 1561.83837890625D0 0.010175292380154133D0 5.940000057220459D0)) (list (list 26.0D0 1562.526611328125D0 0.010736101306974888D0 5.949999809265137D0)) (list (list 26.0D0 1562.9503173828125D0 0.010962932370603085D0 5.960000038146973D0)) (list (list 26.0D0 1562.8243408203125D0 0.010618018917739392D0 5.96999979019165D0)) (list (list 26.0D0 1562.4718017578125D0 0.010092326439917088D0 5.980000019073486D0)) (list (list 26.0D0 1562.001220703125D0 0.009516684338450432D0 5.989999771118164D0)) (list (list 26.0D0 1561.4276123046875D0 0.008910000324249268D0 6.0D0)) (list (list 26.0D0 1560.692138671875D0 0.008207199163734913D0 6.009999752044678D0)) (list (list 26.0D0 1559.5225830078125D0 0.007329033222049475D0 6.019999980926514D0)) (list (list 26.0D0 1558.1937255859375D0 0.006584252696484327D0 6.029999732971191D0)) (list (list 26.0D0 1557.085205078125D0 0.0060770572163164616D0 6.039999961853027D0)) (list (list 26.0D0 1556.393798828125D0 0.005773539654910564D0 6.049999713897705D0)) (list (list 26.0D0 1556.1517333984375D0 0.005528132896870375D0 6.059999942779541D0)) (list (list 26.0D0 1555.48828125D0 0.005157947074621916D0 6.069999694824219D0)) (list (list 26.0D0 1554.53515625D0 0.0048342375084757805D0 6.079999923706055D0)) (list (list 26.0D0 1553.7427978515625D0 0.004594015888869762D0 6.089999675750732D0)) (list (list 26.0D0 1553.2125244140625D0 0.004382540471851826D0 6.099999904632568D0)) (list (list 26.0D0 1552.77734375D0 0.0040767309255898D0 6.109999656677246D0)) (list (list 26.0D0 1551.8121337890625D0 0.003606377402320504D0 6.119999885559082D0)) (list (list 26.0D0 1551.161376953125D0 0.0032064388506114483D0 6.12999963760376D0)) (list (list 26.0D0 1551.06201171875D0 0.0029635755345225334D0 6.139999866485596D0)) (list (list 26.0D0 1551.4102783203125D0 0.0029034793842583895D0 6.150000095367432D0)) (list (list 26.0D0 1551.84521484375D0 0.003004281548783183D0 6.159999847412109D0)) (list (list 26.0D0 1552.13427734375D0 0.0032544564455747605D0 6.170000076293945D0)) (list (list 26.0D0 1553.0069580078125D0 0.0036883947905153036D0 6.179999828338623D0)) (list (list 26.0D0 1554.2568359375D0 0.004370593465864658D0 6.190000057220459D0)) (list (list 26.0D0 1555.5733642578125D0 0.0052994717843830586D0 6.199999809265137D0)) (list (list 26.0D0 1556.5677490234375D0 0.006413894239813089D0 6.210000038146973D0)) (list (list 26.0D0 1557.1973876953125D0 0.007495154161006212D0 6.21999979019165D0)) (list (list 26.0D0 1557.997802734375D0 0.00844293087720871D0 6.230000019073486D0)) (list (list 26.0D0 1558.935791015625D0 0.009237240999937058D0 6.239999771118164D0)) (list (list 26.0D0 1559.8485107421875D0 0.009821069426834584D0 6.25D0)) (list (list 26.0D0 1560.4803466796875D0 0.010115602985024453D0 6.259999752044678D0)) (list (list 26.0D0 1560.6318359375D0 0.009992396458983422D0 6.269999980926514D0)) (list (list 26.0D0 1560.58251953125D0 0.009820894338190556D0 6.279999732971191D0)) (list (list 26.0D0 1560.5137939453125D0 0.009798739105463028D0 6.289999961853027D0)) (list (list 26.0D0 1560.518798828125D0 0.009944024495780468D0 6.299999713897705D0)) (list (list 26.0D0 1560.6138916015625D0 0.010137242265045643D0 6.309999942779541D0)) (list (list 26.0D0 1560.2791748046875D0 0.009864342398941517D0 6.319999694824219D0)) (list (list 26.0D0 1559.27490234375D0 0.009173556230962277D0 6.329999923706055D0)) (list (list 26.0D0 1558.070068359375D0 0.008392039686441422D0 6.339999675750732D0)) (list (list 26.0D0 1556.97705078125D0 0.007679394446313381D0 6.349999904632568D0)) (list (list 26.0D0 1556.1951904296875D0 0.007087226491421461D0 6.359999656677246D0)) (list (list 26.0D0 1555.255859375D0 0.006441424135118723D0 6.369999885559082D0)) (list (list 26.0D0 1553.9444580078125D0 0.005898634437471628D0 6.37999963760376D0)) (list (list 26.0D0 1552.9521484375D0 0.00563776632770896D0 6.389999866485596D0)) (list (list 26.0D0 1552.637451171875D0 0.005725703667849302D0 6.399999618530273D0)) (list (list 26.0D0 1553.1146240234375D0 0.006145704537630081D0 6.409999847412109D0)) (list (list 26.0D0 1553.7615966796875D0 0.006794091779738665D0 6.420000076293945D0)) (list (list 26.0D0 1554.2677001953125D0 0.007430362049490213D0 6.429999828338623D0)) (list (list 26.0D0 1554.9139404296875D0 0.007991163060069085D0 6.440000057220459D0)) (list (list 26.0D0 1555.779296875D0 0.008461818099021912D0 6.449999809265137D0)) (list (list 26.0D0 1556.80322265625D0 0.008866759948432446D0 6.460000038146973D0)) (list (list 26.0D0 1557.617431640625D0 0.009370071813464165D0 6.46999979019165D0)) (list (list 26.0D0 1558.31298828125D0 0.010018151253461838D0 6.480000019073486D0)) (list (list 26.0D0 1558.9879150390625D0 0.010662057437002659D0 6.489999771118164D0)) (list (list 26.0D0 1559.571533203125D0 0.011134767904877663D0 6.5D0)) (list (list 26.0D0 1559.883056640625D0 0.011258736252784729D0 6.509999752044678D0)) (list (list 26.0D0 1559.5015869140625D0 0.010902760550379753D0 6.519999980926514D0)) (list (list 26.0D0 1558.8594970703125D0 0.010416438803076744D0 6.529999732971191D0)) (list (list 26.0D0 1558.3795166015625D0 0.009932179003953934D0 6.539999961853027D0)) (list (list 26.0D0 1558.220703125D0 0.009535426273941994D0 6.549999713897705D0)) (list (list 26.0D0 1558.37548828125D0 0.009291824884712696D0 6.559999942779541D0)) (list (list 26.0D0 1558.5892333984375D0 0.009365438483655453D0 6.569999694824219D0)) (list (list 26.0D0 1558.892578125D0 0.009660115465521813D0 6.579999923706055D0)) (list (list 26.0D0 1559.2047119140625D0 0.010000722482800484D0 6.589999675750732D0)) (list (list 26.0D0 1559.473876953125D0 0.010264200158417225D0 6.599999904632568D0)) (list (list 26.0D0 1559.685302734375D0 0.01035844162106514D0 6.609999656677246D0)) (list (list 26.0D0 1560.19384765625D0 0.010304058901965619D0 6.619999885559082D0)) (list (list 26.0D0 1560.835205078125D0 0.01026828307658434D0 6.62999963760376D0)) (list (list 26.0D0 1561.0794677734375D0 0.010191082023084164D0 6.639999866485596D0)) (list (list 26.0D0 1560.687744140625D0 0.009995980188250542D0 6.649999618530273D0)) (list (list 26.0D0 1559.618408203125D0 0.009602122940123082D0 6.659999847412109D0)) (list (list 26.0D0 1558.2501220703125D0 0.008979070000350476D0 6.670000076293945D0)) (list (list 26.0D0 1556.9888916015625D0 0.00832080002874136D0 6.679999828338623D0)) (list (list 26.0D0 1556.060791015625D0 0.007847192697227002D0 6.690000057220459D0)) (list (list 26.0D0 1555.749755859375D0 0.007648276165127754D0 6.699999809265137D0)) (list (list 26.0D0 1556.354248046875D0 0.007739001885056496D0 6.710000038146973D0)) (list (list 26.0D0 1558.1744384765625D0 0.008143099956214428D0 6.71999979019165D0)) (list (list 26.0D0 1559.6407470703125D0 0.00875852257013321D0 6.730000019073486D0)) (list (list 26.0D0 1560.4700927734375D0 0.009367616847157479D0 6.739999771118164D0)) (list (list 26.0D0 1560.6058349609375D0 0.009796380996704102D0 6.75D0)) (list (list 26.0D0 1560.1571044921875D0 0.00989853497594595D0 6.759999752044678D0)) (list (list 26.0D0 1559.5169677734375D0 0.009633421897888184D0 6.769999980926514D0)) (list (list 26.0D0 1559.2105712890625D0 0.009342430159449578D0 6.779999732971191D0)) (list (list 26.0D0 1559.28857421875D0 0.009099669754505158D0 6.789999961853027D0)) (list (list 26.0D0 1559.5767822265625D0 0.008816956542432309D0 6.799999713897705D0)) (list (list 26.0D0 1559.719482421875D0 0.008309450931847096D0 6.809999942779541D0)) (list (list 26.0D0 1558.6644287109375D0 0.007189302705228329D0 6.819999694824219D0)) (list (list 26.0D0 1556.4619140625D0 0.005944154225289822D0 6.829999923706055D0)) (list (list 26.0D0 1554.2420654296875D0 0.004906247835606337D0 6.839999675750732D0)) (list (list 26.0D0 1552.55810546875D0 0.004160894080996513D0 6.849999904632568D0)) (list (list 26.0D0 1551.6546630859375D0 0.00365901505574584D0 6.859999656677246D0)) (list (list 26.0D0 1551.2347412109375D0 0.0032579097896814347D0 6.869999885559082D0)) (list (list 26.0D0 1550.608642578125D0 0.002792154671624303D0 6.87999963760376D0)) (list (list 26.0D0 1549.387451171875D0 0.0022969183046370745D0 6.889999866485596D0)) (list (list 26.0D0 1547.760498046875D0 0.001863358193077147D0 6.899999618530273D0)) (list (list 26.0D0 1546.1680908203125D0 0.0016070938436314464D0 6.909999847412109D0)) (list (list 26.0D0 1544.4244384765625D0 0.0016047817189246417D0 6.920000076293945D0)) (list (list 26.0D0 1544.1451416015625D0 0.0016757476842030883D0 6.929999828338623D0)) (list (list 26.0D0 1546.004638671875D0 0.0017914545023813844D0 6.940000057220459D0)) (list (list 26.0D0 1550.341552734375D0 0.0021264241077005864D0 6.949999809265137D0)) (list (list 26.0D0 1556.6868896484375D0 0.002922656014561653D0 6.960000038146973D0)) (list (list 26.0D0 1558.034912109375D0 0.004169933497905731D0 6.96999979019165D0)) (list (list 26.0D0 1558.519775390625D0 0.005237810779362917D0 6.980000019073486D0)) (list (list 26.0D0 1558.7568359375D0 0.005958655849099159D0 6.989999771118164D0)) (list (list 26.0D0 1558.742919921875D0 0.006160850170999765D0 7.0D0)) (list (list 26.0D0 1558.1954345703125D0 0.0057005551643669605D0 7.009999752044678D0)) (list (list 26.0D0 1556.5225830078125D0 0.004540515597909689D0 7.019999980926514D0)) (list (list 26.0D0 1553.046142578125D0 0.003356887260451913D0 7.029999732971191D0)) (list (list 26.0D0 1550.5316162109375D0 0.0024664353113621474D0 7.039999961853027D0)) (list (list 26.0D0 1550.260986328125D0 0.001964725088328123D0 7.049999713897705D0)) (list (list 26.0D0 1552.5782470703125D0 0.001840626704506576D0 7.059999942779541D0)) (list (list 26.0D0 1554.9888916015625D0 0.0021309456788003445D0 7.069999694824219D0)) (list (list 26.0D0 1554.283447265625D0 0.002197400201112032D0 7.079999923706055D0)) (list (list 26.0D0 1553.0001220703125D0 0.00199498631991446D0 7.089999675750732D0)) (list (list 26.0D0 1552.6297607421875D0 0.001579050556756556D0 7.099999904632568D0)) (list (list 26.0D0 1554.048583984375D0 0.001074454397894442D0 7.109999656677246D0)) (list (list 26.0D0 1555.8221435546875D0 7.412307895720005D-4 7.119999885559082D0)) (list (list 26.0D0 1556.261474609375D0 5.2929378580302D-4 7.12999963760376D0)) (list (list 26.0D0 1556.61083984375D0 3.7356140092015267D-4 7.139999866485596D0)) (list (list 26.0D0 1558.6064453125D0 2.5703429128043354D-4 7.149999618530273D0)) (list (list 26.0D0 1563.65869140625D0 1.8176510639023036D-4 7.159999847412109D0)) (list (list 26.0D0 1567.84033203125D0 1.8402771092951298D-4 7.170000076293945D0)) (list (list 26.0D0 1567.4345703125D0 1.7543177818879485D-4 7.179999828338623D0)) (list (list 26.0D0 1564.141357421875D0 1.6210932517424226D-4 7.190000057220459D0)) (list (list 26.0D0 1561.480224609375D0 1.4389361604116857D-4 7.199999809265137D0)) (list (list 26.0D0 1563.03369140625D0 1.1926999286515638D-4 7.210000038146973D0)) (list (list 26.0D0 1564.5870361328125D0 9.464754839427769D-5 7.21999979019165D0)) (list (list 26.0D0 1566.1405029296875D0 7.00239252182655D-5 7.230000019073486D0)) (list (list 26.0D0 1571.333984375D0 6.21791259618476D-5 7.239999771118164D0)) (list (list 26.0D0 1579.1829833984375D0 6.657255289610475D-5 7.25D0)) (list (list 26.0D0 1587.0316162109375D0 7.096576882759109D-5 7.259999752044678D0)) (list (list 26.0D0 1594.880615234375D0 7.535920303780586D-5 7.269999980926514D0)) (list (list 26.0D0 1601.552001953125D0 7.480419299099595D-5 7.279999732971191D0)) (list (list 26.0D0 1597.9736328125D0 6.887494237162173D-5 7.289999961853027D0)) (list (list 26.0D0 1587.162353515625D0 5.9795205743284896D-5 7.299999713897705D0)) (list (list 26.0D0 1576.3507080078125D0 5.071503619547002D-5 7.309999942779541D0)) (list (list 26.0D0 1565.53955078125D0 4.163529592915438D-5 7.319999694824219D0)) (list (list 26.0D0 1561.919677734375D0 3.6768597055925056D-5 7.329999923706055D0)) (list (list 26.0D0 1560.12109375D0 3.371983257238753D-5 7.339999675750732D0)) (list (list 26.0D0 1559.098876953125D0 2.357295306865126D-5 7.349999904632568D0)) (list (list 27.0D0 1036.126953125D0 0.0018738927319645882D0 5.440000057220459D0)) (list (list 27.0D0 1037.3873291015625D0 0.0020919032394886017D0 5.449999809265137D0)) (list (list 27.0D0 1037.6490478515625D0 0.0021935792174190283D0 5.460000038146973D0)) (list (list 27.0D0 1038.1922607421875D0 0.0022304838057607413D0 5.46999979019165D0)) (list (list 27.0D0 1039.580322265625D0 0.0022942498326301575D0 5.480000019073486D0)) (list (list 27.0D0 1041.1749267578125D0 0.0023864074610173703D0 5.489999771118164D0)) (list (list 27.0D0 1042.249755859375D0 0.002503194147720933D0 5.5D0)) (list (list 27.0D0 1041.993896484375D0 0.002635702257975936D0 5.509999752044678D0)) (list (list 27.0D0 1041.7032470703125D0 0.002828791504725814D0 5.519999980926514D0)) (list (list 27.0D0 1041.9134521484375D0 0.0030873198993504048D0 5.529999732971191D0)) (list (list 27.0D0 1042.334716796875D0 0.0032821150962263346D0 5.539999961853027D0)) (list (list 27.0D0 1042.5997314453125D0 0.0033454301301389933D0 5.549999713897705D0)) (list (list 27.0D0 1042.2666015625D0 0.0032706207130104304D0 5.559999942779541D0)) (list (list 27.0D0 1041.474365234375D0 0.0030618004966527224D0 5.569999694824219D0)) (list (list 27.0D0 1040.575439453125D0 0.0028054765425622464D0 5.579999923706055D0)) (list (list 27.0D0 1039.940673828125D0 0.0025301186833530665D0 5.589999675750732D0)) (list (list 27.0D0 1039.5546875D0 0.002257851418107748D0 5.599999904632568D0)) (list (list 27.0D0 1039.0338134765625D0 0.002005085116252303D0 5.609999656677246D0)) (list (list 27.0D0 1038.82568359375D0 0.0018328127916902304D0 5.619999885559082D0)) (list (list 27.0D0 1037.9334716796875D0 0.0016437589656561613D0 5.62999963760376D0)) (list (list 27.0D0 1037.4759521484375D0 0.0014782218495383859D0 5.639999866485596D0)) (list (list 27.0D0 1037.48583984375D0 0.0013733753003180027D0 5.650000095367432D0)) (list (list 27.0D0 1036.99365234375D0 0.0013630916364490986D0 5.659999847412109D0)) (list (list 27.0D0 1037.1695556640625D0 0.0014446788700297475D0 5.670000076293945D0)) (list (list 27.0D0 1036.0970458984375D0 0.00147929135710001D0 5.679999828338623D0)) (list (list 27.0D0 1035.29541015625D0 0.0014696256257593632D0 5.690000057220459D0)) (list (list 27.0D0 1035.0286865234375D0 0.001452729688026011D0 5.699999809265137D0)) (list (list 27.0D0 1034.4388427734375D0 0.0014971991768106819D0 5.710000038146973D0)) (list (list 27.0D0 1034.6492919921875D0 0.0016367742791771889D0 5.71999979019165D0)) (list (list 27.0D0 1034.043212890625D0 0.0017853956669569016D0 5.730000019073486D0)) (list (list 27.0D0 1033.42724609375D0 0.0018522759201005102D0 5.739999771118164D0)) (list (list 27.0D0 1032.9266357421875D0 0.0018151942640542984D0 5.75D0)) (list (list 27.0D0 1032.078369140625D0 0.0017134888330474496D0 5.759999752044678D0)) (list (list 27.0D0 1031.43115234375D0 0.0015978027367964387D0 5.769999980926514D0)) (list (list 27.0D0 1031.10400390625D0 0.0015453852247446776D0 5.779999732971191D0)) (list (list 27.0D0 1031.436767578125D0 0.0015552989207208157D0 5.789999961853027D0)) (list (list 27.0D0 1032.4375D0 0.001636726432479918D0 5.799999713897705D0)) (list (list 27.0D0 1033.8121337890625D0 0.001806305255740881D0 5.809999942779541D0)) (list (list 27.0D0 1034.832763671875D0 0.00206508650444448D0 5.819999694824219D0)) (list (list 27.0D0 1036.0889892578125D0 0.002253111219033599D0 5.829999923706055D0)) (list (list 27.0D0 1037.16162109375D0 0.002324259141460061D0 5.839999675750732D0)) (list (list 27.0D0 1038.043701171875D0 0.002284499118104577D0 5.849999904632568D0)) (list (list 27.0D0 1039.0550537109375D0 0.002186067635193467D0 5.859999656677246D0)) (list (list 27.0D0 1039.3370361328125D0 0.0021085988264530897D0 5.869999885559082D0)) (list (list 27.0D0 1039.5333251953125D0 0.002120029181241989D0 5.87999963760376D0)) (list (list 27.0D0 1040.0260009765625D0 0.0022341308649629355D0 5.889999866485596D0)) (list (list 27.0D0 1040.8409423828125D0 0.0024302005767822266D0 5.900000095367432D0)) (list (list 27.0D0 1041.6981201171875D0 0.002657113363966346D0 5.909999847412109D0)) (list (list 27.0D0 1041.739013671875D0 0.0028724283911287785D0 5.920000076293945D0)) (list (list 27.0D0 1041.6475830078125D0 0.0030010545160621405D0 5.929999828338623D0)) (list (list 27.0D0 1041.65234375D0 0.003103342605754733D0 5.940000057220459D0)) (list (list 27.0D0 1041.735595703125D0 0.003169446485117078D0 5.949999809265137D0)) (list (list 27.0D0 1041.6826171875D0 0.0031361503060907126D0 5.960000038146973D0)) (list (list 27.0D0 1041.2589111328125D0 0.0029987057205289603D0 5.96999979019165D0)) (list (list 27.0D0 1040.8328857421875D0 0.002784355776384473D0 5.980000019073486D0)) (list (list 27.0D0 1040.2803955078125D0 0.0025586336851119995D0 5.989999771118164D0)) (list (list 27.0D0 1039.542724609375D0 0.002373174298554659D0 6.0D0)) (list (list 27.0D0 1038.6141357421875D0 0.0022680319380015135D0 6.009999752044678D0)) (list (list 27.0D0 1037.4774169921875D0 0.0021935540717095137D0 6.019999980926514D0)) (list (list 27.0D0 1037.5496826171875D0 0.0020778276957571507D0 6.029999732971191D0)) (list (list 27.0D0 1038.092529296875D0 0.0019295949023216963D0 6.039999961853027D0)) (list (list 27.0D0 1038.626708984375D0 0.0017830587457865477D0 6.049999713897705D0)) (list (list 27.0D0 1038.79736328125D0 0.0016917091561481357D0 6.059999942779541D0)) (list (list 27.0D0 1036.529541015625D0 0.0016650705365464092D0 6.069999694824219D0)) (list (list 27.0D0 1034.9571533203125D0 0.0017141893040388823D0 6.079999923706055D0)) (list (list 27.0D0 1034.20458984375D0 0.0017824332462623716D0 6.089999675750732D0)) (list (list 27.0D0 1034.23974609375D0 0.0018542520701885224D0 6.099999904632568D0)) (list (list 27.0D0 1034.8543701171875D0 0.0019453357672318817D0 6.109999656677246D0)) (list (list 27.0D0 1034.6058349609375D0 0.002155023394152522D0 6.119999885559082D0)) (list (list 27.0D0 1034.6949462890625D0 0.002340765669941902D0 6.12999963760376D0)) (list (list 27.0D0 1034.6146240234375D0 0.0024132844991981984D0 6.139999866485596D0)) (list (list 27.0D0 1034.4014892578125D0 0.0023377700708806515D0 6.150000095367432D0)) (list (list 27.0D0 1034.4705810546875D0 0.00212634215131402D0 6.159999847412109D0)) (list (list 27.0D0 1034.9188232421875D0 0.00195573503151536D0 6.170000076293945D0)) (list (list 27.0D0 1036.2867431640625D0 0.0019250429468229413D0 6.179999828338623D0)) (list (list 27.0D0 1037.6082763671875D0 0.001967186573892832D0 6.190000057220459D0)) (list (list 27.0D0 1038.4478759765625D0 0.0020188153721392155D0 6.199999809265137D0)) (list (list 27.0D0 1038.7374267578125D0 0.002016613958403468D0 6.210000038146973D0)) (list (list 27.0D0 1038.739990234375D0 0.001935487729497254D0 6.21999979019165D0)) (list (list 27.0D0 1039.30517578125D0 0.0019579159561544657D0 6.230000019073486D0)) (list (list 27.0D0 1039.8914794921875D0 0.002059627790004015D0 6.239999771118164D0)) (list (list 27.0D0 1040.2977294921875D0 0.0022179579827934504D0 6.25D0)) (list (list 27.0D0 1040.533935546875D0 0.002401551231741905D0 6.259999752044678D0)) (list (list 27.0D0 1040.3349609375D0 0.0024142407346516848D0 6.269999980926514D0)) (list (list 27.0D0 1040.3143310546875D0 0.0023845150135457516D0 6.279999732971191D0)) (list (list 27.0D0 1040.3179931640625D0 0.002348038600757718D0 6.289999961853027D0)) (list (list 27.0D0 1040.2576904296875D0 0.0023294587153941393D0 6.299999713897705D0)) (list (list 27.0D0 1040.0797119140625D0 0.0023424953687936068D0 6.309999942779541D0)) (list (list 27.0D0 1039.6051025390625D0 0.0022893971763551236D0 6.319999694824219D0)) (list (list 27.0D0 1038.4759521484375D0 0.0021670458372682333D0 6.329999923706055D0)) (list (list 27.0D0 1037.3255615234375D0 0.002051655203104019D0 6.339999675750732D0)) (list (list 27.0D0 1036.4610595703125D0 0.0019852856639772654D0 6.349999904632568D0)) (list (list 27.0D0 1036.009765625D0 0.0019874952267855406D0 6.359999656677246D0)) (list (list 27.0D0 1036.52783203125D0 0.0020418839994817973D0 6.369999885559082D0)) (list (list 27.0D0 1036.245361328125D0 0.002100788289681077D0 6.37999963760376D0)) (list (list 27.0D0 1035.716552734375D0 0.0021761474199593068D0 6.389999866485596D0)) (list (list 27.0D0 1035.277587890625D0 0.0022776806727051735D0 6.399999618530273D0)) (list (list 27.0D0 1035.1751708984375D0 0.002410449320450425D0 6.409999847412109D0)) (list (list 27.0D0 1036.2298583984375D0 0.0025198685470968485D0 6.420000076293945D0)) (list (list 27.0D0 1037.3763427734375D0 0.0025211225729435683D0 6.429999828338623D0)) (list (list 27.0D0 1038.629638671875D0 0.002436284441500902D0 6.440000057220459D0)) (list (list 27.0D0 1039.65625D0 0.0023050352465361357D0 6.449999809265137D0)) (list (list 27.0D0 1039.929931640625D0 0.002188293728977442D0 6.460000038146973D0)) (list (list 27.0D0 1039.3973388671875D0 0.002273189602419734D0 6.46999979019165D0)) (list (list 27.0D0 1038.7647705078125D0 0.0024479366838932038D0 6.480000019073486D0)) (list (list 27.0D0 1038.876220703125D0 0.002639427548274398D0 6.489999771118164D0)) (list (list 27.0D0 1039.5947265625D0 0.002769233426079154D0 6.5D0)) (list (list 27.0D0 1040.19287109375D0 0.002760081784799695D0 6.509999752044678D0)) (list (list 27.0D0 1040.1519775390625D0 0.0026540292892605067D0 6.519999980926514D0)) (list (list 27.0D0 1039.2396240234375D0 0.0025048807729035616D0 6.529999732971191D0)) (list (list 27.0D0 1038.291015625D0 0.002373338211327791D0 6.539999961853027D0)) (list (list 27.0D0 1037.8392333984375D0 0.002280701883137226D0 6.549999713897705D0)) (list (list 27.0D0 1038.2066650390625D0 0.0022292244248092175D0 6.559999942779541D0)) (list (list 27.0D0 1038.8013916015625D0 0.002285605063661933D0 6.569999694824219D0)) (list (list 27.0D0 1039.087890625D0 0.002376425778493285D0 6.579999923706055D0)) (list (list 27.0D0 1039.3270263671875D0 0.0024109785445034504D0 6.589999675750732D0)) (list (list 27.0D0 1039.7020263671875D0 0.0023627313785254956D0 6.599999904632568D0)) (list (list 27.0D0 1040.321533203125D0 0.002246479969471693D0 6.609999656677246D0)) (list (list 27.0D0 1040.6552734375D0 0.00214461050927639D0 6.619999885559082D0)) (list (list 27.0D0 1040.9105224609375D0 0.0021795236971229315D0 6.62999963760376D0)) (list (list 27.0D0 1040.3658447265625D0 0.0022334118839353323D0 6.639999866485596D0)) (list (list 27.0D0 1039.0572509765625D0 0.0022576365154236555D0 6.649999618530273D0)) (list (list 27.0D0 1037.4898681640625D0 0.0022369029466062785D0 6.659999847412109D0)) (list (list 27.0D0 1036.6280517578125D0 0.0021285878028720618D0 6.670000076293945D0)) (list (list 27.0D0 1037.1248779296875D0 0.0020253960974514485D0 6.679999828338623D0)) (list (list 27.0D0 1037.8572998046875D0 0.00197420921176672D0 6.690000057220459D0)) (list (list 27.0D0 1038.6363525390625D0 0.0019983400125056506D0 6.699999809265137D0)) (list (list 27.0D0 1039.6856689453125D0 0.002103624166920781D0 6.710000038146973D0)) (list (list 27.0D0 1040.4151611328125D0 0.002251997822895646D0 6.71999979019165D0)) (list (list 27.0D0 1040.654541015625D0 0.002439825562760234D0 6.730000019073486D0)) (list (list 27.0D0 1040.4591064453125D0 0.0026269303634762764D0 6.739999771118164D0)) (list (list 27.0D0 1040.052001953125D0 0.0027775440830737353D0 6.75D0)) (list (list 27.0D0 1039.7620849609375D0 0.0028530436102300883D0 6.759999752044678D0)) (list (list 27.0D0 1039.859375D0 0.0027453037910163403D0 6.769999980926514D0)) (list (list 27.0D0 1039.67041015625D0 0.002502175746485591D0 6.779999732971191D0)) (list (list 27.0D0 1039.2437744140625D0 0.0022457209415733815D0 6.789999961853027D0)) (list (list 27.0D0 1038.3125D0 0.0020345086231827736D0 6.799999713897705D0)) (list (list 27.0D0 1036.609130859375D0 0.0018958122236654163D0 6.809999942779541D0)) (list (list 27.0D0 1035.8468017578125D0 0.0018351291073486209D0 6.819999694824219D0)) (list (list 27.0D0 1035.8187255859375D0 0.0018378053791821003D0 6.829999923706055D0)) (list (list 27.0D0 1036.0177001953125D0 0.0018958054715767503D0 6.839999675750732D0)) (list (list 27.0D0 1035.7803955078125D0 0.0019748618360608816D0 6.849999904632568D0)) (list (list 27.0D0 1034.46044921875D0 0.002019852166995406D0 6.859999656677246D0)) (list (list 27.0D0 1032.839599609375D0 0.0019062809878960252D0 6.869999885559082D0)) (list (list 27.0D0 1031.765625D0 0.001689436729066074D0 6.87999963760376D0)) (list (list 27.0D0 1031.2757568359375D0 0.0014827022096142173D0 6.889999866485596D0)) (list (list 27.0D0 1031.045166015625D0 0.0013678602408617735D0 6.899999618530273D0)) (list (list 27.0D0 1030.598876953125D0 0.0014093696372583509D0 6.909999847412109D0)) (list (list 27.0D0 1030.106201171875D0 0.0016399369342252613D0 6.920000076293945D0)) (list (list 27.0D0 1030.3739013671875D0 0.001823010970838368D0 6.929999828338623D0)) (list (list 27.0D0 1031.8193359375D0 0.001954511273652315D0 6.940000057220459D0)) (list (list 27.0D0 1034.0810546875D0 0.0020621363073587418D0 6.949999809265137D0)) (list (list 27.0D0 1036.3690185546875D0 0.0021858541294932366D0 6.960000038146973D0)) (list (list 27.0D0 1037.7271728515625D0 0.002305258996784687D0 6.96999979019165D0)) (list (list 27.0D0 1038.076416015625D0 0.002353689633309841D0 6.980000019073486D0)) (list (list 27.0D0 1038.06103515625D0 0.002359378384426236D0 6.989999771118164D0)) (list (list 27.0D0 1037.8958740234375D0 0.0023423146922141314D0 7.0D0)) (list (list 27.0D0 1037.593994140625D0 0.002320905216038227D0 7.009999752044678D0)) (list (list 27.0D0 1036.7403564453125D0 0.0023076655343174935D0 7.019999980926514D0)) (list (list 27.0D0 1035.7933349609375D0 0.0023380036000162363D0 7.029999732971191D0)) (list (list 27.0D0 1034.8546142578125D0 0.0023583825677633286D0 7.039999961853027D0)) (list (list 27.0D0 1034.1051025390625D0 0.002313200617209077D0 7.049999713897705D0)) (list (list 27.0D0 1033.684326171875D0 0.00214411155320704D0 7.059999942779541D0)) (list (list 27.0D0 1032.9034423828125D0 0.001763294218108058D0 7.069999694824219D0)) (list (list 27.0D0 1031.4609375D0 0.00128871516790241D0 7.079999923706055D0)) (list (list 27.0D0 1029.9718017578125D0 8.203809265978634D-4 7.089999675750732D0)) (list (list 27.0D0 1029.0177001953125D0 4.391024122014642D-4 7.099999904632568D0)) (list (list 27.0D0 1028.93603515625D0 2.1151160763110966D-4 7.109999656677246D0)) (list (list 27.0D0 1027.580078125D0 1.4330747944768518D-4 7.119999885559082D0)) (list (list 27.0D0 1028.635009765625D0 1.2631050776690245D-4 7.12999963760376D0)) (list (list 27.0D0 1030.953369140625D0 1.2489876826293767D-4 7.139999866485596D0)) (list (list 27.0D0 1033.3851318359375D0 1.2683018576353789D-4 7.149999618530273D0)) (list (list 27.0D0 1034.8028564453125D0 1.2735548079945147D-4 7.159999847412109D0)) (list (list 27.0D0 1035.0345458984375D0 1.1211846140213311D-4 7.170000076293945D0)) (list (list 27.0D0 1036.019287109375D0 9.044410398928449D-5 7.179999828338623D0)) (list (list 27.0D0 1038.697265625D0 6.76079434924759D-5 7.190000057220459D0)) (list (list 27.0D0 1042.3673095703125D0 4.747155981021933D-5 7.199999809265137D0)) (list (list 27.0D0 1045.2464599609375D0 3.3700875064823777D-5 7.210000038146973D0)) (list (list 27.0D0 1042.038818359375D0 3.3161126339109615D-5 7.21999979019165D0)) (list (list 27.0D0 1038.8309326171875D0 3.2621348509564996D-5 7.230000019073486D0)) (list (list 27.0D0 1035.5235595703125D0 3.6115754483034834D-5 7.239999771118164D0)) (list (list 27.0D0 1033.0758056640625D0 4.221397466608323D-5 7.25D0)) (list (list 27.0D0 1032.693115234375D0 4.721272489405237D-5 7.259999752044678D0)) (list (list 27.0D0 1034.184814453125D0 4.749051004182547D-5 7.269999980926514D0)) (list (list 27.0D0 1035.71435546875D0 4.9951981054618955D-5 7.279999732971191D0)) (list (list 27.0D0 1038.3642578125D0 4.985147825209424D-5 7.289999961853027D0)) (list (list 27.0D0 1040.5570068359375D0 4.477882248465903D-5 7.299999713897705D0)) (list (list 27.0D0 1040.230224609375D0 3.264631959609687D-5 7.309999942779541D0)) (list (list 27.0D0 1040.230224609375D0 4.692133643402485D-6 7.319999694824219D0))))) nil "Extraindo Parciais de SDIF"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 235 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "chord" (om-load-patch-abs1 "chord" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 200 244) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 3" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 166 274) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND 2" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1))) (om-make-point 116 485) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 90 407) (om-make-point 44 28) 1000 "1000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 52 437) (om-make-point 62 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 78 281) (om-make-point 26 28) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ROUND" (quote om-round) (quote ((om-load-inputfun (quote input-funbox) "number or list" "N" 1) (om-load-inputfun (quote input-funbox) "number of decimals" "DECIMALS" 0))) (om-make-point 27 341) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 257 387) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 274 211) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 112 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 26 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 497 517) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 119 133) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 185 60) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 1 0 nil 0) (0 0 1 1 nil 0) (4 0 2 0 nil 0) (6 0 4 0 nil 0) (3 0 4 1 nil 0) (10 0 6 0 nil 0) (5 0 6 1 nil 0) (2 0 7 0 nil 0) (1 0 7 1 nil 0) (8 0 7 2 nil 0) (12 0 8 0 nil 0) (12 0 9 0 nil 0) (12 0 10 0 nil 0) (7 0 11 0 nil 0) (13 0 12 0 nil 0))) 6.16 nil "" (om-make-point -8 -8) (om-make-point 1366 625)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 171 102) nil (list nil) "l" "chord"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 100 60) (quote "0 - Index$1 - Frequencia$2 - Amplitude$3 - Fase") "" (om-make-point 19 49) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "Fl-mul-C#6+-C5+-D#5-G5-mf - TROCA3 DE TIMBRE.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 288 17) (om-make-point 194 79) (let ((newobj (load-sdif-file (om-make-pathname :directory (quote (:relative "out-files")) :device :unspecific :host "C" :name "Fl-mul-C#6+-C5+-D#5-G5-mf - TROCA3 DE TIMBRE" :type "sdif")))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (2 0 3 0 nil 0) (8 0 4 1 nil 0) (4 1 5 0 nil 0) (3 0 5 1 nil 0) (11 0 7 0 nil 0) (6 0 8 0 nil 0) (7 0 8 1 nil 0))) nil 6.16))
