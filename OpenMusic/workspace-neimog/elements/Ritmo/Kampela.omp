; OM File Header - Saved 2020/08/25 19:06:17
; (6.16 :patc (om-make-point 118 160) (om-make-point 632 68) (om-make-point 500 552) "" 183 0 "2019/11/24 11:30:03" "2019/12/02 19:37:12")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Kampela" (quote ((let ((box (om-load-boxcall (quote genfun) "MKTREE" (quote mktree) (quote ((om-load-inputfun (quote input-funbox) "list of integer ratios" "RHYTHM" (list 1/4 1/4 1/4 1/4)) (om-load-inputfun (quote input-funbox) "list of time signatures" "TIMESIGNS" (list 4 4)))) (om-make-point 37 173) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 12 119) (om-make-point 300 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 272 19) "(400/7 400/7 400/7 320/7 320/7 320/7 320/7 320/7)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) "x" nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TRUE-DURATIONS" (quote true-durations) (quote ((om-load-inputfun (quote input-funbox) "a score object" "SELF" nil))) (om-make-point 62 504) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "a list representing a rhythm tree" "tree" (list (quote ?) (list (list (list 4 4) (list 1 1 1 1))))) (om-load-inputfun (quote input-funbox) "a chord object, a list of chords, a list of midics, a list of lists of midics..." "chords" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "frequency of the quarter-note (default 60/mn)" "tempo" 60) (om-load-inputfun (quote input-funbox) "overlapping percentage between every successive chords, calculated from the second chord's duration" "legato" 100) (om-load-inputfun (quote input-funbox) "sub lists (one sub list per chord) indicating notes to be tied to notes of the same value, in a next chord" "ties" nil))) (om-make-point 51 385) (om-make-point 392 109) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (400 (((4 4) (4)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (4.0 3)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 6)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (4.0 1.0 2)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) ((1 (4.0 3)) 3.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (3.0 (1 (3.0 4)))) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (2.0 (1 (2.0 4 1.0)) 1.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (1.0 (1 (1.0 6)) 2.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0)) ((4 4) (4.0))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (4000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (429)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (857)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (286)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (429)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (571)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (571)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (857)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 36 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 337/100 nil 1000 0 (om-make-point 835 478) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0) (0 0 3 1 nil 0))) nil 6.15))
