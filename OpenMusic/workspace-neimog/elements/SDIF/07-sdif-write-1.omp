; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 140 158) (om-make-point 221 124) (om-make-point 866 664) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "07-sdif-write-1" (quote ((om-load-boxcomment "comment" (om-make-point 119 32) (quote "(eval here)") "" (om-make-point 330 560) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 157 86) (quote "Here is a simplified example of how to write data in an SDIF file using the OM SDIF classes") "" (om-make-point 69 104) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 724 4) (om-make-point 32 30) 0.0 "0.0" nil) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 713 36) nil nil "l" nil 1) (om-load-boxcall (quote genfun) "SAVE-SDIF-FILE 2" (quote save-sdif-file) (quote ((om-load-inputfun (quote input-funbox) "an SDIF-buffer" "SELF" nil) (om-load-inputkeyword (quote input-keyword) "format options" "out" (quote :out) nil nil))) (om-make-point 218 470) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 90 47) (quote "random time tags... :(") "" (om-make-point 275 119) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SDIF-BUFFER" (quote sdif-buffer) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of SDIFType" "types" nil) (om-load-inputfun (quote input-funbox) "list of SDIFNVT" "nvts" nil) (om-load-inputfun (quote input-funbox) "list of SDIFStream or SDIFFrame" "lframes" nil))) (om-make-point 174 394) (om-make-point 129 61) (make-instance (quote sdif-buffer)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 119 32) (quote "Save in an SDIF file") "" (om-make-point 363 496) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 158 62) (quote "Store the SDIF frames + types declarations in an SDIF buffer") "" (om-make-point 425 395) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 117 32) (quote "Repeat n times") "" (om-make-point 392 312) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 132 32) (quote "Create 1 SDIF frame") "" (om-make-point 474 257) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 147 32) (quote "Create 2 SDIF Matrices") "" (om-make-point 671 122) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 152 32) (quote "Declare 3 new types") "" (om-make-point 46 226) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 200 32) (quote "Write an SDIF File") "" (om-make-point 149 28) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 328 425) (om-make-point 69 26) "test.sdif" "\"test.sdif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 317 450) nil nil nil nil 1) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 192 533) (om-make-point 130 66) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 2386 310) (om-make-point 845 364) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) t nil nil t) (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0.0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 10.0))) (om-make-point 315 163.0) nil nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "NUM" 60))) (om-make-point 328 315) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 124 316) nil nil nil nil 1) (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XMAT") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "par1" "par2" "par3")))) (om-make-point 206 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XMAT" :description (list "par1" "par2" "par3") :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 507 78) (om-make-point 56 30) "XMAT" "\"XMAT\"" nil) (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XNFO") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "Info")))) (om-make-point 128 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XNFO" :description (list "Info") :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XFRA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XNFO" "InfoMat") (list "XMAT" "datamat"))))) (om-make-point 49 255) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XFRA" :description (list (list "XNFO" "InfoMat") (list "XMAT" "datamat")) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 431 190) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 383 84) (om-make-point 55 30) "XNFO" "\"XNFO\"" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 444 84) (om-make-point 21 30) 4 "4" nil) (om-load-editor-box1 "SDIFMATRIX" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 1) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :k0) nil nil))) (om-make-point 380 116) (om-make-point 72 60) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) (list (list 4))) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t))) (list "All close" (list 0 nil))) 0 (quote t) (list (om-make-color 0 0 0)) (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-editor-box1 "SDIFFRAME" (quote sdifframe) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "SIGNATURE" "XFRA") (om-load-inputfun (quote input-funbox) "no documentation" "FTIME" 0.0) (om-load-inputfun (quote input-funbox) "no documentation" "STREAMID" 0) (om-load-inputfun (quote input-funbox) "no documentation" "LMATRIX" nil))) (om-make-point 326 232) (om-make-point 138 63) (if (find-class (quote sdifframe) nil) (make-instance (quote sdifframe) :signature "XFRA" :ftime 1.4746058 :streamid 0 :lmatrix (list (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 1))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XNFO") (setf (lcontrols array) (list (list (quote :k0) 4))) (setf (data array) (list (list 4))) array)) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (quote :par2) (list 0.94986475 0.5805001 2.9846642 3.7812462 4.705546 5.8123784 3.986392 7.7747603 4.036169 6.0770073 3.1062193 1.2094417 9.714293 1.9294133 7.7453275 6.3848324 14.746374 9.66178 4.5043726 2.1625376 15.045728 19.920224 21.394583 2.3358078 6.622544 2.135351 0.37092698 7.9135356 7.737585 17.63911)) (list (quote :par3) 5))) (setf (data array) (list (list 0.0 11.494253 22.988507 34.482758 45.977013 57.471264 58.84729 57.369454 55.891625 54.41379 40.344834 21.379309 33.44828 40.493794 36.217934 31.94207 27.666209 23.390345 19.114483 14.838618 17.645764 25.796242 33.94671 39.327584 40.189656 41.051724 41.913796 42.77586 67.24133 100.0) (list 0.97465146 0.17448116 0.20527876 1.3660674 1.4904177 0.11091471 1.5720729 0.76093197 4.469724 2.169677 1.1037506 4.7813816 4.94574 5.08048 13.712767 13.873016 7.3226934 6.146194 4.795773 0.5402875 17.06592 19.785214 14.941113 14.006021 6.554547 14.657299 26.760485 15.321503 10.840046 24.657734) (list 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))) array))) :from-file t)) nil nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0)) nil nil nil nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 633 80) (om-make-point 21 30) 5 "5" nil) (om-load-editor-box1 "SDIFMATRIX1" (quote sdifmatrix) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "self" nil) (om-load-inputfun (quote input-funbox) "How many matrix fields?" "numrows" 30) (om-load-inputfun (quote input-funbox) "matrix type" "signature" "") (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par1) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par2) nil nil) (om-load-inputkeyword (quote control-keyword) "Optional control keyword. There exists 2 special keywords :attributes and :parsingFun" "Control input" (quote :par3) nil nil))) (om-make-point 485 116) (om-make-point 180 111) (if (find-class (quote sdifmatrix) nil) (let ((array (make-instance (quote sdifmatrix) :numcols 30))) (setf (slot-value array (quote attached-components)) nil) (setf (slot-value array (quote signature)) "XMAT") (setf (lcontrols array) (list (list (quote :par1) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) (list (quote :par2) (list 0.1964271 1.0871599 0.31301093 1.997405 1.00564 0.8742106 3.6277976 7.0339747 2.8191283 7.3449755 10.642637 6.9423294 4.686968 10.4086895 10.771913 13.272434 12.697966 15.272751 6.5419045 11.549606 5.7488613 17.90822 22.120602 0.44043732 12.336117 10.259263 13.344461 4.1003075 2.5175243 14.609595)) (list (quote :par3) 5))) (setf (data array) (list (list 0.0 11.494253 22.988507 34.482758 45.977013 57.471264 58.84729 57.369454 55.891625 54.41379 40.344834 21.379309 33.44828 40.493794 36.217934 31.94207 27.666209 23.390345 19.114483 14.838618 17.645764 25.796242 33.94671 39.327584 40.189656 41.051724 41.913796 42.77586 67.24133 100.0) (list 0.97465146 0.17448116 0.20527876 1.3660674 1.4904177 0.11091471 1.5720729 0.76093197 4.469724 2.169677 1.1037506 4.7813816 4.94574 5.08048 13.712767 13.873016 7.3226934 6.146194 4.795773 0.5402875 17.06592 19.785214 14.941113 14.006021 6.554547 14.657299 26.760485 15.321503 10.840046 24.657734) (list 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5))) array)) nil nil (pairlis (quote (panel-list cur-group-ind show-opt-fields color-list winsize winpos)) (list (list (list "All open" (list 0 (quote t)) (list 1 (quote t)) (list 2 (quote t))) (list "All close" (list 0 nil) (list 1 nil) (list 2 nil))) 0 (quote t) (list (om-make-color 0 0 0) (om-make-color 0 0 0) (om-make-color 0 0 0)) (om-make-point 335 275) (om-make-point 10 40))) t nil nil nil) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 0))) (om-make-point 534 9) (om-make-point 172 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 18 32 40 42 67 78 94 100)) (quote (0 60 54 10 44 13 39 43 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (show-stems obj-mode palette-mode winpos winsize deltapict outport inport zoom cmnpref notechancolor? grillestep mode picture)) (list (quote t) 0 0 (om-make-point 40 10) (om-make-point 370 280) (om-make-point 0 0) 0 0 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 nil)) t nil nil nil))) (quote ((2 0 3 0 nil 0) (6 0 4 0 nil 0) (15 0 4 1 nil 0) (19 0 6 1 nil 0) (18 0 6 3 nil 0) (14 0 15 0 nil 0) (4 0 16 0 nil 0) (28 0 18 0 nil 0) (23 0 19 0 nil 0) (22 0 19 1 nil 0) (20 0 19 2 nil 0) (27 0 24 0 nil 0) (30 0 24 1 nil 0) (25 0 27 2 nil 0) (26 0 27 3 nil 0) (17 0 28 2 nil 0) (24 0 28 4 nil 0) (21 0 30 2 nil 0) (31 0 30 3 nil 0) (3 0 30 4 nil 0) (29 0 30 5 nil 0))) nil 6.0501))
