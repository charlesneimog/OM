; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 152 98) (om-make-point 241 0) (om-make-point 767 841) "No documentation " 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/a01-cut.sdif" "../../in-files/africa.mrk.sdif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "04-get-objects" (quote ((om-load-boxcomment "comment" (om-make-point 223 62) (quote "See also the AS->OM function from the Repmus library for alternative conversions from SDIF to chord-seq") "" (om-make-point 2 698) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 291 668) (om-make-point 233 86) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6768 7530 6322) (5956 6304 6764 7194 7532 7974) (5978 6544 7192) (5960) (5946 6320 7188 7532) (5964 6308 7196 7538) (6566) (5960 6536) (5972 6552 7192) (7190 5976) (6328 6778 5986 7532) (6412 6788 5946 7186 7526) (5972 6542 7192) (5974 6548 7192) (5972) (5952 6312 7188 7530) (5962 7200 7534) (6164 6542 7380) (6314 6782 7530) (5968 6334 6784 7536 7978) (6774 5948 6310 7182 7528 7986) (6516 5956 7176) (6544 7190 5984) (5954 6310 7188 7530) (7534 5974 7196) (6542 6162 7380) (7384 6786 6190) (7530 5972 6336 6770) (6784 5938 6340 7188 7534) (5976 6628 6796 7190 7536) (5980 6542 7188) (5948) (7530 5954 6312 7188) (6318 5954 7190 7532) (5960 6308 7186 7530) (6544 6162 7380) (6738) (5950 6320 6788 7190 7536) (5980 6542 7188) (5948) (5954 7530 6312 7188) (7190 6318 5954 7532) (6308 5960 7186 7530) (7380 6162 6544) (7530 6320 6780) (6782 6336 5968 7188 7536) (6600 5950 7188 7524) (5978 6542 7188) (5956 6584) (7184 5946) (5944 6312 7186 7530) (6322 7534 5952 7190) (5958 6540) (7188 9334 5966 6552) (7190 5970 6794) (6766 5982 6332 7176 7530) (5958 6762 7188 7526) (5970 6550 7198))) :lonset (quote (4888 4848 4709 4638 4505 4441 4424 4366 4304 4180 4098 4029 3953 3897 3843 3698 3628 3518 3338 3268 3247 3216 3094 2920 2827 2699 2557 2531 2479 2432 2294 2251 2159 2113 2029 1898 1870 1765 1627 1584 1492 1445 1361 1231 1067 970 948 808 771 743 666 542 475 429 279 203 84 24 4848)) :ldur (quote ((104 104 104) (40 40 40 40 40 40) (139 139 139) (71) (134 134 134 134) (63 63 63 63) (17) (58 58) (62 62 62) (124 124) (82 82 82 82) (70 70 70 70 70) (75 75 75) (56 56 56) (54) (145 145 145 145) (70 70 70) (110 110 110) (81 81 81) (70 70 70 70 70) (22 22 22 22 22 22) (31 31 31) (122 122 122) (174 174 174 174) (93 93 93) (128 128 128) (142 142 142) (26 26 26 26) (52 52 52 52 52) (46 46 46 46 46) (138 138 138) (43) (92 92 92 92) (46 46 46 46) (84 84 84 84) (130 130 130) (28) (105 105 105 105 105) (138 138 138) (43) (92 92 92 92) (46 46 46 46) (84 84 84 84) (130 130 130) (164 164 164) (97 97 97 97 97) (22 22 22 22) (140 140 140) (37 37) (28 28) (77 77 77 77) (125 125 125 125) (67 67) (46 46 46 46) (150 150 150) (76 76 76 76 76) (119 119 119 119) (60 60 60))) :lvel (quote ((96 56 56) (76 57 110 68 55 50) (82 95 85) (54) (79 64 71 62) (80 64 79 55) (68) (56 93) (69 106 70) (81 79) (56 99 52 55) (59 93 75 65 51) (83 92 83) (77 102 87) (51) (75 58 69 56) (82 84 54) (61 95 53) (55 74 54) (53 58 127 59 52) (90 75 58 72 56 50) (71 81 80) (101 85 77) (69 52 64 51) (55 91 91) (104 63 53) (51 54 58) (59 59 57 79) (85 71 58 69 54) (75 66 77 74 51) (78 97 75) (52) (52 71 52 63) (60 83 78 59) (79 67 79 57) (103 61 53) (51) (69 58 89 62 54) (78 97 75) (52) (71 52 52 63) (78 60 83 59) (67 79 79 57) (53 61 103) (50 52 55) (111 62 56 53 62) (68 79 75 52) (78 97 77) (53 51) (54 63) (71 59 64 60) (69 65 79 82) (51 102) (63 51 65 117) (80 75 51) (101 54 58 51 59) (80 69 76 50) (74 101 78))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 236 139) (quote "Some SDIF description contain \"chords\" infor;ation, typically the 1MRK or 1TRC streams resulting from partial tracking or chord-sequences analyses.$The following functiona apprioximate these data to sequences of notes or directly as a chord-seq object.") "" (om-make-point 79 506) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 25) (quote "BPF") "" (om-make-point 379 87) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 442 401) (om-make-point 169 74) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.1 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.2 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.3 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.4 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.5 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.6 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.7 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.8 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.9 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.2 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.3 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.4 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.5 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.6 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.7 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.8 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.9 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0 2.01 2.02 2.03 2.04 2.05 2.06 2.07 2.08 2.09 2.1 2.11 2.12 2.13 2.14 2.15 2.16 2.17 2.18 2.19 2.2 2.21 2.22 2.23 2.24 2.25 2.26 2.27 2.28 2.29 2.3 2.31 2.32 2.33 2.34 2.35 2.36 2.37 2.38 2.39 2.4 2.41 2.42 2.43 2.44 2.45 2.46 2.47 2.48 2.49 2.5 2.51 2.52 2.53 2.54 2.55 2.56 2.57 2.58 2.59 2.6 2.61 2.62 2.63 2.64 2.65 2.66 2.67 2.68 2.69 2.7 2.71 2.72 2.73 2.74 2.75 2.76 2.77 2.78 2.79 2.8 2.81 2.82 2.83 2.84 2.85 2.86 2.87 2.88 2.89 2.9 2.91 2.92 2.93 2.94 2.95 2.96 2.97 2.98 2.99 3.0 3.01 3.02 3.03 3.04 3.05 3.06 3.07 3.08 3.09 3.1 3.11 3.12 3.13 3.14 3.15 3.16 3.17 3.18 3.19 3.2 3.21 3.22 3.23 3.24 3.25 3.26 3.27 3.28 3.29 3.3 3.31 3.32 3.33 3.34 3.35 3.36 3.37 3.38 3.39 3.4 3.41 3.42 3.43 3.44 3.45 3.46 3.47 3.48 3.49 3.5 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.58 3.59 3.6 3.61 3.62 3.63 3.64 3.65 3.66 3.67 3.68 3.69 3.7 3.71 3.72 3.73 3.74 3.75 3.76 3.77 3.78 3.79 3.8 3.81 3.82 3.83 3.84 3.85 3.86 3.87 3.88 3.89 3.9 3.91 3.92 3.93 3.94 3.95 3.96 3.97 3.98 3.99 4.0 4.01 4.02 4.03 4.04 4.05 4.06 4.07 4.08 4.09 4.1 4.11 4.12 4.13 4.14 4.15 4.16 4.17 4.18 4.19 4.2 4.21 4.22 4.23 4.24 4.25 4.26 4.27 4.28 4.29 4.3 4.31 4.32 4.33 4.34 4.35 4.36 4.37 4.38 4.39 4.4 4.41 4.42 4.43 4.44 4.45 4.46 4.47 4.48 4.49 4.5 4.51 4.52 4.53 4.54 4.55 4.56 4.57 4.58 4.59 4.6 4.61 4.62 4.63 4.64 4.65 4.66 4.67 4.68 4.69 4.7 4.71 4.72 4.73 4.74 4.75 4.76 4.77 4.78 4.79 4.8 4.81 4.82 4.83 4.84 4.85 4.86 4.87 4.88 4.89 4.9 4.91 4.92 4.93 4.94 4.95 4.96 4.97 4.98 4.99 5.0 5.01 5.02 5.03 5.04 5.05 5.06 5.07 5.08 5.09 5.1 5.11 5.12 5.13 5.14 5.15 5.16 5.17 5.18 5.19 5.2 5.21 5.22 5.23 5.24 5.25 5.26 5.27 5.28 5.29 5.3 5.31 5.32 5.33 5.34 5.35 5.36 5.37 5.38 5.39 5.4 5.41 5.42 5.43 5.44 5.45 5.46 5.47 5.48 5.49 5.5 5.51 5.52 5.53 5.54 5.55 5.56 5.57 5.58 5.59 5.6 5.61 5.62 5.63 5.64 5.65 5.66 5.67 5.68 5.69 5.7 5.71 5.72 5.73 5.74 5.75 5.76 5.77 5.78 5.79 5.8 5.81 5.82 5.83 5.84 5.85 5.86 5.87 5.88 5.89 5.9 5.91 5.92 5.93 5.94 5.95 5.96 5.97 5.98 5.99 6.0 6.01 6.02 6.03 6.04 6.05 6.06 6.07 6.08 6.09 6.1 6.11 6.12 6.13 6.14 6.15 6.16 6.17 6.18 6.19 6.2 6.21 6.22 6.23 6.24 6.25 6.26 6.27 6.28 6.29 6.3 6.31 6.32 6.33 6.34 6.35 6.36 6.37 6.38 6.39 6.4 6.41 6.42 6.43 6.44 6.45 6.46 6.47 6.48 6.49 6.5 6.51 6.52 6.53 6.54 6.55 6.56 6.57 6.58 6.59 6.6 6.61 6.62 6.63 6.64 6.65 6.66 6.67 6.68 6.69 6.7 6.71 6.72 6.73 6.74 6.75 6.76 6.77 6.78 6.79 6.8 6.81 6.82 6.83 6.84 6.85 6.86 6.87 6.88 6.89 6.9 6.91 6.92 6.93 6.94 6.95 6.96 6.97 6.98 6.99 7.0 7.01 7.02 7.03 7.04 7.05 7.06 7.07 7.08 7.09 7.1 7.11 7.12 7.13 7.14 7.15 7.16 7.17 7.18 7.19 7.2 7.21 7.22 7.23 7.24 7.25 7.26 7.27 7.28 7.29 7.3 7.31 7.32 7.33 7.34 7.35 7.36 7.37 7.38 7.39 7.4 7.41 7.42 7.43 7.44 7.45 7.46 7.47 7.48 7.49 7.5 7.51 7.52 7.53 7.54 7.55 7.56 7.57 7.58 7.59 7.6 7.61 7.62 7.63 7.64 7.65 7.66 7.67 7.68 7.69 7.7 7.71 7.72 7.73 7.74 7.75 7.76 7.77 7.78 7.79 7.8 7.81 7.82 7.83 7.84 7.85 7.86 7.87 7.88 7.89 7.9 7.91 7.92 7.93 7.94 7.95 7.96 7.97 7.98 7.99 8.0 8.01 8.02 8.03 8.04 8.05 8.06 8.07 8.08 8.09 8.1 8.11 8.12 8.13 8.14 8.15 8.16 8.17 8.18 8.19 8.2 8.21 8.22 8.23 8.24 8.25 8.26 8.27 8.28 8.29 8.3 8.31 8.32 8.33 8.34 8.35 8.36 8.37 8.38 8.39 8.4 8.41 8.42 8.43 8.44 8.45 8.46 8.47 8.48 8.49 8.5 8.51 8.52 8.53 8.54 8.55 8.56 8.57 8.58 8.59 8.6 8.61 8.62 8.63 8.64 8.65 8.66 8.67 8.68 8.69 8.7 8.71 8.72 8.73 8.74 8.75 8.76 8.77 8.78 8.79 8.8 8.81 8.82 8.83 8.84 8.85 8.86 8.87 8.88 8.89 8.9 8.91 8.92 8.93 8.94 8.95 8.96 8.97 8.98 8.99 9.0 9.01 9.02 9.03 9.04 9.05 9.06 9.07 9.08 9.09 9.1 9.11 9.12 9.13 9.14 9.15 9.16 9.17 9.18 9.19 9.2 9.21 9.22 9.23 9.24 9.25 9.26 9.27 9.28 9.29 9.3 9.31 9.32 9.33 9.34 9.35 9.36 9.37 9.38 9.39 9.4 9.41 9.42 9.43 9.44 9.45 9.46 9.47 9.48 9.49 9.5 9.51 9.52 9.53 9.54 9.55 9.56 9.57 9.58 9.59 9.6 9.61 9.62 9.63 9.64 9.65 9.66 9.67 9.68 9.69 9.7 9.71 9.72 9.73 9.74 9.75 9.76 9.77 9.78 9.79 9.8 9.81 9.82 9.83 9.84 9.85 9.86 9.87 9.88 9.89 9.9 9.91 9.92 9.93 9.94 9.95 9.96 9.97 9.98 9.99 10.0 10.01 10.02 10.03 10.04 10.05 10.06 10.07 10.08 10.09 10.1 10.11 10.12 10.13 10.14 10.15 10.16 10.17 10.18 10.19 10.2 10.21 10.22 10.23 10.24 10.25 10.26 10.27 10.28 10.29 10.3 10.31 10.32 10.33 10.34 10.35 10.36 10.37 10.38 10.39 10.4 10.41 10.42 10.43 10.44 10.45 10.46 10.47 10.48 10.49 10.5 10.51 10.52 10.53 10.54 10.55 10.56 10.57 10.58 10.59 10.6 10.61 10.62 10.63 10.64 10.65 10.66 10.67 10.68 10.69 10.7 10.71 10.72 10.73 10.74 10.75 10.76 10.77 10.78 10.79 10.8 10.81 10.82 10.83 10.84 10.85 10.86 10.87 10.88 10.89 10.9 10.91 10.92 10.93 10.94 10.95 10.96 10.97 10.98 10.99 11.0 11.01 11.02 11.03 11.04 11.05 11.06 11.07 11.08 11.09 11.1 11.11 11.12 11.13 11.14 11.15 11.16 11.17 11.18 11.19 11.2 11.21 11.22 11.23 11.24 11.25 11.26 11.27 11.28 11.29 11.3 11.31 11.32 11.33 11.34 11.35 11.36 11.37 11.38 11.39 11.4 11.41 11.42 11.43 11.44 11.45 11.46 11.47 11.48 11.49 11.5 11.51 11.52 11.53 11.54 11.55 11.56 11.57 11.58 11.59 11.6 11.61 11.62 11.63 11.64 11.65 11.66 11.67 11.68 11.69 11.7 11.71 11.72 11.73 11.74 11.75 11.76 11.77 11.78 11.79 11.8 11.81 11.82 11.83 11.84 11.85 11.86 11.87 11.88 11.89 11.9 11.91 11.92 11.93 11.94 11.95 11.96 11.97 11.98 11.99 12.0 12.01 12.02 12.03 12.04 12.05 12.06 12.07 12.08 12.09 12.1 12.11 12.12 12.13 12.14 12.15 12.16 12.17 12.18 12.19 12.2 12.21 12.22 12.23 12.24 12.25 12.26 12.27 12.28 12.29 12.3 12.31 12.32 12.33 12.34 12.35 12.36 12.37 12.38 12.39 12.4 12.41 12.42 12.43 12.44 12.45 12.46 12.47 12.48 12.49 12.5 12.51 12.52 12.53 12.54 12.55 12.56 12.57 12.58 12.59 12.6 12.61 12.62 12.63 12.64 12.65 12.66 12.67 12.68 12.69 12.7 12.71 12.72 12.73 12.74 12.75 12.76 12.77 12.78 12.79 12.8 12.81 12.82 12.83 12.84 12.85 12.86 12.87 12.88 12.89 12.9 12.91 12.92 12.93 12.94 12.95 12.96 12.97 12.98 12.99 13.0 13.01 13.02 13.03 13.04 13.05 13.06 13.07 13.08 13.09 13.1 13.11 13.12 13.13 13.14 13.15 13.16 13.17 13.18 13.19 13.2 13.21 13.22 13.23 13.24 13.25 13.26 13.27 13.28 13.29 13.3 13.31 13.32 13.33 13.34 13.35 13.36 13.37 13.38 13.39 13.4 13.41 13.42 13.43 13.44 13.45 13.46 13.47 13.48 13.49 13.5 13.51 13.52 13.53 13.54 13.55 13.56 13.57 13.58 13.59 13.6 13.61 13.62 13.63 13.64 13.65 13.66 13.67 13.68 13.69 13.7 13.71 13.72 13.73 13.74 13.75 13.76 13.77 13.78 13.79 13.8 13.81 13.82 13.83 13.84 13.85 13.86 13.87 13.88 13.89 13.9 13.91 13.92 13.93 13.94 13.95 13.96 13.97 13.98 13.99)) (quote (0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -16.22 0.0 0.0 0.0 0.0 0.0 0.0 0.0 185.833 206.102 122.678 115.633 153.897 88.141 94.704 130.554 133.099 124.833 117.75 103.748 108.922 138.852 125.127 113.183 68.938 118.964 93.778 123.777 105.337 119.701 65.193 127.74 138.341 106.996 151.803 128.616 82.733 132.992 76.865 105.306 113.145 68.628 106.115 88.162 137.943 131.986 197.112 197.185 97.627 97.5 97.855 97.617 147.753 194.961 98.145 196.436 195.466 196.544 196.366 196.697 98.337 98.339 98.417 98.604 98.531 98.553 98.581 98.503 98.472 197.088 98.397 197.222 197.224 98.355 98.483 197.643 98.481 98.524 98.526 98.509 98.528 98.502 98.653 98.835 98.729 98.82 98.666 98.759 98.881 98.602 98.866 98.929 98.914 98.991 98.595 98.73 98.449 73.979 98.471 99.106 148.02 67.393 117.544 156.08 155.681 116.972 156.753 157.389 94.701 157.683 118.232 118.376 78.823 157.119 117.772 157.601 157.341 157.479 94.478 157.626 157.674 157.264 99.118 157.472 157.659 157.965 157.974 158.034 158.052 157.868 117.84 98.959 157.314 157.462 157.886 158.077 158.174 158.104 157.884 157.866 157.794 157.87 157.69 157.75 157.627 157.873 157.743 157.426 157.482 157.391 157.527 157.656 157.796 157.973 158.138 158.294 158.314 158.308 158.635 158.631 158.579 158.646 158.43 158.162 157.996 157.964 157.85 157.773 157.863 157.897 158.26 158.231 158.409 158.674 158.583 158.721 158.957 158.8 158.755 158.415 158.282 158.095 158.066 158.003 158.185 158.228 158.271 158.422 158.534 158.775 158.89 159.334 159.398 159.464 159.297 158.97 158.366 158.26 158.118 158.034 157.924 158.098 158.416 158.725 158.889 159.226 159.502 159.612 159.714 159.456 159.346 159.061 159.044 158.32 158.088 158.16 158.064 158.318 158.43 158.902 159.254 159.466 159.579 159.576 159.5 159.422 158.808 158.505 158.321 158.015 157.93 158.096 158.036 158.254 158.491 158.845 159.242 159.208 159.635 159.611 159.551 159.349 159.273 158.754 474.926 157.847 157.575 157.986 158.048 158.112 158.359 158.722 159.041 158.957 159.451 159.475 159.517 159.451 159.284 159.05 158.836 158.233 157.87 157.878 157.829 158.06 158.33 158.915 158.948 159.256 159.347 159.866 159.708 159.602 159.223 159.025 158.644 158.353 158.068 158.17 158.123 158.227 158.302 158.561 158.898 159.102 159.116 159.529 159.806 479.078 159.411 158.911 158.415 157.914 474.192 157.458 157.608 157.698 157.844 158.246 158.634 158.892 479.165 159.941 159.779 160.02 159.624 159.236 158.531 158.076 157.911 157.866 157.815 158.098 158.266 158.893 159.4 159.818 159.709 160.168 159.838 159.645 159.174 158.588 158.04 474.308 157.479 157.66 157.889 158.142 158.248 158.559 158.697 159.223 159.99 160.169 160.142 160.002 159.745 159.71 158.792 158.325 157.89 157.681 157.779 158.035 158.238 158.587 158.976 159.55 159.567 160.305 160.358 160.21 160.026 478.782 158.935 158.304 158.095 472.641 157.792 157.984 158.207 158.41 158.719 159.454 159.655 159.888 481.054 160.516 160.04 159.442 159.195 158.905 158.29 157.943 473.476 158.228 158.288 158.664 159.241 159.686 160.193 160.49 160.661 160.629 159.981 159.711 159.361 478.7 157.921 157.66 238.056 158.046 158.296 158.571 158.842 239.389 160.074 160.325 160.106 160.004 159.892 159.253 158.438 157.92 157.85 157.806 158.104 158.435 158.766 159.342 159.968 160.376 160.589 160.723 160.587 160.096 159.455 159.173 158.344 157.899 157.796 157.902 157.919 158.497 158.81 159.56 160.041 160.35 160.496 160.768 160.452 160.217 159.72 159.374 159.024 158.44 158.169 158.424 237.817 159.058 478.01 480.247 160.456 160.657 160.789 160.664 160.256 159.806 159.324 158.767 158.296 158.023 158.144 158.379 158.649 159.222 159.708 479.85 478.961 160.46 160.525 160.088 159.902 478.812 239.495 158.881 158.564 158.42 158.461 158.459 158.681 477.901 160.025 160.401 160.849 161.005 160.826 160.673 478.331 241.055 159.041 158.68 158.511 158.2 158.306 158.671 158.833 159.421 801.985 803.994 805.864 806.693 805.389 61.822 266.788 796.193 796.523 263.8 263.072 789.444 71.843 792.793 796.329 801.077 804.723 806.354 808.474 134.974 62.078 802.517 88.124 797.3 802.424 87.62 60.888 87.813 795.884 88.776 803.561 806.151 808.885 810.792 811.015 808.531 804.5 799.141 801.815 87.778 803.803 71.905 264.463 265.438 266.747 267.429 268.47 807.583 270.17 269.767 808.622 801.96 797.055 798.53 71.836 135.579 131.56 87.889 88.074 57.117 801.656 267.428 795.835 90.145 803.638 808.021 805.927 267.58 267.398 158.552 264.738 797.453 71.933 797.654 266.66 267.1 267.821 806.794 101.081 90.169 73.564 66.934 88.304 199.471 66.033 113.213 264.564 265.176 266.501 800.859 804.735 806.961 89.739 62.196 89.614 804.081 61.204 132.534 71.911 71.974 265.138 88.232 54.736 133.313 802.388 267.442 804.181 61.854 798.989 798.875 796.648 797.054 795.91 795.599 265.639 798.089 88.864 72.778 114.293 114.132 200.205 70.993 119.842 119.536 119.128 101.822 267.502 88.963 178.739 88.935 159.845 132.564 180.121 90.269 55.64 240.571 239.555 238.682 711.978 237.109 237.175 101.63 712.979 238.861 715.929 241.105 241.856 725.971 182.062 90.925 241.526 103.137 238.539 711.754 237.904 101.431 237.143 237.543 238.634 239.85 240.981 718.69 241.506 726.334 121.014 241.35 718.52 715.175 713.151 712.006 711.76 713.635 715.285 719.377 717.059 241.742 724.466 242.114 103.787 241.198 718.239 238.909 713.319 712.366 713.019 713.559 721.231 239.772 240.286 722.013 722.224 721.569 720.106 719.517 719.183 239.788 239.893 719.901 240.066 110.131 80.03 103.139 89.534 90.106 104.987 89.653 89.56 89.61 89.799 157.988 159.509 212.715 214.011 642.722 214.258 641.477 639.043 634.823 90.104 629.902 629.886 631.963 211.382 635.171 637.865 639.6 639.985 639.854 639.912 639.576 639.834 640.043 639.977 319.566 638.55 637.261 632.853 634.256 210.986 149.866 128.139 53.96 118.673 595.332 299.124 200.647 101.812 152.988 612.499 306.243 610.413 213.24 199.943 598.254 84.719 595.868 599.428 605.085 607.818 609.659 609.863 609.555 86.966 607.072 605.014 299.778 71.796 76.386 532.975 176.551 525.658 87.138 524.568 526.785 266.172 539.191 540.844 540.29 538.807 538.368 538.363 530.866 532.338 176.34 527.874 527.815 529.08 530.664 534.501 535.583 179.07 152.785 133.591 87.487 157.821 94.15 235.294 234.781 469.772 470.723 470.056 158.192 119.674 479.384 480.375 479.698 477.756 476.193 236.972 474.258 475.233 473.601 473.458 474.21 475.452 237.77 476.751 475.033 238.628 146.487 146.712 220.469 220.968 146.913 146.81 220.281 220.266 220.672 220.683 441.606 146.967 221.039 221.041 220.86 441.494 147.12 221.049 441.469 441.425 220.776 441.801 441.675 220.792 441.678 441.969 441.818 441.778 441.809 441.732 441.573 220.845 441.575 441.524 441.463 441.812 442.124 231.076 232.243 155.854 156.102 234.692 234.701 156.518 234.963 234.988 235.187 235.079 156.93 235.171 470.184 470.424 470.19 235.603 235.061 235.217 156.952 117.782 127.725 127.979 127.774 192.07 128.48 96.416 129.132 389.133 195.973 196.69 197.225 197.64 132.081 197.982 197.884 395.84 396.106 395.734 197.842 395.42 132.022 396.112 396.319 396.76 397.124 397.086 396.827 396.879 396.926 396.758 396.905 396.839 396.748 396.731 396.757 396.882 396.783 396.232 396.589 396.451 198.053 395.977 396.815 396.636 198.409 397.666 397.631 132.852 133.093 132.76 106.394 148.094 110.07 219.608 109.893 219.042 109.951 79.359 144.829 144.522 74.161 111.211 110.494 221.366 220.814 220.415 110.13 220.487 109.964 221.089 221.172 221.814 222.201 221.971 222.245 222.133 221.937 222.434 222.086 222.545 222.195 222.057 222.428 222.519 222.574 222.55 222.348 222.611 222.843 222.776 222.867 222.806 222.321 222.323 222.144 131.745 197.43 132.378 111.032 132.865 176.691 200.301 131.69 131.895 114.534 131.329 173.775 131.121 131.682 132.32 132.791 133.23 133.553 178.568 132.977 132.038 131.712 173.298 260.384 131.552 132.162 133.032 133.235 133.686 133.89 133.483 398.534 133.432 133.286 398.554 133.364 397.83 132.899 196.817 392.844 130.877 131.133 131.533 132.171 133.129 133.217 133.526 400.161 398.713 178.733 133.186 396.887 133.321 393.049 397.792 177.765 178.082 177.811 398.075 133.397 397.865 178.675 178.445 133.199 132.941 133.249 176.827 266.11 388.195 526.552 176.232 131.105 130.687 132.082 132.259 132.691 398.218 390.86 133.166 177.523 132.819 132.406 176.894 176.498 176.512 131.874 394.18 395.544 133.013 133.192 398.761 133.791 538.448 400.188 179.549 133.609 133.474 397.831 530.531 176.683 176.287 176.132 131.962 396.115 178.412 534.842 133.869 537.635 179.345 76.962 130.945 178.721 396.267 397.199 132.267 176.55 176.368 131.842 176.695 132.471 133.163 133.427 133.758 133.751 401.269 133.732 133.612 133.54 133.254 132.425 528.69 131.948 176.232 131.986 132.212 177.246 396.341 133.536 133.772 133.958 134.64 133.767 133.586 398.576 132.373 528.929 131.965 131.724 527.495 529.324 132.227 132.614 399.103 179.322 133.988 133.849 133.856 133.49 133.294 196.151 530.757 197.19 132.009 132.055 398.205 397.761 133.141 133.651 133.902 134.252 401.366 400.668 133.578 133.291 133.11 132.271 132.166 131.837 131.732 132.796 132.955 176.726 133.594 133.642 133.794 133.648 133.328 133.382 177.364 132.555 132.849 132.237 176.324 176.825 132.746 399.147 534.523 178.818 178.646 133.364 133.476 133.349 133.027 531.486 132.993 177.395 132.894 132.926 133.133 534.77 133.065 397.285 533.033 177.529 132.95 66.737 133.283 106.829 133.545 266.945 133.064 133.116 76.018 177.434 132.623 176.843 176.669 88.292 184.589 132.845 176.848 133.09 133.225 133.412 177.416 177.899 133.47 177.837 133.419 177.414 133.278 132.879 529.211 176.59 265.464 177.073 178.335 177.46 377.21 378.085 376.712 179.129 133.366 177.576 132.988 176.472 529.038 176.469 186.756 176.407 176.25 178.311 378.934 133.408 178.737 179.27 268.437 178.575 178.275 133.299 266.3 176.918 132.156 176.466 265.031 176.657 178.198 267.635 267.607 178.629 268.29 179.149 179.263 179.232 379.368 266.593 177.224 176.606 176.527 175.927 175.996 176.371 75.765 177.034 177.605 179.0 178.386 179.451 537.746 536.433 133.913 187.047 377.78 132.395 265.737 176.38 66.292 176.467 176.587 133.619 133.784 178.979 179.32 179.53 180.618 134.024 179.264 133.366 76.27 176.721 374.46 176.676 375.274 176.509 177.246 177.646 178.342 133.24 179.1 379.026 187.403 179.25 187.324 377.671 265.446 176.703 132.598 176.796 176.548 176.676 133.453 178.71 178.484 128.201 382.825 381.207 178.64 188.952 178.503 266.822 376.769 176.068 376.448 178.702 133.453 133.715 178.874 534.229 179.982 180.792 126.779 179.293 133.589 133.354 133.18 177.795 265.521 266.288 177.108 177.73 177.531 179.306 539.098 179.656 180.175 95.127 190.019 179.43 178.945 177.147 178.365 266.168 530.021 176.993 133.236 133.585 179.209 178.917 179.415 179.498 179.203 133.728 178.234 178.762 530.982 177.026 177.02 177.244 532.085 133.257 267.221 179.287 134.595 179.688 179.776 180.704 179.519 134.371 377.339 133.079 177.484 133.03 133.1 376.221 378.619 189.073 99.993)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t) (om-load-editor-box1 "a01-cut.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 428 246) (om-make-point 103 62) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "a01-cut" :type "sdif"))))) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 324 125) (quote "Reads SDIF data and formats results as a BPF.$$Default values are suited to read and convert 1FQ0 frame and matrix types, typically resulting from fundamental frequency analysis.$Other type of data can be extracted by setting the optional inputs.") "" (om-make-point 376 113) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 75 32) (quote "CHORDS") "" (om-make-point 78 480) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "SEC->MS" (quote sec->ms) (quote ((om-load-inputfun (quote input-funbox) "seconds" "N" 0))) (om-make-point 180 383.0) nil nil nil nil 1) (om-load-editor-box1 "africa.mrk.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 84 248) (om-make-point 103 62) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "africa.mrk" :type "sdif"))))) newobj) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 400 500) (om-make-point 10 40))) nil nil nil t) (om-load-boxcall (quote genfun) "GETSDIFCHORDS" (quote getsdifchords) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 0 638) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIF->BPF" (quote sdif->bpf) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 448 322) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIF->MARKERS" (quote sdif->markers) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 166 321.0) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIF->CHORD-SEQ" (quote sdif->chord-seq) (quote ((om-load-inputfun (quote input-funbox) "an SDIF file" "SELF" nil))) (om-make-point 320 588) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 564 32) (quote "A number of tools alloz to convert SDIF info to relevant objects or formats for OM processing") "" (om-make-point 58 48) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 404 42) (quote "Accessing info and data from SDIF files (IV)") "" (om-make-point 51 10) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 108 25) (quote "Markers") "" (om-make-point 34 85) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 324 125) (quote "Reads SDIF times and formats results as a list of time markers (in s).$$Default values read 1MRK frames, typically resulting from markers or transient detection analyses. More specific type of data can be extracted by setting the optional inputs.") "" (om-make-point 31 121) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))))) (quote ((13 0 1 0 nil 0) (11 0 4 0 nil 0) (12 0 8 0 nil 0) (9 0 10 0 nil 0) (5 0 11 0 nil 0) (9 0 12 0 nil 0) (9 0 13 0 nil 0))) nil 6.0501))
