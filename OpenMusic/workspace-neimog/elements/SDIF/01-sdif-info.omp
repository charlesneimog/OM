; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 159 36) (om-make-point 150 46) (om-make-point 902 793) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/file01.sdif") (list (quote :text) "../../in-files/file01.txt"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "01-sdif-info" (quote ((om-load-boxcomment "comment 2" (om-make-point 91 32) (quote "SDIF NVTs") "" (om-make-point 616 406) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-editor-box1 "SDIFNVT" (quote sdifnvt) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of (name value) pairs" "nv-pairs" nil) (om-load-inputfun (quote input-funbox) "name (string)" "tablename" nil) (om-load-inputfun (quote input-funbox) "table ID (integer)" "id" 0))) (om-make-point 517 628) (om-make-point 73 52) (if (find-class (quote sdifnvt) nil) (make-instance (quote sdifnvt) :nv-pairs (list (list "Date" "Fri Apr 21 12:01:46 2006 ") (list "TableName" "ChordSeq") (list "WrittenBy" "Pm2_Version_Pm2 0.9.1")) :tablename "ChordSeq" :id -3 :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 250 280) (om-make-point 150 100))) nil nil nil t) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 535 570) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 690 509) (om-make-point 80 30) "WrittenBy" "\"WrittenBy\"" nil) (om-load-boxcall (quote genfun) "FIND-IN-NVTLIST" (quote find-in-nvtlist) (quote ((om-load-inputfun (quote input-funbox) "list of SDIFNVT" "NVTLIST" nil) (om-load-inputfun (quote input-funbox) "A name entry in the NameValue table" "ENTRY" ""))) (om-make-point 629 571) nil nil nil nil 1) (om-load-boxcall (quote genfun) "GETNVTLIST" (quote getnvtlist) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 571 494) nil nil nil nil 1) (om-load-boxcomment "comment 2" (om-make-point 224 58) (quote "The name/value tables (or NVTs) are tables containing textual info in the header of the SDIF files") "" (om-make-point 613 434) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 259 68) (quote "SDIF to text conversion (if no patrhname is given for the text file, the SDIF file name will be used + .txt)") "" (om-make-point 335 186) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "TEXTFILE" (quote textfile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "input data or text" "exp-list" nil) (om-load-inputfunmenu1 (quote input-funmenu) "append or supersede" "ed-mode" "supersede" (list (list "append" "append") (list "supersede" "supersede"))) (om-load-inputfunmenu1 (quote input-funmenu) "eval interpretation mode" "eval-mode" "list" (list (list "text" "text") (list "data list" "data") (list "list" "list") (list "value" "value"))))) (om-make-point 274 264) (om-make-point 70 50) (load-textfile (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host nil :name "file01" :type "txt") (quote textfile) "supersede" "list") nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil) (om-load-boxcomment "comment" (om-make-point 116 62) (quote "Returns matrix or frame type description info") "" (om-make-point 598 236) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 630 147) (om-make-point 54 30) "1TRC" "\"1TRC\"" nil) (om-load-boxcall (quote genfun) "SDIFTYPEDESCRIPTION" (quote sdiftypedescription) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "SDIF type Signature" "SIGNATURE" "1TYP") (om-load-inputfunmenu1 (quote input-funmenu) "Frame / Matrix" "TYPE" (quote m) (list (list "Matrix" (quote (quote m))) (list "Frame" (quote (quote f))))))) (om-make-point 597 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIF->TEXT" (quote sdif->text) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "text file pathname" "TARGETNAME" nil))) (om-make-point 258 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SDIFSTREAMS" (quote sdifstreams) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil))) (om-make-point 83 184) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 391 42) (quote "Accessing info and data from SDIF files (I)") "" (om-make-point 191 17) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 107 137) (quote "Returns info for matrix j in frame number i$- signature$- num. rows$- num. columns$- data size$- position in file") "" (om-make-point 321 549) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 116 62) (quote "Returns number of matrices in frame i") "" (om-make-point 210 546) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 98 121) (quote "Returns info for frame number i$- signature$- time$- stream ID$- position in file$- number of matrices") "" (om-make-point 109 547) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 57 43) (quote "Counts frames") "" (om-make-point 8 441) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 115 56) (quote "List SDIF streams (frames,matrices) in the file.") "" (om-make-point 22 109) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 173 84) (om-make-point 78 72) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "file01" :type "sdif"))))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 450 218) (om-make-point 829 56) (quote t))) nil nil nil t) (om-load-boxcall (quote genfun) "SDIFINFO" (quote sdifinfo) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 21 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MATRIXINFO" (quote matrixinfo) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" 1) (om-load-inputfun (quote input-funbox) "no documentation" "J" 0))) (om-make-point 330 495) nil nil nil nil 4) (om-load-boxcall (quote genfun) "NUMMATRIX" (quote nummatrix) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" 0))) (om-make-point 216 495) nil nil nil nil 1) (om-load-boxcall (quote genfun) "FRAMEINFO" (quote frameinfo) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "I" 0))) (om-make-point 121 495) nil nil nil nil 5) (om-load-boxcall (quote genfun) "NUMFRAMES" (quote numframes) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "SELF" nil))) (om-make-point 32 495) nil nil nil nil 1))) (quote ((2 0 1 0 nil 0) (5 0 2 0 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (20 0 5 0 nil 0) (12 0 8 0 nil 0) (20 0 11 0 nil 0) (10 0 11 1 nil 0) (20 0 12 0 nil 0) (20 0 13 0 nil 0) (20 0 21 0 nil 0) (20 0 22 0 nil 0) (20 0 23 0 nil 0) (20 0 24 0 nil 0) (20 0 25 0 nil 0))) nil 6.0501))
