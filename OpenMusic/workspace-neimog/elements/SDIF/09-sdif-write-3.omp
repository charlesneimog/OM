; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 245 161) (om-make-point 189 0) (om-make-point 814 787) "non documentation" 183 0 nil nil)
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "09-sdif-write-3" (quote ((om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 547 525) (om-make-point 125 64) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000 6200)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 515 345) (om-make-point 202 85) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6200) (6400) (6000) (6000) (6200) (6400) (6000) (6400) (6500) (6700) (6400) (6500) (6700))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 6000 6500 7000 7500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.0501 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (palette-mode scale show-stems obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 0 nil (quote t) 1 0 (om-make-point 470 262) (om-make-point 684 261) 0 1000 nil 1 (quote :midishare) 0 nil (om-make-point 0 -3) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil) (om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 555 235) (om-make-point 113 55) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 400 500))) t nil nil t) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 555 99) (om-make-point 119 30) (list 0 1.2 3.3 4.4 6.0) "(0 1.2 3.3 4.4 6.0)" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote x)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote x)))) (om-make-point 249 496) nil nil nil nil 1) (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote f) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XAAA") (om-load-inputfun (quote input-funbox) "description du type" "description" (list (list "XBBB" "matrix1"))))) (om-make-point 268 428) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote f) :signature "XAAA" :description (list (list "XBBB" "matrix1")) :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-editor-box1 "SDIFTYPE" (quote sdiftype) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Frame/Matrix" "struct" (quote m) (list (list "Frame" (quote (quote f))) (list "Matrix" (quote (quote m))))) (om-load-inputfun (quote input-funbox) "signature (4 chars)" "signature" "XBBB") (om-load-inputfun (quote input-funbox) "description du type" "description" (list "curve")))) (om-make-point 192 428) (om-make-point 70 50) (if (find-class (quote sdiftype) nil) (make-instance (quote sdiftype) :struct (quote m) :signature "XBBB" :description (list "curve") :from-file t)) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 91 530) (om-make-point 56 30) "XBBB" "\"XBBB\"" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 63 505) (om-make-point 56 30) "XAAA" "\"XAAA\"" nil) (om-load-boxcall (quote genfun) "BPF->SDIF" (quote bpf->sdif) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputfun (quote input-funbox) "frame type (string)" "FTYPE" "1FQ0") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MTYPE" "1FQ0") (om-load-inputfunmenu1 (quote input-funmenu) "x = time or elements" "SCOPE" (quote time) (list (list "Time" (quote (quote time))) (list "Elements" (quote (quote elts))))) (om-load-inputfun (quote input-funbox) "custom types declaration" "TYPEDEFS" nil) (om-load-inputfun (quote input-funbox) "output file" "OUTFILE" nil))) (om-make-point 33 560) (om-make-point 197 59) nil nil nil 1) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "bpf.sdif"))) (om-make-point 331 496) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 349 466) (om-make-point 66 30) "bpf.sdif" "\"bpf.sdif\"" nil) (om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 83 640) (om-make-point 96 71) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 39 0) (om-make-point 822 448))) t nil nil t) (om-load-boxcomment "comment 3" (om-make-point 131 32) (quote "... or define your own") "" (om-make-point 225 383) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcomment "comment 3" (om-make-point 131 32) (quote "Use predefined types...") "" (om-make-point 193 260) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))) (om-load-editor-box1 "" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil))) (om-make-point 96 316) (om-make-point 96 71) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 39 0) (om-make-point 945 352))) t nil nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 211 151) (om-make-point 66 30) "bpf.sdif" "\"bpf.sdif\"" nil) (om-load-boxcall (quote genfun) "OUTFILE" (quote outfile) (quote ((om-load-inputfun (quote input-funbox) "file name" "NAME" "bpf.sdif"))) (om-make-point 220 183) nil nil nil nil 1) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 34 140) (om-make-point 146 74) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (42.535 78.186 107.895 125.72 149.488 161.371 191.08 220.789 244.557 268.324 298.033 327.742 375.277 410.928 428.753 464.404 494.114 523.823 571.357 601.066 636.717 678.31 719.903 755.554 791.205 820.914 850.623 880.332 939.751 981.343 1028.878 1064.529 1106.122 1153.657 1189.307 1242.784 1272.493 1302.202 1331.911 1379.446 1426.981 1456.69 1492.341 1527.992 1551.759 1557.701 1569.584 1587.41 1605.235 1611.177 1623.061 1629.003 1640.886 1646.828 1670.596 1682.479 1718.13 1735.956 1759.723 1783.49 1807.258 1831.025 1854.792 1896.385 1949.861 1979.571 2038.989 2068.698 2098.407 2145.942 2175.651 2211.302 2246.953 2282.604 2312.313 2324.197 2336.08 2342.022 2377.673 2407.382 2437.091 2466.801 2514.335 2544.044 2579.695 2615.346 2650.997 2692.59 2728.241 2757.95 2805.485 2829.252 2864.903 2894.612 2930.263 2971.856 3007.507 3043.158 3078.809 3132.285 3173.878 3215.471 3274.889 3340.249 3399.668 3453.144 3488.795 3518.504 3548.213 3583.864 3643.283 3696.759 3750.235 3803.712 3839.363 3869.072 3916.607 3952.258 3987.909 4017.618 4047.327 4071.094 4100.803 4160.222 4201.814 4237.465)) (quote (33.58 35.812 37.406 39.0 40.913 42.507 45.058 47.29 49.203 50.797 52.391 53.986 56.217 58.13 59.725 61.319 62.913 64.188 66.739 68.014 69.609 71.203 72.797 74.391 75.667 76.942 77.899 79.174 81.725 82.681 84.594 85.87 86.826 86.826 86.826 86.826 86.826 86.507 85.87 85.232 84.275 83.319 82.681 81.725 80.13 78.217 76.623 73.754 71.203 68.333 66.101 64.507 61.957 60.362 57.812 55.899 52.71 50.797 48.884 47.29 45.696 44.101 42.507 40.275 38.362 37.725 36.13 35.812 35.174 34.536 34.217 33.899 33.899 33.899 35.812 37.406 39.0 40.594 42.826 44.42 45.058 45.377 44.42 43.464 42.507 41.232 39.957 38.043 36.768 35.812 32.623 31.029 28.159 26.246 24.014 21.783 20.826 19.87 19.232 17.957 17.957 18.275 18.594 19.551 20.507 21.464 22.101 22.42 23.058 23.058 23.058 22.739 21.783 21.145 20.188 19.551 18.594 17.319 16.362 14.768 13.493 11.899 10.623 7.754 6.159 4.565)) (quote bpf) 3))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 1670 -199) (om-make-point 747 441))) t nil nil t) (om-load-boxcomment "comment 3" (om-make-point 282 61) (quote "See also the SPAT-MATRIX in the OM-Spat library and tutorials for more complex conversion and writing of matrices and trajectories to SDIF ") "" (om-make-point 370 654) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:italic)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CHORD-SEQ->SDIF" (quote chord-seq->sdif) (quote ((om-load-inputfun (quote input-funbox) "a CHORD-SEQ" "SELF" nil))) (om-make-point 561 445) nil nil nil nil 1) (om-load-boxcall (quote genfun) "MARKERS->SDIF" (quote markers->sdif) (quote ((om-load-inputfun (quote input-funbox) "onset list (s)" "SELF" nil))) (om-make-point 568 146) nil nil nil nil 1) (om-load-boxcall (quote genfun) "BPF->SDIF" (quote bpf->sdif) (quote ((om-load-inputfun (quote input-funbox) "a BPF" "SELF" nil) (om-load-inputfun (quote input-funbox) "frame type (string)" "FTYPE" "1FQ0") (om-load-inputfun (quote input-funbox) "matrix type (string)" "MTYPE" "1FQ0") (om-load-inputfunmenu1 (quote input-funmenu) "x = time or elements" "SCOPE" (quote time) (list (list "Time" (quote (quote time))) (list "Elements" (quote (quote elts))))) (om-load-inputfun (quote input-funbox) "custom types declaration" "TYPEDEFS" nil) (om-load-inputfun (quote input-funbox) "output file" "OUTFILE" nil))) (om-make-point 116 240) nil nil nil nil 1) (om-load-boxcomment "comment 3" (om-make-point 282 61) (quote "A few functions exist that allow to write directly the contents of some OM objects into an SDIF file...") "" (om-make-point 63 38) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 341 42) (quote "Write an SDIF File from OM Objects") "" (om-make-point 64 0) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))))) (quote ((20 0 0 0 nil 0) (21 0 2 0 nil 0) (6 0 4 0 nil 0) (5 0 4 1 nil 0) (18 0 9 0 nil 0) (8 0 9 1 nil 0) (7 0 9 2 nil 0) (4 0 9 4 nil 0) (10 0 9 5 nil 0) (11 0 10 0 nil 0) (9 0 12 0 nil 0) (22 0 15 0 nil 0) (16 0 17 0 nil 0) (1 0 20 0 nil 0) (3 0 21 0 nil 0) (18 0 22 0 nil 0) (17 0 22 5 nil 0))) nil 6.0501))
