; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 90 37) (om-make-point 190 61) (om-make-point 759 698) "non documentation" 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/mod1.env.sdif" "../../in-files/a01-cut.sdif" "../../in-files/file01.sdif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "00-intro" (quote ((om-load-boxcomment "comment" (om-make-point 88 42) (quote "Spectral Enveloppe") "" (om-make-point 522 242) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 85 47) (quote "Misc. Sound Descriptions") "" (om-make-point 520 314) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 116 32) (quote "Example SDIF files") "" (om-make-point 549 169) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "mod1.env.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 609 215) (om-make-point 100 73) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "mod1.env" :type "sdif"))))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 918 470) (om-make-point 10 40) (quote t))) nil nil nil t) (om-load-editor-box1 "a01-cut.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 609 295) (om-make-point 78 72) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "a01-cut" :type "sdif"))))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 (om-make-point 825 484) (om-make-point 10 40) (quote t))) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 345 64) (quote "- Eval the box (v) to load a file$- Lock the box (b) if you want to store this file in the box$- Double-click to open and visualize the file contents") "" (om-make-point 153 592) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 343 505) (om-make-point 78 72) (let ((newobj (make-instance (quote sdiffile)))) newobj) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 284 79) (quote "Load file using a (valid) pathname is connected to the box.$If no pathname is connected, a file chooser dialog should allow you to select an SDIF file") "" (om-make-point 368 410) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 224 413) (om-make-point 89 28) "file01.sdif" "\"file01.sdif\"" nil) (om-load-boxcall (quote genfun) "INFILE" (quote infile) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "PATH" nil))) (om-make-point 248 442) nil nil nil nil 1) (om-load-editor-box1 "file01.sdif" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 225 504) (om-make-point 78 72) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device nil :host nil :name "file01" :type "sdif"))))) newobj) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref zoom deltapict outport inport palette-mode obj-mode)) (list (quote t) (om-make-point 829 56) (om-make-point 450 218) 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 1 (om-make-point 0 0) 0 0 0 0)) nil nil nil t) (om-load-boxcomment "comment" (om-make-point 192 42) (quote "The SDIFFILE box:") "" (om-make-point 20 441) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 452 96) (quote "More info about SDIF:  $     http://sdif.sourceforge.net/$$See also the SDIF page in the OM user mnual :  $     http://support.ircam.fr/forum-ol-doc/om/om6-manual/co/SDIF-Intro.html") "" (om-make-point 28 261) nil (om-make-color 0.0 0.0 0.0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 423 147) (quote "SDIF is a standard format for the storage and interchange of sound description data. It can be used in OM to store or import sound analyses results or sound synthesis parameters.$$The tools in the SDIF 'read' package will help you to extract and convert the SDIF data to OM visual programs and editors.$The tools in the 'write' package will help you to create your own SDIF files starting from data generated in OM.") "" (om-make-point 30 105) nil (om-make-color 43/255 88/255 7/15) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 294 42) (quote "Sound Description Interchange Format") "" (om-make-point 218 38) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 72 45) (quote "SDIF ") "" (om-make-point 324 2) nil (om-make-color 6/85 14/85 106/255) (om-make-font "Gill Sans" 24.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))))) (quote ((8 0 9 0 nil 0) (9 0 10 0 nil 0))) (list (let ((newpict (make-instance (quote patch-picture) :name nil :source (quote nil) :pict-pathname (restore-pict-path (restore-path nil)) :thepict nil :storemode :external :draw-params (quote (p 0 0 100 100)) :extraobjs (list (list (quote rect) (list 2/171 1/58 679/684 201/203) (list (om-make-color 0.90950227 0.90950227 0.90950227) 1 (quote line) (quote t)) nil))))) (setf (pict-pos newpict) (om-make-point 20 96)) (setf (pict-size newpict) (om-make-point 458 266)) newpict)) 6.0501))
