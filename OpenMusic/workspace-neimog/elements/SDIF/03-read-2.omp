; OM File Header - Saved 2020/08/26 13:51:47
; (6.0501 :patc (om-make-point 152 98) (om-make-point 127 211) (om-make-point 904 594) "No documentation " 183 0 nil nil)
; End File Header
; External resources 
; (list (list (quote :sdif) "../../in-files/file01.sdif"))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "03-read-2" (quote ((om-load-boxcomment "comment" (om-make-point 282 61) (quote "Use these functions if you know which type of data you want to extract (open the editor for an overview of the file contents)") "" (om-make-point 27 76) nil (om-make-color 61/255 20/51 74/255) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment 2" (om-make-point 404 42) (quote "Accessing info and data from SDIF files (III)") "" (om-make-point 51 11) nil (om-make-color 0.19215687 0.2627451 0.42352942) (om-make-font "Gill Sans" 18.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GETSDIFTIMES" (quote getsdiftimes) (quote ((om-load-inputfun (quote input-funbox) "SDIF file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number (integer)" "SID" 0) (om-load-inputfun (quote input-funbox) "frame type" "FRAMETYPE" "") (om-load-inputfun (quote input-funbox) "matrix type" "MATTYPE" "") (om-load-inputfun (quote input-funbox) "min time (s)" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time (s)" "TMAX" nil))) (om-make-point 694 337) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 108 25) (quote "Temporal info") "" (om-make-point 640 179) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:bold)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 166 92) (quote "Select data by choosing $- a stream ID$- a frame type$- a matrix type$- optional temporal range") "" (om-make-point 640 203) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 164 29) (quote "Returns every frame times") "" (om-make-point 650 388) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 687 296) (om-make-point 21 30) 0 "0" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 721 296) (om-make-point 54 30) "1TRC" "\"1TRC\"" nil) (om-load-boxcomment "comment" (om-make-point 138 45) (quote "This loop collects the data in a BPF-Lib") "" (om-make-point 0 361) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 326 68) (quote "Returns:$1) List of data selected in each frames (i.e. list of lists)$2) List of the corresponding time stamps") "" (om-make-point 241 295) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 225 120) (quote "Select data by choosing $- a stream ID$- a frame type$- a matrix type$- a column number (description field)$- optional elements range$- optional temporal range") "" (om-make-point 344 76) nil (om-make-color 0 0 0) (om-make-font "Gill Sans" 14.0 :family "Gill Sans" :style (quote (:plain)) :mode (quote nil))) (om-load-editor-box1 "SDIFFILE" (quote sdiffile) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil))) (om-make-point 69 165) (om-make-point 78 72) (let ((newobj (load-sdif-file (search-file-for-load (om-make-pathname :directory (quote (:relative "in-files")) :device :unspecific :host :unspecific :name "file01" :type "sdif"))))) newobj) "x" nil (pairlis (quote (obj-mode palette-mode inport outport deltapict zoom cmnpref notechancolor? grillestep mode winsize winpos show-stems)) (list 0 0 0 0 (om-make-point 0 0) 1 (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) nil 1000 0 18350450 2621450 (quote t))) nil nil nil nil) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 137 359) nil nil nil (list (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 239 156) (om-make-point 21 30) 4 "4" nil) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 185 266) nil nil nil nil 3) (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "X-POINTS" (list 0 10)) (om-load-inputfun (quote input-funbox) "no documentation" "Y-POINTS" (list 0 100)) (om-load-inputfun (quote input-funbox) "no documentation" "DECIMALS" 4))) (om-make-point 168 193) (om-make-point 86 65) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict picture)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) nil)) nil nil nil nil) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 147 122) nil nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 125 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 204 331) nil nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 129 341) nil nil nil 0)) (quote ((2 0 1 0 nil 0) (3 0 2 2 nil 0) (0 0 2 3 nil 0) (4 0 3 0 nil 0) (1 1 5 0 nil 0) (1 0 6 0 nil 0))) 1 "separate bpf" nil) (om-load-editor-box1 "BPF-LIB" (quote bpf-lib) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "no documentation" "BPF-LIST" (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 10)) (quote (0 100)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj))))) (om-make-point 33 426) (om-make-point 212 96) (if (find-class (quote bpf-lib) nil) (make-instance (quote bpf-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 1.0E-4 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 0.0 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (2.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (4.0E-4 4.0E-4 2.0E-4 1.0E-4 0.0 1.0E-4 2.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (6.0E-4 6.0E-4 3.0E-4 4.0E-4 4.0E-4 1.0E-4 2.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (8.0E-4 0.0011 4.0E-4 3.0E-4 4.0E-4 1.0E-4 3.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (8.0E-4 0.0015 4.0E-4 4.0E-4 4.0E-4 1.0E-4 3.0E-4 2.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (6.0E-4 0.0015 3.0E-4 9.0E-4 5.0E-4 1.0E-4 3.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (7.0E-4 0.0013 2.0E-4 0.0013 7.0E-4 1.0E-4 3.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.001 0.0015 3.0E-4 0.0016 7.0E-4 1.0E-4 4.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.0012 0.0016 3.0E-4 0.0018 8.0E-4 1.0E-4 5.0E-4 2.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.0013 0.0015 3.0E-4 0.0019 7.0E-4 1.0E-4 5.0E-4 1.0E-4 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.0014 0.0015 3.0E-4 0.002 7.0E-4 1.0E-4 5.0E-4 0.0 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.0016 0.0016 3.0E-4 0.0019 7.0E-4 2.0E-4 6.0E-4 0.0 1.0E-4 1.0E-4 1.0E-4 1.0E-4 0.0 1.0E-4 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0.0 10.0 20.0 30.0 40.0 50.0 60.0 70.0 80.0 90.0 100.0 110.0 120.0 130.0 140.0 150.0 160.0)) (quote (0.0018 0.0016 3.0E-4 0.0017 6.0E-4 3.0E-4 6.0E-4 0.0 2.0E-4 0.0 0.0 1.0E-4 1.0E-4 1.0E-4 0.0 0.0 0.0)) (quote bpf) 4))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) newobj)) :from-file t)) nil nil (pairlis (quote (show-stems winpos winsize mode grillestep notechancolor? cmnpref obj-mode palette-mode zoom inport outport deltapict picture)) (list (quote t) 2621450 18350450 0 1000 nil (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 0 0 (om-make-point 0 0) nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 346 214) (om-make-point 32 30) 0.2 "0.2" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 312 214) (om-make-point 32 30) 0.1 "0.1" nil) (om-load-boxcall (quote genfun) "GETSDIFDATA1" (quote getsdifdata) (quote ((om-load-inputfun (quote input-funbox) "sdif file" "SELF" nil) (om-load-inputfun (quote input-funbox) "stream number" "SID" nil) (om-load-inputfun (quote input-funbox) "frame type" "FRAMETYPE" nil) (om-load-inputfun (quote input-funbox) "matrix type" "MATTYPE" nil) (om-load-inputfun (quote input-funbox) "field number" "CNUM" nil) (om-load-inputfun (quote input-funbox) "min row" "RMIN" nil) (om-load-inputfun (quote input-funbox) "max row" "RMAX" nil) (om-load-inputfun (quote input-funbox) "min time" "TMIN" nil) (om-load-inputfun (quote input-funbox) "max time" "TMAX" nil))) (om-make-point 176 243) (om-make-point 172 49) nil nil nil 2) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 212 201) (om-make-point 39 28) "1TRC" "\"1TRC\"" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 186 202) (om-make-point 22 28) 0 "0" nil) (om-load-boxcall (quote bastype) "aux14" (quote t) (quote nil) (om-make-point 253 201) (om-make-point 21 30) 2 "2" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 276 201) (om-make-point 21 30) 3 "3" nil) (om-load-boxcall (quote bastype) "aux9" (quote t) (quote nil) (om-make-point 293 175) (om-make-point 28 30) 50 "50" nil))) (quote ((6 0 2 1 nil 0) (7 0 2 2 nil 0) (7 0 2 3 nil 0) (16 0 12 0 nil 0) (12 0 13 1 nil 0) (11 0 16 0 nil 0) (18 0 16 1 nil 0) (17 0 16 2 nil 0) (17 0 16 3 nil 0) (19 0 16 4 nil 0) (20 0 16 5 nil 0) (21 0 16 6 nil 0) (15 0 16 7 nil 0) (14 0 16 8 nil 0))) nil 6.0501))
