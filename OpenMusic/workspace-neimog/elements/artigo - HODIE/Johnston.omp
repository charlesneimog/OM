; OM File Header - Saved 2020/03/18 21:24:51
; (6.16 :patc (om-make-point 604 60) (om-make-point 182 0) (om-make-point 688 679) "" 183 0 "2020/03/18 17:40:47" "2020/03/18 21:24:51")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Partch")))(setf *om-current-persistent* (om-load-patch1 "Johnston" (quote ((let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 265 76) (om-make-point 26 28) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FIRST-N" (quote first-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 221 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 424 422) (om-make-point 35 28) (list 9) "(9)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 78 452) (om-make-point 575 190) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6720 5520 7176 6144 9120) (5712 6336 6888 7176 8928 8664 8112) (5712 5232 5136 7200 6912 6432 8376 8208 7200) (5064 5328 6144 7008 8928 8400))) :lonset (quote (0 1000 2000 3000 4000)) :ldur (quote ((1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100) (100 100 100 100 100 100 100) (100 100 100 100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((9 9 9 9 9) (9 9 9 9 9 9 9) (9 9 9 9 9 9 9 9 9) (9 9 9 9 9 9))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0) (0 0 0 0 0 0 0) (0 0 0 0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 16 28 (quote ggf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :osc-scoreplayer) 1 nil 1000 0 (om-make-point 919 354) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 273 395) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 3" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 356 302) (om-make-point 203 89) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300)) (quote (1 3 3 2)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF 2" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 299 196) (om-make-point 203 89) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300)) (quote (3 2 1 3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 203 189) (om-make-point 87 58) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "chords" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 112 389) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "LISTLOOP 3" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 220 351) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP 2" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 162 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LISTLOOP" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 94 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil) (om-load-inputfun (quote input-funbox) "additional elements" "LST?" nil))) (om-make-point 115 410) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 180 479) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "grave" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 118 224) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 179 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 84 71) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 106 98) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 134 116) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 "(lambda (in3 in2 in0 in1)$$(let* $$((action1 (x->dx (sort-list in3)))$$(action2 (x-append (om- in2 (om* 1200 (arithm-ser 1 in0 1))) in2 (om+ in2 (om* 1200 (arithm-ser 1 in1 1)))))$$(action3 (loop for cknloop in action2 collect (dx->x cknloop action1))))$$(remove-dup (flat action3) 'eq 1)))$") (quote ((om-load-inputfun (quote input-funbox) "" "IN3" nil) (om-load-inputfun (quote input-funbox) "" "IN2" nil) (om-load-inputfun (quote input-funbox) "" "IN0" nil) (om-load-inputfun (quote input-funbox) "" "IN1" nil))) (om-make-point 65 142) nil (list (list 6000 6144 6264 6336 6432 6528 6720 6888 6912 7008 7176 7200)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 38 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 174 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 196 309) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 185 57) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 48 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 265 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 165 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (9 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 4 2 nil 0) (3 0 4 3 nil 0) (4 0 5 0 nil 0) (8 0 6 0 nil 0) (0 0 7 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "grave" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "meio" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 191 242) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 179 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 84 71) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 106 98) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 127 119) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 "(lambda (in3 in2 in0 in1)$$(let* $((action1 (x->dx (sort-list in3)))$(action2 (x-append (om- in2 (om* 1200 (arithm-ser 1 in0 1))) in2 (om+ in2 (om* 1200 (arithm-ser 1 in1 1)))))$(action3 (loop for cknloop in action2 collect (dx->x cknloop action1))))$(remove-dup (flat action3) 'eq 1)))$") (quote ((om-load-inputfun (quote input-funbox) "" "IN3" nil) (om-load-inputfun (quote input-funbox) "" "IN2" nil) (om-load-inputfun (quote input-funbox) "" "IN0" nil) (om-load-inputfun (quote input-funbox) "" "IN1" nil))) (om-make-point 65 142) nil (list (list 6000 6144 6264 6336 6432 6528 6720 6888 6912 7008 7176 7200)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 38 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 174 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 196 309) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 185 57) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 48 46) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 265 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 165 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (9 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 4 2 nil 0) (3 0 4 3 nil 0) (4 0 5 0 nil 0) (8 0 6 0 nil 0) (0 0 7 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "meio" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "aguda" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 249 257) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 179 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 74 68) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 115 86) (om-make-point 26 28) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 143 110) (om-make-point 26 28) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.16 "(lambda (in3 in2 in0 in1)$$(let* $((action1 (x->dx (sort-list in3)))$(action2 (x-append (om- in2 (om* 1200 (arithm-ser 1 in0 1))) in2 (om+ in2 (om* 1200 (arithm-ser 1 in1 1)))))$(action3 (loop for cknloop in action2 collect (dx->x cknloop action1))))$(remove-dup (flat action3) 'eq 1)))$") (quote ((om-load-inputfun (quote input-funbox) "" "IN3" nil) (om-load-inputfun (quote input-funbox) "" "IN2" nil) (om-load-inputfun (quote input-funbox) "" "IN0" nil) (om-load-inputfun (quote input-funbox) "" "IN1" nil))) (om-make-point 65 142) nil (list (list 6000 6144 6264 6336 6432 6528 6720 6888 6912 7008 7176 7200)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "NTH-RANDOM" (quote nth-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 61 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 174 139) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 196 309) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 185 57) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 20 32) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 265 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 165 412) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((5 0 0 0 nil 0) (6 0 0 1 nil 0) (9 0 4 0 nil 0) (1 0 4 1 nil 0) (2 0 4 2 nil 0) (3 0 4 3 nil 0) (4 0 5 0 nil 0) (8 0 6 0 nil 0) (0 0 7 0 nil 0) (7 1 10 0 nil 0) (7 0 11 0 nil 0))) 1 "aguda" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 384 145) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 317 128) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 262 111) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 327 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 29 111) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 229 573) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 129 573) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((7 0 0 0 nil 3) (6 0 1 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 1) (1 0 3 1 nil 2) (0 0 3 2 nil 3) (3 0 4 0 nil 0) (12 0 5 0 nil 1) (10 0 5 1 nil 1) (12 0 6 0 nil 2) (9 0 6 1 nil 2) (12 0 7 0 nil 3) (8 0 7 1 nil 3) (11 0 8 0 nil 0) (11 0 9 0 nil 0) (11 0 10 0 nil 0) (4 1 13 0 nil 0) (4 0 14 0 nil 0))) 1 "chords" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 160 134) (om-make-point 44 28) 7200 "7200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 112 133) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPF" (quote bpf) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 373 83) (om-make-point 203 89) (let ((newobj (when (find-class (quote bpf) nil) (let ((newbpf (simple-bpf-from-list (quote (0 100 200 300)) (quote (2 1 3 3)) (quote bpf) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) nil nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 219 26) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OCTAVE-REDUCE" (quote octave-reduce) (quote ((om-load-inputfun (quote input-funbox) "list of midicents" "NOTE" (list 4800 7200 6000)) (om-load-inputfun (quote input-funbox) "nota mais grave" "GRAVE" 6000) (om-load-inputfun (quote input-funbox) "octave" "OCTAVE" 2))) (om-make-point 108 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 18 67) (om-make-point 44 28) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 52 41) (om-make-point 43 28) 11/8 "11/8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "INTERVAL-SOB" (quote interval-sob) (quote ((om-load-inputfun (quote input-funbox) "fundamental note of sobreposition" "FUND" 6000) (om-load-inputfun (quote input-funbox) "Just Intonation interval" "RATIO" 11/8) (om-load-inputfun (quote input-funbox) "list of sopreposition (I recomend the use o 'crible' object" "SIEVE" (list 2 3 7 11 12)))) (om-make-point 34 102) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "sieve" (om-load-patch-abs1 "sieve" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 450 355) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE 2" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 70 93) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 3 4 23) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CRIBLE" (quote crible) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "cr-exp" (list 2 0 18)))) (om-make-point 155 92) (om-make-point 70 50) (if (find-class (quote crible) nil) (make-instance (quote crible) :cr-exp (list 4 6 24) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 4" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 58 209) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 3" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 155 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-UNION" (quote c-union) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 380 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE 2" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 390 270) (om-make-point 64 66) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 88 53) (om-make-point 61 28) (list 3 4 24) "(3 4 24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 189 58) (om-make-point 61 28) (list 4 6 24) "(4 6 24)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "C-INTERSECTION" (quote c-intersection) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "CRIBLE" nil))) (om-make-point 265 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 4" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 36 354) (om-make-point 159 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 131 16) "(4 7 10 13 16 19 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 3" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 121 277) (om-make-point 137 47) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 109 23) "(6 10 14 18 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX 2" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 268 345) (om-make-point 96 41) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 68 17) "(10 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REVEL-CRIBLE" (quote revel-crible) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil))) (om-make-point 286 272) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 212 427) (om-make-point 253 40) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 225 16) "(4 6 7 10 13 14 16 18 19 22)" :font (om-make-font "Verdana" 11.25 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (7 0 1 1 nil 0) (8 0 2 1 nil 0) (1 0 3 0 nil 0) (2 0 4 0 nil 0) (1 0 5 0 nil 0) (2 0 5 1 nil 0) (5 0 6 0 nil 0) (1 0 9 0 nil 0) (2 0 9 1 nil 0) (3 0 10 0 nil 0) (4 0 11 0 nil 0) (13 0 12 0 nil 0) (9 0 13 0 nil 0) (6 0 14 0 nil 0))) 6.16 nil "" (om-make-point -8 -8) (om-make-point 1366 685)) (quote nil) (om-make-point 113 2) nil (list (list 4 6 7 10 13 14 16 18 19 22)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 1 0 nil 0) (0 0 1 1 nil 0) (8 0 3 1 nil 0) (2 0 3 6 nil 0) (5 2 4 0 nil 0) (5 2 4 1 nil 0) (5 2 4 2 nil 4) (7 0 5 2 nil 4) (7 0 6 2 nil 3) (1 0 7 0 nil 0) (13 0 8 0 nil 0) (4 0 8 1 nil 0) (1 0 11 2 nil 0) (17 0 12 0 nil 0) (16 0 13 0 nil 0) (10 0 13 1 nil 0) (9 0 13 2 nil 0) (14 0 16 0 nil 0) (15 0 16 1 nil 0) (17 0 16 2 nil 0))) nil 6.16))
